
watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d864  08000240  08000240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026ec  0802daa4  0802daa4  0002eaa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08030190  08030190  00031190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08030338  08030338  00031338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00000c80  08030350  08030350  00031350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  08030fd0  08030fd0  00031fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  08030fe0  08030fe0  00031fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  08030fe8  08030fe8  00031fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000008  08030ffc  08030ffc  00031ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         000000fc  20000000  08031004  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_Framebuffer 00045600  200000fc  08031100  000330fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferA 00000100  20045700  08076700  00078700  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferB 00000100  20045800  08076800  00078800  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00016ec0  20045900  08076900  00078900  2**2
                  ALLOC
 15 ._user_heap_stack 00000a00  2005c7c0  08076900  000797c0  2**0
                  ALLOC
 16 .ARM.attributes 00000036  00000000  00000000  00078900  2**0
                  CONTENTS, READONLY
 17 .debug_info   0009a315  00000000  00000000  00078936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00011aa2  00000000  00000000  00112c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003cf0  00000000  00000000  001246f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002dc0  00000000  00000000  001283e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00042c52  00000000  00000000  0012b1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004dc07  00000000  00000000  0016ddf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0017a875  00000000  00000000  001bb9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  0033626e  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00010b78  00000000  00000000  00336330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000047  00000000  00000000  00346ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	@ (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20045900 	.word	0x20045900
 800025c:	00000000 	.word	0x00000000
 8000260:	0802da8c 	.word	0x0802da8c

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	@ (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20045904 	.word	0x20045904
 800027c:	0802da8c 	.word	0x0802da8c

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9fb 	b.w	8000698 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b9b0 	b.w	8000698 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000354:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000356:	4688      	mov	r8, r1
 8000358:	4604      	mov	r4, r0
 800035a:	468e      	mov	lr, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d95f      	bls.n	8000426 <__udivmoddi4+0xd6>
 8000366:	fab2 f682 	clz	r6, r2
 800036a:	b14e      	cbz	r6, 8000380 <__udivmoddi4+0x30>
 800036c:	f1c6 0320 	rsb	r3, r6, #32
 8000370:	fa01 fe06 	lsl.w	lr, r1, r6
 8000374:	40b7      	lsls	r7, r6
 8000376:	40b4      	lsls	r4, r6
 8000378:	fa20 f303 	lsr.w	r3, r0, r3
 800037c:	ea43 0e0e 	orr.w	lr, r3, lr
 8000380:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	0c23      	lsrs	r3, r4, #16
 800038a:	fbbe f1f8 	udiv	r1, lr, r8
 800038e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000392:	fb01 f20c 	mul.w	r2, r1, ip
 8000396:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800039a:	429a      	cmp	r2, r3
 800039c:	d907      	bls.n	80003ae <__udivmoddi4+0x5e>
 800039e:	18fb      	adds	r3, r7, r3
 80003a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x5c>
 80003a6:	429a      	cmp	r2, r3
 80003a8:	f200 8154 	bhi.w	8000654 <__udivmoddi4+0x304>
 80003ac:	4601      	mov	r1, r0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	b2a2      	uxth	r2, r4
 80003b2:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b6:	fb08 3310 	mls	r3, r8, r0, r3
 80003ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80003be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80003c2:	4594      	cmp	ip, r2
 80003c4:	d90b      	bls.n	80003de <__udivmoddi4+0x8e>
 80003c6:	18ba      	adds	r2, r7, r2
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	bf2c      	ite	cs
 80003ce:	2401      	movcs	r4, #1
 80003d0:	2400      	movcc	r4, #0
 80003d2:	4594      	cmp	ip, r2
 80003d4:	d902      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003d6:	2c00      	cmp	r4, #0
 80003d8:	f000 813f 	beq.w	800065a <__udivmoddi4+0x30a>
 80003dc:	4618      	mov	r0, r3
 80003de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e2:	eba2 020c 	sub.w	r2, r2, ip
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11d      	cbz	r5, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40f2      	lsrs	r2, r6
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c5 2300 	strd	r2, r3, [r5]
 80003f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d905      	bls.n	8000406 <__udivmoddi4+0xb6>
 80003fa:	b10d      	cbz	r5, 8000400 <__udivmoddi4+0xb0>
 80003fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	4608      	mov	r0, r1
 8000404:	e7f5      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000406:	fab3 f183 	clz	r1, r3
 800040a:	2900      	cmp	r1, #0
 800040c:	d14e      	bne.n	80004ac <__udivmoddi4+0x15c>
 800040e:	4543      	cmp	r3, r8
 8000410:	f0c0 8112 	bcc.w	8000638 <__udivmoddi4+0x2e8>
 8000414:	4282      	cmp	r2, r0
 8000416:	f240 810f 	bls.w	8000638 <__udivmoddi4+0x2e8>
 800041a:	4608      	mov	r0, r1
 800041c:	2d00      	cmp	r5, #0
 800041e:	d0e8      	beq.n	80003f2 <__udivmoddi4+0xa2>
 8000420:	e9c5 4e00 	strd	r4, lr, [r5]
 8000424:	e7e5      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000426:	2a00      	cmp	r2, #0
 8000428:	f000 80ac 	beq.w	8000584 <__udivmoddi4+0x234>
 800042c:	fab2 f682 	clz	r6, r2
 8000430:	2e00      	cmp	r6, #0
 8000432:	f040 80bb 	bne.w	80005ac <__udivmoddi4+0x25c>
 8000436:	1a8b      	subs	r3, r1, r2
 8000438:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800043c:	b2bc      	uxth	r4, r7
 800043e:	2101      	movs	r1, #1
 8000440:	0c02      	lsrs	r2, r0, #16
 8000442:	b280      	uxth	r0, r0
 8000444:	fbb3 fcfe 	udiv	ip, r3, lr
 8000448:	fb0e 331c 	mls	r3, lr, ip, r3
 800044c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000450:	fb04 f20c 	mul.w	r2, r4, ip
 8000454:	429a      	cmp	r2, r3
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x126>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f10c 38ff 	add.w	r8, ip, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0901 	movcs.w	r9, #1
 8000464:	f04f 0900 	movcc.w	r9, #0
 8000468:	429a      	cmp	r2, r3
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x124>
 800046c:	f1b9 0f00 	cmp.w	r9, #0
 8000470:	f000 80ec 	beq.w	800064c <__udivmoddi4+0x2fc>
 8000474:	46c4      	mov	ip, r8
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	fbb3 f8fe 	udiv	r8, r3, lr
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	fb04 f408 	mul.w	r4, r4, r8
 8000484:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000488:	4294      	cmp	r4, r2
 800048a:	d90b      	bls.n	80004a4 <__udivmoddi4+0x154>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f108 33ff 	add.w	r3, r8, #4294967295
 8000492:	bf2c      	ite	cs
 8000494:	2001      	movcs	r0, #1
 8000496:	2000      	movcc	r0, #0
 8000498:	4294      	cmp	r4, r2
 800049a:	d902      	bls.n	80004a2 <__udivmoddi4+0x152>
 800049c:	2800      	cmp	r0, #0
 800049e:	f000 80d1 	beq.w	8000644 <__udivmoddi4+0x2f4>
 80004a2:	4698      	mov	r8, r3
 80004a4:	1b12      	subs	r2, r2, r4
 80004a6:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80004aa:	e79d      	b.n	80003e8 <__udivmoddi4+0x98>
 80004ac:	f1c1 0620 	rsb	r6, r1, #32
 80004b0:	408b      	lsls	r3, r1
 80004b2:	fa08 f401 	lsl.w	r4, r8, r1
 80004b6:	fa00 f901 	lsl.w	r9, r0, r1
 80004ba:	fa22 f706 	lsr.w	r7, r2, r6
 80004be:	fa28 f806 	lsr.w	r8, r8, r6
 80004c2:	408a      	lsls	r2, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	fa20 f306 	lsr.w	r3, r0, r6
 80004ca:	0c38      	lsrs	r0, r7, #16
 80004cc:	4323      	orrs	r3, r4
 80004ce:	fa1f fc87 	uxth.w	ip, r7
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	fbb8 fef0 	udiv	lr, r8, r0
 80004d8:	fb00 881e 	mls	r8, r0, lr, r8
 80004dc:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80004e0:	fb0e f80c 	mul.w	r8, lr, ip
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	d90e      	bls.n	8000506 <__udivmoddi4+0x1b6>
 80004e8:	193c      	adds	r4, r7, r4
 80004ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ee:	bf2c      	ite	cs
 80004f0:	f04f 0b01 	movcs.w	fp, #1
 80004f4:	f04f 0b00 	movcc.w	fp, #0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d903      	bls.n	8000504 <__udivmoddi4+0x1b4>
 80004fc:	f1bb 0f00 	cmp.w	fp, #0
 8000500:	f000 80b8 	beq.w	8000674 <__udivmoddi4+0x324>
 8000504:	46d6      	mov	lr, sl
 8000506:	eba4 0408 	sub.w	r4, r4, r8
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000512:	fb00 4413 	mls	r4, r0, r3, r4
 8000516:	fb03 fc0c 	mul.w	ip, r3, ip
 800051a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800051e:	45a4      	cmp	ip, r4
 8000520:	d90e      	bls.n	8000540 <__udivmoddi4+0x1f0>
 8000522:	193c      	adds	r4, r7, r4
 8000524:	f103 30ff 	add.w	r0, r3, #4294967295
 8000528:	bf2c      	ite	cs
 800052a:	f04f 0801 	movcs.w	r8, #1
 800052e:	f04f 0800 	movcc.w	r8, #0
 8000532:	45a4      	cmp	ip, r4
 8000534:	d903      	bls.n	800053e <__udivmoddi4+0x1ee>
 8000536:	f1b8 0f00 	cmp.w	r8, #0
 800053a:	f000 809f 	beq.w	800067c <__udivmoddi4+0x32c>
 800053e:	4603      	mov	r3, r0
 8000540:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000544:	eba4 040c 	sub.w	r4, r4, ip
 8000548:	fba0 ec02 	umull	lr, ip, r0, r2
 800054c:	4564      	cmp	r4, ip
 800054e:	4673      	mov	r3, lr
 8000550:	46e0      	mov	r8, ip
 8000552:	d302      	bcc.n	800055a <__udivmoddi4+0x20a>
 8000554:	d107      	bne.n	8000566 <__udivmoddi4+0x216>
 8000556:	45f1      	cmp	r9, lr
 8000558:	d205      	bcs.n	8000566 <__udivmoddi4+0x216>
 800055a:	ebbe 0302 	subs.w	r3, lr, r2
 800055e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000562:	3801      	subs	r0, #1
 8000564:	46e0      	mov	r8, ip
 8000566:	b15d      	cbz	r5, 8000580 <__udivmoddi4+0x230>
 8000568:	ebb9 0203 	subs.w	r2, r9, r3
 800056c:	eb64 0408 	sbc.w	r4, r4, r8
 8000570:	fa04 f606 	lsl.w	r6, r4, r6
 8000574:	fa22 f301 	lsr.w	r3, r2, r1
 8000578:	40cc      	lsrs	r4, r1
 800057a:	431e      	orrs	r6, r3
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e736      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000584:	fbb1 fcf2 	udiv	ip, r1, r2
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	4614      	mov	r4, r2
 800058c:	b280      	uxth	r0, r0
 800058e:	4696      	mov	lr, r2
 8000590:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000594:	2620      	movs	r6, #32
 8000596:	4690      	mov	r8, r2
 8000598:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 800059c:	4610      	mov	r0, r2
 800059e:	fbb1 f1f2 	udiv	r1, r1, r2
 80005a2:	eba3 0308 	sub.w	r3, r3, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e74b      	b.n	8000444 <__udivmoddi4+0xf4>
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	f1c6 0320 	rsb	r3, r6, #32
 80005b2:	fa01 f206 	lsl.w	r2, r1, r6
 80005b6:	fa21 f803 	lsr.w	r8, r1, r3
 80005ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005be:	fa20 f303 	lsr.w	r3, r0, r3
 80005c2:	b2bc      	uxth	r4, r7
 80005c4:	40b0      	lsls	r0, r6
 80005c6:	4313      	orrs	r3, r2
 80005c8:	0c02      	lsrs	r2, r0, #16
 80005ca:	0c19      	lsrs	r1, r3, #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	fbb8 f9fe 	udiv	r9, r8, lr
 80005d2:	fb0e 8819 	mls	r8, lr, r9, r8
 80005d6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80005da:	fb09 f804 	mul.w	r8, r9, r4
 80005de:	4588      	cmp	r8, r1
 80005e0:	d951      	bls.n	8000686 <__udivmoddi4+0x336>
 80005e2:	1879      	adds	r1, r7, r1
 80005e4:	f109 3cff 	add.w	ip, r9, #4294967295
 80005e8:	bf2c      	ite	cs
 80005ea:	f04f 0a01 	movcs.w	sl, #1
 80005ee:	f04f 0a00 	movcc.w	sl, #0
 80005f2:	4588      	cmp	r8, r1
 80005f4:	d902      	bls.n	80005fc <__udivmoddi4+0x2ac>
 80005f6:	f1ba 0f00 	cmp.w	sl, #0
 80005fa:	d031      	beq.n	8000660 <__udivmoddi4+0x310>
 80005fc:	eba1 0108 	sub.w	r1, r1, r8
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	fb0e 1119 	mls	r1, lr, r9, r1
 800060c:	b29b      	uxth	r3, r3
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	4543      	cmp	r3, r8
 8000614:	d235      	bcs.n	8000682 <__udivmoddi4+0x332>
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	f109 31ff 	add.w	r1, r9, #4294967295
 800061c:	bf2c      	ite	cs
 800061e:	f04f 0a01 	movcs.w	sl, #1
 8000622:	f04f 0a00 	movcc.w	sl, #0
 8000626:	4543      	cmp	r3, r8
 8000628:	d2bb      	bcs.n	80005a2 <__udivmoddi4+0x252>
 800062a:	f1ba 0f00 	cmp.w	sl, #0
 800062e:	d1b8      	bne.n	80005a2 <__udivmoddi4+0x252>
 8000630:	f1a9 0102 	sub.w	r1, r9, #2
 8000634:	443b      	add	r3, r7
 8000636:	e7b4      	b.n	80005a2 <__udivmoddi4+0x252>
 8000638:	1a84      	subs	r4, r0, r2
 800063a:	eb68 0203 	sbc.w	r2, r8, r3
 800063e:	2001      	movs	r0, #1
 8000640:	4696      	mov	lr, r2
 8000642:	e6eb      	b.n	800041c <__udivmoddi4+0xcc>
 8000644:	443a      	add	r2, r7
 8000646:	f1a8 0802 	sub.w	r8, r8, #2
 800064a:	e72b      	b.n	80004a4 <__udivmoddi4+0x154>
 800064c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000650:	443b      	add	r3, r7
 8000652:	e710      	b.n	8000476 <__udivmoddi4+0x126>
 8000654:	3902      	subs	r1, #2
 8000656:	443b      	add	r3, r7
 8000658:	e6a9      	b.n	80003ae <__udivmoddi4+0x5e>
 800065a:	443a      	add	r2, r7
 800065c:	3802      	subs	r0, #2
 800065e:	e6be      	b.n	80003de <__udivmoddi4+0x8e>
 8000660:	eba7 0808 	sub.w	r8, r7, r8
 8000664:	f1a9 0c02 	sub.w	ip, r9, #2
 8000668:	4441      	add	r1, r8
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	e7c9      	b.n	8000608 <__udivmoddi4+0x2b8>
 8000674:	f1ae 0e02 	sub.w	lr, lr, #2
 8000678:	443c      	add	r4, r7
 800067a:	e744      	b.n	8000506 <__udivmoddi4+0x1b6>
 800067c:	3b02      	subs	r3, #2
 800067e:	443c      	add	r4, r7
 8000680:	e75e      	b.n	8000540 <__udivmoddi4+0x1f0>
 8000682:	4649      	mov	r1, r9
 8000684:	e78d      	b.n	80005a2 <__udivmoddi4+0x252>
 8000686:	eba1 0108 	sub.w	r1, r1, r8
 800068a:	46cc      	mov	ip, r9
 800068c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000690:	fb09 f804 	mul.w	r8, r9, r4
 8000694:	e7b8      	b.n	8000608 <__udivmoddi4+0x2b8>
 8000696:	bf00      	nop

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <CST816D_ReadReg>:
// 外部声明
extern I2C_HandleTypeDef hi2c3;

// 读取CST816D寄存器
HAL_StatusTypeDef CST816D_ReadReg(uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c3, (CST816D_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	88bb      	ldrh	r3, [r7, #4]
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	212a      	movs	r1, #42	@ 0x2a
 80006c0:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <CST816D_ReadReg+0x34>)
 80006c2:	f003 fea3 	bl	800440c <HAL_I2C_Mem_Read>
 80006c6:	4603      	mov	r3, r0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20045aa8 	.word	0x20045aa8

080006d4 <CST816D_WriteReg>:

// 写入CST816D寄存器
HAL_StatusTypeDef CST816D_WriteReg(uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af04      	add	r7, sp, #16
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Write(&hi2c3, (CST816D_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	2364      	movs	r3, #100	@ 0x64
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	212a      	movs	r1, #42	@ 0x2a
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <CST816D_WriteReg+0x34>)
 80006fa:	f003 fd73 	bl	80041e4 <HAL_I2C_Mem_Write>
 80006fe:	4603      	mov	r3, r0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20045aa8 	.word	0x20045aa8

0800070c <CST816D_Init>:

// 复位并初始化CST816D
uint8_t CST816D_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
    uint8_t temp_data;

    // 硬件复位CST816D
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // RST引脚拉低
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000718:	4821      	ldr	r0, [pc, #132]	@ (80007a0 <CST816D_Init+0x94>)
 800071a:	f003 fcaf 	bl	800407c <HAL_GPIO_WritePin>
    HAL_Delay(20);                                         // 延时20ms（增加复位时间）
 800071e:	2014      	movs	r0, #20
 8000720:	f001 fb86 	bl	8001e30 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);   // RST引脚拉高
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072a:	481d      	ldr	r0, [pc, #116]	@ (80007a0 <CST816D_Init+0x94>)
 800072c:	f003 fca6 	bl	800407c <HAL_GPIO_WritePin>
    HAL_Delay(100);                                        // 延时100ms等待芯片稳定启动
 8000730:	2064      	movs	r0, #100	@ 0x64
 8000732:	f001 fb7d 	bl	8001e30 <HAL_Delay>

    // 关闭自动休眠，确保持续工作
    temp_data = 0x01; // 禁用自动休眠
 8000736:	2301      	movs	r3, #1
 8000738:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_DIS_AUTO_SLEEP, &temp_data, 1);
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	2201      	movs	r2, #1
 800073e:	4619      	mov	r1, r3
 8000740:	20fe      	movs	r0, #254	@ 0xfe
 8000742:	f7ff ffc7 	bl	80006d4 <CST816D_WriteReg>

    // 重新设置扫描周期 - 适合双击检测的更快扫描
    temp_data = 0; // 扫描周期设为最小值(0)，最高速
 8000746:	2300      	movs	r3, #0
 8000748:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_NOR_SCAN, &temp_data, 1);
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	2201      	movs	r2, #1
 800074e:	4619      	mov	r1, r3
 8000750:	20ee      	movs	r0, #238	@ 0xee
 8000752:	f7ff ffbf 	bl	80006d4 <CST816D_WriteReg>

    // 设置中断脉冲宽度
    temp_data = 5; // 更小的脉冲宽度，提高响应速度
 8000756:	2305      	movs	r3, #5
 8000758:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_IRQ_PULSE, &temp_data, 1);
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	2201      	movs	r2, #1
 800075e:	4619      	mov	r1, r3
 8000760:	20ed      	movs	r0, #237	@ 0xed
 8000762:	f7ff ffb7 	bl	80006d4 <CST816D_WriteReg>

    // 配置中断控制 - 启用触摸和所有变化检测
    temp_data = EnTouch | EnChange | EnMotion;
 8000766:	2370      	movs	r3, #112	@ 0x70
 8000768:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_IRQ_CTL, &temp_data, 1);
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	2201      	movs	r2, #1
 800076e:	4619      	mov	r1, r3
 8000770:	20fa      	movs	r0, #250	@ 0xfa
 8000772:	f7ff ffaf 	bl	80006d4 <CST816D_WriteReg>
    // 设置长按时间(500ms)
    //    temp_data = 10;
    //    CST816D_WriteReg(CST816D_REG_LONG_PRESS, &temp_data, 1);

    // 设置动作识别掩码 - 确保双击能被检测
    temp_data = 0x07; // 启用滑动和双击 (0x01+0x02+0x03)
 8000776:	2307      	movs	r3, #7
 8000778:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_MOTION_MASK, &temp_data, 1);
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	20ec      	movs	r0, #236	@ 0xec
 8000782:	f7ff ffa7 	bl	80006d4 <CST816D_WriteReg>

    // 配置动作角度 - 更宽松的滑动手势检测
    temp_data = 60;
 8000786:	233c      	movs	r3, #60	@ 0x3c
 8000788:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_MOTION_ANGLE, &temp_data, 1);
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	2201      	movs	r2, #1
 800078e:	4619      	mov	r1, r3
 8000790:	20ef      	movs	r0, #239	@ 0xef
 8000792:	f7ff ff9f 	bl	80006d4 <CST816D_WriteReg>

    return 1; // 初始化成功
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	42020400 	.word	0x42020400

080007a4 <CST816D_IsTouched>:
    return HAL_OK;
}

// 检测触摸(通过INT引脚) - 优化速度版本
uint8_t CST816D_IsTouched(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    // 直接返回INT引脚状态，移除2ms延时
    return (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET);
 80007a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <CST816D_IsTouched+0x20>)
 80007ae:	f003 fc4d 	bl	800404c <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf0c      	ite	eq
 80007b8:	2301      	moveq	r3, #1
 80007ba:	2300      	movne	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	42020400 	.word	0x42020400

080007c8 <CST816D_SetMotionMask>:
    return CST816D_WriteReg(CST816D_REG_IRQ_PULSE, &width, 1);
}

// 设置动作识别掩码 (使能/禁用特定手势)
HAL_StatusTypeDef CST816D_SetMotionMask(uint8_t mask)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
    return CST816D_WriteReg(CST816D_REG_MOTION_MASK, &mask, 1);
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	20ec      	movs	r0, #236	@ 0xec
 80007da:	f7ff ff7b 	bl	80006d4 <CST816D_WriteReg>
 80007de:	4603      	mov	r3, r0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <CST816D_SetIrqCtl>:
    return CST816D_SetMotionMask(motion_mask);
}

// 设置中断控制寄存器
HAL_StatusTypeDef CST816D_SetIrqCtl(uint8_t irq_ctl)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
    return CST816D_WriteReg(CST816D_REG_IRQ_CTL, &irq_ctl, 1);
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	20fa      	movs	r0, #250	@ 0xfa
 80007fa:	f7ff ff6b 	bl	80006d4 <CST816D_WriteReg>
 80007fe:	4603      	mov	r3, r0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <GPDMA_Callback>:

/**
 * @brief Register DMA callbacks
 */
void GPDMA_Callback(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&handle_GPDMA1_Channel13, HAL_DMA_XFER_CPLT_CB_ID, DMA_TxCpltCallback);
 800080c:	4a05      	ldr	r2, [pc, #20]	@ (8000824 <GPDMA_Callback+0x1c>)
 800080e:	2100      	movs	r1, #0
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <GPDMA_Callback+0x20>)
 8000812:	f001 ffc1 	bl	8002798 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&handle_GPDMA1_Channel13, HAL_DMA_XFER_ERROR_CB_ID, DMA_TxErrorCallback);
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <GPDMA_Callback+0x24>)
 8000818:	2102      	movs	r1, #2
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <GPDMA_Callback+0x20>)
 800081c:	f001 ffbc 	bl	8002798 <HAL_DMA_RegisterCallback>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	08000831 	.word	0x08000831
 8000828:	20045a30 	.word	0x20045a30
 800082c:	08000861 	.word	0x08000861

08000830 <DMA_TxCpltCallback>:
/**
 * @brief DMA transfer complete callback
 * @param hdma: DMA handle
 */
static void DMA_TxCpltCallback(DMA_HandleTypeDef *hdma)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
    if (hdma == &handle_GPDMA1_Channel13)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a07      	ldr	r2, [pc, #28]	@ (8000858 <DMA_TxCpltCallback+0x28>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d105      	bne.n	800084c <DMA_TxCpltCallback+0x1c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000840:	f3bf 8f4f 	dsb	sy
}
 8000844:	bf00      	nop
    {
                __DSB(); // 添加内存屏障
        displayRefreshing = false;
 8000846:	4b05      	ldr	r3, [pc, #20]	@ (800085c <DMA_TxCpltCallback+0x2c>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
    }
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	20045a30 	.word	0x20045a30
 800085c:	2004591c 	.word	0x2004591c

08000860 <DMA_TxErrorCallback>:
/**
 * @brief DMA transfer error callback
 * @param hdma: DMA handle
 */
static void DMA_TxErrorCallback(DMA_HandleTypeDef *hdma)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    displayRefreshing = false;
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <DMA_TxErrorCallback+0x1c>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	2004591c 	.word	0x2004591c

08000880 <GPDMA_Queue_Config>:

/**
 * @brief Configure DMA Linked-list Queue
 */
static HAL_StatusTypeDef GPDMA_Queue_Config(DMA_QListTypeDef *Queue, uint8_t node_cnt, uint8_t *src, uint8_t *dst, uint32_t data_size)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0a0      	sub	sp, #128	@ 0x80
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	460b      	mov	r3, r1
 800088e:	72fb      	strb	r3, [r7, #11]
    static DMA_NodeTypeDef Nodes[(((WIDTH * HEIGHT * 2) / ((64 * 1024) - 2)) + 1)];
    HAL_StatusTypeDef ret = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    /* DMA node configuration declaration */
    DMA_NodeConfTypeDef pNodeConfig;
    uint8_t i;

    /* Set node configuration ################################################*/
    pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8000896:	2322      	movs	r3, #34	@ 0x22
 8000898:	613b      	str	r3, [r7, #16]
    pNodeConfig.Init.Mode = DMA_NORMAL;
 800089a:	2300      	movs	r3, #0
 800089c:	647b      	str	r3, [r7, #68]	@ 0x44
    pNodeConfig.Init.Request = DMA_REQUEST_SW;
 800089e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008a2:	617b      	str	r3, [r7, #20]
    pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
    pNodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ac:	61fb      	str	r3, [r7, #28]
    pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80008ae:	2308      	movs	r3, #8
 80008b0:	623b      	str	r3, [r7, #32]
    pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pNodeConfig.Init.SrcDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pNodeConfig.Init.SrcBurstLength = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	637b      	str	r3, [r7, #52]	@ 0x34
    pNodeConfig.Init.DestBurstLength = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0 | DMA_DEST_ALLOCATED_PORT0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pNodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80008ca:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80008ce:	643b      	str	r3, [r7, #64]	@ 0x40
    pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	663b      	str	r3, [r7, #96]	@ 0x60
    pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	667b      	str	r3, [r7, #100]	@ 0x64
    pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	66bb      	str	r3, [r7, #104]	@ 0x68
    pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80008e4:	2300      	movs	r3, #0
 80008e6:	657b      	str	r3, [r7, #84]	@ 0x54
    pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80008ec:	2300      	movs	r3, #0
 80008ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    pNodeConfig.SrcAddress = (uint32_t)src;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	673b      	str	r3, [r7, #112]	@ 0x70
    pNodeConfig.DstAddress = (uint32_t)dst;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (node_cnt > 1)
 80008f8:	7afb      	ldrb	r3, [r7, #11]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d903      	bls.n	8000906 <GPDMA_Queue_Config+0x86>
    {
        pNodeConfig.DataSize = ((64 * 1024) - 2);
 80008fe:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8000902:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000904:	e002      	b.n	800090c <GPDMA_Queue_Config+0x8c>
    }
    else
    {
        pNodeConfig.DataSize = data_size;
 8000906:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800090a:	67bb      	str	r3, [r7, #120]	@ 0x78
    }

    for (i = 0; ((ret == HAL_OK) && (i < node_cnt)); i++)
 800090c:	2300      	movs	r3, #0
 800090e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000912:	e08a      	b.n	8000a2a <GPDMA_Queue_Config+0x1aa>
    {
        if (i == 0)
 8000914:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000918:	2b00      	cmp	r3, #0
 800091a:	d13a      	bne.n	8000992 <GPDMA_Queue_Config+0x112>
        {
            /* Reset The Queue */
            ret = HAL_DMAEx_List_ResetQ(Queue);
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f002 fca6 	bl	800326e <HAL_DMAEx_List_ResetQ>
 8000922:	4603      	mov	r3, r0
 8000924:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000928:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <GPDMA_Queue_Config+0xb6>
            {
                return ret;
 8000930:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000934:	e085      	b.n	8000a42 <GPDMA_Queue_Config+0x1c2>
            }
            /* Build Node first Node */
            ret = HAL_DMAEx_List_BuildNode(&pNodeConfig, &Nodes[i]);
 8000936:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800093a:	4613      	mov	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4413      	add	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4a42      	ldr	r2, [pc, #264]	@ (8000a4c <GPDMA_Queue_Config+0x1cc>)
 8000944:	441a      	add	r2, r3
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f002 fb97 	bl	8003080 <HAL_DMAEx_List_BuildNode>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000958:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <GPDMA_Queue_Config+0xe6>
            {
                return ret;
 8000960:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000964:	e06d      	b.n	8000a42 <GPDMA_Queue_Config+0x1c2>
            }
            /* Insert Node to Queue */
            ret = HAL_DMAEx_List_InsertNode_Head(Queue, &Nodes[i]);
 8000966:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800096a:	4613      	mov	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4a36      	ldr	r2, [pc, #216]	@ (8000a4c <GPDMA_Queue_Config+0x1cc>)
 8000974:	4413      	add	r3, r2
 8000976:	4619      	mov	r1, r3
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f002 fb97 	bl	80030ac <HAL_DMAEx_List_InsertNode_Head>
 800097e:	4603      	mov	r3, r0
 8000980:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000984:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000988:	2b00      	cmp	r3, #0
 800098a:	d044      	beq.n	8000a16 <GPDMA_Queue_Config+0x196>
            {
                return ret;
 800098c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000990:	e057      	b.n	8000a42 <GPDMA_Queue_Config+0x1c2>
            }
        }
        else
        {
            /* Adjust size of last node */
            if ((node_cnt > 1) && (i == (node_cnt - 1)))
 8000992:	7afb      	ldrb	r3, [r7, #11]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d910      	bls.n	80009ba <GPDMA_Queue_Config+0x13a>
 8000998:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800099c:	7afb      	ldrb	r3, [r7, #11]
 800099e:	3b01      	subs	r3, #1
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d10a      	bne.n	80009ba <GPDMA_Queue_Config+0x13a>
            {
                pNodeConfig.DataSize = (data_size - (i * ((64 * 1024) - 2)));
 80009a4:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80009a8:	4613      	mov	r3, r2
 80009aa:	03db      	lsls	r3, r3, #15
 80009ac:	1a9b      	subs	r3, r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	461a      	mov	r2, r3
 80009b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	67bb      	str	r3, [r7, #120]	@ 0x78
            }
            /* Build Node Node */
            ret = HAL_DMAEx_List_BuildNode(&pNodeConfig, &Nodes[i]);
 80009ba:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80009be:	4613      	mov	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4a21      	ldr	r2, [pc, #132]	@ (8000a4c <GPDMA_Queue_Config+0x1cc>)
 80009c8:	441a      	add	r2, r3
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fb55 	bl	8003080 <HAL_DMAEx_List_BuildNode>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 80009dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <GPDMA_Queue_Config+0x16a>
            {
                return ret;
 80009e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009e8:	e02b      	b.n	8000a42 <GPDMA_Queue_Config+0x1c2>
            }
            /* Insert Node to Queue */
            ret = HAL_DMAEx_List_InsertNode_Tail(Queue, &Nodes[i]);
 80009ea:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80009ee:	4613      	mov	r3, r2
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4a15      	ldr	r2, [pc, #84]	@ (8000a4c <GPDMA_Queue_Config+0x1cc>)
 80009f8:	4413      	add	r3, r2
 80009fa:	4619      	mov	r1, r3
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f002 fbbe 	bl	800317e <HAL_DMAEx_List_InsertNode_Tail>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000a08:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <GPDMA_Queue_Config+0x196>
            {
                return ret;
 8000a10:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a14:	e015      	b.n	8000a42 <GPDMA_Queue_Config+0x1c2>
            }
        }
        pNodeConfig.SrcAddress += ((64 * 1024) - 2);
 8000a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a18:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000a1c:	33fe      	adds	r3, #254	@ 0xfe
 8000a1e:	673b      	str	r3, [r7, #112]	@ 0x70
    for (i = 0; ((ret == HAL_OK) && (i < node_cnt)); i++)
 8000a20:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000a24:	3301      	adds	r3, #1
 8000a26:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000a2a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d105      	bne.n	8000a3e <GPDMA_Queue_Config+0x1be>
 8000a32:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a36:	7afb      	ldrb	r3, [r7, #11]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	f4ff af6b 	bcc.w	8000914 <GPDMA_Queue_Config+0x94>
    }

    return ret;
 8000a3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3780      	adds	r7, #128	@ 0x80
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20045920 	.word	0x20045920

08000a50 <ICNA3306_SendDataDMA>:

/**
 * @brief Send data to ICNA3306 using DMA
 */
static HAL_StatusTypeDef ICNA3306_SendDataDMA(uint8_t *pData, uint32_t Length)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
    static DMA_QListTypeDef Queue;
    uint32_t len = Length;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
    uint8_t node_cnt = (len / ((64 * 1024) - 2));
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	085b      	lsrs	r3, r3, #1
 8000a62:	4a3b      	ldr	r2, [pc, #236]	@ (8000b50 <ICNA3306_SendDataDMA+0x100>)
 8000a64:	fba2 2303 	umull	r2, r3, r2, r3
 8000a68:	0b9b      	lsrs	r3, r3, #14
 8000a6a:	72fb      	strb	r3, [r7, #11]
    if (len % ((64 * 1024) - 2))
 8000a6c:	68f9      	ldr	r1, [r7, #12]
 8000a6e:	084b      	lsrs	r3, r1, #1
 8000a70:	4a37      	ldr	r2, [pc, #220]	@ (8000b50 <ICNA3306_SendDataDMA+0x100>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	0b9a      	lsrs	r2, r3, #14
 8000a78:	4613      	mov	r3, r2
 8000a7a:	03db      	lsls	r3, r3, #15
 8000a7c:	1a9b      	subs	r3, r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	1aca      	subs	r2, r1, r3
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d002      	beq.n	8000a8c <ICNA3306_SendDataDMA+0x3c>
    {
        node_cnt++;
 8000a86:	7afb      	ldrb	r3, [r7, #11]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	72fb      	strb	r3, [r7, #11]
    }

    if ((handle_GPDMA1_Channel13.Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <ICNA3306_SendDataDMA+0x104>)
 8000a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d02a      	beq.n	8000aee <ICNA3306_SendDataDMA+0x9e>
    {
        /* Link created queue to DMA channel */
        if (GPDMA_Queue_Config(&Queue, node_cnt, pData, (uint8_t *)&(hospi1.Instance->DR), len) != HAL_OK)
 8000a98:	4b2f      	ldr	r3, [pc, #188]	@ (8000b58 <ICNA3306_SendDataDMA+0x108>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8000aa0:	7af9      	ldrb	r1, [r7, #11]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	482c      	ldr	r0, [pc, #176]	@ (8000b5c <ICNA3306_SendDataDMA+0x10c>)
 8000aac:	f7ff fee8 	bl	8000880 <GPDMA_Queue_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <ICNA3306_SendDataDMA+0x70>
        {
            displayRefreshing = false;
 8000ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <ICNA3306_SendDataDMA+0x110>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e042      	b.n	8000b46 <ICNA3306_SendDataDMA+0xf6>
        }

        /* Link created queue to DMA channel */
        if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel13, &Queue) != HAL_OK)
 8000ac0:	4926      	ldr	r1, [pc, #152]	@ (8000b5c <ICNA3306_SendDataDMA+0x10c>)
 8000ac2:	4824      	ldr	r0, [pc, #144]	@ (8000b54 <ICNA3306_SendDataDMA+0x104>)
 8000ac4:	f002 fc1e 	bl	8003304 <HAL_DMAEx_List_LinkQ>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <ICNA3306_SendDataDMA+0x88>
        {
            displayRefreshing = false;
 8000ace:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <ICNA3306_SendDataDMA+0x110>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e036      	b.n	8000b46 <ICNA3306_SendDataDMA+0xf6>
        }

        /* Enable All the DMA interrupts */
        if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel13) != HAL_OK)
 8000ad8:	481e      	ldr	r0, [pc, #120]	@ (8000b54 <ICNA3306_SendDataDMA+0x104>)
 8000ada:	f002 fa3d 	bl	8002f58 <HAL_DMAEx_List_Start_IT>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d02f      	beq.n	8000b44 <ICNA3306_SendDataDMA+0xf4>
        {
            displayRefreshing = false;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <ICNA3306_SendDataDMA+0x110>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e02b      	b.n	8000b46 <ICNA3306_SendDataDMA+0xf6>
        }
    }
    else
    {
        if (node_cnt > 1)
 8000aee:	7afb      	ldrb	r3, [r7, #11]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d904      	bls.n	8000afe <ICNA3306_SendDataDMA+0xae>
        {
            displayRefreshing = false;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <ICNA3306_SendDataDMA+0x110>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e023      	b.n	8000b46 <ICNA3306_SendDataDMA+0xf6>
        }

        switch (handle_GPDMA1_Channel13.Init.DestDataWidth)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <ICNA3306_SendDataDMA+0x104>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <ICNA3306_SendDataDMA+0xc4>
 8000b06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000b0a:	d106      	bne.n	8000b1a <ICNA3306_SendDataDMA+0xca>
        {
        case DMA_DEST_DATAWIDTH_WORD:
            len = (Length / 4);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
            break;
 8000b12:	e006      	b.n	8000b22 <ICNA3306_SendDataDMA+0xd2>
        case DMA_DEST_DATAWIDTH_BYTE:
            len = Length;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	60fb      	str	r3, [r7, #12]
            break;
 8000b18:	e003      	b.n	8000b22 <ICNA3306_SendDataDMA+0xd2>
        default:
        case DMA_DEST_DATAWIDTH_HALFWORD:
            len = (Length / 2);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
            break;
 8000b20:	bf00      	nop
        }

        if (HAL_DMA_Start_IT(&handle_GPDMA1_Channel13, (uint32_t)pData, (uint32_t)&(hospi1.Instance->DR), len) != HAL_OK)
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <ICNA3306_SendDataDMA+0x108>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3350      	adds	r3, #80	@ 0x50
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <ICNA3306_SendDataDMA+0x104>)
 8000b30:	f001 fbcc 	bl	80022cc <HAL_DMA_Start_IT>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <ICNA3306_SendDataDMA+0xf4>
        {
            displayRefreshing = false;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <ICNA3306_SendDataDMA+0x110>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <ICNA3306_SendDataDMA+0xf6>
        }
    }

    return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	80010003 	.word	0x80010003
 8000b54:	20045a30 	.word	0x20045a30
 8000b58:	20045afc 	.word	0x20045afc
 8000b5c:	2004598c 	.word	0x2004598c
 8000b60:	2004591c 	.word	0x2004591c

08000b64 <ICNA3306_WriteCmdParam>:


HAL_StatusTypeDef ICNA3306_WriteCmdParam(uint8_t cmd, size_t len, const uint8_t *params)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b098      	sub	sp, #96	@ 0x60
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	73fb      	strb	r3, [r7, #15]
    OSPI_RegularCmdTypeDef sCommand = {0};
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	2250      	movs	r2, #80	@ 0x50
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f02c f9f2 	bl	802cf64 <memset>

    sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = 0x02;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61bb      	str	r3, [r7, #24]
    sCommand.Address = ((uint32_t)cmd) << 8;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28

    sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.DummyCycles = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.DataMode = len > 0 ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_NONE;
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <ICNA3306_WriteCmdParam+0x5a>
 8000bb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bbc:	e000      	b.n	8000bc0 <ICNA3306_WriteCmdParam+0x5c>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.NbData = len;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480d      	ldr	r0, [pc, #52]	@ (8000c08 <ICNA3306_WriteCmdParam+0xa4>)
 8000bd2:	f004 fa9d 	bl	8005110 <HAL_OSPI_Command>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <ICNA3306_WriteCmdParam+0x7c>
    {
        return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e00e      	b.n	8000bfe <ICNA3306_WriteCmdParam+0x9a>
    }

    if (len > 0)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d00a      	beq.n	8000bfc <ICNA3306_WriteCmdParam+0x98>
    {
        if (HAL_OSPI_Transmit(&hospi1, (uint8_t *)params, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	4806      	ldr	r0, [pc, #24]	@ (8000c08 <ICNA3306_WriteCmdParam+0xa4>)
 8000bee:	f004 fb1c 	bl	800522a <HAL_OSPI_Transmit>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <ICNA3306_WriteCmdParam+0x98>
        {
            return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <ICNA3306_WriteCmdParam+0x9a>
        }
    }

    return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3760      	adds	r7, #96	@ 0x60
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20045afc 	.word	0x20045afc

08000c0c <ICNA3306_WriteCmdData>:


HAL_StatusTypeDef ICNA3306_WriteCmdData(uint8_t cmd, size_t len, const uint8_t *data)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b09a      	sub	sp, #104	@ 0x68
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;
    OSPI_RegularCmdTypeDef sCommand = {0};
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	2250      	movs	r2, #80	@ 0x50
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f02c f99e 	bl	802cf64 <memset>

    if (len == 0 || data == NULL)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <ICNA3306_WriteCmdData+0x28>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <ICNA3306_WriteCmdData+0x2c>
        return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e075      	b.n	8000d24 <ICNA3306_WriteCmdData+0x118>

    HAL_OSPI_Abort(&hospi1);
 8000c38:	483c      	ldr	r0, [pc, #240]	@ (8000d2c <ICNA3306_WriteCmdData+0x120>)
 8000c3a:	f004 fbb9 	bl	80053b0 <HAL_OSPI_Abort>

    sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
    sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.Instruction = 0x32;
 8000c4e:	2332      	movs	r3, #50	@ 0x32
 8000c50:	61bb      	str	r3, [r7, #24]

    sCommand.Address = (cmd << 8);
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DataMode = HAL_OSPI_DATA_4_LINES;
 8000c6c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000c70:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DummyCycles = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.NbData = len;
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	64fb      	str	r3, [r7, #76]	@ 0x4c

    sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000c82:	2300      	movs	r3, #0
 8000c84:	65fb      	str	r3, [r7, #92]	@ 0x5c

    status = HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4826      	ldr	r0, [pc, #152]	@ (8000d2c <ICNA3306_WriteCmdData+0x120>)
 8000c92:	f004 fa3d 	bl	8005110 <HAL_OSPI_Command>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (status != HAL_OK)
 8000c9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <ICNA3306_WriteCmdData+0x9e>
    {
        return status;
 8000ca4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ca8:	e03c      	b.n	8000d24 <ICNA3306_WriteCmdData+0x118>
    }
    printf("Transfer length: %d\r\n", len);
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	4820      	ldr	r0, [pc, #128]	@ (8000d30 <ICNA3306_WriteCmdData+0x124>)
 8000cae:	f02c f811 	bl	802ccd4 <iprintf>
    if (len > 1024)
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cb8:	d933      	bls.n	8000d22 <ICNA3306_WriteCmdData+0x116>
    {
        HAL_OSPI_Abort(&hospi1);
 8000cba:	481c      	ldr	r0, [pc, #112]	@ (8000d2c <ICNA3306_WriteCmdData+0x120>)
 8000cbc:	f004 fb78 	bl	80053b0 <HAL_OSPI_Abort>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc0:	f3bf 8f4f 	dsb	sy
}
 8000cc4:	bf00      	nop
        __DSB();

        displayRefreshing = true;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <ICNA3306_WriteCmdData+0x128>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
        status = ICNA3306_SendDataDMA((uint8_t *)data, len);
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff febe 	bl	8000a50 <ICNA3306_SendDataDMA>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (status != HAL_OK)
 8000cda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <ICNA3306_WriteCmdData+0xe2>
        {
            displayRefreshing = false;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <ICNA3306_WriteCmdData+0x128>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
            return status;
 8000ce8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cec:	e01a      	b.n	8000d24 <ICNA3306_WriteCmdData+0x118>
        }
        uint32_t timeout = HAL_GetTick() + 1000;
 8000cee:	f001 f893 	bl	8001e18 <HAL_GetTick>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000cf8:	663b      	str	r3, [r7, #96]	@ 0x60
        while (displayRefreshing)
 8000cfa:	e00d      	b.n	8000d18 <ICNA3306_WriteCmdData+0x10c>
        {
            if (HAL_GetTick() >= timeout)
 8000cfc:	f001 f88c 	bl	8001e18 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d807      	bhi.n	8000d18 <ICNA3306_WriteCmdData+0x10c>
            {
                HAL_DMA_Abort_IT(&handle_GPDMA1_Channel13);
 8000d08:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <ICNA3306_WriteCmdData+0x12c>)
 8000d0a:	f001 fbbb 	bl	8002484 <HAL_DMA_Abort_IT>
                displayRefreshing = false;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <ICNA3306_WriteCmdData+0x128>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
                return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e005      	b.n	8000d24 <ICNA3306_WriteCmdData+0x118>
        while (displayRefreshing)
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <ICNA3306_WriteCmdData+0x128>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1ec      	bne.n	8000cfc <ICNA3306_WriteCmdData+0xf0>
            }
        }
    }

    return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3768      	adds	r7, #104	@ 0x68
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20045afc 	.word	0x20045afc
 8000d30:	0802daa4 	.word	0x0802daa4
 8000d34:	2004591c 	.word	0x2004591c
 8000d38:	20045a30 	.word	0x20045a30

08000d3c <ICNA3306_DrawBuffer>:


void ICNA3306_DrawBuffer(int16_t x_start, int16_t y_start, int16_t width, int16_t height, const uint8_t *buf, size_t len)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4604      	mov	r4, r0
 8000d44:	4608      	mov	r0, r1
 8000d46:	4611      	mov	r1, r2
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	80fb      	strh	r3, [r7, #6]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80bb      	strh	r3, [r7, #4]
 8000d52:	460b      	mov	r3, r1
 8000d54:	807b      	strh	r3, [r7, #2]
 8000d56:	4613      	mov	r3, r2
 8000d58:	803b      	strh	r3, [r7, #0]
    uint8_t params[5] = {0};
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	711a      	strb	r2, [r3, #4]
    int16_t x_end = x_start + width - 1;
 8000d64:	88fa      	ldrh	r2, [r7, #6]
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	82fb      	strh	r3, [r7, #22]
    int16_t y_end = y_start + height - 1;
 8000d72:	88ba      	ldrh	r2, [r7, #4]
 8000d74:	883b      	ldrh	r3, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	82bb      	strh	r3, [r7, #20]

    // （0x2A）
    params[0] = x_start >> 8;
 8000d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d84:	121b      	asrs	r3, r3, #8
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	733b      	strb	r3, [r7, #12]
    params[1] = x_start & 0xFF;
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	737b      	strb	r3, [r7, #13]
    params[2] = x_end >> 8;
 8000d92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d96:	121b      	asrs	r3, r3, #8
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	73bb      	strb	r3, [r7, #14]
    params[3] = x_end & 0xFF;
 8000d9e:	8afb      	ldrh	r3, [r7, #22]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	73fb      	strb	r3, [r7, #15]
    ICNA3306_WriteCmdParam(CMD_COL_SET, 4, params);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	461a      	mov	r2, r3
 8000daa:	2104      	movs	r1, #4
 8000dac:	202a      	movs	r0, #42	@ 0x2a
 8000dae:	f7ff fed9 	bl	8000b64 <ICNA3306_WriteCmdParam>

    // （0x2B）
    params[0] = y_start >> 8;
 8000db2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000db6:	121b      	asrs	r3, r3, #8
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	733b      	strb	r3, [r7, #12]
    params[1] = y_start & 0xFF;
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	737b      	strb	r3, [r7, #13]
    params[2] = y_end >> 8;
 8000dc4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dc8:	121b      	asrs	r3, r3, #8
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	73bb      	strb	r3, [r7, #14]
    params[3] = y_end & 0xFF;
 8000dd0:	8abb      	ldrh	r3, [r7, #20]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	73fb      	strb	r3, [r7, #15]
    ICNA3306_WriteCmdParam(CMD_ROW_SET, 4, params);
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	461a      	mov	r2, r3
 8000ddc:	2104      	movs	r1, #4
 8000dde:	202b      	movs	r0, #43	@ 0x2b
 8000de0:	f7ff fec0 	bl	8000b64 <ICNA3306_WriteCmdParam>

    // （0x2C）
    ICNA3306_WriteCmdData(CMD_START_WRITE, len, buf);
 8000de4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000de8:	202c      	movs	r0, #44	@ 0x2c
 8000dea:	f7ff ff0f 	bl	8000c0c <ICNA3306_WriteCmdData>
}
 8000dee:	bf00      	nop
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd90      	pop	{r4, r7, pc}
	...

08000df8 <ICNA3306_Init>:


void ICNA3306_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
    uint8_t parameter[14];
    memset(parameter, 0, sizeof(parameter));
 8000dfe:	463b      	mov	r3, r7
 8000e00:	220e      	movs	r2, #14
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f02c f8ad 	bl	802cf64 <memset>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	4838      	ldr	r0, [pc, #224]	@ (8000ef0 <ICNA3306_Init+0xf8>)
 8000e10:	f003 f934 	bl	800407c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e14:	2064      	movs	r0, #100	@ 0x64
 8000e16:	f001 f80b 	bl	8001e30 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	4834      	ldr	r0, [pc, #208]	@ (8000ef0 <ICNA3306_Init+0xf8>)
 8000e20:	f003 f92c 	bl	800407c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e24:	2064      	movs	r0, #100	@ 0x64
 8000e26:	f001 f803 	bl	8001e30 <HAL_Delay>

    GPDMA_Callback();
 8000e2a:	f7ff fced 	bl	8000808 <GPDMA_Callback>

    printf("OSPI DR Addr @ %p\r\n", &(hospi1.Instance->DR));
 8000e2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <ICNA3306_Init+0xfc>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3350      	adds	r3, #80	@ 0x50
 8000e34:	4619      	mov	r1, r3
 8000e36:	4830      	ldr	r0, [pc, #192]	@ (8000ef8 <ICNA3306_Init+0x100>)
 8000e38:	f02b ff4c 	bl	802ccd4 <iprintf>
    printf("GPDMA1_Channel13 Instance @ 0x%08lX\r\n", (uint32_t)handle_GPDMA1_Channel13.Instance);
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <ICNA3306_Init+0x104>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	482f      	ldr	r0, [pc, #188]	@ (8000f00 <ICNA3306_Init+0x108>)
 8000e44:	f02b ff46 	bl	802ccd4 <iprintf>


    ICNA3306_WriteCmdParam(CMD_RST, 0, NULL);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fe89 	bl	8000b64 <ICNA3306_WriteCmdParam>
    HAL_Delay(150);
 8000e52:	2096      	movs	r0, #150	@ 0x96
 8000e54:	f000 ffec 	bl	8001e30 <HAL_Delay>

    ICNA3306_WriteCmdParam(CMD_SLEEP_OUT, 0, NULL);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2011      	movs	r0, #17
 8000e5e:	f7ff fe81 	bl	8000b64 <ICNA3306_WriteCmdParam>
    HAL_Delay(120);
 8000e62:	2078      	movs	r0, #120	@ 0x78
 8000e64:	f000 ffe4 	bl	8001e30 <HAL_Delay>

    parameter[0] = 0x00;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0xFE, 1, parameter);
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2101      	movs	r1, #1
 8000e72:	20fe      	movs	r0, #254	@ 0xfe
 8000e74:	f7ff fe76 	bl	8000b64 <ICNA3306_WriteCmdParam>

    parameter[0] = 0x80;
 8000e78:	2380      	movs	r3, #128	@ 0x80
 8000e7a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0xC4, 1, parameter);
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2101      	movs	r1, #1
 8000e82:	20c4      	movs	r0, #196	@ 0xc4
 8000e84:	f7ff fe6e 	bl	8000b64 <ICNA3306_WriteCmdParam>

    //  TearEffect
    parameter[0] = 0x00;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x35, 1, parameter);
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2101      	movs	r1, #1
 8000e92:	2035      	movs	r0, #53	@ 0x35
 8000e94:	f7ff fe66 	bl	8000b64 <ICNA3306_WriteCmdParam>

    parameter[0] = 0x55;
 8000e98:	2355      	movs	r3, #85	@ 0x55
 8000e9a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x3A, 1, parameter);
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	203a      	movs	r0, #58	@ 0x3a
 8000ea4:	f7ff fe5e 	bl	8000b64 <ICNA3306_WriteCmdParam>

     // (Memory Data Access Control)
     //parameter[0] = 0x00; // RGB
     //ICNA3306_WriteCmdParam(0x36, 1, parameter);

    parameter[0] = 0x20;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x53, 1, parameter);
 8000eac:	463b      	mov	r3, r7
 8000eae:	461a      	mov	r2, r3
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	2053      	movs	r0, #83	@ 0x53
 8000eb4:	f7ff fe56 	bl	8000b64 <ICNA3306_WriteCmdParam>

    parameter[0] = 0xFF;
 8000eb8:	23ff      	movs	r3, #255	@ 0xff
 8000eba:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x51, 1, parameter);
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2051      	movs	r0, #81	@ 0x51
 8000ec4:	f7ff fe4e 	bl	8000b64 <ICNA3306_WriteCmdParam>

    parameter[0] = 0xFF;
 8000ec8:	23ff      	movs	r3, #255	@ 0xff
 8000eca:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x63, 1, parameter);
 8000ecc:	463b      	mov	r3, r7
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2063      	movs	r0, #99	@ 0x63
 8000ed4:	f7ff fe46 	bl	8000b64 <ICNA3306_WriteCmdParam>


    ICNA3306_WriteCmdParam(CMD_DISPLAY_ON, 0, NULL);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2029      	movs	r0, #41	@ 0x29
 8000ede:	f7ff fe41 	bl	8000b64 <ICNA3306_WriteCmdParam>
    HAL_Delay(120);
 8000ee2:	2078      	movs	r0, #120	@ 0x78
 8000ee4:	f000 ffa4 	bl	8001e30 <HAL_Delay>
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	42020400 	.word	0x42020400
 8000ef4:	20045afc 	.word	0x20045afc
 8000ef8:	0802dabc 	.word	0x0802dabc
 8000efc:	20045a30 	.word	0x20045a30
 8000f00:	0802dad0 	.word	0x0802dad0

08000f04 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f08:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <MX_FREERTOS_Init+0x28>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <MX_FREERTOS_Init+0x2c>)
 8000f0e:	f00a fdcd 	bl	800baac <osThreadNew>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a07      	ldr	r2, [pc, #28]	@ (8000f34 <MX_FREERTOS_Init+0x30>)
 8000f16:	6013      	str	r3, [r2, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_GUI, NULL, &GUI_Task_attributes);
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <MX_FREERTOS_Init+0x34>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4807      	ldr	r0, [pc, #28]	@ (8000f3c <MX_FREERTOS_Init+0x38>)
 8000f1e:	f00a fdc5 	bl	800baac <osThreadNew>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a06      	ldr	r2, [pc, #24]	@ (8000f40 <MX_FREERTOS_Init+0x3c>)
 8000f26:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	0802e724 	.word	0x0802e724
 8000f30:	08000f45 	.word	0x08000f45
 8000f34:	200459a4 	.word	0x200459a4
 8000f38:	0802e748 	.word	0x0802e748
 8000f3c:	08000f55 	.word	0x08000f55
 8000f40:	200459a8 	.word	0x200459a8

08000f44 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
    //I2C_Scan(&hi2c3);
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f00a fe3f 	bl	800bbd0 <osDelay>
 8000f52:	e7fb      	b.n	8000f4c <StartDefaultTask+0x8>

08000f54 <TouchGFX_GUI>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void TouchGFX_GUI(void *argument)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN defaultTask */
    MX_TouchGFX_Process();
 8000f5c:	f00e f901 	bl	800f162 <MX_TouchGFX_Process>

    /* Infinite loop */
    for(;;)
    {
        osDelay(1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f00a fe35 	bl	800bbd0 <osDelay>
 8000f66:	e7fb      	b.n	8000f60 <TouchGFX_GUI+0xc>

08000f68 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa8 <MX_CRC_Init+0x40>)
 8000f70:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f92:	f001 f8a9 	bl	80020e8 <HAL_CRC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f9c:	f000 faae 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200459ac 	.word	0x200459ac
 8000fa8:	40023000 	.word	0x40023000

08000fac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe8 <HAL_CRC_MspInit+0x3c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10e      	bne.n	8000fdc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <HAL_CRC_MspInit+0x40>)
 8000fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc4:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <HAL_CRC_MspInit+0x40>)
 8000fc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000fce:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <HAL_CRC_MspInit+0x40>)
 8000fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40023000 	.word	0x40023000
 8000fec:	46020c00 	.word	0x46020c00

08000ff0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8001068 <MX_DMA2D_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001000:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001002:	2202      	movs	r2, #2
 8001004:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 800100c:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <MX_DMA2D_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001012:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <MX_DMA2D_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001020:	2202      	movs	r2, #2
 8001022:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_DMA2D_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800103c:	4809      	ldr	r0, [pc, #36]	@ (8001064 <MX_DMA2D_Init+0x74>)
 800103e:	f001 fc50 	bl	80028e2 <HAL_DMA2D_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001048:	f000 fa58 	bl	80014fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800104c:	2101      	movs	r1, #1
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001050:	f001 fdb8 	bl	8002bc4 <HAL_DMA2D_ConfigLayer>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 800105a:	f000 fa4f 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200459d0 	.word	0x200459d0
 8001068:	4002b000 	.word	0x4002b000

0800106c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <HAL_DMA2D_MspInit+0x48>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d116      	bne.n	80010ac <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_DMA2D_MspInit+0x4c>)
 8001080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001084:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <HAL_DMA2D_MspInit+0x4c>)
 8001086:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800108a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_DMA2D_MspInit+0x4c>)
 8001090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001094:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2105      	movs	r1, #5
 80010a0:	2076      	movs	r0, #118	@ 0x76
 80010a2:	f000 ffa1 	bl	8001fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010a6:	2076      	movs	r0, #118	@ 0x76
 80010a8:	f000 ffb8 	bl	800201c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	4002b000 	.word	0x4002b000
 80010b8:	46020c00 	.word	0x46020c00

080010bc <MX_GPDMA1_Init>:

DMA_HandleTypeDef handle_GPDMA1_Channel13;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <MX_GPDMA1_Init+0x84>)
 80010c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001140 <MX_GPDMA1_Init+0x84>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_GPDMA1_Init+0x84>)
 80010d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 5, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2105      	movs	r1, #5
 80010e4:	2055      	movs	r0, #85	@ 0x55
 80010e6:	f000 ff7f 	bl	8001fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 80010ea:	2055      	movs	r0, #85	@ 0x55
 80010ec:	f000 ff96 	bl	800201c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 80010f2:	4a15      	ldr	r2, [pc, #84]	@ (8001148 <MX_GPDMA1_Init+0x8c>)
 80010f4:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel13.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel13.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 80010fe:	2200      	movs	r2, #0
 8001100:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel13.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 8001104:	2200      	movs	r2, #0
 8001106:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel13.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 800110a:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 800110e:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel13.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 8001112:	2280      	movs	r2, #128	@ 0x80
 8001114:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 8001116:	480b      	ldr	r0, [pc, #44]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 8001118:	f001 fdf2 	bl	8002d00 <HAL_DMAEx_List_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_GPDMA1_Init+0x6a>
  {
    Error_Handler();
 8001122:	f000 f9eb 	bl	80014fc <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001126:	2110      	movs	r1, #16
 8001128:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 800112a:	f001 fb79 	bl	8002820 <HAL_DMA_ConfigChannelAttributes>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_GPDMA1_Init+0x7c>
  {
    Error_Handler();
 8001134:	f000 f9e2 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	46020c00 	.word	0x46020c00
 8001144:	20045a30 	.word	0x20045a30
 8001148:	400206d0 	.word	0x400206d0

0800114c <MX_GPIO_Init>:
     PC15-OSC32_OUT (PC15)   ------> RCC_OSC32_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b34      	ldr	r3, [pc, #208]	@ (8001234 <MX_GPIO_Init+0xe8>)
 8001164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001168:	4a32      	ldr	r2, [pc, #200]	@ (8001234 <MX_GPIO_Init+0xe8>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001172:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <MX_GPIO_Init+0xe8>)
 8001174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b2c      	ldr	r3, [pc, #176]	@ (8001234 <MX_GPIO_Init+0xe8>)
 8001182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001186:	4a2b      	ldr	r2, [pc, #172]	@ (8001234 <MX_GPIO_Init+0xe8>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001190:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <MX_GPIO_Init+0xe8>)
 8001192:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <MX_GPIO_Init+0xe8>)
 80011a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011a4:	4a23      	ldr	r2, [pc, #140]	@ (8001234 <MX_GPIO_Init+0xe8>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <MX_GPIO_Init+0xe8>)
 80011b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin = GPIO_PIN_2; // TE
 80011bc:	2304      	movs	r3, #4
 80011be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <MX_GPIO_Init+0xec>)
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	481b      	ldr	r0, [pc, #108]	@ (800123c <MX_GPIO_Init+0xf0>)
 80011d0:	f002 fd64 	bl	8003c9c <HAL_GPIO_Init>

    /*Configure GPIO pin : PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;           // CTP_RST
 80011d4:	2320      	movs	r3, #32
 80011d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011d8:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <MX_GPIO_Init+0xf4>)
 80011da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011dc:	2301      	movs	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	4816      	ldr	r0, [pc, #88]	@ (8001244 <MX_GPIO_Init+0xf8>)
 80011ec:	f002 fd56 	bl	8003c9c <HAL_GPIO_Init>

    /*Configure GPIO pin : PB2  */
    GPIO_InitStruct.Pin = GPIO_PIN_2; // LCD_RST
 80011f0:	2304      	movs	r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4810      	ldr	r0, [pc, #64]	@ (8001248 <MX_GPIO_Init+0xfc>)
 8001208:	f002 fd48 	bl	8003c9c <HAL_GPIO_Init>

    /*Configure GPIO pin :  PB10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10; // CTP_INT
 800120c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001210:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001212:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <MX_GPIO_Init+0xf4>)
 8001214:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	2301      	movs	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4619      	mov	r1, r3
 8001224:	4808      	ldr	r0, [pc, #32]	@ (8001248 <MX_GPIO_Init+0xfc>)
 8001226:	f002 fd39 	bl	8003c9c <HAL_GPIO_Init>
}
 800122a:	bf00      	nop
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	46020c00 	.word	0x46020c00
 8001238:	10110000 	.word	0x10110000
 800123c:	42020000 	.word	0x42020000
 8001240:	10210000 	.word	0x10210000
 8001244:	42020800 	.word	0x42020800
 8001248:	42020400 	.word	0x42020400

0800124c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C3_Init 0 */

    /* USER CODE BEGIN I2C3_Init 1 */

    /* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001252:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <MX_I2C3_Init+0x78>)
 8001254:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00B01A4B;  // 400kHz @ 160MHz SYSCLK
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001258:	4a1b      	ldr	r2, [pc, #108]	@ (80012c8 <MX_I2C3_Init+0x7c>)
 800125a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 800125c:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <MX_I2C3_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001264:	2201      	movs	r2, #1
 8001266:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <MX_I2C3_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800126e:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_I2C3_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001286:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001288:	f002 ff10 	bl	80040ac <HAL_I2C_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_I2C3_Init+0x4a>
    {
        Error_Handler();
 8001292:	f000 f933 	bl	80014fc <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001296:	2100      	movs	r1, #0
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <MX_I2C3_Init+0x74>)
 800129a:	f003 fc93 	bl	8004bc4 <HAL_I2CEx_ConfigAnalogFilter>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C3_Init+0x5c>
    {
        Error_Handler();
 80012a4:	f000 f92a 	bl	80014fc <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012a8:	2100      	movs	r1, #0
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_I2C3_Init+0x74>)
 80012ac:	f003 fcd5 	bl	8004c5a <HAL_I2CEx_ConfigDigitalFilter>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C3_Init+0x6e>
    {
        Error_Handler();
 80012b6:	f000 f921 	bl	80014fc <Error_Handler>
    }
    /* USER CODE BEGIN I2C3_Init 2 */

    /* USER CODE END I2C3_Init 2 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20045aa8 	.word	0x20045aa8
 80012c4:	46002800 	.word	0x46002800
 80012c8:	00b01a4b 	.word	0x00b01a4b

080012cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ba      	sub	sp, #232	@ 0xe8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	22c0      	movs	r2, #192	@ 0xc0
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f02b fe39 	bl	802cf64 <memset>
    if (i2cHandle->Instance == I2C3)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a26      	ldr	r2, [pc, #152]	@ (8001390 <HAL_I2C_MspInit+0xc4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d145      	bne.n	8001388 <HAL_I2C_MspInit+0xbc>

        /* USER CODE END I2C3_MspInit 0 */

        /** Initializes the peripherals clock
         */
        PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80012fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e9c7 2304 	strd	r2, r3, [r7, #16]
        PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4618      	mov	r0, r3
 8001314:	f006 fc2e 	bl	8007b74 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_MspInit+0x56>
        {
            Error_Handler();
 800131e:	f000 f8ed 	bl	80014fc <Error_Handler>
        }

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 8001324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001328:	4a1a      	ldr	r2, [pc, #104]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001332:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
        /**I2C3 GPIO Configuration
        PC0     ------> I2C3_SCL
        PC1     ------> I2C3_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001340:	2303      	movs	r3, #3
 8001342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001346:	2312      	movs	r3, #18
 8001348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001358:	2304      	movs	r3, #4
 800135a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001362:	4619      	mov	r1, r3
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <HAL_I2C_MspInit+0xcc>)
 8001366:	f002 fc99 	bl	8003c9c <HAL_GPIO_Init>

        /* I2C3 clock enable */
        __HAL_RCC_I2C3_CLK_ENABLE();
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 800136c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001370:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 8001372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001376:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 800137c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
        /* USER CODE BEGIN I2C3_MspInit 1 */

        /* USER CODE END I2C3_MspInit 1 */
    }
}
 8001388:	bf00      	nop
 800138a:	37e8      	adds	r7, #232	@ 0xe8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	46002800 	.word	0x46002800
 8001394:	46020c00 	.word	0x46020c00
 8001398:	42020800 	.word	0x42020800

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f000 fcf6 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f822 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f7ff fed0 	bl	800114c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80013ac:	f7ff fe86 	bl	80010bc <MX_GPDMA1_Init>
  //MX_DCACHE1_Init();
  MX_DMA2D_Init();
 80013b0:	f7ff fe1e 	bl	8000ff0 <MX_DMA2D_Init>
  //MX_ICACHE_Init();
  MX_TIM6_Init();
 80013b4:	f000 fbb0 	bl	8001b18 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80013b8:	f000 fc0c 	bl	8001bd4 <MX_USART1_UART_Init>
  MX_CRC_Init();
 80013bc:	f7ff fdd4 	bl	8000f68 <MX_CRC_Init>
  MX_I2C3_Init();
 80013c0:	f7ff ff44 	bl	800124c <MX_I2C3_Init>
  MX_OCTOSPI1_Init();
 80013c4:	f000 f8a0 	bl	8001508 <MX_OCTOSPI1_Init>
  MX_TouchGFX_Init();
 80013c8:	f00d fec3 	bl	800f152 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80013cc:	f00d feba 	bl	800f144 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim6);
 80013d0:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <main+0x4c>)
 80013d2:	f009 f8bf 	bl	800a554 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013d6:	f00a fb19 	bl	800ba0c <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 80013da:	f7ff fd93 	bl	8000f04 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013de:	f00a fb3b 	bl	800ba58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 80013e2:	bf00      	nop
 80013e4:	e7fd      	b.n	80013e2 <main+0x46>
 80013e6:	bf00      	nop
 80013e8:	20045ba8 	.word	0x20045ba8

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b09e      	sub	sp, #120	@ 0x78
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	2260      	movs	r2, #96	@ 0x60
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f02b fdb2 	bl	802cf64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
 800140e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001410:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001414:	f005 f83e 	bl	8006494 <HAL_PWREx_ControlVoltageScaling>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800141e:	f000 f86d 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001422:	2310      	movs	r3, #16
 8001424:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001426:	2301      	movs	r3, #1
 8001428:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800142a:	2310      	movs	r3, #16
 800142c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800142e:	2300      	movs	r3, #0
 8001430:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2302      	movs	r3, #2
 8001434:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001436:	2301      	movs	r3, #1
 8001438:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800143a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800143e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001440:	2303      	movs	r3, #3
 8001442:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001444:	230a      	movs	r3, #10
 8001446:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001448:	2302      	movs	r3, #2
 800144a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001450:	2301      	movs	r3, #1
 8001452:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001454:	230c      	movs	r3, #12
 8001456:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	4618      	mov	r0, r3
 8001462:	f005 f8a3 	bl	80065ac <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800146c:	f000 f846 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001470:	231f      	movs	r3, #31
 8001472:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001474:	2303      	movs	r3, #3
 8001476:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	2104      	movs	r1, #4
 800148c:	4618      	mov	r0, r3
 800148e:	f005 ff69 	bl	8007364 <HAL_RCC_ClockConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001498:	f000 f830 	bl	80014fc <Error_Handler>
  }
}
 800149c:	bf00      	nop
 800149e:	3778      	adds	r7, #120	@ 0x78
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0x200);
 80014ac:	1d39      	adds	r1, r7, #4
 80014ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014b2:	2201      	movs	r2, #1
 80014b4:	4803      	ldr	r0, [pc, #12]	@ (80014c4 <__io_putchar+0x20>)
 80014b6:	f009 fcbd 	bl	800ae34 <HAL_UART_Transmit>
    return ch;
 80014ba:	687b      	ldr	r3, [r7, #4]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20045bf4 	.word	0x20045bf4

080014c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80014da:	f000 fc89 	bl	8001df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
    if (htim->Instance == TIM6)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d101      	bne.n	80014ec <HAL_TIM_PeriodElapsedCallback+0x24>
    {
        touchgfx_tim_vsync();
 80014e8:	f010 fb4f 	bl	8011b8a <touchgfx_tim_vsync>
    }
  /* USER CODE END Callback 1 */
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40001400 	.word	0x40001400
 80014f8:	40001000 	.word	0x40001000

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <Error_Handler+0x8>

08001508 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001528:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 800152a:	4a2f      	ldr	r2, [pc, #188]	@ (80015e8 <MX_OCTOSPI1_Init+0xe0>)
 800152c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 8;
 800152e:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 8001530:	2208      	movs	r2, #8
 8001532:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001534:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800153a:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 22;
 8001540:	4b28      	ldr	r3, [pc, #160]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 8001542:	2216      	movs	r2, #22
 8001544:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001546:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 8001548:	2201      	movs	r2, #1
 800154a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800154c:	4b25      	ldr	r3, [pc, #148]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001552:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001558:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 5;
 800155e:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 8001560:	2205      	movs	r2, #5
 8001562:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001564:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 8001566:	2200      	movs	r2, #0
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800156a:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 800156c:	2200      	movs	r2, #0
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001570:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 8001572:	2200      	movs	r2, #0
 8001574:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 8001578:	2208      	movs	r2, #8
 800157a:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 800157c:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 800157e:	2200      	movs	r2, #0
 8001580:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001582:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 8001584:	2200      	movs	r2, #0
 8001586:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001588:	4816      	ldr	r0, [pc, #88]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 800158a:	f003 fbc3 	bl	8004d14 <HAL_OSPI_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_OCTOSPI1_Init+0x90>
  {
    Error_Handler();
 8001594:	f7ff ffb2 	bl	80014fc <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001598:	2301      	movs	r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.NCSPort = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80015a0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80015a4:	617b      	str	r3, [r7, #20]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ae:	4619      	mov	r1, r3
 80015b0:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 80015b2:	f003 ff81 	bl	80054b8 <HAL_OSPIM_Config>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_OCTOSPI1_Init+0xb8>
  {
    Error_Handler();
 80015bc:	f7ff ff9e 	bl	80014fc <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <MX_OCTOSPI1_Init+0xdc>)
 80015ce:	f004 ff19 	bl	8006404 <HAL_OSPI_DLYB_SetConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 80015d8:	f7ff ff90 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20045afc 	.word	0x20045afc
 80015e8:	420d1400 	.word	0x420d1400

080015ec <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0bc      	sub	sp, #240	@ 0xf0
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	22c0      	movs	r2, #192	@ 0xc0
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f02b fca9 	bl	802cf64 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a4f      	ldr	r2, [pc, #316]	@ (8001754 <HAL_OSPI_MspInit+0x168>)
 8001618:	4293      	cmp	r3, r2
 800161a:	f040 8096 	bne.w	800174a <HAL_OSPI_MspInit+0x15e>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800161e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	4618      	mov	r0, r3
 8001636:	f006 fa9d 	bl	8007b74 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_OSPI_MspInit+0x58>
    {
      Error_Handler();
 8001640:	f7ff ff5c 	bl	80014fc <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001644:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 8001646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800164a:	4a43      	ldr	r2, [pc, #268]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 800164c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001650:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001654:	4b40      	ldr	r3, [pc, #256]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 8001656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800165a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001662:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 8001664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001668:	4a3b      	ldr	r2, [pc, #236]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001672:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 8001674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 8001682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001686:	4a34      	ldr	r2, [pc, #208]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001690:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 8001692:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b2e      	ldr	r3, [pc, #184]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 80016a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001758 <HAL_OSPI_MspInit+0x16c>)
 80016b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> OCTOSPIM_P1_IO3
    PA7     ------> OCTOSPIM_P1_IO2
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 80016bc:	23c8      	movs	r3, #200	@ 0xc8
 80016be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80016d4:	230a      	movs	r3, #10
 80016d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016de:	4619      	mov	r1, r3
 80016e0:	481e      	ldr	r0, [pc, #120]	@ (800175c <HAL_OSPI_MspInit+0x170>)
 80016e2:	f002 fadb 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016e6:	2310      	movs	r3, #16
 80016e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80016fe:	2303      	movs	r3, #3
 8001700:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001708:	4619      	mov	r1, r3
 800170a:	4814      	ldr	r0, [pc, #80]	@ (800175c <HAL_OSPI_MspInit+0x170>)
 800170c:	f002 fac6 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001710:	2303      	movs	r3, #3
 8001712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001728:	230a      	movs	r3, #10
 800172a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001732:	4619      	mov	r1, r3
 8001734:	480a      	ldr	r0, [pc, #40]	@ (8001760 <HAL_OSPI_MspInit+0x174>)
 8001736:	f002 fab1 	bl	8003c9c <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 4, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2104      	movs	r1, #4
 800173e:	204c      	movs	r0, #76	@ 0x4c
 8001740:	f000 fc52 	bl	8001fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001744:	204c      	movs	r0, #76	@ 0x4c
 8001746:	f000 fc69 	bl	800201c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 800174a:	bf00      	nop
 800174c:	37f0      	adds	r7, #240	@ 0xf0
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	420d1400 	.word	0x420d1400
 8001758:	46020c00 	.word	0x46020c00
 800175c:	42020000 	.word	0x42020000
 8001760:	42020400 	.word	0x42020400

08001764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <HAL_MspInit+0x38>)
 800176c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_MspInit+0x38>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_MspInit+0x38>)
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	210f      	movs	r1, #15
 800178c:	f06f 0001 	mvn.w	r0, #1
 8001790:	f000 fc2a 	bl	8001fe8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	46020c00 	.word	0x46020c00

080017a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08e      	sub	sp, #56	@ 0x38
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80017b0:	4b2e      	ldr	r3, [pc, #184]	@ (800186c <HAL_InitTick+0xcc>)
 80017b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017b6:	4a2d      	ldr	r2, [pc, #180]	@ (800186c <HAL_InitTick+0xcc>)
 80017b8:	f043 0320 	orr.w	r3, r3, #32
 80017bc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80017c0:	4b2a      	ldr	r3, [pc, #168]	@ (800186c <HAL_InitTick+0xcc>)
 80017c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017c6:	f003 0320 	and.w	r3, r3, #32
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017ce:	f107 0210 	add.w	r2, r7, #16
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f006 f90d 	bl	80079f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017de:	f006 f8cf 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 80017e2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017e6:	4a22      	ldr	r2, [pc, #136]	@ (8001870 <HAL_InitTick+0xd0>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9b      	lsrs	r3, r3, #18
 80017ee:	3b01      	subs	r3, #1
 80017f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_InitTick+0xd4>)
 80017f4:	4a20      	ldr	r2, [pc, #128]	@ (8001878 <HAL_InitTick+0xd8>)
 80017f6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <HAL_InitTick+0xd4>)
 80017fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017fe:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001800:	4a1c      	ldr	r2, [pc, #112]	@ (8001874 <HAL_InitTick+0xd4>)
 8001802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001804:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001806:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_InitTick+0xd4>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_InitTick+0xd4>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8001812:	4818      	ldr	r0, [pc, #96]	@ (8001874 <HAL_InitTick+0xd4>)
 8001814:	f008 fe46 	bl	800a4a4 <HAL_TIM_Base_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800181e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001822:	2b00      	cmp	r3, #0
 8001824:	d118      	bne.n	8001858 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001826:	4813      	ldr	r0, [pc, #76]	@ (8001874 <HAL_InitTick+0xd4>)
 8001828:	f008 fe94 	bl	800a554 <HAL_TIM_Base_Start_IT>
 800182c:	4603      	mov	r3, r0
 800182e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001832:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10e      	bne.n	8001858 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d808      	bhi.n	8001852 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM7 global Interrupt */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	2032      	movs	r0, #50	@ 0x32
 8001846:	f000 fbcf 	bl	8001fe8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184a:	4a0c      	ldr	r2, [pc, #48]	@ (800187c <HAL_InitTick+0xdc>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e002      	b.n	8001858 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001858:	2032      	movs	r0, #50	@ 0x32
 800185a:	f000 fbdf 	bl	800201c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800185e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001862:	4618      	mov	r0, r3
 8001864:	3738      	adds	r7, #56	@ 0x38
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	46020c00 	.word	0x46020c00
 8001870:	431bde83 	.word	0x431bde83
 8001874:	20045b58 	.word	0x20045b58
 8001878:	40001400 	.word	0x40001400
 800187c:	20000008 	.word	0x20000008

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <NMI_Handler+0x4>

08001888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <MemManage_Handler+0x4>

08001898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <TIM6_IRQHandler+0x10>)
 80018be:	f008 fee9 	bl	800a694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20045ba8 	.word	0x20045ba8

080018cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <TIM7_IRQHandler+0x10>)
 80018d2:	f008 fedf 	bl	800a694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20045b58 	.word	0x20045b58

080018e0 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <OCTOSPI1_IRQHandler+0x10>)
 80018e6:	f003 fad1 	bl	8004e8c <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20045afc 	.word	0x20045afc

080018f4 <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <GPDMA1_Channel13_IRQHandler+0x10>)
 80018fa:	f000 fdec 	bl	80024d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20045a30 	.word	0x20045a30

08001908 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <DMA2D_IRQHandler+0x10>)
 800190e:	f001 f849 	bl	80029a4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200459d0 	.word	0x200459d0

0800191c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return 1;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_kill>:

int _kill(int pid, int sig)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001936:	f02b fbb7 	bl	802d0a8 <__errno>
 800193a:	4603      	mov	r3, r0
 800193c:	2216      	movs	r2, #22
 800193e:	601a      	str	r2, [r3, #0]
  return -1;
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_exit>:

void _exit (int status)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ffe7 	bl	800192c <_kill>
  while (1) {}    /* Make sure we hang here */
 800195e:	bf00      	nop
 8001960:	e7fd      	b.n	800195e <_exit+0x12>

08001962 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e00a      	b.n	800198a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001974:	f3af 8000 	nop.w
 8001978:	4601      	mov	r1, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	60ba      	str	r2, [r7, #8]
 8001980:	b2ca      	uxtb	r2, r1
 8001982:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	429a      	cmp	r2, r3
 8001990:	dbf0      	blt.n	8001974 <_read+0x12>
  }

  return len;
 8001992:	687b      	ldr	r3, [r7, #4]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e009      	b.n	80019c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	60ba      	str	r2, [r7, #8]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fd74 	bl	80014a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3301      	adds	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dbf1      	blt.n	80019ae <_write+0x12>
  }
  return len;
 80019ca:	687b      	ldr	r3, [r7, #4]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_close>:

int _close(int file)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019fc:	605a      	str	r2, [r3, #4]
  return 0;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_isatty>:

int _isatty(int file)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a14:	2301      	movs	r3, #1
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a44:	4a14      	ldr	r2, [pc, #80]	@ (8001a98 <_sbrk+0x5c>)
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <_sbrk+0x60>)
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <_sbrk+0x64>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <_sbrk+0x68>)
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d207      	bcs.n	8001a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a6c:	f02b fb1c 	bl	802d0a8 <__errno>
 8001a70:	4603      	mov	r3, r0
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	e009      	b.n	8001a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a82:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <_sbrk+0x64>)
 8001a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200c0000 	.word	0x200c0000
 8001a9c:	00000800 	.word	0x00000800
 8001aa0:	20045ba4 	.word	0x20045ba4
 8001aa4:	2005c7c0 	.word	0x2005c7c0

08001aa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001aac:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <SystemInit+0x68>)
 8001aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ab2:	4a17      	ldr	r2, [pc, #92]	@ (8001b10 <SystemInit+0x68>)
 8001ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001abc:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <SystemInit+0x6c>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <SystemInit+0x6c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <SystemInit+0x6c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <SystemInit+0x6c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <SystemInit+0x6c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b14 <SystemInit+0x6c>)
 8001ada:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001ade:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001ae2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <SystemInit+0x6c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <SystemInit+0x6c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a09      	ldr	r2, [pc, #36]	@ (8001b14 <SystemInit+0x6c>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <SystemInit+0x6c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001afc:	4b04      	ldr	r3, [pc, #16]	@ (8001b10 <SystemInit+0x68>)
 8001afe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b02:	609a      	str	r2, [r3, #8]
  #endif
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00
 8001b14:	46020c00 	.word	0x46020c00

08001b18 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b28:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <MX_TIM6_Init+0x64>)
 8001b2a:	4a15      	ldr	r2, [pc, #84]	@ (8001b80 <MX_TIM6_Init+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <MX_TIM6_Init+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <MX_TIM6_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <MX_TIM6_Init+0x64>)
 8001b3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b40:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <MX_TIM6_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <MX_TIM6_Init+0x64>)
 8001b4a:	f008 fcab 	bl	800a4a4 <HAL_TIM_Base_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b54:	f7ff fcd2 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <MX_TIM6_Init+0x64>)
 8001b66:	f009 f80d 	bl	800ab84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b70:	f7ff fcc4 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20045ba8 	.word	0x20045ba8
 8001b80:	40001000 	.word	0x40001000

08001b84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <HAL_TIM_Base_MspInit+0x48>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d116      	bne.n	8001bc4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x4c>)
 8001b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x4c>)
 8001b9e:	f043 0310 	orr.w	r3, r3, #16
 8001ba2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x4c>)
 8001ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2105      	movs	r1, #5
 8001bb8:	2031      	movs	r0, #49	@ 0x31
 8001bba:	f000 fa15 	bl	8001fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001bbe:	2031      	movs	r0, #49	@ 0x31
 8001bc0:	f000 fa2c 	bl	800201c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40001000 	.word	0x40001000
 8001bd0:	46020c00 	.word	0x46020c00

08001bd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd8:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001bda:	4a23      	ldr	r2, [pc, #140]	@ (8001c68 <MX_USART1_UART_Init+0x94>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bde:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c10:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c1c:	4811      	ldr	r0, [pc, #68]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001c1e:	f009 f8b9 	bl	800ad94 <HAL_UART_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c28:	f7ff fc68 	bl	80014fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	480d      	ldr	r0, [pc, #52]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001c30:	f009 fd98 	bl	800b764 <HAL_UARTEx_SetTxFifoThreshold>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c3a:	f7ff fc5f 	bl	80014fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4808      	ldr	r0, [pc, #32]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001c42:	f009 fdcd 	bl	800b7e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c4c:	f7ff fc56 	bl	80014fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c50:	4804      	ldr	r0, [pc, #16]	@ (8001c64 <MX_USART1_UART_Init+0x90>)
 8001c52:	f009 fd4e 	bl	800b6f2 <HAL_UARTEx_DisableFifoMode>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c5c:	f7ff fc4e 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20045bf4 	.word	0x20045bf4
 8001c68:	40013800 	.word	0x40013800

08001c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b0ba      	sub	sp, #232	@ 0xe8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	22c0      	movs	r2, #192	@ 0xc0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f02b f969 	bl	802cf64 <memset>
  if(uartHandle->Instance==USART1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a26      	ldr	r2, [pc, #152]	@ (8001d30 <HAL_UART_MspInit+0xc4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d145      	bne.n	8001d28 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c9c:	f04f 0201 	mov.w	r2, #1
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 ff5f 	bl	8007b74 <HAL_RCCEx_PeriphCLKConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001cbc:	f7ff fc1e 	bl	80014fc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <HAL_UART_MspInit+0xc8>)
 8001cc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d34 <HAL_UART_MspInit+0xc8>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ccc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_UART_MspInit+0xc8>)
 8001cd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_UART_MspInit+0xc8>)
 8001ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce4:	4a13      	ldr	r2, [pc, #76]	@ (8001d34 <HAL_UART_MspInit+0xc8>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_UART_MspInit+0xc8>)
 8001cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cfc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d16:	2307      	movs	r3, #7
 8001d18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <HAL_UART_MspInit+0xcc>)
 8001d24:	f001 ffba 	bl	8003c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d28:	bf00      	nop
 8001d2a:	37e8      	adds	r7, #232	@ 0xe8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40013800 	.word	0x40013800
 8001d34:	46020c00 	.word	0x46020c00
 8001d38:	42020000 	.word	0x42020000

08001d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001d3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d74 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d40:	f7ff feb2 	bl	8001aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d46:	e003      	b.n	8001d50 <LoopCopyDataInit>

08001d48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d4e:	3104      	adds	r1, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d50:	480a      	ldr	r0, [pc, #40]	@ (8001d7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d52:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d58:	d3f6      	bcc.n	8001d48 <CopyDataInit>
	ldr	r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d5c:	e002      	b.n	8001d64 <LoopFillZerobss>

08001d5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d60:	f842 3b04 	str.w	r3, [r2], #4

08001d64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <LoopForever+0x16>)
	cmp	r2, r3
 8001d66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d68:	d3f9      	bcc.n	8001d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f02b f9a3 	bl	802d0b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6e:	f7ff fb15 	bl	800139c <main>

08001d72 <LoopForever>:

LoopForever:
    b LoopForever
 8001d72:	e7fe      	b.n	8001d72 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d74:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001d78:	08031004 	.word	0x08031004
	ldr	r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d80:	200000fc 	.word	0x200000fc
	ldr	r2, =_sbss
 8001d84:	20045900 	.word	0x20045900
	ldr	r3, = _ebss
 8001d88:	2005c7c0 	.word	0x2005c7c0

08001d8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_Init+0x50>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a11      	ldr	r2, [pc, #68]	@ (8001de0 <HAL_Init+0x50>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 f916 	bl	8001fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001da6:	f005 fccf 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <HAL_Init+0x54>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	490c      	ldr	r1, [pc, #48]	@ (8001de8 <HAL_Init+0x58>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <HAL_Init+0x5c>)
 8001dbe:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001dc0:	2004      	movs	r0, #4
 8001dc2:	f000 f939 	bl	8002038 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fcea 	bl	80017a0 <HAL_InitTick>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e002      	b.n	8001ddc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd6:	f7ff fcc5 	bl	8001764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40022000 	.word	0x40022000
 8001de4:	46020c00 	.word	0x46020c00
 8001de8:	0802e76c 	.word	0x0802e76c
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_IncTick+0x20>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_IncTick+0x24>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <HAL_IncTick+0x24>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	2000000c 	.word	0x2000000c
 8001e14:	20045c88 	.word	0x20045c88

08001e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	@ (8001e2c <HAL_GetTick+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20045c88 	.word	0x20045c88

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff ffee 	bl	8001e18 <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <HAL_Delay+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e56:	bf00      	nop
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
  {
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000000c 	.word	0x2000000c

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	@ (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	@ (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	@ (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	@ 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff4c 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff6:	f7ff ff63 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8001ffa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	6978      	ldr	r0, [r7, #20]
 8002002:	f7ff ffb3 	bl	8001f6c <NVIC_EncodePriority>
 8002006:	4602      	mov	r2, r0
 8002008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff82 	bl	8001f18 <__NVIC_SetPriority>
}
 8002014:	bf00      	nop
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff56 	bl	8001edc <__NVIC_EnableIRQ>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b04      	cmp	r3, #4
 8002044:	d844      	bhi.n	80020d0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002046:	a201      	add	r2, pc, #4	@ (adr r2, 800204c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204c:	0800206f 	.word	0x0800206f
 8002050:	0800208d 	.word	0x0800208d
 8002054:	080020af 	.word	0x080020af
 8002058:	080020d1 	.word	0x080020d1
 800205c:	08002061 	.word	0x08002061
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002060:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1e      	ldr	r2, [pc, #120]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6013      	str	r3, [r2, #0]
      break;
 800206c:	e031      	b.n	80020d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800206e:	4b1c      	ldr	r3, [pc, #112]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1b      	ldr	r2, [pc, #108]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800207a:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	4a18      	ldr	r2, [pc, #96]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002082:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800208a:	e022      	b.n	80020d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a13      	ldr	r2, [pc, #76]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002092:	f023 0304 	bic.w	r3, r3, #4
 8002096:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80020a2:	4a10      	ldr	r2, [pc, #64]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80020ac:	e011      	b.n	80020d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80020ae:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a0b      	ldr	r2, [pc, #44]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80020c4:	4a07      	ldr	r2, [pc, #28]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80020ce:	e000      	b.n	80020d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80020d0:	bf00      	nop
  }
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010
 80020e4:	46020c00 	.word	0x46020c00

080020e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e054      	b.n	80021a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7f5b      	ldrb	r3, [r3, #29]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe ff4e 	bl	8000fac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	791b      	ldrb	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a22      	ldr	r2, [pc, #136]	@ (80021ac <HAL_CRC_Init+0xc4>)
 8002124:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0218 	bic.w	r2, r2, #24
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	e00c      	b.n	8002152 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	461a      	mov	r2, r3
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f834 	bl	80021b0 <HAL_CRCEx_Polynomial_Set>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e028      	b.n	80021a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	795b      	ldrb	r3, [r3, #5]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d105      	bne.n	8002166 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f04f 32ff 	mov.w	r2, #4294967295
 8002162:	611a      	str	r2, [r3, #16]
 8002164:	e004      	b.n	8002170 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6912      	ldr	r2, [r2, #16]
 800216e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699a      	ldr	r2, [r3, #24]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	04c11db7 	.word	0x04c11db7

080021b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80021c0:	231f      	movs	r3, #31
 80021c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	75fb      	strb	r3, [r7, #23]
 80021d2:	e063      	b.n	800229c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80021d4:	bf00      	nop
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	613a      	str	r2, [r7, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d009      	beq.n	80021f4 <HAL_CRCEx_Polynomial_Set+0x44>
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b18      	cmp	r3, #24
 80021f8:	d846      	bhi.n	8002288 <HAL_CRCEx_Polynomial_Set+0xd8>
 80021fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002200 <HAL_CRCEx_Polynomial_Set+0x50>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	0800228f 	.word	0x0800228f
 8002204:	08002289 	.word	0x08002289
 8002208:	08002289 	.word	0x08002289
 800220c:	08002289 	.word	0x08002289
 8002210:	08002289 	.word	0x08002289
 8002214:	08002289 	.word	0x08002289
 8002218:	08002289 	.word	0x08002289
 800221c:	08002289 	.word	0x08002289
 8002220:	0800227d 	.word	0x0800227d
 8002224:	08002289 	.word	0x08002289
 8002228:	08002289 	.word	0x08002289
 800222c:	08002289 	.word	0x08002289
 8002230:	08002289 	.word	0x08002289
 8002234:	08002289 	.word	0x08002289
 8002238:	08002289 	.word	0x08002289
 800223c:	08002289 	.word	0x08002289
 8002240:	08002271 	.word	0x08002271
 8002244:	08002289 	.word	0x08002289
 8002248:	08002289 	.word	0x08002289
 800224c:	08002289 	.word	0x08002289
 8002250:	08002289 	.word	0x08002289
 8002254:	08002289 	.word	0x08002289
 8002258:	08002289 	.word	0x08002289
 800225c:	08002289 	.word	0x08002289
 8002260:	08002265 	.word	0x08002265
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b06      	cmp	r3, #6
 8002268:	d913      	bls.n	8002292 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800226e:	e010      	b.n	8002292 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b07      	cmp	r3, #7
 8002274:	d90f      	bls.n	8002296 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800227a:	e00c      	b.n	8002296 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	d90b      	bls.n	800229a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002286:	e008      	b.n	800229a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	75fb      	strb	r3, [r7, #23]
        break;
 800228c:	e006      	b.n	800229c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800228e:	bf00      	nop
 8002290:	e004      	b.n	800229c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002292:	bf00      	nop
 8002294:	e002      	b.n	800229c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002296:	bf00      	nop
 8002298:	e000      	b.n	800229c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800229a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10d      	bne.n	80022be <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 0118 	bic.w	r1, r3, #24
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022be:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e04f      	b.n	8002384 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_DMA_Start_IT+0x26>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e048      	b.n	8002384 <HAL_DMA_Start_IT+0xb8>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d136      	bne.n	8002374 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2202      	movs	r2, #2
 800230a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 fabc 	bl	8002898 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800232e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002346:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800235e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e007      	b.n	8002384 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2240      	movs	r2, #64	@ 0x40
 8002378:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002394:	f7ff fd40 	bl	8001e18 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e06b      	b.n	800247c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d008      	beq.n	80023c2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e05c      	b.n	800247c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0204 	orr.w	r2, r2, #4
 80023d0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2205      	movs	r2, #5
 80023d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80023da:	e020      	b.n	800241e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80023dc:	f7ff fd1c 	bl	8001e18 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d919      	bls.n	800241e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	f043 0210 	orr.w	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2203      	movs	r2, #3
 80023fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240e:	2201      	movs	r2, #1
 8002410:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e02e      	b.n	800247c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0d7      	beq.n	80023dc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0202 	orr.w	r2, r2, #2
 800243a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2204      	movs	r2, #4
 8002440:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800244c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800245a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002466:	2201      	movs	r2, #1
 8002468:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e019      	b.n	80024ca <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d004      	beq.n	80024ac <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e00e      	b.n	80024ca <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2204      	movs	r2, #4
 80024b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80024e6:	f023 030f 	bic.w	r3, r3, #15
 80024ea:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	3b50      	subs	r3, #80	@ 0x50
 80024f6:	09db      	lsrs	r3, r3, #7
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2201      	movs	r2, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 813b 	beq.w	800278c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d011      	beq.n	8002548 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800253a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002552:	2b00      	cmp	r3, #0
 8002554:	d011      	beq.n	800257a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800256c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	f043 0202 	orr.w	r2, r3, #2
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d011      	beq.n	80025ac <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800259e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	f043 0204 	orr.w	r2, r3, #4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d011      	beq.n	80025de <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025d0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	f043 0208 	orr.w	r2, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00c      	beq.n	8002614 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002602:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d04c      	beq.n	80026bc <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d045      	beq.n	80026bc <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002638:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b04      	cmp	r3, #4
 8002644:	d12e      	bne.n	80026a4 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002654:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0202 	orr.w	r2, r2, #2
 8002664:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267e:	2201      	movs	r2, #1
 8002680:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d07a      	beq.n	8002790 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	4798      	blx	r3
        }

        return;
 80026a2:	e075      	b.n	8002790 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2205      	movs	r2, #5
 80026a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d039      	beq.n	800273e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d032      	beq.n	800273e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d012      	beq.n	800270a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d116      	bne.n	800271c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d111      	bne.n	800271c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002704:	2201      	movs	r2, #1
 8002706:	731a      	strb	r2, [r3, #12]
 8002708:	e008      	b.n	800271c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002724:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	2b00      	cmp	r3, #0
 8002744:	d025      	beq.n	8002792 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0202 	orr.w	r2, r2, #2
 8002754:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800276e:	2201      	movs	r2, #1
 8002770:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
 800278a:	e002      	b.n	8002792 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800278c:	bf00      	nop
 800278e:	e000      	b.n	8002792 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002790:	bf00      	nop
    }
  }
}
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_DMA_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *const hdma,
                                           HAL_DMA_CallbackIDTypeDef CallbackID,
                                           void (*const pCallback)(DMA_HandleTypeDef *const _hdma))
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	460b      	mov	r3, r1
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e02f      	b.n	8002814 <HAL_DMA_RegisterCallback+0x7c>
  }

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d126      	bne.n	800280e <HAL_DMA_RegisterCallback+0x76>
  {
    /* Check callback ID */
    switch (CallbackID)
 80027c0:	7afb      	ldrb	r3, [r7, #11]
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d820      	bhi.n	8002808 <HAL_DMA_RegisterCallback+0x70>
 80027c6:	a201      	add	r2, pc, #4	@ (adr r2, 80027cc <HAL_DMA_RegisterCallback+0x34>)
 80027c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027cc:	080027e1 	.word	0x080027e1
 80027d0:	080027e9 	.word	0x080027e9
 80027d4:	080027f1 	.word	0x080027f1
 80027d8:	080027f9 	.word	0x080027f9
 80027dc:	08002801 	.word	0x08002801
    {
      case HAL_DMA_XFER_CPLT_CB_ID:
      {
        /* Register transfer complete callback */
        hdma->XferCpltCallback = pCallback;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80027e6:	e014      	b.n	8002812 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_HALFCPLT_CB_ID:
      {
        /* Register half transfer callback */
        hdma->XferHalfCpltCallback = pCallback;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80027ee:	e010      	b.n	8002812 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ERROR_CB_ID:
      {
        /* Register transfer error callback */
        hdma->XferErrorCallback = pCallback;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80027f6:	e00c      	b.n	8002812 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ABORT_CB_ID:
      {
        /* Register abort callback */
        hdma->XferAbortCallback = pCallback;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80027fe:	e008      	b.n	8002812 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_SUSPEND_CB_ID:
      {
        /* Register suspend callback */
        hdma->XferSuspendCallback = pCallback;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8002806:	e004      	b.n	8002812 <HAL_DMA_RegisterCallback+0x7a>
      }

      default:
      {
        /* Update error status */
        status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	75fb      	strb	r3, [r7, #23]
        break;
 800280c:	e001      	b.n	8002812 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    /* Update error status */
    status =  HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002812:	7dfb      	ldrb	r3, [r7, #23]
}
 8002814:	4618      	mov	r0, r3
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e02b      	b.n	800288c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800283c:	f023 030f 	bic.w	r3, r3, #15
 8002840:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284a:	3b50      	subs	r3, #80	@ 0x50
 800284c:	09db      	lsrs	r3, r3, #7
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2201      	movs	r2, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	d012      	beq.n	800288a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f003 0311 	and.w	r3, r3, #17
 800286a:	2b11      	cmp	r3, #17
 800286c:	d106      	bne.n	800287c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	e006      	b.n	800288a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	43db      	mvns	r3, r3
 8002884:	401a      	ands	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	b291      	uxth	r1, r2
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80028c4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e053      	b.n	800299c <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d106      	bne.n	800290e <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7fe fbaf 	bl	800106c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2202      	movs	r2, #2
 8002912:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6851      	ldr	r1, [r2, #4]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	69d2      	ldr	r2, [r2, #28]
 800292c:	4311      	orrs	r1, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	430b      	orrs	r3, r1
 8002934:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293c:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6891      	ldr	r1, [r2, #8]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6992      	ldr	r2, [r2, #24]
 800294c:	4311      	orrs	r1, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	430b      	orrs	r3, r1
 8002954:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	041b      	lsls	r3, r3, #16
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68d1      	ldr	r1, [r2, #12]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002972:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	051a      	lsls	r2, r3, #20
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	055b      	lsls	r3, r3, #21
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d026      	beq.n	8002a14 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d021      	beq.n	8002a14 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029de:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2201      	movs	r2, #1
 80029f2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2204      	movs	r2, #4
 80029f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d026      	beq.n	8002a6c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d021      	beq.n	8002a6c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a36:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a44:	f043 0202 	orr.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d026      	beq.n	8002ac4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d021      	beq.n	8002ac4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2208      	movs	r2, #8
 8002a96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9c:	f043 0204 	orr.w	r2, r3, #4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d013      	beq.n	8002af6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00e      	beq.n	8002af6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2204      	movs	r2, #4
 8002aee:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f853 	bl	8002b9c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d024      	beq.n	8002b4a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01f      	beq.n	8002b4a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b18:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01f      	beq.n	8002b94 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01a      	beq.n	8002b94 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2210      	movs	r2, #16
 8002b74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f80e 	bl	8002bb0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA2D_ConfigLayer+0x20>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e084      	b.n	8002cee <HAL_DMA2D_ConfigLayer+0x12a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	3328      	adds	r3, #40	@ 0x28
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4413      	add	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002c18:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002c24:	4b35      	ldr	r3, [pc, #212]	@ (8002cfc <HAL_DMA2D_ConfigLayer+0x138>)
 8002c26:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b0a      	cmp	r3, #10
 8002c2e:	d003      	beq.n	8002c38 <HAL_DMA2D_ConfigLayer+0x74>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b09      	cmp	r3, #9
 8002c36:	d107      	bne.n	8002c48 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	e005      	b.n	8002c54 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	061b      	lsls	r3, r3, #24
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d120      	bne.n	8002c9c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	ea02 0103 	and.w	r1, r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b0a      	cmp	r3, #10
 8002c82:	d003      	beq.n	8002c8c <HAL_DMA2D_ConfigLayer+0xc8>
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b09      	cmp	r3, #9
 8002c8a:	d127      	bne.n	8002cdc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002c98:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c9a:	e01f      	b.n	8002cdc <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	ea02 0103 	and.w	r1, r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b0a      	cmp	r3, #10
 8002cc4:	d003      	beq.n	8002cce <HAL_DMA2D_ConfigLayer+0x10a>
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b09      	cmp	r3, #9
 8002ccc:	d106      	bne.n	8002cdc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002cda:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	ff33000f 	.word	0xff33000f

08002d00 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff f886 	bl	8001e18 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0db      	b.n	8002ed0 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed8 <HAL_DMAEx_List_Init+0x1d8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	f000 809f 	beq.w	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6c      	ldr	r2, [pc, #432]	@ (8002edc <HAL_DMAEx_List_Init+0x1dc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	f000 8099 	beq.w	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a6a      	ldr	r2, [pc, #424]	@ (8002ee0 <HAL_DMAEx_List_Init+0x1e0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	f000 8093 	beq.w	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a68      	ldr	r2, [pc, #416]	@ (8002ee4 <HAL_DMAEx_List_Init+0x1e4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	f000 808d 	beq.w	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a66      	ldr	r2, [pc, #408]	@ (8002ee8 <HAL_DMAEx_List_Init+0x1e8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	f000 8087 	beq.w	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a64      	ldr	r2, [pc, #400]	@ (8002eec <HAL_DMAEx_List_Init+0x1ec>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	f000 8081 	beq.w	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a62      	ldr	r2, [pc, #392]	@ (8002ef0 <HAL_DMAEx_List_Init+0x1f0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d07b      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a61      	ldr	r2, [pc, #388]	@ (8002ef4 <HAL_DMAEx_List_Init+0x1f4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d076      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a5f      	ldr	r2, [pc, #380]	@ (8002ef8 <HAL_DMAEx_List_Init+0x1f8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d071      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5e      	ldr	r2, [pc, #376]	@ (8002efc <HAL_DMAEx_List_Init+0x1fc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d06c      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8002f00 <HAL_DMAEx_List_Init+0x200>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d067      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5b      	ldr	r2, [pc, #364]	@ (8002f04 <HAL_DMAEx_List_Init+0x204>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d062      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a59      	ldr	r2, [pc, #356]	@ (8002f08 <HAL_DMAEx_List_Init+0x208>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d05d      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a58      	ldr	r2, [pc, #352]	@ (8002f0c <HAL_DMAEx_List_Init+0x20c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d058      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a56      	ldr	r2, [pc, #344]	@ (8002f10 <HAL_DMAEx_List_Init+0x210>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d053      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a55      	ldr	r2, [pc, #340]	@ (8002f14 <HAL_DMAEx_List_Init+0x214>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d04e      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a53      	ldr	r2, [pc, #332]	@ (8002f18 <HAL_DMAEx_List_Init+0x218>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d049      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a52      	ldr	r2, [pc, #328]	@ (8002f1c <HAL_DMAEx_List_Init+0x21c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d044      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a50      	ldr	r2, [pc, #320]	@ (8002f20 <HAL_DMAEx_List_Init+0x220>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d03f      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a4f      	ldr	r2, [pc, #316]	@ (8002f24 <HAL_DMAEx_List_Init+0x224>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d03a      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a4d      	ldr	r2, [pc, #308]	@ (8002f28 <HAL_DMAEx_List_Init+0x228>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d035      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a4c      	ldr	r2, [pc, #304]	@ (8002f2c <HAL_DMAEx_List_Init+0x22c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d030      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a4a      	ldr	r2, [pc, #296]	@ (8002f30 <HAL_DMAEx_List_Init+0x230>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a49      	ldr	r2, [pc, #292]	@ (8002f34 <HAL_DMAEx_List_Init+0x234>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d026      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a47      	ldr	r2, [pc, #284]	@ (8002f38 <HAL_DMAEx_List_Init+0x238>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d021      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a46      	ldr	r2, [pc, #280]	@ (8002f3c <HAL_DMAEx_List_Init+0x23c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d01c      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a44      	ldr	r2, [pc, #272]	@ (8002f40 <HAL_DMAEx_List_Init+0x240>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d017      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a43      	ldr	r2, [pc, #268]	@ (8002f44 <HAL_DMAEx_List_Init+0x244>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d012      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a41      	ldr	r2, [pc, #260]	@ (8002f48 <HAL_DMAEx_List_Init+0x248>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00d      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a40      	ldr	r2, [pc, #256]	@ (8002f4c <HAL_DMAEx_List_Init+0x24c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d008      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a3e      	ldr	r2, [pc, #248]	@ (8002f50 <HAL_DMAEx_List_Init+0x250>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d003      	beq.n	8002e62 <HAL_DMAEx_List_Init+0x162>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f54 <HAL_DMAEx_List_Init+0x254>)
 8002e60:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695a      	ldr	r2, [r3, #20]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0206 	orr.w	r2, r2, #6
 8002e80:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002e82:	e00f      	b.n	8002ea4 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002e84:	f7fe ffc8 	bl	8001e18 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d908      	bls.n	8002ea4 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2210      	movs	r2, #16
 8002e96:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e015      	b.n	8002ed0 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e8      	bne.n	8002e84 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fabc 	bl	8003430 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40020050 	.word	0x40020050
 8002edc:	50020050 	.word	0x50020050
 8002ee0:	400200d0 	.word	0x400200d0
 8002ee4:	500200d0 	.word	0x500200d0
 8002ee8:	40020150 	.word	0x40020150
 8002eec:	50020150 	.word	0x50020150
 8002ef0:	400201d0 	.word	0x400201d0
 8002ef4:	500201d0 	.word	0x500201d0
 8002ef8:	40020250 	.word	0x40020250
 8002efc:	50020250 	.word	0x50020250
 8002f00:	400202d0 	.word	0x400202d0
 8002f04:	500202d0 	.word	0x500202d0
 8002f08:	40020350 	.word	0x40020350
 8002f0c:	50020350 	.word	0x50020350
 8002f10:	400203d0 	.word	0x400203d0
 8002f14:	500203d0 	.word	0x500203d0
 8002f18:	40020450 	.word	0x40020450
 8002f1c:	50020450 	.word	0x50020450
 8002f20:	400204d0 	.word	0x400204d0
 8002f24:	500204d0 	.word	0x500204d0
 8002f28:	40020550 	.word	0x40020550
 8002f2c:	50020550 	.word	0x50020550
 8002f30:	400205d0 	.word	0x400205d0
 8002f34:	500205d0 	.word	0x500205d0
 8002f38:	40020650 	.word	0x40020650
 8002f3c:	50020650 	.word	0x50020650
 8002f40:	400206d0 	.word	0x400206d0
 8002f44:	500206d0 	.word	0x500206d0
 8002f48:	40020750 	.word	0x40020750
 8002f4c:	50020750 	.word	0x50020750
 8002f50:	400207d0 	.word	0x400207d0
 8002f54:	500207d0 	.word	0x500207d0

08002f58 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_DMAEx_List_Start_IT+0x16>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e082      	b.n	8003078 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f78:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f84:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d005      	beq.n	8002f98 <HAL_DMAEx_List_Start_IT+0x40>
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d16a      	bne.n	8003068 <HAL_DMAEx_List_Start_IT+0x110>
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d067      	beq.n	8003068 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d157      	bne.n	8003054 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_DMAEx_List_Start_IT+0x5a>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e062      	b.n	8003078 <HAL_DMAEx_List_Start_IT+0x120>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002fe6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffe:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003016:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f107 010c 	add.w	r1, r7, #12
 8003022:	2200      	movs	r2, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fd1f 	bl	8003a68 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	0c0b      	lsrs	r3, r1, #16
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003048:	4013      	ands	r3, r2
 800304a:	68f9      	ldr	r1, [r7, #12]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	430b      	orrs	r3, r1
 8003052:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e007      	b.n	8003078 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2240      	movs	r2, #64	@ 0x40
 800306c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_DMAEx_List_BuildNode+0x16>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e004      	b.n	80030a4 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800309a:	6839      	ldr	r1, [r7, #0]
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fb1f 	bl	80036e0 <DMA_List_BuildNode>

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_DMAEx_List_InsertNode_Head>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Head(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_DMAEx_List_InsertNode_Head+0x16>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_DMAEx_List_InsertNode_Head+0x1a>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e057      	b.n	8003176 <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d104      	bne.n	80030d8 <HAL_DMAEx_List_InsertNode_Head+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2204      	movs	r2, #4
 80030d2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e04e      	b.n	8003176 <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2200      	movs	r2, #0
 80030de:	6839      	ldr	r1, [r7, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fc55 	bl	8003990 <DMA_List_CheckNodesBaseAddresses>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_DMAEx_List_InsertNode_Head+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2205      	movs	r2, #5
 80030f0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e03f      	b.n	8003176 <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fc76 	bl	80039f0 <DMA_List_CheckNodesTypes>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <HAL_DMAEx_List_InsertNode_Head+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2204      	movs	r2, #4
 800310e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e030      	b.n	8003176 <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]

  /* Empty queue */
  if (pQList->Head == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d103      	bne.n	8003130 <HAL_DMAEx_List_InsertNode_Head+0x84>
  {
    pQList->Head = pNewNode;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e016      	b.n	800315e <HAL_DMAEx_List_InsertNode_Head+0xb2>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003130:	f107 0208 	add.w	r2, r7, #8
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	4619      	mov	r1, r3
 800313a:	6838      	ldr	r0, [r7, #0]
 800313c:	f000 fc94 	bl	8003a68 <DMA_List_GetCLLRNodeInfo>

    pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800314a:	4013      	ands	r3, r2
 800314c:	68f9      	ldr	r1, [r7, #12]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	4319      	orrs	r1, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQList->Head                         = pNewNode;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b08a      	sub	sp, #40	@ 0x28
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e066      	b.n	8003266 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d104      	bne.n	80031aa <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2204      	movs	r2, #4
 80031a4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e05d      	b.n	8003266 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	6839      	ldr	r1, [r7, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fbec 	bl	8003990 <DMA_List_CheckNodesBaseAddresses>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e04e      	b.n	8003266 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2200      	movs	r2, #0
 80031ce:	6839      	ldr	r1, [r7, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fc0d 	bl	80039f0 <DMA_List_CheckNodesTypes>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2204      	movs	r2, #4
 80031e0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e03f      	b.n	8003266 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e02b      	b.n	800324e <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80031f6:	f107 0220 	add.w	r2, r7, #32
 80031fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031fe:	4619      	mov	r1, r3
 8003200:	6838      	ldr	r0, [r7, #0]
 8003202:	f000 fc31 	bl	8003a68 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800320a:	f107 030c 	add.w	r3, r7, #12
 800320e:	461a      	mov	r2, r3
 8003210:	2100      	movs	r1, #0
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fc58 	bl	8003ac8 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	461a      	mov	r2, r3
 8003226:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800322a:	4013      	ands	r3, r2
 800322c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800322e:	6a3a      	ldr	r2, [r7, #32]
 8003230:	4319      	orrs	r1, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800323e:	4013      	ands	r3, r2
 8003240:	6a79      	ldr	r1, [r7, #36]	@ 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4610      	mov	r0, r2
 8003246:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003248:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 800324a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3728      	adds	r7, #40	@ 0x28
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_DMAEx_List_ResetQ>:
  * @brief  Reset the linked-list queue and unlink queue nodes.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_ResetQ(DMA_QListTypeDef *const pQList)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b088      	sub	sp, #32
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_DMAEx_List_ResetQ+0x12>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e03c      	b.n	80032fa <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7b1b      	ldrb	r3, [r3, #12]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d104      	bne.n	8003294 <HAL_DMAEx_List_ResetQ+0x26>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e032      	b.n	80032fa <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d104      	bne.n	80032a6 <HAL_DMAEx_List_ResetQ+0x38>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2204      	movs	r2, #4
 80032a0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e029      	b.n	80032fa <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	611a      	str	r2, [r3, #16]

  /* Check the queue */
  if (pQList->Head != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00f      	beq.n	80032da <HAL_DMAEx_List_ResetQ+0x6c>
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pQList->Head, NULL, &cllr_offset);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f107 021c 	add.w	r2, r7, #28
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fbcf 	bl	8003a68 <DMA_List_GetCLLRNodeInfo>

    /* Reset selected queue nodes */
    node_info.cllr_offset = cllr_offset;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	60bb      	str	r3, [r7, #8]
    DMA_List_ResetQueueNodes(pQList, &node_info);
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fc96 	bl	8003c06 <DMA_List_ResetQueueNodes>
  }

  /* Reset head node address */
  pQList->Head = NULL;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

  /* Reset node number */
  pQList->NodeNumber = 0U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]

  /* Reset first circular node */
  pQList->FirstCircularNode = NULL;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_RESET;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_DMAEx_List_LinkQ+0x16>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e072      	b.n	8003404 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003324:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d002      	beq.n	8003338 <HAL_DMAEx_List_LinkQ+0x34>
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d108      	bne.n	800334a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2240      	movs	r2, #64	@ 0x40
 800333c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e05c      	b.n	8003404 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	7b1b      	ldrb	r3, [r3, #12]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d104      	bne.n	800335e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2201      	movs	r2, #1
 8003358:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e052      	b.n	8003404 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2b      	ldr	r2, [pc, #172]	@ (8003410 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <HAL_DMAEx_List_LinkQ+0xaa>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a29      	ldr	r2, [pc, #164]	@ (8003414 <HAL_DMAEx_List_LinkQ+0x110>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01d      	beq.n	80033ae <HAL_DMAEx_List_LinkQ+0xaa>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a28      	ldr	r2, [pc, #160]	@ (8003418 <HAL_DMAEx_List_LinkQ+0x114>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d018      	beq.n	80033ae <HAL_DMAEx_List_LinkQ+0xaa>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a26      	ldr	r2, [pc, #152]	@ (800341c <HAL_DMAEx_List_LinkQ+0x118>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_DMAEx_List_LinkQ+0xaa>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a25      	ldr	r2, [pc, #148]	@ (8003420 <HAL_DMAEx_List_LinkQ+0x11c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_DMAEx_List_LinkQ+0xaa>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a23      	ldr	r2, [pc, #140]	@ (8003424 <HAL_DMAEx_List_LinkQ+0x120>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_DMAEx_List_LinkQ+0xaa>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a22      	ldr	r2, [pc, #136]	@ (8003428 <HAL_DMAEx_List_LinkQ+0x124>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_DMAEx_List_LinkQ+0xaa>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a20      	ldr	r2, [pc, #128]	@ (800342c <HAL_DMAEx_List_LinkQ+0x128>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_DMAEx_List_LinkQ+0xae>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_DMAEx_List_LinkQ+0xb0>
 80033b2:	2300      	movs	r3, #0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2203      	movs	r2, #3
 80033ca:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e019      	b.n	8003404 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d4:	2b81      	cmp	r3, #129	@ 0x81
 80033d6:	d108      	bne.n	80033ea <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10d      	bne.n	80033fc <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2204      	movs	r2, #4
 80033e4:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e00c      	b.n	8003404 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2204      	movs	r2, #4
 80033f6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e003      	b.n	8003404 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40020650 	.word	0x40020650
 8003414:	50020650 	.word	0x50020650
 8003418:	400206d0 	.word	0x400206d0
 800341c:	500206d0 	.word	0x500206d0
 8003420:	40020750 	.word	0x40020750
 8003424:	50020750 	.word	0x50020750
 8003428:	400207d0 	.word	0x400207d0
 800342c:	500207d0 	.word	0x500207d0

08003430 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a85      	ldr	r2, [pc, #532]	@ (8003660 <DMA_List_Init+0x230>)
 800344a:	4293      	cmp	r3, r2
 800344c:	f000 80a0 	beq.w	8003590 <DMA_List_Init+0x160>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a83      	ldr	r2, [pc, #524]	@ (8003664 <DMA_List_Init+0x234>)
 8003456:	4293      	cmp	r3, r2
 8003458:	f000 809a 	beq.w	8003590 <DMA_List_Init+0x160>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a81      	ldr	r2, [pc, #516]	@ (8003668 <DMA_List_Init+0x238>)
 8003462:	4293      	cmp	r3, r2
 8003464:	f000 8094 	beq.w	8003590 <DMA_List_Init+0x160>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a7f      	ldr	r2, [pc, #508]	@ (800366c <DMA_List_Init+0x23c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	f000 808e 	beq.w	8003590 <DMA_List_Init+0x160>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a7d      	ldr	r2, [pc, #500]	@ (8003670 <DMA_List_Init+0x240>)
 800347a:	4293      	cmp	r3, r2
 800347c:	f000 8088 	beq.w	8003590 <DMA_List_Init+0x160>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a7b      	ldr	r2, [pc, #492]	@ (8003674 <DMA_List_Init+0x244>)
 8003486:	4293      	cmp	r3, r2
 8003488:	f000 8082 	beq.w	8003590 <DMA_List_Init+0x160>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a79      	ldr	r2, [pc, #484]	@ (8003678 <DMA_List_Init+0x248>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d07c      	beq.n	8003590 <DMA_List_Init+0x160>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a78      	ldr	r2, [pc, #480]	@ (800367c <DMA_List_Init+0x24c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d077      	beq.n	8003590 <DMA_List_Init+0x160>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a76      	ldr	r2, [pc, #472]	@ (8003680 <DMA_List_Init+0x250>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d072      	beq.n	8003590 <DMA_List_Init+0x160>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a75      	ldr	r2, [pc, #468]	@ (8003684 <DMA_List_Init+0x254>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d06d      	beq.n	8003590 <DMA_List_Init+0x160>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a73      	ldr	r2, [pc, #460]	@ (8003688 <DMA_List_Init+0x258>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d068      	beq.n	8003590 <DMA_List_Init+0x160>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a72      	ldr	r2, [pc, #456]	@ (800368c <DMA_List_Init+0x25c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d063      	beq.n	8003590 <DMA_List_Init+0x160>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a70      	ldr	r2, [pc, #448]	@ (8003690 <DMA_List_Init+0x260>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d05e      	beq.n	8003590 <DMA_List_Init+0x160>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6f      	ldr	r2, [pc, #444]	@ (8003694 <DMA_List_Init+0x264>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d059      	beq.n	8003590 <DMA_List_Init+0x160>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a6d      	ldr	r2, [pc, #436]	@ (8003698 <DMA_List_Init+0x268>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d054      	beq.n	8003590 <DMA_List_Init+0x160>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6c      	ldr	r2, [pc, #432]	@ (800369c <DMA_List_Init+0x26c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d04f      	beq.n	8003590 <DMA_List_Init+0x160>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6a      	ldr	r2, [pc, #424]	@ (80036a0 <DMA_List_Init+0x270>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d04a      	beq.n	8003590 <DMA_List_Init+0x160>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a69      	ldr	r2, [pc, #420]	@ (80036a4 <DMA_List_Init+0x274>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d045      	beq.n	8003590 <DMA_List_Init+0x160>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a67      	ldr	r2, [pc, #412]	@ (80036a8 <DMA_List_Init+0x278>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d040      	beq.n	8003590 <DMA_List_Init+0x160>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a66      	ldr	r2, [pc, #408]	@ (80036ac <DMA_List_Init+0x27c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d03b      	beq.n	8003590 <DMA_List_Init+0x160>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a64      	ldr	r2, [pc, #400]	@ (80036b0 <DMA_List_Init+0x280>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d036      	beq.n	8003590 <DMA_List_Init+0x160>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a63      	ldr	r2, [pc, #396]	@ (80036b4 <DMA_List_Init+0x284>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d031      	beq.n	8003590 <DMA_List_Init+0x160>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a61      	ldr	r2, [pc, #388]	@ (80036b8 <DMA_List_Init+0x288>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02c      	beq.n	8003590 <DMA_List_Init+0x160>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a60      	ldr	r2, [pc, #384]	@ (80036bc <DMA_List_Init+0x28c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d027      	beq.n	8003590 <DMA_List_Init+0x160>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a5e      	ldr	r2, [pc, #376]	@ (80036c0 <DMA_List_Init+0x290>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d022      	beq.n	8003590 <DMA_List_Init+0x160>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5d      	ldr	r2, [pc, #372]	@ (80036c4 <DMA_List_Init+0x294>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d01d      	beq.n	8003590 <DMA_List_Init+0x160>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a5b      	ldr	r2, [pc, #364]	@ (80036c8 <DMA_List_Init+0x298>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d018      	beq.n	8003590 <DMA_List_Init+0x160>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5a      	ldr	r2, [pc, #360]	@ (80036cc <DMA_List_Init+0x29c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <DMA_List_Init+0x160>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a58      	ldr	r2, [pc, #352]	@ (80036d0 <DMA_List_Init+0x2a0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00e      	beq.n	8003590 <DMA_List_Init+0x160>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a57      	ldr	r2, [pc, #348]	@ (80036d4 <DMA_List_Init+0x2a4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d009      	beq.n	8003590 <DMA_List_Init+0x160>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a55      	ldr	r2, [pc, #340]	@ (80036d8 <DMA_List_Init+0x2a8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <DMA_List_Init+0x160>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a54      	ldr	r2, [pc, #336]	@ (80036dc <DMA_List_Init+0x2ac>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d101      	bne.n	8003594 <DMA_List_Init+0x164>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <DMA_List_Init+0x166>
 8003594:	2300      	movs	r3, #0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d004      	beq.n	80035a4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80035c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2200      	movs	r2, #0
 80035d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a36      	ldr	r2, [pc, #216]	@ (80036c0 <DMA_List_Init+0x290>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d022      	beq.n	8003632 <DMA_List_Init+0x202>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a34      	ldr	r2, [pc, #208]	@ (80036c4 <DMA_List_Init+0x294>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01d      	beq.n	8003632 <DMA_List_Init+0x202>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a33      	ldr	r2, [pc, #204]	@ (80036c8 <DMA_List_Init+0x298>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d018      	beq.n	8003632 <DMA_List_Init+0x202>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a31      	ldr	r2, [pc, #196]	@ (80036cc <DMA_List_Init+0x29c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <DMA_List_Init+0x202>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a30      	ldr	r2, [pc, #192]	@ (80036d0 <DMA_List_Init+0x2a0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00e      	beq.n	8003632 <DMA_List_Init+0x202>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2e      	ldr	r2, [pc, #184]	@ (80036d4 <DMA_List_Init+0x2a4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d009      	beq.n	8003632 <DMA_List_Init+0x202>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a2d      	ldr	r2, [pc, #180]	@ (80036d8 <DMA_List_Init+0x2a8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d004      	beq.n	8003632 <DMA_List_Init+0x202>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2b      	ldr	r2, [pc, #172]	@ (80036dc <DMA_List_Init+0x2ac>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d101      	bne.n	8003636 <DMA_List_Init+0x206>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <DMA_List_Init+0x208>
 8003636:	2300      	movs	r3, #0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2200      	movs	r2, #0
 800364a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2200      	movs	r2, #0
 8003652:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40020050 	.word	0x40020050
 8003664:	50020050 	.word	0x50020050
 8003668:	400200d0 	.word	0x400200d0
 800366c:	500200d0 	.word	0x500200d0
 8003670:	40020150 	.word	0x40020150
 8003674:	50020150 	.word	0x50020150
 8003678:	400201d0 	.word	0x400201d0
 800367c:	500201d0 	.word	0x500201d0
 8003680:	40020250 	.word	0x40020250
 8003684:	50020250 	.word	0x50020250
 8003688:	400202d0 	.word	0x400202d0
 800368c:	500202d0 	.word	0x500202d0
 8003690:	40020350 	.word	0x40020350
 8003694:	50020350 	.word	0x50020350
 8003698:	400203d0 	.word	0x400203d0
 800369c:	500203d0 	.word	0x500203d0
 80036a0:	40020450 	.word	0x40020450
 80036a4:	50020450 	.word	0x50020450
 80036a8:	400204d0 	.word	0x400204d0
 80036ac:	500204d0 	.word	0x500204d0
 80036b0:	40020550 	.word	0x40020550
 80036b4:	50020550 	.word	0x50020550
 80036b8:	400205d0 	.word	0x400205d0
 80036bc:	500205d0 	.word	0x500205d0
 80036c0:	40020650 	.word	0x40020650
 80036c4:	50020650 	.word	0x50020650
 80036c8:	400206d0 	.word	0x400206d0
 80036cc:	500206d0 	.word	0x500206d0
 80036d0:	40020750 	.word	0x40020750
 80036d4:	50020750 	.word	0x50020750
 80036d8:	400207d0 	.word	0x400207d0
 80036dc:	500207d0 	.word	0x500207d0

080036e0 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80036f2:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80036f8:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80036fe:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003704:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d017      	beq.n	8003746 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	051b      	lsls	r3, r3, #20
 800372c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003730:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	3b01      	subs	r3, #1
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800373e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003740:	431a      	orrs	r2, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	f240 237f 	movw	r3, #639	@ 0x27f
 8003752:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003754:	431a      	orrs	r2, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003762:	d10c      	bne.n	800377e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d011      	beq.n	8003794 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	e00a      	b.n	8003794 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003786:	d105      	bne.n	8003794 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00f      	beq.n	80037bc <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ae:	041b      	lsls	r3, r3, #16
 80037b0:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80037b4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80037b6:	431a      	orrs	r2, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d04e      	beq.n	8003870 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037da:	3b01      	subs	r3, #1
 80037dc:	0419      	lsls	r1, r3, #16
 80037de:	4b6a      	ldr	r3, [pc, #424]	@ (8003988 <DMA_List_BuildNode+0x2a8>)
 80037e0:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80037e2:	431a      	orrs	r2, r3
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	da06      	bge.n	80037fe <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	e005      	b.n	800380a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380e:	2b00      	cmp	r3, #0
 8003810:	da06      	bge.n	8003820 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	609a      	str	r2, [r3, #8]
 800381e:	e005      	b.n	800382c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003830:	2b00      	cmp	r3, #0
 8003832:	da06      	bge.n	8003842 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e005      	b.n	800384e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003852:	2b00      	cmp	r3, #0
 8003854:	da06      	bge.n	8003864 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	609a      	str	r2, [r3, #8]
 8003862:	e005      	b.n	8003870 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d05d      	beq.n	8003948 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003890:	2b00      	cmp	r3, #0
 8003892:	da09      	bge.n	80038a8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003898:	425b      	negs	r3, r3
 800389a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	615a      	str	r2, [r3, #20]
 80038a6:	e005      	b.n	80038b4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ac:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	da0d      	bge.n	80038d8 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c0:	425b      	negs	r3, r3
 80038c2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	0419      	lsls	r1, r3, #16
 80038cc:	4b2f      	ldr	r3, [pc, #188]	@ (800398c <DMA_List_BuildNode+0x2ac>)
 80038ce:	400b      	ands	r3, r1
 80038d0:	431a      	orrs	r2, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	615a      	str	r2, [r3, #20]
 80038d6:	e009      	b.n	80038ec <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e0:	0419      	lsls	r1, r3, #16
 80038e2:	4b2a      	ldr	r3, [pc, #168]	@ (800398c <DMA_List_BuildNode+0x2ac>)
 80038e4:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80038e6:	431a      	orrs	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da08      	bge.n	8003906 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f8:	425b      	negs	r3, r3
 80038fa:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	619a      	str	r2, [r3, #24]
 8003904:	e004      	b.n	8003910 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003914:	2b00      	cmp	r3, #0
 8003916:	da0b      	bge.n	8003930 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	425b      	negs	r3, r3
 800391e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003928:	431a      	orrs	r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	619a      	str	r2, [r3, #24]
 800392e:	e007      	b.n	8003940 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003938:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800393a:	431a      	orrs	r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	61da      	str	r2, [r3, #28]
 8003946:	e002      	b.n	800394e <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800396e:	e005      	b.n	800397c <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	07ff0000 	.word	0x07ff0000
 800398c:	1fff0000 	.word	0x1fff0000

08003990 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	041b      	lsls	r3, r3, #16
 80039aa:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e00a      	b.n	80039d2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e004      	b.n	80039d2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d001      	beq.n	80039e2 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e00e      	b.n	8003a2e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e006      	b.n	8003a2e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8003a40:	2302      	movs	r3, #2
 8003a42:	e00b      	b.n	8003a5c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d001      	beq.n	8003a5a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e000      	b.n	8003a5c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00c      	beq.n	8003a9a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac0 <DMA_List_GetCLLRNodeInfo+0x58>)
 8003a8a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00f      	beq.n	8003ab2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2207      	movs	r2, #7
 8003a96:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003a98:	e00b      	b.n	8003ab2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4a08      	ldr	r2, [pc, #32]	@ (8003ac4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003aa4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2205      	movs	r2, #5
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	fe010000 	.word	0xfe010000
 8003ac4:	f8010000 	.word	0xf8010000

08003ac8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	@ 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d142      	bne.n	8003b72 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8003aec:	e01d      	b.n	8003b2a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d107      	bne.n	8003b04 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	e00f      	b.n	8003b24 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4413      	add	r3, r2
 8003b14:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003b1c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	3301      	adds	r3, #1
 8003b28:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3dc      	bcc.n	8003aee <DMA_List_FindNode+0x26>
 8003b34:	e029      	b.n	8003b8a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	e00f      	b.n	8003b6c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003b64:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d206      	bcs.n	8003b8a <DMA_List_FindNode+0xc2>
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b82:	4013      	ands	r3, r2
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d1d5      	bne.n	8003b36 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b96:	4013      	ands	r3, r2
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d001      	beq.n	8003ba2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e02b      	b.n	8003bfa <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	041b      	lsls	r3, r3, #16
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00f      	beq.n	8003bf8 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8003be8:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3724      	adds	r7, #36	@ 0x24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <DMA_List_ResetQueueNodes>:
  * @param  NodeInfo : Pointer to a DMA_NodeInQInfoTypeDef structure that contains node linked to queue information.
  * @retval None.
  */
static void DMA_List_ResetQueueNodes(DMA_QListTypeDef const *const pQList,
                                     DMA_NodeInQInfoTypeDef const *const NodeInfo)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
  uint32_t node_idx = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
  uint32_t currentnode_address  = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]
  uint32_t previousnode_address;
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60bb      	str	r3, [r7, #8]

  /* Check that previous node is linked to the selected queue */
  while (node_idx < pQList->NodeNumber)
 8003c1e:	e031      	b.n	8003c84 <DMA_List_ResetQueueNodes+0x7e>
  {
    /* Get head node address */
    if (node_idx == 0U)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d110      	bne.n	8003c48 <DMA_List_ResetQueueNodes+0x42>
    {
      previousnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c30:	4013      	ands	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
      currentnode_address  = (pQList->Head->LinkRegisters[cllr_offset] & DMA_CLLR_LA);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c3e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	e00f      	b.n	8003c68 <DMA_List_ResetQueueNodes+0x62>
    }
    /* Calculate nodes addresses */
    else
    {
      previousnode_address = currentnode_address;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	60fb      	str	r3, [r7, #12]
      currentnode_address =
        ((DMA_NodeTypeDef *)(currentnode_address +
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	041b      	lsls	r3, r3, #16
        ((DMA_NodeTypeDef *)(currentnode_address +
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	461a      	mov	r2, r3
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
      currentnode_address =
 8003c60:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
    }

    /* Reset node */
    ((DMA_NodeTypeDef *)(previousnode_address +
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	041b      	lsls	r3, r3, #16
    ((DMA_NodeTypeDef *)(previousnode_address +
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	4619      	mov	r1, r3
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Increment node index */
    node_idx++;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3301      	adds	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
  while (node_idx < pQList->NodeNumber)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d3c8      	bcc.n	8003c20 <DMA_List_ResetQueueNodes+0x1a>
  }
}
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	@ 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003cae:	e1ba      	b.n	8004026 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 81aa 	beq.w	8004020 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a55      	ldr	r2, [pc, #340]	@ (8003e24 <HAL_GPIO_Init+0x188>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d15d      	bne.n	8003d90 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003cda:	2201      	movs	r2, #1
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0201 	and.w	r2, r3, #1
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003d04:	4a48      	ldr	r2, [pc, #288]	@ (8003e28 <HAL_GPIO_Init+0x18c>)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d0c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003d0e:	4a46      	ldr	r2, [pc, #280]	@ (8003e28 <HAL_GPIO_Init+0x18c>)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	08da      	lsrs	r2, r3, #3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	3208      	adds	r2, #8
 8003d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d26:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	220f      	movs	r2, #15
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	220b      	movs	r2, #11
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	08da      	lsrs	r2, r3, #3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	3208      	adds	r2, #8
 8003d5a:	69f9      	ldr	r1, [r7, #28]
 8003d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e067      	b.n	8003e60 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0x104>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b12      	cmp	r3, #18
 8003d9e:	d145      	bne.n	8003e2c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	08da      	lsrs	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3208      	adds	r2, #8
 8003da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	220f      	movs	r2, #15
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f003 020f 	and.w	r2, r3, #15
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	08da      	lsrs	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3208      	adds	r2, #8
 8003de6:	69f9      	ldr	r1, [r7, #28]
 8003de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	2203      	movs	r2, #3
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 0203 	and.w	r2, r3, #3
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e01e      	b.n	8003e60 <HAL_GPIO_Init+0x1c4>
 8003e22:	bf00      	nop
 8003e24:	46020000 	.word	0x46020000
 8003e28:	0802e7c4 	.word	0x0802e7c4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2203      	movs	r2, #3
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0203 	and.w	r2, r3, #3
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d00b      	beq.n	8003e80 <HAL_GPIO_Init+0x1e4>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d007      	beq.n	8003e80 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e74:	2b11      	cmp	r3, #17
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b12      	cmp	r3, #18
 8003e7e:	d130      	bne.n	8003ee2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	f003 0201 	and.w	r2, r3, #1
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d017      	beq.n	8003f1a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d07c      	beq.n	8004020 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003f26:	4a47      	ldr	r2, [pc, #284]	@ (8004044 <HAL_GPIO_Init+0x3a8>)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	3318      	adds	r3, #24
 8003f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f32:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	220f      	movs	r2, #15
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0a9a      	lsrs	r2, r3, #10
 8003f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004048 <HAL_GPIO_Init+0x3ac>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	f002 0203 	and.w	r2, r2, #3
 8003f58:	00d2      	lsls	r2, r2, #3
 8003f5a:	4093      	lsls	r3, r2
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003f62:	4938      	ldr	r1, [pc, #224]	@ (8004044 <HAL_GPIO_Init+0x3a8>)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	089b      	lsrs	r3, r3, #2
 8003f68:	3318      	adds	r3, #24
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003f70:	4b34      	ldr	r3, [pc, #208]	@ (8004044 <HAL_GPIO_Init+0x3a8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003f94:	4a2b      	ldr	r2, [pc, #172]	@ (8004044 <HAL_GPIO_Init+0x3a8>)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8004044 <HAL_GPIO_Init+0x3a8>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003fbe:	4a21      	ldr	r2, [pc, #132]	@ (8004044 <HAL_GPIO_Init+0x3a8>)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8004044 <HAL_GPIO_Init+0x3a8>)
 8003fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003fea:	4a16      	ldr	r2, [pc, #88]	@ (8004044 <HAL_GPIO_Init+0x3a8>)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003ff2:	4b14      	ldr	r3, [pc, #80]	@ (8004044 <HAL_GPIO_Init+0x3a8>)
 8003ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	4013      	ands	r3, r2
 8004002:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004018:	4a0a      	ldr	r2, [pc, #40]	@ (8004044 <HAL_GPIO_Init+0x3a8>)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3301      	adds	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	f47f ae3d 	bne.w	8003cb0 <HAL_GPIO_Init+0x14>
  }
}
 8004036:	bf00      	nop
 8004038:	bf00      	nop
 800403a:	3724      	adds	r7, #36	@ 0x24
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	46022000 	.word	0x46022000
 8004048:	002f7f7f 	.word	0x002f7f7f

0800404c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	887b      	ldrh	r3, [r7, #2]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	e001      	b.n	800406e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]
 8004088:	4613      	mov	r3, r2
 800408a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800408c:	787b      	ldrb	r3, [r7, #1]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004092:	887a      	ldrh	r2, [r7, #2]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004098:	e002      	b.n	80040a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800409a:	887a      	ldrh	r2, [r7, #2]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e08d      	b.n	80041da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd f8fa 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2224      	movs	r2, #36	@ 0x24
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800410c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d107      	bne.n	8004126 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	e006      	b.n	8004134 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004132:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d108      	bne.n	800414e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	e007      	b.n	800415e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800415c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800416c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69d9      	ldr	r1, [r3, #28]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1a      	ldr	r2, [r3, #32]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	817b      	strh	r3, [r7, #10]
 80041f6:	460b      	mov	r3, r1
 80041f8:	813b      	strh	r3, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b20      	cmp	r3, #32
 8004208:	f040 80f9 	bne.w	80043fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_I2C_Mem_Write+0x34>
 8004212:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d105      	bne.n	8004224 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800421e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0ed      	b.n	8004400 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_I2C_Mem_Write+0x4e>
 800422e:	2302      	movs	r3, #2
 8004230:	e0e6      	b.n	8004400 <HAL_I2C_Mem_Write+0x21c>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800423a:	f7fd fded 	bl	8001e18 <HAL_GetTick>
 800423e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2319      	movs	r3, #25
 8004246:	2201      	movs	r2, #1
 8004248:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fac3 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0d1      	b.n	8004400 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2221      	movs	r2, #33	@ 0x21
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2240      	movs	r2, #64	@ 0x40
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a3a      	ldr	r2, [r7, #32]
 8004276:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800427c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004284:	88f8      	ldrh	r0, [r7, #6]
 8004286:	893a      	ldrh	r2, [r7, #8]
 8004288:	8979      	ldrh	r1, [r7, #10]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	4603      	mov	r3, r0
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f9d3 	bl	8004640 <I2C_RequestMemoryWrite>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0a9      	b.n	8004400 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2bff      	cmp	r3, #255	@ 0xff
 80042b4:	d90e      	bls.n	80042d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	22ff      	movs	r2, #255	@ 0xff
 80042ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	8979      	ldrh	r1, [r7, #10]
 80042c4:	2300      	movs	r3, #0
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 fc47 	bl	8004b60 <I2C_TransferConfig>
 80042d2:	e00f      	b.n	80042f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	8979      	ldrh	r1, [r7, #10]
 80042e6:	2300      	movs	r3, #0
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 fc36 	bl	8004b60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fac6 	bl	800488a <I2C_WaitOnTXISFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e07b      	b.n	8004400 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d034      	beq.n	80043ac <HAL_I2C_Mem_Write+0x1c8>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004346:	2b00      	cmp	r3, #0
 8004348:	d130      	bne.n	80043ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004350:	2200      	movs	r2, #0
 8004352:	2180      	movs	r1, #128	@ 0x80
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 fa3f 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e04d      	b.n	8004400 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	2bff      	cmp	r3, #255	@ 0xff
 800436c:	d90e      	bls.n	800438c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	22ff      	movs	r2, #255	@ 0xff
 8004372:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004378:	b2da      	uxtb	r2, r3
 800437a:	8979      	ldrh	r1, [r7, #10]
 800437c:	2300      	movs	r3, #0
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 fbeb 	bl	8004b60 <I2C_TransferConfig>
 800438a:	e00f      	b.n	80043ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439a:	b2da      	uxtb	r2, r3
 800439c:	8979      	ldrh	r1, [r7, #10]
 800439e:	2300      	movs	r3, #0
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fbda 	bl	8004b60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d19e      	bne.n	80042f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 faac 	bl	8004918 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e01a      	b.n	8004400 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2220      	movs	r2, #32
 80043d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004408 <HAL_I2C_Mem_Write+0x224>)
 80043de:	400b      	ands	r3, r1
 80043e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	fe00e800 	.word	0xfe00e800

0800440c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	4608      	mov	r0, r1
 8004416:	4611      	mov	r1, r2
 8004418:	461a      	mov	r2, r3
 800441a:	4603      	mov	r3, r0
 800441c:	817b      	strh	r3, [r7, #10]
 800441e:	460b      	mov	r3, r1
 8004420:	813b      	strh	r3, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b20      	cmp	r3, #32
 8004430:	f040 80fd 	bne.w	800462e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_I2C_Mem_Read+0x34>
 800443a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004446:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0f1      	b.n	8004630 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_I2C_Mem_Read+0x4e>
 8004456:	2302      	movs	r3, #2
 8004458:	e0ea      	b.n	8004630 <HAL_I2C_Mem_Read+0x224>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004462:	f7fd fcd9 	bl	8001e18 <HAL_GetTick>
 8004466:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	2319      	movs	r3, #25
 800446e:	2201      	movs	r2, #1
 8004470:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f9af 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0d5      	b.n	8004630 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2222      	movs	r2, #34	@ 0x22
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2240      	movs	r2, #64	@ 0x40
 8004490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a3a      	ldr	r2, [r7, #32]
 800449e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80044a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ac:	88f8      	ldrh	r0, [r7, #6]
 80044ae:	893a      	ldrh	r2, [r7, #8]
 80044b0:	8979      	ldrh	r1, [r7, #10]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	4603      	mov	r3, r0
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f913 	bl	80046e8 <I2C_RequestMemoryRead>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0ad      	b.n	8004630 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2bff      	cmp	r3, #255	@ 0xff
 80044dc:	d90e      	bls.n	80044fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	22ff      	movs	r2, #255	@ 0xff
 80044e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	8979      	ldrh	r1, [r7, #10]
 80044ec:	4b52      	ldr	r3, [pc, #328]	@ (8004638 <HAL_I2C_Mem_Read+0x22c>)
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fb33 	bl	8004b60 <I2C_TransferConfig>
 80044fa:	e00f      	b.n	800451c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450a:	b2da      	uxtb	r2, r3
 800450c:	8979      	ldrh	r1, [r7, #10]
 800450e:	4b4a      	ldr	r3, [pc, #296]	@ (8004638 <HAL_I2C_Mem_Read+0x22c>)
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fb22 	bl	8004b60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	2200      	movs	r2, #0
 8004524:	2104      	movs	r1, #4
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f956 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e07c      	b.n	8004630 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d034      	beq.n	80045dc <HAL_I2C_Mem_Read+0x1d0>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	d130      	bne.n	80045dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	2200      	movs	r2, #0
 8004582:	2180      	movs	r1, #128	@ 0x80
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f927 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e04d      	b.n	8004630 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2bff      	cmp	r3, #255	@ 0xff
 800459c:	d90e      	bls.n	80045bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22ff      	movs	r2, #255	@ 0xff
 80045a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	8979      	ldrh	r1, [r7, #10]
 80045ac:	2300      	movs	r3, #0
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fad3 	bl	8004b60 <I2C_TransferConfig>
 80045ba:	e00f      	b.n	80045dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	8979      	ldrh	r1, [r7, #10]
 80045ce:	2300      	movs	r3, #0
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fac2 	bl	8004b60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d19a      	bne.n	800451c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f994 	bl	8004918 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e01a      	b.n	8004630 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2220      	movs	r2, #32
 8004600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <HAL_I2C_Mem_Read+0x230>)
 800460e:	400b      	ands	r3, r1
 8004610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e000      	b.n	8004630 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800462e:	2302      	movs	r3, #2
  }
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	80002400 	.word	0x80002400
 800463c:	fe00e800 	.word	0xfe00e800

08004640 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	4608      	mov	r0, r1
 800464a:	4611      	mov	r1, r2
 800464c:	461a      	mov	r2, r3
 800464e:	4603      	mov	r3, r0
 8004650:	817b      	strh	r3, [r7, #10]
 8004652:	460b      	mov	r3, r1
 8004654:	813b      	strh	r3, [r7, #8]
 8004656:	4613      	mov	r3, r2
 8004658:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	8979      	ldrh	r1, [r7, #10]
 8004660:	4b20      	ldr	r3, [pc, #128]	@ (80046e4 <I2C_RequestMemoryWrite+0xa4>)
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fa79 	bl	8004b60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	69b9      	ldr	r1, [r7, #24]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f909 	bl	800488a <I2C_WaitOnTXISFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e02c      	b.n	80046dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004688:	893b      	ldrh	r3, [r7, #8]
 800468a:	b2da      	uxtb	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	629a      	str	r2, [r3, #40]	@ 0x28
 8004692:	e015      	b.n	80046c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004694:	893b      	ldrh	r3, [r7, #8]
 8004696:	0a1b      	lsrs	r3, r3, #8
 8004698:	b29b      	uxth	r3, r3
 800469a:	b2da      	uxtb	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	69b9      	ldr	r1, [r7, #24]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f8ef 	bl	800488a <I2C_WaitOnTXISFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e012      	b.n	80046dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046b6:	893b      	ldrh	r3, [r7, #8]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2200      	movs	r2, #0
 80046c8:	2180      	movs	r1, #128	@ 0x80
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f884 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	80002000 	.word	0x80002000

080046e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	4608      	mov	r0, r1
 80046f2:	4611      	mov	r1, r2
 80046f4:	461a      	mov	r2, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	817b      	strh	r3, [r7, #10]
 80046fa:	460b      	mov	r3, r1
 80046fc:	813b      	strh	r3, [r7, #8]
 80046fe:	4613      	mov	r3, r2
 8004700:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	b2da      	uxtb	r2, r3
 8004706:	8979      	ldrh	r1, [r7, #10]
 8004708:	4b20      	ldr	r3, [pc, #128]	@ (800478c <I2C_RequestMemoryRead+0xa4>)
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	2300      	movs	r3, #0
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fa26 	bl	8004b60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	69b9      	ldr	r1, [r7, #24]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f8b6 	bl	800488a <I2C_WaitOnTXISFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e02c      	b.n	8004782 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d105      	bne.n	800473a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800472e:	893b      	ldrh	r3, [r7, #8]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	629a      	str	r2, [r3, #40]	@ 0x28
 8004738:	e015      	b.n	8004766 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800473a:	893b      	ldrh	r3, [r7, #8]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	b29b      	uxth	r3, r3
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f89c 	bl	800488a <I2C_WaitOnTXISFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e012      	b.n	8004782 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800475c:	893b      	ldrh	r3, [r7, #8]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	2200      	movs	r2, #0
 800476e:	2140      	movs	r1, #64	@ 0x40
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f831 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	80002000 	.word	0x80002000

08004790 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d103      	bne.n	80047ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2200      	movs	r2, #0
 80047ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d007      	beq.n	80047cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	619a      	str	r2, [r3, #24]
  }
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e8:	e03b      	b.n	8004862 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	6839      	ldr	r1, [r7, #0]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f8d6 	bl	80049a0 <I2C_IsErrorOccurred>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e041      	b.n	8004882 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004804:	d02d      	beq.n	8004862 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004806:	f7fd fb07 	bl	8001e18 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d302      	bcc.n	800481c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d122      	bne.n	8004862 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4013      	ands	r3, r2
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	429a      	cmp	r2, r3
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	429a      	cmp	r2, r3
 8004838:	d113      	bne.n	8004862 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e00f      	b.n	8004882 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	429a      	cmp	r2, r3
 800487e:	d0b4      	beq.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004896:	e033      	b.n	8004900 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f87f 	bl	80049a0 <I2C_IsErrorOccurred>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e031      	b.n	8004910 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d025      	beq.n	8004900 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b4:	f7fd fab0 	bl	8001e18 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d302      	bcc.n	80048ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d11a      	bne.n	8004900 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d013      	beq.n	8004900 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e007      	b.n	8004910 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b02      	cmp	r3, #2
 800490c:	d1c4      	bne.n	8004898 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004924:	e02f      	b.n	8004986 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f838 	bl	80049a0 <I2C_IsErrorOccurred>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e02d      	b.n	8004996 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493a:	f7fd fa6d 	bl	8001e18 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	429a      	cmp	r2, r3
 8004948:	d302      	bcc.n	8004950 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d11a      	bne.n	8004986 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b20      	cmp	r3, #32
 800495c:	d013      	beq.n	8004986 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e007      	b.n	8004996 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b20      	cmp	r3, #32
 8004992:	d1c8      	bne.n	8004926 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	@ 0x28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d068      	beq.n	8004a9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2210      	movs	r2, #16
 80049d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049d4:	e049      	b.n	8004a6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d045      	beq.n	8004a6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049de:	f7fd fa1b 	bl	8001e18 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d302      	bcc.n	80049f4 <I2C_IsErrorOccurred+0x54>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d13a      	bne.n	8004a6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a16:	d121      	bne.n	8004a5c <I2C_IsErrorOccurred+0xbc>
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a1e:	d01d      	beq.n	8004a5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d01a      	beq.n	8004a5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a36:	f7fd f9ef 	bl	8001e18 <HAL_GetTick>
 8004a3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a3c:	e00e      	b.n	8004a5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a3e:	f7fd f9eb 	bl	8001e18 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b19      	cmp	r3, #25
 8004a4a:	d907      	bls.n	8004a5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	f043 0320 	orr.w	r3, r3, #32
 8004a52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004a5a:	e006      	b.n	8004a6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d1e9      	bne.n	8004a3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d003      	beq.n	8004a80 <I2C_IsErrorOccurred+0xe0>
 8004a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0aa      	beq.n	80049d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d103      	bne.n	8004a90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	f043 0304 	orr.w	r3, r3, #4
 8004a96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00b      	beq.n	8004ac8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ac0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00b      	beq.n	8004aea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	f043 0308 	orr.w	r3, r3, #8
 8004ad8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ae2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	f043 0302 	orr.w	r3, r3, #2
 8004afa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01c      	beq.n	8004b4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f7ff fe3b 	bl	8004790 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4b0d      	ldr	r3, [pc, #52]	@ (8004b5c <I2C_IsErrorOccurred+0x1bc>)
 8004b26:	400b      	ands	r3, r1
 8004b28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3728      	adds	r7, #40	@ 0x28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	fe00e800 	.word	0xfe00e800

08004b60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	817b      	strh	r3, [r7, #10]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b72:	897b      	ldrh	r3, [r7, #10]
 8004b74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b78:	7a7b      	ldrb	r3, [r7, #9]
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b80:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b8e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	0d5b      	lsrs	r3, r3, #21
 8004b9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004b9e:	4b08      	ldr	r3, [pc, #32]	@ (8004bc0 <I2C_TransferConfig+0x60>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	ea02 0103 	and.w	r1, r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	03ff63ff 	.word	0x03ff63ff

08004bc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d138      	bne.n	8004c4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e032      	b.n	8004c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2224      	movs	r2, #36	@ 0x24
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6819      	ldr	r1, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e000      	b.n	8004c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
  }
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d139      	bne.n	8004ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e033      	b.n	8004ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2224      	movs	r2, #36	@ 0x24
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004cac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e000      	b.n	8004ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ce4:	2302      	movs	r3, #2
  }
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f043 0201 	orr.w	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004d20:	f7fd f87a 	bl	8001e18 <HAL_GetTick>
 8004d24:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
 8004d30:	e0a5      	b.n	8004e7e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f040 809e 	bne.w	8004e7e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc fc52 	bl	80015ec <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004d48:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fba4 	bl	800549a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	4b4b      	ldr	r3, [pc, #300]	@ (8004e88 <HAL_OSPI_Init+0x174>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	68d1      	ldr	r1, [r2, #12]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6912      	ldr	r2, [r2, #16]
 8004d64:	3a01      	subs	r2, #1
 8004d66:	0412      	lsls	r2, r2, #16
 8004d68:	4311      	orrs	r1, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6952      	ldr	r2, [r2, #20]
 8004d6e:	3a01      	subs	r2, #1
 8004d70:	0212      	lsls	r2, r2, #8
 8004d72:	4311      	orrs	r1, r2
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d78:	4311      	orrs	r1, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	69d2      	ldr	r2, [r2, #28]
 8004d7e:	4311      	orrs	r1, r2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	430b      	orrs	r3, r1
 8004d86:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004db8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	021a      	lsls	r2, r3, #8
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2120      	movs	r1, #32
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f001 f89b 	bl	8005f1c <OSPI_WaitFlagStateUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d146      	bne.n	8004e7e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	1e5a      	subs	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004e26:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d107      	bne.n	8004e66 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0202 	orr.w	r2, r2, #2
 8004e64:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e6e:	d103      	bne.n	8004e78 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e76:	e002      	b.n	8004e7e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	f8e0c0f4 	.word	0xf8e0c0f4

08004e8c <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3350      	adds	r3, #80	@ 0x50
 8004e9a:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb0:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d03a      	beq.n	8004f32 <HAL_OSPI_IRQHandler+0xa6>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d035      	beq.n	8004f32 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b18      	cmp	r3, #24
 8004eca:	d10f      	bne.n	8004eec <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee4:	1e5a      	subs	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	649a      	str	r2, [r3, #72]	@ 0x48
 8004eea:	e012      	b.n	8004f12 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b28      	cmp	r3, #40	@ 0x28
 8004ef0:	d10f      	bne.n	8004f12 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f0c:	1e5a      	subs	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	649a      	str	r2, [r3, #72]	@ 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f28:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fa04 	bl	8005338 <HAL_OSPI_FifoThresholdCallback>
 8004f30:	e0e7      	b.n	8005102 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d067      	beq.n	800500c <HAL_OSPI_IRQHandler+0x180>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d062      	beq.n	800500c <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b28      	cmp	r3, #40	@ 0x28
 8004f4a:	d131      	bne.n	8004fb0 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_OSPI_IRQHandler+0xf4>
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d010      	beq.n	8004f80 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f78:	1e5a      	subs	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004f7e:	e0bd      	b.n	80050fc <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f040 80b9 	bne.w	80050fc <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f9d9 	bl	8005360 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004fae:	e0a5      	b.n	80050fc <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8004fc6:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b18      	cmp	r3, #24
 8004fd2:	d103      	bne.n	8004fdc <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f9cd 	bl	8005374 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004fda:	e08f      	b.n	80050fc <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d103      	bne.n	8004fea <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f9b2 	bl	800534c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004fe8:	e088      	b.n	80050fc <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ff0:	f040 8084 	bne.w	80050fc <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d103      	bne.n	8005004 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f991 	bl	8005324 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005002:	e07b      	b.n	80050fc <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f983 	bl	8005310 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800500a:	e077      	b.n	80050fc <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01e      	beq.n	8005054 <HAL_OSPI_IRQHandler+0x1c8>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d019      	beq.n	8005054 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2208      	movs	r2, #8
 8005026:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8005044:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f99b 	bl	8005388 <HAL_OSPI_StatusMatchCallback>
 8005052:	e056      	b.n	8005102 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d03c      	beq.n	80050d8 <HAL_OSPI_IRQHandler+0x24c>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d037      	beq.n	80050d8 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2201      	movs	r2, #1
 800506e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800507e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01a      	beq.n	80050ca <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0204 	bic.w	r2, r2, #4
 80050a2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a8:	4a18      	ldr	r2, [pc, #96]	@ (800510c <HAL_OSPI_IRQHandler+0x280>)
 80050aa:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fd f9e7 	bl	8002484 <HAL_DMA_Abort_IT>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d021      	beq.n	8005100 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f924 	bl	8005310 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80050c8:	e01a      	b.n	8005100 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f91d 	bl	8005310 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80050d6:	e013      	b.n	8005100 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00f      	beq.n	8005102 <HAL_OSPI_IRQHandler+0x276>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2210      	movs	r2, #16
 80050f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f951 	bl	800539c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80050fa:	e002      	b.n	8005102 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80050fc:	bf00      	nop
 80050fe:	e000      	b.n	8005102 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005100:	bf00      	nop
}
 8005102:	bf00      	nop
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	08005ea5 	.word	0x08005ea5

08005110 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	@ 0x28
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800511c:	f7fc fe7c 	bl	8001e18 <HAL_GetTick>
 8005120:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800512c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d104      	bne.n	800513e <HAL_OSPI_Command+0x2e>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800513c:	d115      	bne.n	800516a <HAL_OSPI_Command+0x5a>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b14      	cmp	r3, #20
 8005142:	d107      	bne.n	8005154 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d00e      	beq.n	800516a <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d00a      	beq.n	800516a <HAL_OSPI_Command+0x5a>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b24      	cmp	r3, #36	@ 0x24
 8005158:	d15b      	bne.n	8005212 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d003      	beq.n	800516a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8005166:	2b03      	cmp	r3, #3
 8005168:	d153      	bne.n	8005212 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	2200      	movs	r2, #0
 8005172:	2120      	movs	r1, #32
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fed1 	bl	8005f1c <OSPI_WaitFlagStateUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800517e:	7ffb      	ldrb	r3, [r7, #31]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d14c      	bne.n	800521e <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 ff05 	bl	8005f9c <OSPI_ConfigCmd>
 8005192:	4603      	mov	r3, r0
 8005194:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8005196:	7ffb      	ldrb	r3, [r7, #31]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d140      	bne.n	800521e <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10e      	bne.n	80051c2 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2201      	movs	r2, #1
 80051ac:	2102      	movs	r1, #2
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 feb4 	bl	8005f1c <OSPI_WaitFlagStateUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2202      	movs	r2, #2
 80051be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80051c0:	e02d      	b.n	800521e <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d103      	bne.n	80051d2 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2204      	movs	r2, #4
 80051ce:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80051d0:	e025      	b.n	800521e <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d10b      	bne.n	80051f2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051de:	2b24      	cmp	r3, #36	@ 0x24
 80051e0:	d103      	bne.n	80051ea <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2204      	movs	r2, #4
 80051e6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80051e8:	e019      	b.n	800521e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2214      	movs	r2, #20
 80051ee:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80051f0:	e015      	b.n	800521e <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d111      	bne.n	800521e <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051fe:	2b14      	cmp	r3, #20
 8005200:	d103      	bne.n	800520a <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2204      	movs	r2, #4
 8005206:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8005208:	e009      	b.n	800521e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2224      	movs	r2, #36	@ 0x24
 800520e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8005210:	e005      	b.n	800521e <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2210      	movs	r2, #16
 800521a:	655a      	str	r2, [r3, #84]	@ 0x54
 800521c:	e000      	b.n	8005220 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800521e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005220:	7ffb      	ldrb	r3, [r7, #31]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b08a      	sub	sp, #40	@ 0x28
 800522e:	af02      	add	r7, sp, #8
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005236:	f7fc fdef 	bl	8001e18 <HAL_GetTick>
 800523a:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3350      	adds	r3, #80	@ 0x50
 8005242:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2208      	movs	r2, #8
 8005252:	655a      	str	r2, [r3, #84]	@ 0x54
 8005254:	e057      	b.n	8005306 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525a:	2b04      	cmp	r3, #4
 800525c:	d14e      	bne.n	80052fc <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005286:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	2201      	movs	r2, #1
 8005290:	2104      	movs	r1, #4
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fe42 	bl	8005f1c <OSPI_WaitFlagStateUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800529c:	7ffb      	ldrb	r3, [r7, #31]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d113      	bne.n	80052ca <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	781a      	ldrb	r2, [r3, #0]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ba:	1e5a      	subs	r2, r3, #1
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1df      	bne.n	8005288 <HAL_OSPI_Transmit+0x5e>
 80052c8:	e000      	b.n	80052cc <HAL_OSPI_Transmit+0xa2>
          break;
 80052ca:	bf00      	nop

      if (status == HAL_OK)
 80052cc:	7ffb      	ldrb	r3, [r7, #31]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d119      	bne.n	8005306 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	2201      	movs	r2, #1
 80052da:	2102      	movs	r1, #2
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fe1d 	bl	8005f1c <OSPI_WaitFlagStateUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10c      	bne.n	8005306 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2202      	movs	r2, #2
 80052f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2202      	movs	r2, #2
 80052f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80052fa:	e004      	b.n	8005306 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2210      	movs	r2, #16
 8005304:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8005306:	7ffb      	ldrb	r3, [r7, #31]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80053bc:	f7fc fd2c 	bl	8001e18 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c6:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <HAL_OSPI_Abort+0x2c>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d052      	beq.n	8005482 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d014      	beq.n	8005414 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0204 	bic.w	r2, r2, #4
 80053f8:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fc ffc4 	bl	800238c <HAL_DMA_Abort>
 8005404:	4603      	mov	r3, r0
 8005406:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2204      	movs	r2, #4
 8005412:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d02b      	beq.n	800547a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0202 	orr.w	r2, r2, #2
 8005430:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2201      	movs	r2, #1
 800543c:	2102      	movs	r1, #2
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fd6c 	bl	8005f1c <OSPI_WaitFlagStateUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d11f      	bne.n	800548e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2202      	movs	r2, #2
 8005454:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	2200      	movs	r2, #0
 8005460:	2120      	movs	r1, #32
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fd5a 	bl	8005f1c <OSPI_WaitFlagStateUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10d      	bne.n	800548e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005478:	e009      	b.n	800548e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005480:	e005      	b.n	800548e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2210      	movs	r2, #16
 800548a:	655a      	str	r2, [r3, #84]	@ 0x54
 800548c:	e000      	b.n	8005490 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800548e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005490:	7dfb      	ldrb	r3, [r7, #23]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b094      	sub	sp, #80	@ 0x50
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a9d      	ldr	r2, [pc, #628]	@ (800574c <HAL_OSPIM_Config+0x294>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d105      	bne.n	80054e6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80054e4:	e004      	b.n	80054f0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80054e6:	2301      	movs	r3, #1
 80054e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80054f6:	e01d      	b.n	8005534 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80054f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80054fc:	3301      	adds	r3, #1
 80054fe:	b2d8      	uxtb	r0, r3
 8005500:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005504:	f107 0114 	add.w	r1, r7, #20
 8005508:	4613      	mov	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4413      	add	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	440b      	add	r3, r1
 8005512:	4619      	mov	r1, r3
 8005514:	f000 febc 	bl	8006290 <OSPIM_GetConfig>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2208      	movs	r2, #8
 8005528:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800552a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800552e:	3301      	adds	r3, #1
 8005530:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005534:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005538:	2b01      	cmp	r3, #1
 800553a:	d9dd      	bls.n	80054f8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800553c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005540:	2b00      	cmp	r3, #0
 8005542:	f040 84a2 	bne.w	8005e8a <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005546:	4b81      	ldr	r3, [pc, #516]	@ (800574c <HAL_OSPIM_Config+0x294>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00b      	beq.n	800556a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005552:	4b7e      	ldr	r3, [pc, #504]	@ (800574c <HAL_OSPIM_Config+0x294>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a7d      	ldr	r2, [pc, #500]	@ (800574c <HAL_OSPIM_Config+0x294>)
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800555e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800556a:	4b79      	ldr	r3, [pc, #484]	@ (8005750 <HAL_OSPIM_Config+0x298>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00b      	beq.n	800558e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005576:	4b76      	ldr	r3, [pc, #472]	@ (8005750 <HAL_OSPIM_Config+0x298>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a75      	ldr	r2, [pc, #468]	@ (8005750 <HAL_OSPIM_Config+0x298>)
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005582:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005586:	f043 0302 	orr.w	r3, r3, #2
 800558a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800558e:	4971      	ldr	r1, [pc, #452]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 8005590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005592:	4613      	mov	r3, r2
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4413      	add	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	3350      	adds	r3, #80	@ 0x50
 800559c:	443b      	add	r3, r7
 800559e:	3b34      	subs	r3, #52	@ 0x34
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	486a      	ldr	r0, [pc, #424]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 80055ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	3350      	adds	r3, #80	@ 0x50
 80055b8:	443b      	add	r3, r7
 80055ba:	3b34      	subs	r3, #52	@ 0x34
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3b01      	subs	r3, #1
 80055c0:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4403      	add	r3, r0
 80055c8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80055ca:	4b62      	ldr	r3, [pc, #392]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80c0 	beq.w	8005758 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80055d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80055e4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	f040 8162 	bne.w	80058b2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80055ee:	4959      	ldr	r1, [pc, #356]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 80055f0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80055f4:	4613      	mov	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	4413      	add	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	3350      	adds	r3, #80	@ 0x50
 80055fe:	443b      	add	r3, r7
 8005600:	3b3c      	subs	r3, #60	@ 0x3c
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3b01      	subs	r3, #1
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	6859      	ldr	r1, [r3, #4]
 800560c:	4851      	ldr	r0, [pc, #324]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 800560e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	3350      	adds	r3, #80	@ 0x50
 800561c:	443b      	add	r3, r7
 800561e:	3b3c      	subs	r3, #60	@ 0x3c
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3b01      	subs	r3, #1
 8005624:	f041 0202 	orr.w	r2, r1, #2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4403      	add	r3, r0
 800562c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800562e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005632:	4613      	mov	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	4413      	add	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	3350      	adds	r3, #80	@ 0x50
 800563c:	443b      	add	r3, r7
 800563e:	3b38      	subs	r3, #56	@ 0x38
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01f      	beq.n	8005686 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8005646:	4943      	ldr	r1, [pc, #268]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 8005648:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800564c:	4613      	mov	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4413      	add	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	3350      	adds	r3, #80	@ 0x50
 8005656:	443b      	add	r3, r7
 8005658:	3b38      	subs	r3, #56	@ 0x38
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3b01      	subs	r3, #1
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	6859      	ldr	r1, [r3, #4]
 8005664:	483b      	ldr	r0, [pc, #236]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 8005666:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800566a:	4613      	mov	r3, r2
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	4413      	add	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	3350      	adds	r3, #80	@ 0x50
 8005674:	443b      	add	r3, r7
 8005676:	3b38      	subs	r3, #56	@ 0x38
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3b01      	subs	r3, #1
 800567c:	f041 0220 	orr.w	r2, r1, #32
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4403      	add	r3, r0
 8005684:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005686:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	3350      	adds	r3, #80	@ 0x50
 8005694:	443b      	add	r3, r7
 8005696:	3b30      	subs	r3, #48	@ 0x30
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d023      	beq.n	80056e6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800569e:	492d      	ldr	r1, [pc, #180]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 80056a0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80056a4:	4613      	mov	r3, r2
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	4413      	add	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	3350      	adds	r3, #80	@ 0x50
 80056ae:	443b      	add	r3, r7
 80056b0:	3b30      	subs	r3, #48	@ 0x30
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	6859      	ldr	r1, [r3, #4]
 80056c0:	4824      	ldr	r0, [pc, #144]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 80056c2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80056c6:	4613      	mov	r3, r2
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	4413      	add	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	3350      	adds	r3, #80	@ 0x50
 80056d0:	443b      	add	r3, r7
 80056d2:	3b30      	subs	r3, #48	@ 0x30
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4403      	add	r3, r0
 80056e4:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80056e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80056ea:	4613      	mov	r3, r2
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	4413      	add	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	3350      	adds	r3, #80	@ 0x50
 80056f4:	443b      	add	r3, r7
 80056f6:	3b2c      	subs	r3, #44	@ 0x2c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80d9 	beq.w	80058b2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8005700:	4914      	ldr	r1, [pc, #80]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 8005702:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005706:	4613      	mov	r3, r2
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	4413      	add	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	3350      	adds	r3, #80	@ 0x50
 8005710:	443b      	add	r3, r7
 8005712:	3b2c      	subs	r3, #44	@ 0x2c
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3b01      	subs	r3, #1
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	6859      	ldr	r1, [r3, #4]
 8005722:	480c      	ldr	r0, [pc, #48]	@ (8005754 <HAL_OSPIM_Config+0x29c>)
 8005724:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005728:	4613      	mov	r3, r2
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	4413      	add	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	3350      	adds	r3, #80	@ 0x50
 8005732:	443b      	add	r3, r7
 8005734:	3b2c      	subs	r3, #44	@ 0x2c
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3b01      	subs	r3, #1
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4403      	add	r3, r0
 8005746:	605a      	str	r2, [r3, #4]
 8005748:	e0b3      	b.n	80058b2 <HAL_OSPIM_Config+0x3fa>
 800574a:	bf00      	nop
 800574c:	420d1400 	.word	0x420d1400
 8005750:	420d2400 	.word	0x420d2400
 8005754:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8005758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800575a:	4613      	mov	r3, r2
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	4413      	add	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	3350      	adds	r3, #80	@ 0x50
 8005764:	443b      	add	r3, r7
 8005766:	3b3c      	subs	r3, #60	@ 0x3c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80a1 	beq.w	80058b2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005770:	4995      	ldr	r1, [pc, #596]	@ (80059c8 <HAL_OSPIM_Config+0x510>)
 8005772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005774:	4613      	mov	r3, r2
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	4413      	add	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	3350      	adds	r3, #80	@ 0x50
 800577e:	443b      	add	r3, r7
 8005780:	3b3c      	subs	r3, #60	@ 0x3c
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3b01      	subs	r3, #1
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	6859      	ldr	r1, [r3, #4]
 800578c:	488e      	ldr	r0, [pc, #568]	@ (80059c8 <HAL_OSPIM_Config+0x510>)
 800578e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005790:	4613      	mov	r3, r2
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	4413      	add	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	3350      	adds	r3, #80	@ 0x50
 800579a:	443b      	add	r3, r7
 800579c:	3b3c      	subs	r3, #60	@ 0x3c
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	f021 0201 	bic.w	r2, r1, #1
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4403      	add	r3, r0
 80057aa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80057ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ae:	4613      	mov	r3, r2
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	4413      	add	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	3350      	adds	r3, #80	@ 0x50
 80057b8:	443b      	add	r3, r7
 80057ba:	3b38      	subs	r3, #56	@ 0x38
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01d      	beq.n	80057fe <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80057c2:	4981      	ldr	r1, [pc, #516]	@ (80059c8 <HAL_OSPIM_Config+0x510>)
 80057c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	3350      	adds	r3, #80	@ 0x50
 80057d0:	443b      	add	r3, r7
 80057d2:	3b38      	subs	r3, #56	@ 0x38
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	6859      	ldr	r1, [r3, #4]
 80057de:	487a      	ldr	r0, [pc, #488]	@ (80059c8 <HAL_OSPIM_Config+0x510>)
 80057e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057e2:	4613      	mov	r3, r2
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	4413      	add	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	3350      	adds	r3, #80	@ 0x50
 80057ec:	443b      	add	r3, r7
 80057ee:	3b38      	subs	r3, #56	@ 0x38
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	f021 0210 	bic.w	r2, r1, #16
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4403      	add	r3, r0
 80057fc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80057fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005800:	4613      	mov	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4413      	add	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	3350      	adds	r3, #80	@ 0x50
 800580a:	443b      	add	r3, r7
 800580c:	3b30      	subs	r3, #48	@ 0x30
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d021      	beq.n	8005858 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005814:	496c      	ldr	r1, [pc, #432]	@ (80059c8 <HAL_OSPIM_Config+0x510>)
 8005816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005818:	4613      	mov	r3, r2
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	4413      	add	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	3350      	adds	r3, #80	@ 0x50
 8005822:	443b      	add	r3, r7
 8005824:	3b30      	subs	r3, #48	@ 0x30
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3b01      	subs	r3, #1
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	6859      	ldr	r1, [r3, #4]
 8005834:	4864      	ldr	r0, [pc, #400]	@ (80059c8 <HAL_OSPIM_Config+0x510>)
 8005836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005838:	4613      	mov	r3, r2
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	4413      	add	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	3350      	adds	r3, #80	@ 0x50
 8005842:	443b      	add	r3, r7
 8005844:	3b30      	subs	r3, #48	@ 0x30
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3b01      	subs	r3, #1
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4403      	add	r3, r0
 8005856:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005858:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800585a:	4613      	mov	r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	4413      	add	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	3350      	adds	r3, #80	@ 0x50
 8005864:	443b      	add	r3, r7
 8005866:	3b2c      	subs	r3, #44	@ 0x2c
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d021      	beq.n	80058b2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800586e:	4956      	ldr	r1, [pc, #344]	@ (80059c8 <HAL_OSPIM_Config+0x510>)
 8005870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005872:	4613      	mov	r3, r2
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	4413      	add	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	3350      	adds	r3, #80	@ 0x50
 800587c:	443b      	add	r3, r7
 800587e:	3b2c      	subs	r3, #44	@ 0x2c
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3b01      	subs	r3, #1
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	440b      	add	r3, r1
 800588c:	6859      	ldr	r1, [r3, #4]
 800588e:	484e      	ldr	r0, [pc, #312]	@ (80059c8 <HAL_OSPIM_Config+0x510>)
 8005890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005892:	4613      	mov	r3, r2
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	4413      	add	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	3350      	adds	r3, #80	@ 0x50
 800589c:	443b      	add	r3, r7
 800589e:	3b2c      	subs	r3, #44	@ 0x2c
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4403      	add	r3, r0
 80058b0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6819      	ldr	r1, [r3, #0]
 80058b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80058ba:	4613      	mov	r3, r2
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	3350      	adds	r3, #80	@ 0x50
 80058c4:	443b      	add	r3, r7
 80058c6:	3b3c      	subs	r3, #60	@ 0x3c
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4299      	cmp	r1, r3
 80058cc:	d03c      	beq.n	8005948 <HAL_OSPIM_Config+0x490>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6899      	ldr	r1, [r3, #8]
 80058d2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80058d6:	4613      	mov	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	4413      	add	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	3350      	adds	r3, #80	@ 0x50
 80058e0:	443b      	add	r3, r7
 80058e2:	3b34      	subs	r3, #52	@ 0x34
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4299      	cmp	r1, r3
 80058e8:	d02e      	beq.n	8005948 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6859      	ldr	r1, [r3, #4]
 80058ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80058f2:	4613      	mov	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	4413      	add	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	3350      	adds	r3, #80	@ 0x50
 80058fc:	443b      	add	r3, r7
 80058fe:	3b38      	subs	r3, #56	@ 0x38
 8005900:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8005902:	4299      	cmp	r1, r3
 8005904:	d103      	bne.n	800590e <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d11c      	bne.n	8005948 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	68d9      	ldr	r1, [r3, #12]
 8005912:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005916:	4613      	mov	r3, r2
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	4413      	add	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	3350      	adds	r3, #80	@ 0x50
 8005920:	443b      	add	r3, r7
 8005922:	3b30      	subs	r3, #48	@ 0x30
 8005924:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005926:	4299      	cmp	r1, r3
 8005928:	d00e      	beq.n	8005948 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6919      	ldr	r1, [r3, #16]
 800592e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005932:	4613      	mov	r3, r2
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	4413      	add	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	3350      	adds	r3, #80	@ 0x50
 800593c:	443b      	add	r3, r7
 800593e:	3b2c      	subs	r3, #44	@ 0x2c
 8005940:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005942:	4299      	cmp	r1, r3
 8005944:	f040 810e 	bne.w	8005b64 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	6819      	ldr	r1, [r3, #0]
 800594c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005950:	4613      	mov	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	4413      	add	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	3350      	adds	r3, #80	@ 0x50
 800595a:	443b      	add	r3, r7
 800595c:	3b3c      	subs	r3, #60	@ 0x3c
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4299      	cmp	r1, r3
 8005962:	d133      	bne.n	80059cc <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	3350      	adds	r3, #80	@ 0x50
 8005976:	443b      	add	r3, r7
 8005978:	3b38      	subs	r3, #56	@ 0x38
 800597a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800597c:	4299      	cmp	r1, r3
 800597e:	d125      	bne.n	80059cc <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	68d9      	ldr	r1, [r3, #12]
 8005984:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005988:	4613      	mov	r3, r2
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	4413      	add	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	3350      	adds	r3, #80	@ 0x50
 8005992:	443b      	add	r3, r7
 8005994:	3b30      	subs	r3, #48	@ 0x30
 8005996:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005998:	4299      	cmp	r1, r3
 800599a:	d117      	bne.n	80059cc <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	6919      	ldr	r1, [r3, #16]
 80059a0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059a4:	4613      	mov	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	3350      	adds	r3, #80	@ 0x50
 80059ae:	443b      	add	r3, r7
 80059b0:	3b2c      	subs	r3, #44	@ 0x2c
 80059b2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80059b4:	4299      	cmp	r1, r3
 80059b6:	d109      	bne.n	80059cc <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80059b8:	4b03      	ldr	r3, [pc, #12]	@ (80059c8 <HAL_OSPIM_Config+0x510>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a02      	ldr	r2, [pc, #8]	@ (80059c8 <HAL_OSPIM_Config+0x510>)
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	e0ce      	b.n	8005b64 <HAL_OSPIM_Config+0x6ac>
 80059c6:	bf00      	nop
 80059c8:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80059cc:	49a4      	ldr	r1, [pc, #656]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 80059ce:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059d2:	4613      	mov	r3, r2
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	4413      	add	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	3350      	adds	r3, #80	@ 0x50
 80059dc:	443b      	add	r3, r7
 80059de:	3b3c      	subs	r3, #60	@ 0x3c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	6859      	ldr	r1, [r3, #4]
 80059ea:	489d      	ldr	r0, [pc, #628]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 80059ec:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059f0:	4613      	mov	r3, r2
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	4413      	add	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	3350      	adds	r3, #80	@ 0x50
 80059fa:	443b      	add	r3, r7
 80059fc:	3b3c      	subs	r3, #60	@ 0x3c
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	f021 0201 	bic.w	r2, r1, #1
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4403      	add	r3, r0
 8005a0a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005a0c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a10:	4613      	mov	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4413      	add	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	3350      	adds	r3, #80	@ 0x50
 8005a1a:	443b      	add	r3, r7
 8005a1c:	3b38      	subs	r3, #56	@ 0x38
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01f      	beq.n	8005a64 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005a24:	498e      	ldr	r1, [pc, #568]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005a26:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	4413      	add	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	3350      	adds	r3, #80	@ 0x50
 8005a34:	443b      	add	r3, r7
 8005a36:	3b38      	subs	r3, #56	@ 0x38
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	6859      	ldr	r1, [r3, #4]
 8005a42:	4887      	ldr	r0, [pc, #540]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005a44:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a48:	4613      	mov	r3, r2
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	4413      	add	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	3350      	adds	r3, #80	@ 0x50
 8005a52:	443b      	add	r3, r7
 8005a54:	3b38      	subs	r3, #56	@ 0x38
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	f021 0210 	bic.w	r2, r1, #16
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4403      	add	r3, r0
 8005a62:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005a64:	497e      	ldr	r1, [pc, #504]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005a66:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	3350      	adds	r3, #80	@ 0x50
 8005a74:	443b      	add	r3, r7
 8005a76:	3b34      	subs	r3, #52	@ 0x34
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	6859      	ldr	r1, [r3, #4]
 8005a82:	4877      	ldr	r0, [pc, #476]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005a84:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a88:	4613      	mov	r3, r2
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	4413      	add	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	3350      	adds	r3, #80	@ 0x50
 8005a92:	443b      	add	r3, r7
 8005a94:	3b34      	subs	r3, #52	@ 0x34
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4403      	add	r3, r0
 8005aa2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005aa4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	4413      	add	r3, r2
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	3350      	adds	r3, #80	@ 0x50
 8005ab2:	443b      	add	r3, r7
 8005ab4:	3b30      	subs	r3, #48	@ 0x30
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d023      	beq.n	8005b04 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005abc:	4968      	ldr	r1, [pc, #416]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005abe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	4413      	add	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	3350      	adds	r3, #80	@ 0x50
 8005acc:	443b      	add	r3, r7
 8005ace:	3b30      	subs	r3, #48	@ 0x30
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	6859      	ldr	r1, [r3, #4]
 8005ade:	4860      	ldr	r0, [pc, #384]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005ae0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	4413      	add	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	3350      	adds	r3, #80	@ 0x50
 8005aee:	443b      	add	r3, r7
 8005af0:	3b30      	subs	r3, #48	@ 0x30
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4403      	add	r3, r0
 8005b02:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005b04:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b08:	4613      	mov	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4413      	add	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	3350      	adds	r3, #80	@ 0x50
 8005b12:	443b      	add	r3, r7
 8005b14:	3b2c      	subs	r3, #44	@ 0x2c
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d023      	beq.n	8005b64 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005b1c:	4950      	ldr	r1, [pc, #320]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005b1e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b22:	4613      	mov	r3, r2
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4413      	add	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	3350      	adds	r3, #80	@ 0x50
 8005b2c:	443b      	add	r3, r7
 8005b2e:	3b2c      	subs	r3, #44	@ 0x2c
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	440b      	add	r3, r1
 8005b3c:	6859      	ldr	r1, [r3, #4]
 8005b3e:	4848      	ldr	r0, [pc, #288]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005b40:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b44:	4613      	mov	r3, r2
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	4413      	add	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	3350      	adds	r3, #80	@ 0x50
 8005b4e:	443b      	add	r3, r7
 8005b50:	3b2c      	subs	r3, #44	@ 0x2c
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4403      	add	r3, r0
 8005b62:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005b64:	4a3e      	ldr	r2, [pc, #248]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b78:	025b      	lsls	r3, r3, #9
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	4938      	ldr	r1, [pc, #224]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d018      	beq.n	8005bc8 <HAL_OSPIM_Config+0x710>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b9e:	d813      	bhi.n	8005bc8 <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	1e5a      	subs	r2, r3, #1
 8005ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	0c1b      	lsrs	r3, r3, #16
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d90a      	bls.n	8005bc8 <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8005bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	4927      	ldr	r1, [pc, #156]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005bc8:	4b25      	ldr	r3, [pc, #148]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 809a 	beq.w	8005d0a <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8005bd6:	4a22      	ldr	r2, [pc, #136]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f023 0203 	bic.w	r2, r3, #3
 8005be8:	491d      	ldr	r1, [pc, #116]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	f042 0201 	orr.w	r2, r2, #1
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d011      	beq.n	8005c26 <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8005c02:	4a17      	ldr	r2, [pc, #92]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c14:	4912      	ldr	r1, [pc, #72]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	f042 0210 	orr.w	r2, r2, #16
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d018      	beq.n	8005c64 <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005c32:	4a0b      	ldr	r2, [pc, #44]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005c48:	4905      	ldr	r1, [pc, #20]	@ (8005c60 <HAL_OSPIM_Config+0x7a8>)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	605a      	str	r2, [r3, #4]
 8005c5e:	e01b      	b.n	8005c98 <HAL_OSPIM_Config+0x7e0>
 8005c60:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d015      	beq.n	8005c98 <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005c6c:	4a8a      	ldr	r2, [pc, #552]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005c82:	4985      	ldr	r1, [pc, #532]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d016      	beq.n	8005cd2 <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005ca4:	4a7c      	ldr	r2, [pc, #496]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005cba:	4977      	ldr	r1, [pc, #476]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	605a      	str	r2, [r3, #4]
 8005cd0:	e0c3      	b.n	8005e5a <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 80bf 	beq.w	8005e5a <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005cf2:	4969      	ldr	r1, [pc, #420]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	605a      	str	r2, [r3, #4]
 8005d08:	e0a7      	b.n	8005e5a <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005d0a:	4a63      	ldr	r2, [pc, #396]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f023 0203 	bic.w	r2, r3, #3
 8005d1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	431a      	orrs	r2, r3
 8005d22:	495d      	ldr	r1, [pc, #372]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d014      	beq.n	8005d66 <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005d3c:	4a56      	ldr	r2, [pc, #344]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d50:	015b      	lsls	r3, r3, #5
 8005d52:	431a      	orrs	r2, r3
 8005d54:	4950      	ldr	r1, [pc, #320]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	f042 0210 	orr.w	r2, r2, #16
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d019      	beq.n	8005da6 <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d72:	4a49      	ldr	r2, [pc, #292]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d8a:	049b      	lsls	r3, r3, #18
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	4942      	ldr	r1, [pc, #264]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	605a      	str	r2, [r3, #4]
 8005da4:	e01c      	b.n	8005de0 <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d018      	beq.n	8005de0 <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005dae:	4a3a      	ldr	r2, [pc, #232]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dc6:	069b      	lsls	r3, r3, #26
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	4933      	ldr	r1, [pc, #204]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d019      	beq.n	8005e20 <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005dec:	4a2a      	ldr	r2, [pc, #168]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e04:	049b      	lsls	r3, r3, #18
 8005e06:	431a      	orrs	r2, r3
 8005e08:	4923      	ldr	r1, [pc, #140]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	e01c      	b.n	8005e5a <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d018      	beq.n	8005e5a <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005e28:	4a1b      	ldr	r2, [pc, #108]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005e3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e40:	069b      	lsls	r3, r3, #26
 8005e42:	431a      	orrs	r2, r3
 8005e44:	4914      	ldr	r1, [pc, #80]	@ (8005e98 <HAL_OSPIM_Config+0x9e0>)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005e5a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005e66:	4b0d      	ldr	r3, [pc, #52]	@ (8005e9c <HAL_OSPIM_Config+0x9e4>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e9c <HAL_OSPIM_Config+0x9e4>)
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005e72:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d005      	beq.n	8005e8a <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005e7e:	4b08      	ldr	r3, [pc, #32]	@ (8005ea0 <HAL_OSPIM_Config+0x9e8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a07      	ldr	r2, [pc, #28]	@ (8005ea0 <HAL_OSPIM_Config+0x9e8>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005e8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3750      	adds	r7, #80	@ 0x50
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	420c4000 	.word	0x420c4000
 8005e9c:	420d1400 	.word	0x420d1400
 8005ea0:	420d2400 	.word	0x420d2400

08005ea4 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb0:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec0:	d122      	bne.n	8005f08 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d014      	beq.n	8005efa <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005ee6:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0202 	orr.w	r2, r2, #2
 8005ef6:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8005ef8:	e00c      	b.n	8005f14 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2202      	movs	r2, #2
 8005efe:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7ff fa0f 	bl	8005324 <HAL_OSPI_AbortCpltCallback>
}
 8005f06:	e005      	b.n	8005f14 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7ff f9fe 	bl	8005310 <HAL_OSPI_ErrorCallback>
}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005f2c:	e022      	b.n	8005f74 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d01e      	beq.n	8005f74 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f36:	f7fb ff6f 	bl	8001e18 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d302      	bcc.n	8005f4c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d113      	bne.n	8005f74 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6a1a      	ldr	r2, [r3, #32]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	401a      	ands	r2, r3
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d00b      	beq.n	8005f74 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f62:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f68:	f043 0201 	orr.w	r2, r3, #1
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e00e      	b.n	8005f92 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a1a      	ldr	r2, [r3, #32]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bf14      	ite	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	2300      	moveq	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d1ce      	bne.n	8005f2e <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b089      	sub	sp, #36	@ 0x24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005fb8:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10a      	bne.n	8005fd8 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d114      	bne.n	800600a <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005fe8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005ff2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8005ffc:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	e02c      	b.n	8006064 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b03      	cmp	r3, #3
 8006010:	d114      	bne.n	800603c <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800601a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006024:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800602e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e013      	b.n	8006064 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006044:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800604e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006058:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006062:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800606c:	431a      	orrs	r2, r3
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d012      	beq.n	80060a0 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006092:	4319      	orrs	r1, r3
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006098:	430b      	orrs	r3, r1
 800609a:	431a      	orrs	r2, r3
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f023 021f 	bic.w	r2, r3, #31
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ac:	431a      	orrs	r2, r3
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3a01      	subs	r2, #1
 80060cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8099 	beq.w	800620a <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d055      	beq.n	800618c <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01e      	beq.n	8006126 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	4b67      	ldr	r3, [pc, #412]	@ (800628c <OSPI_ConfigCmd+0x2f0>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	68d1      	ldr	r1, [r2, #12]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	6952      	ldr	r2, [r2, #20]
 80060f8:	4311      	orrs	r1, r2
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	6912      	ldr	r2, [r2, #16]
 80060fe:	4311      	orrs	r1, r2
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	69d2      	ldr	r2, [r2, #28]
 8006104:	4311      	orrs	r1, r2
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800610a:	4311      	orrs	r1, r2
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	6a12      	ldr	r2, [r2, #32]
 8006110:	4311      	orrs	r1, r2
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006116:	4311      	orrs	r1, r2
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800611c:	430a      	orrs	r2, r1
 800611e:	431a      	orrs	r2, r3
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	e028      	b.n	8006178 <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800612e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	68d1      	ldr	r1, [r2, #12]
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	6952      	ldr	r2, [r2, #20]
 800613a:	4311      	orrs	r1, r2
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	6912      	ldr	r2, [r2, #16]
 8006140:	4311      	orrs	r1, r2
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	69d2      	ldr	r2, [r2, #28]
 8006146:	4311      	orrs	r1, r2
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800614c:	4311      	orrs	r1, r2
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	6a12      	ldr	r2, [r2, #32]
 8006152:	430a      	orrs	r2, r1
 8006154:	431a      	orrs	r2, r3
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006162:	d109      	bne.n	8006178 <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006168:	2b08      	cmp	r3, #8
 800616a:	d105      	bne.n	8006178 <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	6992      	ldr	r2, [r2, #24]
 8006188:	649a      	str	r2, [r3, #72]	@ 0x48
 800618a:	e078      	b.n	800627e <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006190:	2b00      	cmp	r3, #0
 8006192:	d017      	beq.n	80061c4 <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800619c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	68d1      	ldr	r1, [r2, #12]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	6952      	ldr	r2, [r2, #20]
 80061a8:	4311      	orrs	r1, r2
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	6912      	ldr	r2, [r2, #16]
 80061ae:	4311      	orrs	r1, r2
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80061b4:	4311      	orrs	r1, r2
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80061ba:	430a      	orrs	r2, r1
 80061bc:	431a      	orrs	r2, r3
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	e01d      	b.n	8006200 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	68d9      	ldr	r1, [r3, #12]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	4319      	orrs	r1, r3
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	430b      	orrs	r3, r1
 80061dc:	431a      	orrs	r2, r3
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ea:	d109      	bne.n	8006200 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d105      	bne.n	8006200 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e039      	b.n	800627e <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d030      	beq.n	8006274 <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006216:	2b00      	cmp	r3, #0
 8006218:	d017      	beq.n	800624a <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006222:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	69d1      	ldr	r1, [r2, #28]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800622e:	4311      	orrs	r1, r2
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	6a12      	ldr	r2, [r2, #32]
 8006234:	4311      	orrs	r1, r2
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800623a:	4311      	orrs	r1, r2
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006240:	430a      	orrs	r2, r1
 8006242:	431a      	orrs	r2, r3
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	e00e      	b.n	8006268 <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	69d9      	ldr	r1, [r3, #28]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	4319      	orrs	r1, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	430b      	orrs	r3, r1
 8006262:	431a      	orrs	r2, r3
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	6992      	ldr	r2, [r2, #24]
 8006270:	649a      	str	r2, [r3, #72]	@ 0x48
 8006272:	e004      	b.n	800627e <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2208      	movs	r2, #8
 800627c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800627e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3724      	adds	r7, #36	@ 0x24
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	f0ffc0c0 	.word	0xf0ffc0c0

08006290 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	6039      	str	r1, [r7, #0]
 800629a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <OSPIM_GetConfig+0x26>
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d802      	bhi.n	80062b6 <OSPIM_GetConfig+0x26>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d102      	bne.n	80062bc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	75fb      	strb	r3, [r7, #23]
 80062ba:	e098      	b.n	80063ee <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2200      	movs	r2, #0
 80062c6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2200      	movs	r2, #0
 80062cc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2200      	movs	r2, #0
 80062d2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2200      	movs	r2, #0
 80062d8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d10b      	bne.n	80062f8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80062e0:	4b46      	ldr	r3, [pc, #280]	@ (80063fc <OSPIM_GetConfig+0x16c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80062ec:	4b44      	ldr	r3, [pc, #272]	@ (8006400 <OSPIM_GetConfig+0x170>)
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	e002      	b.n	80062f8 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80062f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062f6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	e074      	b.n	80063e8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80062fe:	4a3f      	ldr	r2, [pc, #252]	@ (80063fc <OSPIM_GetConfig+0x16c>)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4053      	eors	r3, r2
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d103      	bne.n	800632a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4053      	eors	r3, r2
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d103      	bne.n	800634a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4053      	eors	r3, r2
 800635a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800635e:	2b00      	cmp	r3, #0
 8006360:	d103      	bne.n	800636a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d018      	beq.n	80063a6 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4053      	eors	r3, r2
 800637a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d111      	bne.n	80063a6 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	60da      	str	r2, [r3, #12]
 8006398:	e005      	b.n	80063a6 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d018      	beq.n	80063e2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4053      	eors	r3, r2
 80063b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d111      	bne.n	80063e2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3301      	adds	r3, #1
 80063cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	611a      	str	r2, [r3, #16]
 80063d4:	e005      	b.n	80063e2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3301      	adds	r3, #1
 80063da:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3301      	adds	r3, #1
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d987      	bls.n	80062fe <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80063ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	420c4000 	.word	0x420c4000
 8006400:	04040222 	.word	0x04040222

08006404 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0202 	orr.w	r2, r2, #2
 8006420:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2208      	movs	r2, #8
 8006426:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a15      	ldr	r2, [pc, #84]	@ (8006484 <HAL_OSPI_DLYB_SetConfig+0x80>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d109      	bne.n	8006446 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8006432:	4815      	ldr	r0, [pc, #84]	@ (8006488 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8006434:	f7fe fc5d 	bl	8004cf2 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	4813      	ldr	r0, [pc, #76]	@ (8006488 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800643c:	f005 fa5c 	bl	800b8f8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	73fb      	strb	r3, [r7, #15]
 8006444:	e00d      	b.n	8006462 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a10      	ldr	r2, [pc, #64]	@ (800648c <HAL_OSPI_DLYB_SetConfig+0x88>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d108      	bne.n	8006462 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8006450:	480f      	ldr	r0, [pc, #60]	@ (8006490 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8006452:	f7fe fc4e 	bl	8004cf2 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	480d      	ldr	r0, [pc, #52]	@ (8006490 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800645a:	f005 fa4d 	bl	800b8f8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fe ffa4 	bl	80053b0 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0202 	bic.w	r2, r2, #2
 8006476:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	420d1400 	.word	0x420d1400
 8006488:	420cf000 	.word	0x420cf000
 800648c:	420d2400 	.word	0x420d2400
 8006490:	420cf400 	.word	0x420cf400

08006494 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800649c:	4b39      	ldr	r3, [pc, #228]	@ (8006584 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800649e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064a4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d10b      	bne.n	80064c6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b4:	d905      	bls.n	80064c2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80064b6:	4b33      	ldr	r3, [pc, #204]	@ (8006584 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	4a32      	ldr	r2, [pc, #200]	@ (8006584 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064c0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e057      	b.n	8006576 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064cc:	d90a      	bls.n	80064e4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80064ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006584 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4313      	orrs	r3, r2
 80064da:	4a2a      	ldr	r2, [pc, #168]	@ (8006584 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064e0:	60d3      	str	r3, [r2, #12]
 80064e2:	e007      	b.n	80064f4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80064e4:	4b27      	ldr	r3, [pc, #156]	@ (8006584 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80064ec:	4925      	ldr	r1, [pc, #148]	@ (8006584 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80064f4:	4b24      	ldr	r3, [pc, #144]	@ (8006588 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a24      	ldr	r2, [pc, #144]	@ (800658c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80064fa:	fba2 2303 	umull	r2, r3, r2, r3
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	2232      	movs	r2, #50	@ 0x32
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	4a21      	ldr	r2, [pc, #132]	@ (800658c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006508:	fba2 2303 	umull	r2, r3, r2, r3
 800650c:	099b      	lsrs	r3, r3, #6
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006512:	e002      	b.n	800651a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3b01      	subs	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800651a:	4b1a      	ldr	r3, [pc, #104]	@ (8006584 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <HAL_PWREx_ControlVoltageScaling+0x98>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1f3      	bne.n	8006514 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01b      	beq.n	800656a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006532:	4b15      	ldr	r3, [pc, #84]	@ (8006588 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a15      	ldr	r2, [pc, #84]	@ (800658c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	099b      	lsrs	r3, r3, #6
 800653e:	2232      	movs	r2, #50	@ 0x32
 8006540:	fb02 f303 	mul.w	r3, r2, r3
 8006544:	4a11      	ldr	r2, [pc, #68]	@ (800658c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006546:	fba2 2303 	umull	r2, r3, r2, r3
 800654a:	099b      	lsrs	r3, r3, #6
 800654c:	3301      	adds	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006550:	e002      	b.n	8006558 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3b01      	subs	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006558:	4b0a      	ldr	r3, [pc, #40]	@ (8006584 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800655a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1f3      	bne.n	8006552 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e000      	b.n	8006576 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	46020800 	.word	0x46020800
 8006588:	20000004 	.word	0x20000004
 800658c:	10624dd3 	.word	0x10624dd3

08006590 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006594:	4b04      	ldr	r3, [pc, #16]	@ (80065a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8006596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800659c:	4618      	mov	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	46020800 	.word	0x46020800

080065ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08e      	sub	sp, #56	@ 0x38
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d102      	bne.n	80065c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f000 bec8 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065c6:	4b99      	ldr	r3, [pc, #612]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065d0:	4b96      	ldr	r3, [pc, #600]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80065d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 816c 	beq.w	80068c0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80065e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <HAL_RCC_OscConfig+0x52>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	2b0c      	cmp	r3, #12
 80065f2:	f040 80de 	bne.w	80067b2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	f040 80da 	bne.w	80067b2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f000 bea5 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006610:	4b86      	ldr	r3, [pc, #536]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <HAL_RCC_OscConfig+0x7a>
 800661c:	4b83      	ldr	r3, [pc, #524]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006624:	e005      	b.n	8006632 <HAL_RCC_OscConfig+0x86>
 8006626:	4b81      	ldr	r3, [pc, #516]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006628:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800662c:	041b      	lsls	r3, r3, #16
 800662e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006632:	4293      	cmp	r3, r2
 8006634:	d255      	bcs.n	80066e2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	4618      	mov	r0, r3
 8006642:	f001 fa11 	bl	8007a68 <RCC_SetFlashLatencyFromMSIRange>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	f000 be82 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006652:	4b76      	ldr	r3, [pc, #472]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	4a75      	ldr	r2, [pc, #468]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006658:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800665c:	6093      	str	r3, [r2, #8]
 800665e:	4b73      	ldr	r3, [pc, #460]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666a:	4970      	ldr	r1, [pc, #448]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 800666c:	4313      	orrs	r3, r2
 800666e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006674:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006678:	d309      	bcc.n	800668e <HAL_RCC_OscConfig+0xe2>
 800667a:	4b6c      	ldr	r3, [pc, #432]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f023 021f 	bic.w	r2, r3, #31
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	4969      	ldr	r1, [pc, #420]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006688:	4313      	orrs	r3, r2
 800668a:	60cb      	str	r3, [r1, #12]
 800668c:	e07e      	b.n	800678c <HAL_RCC_OscConfig+0x1e0>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006692:	2b00      	cmp	r3, #0
 8006694:	da0a      	bge.n	80066ac <HAL_RCC_OscConfig+0x100>
 8006696:	4b65      	ldr	r3, [pc, #404]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	015b      	lsls	r3, r3, #5
 80066a4:	4961      	ldr	r1, [pc, #388]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60cb      	str	r3, [r1, #12]
 80066aa:	e06f      	b.n	800678c <HAL_RCC_OscConfig+0x1e0>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b4:	d30a      	bcc.n	80066cc <HAL_RCC_OscConfig+0x120>
 80066b6:	4b5d      	ldr	r3, [pc, #372]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	029b      	lsls	r3, r3, #10
 80066c4:	4959      	ldr	r1, [pc, #356]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60cb      	str	r3, [r1, #12]
 80066ca:	e05f      	b.n	800678c <HAL_RCC_OscConfig+0x1e0>
 80066cc:	4b57      	ldr	r3, [pc, #348]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	03db      	lsls	r3, r3, #15
 80066da:	4954      	ldr	r1, [pc, #336]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	60cb      	str	r3, [r1, #12]
 80066e0:	e054      	b.n	800678c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80066e2:	4b52      	ldr	r3, [pc, #328]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	4a51      	ldr	r2, [pc, #324]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80066e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80066ec:	6093      	str	r3, [r2, #8]
 80066ee:	4b4f      	ldr	r3, [pc, #316]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fa:	494c      	ldr	r1, [pc, #304]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006708:	d309      	bcc.n	800671e <HAL_RCC_OscConfig+0x172>
 800670a:	4b48      	ldr	r3, [pc, #288]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f023 021f 	bic.w	r2, r3, #31
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	4945      	ldr	r1, [pc, #276]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006718:	4313      	orrs	r3, r2
 800671a:	60cb      	str	r3, [r1, #12]
 800671c:	e028      	b.n	8006770 <HAL_RCC_OscConfig+0x1c4>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006722:	2b00      	cmp	r3, #0
 8006724:	da0a      	bge.n	800673c <HAL_RCC_OscConfig+0x190>
 8006726:	4b41      	ldr	r3, [pc, #260]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	015b      	lsls	r3, r3, #5
 8006734:	493d      	ldr	r1, [pc, #244]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006736:	4313      	orrs	r3, r2
 8006738:	60cb      	str	r3, [r1, #12]
 800673a:	e019      	b.n	8006770 <HAL_RCC_OscConfig+0x1c4>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006744:	d30a      	bcc.n	800675c <HAL_RCC_OscConfig+0x1b0>
 8006746:	4b39      	ldr	r3, [pc, #228]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	029b      	lsls	r3, r3, #10
 8006754:	4935      	ldr	r1, [pc, #212]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006756:	4313      	orrs	r3, r2
 8006758:	60cb      	str	r3, [r1, #12]
 800675a:	e009      	b.n	8006770 <HAL_RCC_OscConfig+0x1c4>
 800675c:	4b33      	ldr	r3, [pc, #204]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	03db      	lsls	r3, r3, #15
 800676a:	4930      	ldr	r1, [pc, #192]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 800676c:	4313      	orrs	r3, r2
 800676e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677a:	4618      	mov	r0, r3
 800677c:	f001 f974 	bl	8007a68 <RCC_SetFlashLatencyFromMSIRange>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f000 bde5 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800678c:	f001 f8de 	bl	800794c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006790:	4b27      	ldr	r3, [pc, #156]	@ (8006830 <HAL_RCC_OscConfig+0x284>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f7fb f803 	bl	80017a0 <HAL_InitTick>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80067a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 808a 	beq.w	80068be <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80067aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067ae:	f000 bdd2 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d066      	beq.n	8006888 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80067ba:	4b1c      	ldr	r3, [pc, #112]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1b      	ldr	r2, [pc, #108]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80067c6:	f7fb fb27 	bl	8001e18 <HAL_GetTick>
 80067ca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80067cc:	e009      	b.n	80067e2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067ce:	f7fb fb23 	bl	8001e18 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d902      	bls.n	80067e2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	f000 bdba 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80067e2:	4b12      	ldr	r3, [pc, #72]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0ef      	beq.n	80067ce <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80067ee:	4b0f      	ldr	r3, [pc, #60]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	4a0e      	ldr	r2, [pc, #56]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80067f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067f8:	6093      	str	r3, [r2, #8]
 80067fa:	4b0c      	ldr	r3, [pc, #48]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006806:	4909      	ldr	r1, [pc, #36]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006808:	4313      	orrs	r3, r2
 800680a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006810:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006814:	d30e      	bcc.n	8006834 <HAL_RCC_OscConfig+0x288>
 8006816:	4b05      	ldr	r3, [pc, #20]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f023 021f 	bic.w	r2, r3, #31
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	4902      	ldr	r1, [pc, #8]	@ (800682c <HAL_RCC_OscConfig+0x280>)
 8006824:	4313      	orrs	r3, r2
 8006826:	60cb      	str	r3, [r1, #12]
 8006828:	e04a      	b.n	80068c0 <HAL_RCC_OscConfig+0x314>
 800682a:	bf00      	nop
 800682c:	46020c00 	.word	0x46020c00
 8006830:	20000008 	.word	0x20000008
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006838:	2b00      	cmp	r3, #0
 800683a:	da0a      	bge.n	8006852 <HAL_RCC_OscConfig+0x2a6>
 800683c:	4b98      	ldr	r3, [pc, #608]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	015b      	lsls	r3, r3, #5
 800684a:	4995      	ldr	r1, [pc, #596]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800684c:	4313      	orrs	r3, r2
 800684e:	60cb      	str	r3, [r1, #12]
 8006850:	e036      	b.n	80068c0 <HAL_RCC_OscConfig+0x314>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685a:	d30a      	bcc.n	8006872 <HAL_RCC_OscConfig+0x2c6>
 800685c:	4b90      	ldr	r3, [pc, #576]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	029b      	lsls	r3, r3, #10
 800686a:	498d      	ldr	r1, [pc, #564]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800686c:	4313      	orrs	r3, r2
 800686e:	60cb      	str	r3, [r1, #12]
 8006870:	e026      	b.n	80068c0 <HAL_RCC_OscConfig+0x314>
 8006872:	4b8b      	ldr	r3, [pc, #556]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	03db      	lsls	r3, r3, #15
 8006880:	4987      	ldr	r1, [pc, #540]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006882:	4313      	orrs	r3, r2
 8006884:	60cb      	str	r3, [r1, #12]
 8006886:	e01b      	b.n	80068c0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006888:	4b85      	ldr	r3, [pc, #532]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a84      	ldr	r2, [pc, #528]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006894:	f7fb fac0 	bl	8001e18 <HAL_GetTick>
 8006898:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800689a:	e009      	b.n	80068b0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800689c:	f7fb fabc 	bl	8001e18 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d902      	bls.n	80068b0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	f000 bd53 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80068b0:	4b7b      	ldr	r3, [pc, #492]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1ef      	bne.n	800689c <HAL_RCC_OscConfig+0x2f0>
 80068bc:	e000      	b.n	80068c0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80068be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 808b 	beq.w	80069e4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d005      	beq.n	80068e0 <HAL_RCC_OscConfig+0x334>
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	2b0c      	cmp	r3, #12
 80068d8:	d109      	bne.n	80068ee <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80068da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d106      	bne.n	80068ee <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d17d      	bne.n	80069e4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f000 bd34 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f6:	d106      	bne.n	8006906 <HAL_RCC_OscConfig+0x35a>
 80068f8:	4b69      	ldr	r3, [pc, #420]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a68      	ldr	r2, [pc, #416]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 80068fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	e041      	b.n	800698a <HAL_RCC_OscConfig+0x3de>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800690e:	d112      	bne.n	8006936 <HAL_RCC_OscConfig+0x38a>
 8006910:	4b63      	ldr	r3, [pc, #396]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a62      	ldr	r2, [pc, #392]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006916:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	4b60      	ldr	r3, [pc, #384]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a5f      	ldr	r2, [pc, #380]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006922:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	4b5d      	ldr	r3, [pc, #372]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a5c      	ldr	r2, [pc, #368]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800692e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e029      	b.n	800698a <HAL_RCC_OscConfig+0x3de>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800693e:	d112      	bne.n	8006966 <HAL_RCC_OscConfig+0x3ba>
 8006940:	4b57      	ldr	r3, [pc, #348]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a56      	ldr	r2, [pc, #344]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006946:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	4b54      	ldr	r3, [pc, #336]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a53      	ldr	r2, [pc, #332]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	4b51      	ldr	r3, [pc, #324]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a50      	ldr	r2, [pc, #320]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800695e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	e011      	b.n	800698a <HAL_RCC_OscConfig+0x3de>
 8006966:	4b4e      	ldr	r3, [pc, #312]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a4d      	ldr	r2, [pc, #308]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 800696c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a4a      	ldr	r2, [pc, #296]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006978:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	4b48      	ldr	r3, [pc, #288]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a47      	ldr	r2, [pc, #284]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006984:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006988:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d014      	beq.n	80069bc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006992:	f7fb fa41 	bl	8001e18 <HAL_GetTick>
 8006996:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006998:	e009      	b.n	80069ae <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800699a:	f7fb fa3d 	bl	8001e18 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b64      	cmp	r3, #100	@ 0x64
 80069a6:	d902      	bls.n	80069ae <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	f000 bcd4 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069ae:	4b3c      	ldr	r3, [pc, #240]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0ef      	beq.n	800699a <HAL_RCC_OscConfig+0x3ee>
 80069ba:	e013      	b.n	80069e4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80069bc:	f7fb fa2c 	bl	8001e18 <HAL_GetTick>
 80069c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069c2:	e009      	b.n	80069d8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c4:	f7fb fa28 	bl	8001e18 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b64      	cmp	r3, #100	@ 0x64
 80069d0:	d902      	bls.n	80069d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	f000 bcbf 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069d8:	4b31      	ldr	r3, [pc, #196]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1ef      	bne.n	80069c4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d05f      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d005      	beq.n	8006a02 <HAL_RCC_OscConfig+0x456>
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	2b0c      	cmp	r3, #12
 80069fa:	d114      	bne.n	8006a26 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d111      	bne.n	8006a26 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d102      	bne.n	8006a10 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f000 bca3 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006a10:	4b23      	ldr	r3, [pc, #140]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	4920      	ldr	r1, [pc, #128]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006a24:	e044      	b.n	8006ab0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d024      	beq.n	8006a78 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a38:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a3a:	f7fb f9ed 	bl	8001e18 <HAL_GetTick>
 8006a3e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a40:	e009      	b.n	8006a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a42:	f7fb f9e9 	bl	8001e18 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d902      	bls.n	8006a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	f000 bc80 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a56:	4b12      	ldr	r3, [pc, #72]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0ef      	beq.n	8006a42 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006a62:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	041b      	lsls	r3, r3, #16
 8006a70:	490b      	ldr	r1, [pc, #44]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	610b      	str	r3, [r1, #16]
 8006a76:	e01b      	b.n	8006ab0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006a78:	4b09      	ldr	r3, [pc, #36]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a08      	ldr	r2, [pc, #32]	@ (8006aa0 <HAL_RCC_OscConfig+0x4f4>)
 8006a7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a82:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a84:	f7fb f9c8 	bl	8001e18 <HAL_GetTick>
 8006a88:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a8a:	e00b      	b.n	8006aa4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a8c:	f7fb f9c4 	bl	8001e18 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d904      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	f000 bc5b 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
 8006aa0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006aa4:	4baf      	ldr	r3, [pc, #700]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1ed      	bne.n	8006a8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80c8 	beq.w	8006c4e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ac4:	4ba7      	ldr	r3, [pc, #668]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d111      	bne.n	8006af6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ad2:	4ba4      	ldr	r3, [pc, #656]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ad8:	4aa2      	ldr	r2, [pc, #648]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006ada:	f043 0304 	orr.w	r3, r3, #4
 8006ade:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006ae2:	4ba0      	ldr	r3, [pc, #640]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006af0:	2301      	movs	r3, #1
 8006af2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006af6:	4b9c      	ldr	r3, [pc, #624]	@ (8006d68 <HAL_RCC_OscConfig+0x7bc>)
 8006af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d119      	bne.n	8006b36 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b02:	4b99      	ldr	r3, [pc, #612]	@ (8006d68 <HAL_RCC_OscConfig+0x7bc>)
 8006b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b06:	4a98      	ldr	r2, [pc, #608]	@ (8006d68 <HAL_RCC_OscConfig+0x7bc>)
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b0e:	f7fb f983 	bl	8001e18 <HAL_GetTick>
 8006b12:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b14:	e009      	b.n	8006b2a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b16:	f7fb f97f 	bl	8001e18 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d902      	bls.n	8006b2a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	f000 bc16 	b.w	8007356 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b2a:	4b8f      	ldr	r3, [pc, #572]	@ (8006d68 <HAL_RCC_OscConfig+0x7bc>)
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0ef      	beq.n	8006b16 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d05f      	beq.n	8006bfe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006b3e:	4b89      	ldr	r3, [pc, #548]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b44:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d037      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d006      	beq.n	8006b6c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e3f4      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01b      	beq.n	8006bae <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006b76:	4b7b      	ldr	r3, [pc, #492]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b7c:	4a79      	ldr	r2, [pc, #484]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006b7e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006b82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006b86:	f7fb f947 	bl	8001e18 <HAL_GetTick>
 8006b8a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b8e:	f7fb f943 	bl	8001e18 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b05      	cmp	r3, #5
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e3da      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006ba0:	4b70      	ldr	r3, [pc, #448]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ba6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1ef      	bne.n	8006b8e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006bae:	4b6d      	ldr	r3, [pc, #436]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	4969      	ldr	r1, [pc, #420]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006bc4:	4b67      	ldr	r3, [pc, #412]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bca:	4a66      	ldr	r2, [pc, #408]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006bcc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006bd4:	f7fb f920 	bl	8001e18 <HAL_GetTick>
 8006bd8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bdc:	f7fb f91c 	bl	8001e18 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e3b3      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006bee:	4b5d      	ldr	r3, [pc, #372]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d0ef      	beq.n	8006bdc <HAL_RCC_OscConfig+0x630>
 8006bfc:	e01b      	b.n	8006c36 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006bfe:	4b59      	ldr	r3, [pc, #356]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c04:	4a57      	ldr	r2, [pc, #348]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006c06:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006c0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006c0e:	f7fb f903 	bl	8001e18 <HAL_GetTick>
 8006c12:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c16:	f7fb f8ff 	bl	8001e18 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b05      	cmp	r3, #5
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e396      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c28:	4b4e      	ldr	r3, [pc, #312]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1ef      	bne.n	8006c16 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c36:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d107      	bne.n	8006c4e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c3e:	4b49      	ldr	r3, [pc, #292]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c44:	4a47      	ldr	r2, [pc, #284]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006c46:	f023 0304 	bic.w	r3, r3, #4
 8006c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8111 	beq.w	8006e7e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c62:	4b40      	ldr	r3, [pc, #256]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d111      	bne.n	8006c94 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c70:	4b3c      	ldr	r3, [pc, #240]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c76:	4a3b      	ldr	r2, [pc, #236]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006c78:	f043 0304 	orr.w	r3, r3, #4
 8006c7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006c80:	4b38      	ldr	r3, [pc, #224]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c94:	4b34      	ldr	r3, [pc, #208]	@ (8006d68 <HAL_RCC_OscConfig+0x7bc>)
 8006c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d118      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006ca0:	4b31      	ldr	r3, [pc, #196]	@ (8006d68 <HAL_RCC_OscConfig+0x7bc>)
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca4:	4a30      	ldr	r2, [pc, #192]	@ (8006d68 <HAL_RCC_OscConfig+0x7bc>)
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cac:	f7fb f8b4 	bl	8001e18 <HAL_GetTick>
 8006cb0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cb4:	f7fb f8b0 	bl	8001e18 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e347      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006cc6:	4b28      	ldr	r3, [pc, #160]	@ (8006d68 <HAL_RCC_OscConfig+0x7bc>)
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0f0      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01f      	beq.n	8006d1e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 0304 	and.w	r3, r3, #4
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d010      	beq.n	8006d0c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006cea:	4b1e      	ldr	r3, [pc, #120]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006cf2:	f043 0304 	orr.w	r3, r3, #4
 8006cf6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d00:	4a18      	ldr	r2, [pc, #96]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006d02:	f043 0301 	orr.w	r3, r3, #1
 8006d06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006d0a:	e018      	b.n	8006d3e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d0c:	4b15      	ldr	r3, [pc, #84]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d12:	4a14      	ldr	r2, [pc, #80]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006d14:	f043 0301 	orr.w	r3, r3, #1
 8006d18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006d1c:	e00f      	b.n	8006d3e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d1e:	4b11      	ldr	r3, [pc, #68]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d24:	4a0f      	ldr	r2, [pc, #60]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d34:	4a0b      	ldr	r2, [pc, #44]	@ (8006d64 <HAL_RCC_OscConfig+0x7b8>)
 8006d36:	f023 0304 	bic.w	r3, r3, #4
 8006d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d057      	beq.n	8006df6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006d46:	f7fb f867 	bl	8001e18 <HAL_GetTick>
 8006d4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d4c:	e00e      	b.n	8006d6c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4e:	f7fb f863 	bl	8001e18 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d905      	bls.n	8006d6c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e2f8      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
 8006d64:	46020c00 	.word	0x46020c00
 8006d68:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d6c:	4b9c      	ldr	r3, [pc, #624]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0e9      	beq.n	8006d4e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d01b      	beq.n	8006dbe <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006d86:	4b96      	ldr	r3, [pc, #600]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d8c:	4a94      	ldr	r2, [pc, #592]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006d96:	e00a      	b.n	8006dae <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d98:	f7fb f83e 	bl	8001e18 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e2d3      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006dae:	4b8c      	ldr	r3, [pc, #560]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0ed      	beq.n	8006d98 <HAL_RCC_OscConfig+0x7ec>
 8006dbc:	e053      	b.n	8006e66 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006dbe:	4b88      	ldr	r3, [pc, #544]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dc4:	4a86      	ldr	r2, [pc, #536]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006dce:	e00a      	b.n	8006de6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dd0:	f7fb f822 	bl	8001e18 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e2b7      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006de6:	4b7e      	ldr	r3, [pc, #504]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1ed      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x824>
 8006df4:	e037      	b.n	8006e66 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006df6:	f7fb f80f 	bl	8001e18 <HAL_GetTick>
 8006dfa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006dfc:	e00a      	b.n	8006e14 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dfe:	f7fb f80b 	bl	8001e18 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d901      	bls.n	8006e14 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e2a0      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e14:	4b72      	ldr	r3, [pc, #456]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1ed      	bne.n	8006dfe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006e22:	4b6f      	ldr	r3, [pc, #444]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01a      	beq.n	8006e66 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e30:	4b6b      	ldr	r3, [pc, #428]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e36:	4a6a      	ldr	r2, [pc, #424]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006e38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e40:	e00a      	b.n	8006e58 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e42:	f7fa ffe9 	bl	8001e18 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e27e      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e58:	4b61      	ldr	r3, [pc, #388]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1ed      	bne.n	8006e42 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e66:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e74:	4a5a      	ldr	r2, [pc, #360]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006e76:	f023 0304 	bic.w	r3, r3, #4
 8006e7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d036      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d019      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006e92:	4b53      	ldr	r3, [pc, #332]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a52      	ldr	r2, [pc, #328]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006e98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006e9c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006e9e:	f7fa ffbb 	bl	8001e18 <HAL_GetTick>
 8006ea2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ea6:	f7fa ffb7 	bl	8001e18 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e24e      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006eb8:	4b49      	ldr	r3, [pc, #292]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x8fa>
 8006ec4:	e018      	b.n	8006ef8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006ec6:	4b46      	ldr	r3, [pc, #280]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a45      	ldr	r2, [pc, #276]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006ecc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ed0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ed2:	f7fa ffa1 	bl	8001e18 <HAL_GetTick>
 8006ed6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006ed8:	e008      	b.n	8006eec <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eda:	f7fa ff9d 	bl	8001e18 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d901      	bls.n	8006eec <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e234      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006eec:	4b3c      	ldr	r3, [pc, #240]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1f0      	bne.n	8006eda <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d036      	beq.n	8006f72 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d019      	beq.n	8006f40 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006f0c:	4b34      	ldr	r3, [pc, #208]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a33      	ldr	r2, [pc, #204]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006f12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f16:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f18:	f7fa ff7e 	bl	8001e18 <HAL_GetTick>
 8006f1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006f20:	f7fa ff7a 	bl	8001e18 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e211      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006f32:	4b2b      	ldr	r3, [pc, #172]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0f0      	beq.n	8006f20 <HAL_RCC_OscConfig+0x974>
 8006f3e:	e018      	b.n	8006f72 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006f40:	4b27      	ldr	r3, [pc, #156]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a26      	ldr	r2, [pc, #152]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f4a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f4c:	f7fa ff64 	bl	8001e18 <HAL_GetTick>
 8006f50:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006f54:	f7fa ff60 	bl	8001e18 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e1f7      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006f66:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f0      	bne.n	8006f54 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d07f      	beq.n	800707e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d062      	beq.n	800704c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006f86:	4b16      	ldr	r3, [pc, #88]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	4a15      	ldr	r2, [pc, #84]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006f8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f90:	6093      	str	r3, [r2, #8]
 8006f92:	4b13      	ldr	r3, [pc, #76]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9e:	4910      	ldr	r1, [pc, #64]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006fac:	d309      	bcc.n	8006fc2 <HAL_RCC_OscConfig+0xa16>
 8006fae:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f023 021f 	bic.w	r2, r3, #31
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	4909      	ldr	r1, [pc, #36]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60cb      	str	r3, [r1, #12]
 8006fc0:	e02a      	b.n	8007018 <HAL_RCC_OscConfig+0xa6c>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	da0c      	bge.n	8006fe4 <HAL_RCC_OscConfig+0xa38>
 8006fca:	4b05      	ldr	r3, [pc, #20]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	015b      	lsls	r3, r3, #5
 8006fd8:	4901      	ldr	r1, [pc, #4]	@ (8006fe0 <HAL_RCC_OscConfig+0xa34>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60cb      	str	r3, [r1, #12]
 8006fde:	e01b      	b.n	8007018 <HAL_RCC_OscConfig+0xa6c>
 8006fe0:	46020c00 	.word	0x46020c00
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fec:	d30a      	bcc.n	8007004 <HAL_RCC_OscConfig+0xa58>
 8006fee:	4ba1      	ldr	r3, [pc, #644]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	029b      	lsls	r3, r3, #10
 8006ffc:	499d      	ldr	r1, [pc, #628]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60cb      	str	r3, [r1, #12]
 8007002:	e009      	b.n	8007018 <HAL_RCC_OscConfig+0xa6c>
 8007004:	4b9b      	ldr	r3, [pc, #620]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	03db      	lsls	r3, r3, #15
 8007012:	4998      	ldr	r1, [pc, #608]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007014:	4313      	orrs	r3, r2
 8007016:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007018:	4b96      	ldr	r3, [pc, #600]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a95      	ldr	r2, [pc, #596]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 800701e:	f043 0310 	orr.w	r3, r3, #16
 8007022:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007024:	f7fa fef8 	bl	8001e18 <HAL_GetTick>
 8007028:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800702c:	f7fa fef4 	bl	8001e18 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e18b      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800703e:	4b8d      	ldr	r3, [pc, #564]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f0      	beq.n	800702c <HAL_RCC_OscConfig+0xa80>
 800704a:	e018      	b.n	800707e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800704c:	4b89      	ldr	r3, [pc, #548]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a88      	ldr	r2, [pc, #544]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007052:	f023 0310 	bic.w	r3, r3, #16
 8007056:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007058:	f7fa fede 	bl	8001e18 <HAL_GetTick>
 800705c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007060:	f7fa feda 	bl	8001e18 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e171      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007072:	4b80      	ldr	r3, [pc, #512]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1f0      	bne.n	8007060 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 8166 	beq.w	8007354 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007088:	2300      	movs	r3, #0
 800708a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800708e:	4b79      	ldr	r3, [pc, #484]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	f003 030c 	and.w	r3, r3, #12
 8007096:	2b0c      	cmp	r3, #12
 8007098:	f000 80f2 	beq.w	8007280 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	f040 80c5 	bne.w	8007230 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80070a6:	4b73      	ldr	r3, [pc, #460]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a72      	ldr	r2, [pc, #456]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80070ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80070b2:	f7fa feb1 	bl	8001e18 <HAL_GetTick>
 80070b6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80070b8:	e008      	b.n	80070cc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ba:	f7fa fead 	bl	8001e18 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e144      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80070cc:	4b69      	ldr	r3, [pc, #420]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f0      	bne.n	80070ba <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070d8:	4b66      	ldr	r3, [pc, #408]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80070da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d111      	bne.n	800710a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80070e6:	4b63      	ldr	r3, [pc, #396]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80070e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070ec:	4a61      	ldr	r2, [pc, #388]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80070ee:	f043 0304 	orr.w	r3, r3, #4
 80070f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80070f6:	4b5f      	ldr	r3, [pc, #380]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80070f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800710a:	4b5b      	ldr	r3, [pc, #364]	@ (8007278 <HAL_RCC_OscConfig+0xccc>)
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007112:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007116:	d102      	bne.n	800711e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8007118:	2301      	movs	r3, #1
 800711a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800711e:	4b56      	ldr	r3, [pc, #344]	@ (8007278 <HAL_RCC_OscConfig+0xccc>)
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	4a55      	ldr	r2, [pc, #340]	@ (8007278 <HAL_RCC_OscConfig+0xccc>)
 8007124:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007128:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800712a:	4b52      	ldr	r3, [pc, #328]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 800712c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007132:	f023 0303 	bic.w	r3, r3, #3
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800713e:	3a01      	subs	r2, #1
 8007140:	0212      	lsls	r2, r2, #8
 8007142:	4311      	orrs	r1, r2
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007148:	430a      	orrs	r2, r1
 800714a:	494a      	ldr	r1, [pc, #296]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 800714c:	4313      	orrs	r3, r2
 800714e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007150:	4b48      	ldr	r3, [pc, #288]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007152:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007154:	4b49      	ldr	r3, [pc, #292]	@ (800727c <HAL_RCC_OscConfig+0xcd0>)
 8007156:	4013      	ands	r3, r2
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800715c:	3a01      	subs	r2, #1
 800715e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007166:	3a01      	subs	r2, #1
 8007168:	0252      	lsls	r2, r2, #9
 800716a:	b292      	uxth	r2, r2
 800716c:	4311      	orrs	r1, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007172:	3a01      	subs	r2, #1
 8007174:	0412      	lsls	r2, r2, #16
 8007176:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800717a:	4311      	orrs	r1, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007180:	3a01      	subs	r2, #1
 8007182:	0612      	lsls	r2, r2, #24
 8007184:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007188:	430a      	orrs	r2, r1
 800718a:	493a      	ldr	r1, [pc, #232]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 800718c:	4313      	orrs	r3, r2
 800718e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007190:	4b38      	ldr	r3, [pc, #224]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007194:	4a37      	ldr	r2, [pc, #220]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007196:	f023 0310 	bic.w	r3, r3, #16
 800719a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071a0:	4a34      	ldr	r2, [pc, #208]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80071a6:	4b33      	ldr	r3, [pc, #204]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80071a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071aa:	4a32      	ldr	r2, [pc, #200]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80071ac:	f043 0310 	orr.w	r3, r3, #16
 80071b0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80071b2:	4b30      	ldr	r3, [pc, #192]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80071b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b6:	f023 020c 	bic.w	r2, r3, #12
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071be:	492d      	ldr	r1, [pc, #180]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80071c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d105      	bne.n	80071d8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80071cc:	4b2a      	ldr	r3, [pc, #168]	@ (8007278 <HAL_RCC_OscConfig+0xccc>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	4a29      	ldr	r2, [pc, #164]	@ (8007278 <HAL_RCC_OscConfig+0xccc>)
 80071d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071d6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80071d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d107      	bne.n	80071f0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80071e0:	4b24      	ldr	r3, [pc, #144]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80071e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071e6:	4a23      	ldr	r2, [pc, #140]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80071e8:	f023 0304 	bic.w	r3, r3, #4
 80071ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80071f0:	4b20      	ldr	r3, [pc, #128]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 80071f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80071fc:	f7fa fe0c 	bl	8001e18 <HAL_GetTick>
 8007200:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007204:	f7fa fe08 	bl	8001e18 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e09f      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007216:	4b17      	ldr	r3, [pc, #92]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f0      	beq.n	8007204 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007222:	4b14      	ldr	r3, [pc, #80]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007226:	4a13      	ldr	r2, [pc, #76]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800722c:	6293      	str	r3, [r2, #40]	@ 0x28
 800722e:	e091      	b.n	8007354 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007230:	4b10      	ldr	r3, [pc, #64]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a0f      	ldr	r2, [pc, #60]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800723a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800723c:	f7fa fdec 	bl	8001e18 <HAL_GetTick>
 8007240:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007244:	f7fa fde8 	bl	8001e18 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e07f      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007256:	4b07      	ldr	r3, [pc, #28]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007262:	4b04      	ldr	r3, [pc, #16]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007266:	4a03      	ldr	r2, [pc, #12]	@ (8007274 <HAL_RCC_OscConfig+0xcc8>)
 8007268:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800726c:	f023 0303 	bic.w	r3, r3, #3
 8007270:	6293      	str	r3, [r2, #40]	@ 0x28
 8007272:	e06f      	b.n	8007354 <HAL_RCC_OscConfig+0xda8>
 8007274:	46020c00 	.word	0x46020c00
 8007278:	46020800 	.word	0x46020800
 800727c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007280:	4b37      	ldr	r3, [pc, #220]	@ (8007360 <HAL_RCC_OscConfig+0xdb4>)
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007286:	4b36      	ldr	r3, [pc, #216]	@ (8007360 <HAL_RCC_OscConfig+0xdb4>)
 8007288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800728a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007290:	2b01      	cmp	r3, #1
 8007292:	d039      	beq.n	8007308 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	f003 0203 	and.w	r2, r3, #3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800729e:	429a      	cmp	r2, r3
 80072a0:	d132      	bne.n	8007308 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	0a1b      	lsrs	r3, r3, #8
 80072a6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ae:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d129      	bne.n	8007308 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80072be:	429a      	cmp	r2, r3
 80072c0:	d122      	bne.n	8007308 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072cc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d11a      	bne.n	8007308 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	0a5b      	lsrs	r3, r3, #9
 80072d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d111      	bne.n	8007308 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	0c1b      	lsrs	r3, r3, #16
 80072e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d108      	bne.n	8007308 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	0e1b      	lsrs	r3, r3, #24
 80072fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007302:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007304:	429a      	cmp	r2, r3
 8007306:	d001      	beq.n	800730c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e024      	b.n	8007356 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800730c:	4b14      	ldr	r3, [pc, #80]	@ (8007360 <HAL_RCC_OscConfig+0xdb4>)
 800730e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007310:	08db      	lsrs	r3, r3, #3
 8007312:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800731a:	429a      	cmp	r2, r3
 800731c:	d01a      	beq.n	8007354 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800731e:	4b10      	ldr	r3, [pc, #64]	@ (8007360 <HAL_RCC_OscConfig+0xdb4>)
 8007320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007322:	4a0f      	ldr	r2, [pc, #60]	@ (8007360 <HAL_RCC_OscConfig+0xdb4>)
 8007324:	f023 0310 	bic.w	r3, r3, #16
 8007328:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732a:	f7fa fd75 	bl	8001e18 <HAL_GetTick>
 800732e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007330:	bf00      	nop
 8007332:	f7fa fd71 	bl	8001e18 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733a:	4293      	cmp	r3, r2
 800733c:	d0f9      	beq.n	8007332 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007342:	4a07      	ldr	r2, [pc, #28]	@ (8007360 <HAL_RCC_OscConfig+0xdb4>)
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007348:	4b05      	ldr	r3, [pc, #20]	@ (8007360 <HAL_RCC_OscConfig+0xdb4>)
 800734a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734c:	4a04      	ldr	r2, [pc, #16]	@ (8007360 <HAL_RCC_OscConfig+0xdb4>)
 800734e:	f043 0310 	orr.w	r3, r3, #16
 8007352:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3738      	adds	r7, #56	@ 0x38
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	46020c00 	.word	0x46020c00

08007364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e1d9      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007378:	4b9b      	ldr	r3, [pc, #620]	@ (80075e8 <HAL_RCC_ClockConfig+0x284>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d910      	bls.n	80073a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007386:	4b98      	ldr	r3, [pc, #608]	@ (80075e8 <HAL_RCC_ClockConfig+0x284>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f023 020f 	bic.w	r2, r3, #15
 800738e:	4996      	ldr	r1, [pc, #600]	@ (80075e8 <HAL_RCC_ClockConfig+0x284>)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	4313      	orrs	r3, r2
 8007394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007396:	4b94      	ldr	r3, [pc, #592]	@ (80075e8 <HAL_RCC_ClockConfig+0x284>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d001      	beq.n	80073a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e1c1      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0310 	and.w	r3, r3, #16
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d010      	beq.n	80073d6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	695a      	ldr	r2, [r3, #20]
 80073b8:	4b8c      	ldr	r3, [pc, #560]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 80073ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d908      	bls.n	80073d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80073c4:	4b89      	ldr	r3, [pc, #548]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 80073c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	4986      	ldr	r1, [pc, #536]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d012      	beq.n	8007408 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691a      	ldr	r2, [r3, #16]
 80073e6:	4b81      	ldr	r3, [pc, #516]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	091b      	lsrs	r3, r3, #4
 80073ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d909      	bls.n	8007408 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80073f4:	4b7d      	ldr	r3, [pc, #500]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	497a      	ldr	r1, [pc, #488]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007404:	4313      	orrs	r3, r2
 8007406:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d010      	beq.n	8007436 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	4b74      	ldr	r3, [pc, #464]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007420:	429a      	cmp	r2, r3
 8007422:	d908      	bls.n	8007436 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007424:	4b71      	ldr	r3, [pc, #452]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	496e      	ldr	r1, [pc, #440]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007432:	4313      	orrs	r3, r2
 8007434:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d010      	beq.n	8007464 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	4b69      	ldr	r3, [pc, #420]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	f003 030f 	and.w	r3, r3, #15
 800744e:	429a      	cmp	r2, r3
 8007450:	d908      	bls.n	8007464 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007452:	4b66      	ldr	r3, [pc, #408]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	f023 020f 	bic.w	r2, r3, #15
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	4963      	ldr	r1, [pc, #396]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007460:	4313      	orrs	r3, r2
 8007462:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 80d2 	beq.w	8007616 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007472:	2300      	movs	r3, #0
 8007474:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2b03      	cmp	r3, #3
 800747c:	d143      	bne.n	8007506 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800747e:	4b5b      	ldr	r3, [pc, #364]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d110      	bne.n	80074ae <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800748c:	4b57      	ldr	r3, [pc, #348]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 800748e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007492:	4a56      	ldr	r2, [pc, #344]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007494:	f043 0304 	orr.w	r3, r3, #4
 8007498:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800749c:	4b53      	ldr	r3, [pc, #332]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 800749e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	60bb      	str	r3, [r7, #8]
 80074a8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80074aa:	2301      	movs	r3, #1
 80074ac:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80074ae:	f7fa fcb3 	bl	8001e18 <HAL_GetTick>
 80074b2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80074b4:	4b4e      	ldr	r3, [pc, #312]	@ (80075f0 <HAL_RCC_ClockConfig+0x28c>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00f      	beq.n	80074e0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80074c2:	f7fa fca9 	bl	8001e18 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e12b      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80074d4:	4b46      	ldr	r3, [pc, #280]	@ (80075f0 <HAL_RCC_ClockConfig+0x28c>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d107      	bne.n	80074f6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80074e6:	4b41      	ldr	r3, [pc, #260]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 80074e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074ec:	4a3f      	ldr	r2, [pc, #252]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 80074ee:	f023 0304 	bic.w	r3, r3, #4
 80074f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80074f6:	4b3d      	ldr	r3, [pc, #244]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d121      	bne.n	8007546 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e112      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2b02      	cmp	r3, #2
 800750c:	d107      	bne.n	800751e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800750e:	4b37      	ldr	r3, [pc, #220]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d115      	bne.n	8007546 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e106      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d107      	bne.n	8007536 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007526:	4b31      	ldr	r3, [pc, #196]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e0fa      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007536:	4b2d      	ldr	r3, [pc, #180]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e0f2      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007546:	4b29      	ldr	r3, [pc, #164]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	f023 0203 	bic.w	r2, r3, #3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	4926      	ldr	r1, [pc, #152]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007554:	4313      	orrs	r3, r2
 8007556:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007558:	f7fa fc5e 	bl	8001e18 <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b03      	cmp	r3, #3
 8007564:	d112      	bne.n	800758c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007566:	e00a      	b.n	800757e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007568:	f7fa fc56 	bl	8001e18 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007576:	4293      	cmp	r3, r2
 8007578:	d901      	bls.n	800757e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e0d6      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800757e:	4b1b      	ldr	r3, [pc, #108]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	f003 030c 	and.w	r3, r3, #12
 8007586:	2b0c      	cmp	r3, #12
 8007588:	d1ee      	bne.n	8007568 <HAL_RCC_ClockConfig+0x204>
 800758a:	e044      	b.n	8007616 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d112      	bne.n	80075ba <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007594:	e00a      	b.n	80075ac <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007596:	f7fa fc3f 	bl	8001e18 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d901      	bls.n	80075ac <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e0bf      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80075ac:	4b0f      	ldr	r3, [pc, #60]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	f003 030c 	and.w	r3, r3, #12
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d1ee      	bne.n	8007596 <HAL_RCC_ClockConfig+0x232>
 80075b8:	e02d      	b.n	8007616 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d123      	bne.n	800760a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80075c2:	e00a      	b.n	80075da <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c4:	f7fa fc28 	bl	8001e18 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e0a8      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80075da:	4b04      	ldr	r3, [pc, #16]	@ (80075ec <HAL_RCC_ClockConfig+0x288>)
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f003 030c 	and.w	r3, r3, #12
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1ee      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x260>
 80075e6:	e016      	b.n	8007616 <HAL_RCC_ClockConfig+0x2b2>
 80075e8:	40022000 	.word	0x40022000
 80075ec:	46020c00 	.word	0x46020c00
 80075f0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075f4:	f7fa fc10 	bl	8001e18 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007602:	4293      	cmp	r3, r2
 8007604:	d901      	bls.n	800760a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e090      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800760a:	4b4a      	ldr	r3, [pc, #296]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f003 030c 	and.w	r3, r3, #12
 8007612:	2b04      	cmp	r3, #4
 8007614:	d1ee      	bne.n	80075f4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d010      	beq.n	8007644 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	4b43      	ldr	r3, [pc, #268]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	429a      	cmp	r2, r3
 8007630:	d208      	bcs.n	8007644 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007632:	4b40      	ldr	r3, [pc, #256]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	f023 020f 	bic.w	r2, r3, #15
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	493d      	ldr	r1, [pc, #244]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 8007640:	4313      	orrs	r3, r2
 8007642:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007644:	4b3c      	ldr	r3, [pc, #240]	@ (8007738 <HAL_RCC_ClockConfig+0x3d4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 030f 	and.w	r3, r3, #15
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d210      	bcs.n	8007674 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007652:	4b39      	ldr	r3, [pc, #228]	@ (8007738 <HAL_RCC_ClockConfig+0x3d4>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f023 020f 	bic.w	r2, r3, #15
 800765a:	4937      	ldr	r1, [pc, #220]	@ (8007738 <HAL_RCC_ClockConfig+0x3d4>)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	4313      	orrs	r3, r2
 8007660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007662:	4b35      	ldr	r3, [pc, #212]	@ (8007738 <HAL_RCC_ClockConfig+0x3d4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d001      	beq.n	8007674 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e05b      	b.n	800772c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d010      	beq.n	80076a2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	4b2b      	ldr	r3, [pc, #172]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800768c:	429a      	cmp	r2, r3
 800768e:	d208      	bcs.n	80076a2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007690:	4b28      	ldr	r3, [pc, #160]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	4925      	ldr	r1, [pc, #148]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0308 	and.w	r3, r3, #8
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d012      	beq.n	80076d4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691a      	ldr	r2, [r3, #16]
 80076b2:	4b20      	ldr	r3, [pc, #128]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	091b      	lsrs	r3, r3, #4
 80076b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076bc:	429a      	cmp	r2, r3
 80076be:	d209      	bcs.n	80076d4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80076c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	4919      	ldr	r1, [pc, #100]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d010      	beq.n	8007702 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	695a      	ldr	r2, [r3, #20]
 80076e4:	4b13      	ldr	r3, [pc, #76]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 80076e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d208      	bcs.n	8007702 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80076f0:	4b10      	ldr	r3, [pc, #64]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 80076f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	490d      	ldr	r1, [pc, #52]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007702:	f000 f821 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8007706:	4602      	mov	r2, r0
 8007708:	4b0a      	ldr	r3, [pc, #40]	@ (8007734 <HAL_RCC_ClockConfig+0x3d0>)
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	490a      	ldr	r1, [pc, #40]	@ (800773c <HAL_RCC_ClockConfig+0x3d8>)
 8007712:	5ccb      	ldrb	r3, [r1, r3]
 8007714:	fa22 f303 	lsr.w	r3, r2, r3
 8007718:	4a09      	ldr	r2, [pc, #36]	@ (8007740 <HAL_RCC_ClockConfig+0x3dc>)
 800771a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800771c:	4b09      	ldr	r3, [pc, #36]	@ (8007744 <HAL_RCC_ClockConfig+0x3e0>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4618      	mov	r0, r3
 8007722:	f7fa f83d 	bl	80017a0 <HAL_InitTick>
 8007726:	4603      	mov	r3, r0
 8007728:	73fb      	strb	r3, [r7, #15]

  return status;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	46020c00 	.word	0x46020c00
 8007738:	40022000 	.word	0x40022000
 800773c:	0802e76c 	.word	0x0802e76c
 8007740:	20000004 	.word	0x20000004
 8007744:	20000008 	.word	0x20000008

08007748 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007748:	b480      	push	{r7}
 800774a:	b08b      	sub	sp, #44	@ 0x2c
 800774c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007756:	4b78      	ldr	r3, [pc, #480]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	f003 030c 	and.w	r3, r3, #12
 800775e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007760:	4b75      	ldr	r3, [pc, #468]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007764:	f003 0303 	and.w	r3, r3, #3
 8007768:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d005      	beq.n	800777c <HAL_RCC_GetSysClockFreq+0x34>
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2b0c      	cmp	r3, #12
 8007774:	d121      	bne.n	80077ba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d11e      	bne.n	80077ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800777c:	4b6e      	ldr	r3, [pc, #440]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d107      	bne.n	8007798 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007788:	4b6b      	ldr	r3, [pc, #428]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800778a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800778e:	0b1b      	lsrs	r3, r3, #12
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	627b      	str	r3, [r7, #36]	@ 0x24
 8007796:	e005      	b.n	80077a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007798:	4b67      	ldr	r3, [pc, #412]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	0f1b      	lsrs	r3, r3, #28
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80077a4:	4a65      	ldr	r2, [pc, #404]	@ (800793c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ac:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d110      	bne.n	80077d6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80077b8:	e00d      	b.n	80077d6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80077ba:	4b5f      	ldr	r3, [pc, #380]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f003 030c 	and.w	r3, r3, #12
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d102      	bne.n	80077cc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077c6:	4b5e      	ldr	r3, [pc, #376]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80077c8:	623b      	str	r3, [r7, #32]
 80077ca:	e004      	b.n	80077d6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d101      	bne.n	80077d6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80077d2:	4b5b      	ldr	r3, [pc, #364]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80077d4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b0c      	cmp	r3, #12
 80077da:	f040 80a5 	bne.w	8007928 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80077de:	4b56      	ldr	r3, [pc, #344]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80077e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80077e8:	4b53      	ldr	r3, [pc, #332]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80077ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ec:	0a1b      	lsrs	r3, r3, #8
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	3301      	adds	r3, #1
 80077f4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80077f6:	4b50      	ldr	r3, [pc, #320]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80077f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fa:	091b      	lsrs	r3, r3, #4
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007802:	4b4d      	ldr	r3, [pc, #308]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007806:	08db      	lsrs	r3, r3, #3
 8007808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	fb02 f303 	mul.w	r3, r2, r3
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d003      	beq.n	800782c <HAL_RCC_GetSysClockFreq+0xe4>
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b03      	cmp	r3, #3
 8007828:	d022      	beq.n	8007870 <HAL_RCC_GetSysClockFreq+0x128>
 800782a:	e043      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007944 <HAL_RCC_GetSysClockFreq+0x1fc>
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b3e      	ldr	r3, [pc, #248]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800784e:	ed97 6a01 	vldr	s12, [r7, #4]
 8007852:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007948 <HAL_RCC_GetSysClockFreq+0x200>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800785e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800786e:	e046      	b.n	80078fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007944 <HAL_RCC_GetSysClockFreq+0x1fc>
 800787e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007882:	4b2d      	ldr	r3, [pc, #180]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007892:	ed97 6a01 	vldr	s12, [r7, #4]
 8007896:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007948 <HAL_RCC_GetSysClockFreq+0x200>
 800789a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800789e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078b2:	e024      	b.n	80078fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d4:	ee07 3a90 	vmov	s15, r3
 80078d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078dc:	ed97 6a01 	vldr	s12, [r7, #4]
 80078e0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007948 <HAL_RCC_GetSysClockFreq+0x200>
 80078e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078fc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80078fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007938 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007902:	0e1b      	lsrs	r3, r3, #24
 8007904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007908:	3301      	adds	r3, #1
 800790a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007916:	edd7 6a07 	vldr	s13, [r7, #28]
 800791a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007922:	ee17 3a90 	vmov	r3, s15
 8007926:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007928:	6a3b      	ldr	r3, [r7, #32]
}
 800792a:	4618      	mov	r0, r3
 800792c:	372c      	adds	r7, #44	@ 0x2c
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	46020c00 	.word	0x46020c00
 800793c:	0802e784 	.word	0x0802e784
 8007940:	00f42400 	.word	0x00f42400
 8007944:	4b742400 	.word	0x4b742400
 8007948:	46000000 	.word	0x46000000

0800794c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007950:	f7ff fefa 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8007954:	4602      	mov	r2, r0
 8007956:	4b07      	ldr	r3, [pc, #28]	@ (8007974 <HAL_RCC_GetHCLKFreq+0x28>)
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f003 030f 	and.w	r3, r3, #15
 800795e:	4906      	ldr	r1, [pc, #24]	@ (8007978 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007960:	5ccb      	ldrb	r3, [r1, r3]
 8007962:	fa22 f303 	lsr.w	r3, r2, r3
 8007966:	4a05      	ldr	r2, [pc, #20]	@ (800797c <HAL_RCC_GetHCLKFreq+0x30>)
 8007968:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800796a:	4b04      	ldr	r3, [pc, #16]	@ (800797c <HAL_RCC_GetHCLKFreq+0x30>)
 800796c:	681b      	ldr	r3, [r3, #0]
}
 800796e:	4618      	mov	r0, r3
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	46020c00 	.word	0x46020c00
 8007978:	0802e76c 	.word	0x0802e76c
 800797c:	20000004 	.word	0x20000004

08007980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007984:	f7ff ffe2 	bl	800794c <HAL_RCC_GetHCLKFreq>
 8007988:	4602      	mov	r2, r0
 800798a:	4b05      	ldr	r3, [pc, #20]	@ (80079a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	091b      	lsrs	r3, r3, #4
 8007990:	f003 0307 	and.w	r3, r3, #7
 8007994:	4903      	ldr	r1, [pc, #12]	@ (80079a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007996:	5ccb      	ldrb	r3, [r1, r3]
 8007998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800799c:	4618      	mov	r0, r3
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	46020c00 	.word	0x46020c00
 80079a4:	0802e77c 	.word	0x0802e77c

080079a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80079ac:	f7ff ffce 	bl	800794c <HAL_RCC_GetHCLKFreq>
 80079b0:	4602      	mov	r2, r0
 80079b2:	4b05      	ldr	r3, [pc, #20]	@ (80079c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	0a1b      	lsrs	r3, r3, #8
 80079b8:	f003 0307 	and.w	r3, r3, #7
 80079bc:	4903      	ldr	r1, [pc, #12]	@ (80079cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80079be:	5ccb      	ldrb	r3, [r1, r3]
 80079c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	46020c00 	.word	0x46020c00
 80079cc:	0802e77c 	.word	0x0802e77c

080079d0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80079d4:	f7ff ffba 	bl	800794c <HAL_RCC_GetHCLKFreq>
 80079d8:	4602      	mov	r2, r0
 80079da:	4b05      	ldr	r3, [pc, #20]	@ (80079f0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80079dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079de:	091b      	lsrs	r3, r3, #4
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	4903      	ldr	r1, [pc, #12]	@ (80079f4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80079e6:	5ccb      	ldrb	r3, [r1, r3]
 80079e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	46020c00 	.word	0x46020c00
 80079f4:	0802e77c 	.word	0x0802e77c

080079f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	221f      	movs	r2, #31
 8007a06:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8007a08:	4b15      	ldr	r3, [pc, #84]	@ (8007a60 <HAL_RCC_GetClockConfig+0x68>)
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f003 0203 	and.w	r2, r3, #3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8007a14:	4b12      	ldr	r3, [pc, #72]	@ (8007a60 <HAL_RCC_GetClockConfig+0x68>)
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	f003 020f 	and.w	r2, r3, #15
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8007a20:	4b0f      	ldr	r3, [pc, #60]	@ (8007a60 <HAL_RCC_GetClockConfig+0x68>)
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8007a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a60 <HAL_RCC_GetClockConfig+0x68>)
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	091b      	lsrs	r3, r3, #4
 8007a32:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8007a3a:	4b09      	ldr	r3, [pc, #36]	@ (8007a60 <HAL_RCC_GetClockConfig+0x68>)
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a46:	4b07      	ldr	r3, [pc, #28]	@ (8007a64 <HAL_RCC_GetClockConfig+0x6c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 020f 	and.w	r2, r3, #15
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	601a      	str	r2, [r3, #0]
}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	46020c00 	.word	0x46020c00
 8007a64:	40022000 	.word	0x40022000

08007a68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a70:	4b3e      	ldr	r3, [pc, #248]	@ (8007b6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a7e:	f7fe fd87 	bl	8006590 <HAL_PWREx_GetVoltageRange>
 8007a82:	6178      	str	r0, [r7, #20]
 8007a84:	e019      	b.n	8007aba <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a86:	4b39      	ldr	r3, [pc, #228]	@ (8007b6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a8c:	4a37      	ldr	r2, [pc, #220]	@ (8007b6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a8e:	f043 0304 	orr.w	r3, r3, #4
 8007a92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007a96:	4b35      	ldr	r3, [pc, #212]	@ (8007b6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007aa4:	f7fe fd74 	bl	8006590 <HAL_PWREx_GetVoltageRange>
 8007aa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007aaa:	4b30      	ldr	r3, [pc, #192]	@ (8007b6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8007b6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007ab2:	f023 0304 	bic.w	r3, r3, #4
 8007ab6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ac0:	d003      	beq.n	8007aca <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ac8:	d109      	bne.n	8007ade <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ad0:	d202      	bcs.n	8007ad8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007ad6:	e033      	b.n	8007b40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007ad8:	2300      	movs	r3, #0
 8007ada:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007adc:	e030      	b.n	8007b40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ae4:	d208      	bcs.n	8007af8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aec:	d102      	bne.n	8007af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007aee:	2303      	movs	r3, #3
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	e025      	b.n	8007b40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e035      	b.n	8007b64 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007afe:	d90f      	bls.n	8007b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d109      	bne.n	8007b1a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b0c:	d902      	bls.n	8007b14 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007b0e:	2300      	movs	r3, #0
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	e015      	b.n	8007b40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007b14:	2301      	movs	r3, #1
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	e012      	b.n	8007b40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	613b      	str	r3, [r7, #16]
 8007b1e:	e00f      	b.n	8007b40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b26:	d109      	bne.n	8007b3c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b2e:	d102      	bne.n	8007b36 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007b30:	2301      	movs	r3, #1
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	e004      	b.n	8007b40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007b36:	2302      	movs	r3, #2
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	e001      	b.n	8007b40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b40:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f023 020f 	bic.w	r2, r3, #15
 8007b48:	4909      	ldr	r1, [pc, #36]	@ (8007b70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007b50:	4b07      	ldr	r3, [pc, #28]	@ (8007b70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 030f 	and.w	r3, r3, #15
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d001      	beq.n	8007b62 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	46020c00 	.word	0x46020c00
 8007b70:	40022000 	.word	0x40022000

08007b74 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b78:	b0b8      	sub	sp, #224	@ 0xe0
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b80:	2300      	movs	r3, #0
 8007b82:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b86:	2300      	movs	r3, #0
 8007b88:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	f002 0401 	and.w	r4, r2, #1
 8007b98:	2500      	movs	r5, #0
 8007b9a:	ea54 0305 	orrs.w	r3, r4, r5
 8007b9e:	d00b      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007ba0:	4bca      	ldr	r3, [pc, #808]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ba6:	f023 0103 	bic.w	r1, r3, #3
 8007baa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb0:	4ac6      	ldr	r2, [pc, #792]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007bb2:	430b      	orrs	r3, r1
 8007bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f002 0802 	and.w	r8, r2, #2
 8007bc4:	f04f 0900 	mov.w	r9, #0
 8007bc8:	ea58 0309 	orrs.w	r3, r8, r9
 8007bcc:	d00b      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007bce:	4bbf      	ldr	r3, [pc, #764]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bd4:	f023 010c 	bic.w	r1, r3, #12
 8007bd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bde:	4abb      	ldr	r2, [pc, #748]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007be0:	430b      	orrs	r3, r1
 8007be2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	f002 0a04 	and.w	sl, r2, #4
 8007bf2:	f04f 0b00 	mov.w	fp, #0
 8007bf6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007bfa:	d00b      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007bfc:	4bb3      	ldr	r3, [pc, #716]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c02:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c0c:	4aaf      	ldr	r2, [pc, #700]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f002 0308 	and.w	r3, r2, #8
 8007c20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c24:	2300      	movs	r3, #0
 8007c26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4313      	orrs	r3, r2
 8007c32:	d00b      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007c34:	4ba5      	ldr	r3, [pc, #660]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007c3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c44:	4aa1      	ldr	r2, [pc, #644]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007c46:	430b      	orrs	r3, r1
 8007c48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f002 0310 	and.w	r3, r2, #16
 8007c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007c66:	460b      	mov	r3, r1
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	d00b      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007c6c:	4b97      	ldr	r3, [pc, #604]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c7c:	4a93      	ldr	r2, [pc, #588]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	f002 0320 	and.w	r3, r2, #32
 8007c90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c94:	2300      	movs	r3, #0
 8007c96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	d00b      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007ca4:	4b89      	ldr	r3, [pc, #548]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007caa:	f023 0107 	bic.w	r1, r3, #7
 8007cae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cb4:	4a85      	ldr	r2, [pc, #532]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cb6:	430b      	orrs	r3, r1
 8007cb8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cd2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	d00b      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ce2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007ce6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cec:	4a77      	ldr	r2, [pc, #476]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cee:	430b      	orrs	r3, r1
 8007cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007cf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007d00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d04:	2300      	movs	r3, #0
 8007d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d0a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4313      	orrs	r3, r2
 8007d12:	d00b      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007d14:	4b6d      	ldr	r3, [pc, #436]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d24:	4a69      	ldr	r2, [pc, #420]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d26:	430b      	orrs	r3, r1
 8007d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007d38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007d46:	460b      	mov	r3, r1
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	d00b      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007d4c:	4b5f      	ldr	r3, [pc, #380]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d5c:	4a5b      	ldr	r2, [pc, #364]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d5e:	430b      	orrs	r3, r1
 8007d60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007d70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d74:	2300      	movs	r3, #0
 8007d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4313      	orrs	r3, r2
 8007d82:	d00b      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007d84:	4b51      	ldr	r3, [pc, #324]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d8a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007d8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d94:	4a4d      	ldr	r2, [pc, #308]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d96:	430b      	orrs	r3, r1
 8007d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007dac:	2300      	movs	r3, #0
 8007dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007db2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007db6:	460b      	mov	r3, r1
 8007db8:	4313      	orrs	r3, r2
 8007dba:	d00b      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007dbc:	4b43      	ldr	r3, [pc, #268]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007dc2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007dc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007dca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007de4:	2300      	movs	r3, #0
 8007de6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007dee:	460b      	mov	r3, r1
 8007df0:	4313      	orrs	r3, r2
 8007df2:	d00b      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007df4:	4b35      	ldr	r3, [pc, #212]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dfa:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007dfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e04:	4a31      	ldr	r2, [pc, #196]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e06:	430b      	orrs	r3, r1
 8007e08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007e18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e1e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007e22:	460b      	mov	r3, r1
 8007e24:	4313      	orrs	r3, r2
 8007e26:	d00c      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007e28:	4b28      	ldr	r3, [pc, #160]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e3a:	4a24      	ldr	r2, [pc, #144]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007e4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e50:	2300      	movs	r3, #0
 8007e52:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	d04f      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007e5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e66:	2b80      	cmp	r3, #128	@ 0x80
 8007e68:	d02d      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8007e6a:	2b80      	cmp	r3, #128	@ 0x80
 8007e6c:	d827      	bhi.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e6e:	2b60      	cmp	r3, #96	@ 0x60
 8007e70:	d02e      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007e72:	2b60      	cmp	r3, #96	@ 0x60
 8007e74:	d823      	bhi.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e76:	2b40      	cmp	r3, #64	@ 0x40
 8007e78:	d006      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8007e7a:	2b40      	cmp	r3, #64	@ 0x40
 8007e7c:	d81f      	bhi.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d011      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007e86:	e01a      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e88:	4b10      	ldr	r3, [pc, #64]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e92:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007e94:	e01d      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f002 f9d1 	bl	800a244 <RCCEx_PLL2_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007ea8:	e013      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007eaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007eae:	332c      	adds	r3, #44	@ 0x2c
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f002 fa5f 	bl	800a374 <RCCEx_PLL3_Config>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007ebc:	e009      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007ec4:	e005      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8007ec6:	bf00      	nop
 8007ec8:	e003      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007eca:	bf00      	nop
 8007ecc:	46020c00 	.word	0x46020c00
        break;
 8007ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ed2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10d      	bne.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007eda:	4bb6      	ldr	r3, [pc, #728]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007edc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ee0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007ee4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eec:	4ab1      	ldr	r2, [pc, #708]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007ef4:	e003      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007efa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f10:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007f14:	460b      	mov	r3, r1
 8007f16:	4313      	orrs	r3, r2
 8007f18:	d053      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f26:	d033      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f2c:	d82c      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f32:	d02f      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f38:	d826      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f3e:	d008      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f44:	d820      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f4e:	d011      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007f50:	e01a      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f52:	4b98      	ldr	r3, [pc, #608]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f56:	4a97      	ldr	r2, [pc, #604]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f5c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007f5e:	e01a      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f64:	3308      	adds	r3, #8
 8007f66:	4618      	mov	r0, r3
 8007f68:	f002 f96c 	bl	800a244 <RCCEx_PLL2_Config>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007f72:	e010      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f78:	332c      	adds	r3, #44	@ 0x2c
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f002 f9fa 	bl	800a374 <RCCEx_PLL3_Config>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007f86:	e006      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007f8e:	e002      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8007f90:	bf00      	nop
 8007f92:	e000      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8007f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f96:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10d      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007f9e:	4b85      	ldr	r3, [pc, #532]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007fa0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fa4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fb0:	4a80      	ldr	r2, [pc, #512]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007fb8:	e003      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007fbe:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007fce:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fd4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	d046      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007fde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fe2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fe6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007fea:	d028      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007fec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007ff0:	d821      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ff6:	d022      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007ff8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ffc:	d81b      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007ffe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008002:	d01c      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008004:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008008:	d815      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800800a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800800e:	d008      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008014:	d80f      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d011      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800801a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800801e:	d00e      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008020:	e009      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008022:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008026:	3308      	adds	r3, #8
 8008028:	4618      	mov	r0, r3
 800802a:	f002 f90b 	bl	800a244 <RCCEx_PLL2_Config>
 800802e:	4603      	mov	r3, r0
 8008030:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008034:	e004      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800803c:	e000      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800803e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008040:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10d      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008048:	4b5a      	ldr	r3, [pc, #360]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800804a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800804e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008052:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008056:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800805a:	4a56      	ldr	r2, [pc, #344]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800805c:	430b      	orrs	r3, r1
 800805e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008062:	e003      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008064:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008068:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800806c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008078:	65bb      	str	r3, [r7, #88]	@ 0x58
 800807a:	2300      	movs	r3, #0
 800807c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800807e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008082:	460b      	mov	r3, r1
 8008084:	4313      	orrs	r3, r2
 8008086:	d03f      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8008088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008090:	2b04      	cmp	r3, #4
 8008092:	d81e      	bhi.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8008094:	a201      	add	r2, pc, #4	@ (adr r2, 800809c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8008096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809a:	bf00      	nop
 800809c:	080080db 	.word	0x080080db
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080bf 	.word	0x080080bf
 80080a8:	080080db 	.word	0x080080db
 80080ac:	080080db 	.word	0x080080db
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80080b0:	4b40      	ldr	r3, [pc, #256]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80080b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b4:	4a3f      	ldr	r2, [pc, #252]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80080b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080ba:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80080bc:	e00e      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80080be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080c2:	332c      	adds	r3, #44	@ 0x2c
 80080c4:	4618      	mov	r0, r3
 80080c6:	f002 f955 	bl	800a374 <RCCEx_PLL3_Config>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80080d0:	e004      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80080d8:	e000      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80080da:	bf00      	nop
    }
    if (ret == HAL_OK)
 80080dc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10d      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80080e4:	4b33      	ldr	r3, [pc, #204]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80080e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080ea:	f023 0107 	bic.w	r1, r3, #7
 80080ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f6:	4a2f      	ldr	r2, [pc, #188]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80080f8:	430b      	orrs	r3, r1
 80080fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80080fe:	e003      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008100:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008104:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008108:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008114:	653b      	str	r3, [r7, #80]	@ 0x50
 8008116:	2300      	movs	r3, #0
 8008118:	657b      	str	r3, [r7, #84]	@ 0x54
 800811a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	d04d      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008124:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800812c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008130:	d028      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8008132:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008136:	d821      	bhi.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008138:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800813c:	d024      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800813e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008142:	d81b      	bhi.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008148:	d00e      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800814a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800814e:	d815      	bhi.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01b      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008158:	d110      	bne.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800815a:	4b16      	ldr	r3, [pc, #88]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800815c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815e:	4a15      	ldr	r2, [pc, #84]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008164:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008166:	e012      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008168:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800816c:	332c      	adds	r3, #44	@ 0x2c
 800816e:	4618      	mov	r0, r3
 8008170:	f002 f900 	bl	800a374 <RCCEx_PLL3_Config>
 8008174:	4603      	mov	r3, r0
 8008176:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800817a:	e008      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008182:	e004      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8008184:	bf00      	nop
 8008186:	e002      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8008188:	bf00      	nop
 800818a:	e000      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800818c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800818e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008192:	2b00      	cmp	r3, #0
 8008194:	d110      	bne.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8008196:	4b07      	ldr	r3, [pc, #28]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800819c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80081a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081a8:	4a02      	ldr	r2, [pc, #8]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80081aa:	430b      	orrs	r3, r1
 80081ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80081b0:	e006      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80081b2:	bf00      	nop
 80081b4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80081bc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80081cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081ce:	2300      	movs	r3, #0
 80081d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80081d6:	460b      	mov	r3, r1
 80081d8:	4313      	orrs	r3, r2
 80081da:	f000 80b5 	beq.w	8008348 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081de:	2300      	movs	r3, #0
 80081e0:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081e4:	4b9d      	ldr	r3, [pc, #628]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80081e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081ea:	f003 0304 	and.w	r3, r3, #4
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d113      	bne.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081f2:	4b9a      	ldr	r3, [pc, #616]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80081f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081f8:	4a98      	ldr	r2, [pc, #608]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80081fa:	f043 0304 	orr.w	r3, r3, #4
 80081fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008202:	4b96      	ldr	r3, [pc, #600]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008204:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008210:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800821a:	4b91      	ldr	r3, [pc, #580]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800821c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821e:	4a90      	ldr	r2, [pc, #576]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008220:	f043 0301 	orr.w	r3, r3, #1
 8008224:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008226:	f7f9 fdf7 	bl	8001e18 <HAL_GetTick>
 800822a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800822e:	e00b      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008230:	f7f9 fdf2 	bl	8001e18 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d903      	bls.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008246:	e005      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008248:	4b85      	ldr	r3, [pc, #532]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800824a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0ed      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8008254:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008258:	2b00      	cmp	r3, #0
 800825a:	d165      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800825c:	4b7f      	ldr	r3, [pc, #508]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800825e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008266:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800826a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800826e:	2b00      	cmp	r3, #0
 8008270:	d023      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x746>
 8008272:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008276:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800827a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800827e:	4293      	cmp	r3, r2
 8008280:	d01b      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008282:	4b76      	ldr	r3, [pc, #472]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800828c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008290:	4b72      	ldr	r3, [pc, #456]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008296:	4a71      	ldr	r2, [pc, #452]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800829c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082a0:	4b6e      	ldr	r3, [pc, #440]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082a6:	4a6d      	ldr	r2, [pc, #436]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80082b0:	4a6a      	ldr	r2, [pc, #424]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d019      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c6:	f7f9 fda7 	bl	8001e18 <HAL_GetTick>
 80082ca:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082ce:	e00d      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082d0:	f7f9 fda2 	bl	8001e18 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082da:	1ad2      	subs	r2, r2, r3
 80082dc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d903      	bls.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80082ea:	e006      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082ec:	4b5b      	ldr	r3, [pc, #364]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0ea      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80082fa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10d      	bne.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008302:	4b56      	ldr	r3, [pc, #344]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008308:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800830c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008310:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008314:	4a51      	ldr	r2, [pc, #324]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008316:	430b      	orrs	r3, r1
 8008318:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800831c:	e008      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800831e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008322:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8008326:	e003      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008328:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800832c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008330:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8008334:	2b01      	cmp	r3, #1
 8008336:	d107      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008338:	4b48      	ldr	r3, [pc, #288]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800833a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800833e:	4a47      	ldr	r2, [pc, #284]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008340:	f023 0304 	bic.w	r3, r3, #4
 8008344:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008354:	643b      	str	r3, [r7, #64]	@ 0x40
 8008356:	2300      	movs	r3, #0
 8008358:	647b      	str	r3, [r7, #68]	@ 0x44
 800835a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800835e:	460b      	mov	r3, r1
 8008360:	4313      	orrs	r3, r2
 8008362:	d042      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008364:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008368:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800836c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008370:	d022      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8008372:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008376:	d81b      	bhi.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008378:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800837c:	d011      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800837e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008382:	d815      	bhi.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d019      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8008388:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800838c:	d110      	bne.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800838e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008392:	3308      	adds	r3, #8
 8008394:	4618      	mov	r0, r3
 8008396:	f001 ff55 	bl	800a244 <RCCEx_PLL2_Config>
 800839a:	4603      	mov	r3, r0
 800839c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80083a0:	e00d      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a2:	4b2e      	ldr	r3, [pc, #184]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a6:	4a2d      	ldr	r2, [pc, #180]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083ac:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80083ae:	e006      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80083b6:	e002      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80083b8:	bf00      	nop
 80083ba:	e000      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80083bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80083be:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10d      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80083c6:	4b25      	ldr	r3, [pc, #148]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083cc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80083d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083d8:	4a20      	ldr	r2, [pc, #128]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083da:	430b      	orrs	r3, r1
 80083dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80083e0:	e003      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80083e6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80083f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083f8:	2300      	movs	r3, #0
 80083fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008400:	460b      	mov	r3, r1
 8008402:	4313      	orrs	r3, r2
 8008404:	d032      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008406:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800840a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800840e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008412:	d00b      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008418:	d804      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d008      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800841e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008422:	d007      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800842a:	e004      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800842c:	bf00      	nop
 800842e:	e002      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008430:	bf00      	nop
 8008432:	e000      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008434:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008436:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800843a:	2b00      	cmp	r3, #0
 800843c:	d112      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800843e:	4b07      	ldr	r3, [pc, #28]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008440:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008444:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008448:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800844c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008450:	4a02      	ldr	r2, [pc, #8]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008452:	430b      	orrs	r3, r1
 8008454:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008458:	e008      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800845a:	bf00      	nop
 800845c:	46020c00 	.word	0x46020c00
 8008460:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008464:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008468:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800846c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008478:	633b      	str	r3, [r7, #48]	@ 0x30
 800847a:	2300      	movs	r3, #0
 800847c:	637b      	str	r3, [r7, #52]	@ 0x34
 800847e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008482:	460b      	mov	r3, r1
 8008484:	4313      	orrs	r3, r2
 8008486:	d019      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008488:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800848c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008494:	d105      	bne.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008496:	4b88      	ldr	r3, [pc, #544]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800849a:	4a87      	ldr	r2, [pc, #540]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800849c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084a0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80084a2:	4b85      	ldr	r3, [pc, #532]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80084a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80084a8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80084ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80084b4:	4a80      	ldr	r2, [pc, #512]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80084b6:	430b      	orrs	r3, r1
 80084b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80084bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80084c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084ca:	2300      	movs	r3, #0
 80084cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80084d2:	460b      	mov	r3, r1
 80084d4:	4313      	orrs	r3, r2
 80084d6:	d00c      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80084d8:	4b77      	ldr	r3, [pc, #476]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80084da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80084e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80084ea:	4973      	ldr	r1, [pc, #460]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80084f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80084fe:	623b      	str	r3, [r7, #32]
 8008500:	2300      	movs	r3, #0
 8008502:	627b      	str	r3, [r7, #36]	@ 0x24
 8008504:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008508:	460b      	mov	r3, r1
 800850a:	4313      	orrs	r3, r2
 800850c:	d00c      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800850e:	4b6a      	ldr	r3, [pc, #424]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008514:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800851c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008520:	4965      	ldr	r1, [pc, #404]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008522:	4313      	orrs	r3, r2
 8008524:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008528:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008534:	61bb      	str	r3, [r7, #24]
 8008536:	2300      	movs	r3, #0
 8008538:	61fb      	str	r3, [r7, #28]
 800853a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800853e:	460b      	mov	r3, r1
 8008540:	4313      	orrs	r3, r2
 8008542:	d00c      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008544:	4b5c      	ldr	r3, [pc, #368]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008546:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800854a:	f023 0218 	bic.w	r2, r3, #24
 800854e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008552:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008556:	4958      	ldr	r1, [pc, #352]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008558:	4313      	orrs	r3, r2
 800855a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800855e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	2300      	movs	r3, #0
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008574:	460b      	mov	r3, r1
 8008576:	4313      	orrs	r3, r2
 8008578:	d032      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800857a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800857e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008582:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008586:	d105      	bne.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008588:	4b4b      	ldr	r3, [pc, #300]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858c:	4a4a      	ldr	r2, [pc, #296]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800858e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008592:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008598:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800859c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80085a0:	d108      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085a6:	3308      	adds	r3, #8
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 fe4b 	bl	800a244 <RCCEx_PLL2_Config>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80085b4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10d      	bne.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80085bc:	4b3e      	ldr	r3, [pc, #248]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80085ce:	493a      	ldr	r1, [pc, #232]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80085d6:	e003      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80085dc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80085e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80085ec:	60bb      	str	r3, [r7, #8]
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80085f6:	460b      	mov	r3, r1
 80085f8:	4313      	orrs	r3, r2
 80085fa:	d03a      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80085fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008604:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008608:	d00e      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800860a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800860e:	d815      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8008610:	2b00      	cmp	r3, #0
 8008612:	d017      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8008614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008618:	d110      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800861a:	4b27      	ldr	r3, [pc, #156]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800861c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800861e:	4a26      	ldr	r2, [pc, #152]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008624:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008626:	e00e      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800862c:	3308      	adds	r3, #8
 800862e:	4618      	mov	r0, r3
 8008630:	f001 fe08 	bl	800a244 <RCCEx_PLL2_Config>
 8008634:	4603      	mov	r3, r0
 8008636:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800863a:	e004      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008642:	e000      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8008644:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008646:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10d      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800864e:	4b1a      	ldr	r3, [pc, #104]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008654:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800865c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008660:	4915      	ldr	r1, [pc, #84]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008662:	4313      	orrs	r3, r2
 8008664:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008668:	e003      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800866e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	2300      	movs	r3, #0
 8008682:	607b      	str	r3, [r7, #4]
 8008684:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008688:	460b      	mov	r3, r1
 800868a:	4313      	orrs	r3, r2
 800868c:	d00c      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800868e:	4b0a      	ldr	r3, [pc, #40]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008694:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008698:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800869c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80086a0:	4905      	ldr	r1, [pc, #20]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80086a8:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	37e0      	adds	r7, #224	@ 0xe0
 80086b0:	46bd      	mov	sp, r7
 80086b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086b6:	bf00      	nop
 80086b8:	46020c00 	.word	0x46020c00

080086bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80086bc:	b480      	push	{r7}
 80086be:	b089      	sub	sp, #36	@ 0x24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80086c4:	4ba6      	ldr	r3, [pc, #664]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80086c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086cc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80086ce:	4ba4      	ldr	r3, [pc, #656]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80086d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80086d8:	4ba1      	ldr	r3, [pc, #644]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80086da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086dc:	0a1b      	lsrs	r3, r3, #8
 80086de:	f003 030f 	and.w	r3, r3, #15
 80086e2:	3301      	adds	r3, #1
 80086e4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80086e6:	4b9e      	ldr	r3, [pc, #632]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80086e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ea:	091b      	lsrs	r3, r3, #4
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80086f2:	4b9b      	ldr	r3, [pc, #620]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80086f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f6:	08db      	lsrs	r3, r3, #3
 80086f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	fb02 f303 	mul.w	r3, r2, r3
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d062      	beq.n	80087da <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	2b03      	cmp	r3, #3
 8008718:	f200 8081 	bhi.w	800881e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d024      	beq.n	800876c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d17a      	bne.n	800881e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008732:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873a:	4b89      	ldr	r3, [pc, #548]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800873c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800873e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800874a:	ed97 6a02 	vldr	s12, [r7, #8]
 800874e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008968 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008752:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008756:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800875a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800875e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008766:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800876a:	e08f      	b.n	800888c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800876c:	4b7c      	ldr	r3, [pc, #496]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008778:	4b79      	ldr	r3, [pc, #484]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	0f1b      	lsrs	r3, r3, #28
 800877e:	f003 030f 	and.w	r3, r3, #15
 8008782:	e006      	b.n	8008792 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8008784:	4b76      	ldr	r3, [pc, #472]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008786:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800878a:	041b      	lsls	r3, r3, #16
 800878c:	0f1b      	lsrs	r3, r3, #28
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	4a76      	ldr	r2, [pc, #472]	@ (800896c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008798:	ee07 3a90 	vmov	s15, r3
 800879c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	ee07 3a90 	vmov	s15, r3
 80087b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80087bc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008968 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80087c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80087d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087d8:	e058      	b.n	800888c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	ee07 3a90 	vmov	s15, r3
 80087e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80087e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80087ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f4:	ee07 3a90 	vmov	s15, r3
 80087f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80087fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8008800:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008968 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008804:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008808:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800880c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008810:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008818:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800881c:	e036      	b.n	800888c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800881e:	4b50      	ldr	r3, [pc, #320]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800882a:	4b4d      	ldr	r3, [pc, #308]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	0f1b      	lsrs	r3, r3, #28
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	e006      	b.n	8008844 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8008836:	4b4a      	ldr	r3, [pc, #296]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800883c:	041b      	lsls	r3, r3, #16
 800883e:	0f1b      	lsrs	r3, r3, #28
 8008840:	f003 030f 	and.w	r3, r3, #15
 8008844:	4a49      	ldr	r2, [pc, #292]	@ (800896c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	ee07 3a90 	vmov	s15, r3
 8008858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	ee07 3a90 	vmov	s15, r3
 8008866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886a:	ed97 6a02 	vldr	s12, [r7, #8]
 800886e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008968 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800887e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800888a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800888c:	4b34      	ldr	r3, [pc, #208]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800888e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d017      	beq.n	80088c8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008898:	4b31      	ldr	r3, [pc, #196]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800889a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800889c:	0a5b      	lsrs	r3, r3, #9
 800889e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80088aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80088b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088be:	ee17 2a90 	vmov	r2, s15
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	e002      	b.n	80088ce <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80088ce:	4b24      	ldr	r3, [pc, #144]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d017      	beq.n	800890a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80088da:	4b21      	ldr	r3, [pc, #132]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088de:	0c1b      	lsrs	r3, r3, #16
 80088e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088e4:	ee07 3a90 	vmov	s15, r3
 80088e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80088ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088f0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80088f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008900:	ee17 2a90 	vmov	r2, s15
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	605a      	str	r2, [r3, #4]
 8008908:	e002      	b.n	8008910 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008910:	4b13      	ldr	r3, [pc, #76]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008914:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d017      	beq.n	800894c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800891c:	4b10      	ldr	r3, [pc, #64]	@ (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800891e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008920:	0e1b      	lsrs	r3, r3, #24
 8008922:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800892e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008932:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008936:	edd7 6a07 	vldr	s13, [r7, #28]
 800893a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800893e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008942:	ee17 2a90 	vmov	r2, s15
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800894a:	e002      	b.n	8008952 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	609a      	str	r2, [r3, #8]
}
 8008952:	bf00      	nop
 8008954:	3724      	adds	r7, #36	@ 0x24
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	46020c00 	.word	0x46020c00
 8008964:	4b742400 	.word	0x4b742400
 8008968:	46000000 	.word	0x46000000
 800896c:	0802e784 	.word	0x0802e784

08008970 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008970:	b480      	push	{r7}
 8008972:	b089      	sub	sp, #36	@ 0x24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008978:	4ba6      	ldr	r3, [pc, #664]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800897a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800897c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008980:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008982:	4ba4      	ldr	r3, [pc, #656]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800898c:	4ba1      	ldr	r3, [pc, #644]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800898e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008990:	0a1b      	lsrs	r3, r3, #8
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	3301      	adds	r3, #1
 8008998:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800899a:	4b9e      	ldr	r3, [pc, #632]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800899c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899e:	091b      	lsrs	r3, r3, #4
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80089a6:	4b9b      	ldr	r3, [pc, #620]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80089a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089aa:	08db      	lsrs	r3, r3, #3
 80089ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	fb02 f303 	mul.w	r3, r2, r3
 80089b6:	ee07 3a90 	vmov	s15, r3
 80089ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089be:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d062      	beq.n	8008a8e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	f200 8081 	bhi.w	8008ad2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d024      	beq.n	8008a20 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d17a      	bne.n	8008ad2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80089ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ee:	4b89      	ldr	r3, [pc, #548]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80089f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80089fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a02:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a1e:	e08f      	b.n	8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008a20:	4b7c      	ldr	r3, [pc, #496]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008a2c:	4b79      	ldr	r3, [pc, #484]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	0f1b      	lsrs	r3, r3, #28
 8008a32:	f003 030f 	and.w	r3, r3, #15
 8008a36:	e006      	b.n	8008a46 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008a38:	4b76      	ldr	r3, [pc, #472]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a3e:	041b      	lsls	r3, r3, #16
 8008a40:	0f1b      	lsrs	r3, r3, #28
 8008a42:	f003 030f 	and.w	r3, r3, #15
 8008a46:	4a76      	ldr	r2, [pc, #472]	@ (8008c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a4c:	ee07 3a90 	vmov	s15, r3
 8008a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	ee07 3a90 	vmov	s15, r3
 8008a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a70:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008a74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a8c:	e058      	b.n	8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	ee07 3a90 	vmov	s15, r3
 8008a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a98:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa0:	4b5c      	ldr	r3, [pc, #368]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa8:	ee07 3a90 	vmov	s15, r3
 8008aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ab0:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ab4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008acc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ad0:	e036      	b.n	8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008ad2:	4b50      	ldr	r3, [pc, #320]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d005      	beq.n	8008aea <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008ade:	4b4d      	ldr	r3, [pc, #308]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	0f1b      	lsrs	r3, r3, #28
 8008ae4:	f003 030f 	and.w	r3, r3, #15
 8008ae8:	e006      	b.n	8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8008aea:	4b4a      	ldr	r3, [pc, #296]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008aec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008af0:	041b      	lsls	r3, r3, #16
 8008af2:	0f1b      	lsrs	r3, r3, #28
 8008af4:	f003 030f 	and.w	r3, r3, #15
 8008af8:	4a49      	ldr	r2, [pc, #292]	@ (8008c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	ee07 3a90 	vmov	s15, r3
 8008b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b22:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b3e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008b40:	4b34      	ldr	r3, [pc, #208]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d017      	beq.n	8008b7c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008b4c:	4b31      	ldr	r3, [pc, #196]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b50:	0a5b      	lsrs	r3, r3, #9
 8008b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b62:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b72:	ee17 2a90 	vmov	r2, s15
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	e002      	b.n	8008b82 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008b82:	4b24      	ldr	r3, [pc, #144]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d017      	beq.n	8008bbe <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008b8e:	4b21      	ldr	r3, [pc, #132]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b92:	0c1b      	lsrs	r3, r3, #16
 8008b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b98:	ee07 3a90 	vmov	s15, r3
 8008b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008ba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ba4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb4:	ee17 2a90 	vmov	r2, s15
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	605a      	str	r2, [r3, #4]
 8008bbc:	e002      	b.n	8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008bc4:	4b13      	ldr	r3, [pc, #76]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d017      	beq.n	8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008bd0:	4b10      	ldr	r3, [pc, #64]	@ (8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd4:	0e1b      	lsrs	r3, r3, #24
 8008bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008be6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bf6:	ee17 2a90 	vmov	r2, s15
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008bfe:	e002      	b.n	8008c06 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	609a      	str	r2, [r3, #8]
}
 8008c06:	bf00      	nop
 8008c08:	3724      	adds	r7, #36	@ 0x24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	46020c00 	.word	0x46020c00
 8008c18:	4b742400 	.word	0x4b742400
 8008c1c:	46000000 	.word	0x46000000
 8008c20:	0802e784 	.word	0x0802e784

08008c24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b089      	sub	sp, #36	@ 0x24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008c2c:	4ba6      	ldr	r3, [pc, #664]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c34:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008c36:	4ba4      	ldr	r3, [pc, #656]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008c40:	4ba1      	ldr	r3, [pc, #644]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c44:	0a1b      	lsrs	r3, r3, #8
 8008c46:	f003 030f 	and.w	r3, r3, #15
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008c4e:	4b9e      	ldr	r3, [pc, #632]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c52:	091b      	lsrs	r3, r3, #4
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008c5a:	4b9b      	ldr	r3, [pc, #620]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c5e:	08db      	lsrs	r3, r3, #3
 8008c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	fb02 f303 	mul.w	r3, r2, r3
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c72:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d062      	beq.n	8008d42 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	f200 8081 	bhi.w	8008d86 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d024      	beq.n	8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d17a      	bne.n	8008d86 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008ecc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca2:	4b89      	ldr	r3, [pc, #548]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008caa:	ee07 3a90 	vmov	s15, r3
 8008cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cb6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cce:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8008cd2:	e08f      	b.n	8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008cd4:	4b7c      	ldr	r3, [pc, #496]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008ce0:	4b79      	ldr	r3, [pc, #484]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	0f1b      	lsrs	r3, r3, #28
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	e006      	b.n	8008cfa <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008cec:	4b76      	ldr	r3, [pc, #472]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008cf2:	041b      	lsls	r3, r3, #16
 8008cf4:	0f1b      	lsrs	r3, r3, #28
 8008cf6:	f003 030f 	and.w	r3, r3, #15
 8008cfa:	4a76      	ldr	r2, [pc, #472]	@ (8008ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d00:	ee07 3a90 	vmov	s15, r3
 8008d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	ee07 3a90 	vmov	s15, r3
 8008d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d20:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d24:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008d28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d40:	e058      	b.n	8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	ee07 3a90 	vmov	s15, r3
 8008d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008ecc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d54:	4b5c      	ldr	r3, [pc, #368]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5c:	ee07 3a90 	vmov	s15, r3
 8008d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d64:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d68:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d84:	e036      	b.n	8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008d86:	4b50      	ldr	r3, [pc, #320]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d005      	beq.n	8008d9e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008d92:	4b4d      	ldr	r3, [pc, #308]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	0f1b      	lsrs	r3, r3, #28
 8008d98:	f003 030f 	and.w	r3, r3, #15
 8008d9c:	e006      	b.n	8008dac <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008da4:	041b      	lsls	r3, r3, #16
 8008da6:	0f1b      	lsrs	r3, r3, #28
 8008da8:	f003 030f 	and.w	r3, r3, #15
 8008dac:	4a49      	ldr	r2, [pc, #292]	@ (8008ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	ee07 3a90 	vmov	s15, r3
 8008dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dd6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008df2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008df4:	4b34      	ldr	r3, [pc, #208]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d017      	beq.n	8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008e00:	4b31      	ldr	r3, [pc, #196]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e04:	0a5b      	lsrs	r3, r3, #9
 8008e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008e12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e16:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e26:	ee17 2a90 	vmov	r2, s15
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	e002      	b.n	8008e36 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008e36:	4b24      	ldr	r3, [pc, #144]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d017      	beq.n	8008e72 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008e42:	4b21      	ldr	r3, [pc, #132]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e46:	0c1b      	lsrs	r3, r3, #16
 8008e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e4c:	ee07 3a90 	vmov	s15, r3
 8008e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008e54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e58:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e68:	ee17 2a90 	vmov	r2, s15
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	605a      	str	r2, [r3, #4]
 8008e70:	e002      	b.n	8008e78 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008e78:	4b13      	ldr	r3, [pc, #76]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d017      	beq.n	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008e84:	4b10      	ldr	r3, [pc, #64]	@ (8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e88:	0e1b      	lsrs	r3, r3, #24
 8008e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e8e:	ee07 3a90 	vmov	s15, r3
 8008e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008e96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eaa:	ee17 2a90 	vmov	r2, s15
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008eb2:	e002      	b.n	8008eba <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	609a      	str	r2, [r3, #8]
}
 8008eba:	bf00      	nop
 8008ebc:	3724      	adds	r7, #36	@ 0x24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	46020c00 	.word	0x46020c00
 8008ecc:	4b742400 	.word	0x4b742400
 8008ed0:	46000000 	.word	0x46000000
 8008ed4:	0802e784 	.word	0x0802e784

08008ed8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08e      	sub	sp, #56	@ 0x38
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ee6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008eea:	430b      	orrs	r3, r1
 8008eec:	d145      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008eee:	4baa      	ldr	r3, [pc, #680]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ef8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008efa:	4ba7      	ldr	r3, [pc, #668]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d108      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f0e:	d104      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008f10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f16:	f001 b987 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008f1a:	4b9f      	ldr	r3, [pc, #636]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f28:	d114      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f30:	d110      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008f32:	4b99      	ldr	r3, [pc, #612]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f40:	d103      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008f42:	23fa      	movs	r3, #250	@ 0xfa
 8008f44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008f46:	f001 b96f 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008f4a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f4e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008f50:	f001 b96a 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008f54:	4b90      	ldr	r3, [pc, #576]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f60:	d107      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f68:	d103      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008f6a:	4b8c      	ldr	r3, [pc, #560]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f6e:	f001 b95b 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f76:	f001 b957 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f7e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008f82:	430b      	orrs	r3, r1
 8008f84:	d151      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008f86:	4b84      	ldr	r3, [pc, #528]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008f88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f8c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008f90:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f94:	2b80      	cmp	r3, #128	@ 0x80
 8008f96:	d035      	beq.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9a:	2b80      	cmp	r3, #128	@ 0x80
 8008f9c:	d841      	bhi.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	2b60      	cmp	r3, #96	@ 0x60
 8008fa2:	d02a      	beq.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa6:	2b60      	cmp	r3, #96	@ 0x60
 8008fa8:	d83b      	bhi.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fac:	2b40      	cmp	r3, #64	@ 0x40
 8008fae:	d009      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb2:	2b40      	cmp	r3, #64	@ 0x40
 8008fb4:	d835      	bhi.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00c      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbe:	2b20      	cmp	r3, #32
 8008fc0:	d012      	beq.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008fc2:	e02e      	b.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff fb77 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fd2:	f001 b929 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd6:	f107 0318 	add.w	r3, r7, #24
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff fcc8 	bl	8008970 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fe4:	f001 b920 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe8:	f107 030c 	add.w	r3, r7, #12
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff fe19 	bl	8008c24 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ff6:	f001 b917 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008ffa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008ffe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009000:	f001 b912 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009004:	4b64      	ldr	r3, [pc, #400]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800900c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009010:	d103      	bne.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8009012:	4b63      	ldr	r3, [pc, #396]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009014:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009016:	f001 b907 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800901e:	f001 b903 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009026:	f001 b8ff 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800902a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800902e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009032:	430b      	orrs	r3, r1
 8009034:	d158      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009036:	4b58      	ldr	r3, [pc, #352]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009038:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800903c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009040:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009048:	d03b      	beq.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009050:	d846      	bhi.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009058:	d02e      	beq.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800905a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009060:	d83e      	bhi.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009068:	d00b      	beq.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800906a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009070:	d836      	bhi.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00d      	beq.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800907e:	d012      	beq.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009080:	e02e      	b.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff fb18 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800908c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009090:	f001 b8ca 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009094:	f107 0318 	add.w	r3, r7, #24
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff fc69 	bl	8008970 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090a2:	f001 b8c1 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090a6:	f107 030c 	add.w	r3, r7, #12
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff fdba 	bl	8008c24 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090b4:	f001 b8b8 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80090b8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80090bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090be:	f001 b8b3 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090c2:	4b35      	ldr	r3, [pc, #212]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090ce:	d103      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80090d0:	4b33      	ldr	r3, [pc, #204]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80090d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80090d4:	f001 b8a8 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090dc:	f001 b8a4 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80090e0:	2300      	movs	r3, #0
 80090e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090e4:	f001 b8a0 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80090e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ec:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80090f0:	430b      	orrs	r3, r1
 80090f2:	d16e      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80090f4:	4b28      	ldr	r3, [pc, #160]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80090f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090fa:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80090fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009102:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009106:	d034      	beq.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8009108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800910e:	d85c      	bhi.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8009110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009112:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009116:	d00b      	beq.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8009118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800911e:	d854      	bhi.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8009120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009122:	2b00      	cmp	r3, #0
 8009124:	d016      	beq.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8009126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009128:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800912c:	d009      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800912e:	e04c      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff fac1 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800913a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800913e:	f001 b873 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009142:	f107 0318 	add.w	r3, r7, #24
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff fc12 	bl	8008970 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009150:	f001 b86a 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009154:	4b10      	ldr	r3, [pc, #64]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800915c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009160:	d103      	bne.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8009162:	4b10      	ldr	r3, [pc, #64]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009164:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009166:	f001 b85f 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800916a:	2300      	movs	r3, #0
 800916c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800916e:	f001 b85b 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009172:	4b09      	ldr	r3, [pc, #36]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0320 	and.w	r3, r3, #32
 800917a:	2b20      	cmp	r3, #32
 800917c:	d121      	bne.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800917e:	4b06      	ldr	r3, [pc, #24]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00e      	beq.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800918a:	4b03      	ldr	r3, [pc, #12]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	0e1b      	lsrs	r3, r3, #24
 8009190:	f003 030f 	and.w	r3, r3, #15
 8009194:	e00f      	b.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009196:	bf00      	nop
 8009198:	46020c00 	.word	0x46020c00
 800919c:	0007a120 	.word	0x0007a120
 80091a0:	00f42400 	.word	0x00f42400
 80091a4:	02dc6c00 	.word	0x02dc6c00
 80091a8:	4ba7      	ldr	r3, [pc, #668]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80091aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091ae:	041b      	lsls	r3, r3, #16
 80091b0:	0e1b      	lsrs	r3, r3, #24
 80091b2:	f003 030f 	and.w	r3, r3, #15
 80091b6:	4aa5      	ldr	r2, [pc, #660]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80091b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80091be:	f001 b833 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091c6:	f001 b82f 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091ce:	f001 b82b 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80091d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d6:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80091da:	430b      	orrs	r3, r1
 80091dc:	d17f      	bne.n	80092de <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80091de:	4b9a      	ldr	r3, [pc, #616]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80091e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091e8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80091ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d165      	bne.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80091f0:	4b95      	ldr	r3, [pc, #596]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80091f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091f6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80091fa:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80091fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009202:	d034      	beq.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009206:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800920a:	d853      	bhi.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800920c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009212:	d00b      	beq.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8009214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800921a:	d84b      	bhi.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800921c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921e:	2b00      	cmp	r3, #0
 8009220:	d016      	beq.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8009222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009224:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009228:	d009      	beq.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800922a:	e043      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800922c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff fa43 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800923a:	f000 bff5 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800923e:	f107 0318 	add.w	r3, r7, #24
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff fb94 	bl	8008970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800924c:	f000 bfec 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009250:	4b7d      	ldr	r3, [pc, #500]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800925c:	d103      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800925e:	4b7c      	ldr	r3, [pc, #496]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8009260:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009262:	f000 bfe1 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800926a:	f000 bfdd 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800926e:	4b76      	ldr	r3, [pc, #472]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0320 	and.w	r3, r3, #32
 8009276:	2b20      	cmp	r3, #32
 8009278:	d118      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800927a:	4b73      	ldr	r3, [pc, #460]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d005      	beq.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8009286:	4b70      	ldr	r3, [pc, #448]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	0e1b      	lsrs	r3, r3, #24
 800928c:	f003 030f 	and.w	r3, r3, #15
 8009290:	e006      	b.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8009292:	4b6d      	ldr	r3, [pc, #436]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009298:	041b      	lsls	r3, r3, #16
 800929a:	0e1b      	lsrs	r3, r3, #24
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	4a6a      	ldr	r2, [pc, #424]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80092a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092a6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80092a8:	f000 bfbe 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80092b0:	f000 bfba 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80092b8:	f000 bfb6 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092c2:	d108      	bne.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7ff f9f7 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80092ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d2:	f000 bfa9 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092da:	f000 bfa5 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80092de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e2:	1e51      	subs	r1, r2, #1
 80092e4:	430b      	orrs	r3, r1
 80092e6:	d136      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80092e8:	4b57      	ldr	r3, [pc, #348]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80092ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092ee:	f003 0303 	and.w	r3, r3, #3
 80092f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d104      	bne.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80092fa:	f7fe fb55 	bl	80079a8 <HAL_RCC_GetPCLK2Freq>
 80092fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8009300:	f000 bf92 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8009304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009306:	2b01      	cmp	r3, #1
 8009308:	d104      	bne.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800930a:	f7fe fa1d 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 800930e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009310:	f000 bf8a 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009314:	4b4c      	ldr	r3, [pc, #304]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800931c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009320:	d106      	bne.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8009322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009324:	2b02      	cmp	r3, #2
 8009326:	d103      	bne.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8009328:	4b4a      	ldr	r3, [pc, #296]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800932a:	637b      	str	r3, [r7, #52]	@ 0x34
 800932c:	f000 bf7c 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009330:	4b45      	ldr	r3, [pc, #276]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b02      	cmp	r3, #2
 800933c:	d107      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	2b03      	cmp	r3, #3
 8009342:	d104      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8009344:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009348:	637b      	str	r3, [r7, #52]	@ 0x34
 800934a:	f000 bf6d 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	637b      	str	r3, [r7, #52]	@ 0x34
 8009352:	f000 bf69 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8009356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800935a:	1e91      	subs	r1, r2, #2
 800935c:	430b      	orrs	r3, r1
 800935e:	d136      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009360:	4b39      	ldr	r3, [pc, #228]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009366:	f003 030c 	and.w	r3, r3, #12
 800936a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	2b00      	cmp	r3, #0
 8009370:	d104      	bne.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009372:	f7fe fb05 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 8009376:	6378      	str	r0, [r7, #52]	@ 0x34
 8009378:	f000 bf56 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	2b04      	cmp	r3, #4
 8009380:	d104      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009382:	f7fe f9e1 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8009386:	6378      	str	r0, [r7, #52]	@ 0x34
 8009388:	f000 bf4e 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800938c:	4b2e      	ldr	r3, [pc, #184]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009398:	d106      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	2b08      	cmp	r3, #8
 800939e:	d103      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80093a0:	4b2c      	ldr	r3, [pc, #176]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80093a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a4:	f000 bf40 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80093a8:	4b27      	ldr	r3, [pc, #156]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80093aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d107      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	2b0c      	cmp	r3, #12
 80093ba:	d104      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80093bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c2:	f000 bf31 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ca:	f000 bf2d 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80093ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093d2:	1f11      	subs	r1, r2, #4
 80093d4:	430b      	orrs	r3, r1
 80093d6:	d13f      	bne.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80093d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80093da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80093e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80093e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d104      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80093ea:	f7fe fac9 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 80093ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80093f0:	f000 bf1a 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	2b10      	cmp	r3, #16
 80093f8:	d104      	bne.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80093fa:	f7fe f9a5 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 80093fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8009400:	f000 bf12 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009404:	4b10      	ldr	r3, [pc, #64]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800940c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009410:	d106      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8009412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009414:	2b20      	cmp	r3, #32
 8009416:	d103      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8009418:	4b0e      	ldr	r3, [pc, #56]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800941a:	637b      	str	r3, [r7, #52]	@ 0x34
 800941c:	f000 bf04 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009420:	4b09      	ldr	r3, [pc, #36]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009426:	f003 0302 	and.w	r3, r3, #2
 800942a:	2b02      	cmp	r3, #2
 800942c:	d107      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009430:	2b30      	cmp	r3, #48	@ 0x30
 8009432:	d104      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8009434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009438:	637b      	str	r3, [r7, #52]	@ 0x34
 800943a:	f000 bef5 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	637b      	str	r3, [r7, #52]	@ 0x34
 8009442:	f000 bef1 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009446:	bf00      	nop
 8009448:	46020c00 	.word	0x46020c00
 800944c:	0802e784 	.word	0x0802e784
 8009450:	02dc6c00 	.word	0x02dc6c00
 8009454:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800945c:	f1a2 0108 	sub.w	r1, r2, #8
 8009460:	430b      	orrs	r3, r1
 8009462:	d136      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009464:	4ba4      	ldr	r3, [pc, #656]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800946a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800946e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	2b00      	cmp	r3, #0
 8009474:	d104      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009476:	f7fe fa83 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 800947a:	6378      	str	r0, [r7, #52]	@ 0x34
 800947c:	f000 bed4 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009482:	2b40      	cmp	r3, #64	@ 0x40
 8009484:	d104      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009486:	f7fe f95f 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 800948a:	6378      	str	r0, [r7, #52]	@ 0x34
 800948c:	f000 becc 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009490:	4b99      	ldr	r3, [pc, #612]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800949c:	d106      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	2b80      	cmp	r3, #128	@ 0x80
 80094a2:	d103      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 80094a4:	4b95      	ldr	r3, [pc, #596]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80094a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a8:	f000 bebe 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80094ac:	4b92      	ldr	r3, [pc, #584]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80094ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d107      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80094ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80094be:	d104      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 80094c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c6:	f000 beaf 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ce:	f000 beab 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80094d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d6:	f1a2 0110 	sub.w	r1, r2, #16
 80094da:	430b      	orrs	r3, r1
 80094dc:	d139      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80094de:	4b86      	ldr	r3, [pc, #536]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80094e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d104      	bne.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80094f0:	f7fe fa46 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 80094f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80094f6:	f000 be97 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009500:	d104      	bne.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009502:	f7fe f921 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8009506:	6378      	str	r0, [r7, #52]	@ 0x34
 8009508:	f000 be8e 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800950c:	4b7a      	ldr	r3, [pc, #488]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009518:	d107      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009520:	d103      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8009522:	4b76      	ldr	r3, [pc, #472]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009524:	637b      	str	r3, [r7, #52]	@ 0x34
 8009526:	f000 be7f 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800952a:	4b73      	ldr	r3, [pc, #460]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800952c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009530:	f003 0302 	and.w	r3, r3, #2
 8009534:	2b02      	cmp	r3, #2
 8009536:	d108      	bne.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8009538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800953e:	d104      	bne.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8009540:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009544:	637b      	str	r3, [r7, #52]	@ 0x34
 8009546:	f000 be6f 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800954a:	2300      	movs	r3, #0
 800954c:	637b      	str	r3, [r7, #52]	@ 0x34
 800954e:	f000 be6b 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8009552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009556:	f1a2 0120 	sub.w	r1, r2, #32
 800955a:	430b      	orrs	r3, r1
 800955c:	d158      	bne.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800955e:	4b66      	ldr	r3, [pc, #408]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800956a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8009570:	f7fe fa2e 	bl	80079d0 <HAL_RCC_GetPCLK3Freq>
 8009574:	6378      	str	r0, [r7, #52]	@ 0x34
 8009576:	f000 be57 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	2b01      	cmp	r3, #1
 800957e:	d104      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009580:	f7fe f8e2 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8009584:	6378      	str	r0, [r7, #52]	@ 0x34
 8009586:	f000 be4f 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800958a:	4b5b      	ldr	r3, [pc, #364]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009596:	d106      	bne.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8009598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959a:	2b02      	cmp	r3, #2
 800959c:	d103      	bne.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800959e:	4b57      	ldr	r3, [pc, #348]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80095a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a2:	f000 be41 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80095a6:	4b54      	ldr	r3, [pc, #336]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095ac:	f003 0302 	and.w	r3, r3, #2
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d107      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80095b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d104      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80095ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095be:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c0:	f000 be32 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80095c4:	4b4c      	ldr	r3, [pc, #304]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0320 	and.w	r3, r3, #32
 80095cc:	2b20      	cmp	r3, #32
 80095ce:	d11b      	bne.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80095d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d118      	bne.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80095d6:	4b48      	ldr	r3, [pc, #288]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d005      	beq.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80095e2:	4b45      	ldr	r3, [pc, #276]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	0e1b      	lsrs	r3, r3, #24
 80095e8:	f003 030f 	and.w	r3, r3, #15
 80095ec:	e006      	b.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80095ee:	4b42      	ldr	r3, [pc, #264]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095f4:	041b      	lsls	r3, r3, #16
 80095f6:	0e1b      	lsrs	r3, r3, #24
 80095f8:	f003 030f 	and.w	r3, r3, #15
 80095fc:	4a40      	ldr	r2, [pc, #256]	@ (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80095fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009602:	637b      	str	r3, [r7, #52]	@ 0x34
 8009604:	f000 be10 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	637b      	str	r3, [r7, #52]	@ 0x34
 800960c:	f000 be0c 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8009610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009614:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009618:	430b      	orrs	r3, r1
 800961a:	d173      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800961c:	4b36      	ldr	r3, [pc, #216]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800961e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009622:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009626:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800962e:	d104      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009630:	f7fe f88a 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8009634:	6378      	str	r0, [r7, #52]	@ 0x34
 8009636:	f000 bdf7 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800963a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009640:	d108      	bne.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009642:	f107 0318 	add.w	r3, r7, #24
 8009646:	4618      	mov	r0, r3
 8009648:	f7ff f992 	bl	8008970 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009650:	f000 bdea 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009656:	2b00      	cmp	r3, #0
 8009658:	d104      	bne.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800965a:	f7fe f977 	bl	800794c <HAL_RCC_GetHCLKFreq>
 800965e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009660:	f000 bde2 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009666:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800966a:	d122      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800966c:	4b22      	ldr	r3, [pc, #136]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0320 	and.w	r3, r3, #32
 8009674:	2b20      	cmp	r3, #32
 8009676:	d118      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009678:	4b1f      	ldr	r3, [pc, #124]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d005      	beq.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8009684:	4b1c      	ldr	r3, [pc, #112]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	0e1b      	lsrs	r3, r3, #24
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	e006      	b.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8009690:	4b19      	ldr	r3, [pc, #100]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009696:	041b      	lsls	r3, r3, #16
 8009698:	0e1b      	lsrs	r3, r3, #24
 800969a:	f003 030f 	and.w	r3, r3, #15
 800969e:	4a18      	ldr	r2, [pc, #96]	@ (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80096a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096a6:	f000 bdbf 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80096aa:	2300      	movs	r3, #0
 80096ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ae:	f000 bdbb 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80096b2:	4b11      	ldr	r3, [pc, #68]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096be:	d107      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80096c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096c6:	d103      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 80096c8:	4b0c      	ldr	r3, [pc, #48]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80096ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80096cc:	f000 bdac 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80096d0:	4b09      	ldr	r3, [pc, #36]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096dc:	d107      	bne.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80096de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096e4:	d103      	bne.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80096e6:	4b05      	ldr	r3, [pc, #20]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80096e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ea:	f000 bd9d 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f2:	f000 bd99 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80096f6:	bf00      	nop
 80096f8:	46020c00 	.word	0x46020c00
 80096fc:	00f42400 	.word	0x00f42400
 8009700:	0802e784 	.word	0x0802e784
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009708:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800970c:	430b      	orrs	r3, r1
 800970e:	d158      	bne.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009710:	4bad      	ldr	r3, [pc, #692]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009712:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009716:	f003 0307 	and.w	r3, r3, #7
 800971a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800971c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971e:	2b04      	cmp	r3, #4
 8009720:	d84b      	bhi.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009722:	a201      	add	r2, pc, #4	@ (adr r2, 8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009728:	08009761 	.word	0x08009761
 800972c:	0800973d 	.word	0x0800973d
 8009730:	0800974f 	.word	0x0800974f
 8009734:	0800976b 	.word	0x0800976b
 8009738:	08009775 	.word	0x08009775
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800973c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe ffbb 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009748:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800974a:	f000 bd6d 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800974e:	f107 030c 	add.w	r3, r7, #12
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff fa66 	bl	8008c24 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800975c:	f000 bd64 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009760:	f7fe f8f4 	bl	800794c <HAL_RCC_GetHCLKFreq>
 8009764:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009766:	f000 bd5f 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800976a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800976e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009770:	f000 bd5a 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009774:	4b94      	ldr	r3, [pc, #592]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0320 	and.w	r3, r3, #32
 800977c:	2b20      	cmp	r3, #32
 800977e:	d118      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009780:	4b91      	ldr	r3, [pc, #580]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d005      	beq.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 800978c:	4b8e      	ldr	r3, [pc, #568]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	0e1b      	lsrs	r3, r3, #24
 8009792:	f003 030f 	and.w	r3, r3, #15
 8009796:	e006      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8009798:	4b8b      	ldr	r3, [pc, #556]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800979a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800979e:	041b      	lsls	r3, r3, #16
 80097a0:	0e1b      	lsrs	r3, r3, #24
 80097a2:	f003 030f 	and.w	r3, r3, #15
 80097a6:	4a89      	ldr	r2, [pc, #548]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80097a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80097ae:	f000 bd3b 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097b6:	f000 bd37 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097be:	f000 bd33 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80097c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097c6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80097ca:	430b      	orrs	r3, r1
 80097cc:	d167      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80097ce:	4b7e      	ldr	r3, [pc, #504]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80097d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097d4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80097d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097e0:	d036      	beq.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097e8:	d855      	bhi.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097f0:	d029      	beq.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80097f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097f8:	d84d      	bhi.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80097fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009800:	d013      	beq.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009808:	d845      	bhi.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800980a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980c:	2b00      	cmp	r3, #0
 800980e:	d015      	beq.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009816:	d13e      	bne.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800981c:	4618      	mov	r0, r3
 800981e:	f7fe ff4d 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009824:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009826:	f000 bcff 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800982a:	f107 030c 	add.w	r3, r7, #12
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff f9f8 	bl	8008c24 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009838:	f000 bcf6 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800983c:	f7fe f886 	bl	800794c <HAL_RCC_GetHCLKFreq>
 8009840:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009842:	f000 bcf1 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009846:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800984a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800984c:	f000 bcec 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009850:	4b5d      	ldr	r3, [pc, #372]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0320 	and.w	r3, r3, #32
 8009858:	2b20      	cmp	r3, #32
 800985a:	d118      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800985c:	4b5a      	ldr	r3, [pc, #360]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d005      	beq.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8009868:	4b57      	ldr	r3, [pc, #348]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	0e1b      	lsrs	r3, r3, #24
 800986e:	f003 030f 	and.w	r3, r3, #15
 8009872:	e006      	b.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8009874:	4b54      	ldr	r3, [pc, #336]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800987a:	041b      	lsls	r3, r3, #16
 800987c:	0e1b      	lsrs	r3, r3, #24
 800987e:	f003 030f 	and.w	r3, r3, #15
 8009882:	4a52      	ldr	r2, [pc, #328]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800988a:	f000 bccd 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009892:	f000 bcc9 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009896:	2300      	movs	r3, #0
 8009898:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800989a:	f000 bcc5 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800989e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098a2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80098a6:	430b      	orrs	r3, r1
 80098a8:	d14c      	bne.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80098aa:	4b47      	ldr	r3, [pc, #284]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80098ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80098b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80098b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80098b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d104      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80098bc:	f7fe f860 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 80098c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80098c2:	f000 bcb1 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098cc:	d104      	bne.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80098ce:	f7fd ff3b 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 80098d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80098d4:	f000 bca8 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80098d8:	4b3b      	ldr	r3, [pc, #236]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098e4:	d107      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80098e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098ec:	d103      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80098ee:	4b38      	ldr	r3, [pc, #224]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f2:	f000 bc99 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80098f6:	4b34      	ldr	r3, [pc, #208]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0320 	and.w	r3, r3, #32
 80098fe:	2b20      	cmp	r3, #32
 8009900:	d11c      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009908:	d118      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800990a:	4b2f      	ldr	r3, [pc, #188]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d005      	beq.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8009916:	4b2c      	ldr	r3, [pc, #176]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	0e1b      	lsrs	r3, r3, #24
 800991c:	f003 030f 	and.w	r3, r3, #15
 8009920:	e006      	b.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8009922:	4b29      	ldr	r3, [pc, #164]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009928:	041b      	lsls	r3, r3, #16
 800992a:	0e1b      	lsrs	r3, r3, #24
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	4a26      	ldr	r2, [pc, #152]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009936:	637b      	str	r3, [r7, #52]	@ 0x34
 8009938:	f000 bc76 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009940:	f000 bc72 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009948:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800994c:	430b      	orrs	r3, r1
 800994e:	d152      	bne.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009950:	4b1d      	ldr	r3, [pc, #116]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009956:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800995a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800995c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995e:	2b00      	cmp	r3, #0
 8009960:	d104      	bne.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009962:	f7fe f80d 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 8009966:	6378      	str	r0, [r7, #52]	@ 0x34
 8009968:	f000 bc5e 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800996c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009972:	d104      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009974:	f7fd fee8 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8009978:	6378      	str	r0, [r7, #52]	@ 0x34
 800997a:	f000 bc55 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800997e:	4b12      	ldr	r3, [pc, #72]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800998a:	d107      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009992:	d103      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8009994:	4b0e      	ldr	r3, [pc, #56]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009996:	637b      	str	r3, [r7, #52]	@ 0x34
 8009998:	f000 bc46 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800999c:	4b0a      	ldr	r3, [pc, #40]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b20      	cmp	r3, #32
 80099a6:	d122      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099ae:	d11e      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099b0:	4b05      	ldr	r3, [pc, #20]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00b      	beq.n	80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80099bc:	4b02      	ldr	r3, [pc, #8]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	0e1b      	lsrs	r3, r3, #24
 80099c2:	f003 030f 	and.w	r3, r3, #15
 80099c6:	e00c      	b.n	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 80099c8:	46020c00 	.word	0x46020c00
 80099cc:	0802e784 	.word	0x0802e784
 80099d0:	00f42400 	.word	0x00f42400
 80099d4:	4ba1      	ldr	r3, [pc, #644]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80099d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099da:	041b      	lsls	r3, r3, #16
 80099dc:	0e1b      	lsrs	r3, r3, #24
 80099de:	f003 030f 	and.w	r3, r3, #15
 80099e2:	4a9f      	ldr	r2, [pc, #636]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80099e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ea:	f000 bc1d 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f2:	f000 bc19 	b.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80099f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099fa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80099fe:	430b      	orrs	r3, r1
 8009a00:	d151      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009a02:	4b96      	ldr	r3, [pc, #600]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a08:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009a0c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a10:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a12:	d024      	beq.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8009a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a16:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a18:	d842      	bhi.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1c:	2b80      	cmp	r3, #128	@ 0x80
 8009a1e:	d00d      	beq.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a22:	2b80      	cmp	r3, #128	@ 0x80
 8009a24:	d83c      	bhi.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d003      	beq.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2e:	2b40      	cmp	r3, #64	@ 0x40
 8009a30:	d011      	beq.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8009a32:	e035      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009a34:	f7fd ffcc 	bl	80079d0 <HAL_RCC_GetPCLK3Freq>
 8009a38:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a3a:	e3f5      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a3c:	4b87      	ldr	r3, [pc, #540]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a48:	d102      	bne.n	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8009a4a:	4b86      	ldr	r3, [pc, #536]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009a4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a4e:	e3eb      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a54:	e3e8      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009a56:	f7fd fe77 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8009a5a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a5c:	e3e4      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009a5e:	4b7f      	ldr	r3, [pc, #508]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b20      	cmp	r3, #32
 8009a68:	d117      	bne.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a6a:	4b7c      	ldr	r3, [pc, #496]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d005      	beq.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8009a76:	4b79      	ldr	r3, [pc, #484]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	0e1b      	lsrs	r3, r3, #24
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	e006      	b.n	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8009a82:	4b76      	ldr	r3, [pc, #472]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a88:	041b      	lsls	r3, r3, #16
 8009a8a:	0e1b      	lsrs	r3, r3, #24
 8009a8c:	f003 030f 	and.w	r3, r3, #15
 8009a90:	4a73      	ldr	r2, [pc, #460]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a96:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a98:	e3c6      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a9e:	e3c3      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009aa4:	e3c0      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aaa:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009aae:	430b      	orrs	r3, r1
 8009ab0:	d147      	bne.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ab8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009abc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009ac4:	f7fd ff5c 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 8009ac8:	6378      	str	r0, [r7, #52]	@ 0x34
 8009aca:	e3ad      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ad2:	d103      	bne.n	8009adc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009ad4:	f7fd fe38 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8009ad8:	6378      	str	r0, [r7, #52]	@ 0x34
 8009ada:	e3a5      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009adc:	4b5f      	ldr	r3, [pc, #380]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ae8:	d106      	bne.n	8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8009aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009af0:	d102      	bne.n	8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8009af2:	4b5c      	ldr	r3, [pc, #368]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009af6:	e397      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009af8:	4b58      	ldr	r3, [pc, #352]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0320 	and.w	r3, r3, #32
 8009b00:	2b20      	cmp	r3, #32
 8009b02:	d11b      	bne.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8009b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b06:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009b0a:	d117      	bne.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b0c:	4b53      	ldr	r3, [pc, #332]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d005      	beq.n	8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8009b18:	4b50      	ldr	r3, [pc, #320]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	0e1b      	lsrs	r3, r3, #24
 8009b1e:	f003 030f 	and.w	r3, r3, #15
 8009b22:	e006      	b.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8009b24:	4b4d      	ldr	r3, [pc, #308]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b2a:	041b      	lsls	r3, r3, #16
 8009b2c:	0e1b      	lsrs	r3, r3, #24
 8009b2e:	f003 030f 	and.w	r3, r3, #15
 8009b32:	4a4b      	ldr	r2, [pc, #300]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b3a:	e375      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b40:	e372      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b46:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009b4a:	430b      	orrs	r3, r1
 8009b4c:	d164      	bne.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009b4e:	4b43      	ldr	r3, [pc, #268]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b58:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d120      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009b60:	4b3e      	ldr	r3, [pc, #248]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0320 	and.w	r3, r3, #32
 8009b68:	2b20      	cmp	r3, #32
 8009b6a:	d117      	bne.n	8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d005      	beq.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8009b78:	4b38      	ldr	r3, [pc, #224]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	0e1b      	lsrs	r3, r3, #24
 8009b7e:	f003 030f 	and.w	r3, r3, #15
 8009b82:	e006      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8009b84:	4b35      	ldr	r3, [pc, #212]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b8a:	041b      	lsls	r3, r3, #16
 8009b8c:	0e1b      	lsrs	r3, r3, #24
 8009b8e:	f003 030f 	and.w	r3, r3, #15
 8009b92:	4a33      	ldr	r2, [pc, #204]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b9a:	e345      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ba0:	e342      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bb0:	d112      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bb8:	d10e      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009bba:	4b28      	ldr	r3, [pc, #160]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bc8:	d102      	bne.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8009bca:	23fa      	movs	r3, #250	@ 0xfa
 8009bcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009bce:	e32b      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009bd0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009bd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009bd6:	e327      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009bd8:	4b20      	ldr	r3, [pc, #128]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009be4:	d106      	bne.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8009be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bec:	d102      	bne.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8009bee:	4b1d      	ldr	r3, [pc, #116]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bf2:	e319      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009bf4:	4b19      	ldr	r3, [pc, #100]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bfa:	f003 0302 	and.w	r3, r3, #2
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d107      	bne.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c08:	d103      	bne.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8009c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c10:	e30a      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c16:	e307      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c1c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009c20:	430b      	orrs	r3, r1
 8009c22:	d16b      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009c24:	4b0d      	ldr	r3, [pc, #52]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c2a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009c2e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d127      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c36:	4b09      	ldr	r3, [pc, #36]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 0320 	and.w	r3, r3, #32
 8009c3e:	2b20      	cmp	r3, #32
 8009c40:	d11e      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c42:	4b06      	ldr	r3, [pc, #24]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00c      	beq.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8009c4e:	4b03      	ldr	r3, [pc, #12]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	0e1b      	lsrs	r3, r3, #24
 8009c54:	f003 030f 	and.w	r3, r3, #15
 8009c58:	e00d      	b.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8009c5a:	bf00      	nop
 8009c5c:	46020c00 	.word	0x46020c00
 8009c60:	0802e784 	.word	0x0802e784
 8009c64:	00f42400 	.word	0x00f42400
 8009c68:	4b94      	ldr	r3, [pc, #592]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c6e:	041b      	lsls	r3, r3, #16
 8009c70:	0e1b      	lsrs	r3, r3, #24
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	4a92      	ldr	r2, [pc, #584]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c7e:	e2d3      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c84:	e2d0      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009c86:	4b8d      	ldr	r3, [pc, #564]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c94:	d112      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8009c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c9c:	d10e      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c9e:	4b87      	ldr	r3, [pc, #540]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ca8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cac:	d102      	bne.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8009cae:	23fa      	movs	r3, #250	@ 0xfa
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009cb2:	e2b9      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009cb4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009cb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009cba:	e2b5      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009cbc:	4b7f      	ldr	r3, [pc, #508]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cc8:	d106      	bne.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8009cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ccc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cd0:	d102      	bne.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8009cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd6:	e2a7      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009cd8:	4b78      	ldr	r3, [pc, #480]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cde:	f003 0302 	and.w	r3, r3, #2
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d107      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cec:	d103      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8009cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cf4:	e298      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cfa:	e295      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d00:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009d04:	430b      	orrs	r3, r1
 8009d06:	d147      	bne.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009d08:	4b6c      	ldr	r3, [pc, #432]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d0e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009d12:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d103      	bne.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009d1a:	f7fd fe31 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 8009d1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009d20:	e282      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009d22:	4b66      	ldr	r3, [pc, #408]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d30:	d112      	bne.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8009d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009d38:	d10e      	bne.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d3a:	4b60      	ldr	r3, [pc, #384]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d48:	d102      	bne.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8009d4a:	23fa      	movs	r3, #250	@ 0xfa
 8009d4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d4e:	e26b      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009d50:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d56:	e267      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009d58:	4b58      	ldr	r3, [pc, #352]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d64:	d106      	bne.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8009d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009d6c:	d102      	bne.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8009d6e:	4b55      	ldr	r3, [pc, #340]	@ (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d72:	e259      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009d74:	4b51      	ldr	r3, [pc, #324]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d107      	bne.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8009d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d84:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009d88:	d103      	bne.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8009d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d90:	e24a      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d96:	e247      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d9c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009da0:	430b      	orrs	r3, r1
 8009da2:	d12d      	bne.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009da4:	4b45      	ldr	r3, [pc, #276]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009daa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009dae:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009db0:	4b42      	ldr	r3, [pc, #264]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009db8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dbc:	d105      	bne.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d102      	bne.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8009dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc8:	e22e      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009dd0:	d107      	bne.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fe fc70 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8009de0:	e222      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009de8:	d107      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dea:	f107 0318 	add.w	r3, r7, #24
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe fdbe 	bl	8008970 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df8:	e216      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dfe:	e213      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e04:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009e08:	430b      	orrs	r3, r1
 8009e0a:	d15d      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e12:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009e16:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e1e:	d028      	beq.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8009e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e26:	d845      	bhi.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e2e:	d013      	beq.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8009e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e36:	d83d      	bhi.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d004      	beq.n	8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e44:	d004      	beq.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8009e46:	e035      	b.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009e48:	f7fd fdae 	bl	80079a8 <HAL_RCC_GetPCLK2Freq>
 8009e4c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009e4e:	e1eb      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009e50:	f7fd fc7a 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8009e54:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009e56:	e1e7      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e58:	4b18      	ldr	r3, [pc, #96]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e64:	d102      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8009e66:	4b17      	ldr	r3, [pc, #92]	@ (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009e68:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009e6a:	e1dd      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e70:	e1da      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009e72:	4b12      	ldr	r3, [pc, #72]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0320 	and.w	r3, r3, #32
 8009e7a:	2b20      	cmp	r3, #32
 8009e7c:	d117      	bne.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d005      	beq.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8009e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	0e1b      	lsrs	r3, r3, #24
 8009e90:	f003 030f 	and.w	r3, r3, #15
 8009e94:	e006      	b.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8009e96:	4b09      	ldr	r3, [pc, #36]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009e9c:	041b      	lsls	r3, r3, #16
 8009e9e:	0e1b      	lsrs	r3, r3, #24
 8009ea0:	f003 030f 	and.w	r3, r3, #15
 8009ea4:	4a06      	ldr	r2, [pc, #24]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eaa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009eac:	e1bc      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009eb2:	e1b9      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009eb8:	e1b6      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009eba:	bf00      	nop
 8009ebc:	46020c00 	.word	0x46020c00
 8009ec0:	0802e784 	.word	0x0802e784
 8009ec4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ecc:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	d156      	bne.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009ed4:	4ba5      	ldr	r3, [pc, #660]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009eda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009ede:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ee6:	d028      	beq.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009eee:	d845      	bhi.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ef6:	d013      	beq.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009efe:	d83d      	bhi.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8009f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d004      	beq.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f0c:	d004      	beq.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8009f0e:	e035      	b.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009f10:	f7fd fd36 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 8009f14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f16:	e187      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009f18:	f7fd fc16 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 8009f1c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f1e:	e183      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f20:	4b92      	ldr	r3, [pc, #584]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f2c:	d102      	bne.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8009f2e:	4b90      	ldr	r3, [pc, #576]	@ (800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8009f30:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f32:	e179      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009f34:	2300      	movs	r3, #0
 8009f36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f38:	e176      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009f3a:	4b8c      	ldr	r3, [pc, #560]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0320 	and.w	r3, r3, #32
 8009f42:	2b20      	cmp	r3, #32
 8009f44:	d117      	bne.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009f46:	4b89      	ldr	r3, [pc, #548]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d005      	beq.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8009f52:	4b86      	ldr	r3, [pc, #536]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	0e1b      	lsrs	r3, r3, #24
 8009f58:	f003 030f 	and.w	r3, r3, #15
 8009f5c:	e006      	b.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8009f5e:	4b83      	ldr	r3, [pc, #524]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009f64:	041b      	lsls	r3, r3, #16
 8009f66:	0e1b      	lsrs	r3, r3, #24
 8009f68:	f003 030f 	and.w	r3, r3, #15
 8009f6c:	4a81      	ldr	r2, [pc, #516]	@ (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8009f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f72:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f74:	e158      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009f76:	2300      	movs	r3, #0
 8009f78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f7a:	e155      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f80:	e152      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009f82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f86:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009f8a:	430b      	orrs	r3, r1
 8009f8c:	d177      	bne.n	800a07e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009f8e:	4b77      	ldr	r3, [pc, #476]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f94:	f003 0318 	and.w	r3, r3, #24
 8009f98:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9c:	2b18      	cmp	r3, #24
 8009f9e:	d86b      	bhi.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8009fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8009fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa6:	bf00      	nop
 8009fa8:	0800a00d 	.word	0x0800a00d
 8009fac:	0800a079 	.word	0x0800a079
 8009fb0:	0800a079 	.word	0x0800a079
 8009fb4:	0800a079 	.word	0x0800a079
 8009fb8:	0800a079 	.word	0x0800a079
 8009fbc:	0800a079 	.word	0x0800a079
 8009fc0:	0800a079 	.word	0x0800a079
 8009fc4:	0800a079 	.word	0x0800a079
 8009fc8:	0800a015 	.word	0x0800a015
 8009fcc:	0800a079 	.word	0x0800a079
 8009fd0:	0800a079 	.word	0x0800a079
 8009fd4:	0800a079 	.word	0x0800a079
 8009fd8:	0800a079 	.word	0x0800a079
 8009fdc:	0800a079 	.word	0x0800a079
 8009fe0:	0800a079 	.word	0x0800a079
 8009fe4:	0800a079 	.word	0x0800a079
 8009fe8:	0800a01d 	.word	0x0800a01d
 8009fec:	0800a079 	.word	0x0800a079
 8009ff0:	0800a079 	.word	0x0800a079
 8009ff4:	0800a079 	.word	0x0800a079
 8009ff8:	0800a079 	.word	0x0800a079
 8009ffc:	0800a079 	.word	0x0800a079
 800a000:	0800a079 	.word	0x0800a079
 800a004:	0800a079 	.word	0x0800a079
 800a008:	0800a037 	.word	0x0800a037
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800a00c:	f7fd fce0 	bl	80079d0 <HAL_RCC_GetPCLK3Freq>
 800a010:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a012:	e109      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a014:	f7fd fb98 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 800a018:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a01a:	e105      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a01c:	4b53      	ldr	r3, [pc, #332]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a028:	d102      	bne.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800a02a:	4b51      	ldr	r3, [pc, #324]	@ (800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800a02c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a02e:	e0fb      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a030:	2300      	movs	r3, #0
 800a032:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a034:	e0f8      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a036:	4b4d      	ldr	r3, [pc, #308]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 0320 	and.w	r3, r3, #32
 800a03e:	2b20      	cmp	r3, #32
 800a040:	d117      	bne.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a042:	4b4a      	ldr	r3, [pc, #296]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d005      	beq.n	800a05a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800a04e:	4b47      	ldr	r3, [pc, #284]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	0e1b      	lsrs	r3, r3, #24
 800a054:	f003 030f 	and.w	r3, r3, #15
 800a058:	e006      	b.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800a05a:	4b44      	ldr	r3, [pc, #272]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a05c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a060:	041b      	lsls	r3, r3, #16
 800a062:	0e1b      	lsrs	r3, r3, #24
 800a064:	f003 030f 	and.w	r3, r3, #15
 800a068:	4a42      	ldr	r2, [pc, #264]	@ (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a06e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a070:	e0da      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a072:	2300      	movs	r3, #0
 800a074:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a076:	e0d7      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a078:	2300      	movs	r3, #0
 800a07a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a07c:	e0d4      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800a07e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a082:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800a086:	430b      	orrs	r3, r1
 800a088:	d155      	bne.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a08a:	4b38      	ldr	r3, [pc, #224]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a08c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a090:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a094:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a098:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a09c:	d013      	beq.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800a09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a0a4:	d844      	bhi.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0ac:	d013      	beq.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0b4:	d83c      	bhi.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d014      	beq.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0c2:	d014      	beq.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800a0c4:	e034      	b.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0c6:	f107 0318 	add.w	r3, r7, #24
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe fc50 	bl	8008970 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0d4:	e0a8      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe faee 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0e4:	e0a0      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a0e6:	f7fd fb2f 	bl	8007748 <HAL_RCC_GetSysClockFreq>
 800a0ea:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a0ec:	e09c      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a0ee:	4b1f      	ldr	r3, [pc, #124]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 0320 	and.w	r3, r3, #32
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	d117      	bne.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a0fa:	4b1c      	ldr	r3, [pc, #112]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d005      	beq.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800a106:	4b19      	ldr	r3, [pc, #100]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	0e1b      	lsrs	r3, r3, #24
 800a10c:	f003 030f 	and.w	r3, r3, #15
 800a110:	e006      	b.n	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800a112:	4b16      	ldr	r3, [pc, #88]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a118:	041b      	lsls	r3, r3, #16
 800a11a:	0e1b      	lsrs	r3, r3, #24
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	4a14      	ldr	r2, [pc, #80]	@ (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a126:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a128:	e07e      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a12e:	e07b      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a130:	2300      	movs	r3, #0
 800a132:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a134:	e078      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800a136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a13a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800a13e:	430b      	orrs	r3, r1
 800a140:	d138      	bne.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800a142:	4b0a      	ldr	r3, [pc, #40]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a14c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800a14e:	4b07      	ldr	r3, [pc, #28]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a154:	f003 0302 	and.w	r3, r3, #2
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d10d      	bne.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800a15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10a      	bne.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800a162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a166:	637b      	str	r3, [r7, #52]	@ 0x34
 800a168:	e05e      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800a16a:	bf00      	nop
 800a16c:	46020c00 	.word	0x46020c00
 800a170:	00f42400 	.word	0x00f42400
 800a174:	0802e784 	.word	0x0802e784
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a178:	4b2e      	ldr	r3, [pc, #184]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a17a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a17e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a182:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a186:	d112      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 800a188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a18e:	d10e      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a190:	4b28      	ldr	r3, [pc, #160]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a19a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a19e:	d102      	bne.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800a1a0:	23fa      	movs	r3, #250	@ 0xfa
 800a1a2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a1a4:	e040      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800a1a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a1aa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a1ac:	e03c      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1b2:	e039      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a1b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1b8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a1bc:	430b      	orrs	r3, r1
 800a1be:	d131      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a1c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a1c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a1c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a1ca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a1cc:	4b19      	ldr	r3, [pc, #100]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1d8:	d105      	bne.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d102      	bne.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800a1e0:	4b15      	ldr	r3, [pc, #84]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800a1e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1e4:	e020      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a1e6:	4b13      	ldr	r3, [pc, #76]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1f2:	d106      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1fa:	d102      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a1fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800a1fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a200:	e012      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a202:	4b0c      	ldr	r3, [pc, #48]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a20a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a20e:	d106      	bne.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800a210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a216:	d102      	bne.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 800a218:	4b09      	ldr	r3, [pc, #36]	@ (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800a21a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a21c:	e004      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a21e:	2300      	movs	r3, #0
 800a220:	637b      	str	r3, [r7, #52]	@ 0x34
 800a222:	e001      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800a228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3738      	adds	r7, #56	@ 0x38
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	46020c00 	.word	0x46020c00
 800a238:	02dc6c00 	.word	0x02dc6c00
 800a23c:	016e3600 	.word	0x016e3600
 800a240:	00f42400 	.word	0x00f42400

0800a244 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a24c:	4b47      	ldr	r3, [pc, #284]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a46      	ldr	r2, [pc, #280]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a252:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a256:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a258:	f7f7 fdde 	bl	8001e18 <HAL_GetTick>
 800a25c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a25e:	e008      	b.n	800a272 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a260:	f7f7 fdda 	bl	8001e18 <HAL_GetTick>
 800a264:	4602      	mov	r2, r0
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d901      	bls.n	800a272 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e077      	b.n	800a362 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a272:	4b3e      	ldr	r3, [pc, #248]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1f0      	bne.n	800a260 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a27e:	4b3b      	ldr	r3, [pc, #236]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a282:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a286:	f023 0303 	bic.w	r3, r3, #3
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	6811      	ldr	r1, [r2, #0]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	6852      	ldr	r2, [r2, #4]
 800a292:	3a01      	subs	r2, #1
 800a294:	0212      	lsls	r2, r2, #8
 800a296:	430a      	orrs	r2, r1
 800a298:	4934      	ldr	r1, [pc, #208]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a29e:	4b33      	ldr	r3, [pc, #204]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a2a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2a2:	4b33      	ldr	r3, [pc, #204]	@ (800a370 <RCCEx_PLL2_Config+0x12c>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	6892      	ldr	r2, [r2, #8]
 800a2aa:	3a01      	subs	r2, #1
 800a2ac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	68d2      	ldr	r2, [r2, #12]
 800a2b4:	3a01      	subs	r2, #1
 800a2b6:	0252      	lsls	r2, r2, #9
 800a2b8:	b292      	uxth	r2, r2
 800a2ba:	4311      	orrs	r1, r2
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	6912      	ldr	r2, [r2, #16]
 800a2c0:	3a01      	subs	r2, #1
 800a2c2:	0412      	lsls	r2, r2, #16
 800a2c4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a2c8:	4311      	orrs	r1, r2
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	6952      	ldr	r2, [r2, #20]
 800a2ce:	3a01      	subs	r2, #1
 800a2d0:	0612      	lsls	r2, r2, #24
 800a2d2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	4924      	ldr	r1, [pc, #144]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a2de:	4b23      	ldr	r3, [pc, #140]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e2:	f023 020c 	bic.w	r2, r3, #12
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	4920      	ldr	r1, [pc, #128]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a2f0:	4b1e      	ldr	r3, [pc, #120]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a2f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a1b      	ldr	r3, [r3, #32]
 800a2f8:	491c      	ldr	r1, [pc, #112]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a2fe:	4b1b      	ldr	r3, [pc, #108]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a302:	4a1a      	ldr	r2, [pc, #104]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a304:	f023 0310 	bic.w	r3, r3, #16
 800a308:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a30a:	4b18      	ldr	r3, [pc, #96]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a30c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a30e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a312:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	69d2      	ldr	r2, [r2, #28]
 800a31a:	00d2      	lsls	r2, r2, #3
 800a31c:	4913      	ldr	r1, [pc, #76]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a322:	4b12      	ldr	r3, [pc, #72]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a326:	4a11      	ldr	r2, [pc, #68]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a328:	f043 0310 	orr.w	r3, r3, #16
 800a32c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a32e:	4b0f      	ldr	r3, [pc, #60]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a0e      	ldr	r2, [pc, #56]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a334:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a338:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a33a:	f7f7 fd6d 	bl	8001e18 <HAL_GetTick>
 800a33e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a340:	e008      	b.n	800a354 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a342:	f7f7 fd69 	bl	8001e18 <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d901      	bls.n	800a354 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e006      	b.n	800a362 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a354:	4b05      	ldr	r3, [pc, #20]	@ (800a36c <RCCEx_PLL2_Config+0x128>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d0f0      	beq.n	800a342 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a360:	2300      	movs	r3, #0

}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	46020c00 	.word	0x46020c00
 800a370:	80800000 	.word	0x80800000

0800a374 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a37c:	4b47      	ldr	r3, [pc, #284]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a46      	ldr	r2, [pc, #280]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a386:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a388:	f7f7 fd46 	bl	8001e18 <HAL_GetTick>
 800a38c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a38e:	e008      	b.n	800a3a2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a390:	f7f7 fd42 	bl	8001e18 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d901      	bls.n	800a3a2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e077      	b.n	800a492 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3a2:	4b3e      	ldr	r3, [pc, #248]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1f0      	bne.n	800a390 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a3ae:	4b3b      	ldr	r3, [pc, #236]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	6811      	ldr	r1, [r2, #0]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6852      	ldr	r2, [r2, #4]
 800a3c2:	3a01      	subs	r2, #1
 800a3c4:	0212      	lsls	r2, r2, #8
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	4934      	ldr	r1, [pc, #208]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	630b      	str	r3, [r1, #48]	@ 0x30
 800a3ce:	4b33      	ldr	r3, [pc, #204]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a3d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3d2:	4b33      	ldr	r3, [pc, #204]	@ (800a4a0 <RCCEx_PLL3_Config+0x12c>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	6892      	ldr	r2, [r2, #8]
 800a3da:	3a01      	subs	r2, #1
 800a3dc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	68d2      	ldr	r2, [r2, #12]
 800a3e4:	3a01      	subs	r2, #1
 800a3e6:	0252      	lsls	r2, r2, #9
 800a3e8:	b292      	uxth	r2, r2
 800a3ea:	4311      	orrs	r1, r2
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	6912      	ldr	r2, [r2, #16]
 800a3f0:	3a01      	subs	r2, #1
 800a3f2:	0412      	lsls	r2, r2, #16
 800a3f4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a3f8:	4311      	orrs	r1, r2
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	6952      	ldr	r2, [r2, #20]
 800a3fe:	3a01      	subs	r2, #1
 800a400:	0612      	lsls	r2, r2, #24
 800a402:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a406:	430a      	orrs	r2, r1
 800a408:	4924      	ldr	r1, [pc, #144]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a40a:	4313      	orrs	r3, r2
 800a40c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a40e:	4b23      	ldr	r3, [pc, #140]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a412:	f023 020c 	bic.w	r2, r3, #12
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	4920      	ldr	r1, [pc, #128]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a420:	4b1e      	ldr	r3, [pc, #120]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a1b      	ldr	r3, [r3, #32]
 800a428:	491c      	ldr	r1, [pc, #112]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a42a:	4313      	orrs	r3, r2
 800a42c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a42e:	4b1b      	ldr	r3, [pc, #108]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a432:	4a1a      	ldr	r2, [pc, #104]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a434:	f023 0310 	bic.w	r3, r3, #16
 800a438:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a43a:	4b18      	ldr	r3, [pc, #96]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a43c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a43e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a442:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	69d2      	ldr	r2, [r2, #28]
 800a44a:	00d2      	lsls	r2, r2, #3
 800a44c:	4913      	ldr	r1, [pc, #76]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a452:	4b12      	ldr	r3, [pc, #72]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a456:	4a11      	ldr	r2, [pc, #68]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a458:	f043 0310 	orr.w	r3, r3, #16
 800a45c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a45e:	4b0f      	ldr	r3, [pc, #60]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a0e      	ldr	r2, [pc, #56]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a468:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a46a:	f7f7 fcd5 	bl	8001e18 <HAL_GetTick>
 800a46e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a470:	e008      	b.n	800a484 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a472:	f7f7 fcd1 	bl	8001e18 <HAL_GetTick>
 800a476:	4602      	mov	r2, r0
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d901      	bls.n	800a484 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e006      	b.n	800a492 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a484:	4b05      	ldr	r3, [pc, #20]	@ (800a49c <RCCEx_PLL3_Config+0x128>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0f0      	beq.n	800a472 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	46020c00 	.word	0x46020c00
 800a4a0:	80800000 	.word	0x80800000

0800a4a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e049      	b.n	800a54a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d106      	bne.n	800a4d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7f7 fb5a 	bl	8001b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	f000 fa4e 	bl	800a984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b01      	cmp	r3, #1
 800a566:	d001      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e072      	b.n	800a652 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68da      	ldr	r2, [r3, #12]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f042 0201 	orr.w	r2, r2, #1
 800a582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a35      	ldr	r2, [pc, #212]	@ (800a660 <HAL_TIM_Base_Start_IT+0x10c>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d040      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a34      	ldr	r2, [pc, #208]	@ (800a664 <HAL_TIM_Base_Start_IT+0x110>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d03b      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5a0:	d036      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5aa:	d031      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a2d      	ldr	r2, [pc, #180]	@ (800a668 <HAL_TIM_Base_Start_IT+0x114>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d02c      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a2c      	ldr	r2, [pc, #176]	@ (800a66c <HAL_TIM_Base_Start_IT+0x118>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d027      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a2a      	ldr	r2, [pc, #168]	@ (800a670 <HAL_TIM_Base_Start_IT+0x11c>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d022      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a29      	ldr	r2, [pc, #164]	@ (800a674 <HAL_TIM_Base_Start_IT+0x120>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d01d      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a27      	ldr	r2, [pc, #156]	@ (800a678 <HAL_TIM_Base_Start_IT+0x124>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d018      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a26      	ldr	r2, [pc, #152]	@ (800a67c <HAL_TIM_Base_Start_IT+0x128>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d013      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a24      	ldr	r2, [pc, #144]	@ (800a680 <HAL_TIM_Base_Start_IT+0x12c>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d00e      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a23      	ldr	r2, [pc, #140]	@ (800a684 <HAL_TIM_Base_Start_IT+0x130>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d009      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a21      	ldr	r2, [pc, #132]	@ (800a688 <HAL_TIM_Base_Start_IT+0x134>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d004      	beq.n	800a610 <HAL_TIM_Base_Start_IT+0xbc>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a20      	ldr	r2, [pc, #128]	@ (800a68c <HAL_TIM_Base_Start_IT+0x138>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d115      	bne.n	800a63c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689a      	ldr	r2, [r3, #8]
 800a616:	4b1e      	ldr	r3, [pc, #120]	@ (800a690 <HAL_TIM_Base_Start_IT+0x13c>)
 800a618:	4013      	ands	r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b06      	cmp	r3, #6
 800a620:	d015      	beq.n	800a64e <HAL_TIM_Base_Start_IT+0xfa>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a628:	d011      	beq.n	800a64e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f042 0201 	orr.w	r2, r2, #1
 800a638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a63a:	e008      	b.n	800a64e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f042 0201 	orr.w	r2, r2, #1
 800a64a:	601a      	str	r2, [r3, #0]
 800a64c:	e000      	b.n	800a650 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a64e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	40012c00 	.word	0x40012c00
 800a664:	50012c00 	.word	0x50012c00
 800a668:	40000400 	.word	0x40000400
 800a66c:	50000400 	.word	0x50000400
 800a670:	40000800 	.word	0x40000800
 800a674:	50000800 	.word	0x50000800
 800a678:	40000c00 	.word	0x40000c00
 800a67c:	50000c00 	.word	0x50000c00
 800a680:	40013400 	.word	0x40013400
 800a684:	50013400 	.word	0x50013400
 800a688:	40014000 	.word	0x40014000
 800a68c:	50014000 	.word	0x50014000
 800a690:	00010007 	.word	0x00010007

0800a694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	f003 0302 	and.w	r3, r3, #2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d020      	beq.n	800a6f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f003 0302 	and.w	r3, r3, #2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01b      	beq.n	800a6f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f06f 0202 	mvn.w	r2, #2
 800a6c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	f003 0303 	and.w	r3, r3, #3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f931 	bl	800a946 <HAL_TIM_IC_CaptureCallback>
 800a6e4:	e005      	b.n	800a6f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f923 	bl	800a932 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f934 	bl	800a95a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f003 0304 	and.w	r3, r3, #4
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d020      	beq.n	800a744 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f003 0304 	and.w	r3, r3, #4
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d01b      	beq.n	800a744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f06f 0204 	mvn.w	r2, #4
 800a714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2202      	movs	r2, #2
 800a71a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f90b 	bl	800a946 <HAL_TIM_IC_CaptureCallback>
 800a730:	e005      	b.n	800a73e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f8fd 	bl	800a932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f90e 	bl	800a95a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	f003 0308 	and.w	r3, r3, #8
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d020      	beq.n	800a790 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f003 0308 	and.w	r3, r3, #8
 800a754:	2b00      	cmp	r3, #0
 800a756:	d01b      	beq.n	800a790 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f06f 0208 	mvn.w	r2, #8
 800a760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2204      	movs	r2, #4
 800a766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	f003 0303 	and.w	r3, r3, #3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f8e5 	bl	800a946 <HAL_TIM_IC_CaptureCallback>
 800a77c:	e005      	b.n	800a78a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f8d7 	bl	800a932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f8e8 	bl	800a95a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f003 0310 	and.w	r3, r3, #16
 800a796:	2b00      	cmp	r3, #0
 800a798:	d020      	beq.n	800a7dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f003 0310 	and.w	r3, r3, #16
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d01b      	beq.n	800a7dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f06f 0210 	mvn.w	r2, #16
 800a7ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2208      	movs	r2, #8
 800a7b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d003      	beq.n	800a7ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f8bf 	bl	800a946 <HAL_TIM_IC_CaptureCallback>
 800a7c8:	e005      	b.n	800a7d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f8b1 	bl	800a932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f8c2 	bl	800a95a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00c      	beq.n	800a800 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d007      	beq.n	800a800 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f06f 0201 	mvn.w	r2, #1
 800a7f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7f6 fe64 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a806:	2b00      	cmp	r3, #0
 800a808:	d104      	bne.n	800a814 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00c      	beq.n	800a82e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d007      	beq.n	800a82e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fa77 	bl	800ad1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00c      	beq.n	800a852 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d007      	beq.n	800a852 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a84a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fa6f 	bl	800ad30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00c      	beq.n	800a876 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a862:	2b00      	cmp	r3, #0
 800a864:	d007      	beq.n	800a876 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a86e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f87c 	bl	800a96e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	f003 0320 	and.w	r3, r3, #32
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00c      	beq.n	800a89a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f003 0320 	and.w	r3, r3, #32
 800a886:	2b00      	cmp	r3, #0
 800a888:	d007      	beq.n	800a89a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f06f 0220 	mvn.w	r2, #32
 800a892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fa37 	bl	800ad08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00c      	beq.n	800a8be <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d007      	beq.n	800a8be <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a8b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fa43 	bl	800ad44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00c      	beq.n	800a8e2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d007      	beq.n	800a8e2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a8da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fa3b 	bl	800ad58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00c      	beq.n	800a906 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d007      	beq.n	800a906 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a8fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fa33 	bl	800ad6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00c      	beq.n	800a92a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d007      	beq.n	800a92a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fa2b 	bl	800ad80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a92a:	bf00      	nop
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a946:	b480      	push	{r7}
 800a948:	b083      	sub	sp, #12
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a94e:	bf00      	nop
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b083      	sub	sp, #12
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a962:	bf00      	nop
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a96e:	b480      	push	{r7}
 800a970:	b083      	sub	sp, #12
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
	...

0800a984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a6b      	ldr	r2, [pc, #428]	@ (800ab44 <TIM_Base_SetConfig+0x1c0>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d02b      	beq.n	800a9f4 <TIM_Base_SetConfig+0x70>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a6a      	ldr	r2, [pc, #424]	@ (800ab48 <TIM_Base_SetConfig+0x1c4>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d027      	beq.n	800a9f4 <TIM_Base_SetConfig+0x70>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9aa:	d023      	beq.n	800a9f4 <TIM_Base_SetConfig+0x70>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9b2:	d01f      	beq.n	800a9f4 <TIM_Base_SetConfig+0x70>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a65      	ldr	r2, [pc, #404]	@ (800ab4c <TIM_Base_SetConfig+0x1c8>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d01b      	beq.n	800a9f4 <TIM_Base_SetConfig+0x70>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a64      	ldr	r2, [pc, #400]	@ (800ab50 <TIM_Base_SetConfig+0x1cc>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d017      	beq.n	800a9f4 <TIM_Base_SetConfig+0x70>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a63      	ldr	r2, [pc, #396]	@ (800ab54 <TIM_Base_SetConfig+0x1d0>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d013      	beq.n	800a9f4 <TIM_Base_SetConfig+0x70>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a62      	ldr	r2, [pc, #392]	@ (800ab58 <TIM_Base_SetConfig+0x1d4>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d00f      	beq.n	800a9f4 <TIM_Base_SetConfig+0x70>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a61      	ldr	r2, [pc, #388]	@ (800ab5c <TIM_Base_SetConfig+0x1d8>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d00b      	beq.n	800a9f4 <TIM_Base_SetConfig+0x70>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a60      	ldr	r2, [pc, #384]	@ (800ab60 <TIM_Base_SetConfig+0x1dc>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d007      	beq.n	800a9f4 <TIM_Base_SetConfig+0x70>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a5f      	ldr	r2, [pc, #380]	@ (800ab64 <TIM_Base_SetConfig+0x1e0>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d003      	beq.n	800a9f4 <TIM_Base_SetConfig+0x70>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a5e      	ldr	r2, [pc, #376]	@ (800ab68 <TIM_Base_SetConfig+0x1e4>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d108      	bne.n	800aa06 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a4e      	ldr	r2, [pc, #312]	@ (800ab44 <TIM_Base_SetConfig+0x1c0>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d043      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a4d      	ldr	r2, [pc, #308]	@ (800ab48 <TIM_Base_SetConfig+0x1c4>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d03f      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa1c:	d03b      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa24:	d037      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a48      	ldr	r2, [pc, #288]	@ (800ab4c <TIM_Base_SetConfig+0x1c8>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d033      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a47      	ldr	r2, [pc, #284]	@ (800ab50 <TIM_Base_SetConfig+0x1cc>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d02f      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a46      	ldr	r2, [pc, #280]	@ (800ab54 <TIM_Base_SetConfig+0x1d0>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d02b      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a45      	ldr	r2, [pc, #276]	@ (800ab58 <TIM_Base_SetConfig+0x1d4>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d027      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a44      	ldr	r2, [pc, #272]	@ (800ab5c <TIM_Base_SetConfig+0x1d8>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d023      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a43      	ldr	r2, [pc, #268]	@ (800ab60 <TIM_Base_SetConfig+0x1dc>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d01f      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a42      	ldr	r2, [pc, #264]	@ (800ab64 <TIM_Base_SetConfig+0x1e0>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d01b      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a41      	ldr	r2, [pc, #260]	@ (800ab68 <TIM_Base_SetConfig+0x1e4>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d017      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a40      	ldr	r2, [pc, #256]	@ (800ab6c <TIM_Base_SetConfig+0x1e8>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d013      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a3f      	ldr	r2, [pc, #252]	@ (800ab70 <TIM_Base_SetConfig+0x1ec>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d00f      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a3e      	ldr	r2, [pc, #248]	@ (800ab74 <TIM_Base_SetConfig+0x1f0>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d00b      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a3d      	ldr	r2, [pc, #244]	@ (800ab78 <TIM_Base_SetConfig+0x1f4>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d007      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a3c      	ldr	r2, [pc, #240]	@ (800ab7c <TIM_Base_SetConfig+0x1f8>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d003      	beq.n	800aa96 <TIM_Base_SetConfig+0x112>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a3b      	ldr	r2, [pc, #236]	@ (800ab80 <TIM_Base_SetConfig+0x1fc>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d108      	bne.n	800aaa8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	689a      	ldr	r2, [r3, #8]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a1e      	ldr	r2, [pc, #120]	@ (800ab44 <TIM_Base_SetConfig+0x1c0>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d023      	beq.n	800ab16 <TIM_Base_SetConfig+0x192>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a1d      	ldr	r2, [pc, #116]	@ (800ab48 <TIM_Base_SetConfig+0x1c4>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d01f      	beq.n	800ab16 <TIM_Base_SetConfig+0x192>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a22      	ldr	r2, [pc, #136]	@ (800ab64 <TIM_Base_SetConfig+0x1e0>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d01b      	beq.n	800ab16 <TIM_Base_SetConfig+0x192>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a21      	ldr	r2, [pc, #132]	@ (800ab68 <TIM_Base_SetConfig+0x1e4>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d017      	beq.n	800ab16 <TIM_Base_SetConfig+0x192>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a20      	ldr	r2, [pc, #128]	@ (800ab6c <TIM_Base_SetConfig+0x1e8>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d013      	beq.n	800ab16 <TIM_Base_SetConfig+0x192>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a1f      	ldr	r2, [pc, #124]	@ (800ab70 <TIM_Base_SetConfig+0x1ec>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d00f      	beq.n	800ab16 <TIM_Base_SetConfig+0x192>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a1e      	ldr	r2, [pc, #120]	@ (800ab74 <TIM_Base_SetConfig+0x1f0>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d00b      	beq.n	800ab16 <TIM_Base_SetConfig+0x192>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a1d      	ldr	r2, [pc, #116]	@ (800ab78 <TIM_Base_SetConfig+0x1f4>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d007      	beq.n	800ab16 <TIM_Base_SetConfig+0x192>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a1c      	ldr	r2, [pc, #112]	@ (800ab7c <TIM_Base_SetConfig+0x1f8>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d003      	beq.n	800ab16 <TIM_Base_SetConfig+0x192>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a1b      	ldr	r2, [pc, #108]	@ (800ab80 <TIM_Base_SetConfig+0x1fc>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d103      	bne.n	800ab1e <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	691a      	ldr	r2, [r3, #16]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f043 0204 	orr.w	r2, r3, #4
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	601a      	str	r2, [r3, #0]
}
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	40012c00 	.word	0x40012c00
 800ab48:	50012c00 	.word	0x50012c00
 800ab4c:	40000400 	.word	0x40000400
 800ab50:	50000400 	.word	0x50000400
 800ab54:	40000800 	.word	0x40000800
 800ab58:	50000800 	.word	0x50000800
 800ab5c:	40000c00 	.word	0x40000c00
 800ab60:	50000c00 	.word	0x50000c00
 800ab64:	40013400 	.word	0x40013400
 800ab68:	50013400 	.word	0x50013400
 800ab6c:	40014000 	.word	0x40014000
 800ab70:	50014000 	.word	0x50014000
 800ab74:	40014400 	.word	0x40014400
 800ab78:	50014400 	.word	0x50014400
 800ab7c:	40014800 	.word	0x40014800
 800ab80:	50014800 	.word	0x50014800

0800ab84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d101      	bne.n	800ab9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab98:	2302      	movs	r3, #2
 800ab9a:	e097      	b.n	800accc <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a45      	ldr	r2, [pc, #276]	@ (800acd8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d00e      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a44      	ldr	r2, [pc, #272]	@ (800acdc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d009      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a42      	ldr	r2, [pc, #264]	@ (800ace0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d004      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a41      	ldr	r2, [pc, #260]	@ (800ace4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d108      	bne.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800abea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800abfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a2f      	ldr	r2, [pc, #188]	@ (800acd8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d040      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a2e      	ldr	r2, [pc, #184]	@ (800acdc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d03b      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac30:	d036      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac3a:	d031      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a29      	ldr	r2, [pc, #164]	@ (800ace8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d02c      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a28      	ldr	r2, [pc, #160]	@ (800acec <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d027      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a26      	ldr	r2, [pc, #152]	@ (800acf0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d022      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a25      	ldr	r2, [pc, #148]	@ (800acf4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d01d      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a23      	ldr	r2, [pc, #140]	@ (800acf8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d018      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a22      	ldr	r2, [pc, #136]	@ (800acfc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d013      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a18      	ldr	r2, [pc, #96]	@ (800ace0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d00e      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a17      	ldr	r2, [pc, #92]	@ (800ace4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d009      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a1b      	ldr	r2, [pc, #108]	@ (800ad00 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d004      	beq.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a1a      	ldr	r2, [pc, #104]	@ (800ad04 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d10c      	bne.n	800acba <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aca6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	4313      	orrs	r3, r2
 800acb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	40012c00 	.word	0x40012c00
 800acdc:	50012c00 	.word	0x50012c00
 800ace0:	40013400 	.word	0x40013400
 800ace4:	50013400 	.word	0x50013400
 800ace8:	40000400 	.word	0x40000400
 800acec:	50000400 	.word	0x50000400
 800acf0:	40000800 	.word	0x40000800
 800acf4:	50000800 	.word	0x50000800
 800acf8:	40000c00 	.word	0x40000c00
 800acfc:	50000c00 	.word	0x50000c00
 800ad00:	40014000 	.word	0x40014000
 800ad04:	50014000 	.word	0x50014000

0800ad08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d101      	bne.n	800ada6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e042      	b.n	800ae2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adac:	2b00      	cmp	r3, #0
 800adae:	d106      	bne.n	800adbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7f6 ff57 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2224      	movs	r2, #36	@ 0x24
 800adc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f022 0201 	bic.w	r2, r2, #1
 800add4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adda:	2b00      	cmp	r3, #0
 800addc:	d002      	beq.n	800ade4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fa68 	bl	800b2b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f8c3 	bl	800af70 <UART_SetConfig>
 800adea:	4603      	mov	r3, r0
 800adec:	2b01      	cmp	r3, #1
 800adee:	d101      	bne.n	800adf4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e01b      	b.n	800ae2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689a      	ldr	r2, [r3, #8]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ae12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f042 0201 	orr.w	r2, r2, #1
 800ae22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fae7 	bl	800b3f8 <UART_CheckIdleState>
 800ae2a:	4603      	mov	r3, r0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b08a      	sub	sp, #40	@ 0x28
 800ae38:	af02      	add	r7, sp, #8
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	603b      	str	r3, [r7, #0]
 800ae40:	4613      	mov	r3, r2
 800ae42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae4a:	2b20      	cmp	r3, #32
 800ae4c:	f040 808b 	bne.w	800af66 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d002      	beq.n	800ae5c <HAL_UART_Transmit+0x28>
 800ae56:	88fb      	ldrh	r3, [r7, #6]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e083      	b.n	800af68 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae6a:	2b80      	cmp	r3, #128	@ 0x80
 800ae6c:	d107      	bne.n	800ae7e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	689a      	ldr	r2, [r3, #8]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ae7c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2221      	movs	r2, #33	@ 0x21
 800ae8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae8e:	f7f6 ffc3 	bl	8001e18 <HAL_GetTick>
 800ae92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	88fa      	ldrh	r2, [r7, #6]
 800ae98:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	88fa      	ldrh	r2, [r7, #6]
 800aea0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeac:	d108      	bne.n	800aec0 <HAL_UART_Transmit+0x8c>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d104      	bne.n	800aec0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	61bb      	str	r3, [r7, #24]
 800aebe:	e003      	b.n	800aec8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aec4:	2300      	movs	r3, #0
 800aec6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aec8:	e030      	b.n	800af2c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	2200      	movs	r2, #0
 800aed2:	2180      	movs	r1, #128	@ 0x80
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f000 fb39 	bl	800b54c <UART_WaitOnFlagUntilTimeout>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d005      	beq.n	800aeec <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2220      	movs	r2, #32
 800aee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e03d      	b.n	800af68 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10b      	bne.n	800af0a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	461a      	mov	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af00:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	3302      	adds	r3, #2
 800af06:	61bb      	str	r3, [r7, #24]
 800af08:	e007      	b.n	800af1a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	781a      	ldrb	r2, [r3, #0]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	3301      	adds	r3, #1
 800af18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af20:	b29b      	uxth	r3, r3
 800af22:	3b01      	subs	r3, #1
 800af24:	b29a      	uxth	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af32:	b29b      	uxth	r3, r3
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1c8      	bne.n	800aeca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	2200      	movs	r2, #0
 800af40:	2140      	movs	r1, #64	@ 0x40
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f000 fb02 	bl	800b54c <UART_WaitOnFlagUntilTimeout>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d005      	beq.n	800af5a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2220      	movs	r2, #32
 800af52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800af56:	2303      	movs	r3, #3
 800af58:	e006      	b.n	800af68 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2220      	movs	r2, #32
 800af5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	e000      	b.n	800af68 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800af66:	2302      	movs	r3, #2
  }
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3720      	adds	r7, #32
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af74:	b094      	sub	sp, #80	@ 0x50
 800af76:	af00      	add	r7, sp, #0
 800af78:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800af80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	4b7e      	ldr	r3, [pc, #504]	@ (800b180 <UART_SetConfig+0x210>)
 800af86:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8a:	689a      	ldr	r2, [r3, #8]
 800af8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	431a      	orrs	r2, r3
 800af92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	431a      	orrs	r2, r3
 800af98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9a:	69db      	ldr	r3, [r3, #28]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4977      	ldr	r1, [pc, #476]	@ (800b184 <UART_SetConfig+0x214>)
 800afa8:	4019      	ands	r1, r3
 800afaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afb0:	430b      	orrs	r3, r1
 800afb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800afbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc0:	68d9      	ldr	r1, [r3, #12]
 800afc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	ea40 0301 	orr.w	r3, r0, r1
 800afca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800afd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	4b6a      	ldr	r3, [pc, #424]	@ (800b180 <UART_SetConfig+0x210>)
 800afd8:	429a      	cmp	r2, r3
 800afda:	d009      	beq.n	800aff0 <UART_SetConfig+0x80>
 800afdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	4b69      	ldr	r3, [pc, #420]	@ (800b188 <UART_SetConfig+0x218>)
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d004      	beq.n	800aff0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800afe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe8:	6a1a      	ldr	r2, [r3, #32]
 800afea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afec:	4313      	orrs	r3, r2
 800afee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800affa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800affe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b004:	430b      	orrs	r3, r1
 800b006:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00e:	f023 000f 	bic.w	r0, r3, #15
 800b012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b014:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	ea40 0301 	orr.w	r3, r0, r1
 800b01e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	4b59      	ldr	r3, [pc, #356]	@ (800b18c <UART_SetConfig+0x21c>)
 800b026:	429a      	cmp	r2, r3
 800b028:	d102      	bne.n	800b030 <UART_SetConfig+0xc0>
 800b02a:	2301      	movs	r3, #1
 800b02c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b02e:	e029      	b.n	800b084 <UART_SetConfig+0x114>
 800b030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	4b56      	ldr	r3, [pc, #344]	@ (800b190 <UART_SetConfig+0x220>)
 800b036:	429a      	cmp	r2, r3
 800b038:	d102      	bne.n	800b040 <UART_SetConfig+0xd0>
 800b03a:	2302      	movs	r3, #2
 800b03c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b03e:	e021      	b.n	800b084 <UART_SetConfig+0x114>
 800b040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	4b53      	ldr	r3, [pc, #332]	@ (800b194 <UART_SetConfig+0x224>)
 800b046:	429a      	cmp	r2, r3
 800b048:	d102      	bne.n	800b050 <UART_SetConfig+0xe0>
 800b04a:	2304      	movs	r3, #4
 800b04c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b04e:	e019      	b.n	800b084 <UART_SetConfig+0x114>
 800b050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	4b50      	ldr	r3, [pc, #320]	@ (800b198 <UART_SetConfig+0x228>)
 800b056:	429a      	cmp	r2, r3
 800b058:	d102      	bne.n	800b060 <UART_SetConfig+0xf0>
 800b05a:	2308      	movs	r3, #8
 800b05c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b05e:	e011      	b.n	800b084 <UART_SetConfig+0x114>
 800b060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	4b4d      	ldr	r3, [pc, #308]	@ (800b19c <UART_SetConfig+0x22c>)
 800b066:	429a      	cmp	r2, r3
 800b068:	d102      	bne.n	800b070 <UART_SetConfig+0x100>
 800b06a:	2310      	movs	r3, #16
 800b06c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b06e:	e009      	b.n	800b084 <UART_SetConfig+0x114>
 800b070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	4b42      	ldr	r3, [pc, #264]	@ (800b180 <UART_SetConfig+0x210>)
 800b076:	429a      	cmp	r2, r3
 800b078:	d102      	bne.n	800b080 <UART_SetConfig+0x110>
 800b07a:	2320      	movs	r3, #32
 800b07c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b07e:	e001      	b.n	800b084 <UART_SetConfig+0x114>
 800b080:	2300      	movs	r3, #0
 800b082:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	4b3d      	ldr	r3, [pc, #244]	@ (800b180 <UART_SetConfig+0x210>)
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d005      	beq.n	800b09a <UART_SetConfig+0x12a>
 800b08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	4b3d      	ldr	r3, [pc, #244]	@ (800b188 <UART_SetConfig+0x218>)
 800b094:	429a      	cmp	r2, r3
 800b096:	f040 8085 	bne.w	800b1a4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b09a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b09c:	2200      	movs	r2, #0
 800b09e:	623b      	str	r3, [r7, #32]
 800b0a0:	627a      	str	r2, [r7, #36]	@ 0x24
 800b0a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b0a6:	f7fd ff17 	bl	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b0aa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b0ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 80e8 	beq.w	800b284 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b8:	4a39      	ldr	r2, [pc, #228]	@ (800b1a0 <UART_SetConfig+0x230>)
 800b0ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0c6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	4413      	add	r3, r2
 800b0d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d305      	bcc.n	800b0e4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d903      	bls.n	800b0ec <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b0ea:	e048      	b.n	800b17e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	61bb      	str	r3, [r7, #24]
 800b0f2:	61fa      	str	r2, [r7, #28]
 800b0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f8:	4a29      	ldr	r2, [pc, #164]	@ (800b1a0 <UART_SetConfig+0x230>)
 800b0fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	2200      	movs	r2, #0
 800b102:	613b      	str	r3, [r7, #16]
 800b104:	617a      	str	r2, [r7, #20]
 800b106:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b10a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b10e:	f7f5 f907 	bl	8000320 <__aeabi_uldivmod>
 800b112:	4602      	mov	r2, r0
 800b114:	460b      	mov	r3, r1
 800b116:	4610      	mov	r0, r2
 800b118:	4619      	mov	r1, r3
 800b11a:	f04f 0200 	mov.w	r2, #0
 800b11e:	f04f 0300 	mov.w	r3, #0
 800b122:	020b      	lsls	r3, r1, #8
 800b124:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b128:	0202      	lsls	r2, r0, #8
 800b12a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b12c:	6849      	ldr	r1, [r1, #4]
 800b12e:	0849      	lsrs	r1, r1, #1
 800b130:	2000      	movs	r0, #0
 800b132:	460c      	mov	r4, r1
 800b134:	4605      	mov	r5, r0
 800b136:	eb12 0804 	adds.w	r8, r2, r4
 800b13a:	eb43 0905 	adc.w	r9, r3, r5
 800b13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	60bb      	str	r3, [r7, #8]
 800b146:	60fa      	str	r2, [r7, #12]
 800b148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b14c:	4640      	mov	r0, r8
 800b14e:	4649      	mov	r1, r9
 800b150:	f7f5 f8e6 	bl	8000320 <__aeabi_uldivmod>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4613      	mov	r3, r2
 800b15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b15c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b15e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b162:	d308      	bcc.n	800b176 <UART_SetConfig+0x206>
 800b164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b16a:	d204      	bcs.n	800b176 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b172:	60da      	str	r2, [r3, #12]
 800b174:	e003      	b.n	800b17e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b17c:	e082      	b.n	800b284 <UART_SetConfig+0x314>
 800b17e:	e081      	b.n	800b284 <UART_SetConfig+0x314>
 800b180:	46002400 	.word	0x46002400
 800b184:	cfff69f3 	.word	0xcfff69f3
 800b188:	56002400 	.word	0x56002400
 800b18c:	40013800 	.word	0x40013800
 800b190:	40004400 	.word	0x40004400
 800b194:	40004800 	.word	0x40004800
 800b198:	40004c00 	.word	0x40004c00
 800b19c:	40005000 	.word	0x40005000
 800b1a0:	0802e844 	.word	0x0802e844
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a6:	69db      	ldr	r3, [r3, #28]
 800b1a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1ac:	d13c      	bne.n	800b228 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b1ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	603b      	str	r3, [r7, #0]
 800b1b4:	607a      	str	r2, [r7, #4]
 800b1b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1ba:	f7fd fe8d 	bl	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b1be:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d05e      	beq.n	800b284 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ca:	4a39      	ldr	r2, [pc, #228]	@ (800b2b0 <UART_SetConfig+0x340>)
 800b1cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1d8:	005a      	lsls	r2, r3, #1
 800b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	085b      	lsrs	r3, r3, #1
 800b1e0:	441a      	add	r2, r3
 800b1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ee:	2b0f      	cmp	r3, #15
 800b1f0:	d916      	bls.n	800b220 <UART_SetConfig+0x2b0>
 800b1f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1f8:	d212      	bcs.n	800b220 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	f023 030f 	bic.w	r3, r3, #15
 800b202:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b206:	085b      	lsrs	r3, r3, #1
 800b208:	b29b      	uxth	r3, r3
 800b20a:	f003 0307 	and.w	r3, r3, #7
 800b20e:	b29a      	uxth	r2, r3
 800b210:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b212:	4313      	orrs	r3, r2
 800b214:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b21c:	60da      	str	r2, [r3, #12]
 800b21e:	e031      	b.n	800b284 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b226:	e02d      	b.n	800b284 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b22a:	2200      	movs	r2, #0
 800b22c:	469a      	mov	sl, r3
 800b22e:	4693      	mov	fp, r2
 800b230:	4650      	mov	r0, sl
 800b232:	4659      	mov	r1, fp
 800b234:	f7fd fe50 	bl	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b238:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b23a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d021      	beq.n	800b284 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b244:	4a1a      	ldr	r2, [pc, #104]	@ (800b2b0 <UART_SetConfig+0x340>)
 800b246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b24a:	461a      	mov	r2, r3
 800b24c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b24e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	085b      	lsrs	r3, r3, #1
 800b258:	441a      	add	r2, r3
 800b25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b262:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b266:	2b0f      	cmp	r3, #15
 800b268:	d909      	bls.n	800b27e <UART_SetConfig+0x30e>
 800b26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b270:	d205      	bcs.n	800b27e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b274:	b29a      	uxth	r2, r3
 800b276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	60da      	str	r2, [r3, #12]
 800b27c:	e002      	b.n	800b284 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b286:	2201      	movs	r2, #1
 800b288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28e:	2201      	movs	r2, #1
 800b290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b296:	2200      	movs	r2, #0
 800b298:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29c:	2200      	movs	r2, #0
 800b29e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b2a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3750      	adds	r7, #80	@ 0x50
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2ae:	bf00      	nop
 800b2b0:	0802e844 	.word	0x0802e844

0800b2b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c0:	f003 0308 	and.w	r3, r3, #8
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00a      	beq.n	800b2de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00a      	beq.n	800b300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	430a      	orrs	r2, r1
 800b2fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b304:	f003 0302 	and.w	r3, r3, #2
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00a      	beq.n	800b322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	430a      	orrs	r2, r1
 800b320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b326:	f003 0304 	and.w	r3, r3, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00a      	beq.n	800b344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	430a      	orrs	r2, r1
 800b342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b348:	f003 0310 	and.w	r3, r3, #16
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00a      	beq.n	800b366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36a:	f003 0320 	and.w	r3, r3, #32
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00a      	beq.n	800b388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d01a      	beq.n	800b3ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3b2:	d10a      	bne.n	800b3ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00a      	beq.n	800b3ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	430a      	orrs	r2, r1
 800b3ea:	605a      	str	r2, [r3, #4]
  }
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b098      	sub	sp, #96	@ 0x60
 800b3fc:	af02      	add	r7, sp, #8
 800b3fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b408:	f7f6 fd06 	bl	8001e18 <HAL_GetTick>
 800b40c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0308 	and.w	r3, r3, #8
 800b418:	2b08      	cmp	r3, #8
 800b41a:	d12f      	bne.n	800b47c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b41c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b424:	2200      	movs	r2, #0
 800b426:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f88e 	bl	800b54c <UART_WaitOnFlagUntilTimeout>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d022      	beq.n	800b47c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43e:	e853 3f00 	ldrex	r3, [r3]
 800b442:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b44a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	461a      	mov	r2, r3
 800b452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b454:	647b      	str	r3, [r7, #68]	@ 0x44
 800b456:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b45a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b45c:	e841 2300 	strex	r3, r2, [r1]
 800b460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e6      	bne.n	800b436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2220      	movs	r2, #32
 800b46c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e063      	b.n	800b544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 0304 	and.w	r3, r3, #4
 800b486:	2b04      	cmp	r3, #4
 800b488:	d149      	bne.n	800b51e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b48a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b492:	2200      	movs	r2, #0
 800b494:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f857 	bl	800b54c <UART_WaitOnFlagUntilTimeout>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d03c      	beq.n	800b51e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e6      	bne.n	800b4a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3308      	adds	r3, #8
 800b4dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f023 0301 	bic.w	r3, r3, #1
 800b4ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4f6:	61fa      	str	r2, [r7, #28]
 800b4f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fa:	69b9      	ldr	r1, [r7, #24]
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	e841 2300 	strex	r3, r2, [r1]
 800b502:	617b      	str	r3, [r7, #20]
   return(result);
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1e5      	bne.n	800b4d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2220      	movs	r2, #32
 800b50e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	e012      	b.n	800b544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2220      	movs	r2, #32
 800b522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2220      	movs	r2, #32
 800b52a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3758      	adds	r7, #88	@ 0x58
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	4613      	mov	r3, r2
 800b55a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b55c:	e04f      	b.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d04b      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b566:	f7f6 fc57 	bl	8001e18 <HAL_GetTick>
 800b56a:	4602      	mov	r2, r0
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	69ba      	ldr	r2, [r7, #24]
 800b572:	429a      	cmp	r2, r3
 800b574:	d302      	bcc.n	800b57c <UART_WaitOnFlagUntilTimeout+0x30>
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e04e      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0304 	and.w	r3, r3, #4
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d037      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b80      	cmp	r3, #128	@ 0x80
 800b592:	d034      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2b40      	cmp	r3, #64	@ 0x40
 800b598:	d031      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	69db      	ldr	r3, [r3, #28]
 800b5a0:	f003 0308 	and.w	r3, r3, #8
 800b5a4:	2b08      	cmp	r3, #8
 800b5a6:	d110      	bne.n	800b5ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2208      	movs	r2, #8
 800b5ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f000 f838 	bl	800b626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2208      	movs	r2, #8
 800b5ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e029      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	69db      	ldr	r3, [r3, #28]
 800b5d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5d8:	d111      	bne.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b5e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 f81e 	bl	800b626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e00f      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	69da      	ldr	r2, [r3, #28]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	4013      	ands	r3, r2
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	bf0c      	ite	eq
 800b60e:	2301      	moveq	r3, #1
 800b610:	2300      	movne	r3, #0
 800b612:	b2db      	uxtb	r3, r3
 800b614:	461a      	mov	r2, r3
 800b616:	79fb      	ldrb	r3, [r7, #7]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d0a0      	beq.n	800b55e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b626:	b480      	push	{r7}
 800b628:	b095      	sub	sp, #84	@ 0x54
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b636:	e853 3f00 	ldrex	r3, [r3]
 800b63a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	461a      	mov	r2, r3
 800b64a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b64c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b64e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b650:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b654:	e841 2300 	strex	r3, r2, [r1]
 800b658:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e6      	bne.n	800b62e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3308      	adds	r3, #8
 800b666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	e853 3f00 	ldrex	r3, [r3]
 800b66e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b676:	f023 0301 	bic.w	r3, r3, #1
 800b67a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3308      	adds	r3, #8
 800b682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b684:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b686:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b68a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e3      	bne.n	800b660 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d118      	bne.n	800b6d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	e853 3f00 	ldrex	r3, [r3]
 800b6ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f023 0310 	bic.w	r3, r3, #16
 800b6b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6be:	61bb      	str	r3, [r7, #24]
 800b6c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c2:	6979      	ldr	r1, [r7, #20]
 800b6c4:	69ba      	ldr	r2, [r7, #24]
 800b6c6:	e841 2300 	strex	r3, r2, [r1]
 800b6ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1e6      	bne.n	800b6a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2220      	movs	r2, #32
 800b6d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b6e6:	bf00      	nop
 800b6e8:	3754      	adds	r7, #84	@ 0x54
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6f2:	b480      	push	{r7}
 800b6f4:	b085      	sub	sp, #20
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b700:	2b01      	cmp	r3, #1
 800b702:	d101      	bne.n	800b708 <HAL_UARTEx_DisableFifoMode+0x16>
 800b704:	2302      	movs	r3, #2
 800b706:	e027      	b.n	800b758 <HAL_UARTEx_DisableFifoMode+0x66>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2224      	movs	r2, #36	@ 0x24
 800b714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f022 0201 	bic.w	r2, r2, #1
 800b72e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b736:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2220      	movs	r2, #32
 800b74a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b774:	2b01      	cmp	r3, #1
 800b776:	d101      	bne.n	800b77c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b778:	2302      	movs	r3, #2
 800b77a:	e02d      	b.n	800b7d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2224      	movs	r2, #36	@ 0x24
 800b788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f022 0201 	bic.w	r2, r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	430a      	orrs	r2, r1
 800b7b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f84f 	bl	800b85c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d101      	bne.n	800b7f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e02d      	b.n	800b854 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2224      	movs	r2, #36	@ 0x24
 800b804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f022 0201 	bic.w	r2, r2, #1
 800b81e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	430a      	orrs	r2, r1
 800b832:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 f811 	bl	800b85c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2220      	movs	r2, #32
 800b846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d108      	bne.n	800b87e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b87c:	e031      	b.n	800b8e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b87e:	2308      	movs	r3, #8
 800b880:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b882:	2308      	movs	r3, #8
 800b884:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	0e5b      	lsrs	r3, r3, #25
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	f003 0307 	and.w	r3, r3, #7
 800b894:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	0f5b      	lsrs	r3, r3, #29
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	f003 0307 	and.w	r3, r3, #7
 800b8a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	7b3a      	ldrb	r2, [r7, #12]
 800b8aa:	4911      	ldr	r1, [pc, #68]	@ (800b8f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b8ac:	5c8a      	ldrb	r2, [r1, r2]
 800b8ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b8b2:	7b3a      	ldrb	r2, [r7, #12]
 800b8b4:	490f      	ldr	r1, [pc, #60]	@ (800b8f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b8b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	7b7a      	ldrb	r2, [r7, #13]
 800b8c8:	4909      	ldr	r1, [pc, #36]	@ (800b8f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b8ca:	5c8a      	ldrb	r2, [r1, r2]
 800b8cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8d0:	7b7a      	ldrb	r2, [r7, #13]
 800b8d2:	4908      	ldr	r1, [pc, #32]	@ (800b8f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b8d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b8e2:	bf00      	nop
 800b8e4:	3714      	adds	r7, #20
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	0802e85c 	.word	0x0802e85c
 800b8f4:	0802e864 	.word	0x0802e864

0800b8f8 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f043 0202 	orr.w	r2, r3, #2
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	685a      	ldr	r2, [r3, #4]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	021b      	lsls	r3, r3, #8
 800b918:	431a      	orrs	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f023 0202 	bic.w	r2, r3, #2
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	601a      	str	r2, [r3, #0]
}
 800b92a:	bf00      	nop
 800b92c:	370c      	adds	r7, #12
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
	...

0800b938 <__NVIC_SetPriority>:
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	4603      	mov	r3, r0
 800b940:	6039      	str	r1, [r7, #0]
 800b942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	db0a      	blt.n	800b962 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	b2da      	uxtb	r2, r3
 800b950:	490c      	ldr	r1, [pc, #48]	@ (800b984 <__NVIC_SetPriority+0x4c>)
 800b952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b956:	0112      	lsls	r2, r2, #4
 800b958:	b2d2      	uxtb	r2, r2
 800b95a:	440b      	add	r3, r1
 800b95c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b960:	e00a      	b.n	800b978 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	b2da      	uxtb	r2, r3
 800b966:	4908      	ldr	r1, [pc, #32]	@ (800b988 <__NVIC_SetPriority+0x50>)
 800b968:	79fb      	ldrb	r3, [r7, #7]
 800b96a:	f003 030f 	and.w	r3, r3, #15
 800b96e:	3b04      	subs	r3, #4
 800b970:	0112      	lsls	r2, r2, #4
 800b972:	b2d2      	uxtb	r2, r2
 800b974:	440b      	add	r3, r1
 800b976:	761a      	strb	r2, [r3, #24]
}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr
 800b984:	e000e100 	.word	0xe000e100
 800b988:	e000ed00 	.word	0xe000ed00

0800b98c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b98c:	b580      	push	{r7, lr}
 800b98e:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800b990:	4b05      	ldr	r3, [pc, #20]	@ (800b9a8 <SysTick_Handler+0x1c>)
 800b992:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b994:	f002 fa82 	bl	800de9c <xTaskGetSchedulerState>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d001      	beq.n	800b9a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b99e:	f003 f80d 	bl	800e9bc <xPortSysTickHandler>
  }
}
 800b9a2:	bf00      	nop
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	e000e010 	.word	0xe000e010

0800b9ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	f06f 0004 	mvn.w	r0, #4
 800b9b6:	f7ff ffbf 	bl	800b938 <__NVIC_SetPriority>
#endif
}
 800b9ba:	bf00      	nop
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b086      	sub	sp, #24
 800b9c2:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9c8:	f3ef 8305 	mrs	r3, IPSR
 800b9cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9ce:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	617b      	str	r3, [r7, #20]
 800b9d8:	e013      	b.n	800ba02 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800b9da:	f002 fa5f 	bl	800de9c <xTaskGetSchedulerState>
 800b9de:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d00d      	beq.n	800ba02 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b9e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9ec:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d105      	bne.n	800b9fe <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b9f2:	f3ef 8311 	mrs	r3, BASEPRI
 800b9f6:	607b      	str	r3, [r7, #4]
  return(result);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800ba02:	697b      	ldr	r3, [r7, #20]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800ba12:	f7ff ffd4 	bl	800b9be <IRQ_Context>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d003      	beq.n	800ba24 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800ba1c:	f06f 0305 	mvn.w	r3, #5
 800ba20:	607b      	str	r3, [r7, #4]
 800ba22:	e012      	b.n	800ba4a <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800ba24:	f002 fa3a 	bl	800de9c <xTaskGetSchedulerState>
 800ba28:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d109      	bne.n	800ba44 <osKernelInitialize+0x38>
 800ba30:	4b08      	ldr	r3, [pc, #32]	@ (800ba54 <osKernelInitialize+0x48>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d105      	bne.n	800ba44 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ba38:	4b06      	ldr	r3, [pc, #24]	@ (800ba54 <osKernelInitialize+0x48>)
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	607b      	str	r3, [r7, #4]
 800ba42:	e002      	b.n	800ba4a <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800ba44:	f04f 33ff 	mov.w	r3, #4294967295
 800ba48:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800ba4a:	687b      	ldr	r3, [r7, #4]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	20045c8c 	.word	0x20045c8c

0800ba58 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800ba5e:	f7ff ffae 	bl	800b9be <IRQ_Context>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d003      	beq.n	800ba70 <osKernelStart+0x18>
    stat = osErrorISR;
 800ba68:	f06f 0305 	mvn.w	r3, #5
 800ba6c:	607b      	str	r3, [r7, #4]
 800ba6e:	e016      	b.n	800ba9e <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800ba70:	f002 fa14 	bl	800de9c <xTaskGetSchedulerState>
 800ba74:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d10d      	bne.n	800ba98 <osKernelStart+0x40>
 800ba7c:	4b0a      	ldr	r3, [pc, #40]	@ (800baa8 <osKernelStart+0x50>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d109      	bne.n	800ba98 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ba84:	f7ff ff92 	bl	800b9ac <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800ba88:	4b07      	ldr	r3, [pc, #28]	@ (800baa8 <osKernelStart+0x50>)
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ba8e:	f001 fcc7 	bl	800d420 <vTaskStartScheduler>
      stat = osOK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	607b      	str	r3, [r7, #4]
 800ba96:	e002      	b.n	800ba9e <osKernelStart+0x46>
    } else {
      stat = osError;
 800ba98:	f04f 33ff 	mov.w	r3, #4294967295
 800ba9c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800ba9e:	687b      	ldr	r3, [r7, #4]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	20045c8c 	.word	0x20045c8c

0800baac <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800baac:	b580      	push	{r7, lr}
 800baae:	b08e      	sub	sp, #56	@ 0x38
 800bab0:	af04      	add	r7, sp, #16
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bab8:	2300      	movs	r3, #0
 800baba:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800babc:	f7ff ff7f 	bl	800b9be <IRQ_Context>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d17f      	bne.n	800bbc6 <osThreadNew+0x11a>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d07c      	beq.n	800bbc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bacc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bad0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bad2:	2318      	movs	r3, #24
 800bad4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bad6:	2300      	movs	r3, #0
 800bad8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bada:	f04f 33ff 	mov.w	r3, #4294967295
 800bade:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d045      	beq.n	800bb72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <osThreadNew+0x48>
        name = attr->name;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	699b      	ldr	r3, [r3, #24]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d008      	beq.n	800bb1a <osThreadNew+0x6e>
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	2b38      	cmp	r3, #56	@ 0x38
 800bb0c:	d805      	bhi.n	800bb1a <osThreadNew+0x6e>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e054      	b.n	800bbc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	695b      	ldr	r3, [r3, #20]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d003      	beq.n	800bb2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	695b      	ldr	r3, [r3, #20]
 800bb2a:	089b      	lsrs	r3, r3, #2
 800bb2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00e      	beq.n	800bb54 <osThreadNew+0xa8>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	2b5b      	cmp	r3, #91	@ 0x5b
 800bb3c:	d90a      	bls.n	800bb54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d006      	beq.n	800bb54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	695b      	ldr	r3, [r3, #20]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d002      	beq.n	800bb54 <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	61bb      	str	r3, [r7, #24]
 800bb52:	e010      	b.n	800bb76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10c      	bne.n	800bb76 <osThreadNew+0xca>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d108      	bne.n	800bb76 <osThreadNew+0xca>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	691b      	ldr	r3, [r3, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d104      	bne.n	800bb76 <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	61bb      	str	r3, [r7, #24]
 800bb70:	e001      	b.n	800bb76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d110      	bne.n	800bb9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb84:	9202      	str	r2, [sp, #8]
 800bb86:	9301      	str	r3, [sp, #4]
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	6a3a      	ldr	r2, [r7, #32]
 800bb90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f001 fa74 	bl	800d080 <xTaskCreateStatic>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	e013      	b.n	800bbc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d110      	bne.n	800bbc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	f107 0314 	add.w	r3, r7, #20
 800bbac:	9301      	str	r3, [sp, #4]
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f001 faaf 	bl	800d11a <xTaskCreate>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d001      	beq.n	800bbc6 <osThreadNew+0x11a>
            hTask = NULL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800bbc6:	697b      	ldr	r3, [r7, #20]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3728      	adds	r7, #40	@ 0x28
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800bbd8:	f7ff fef1 	bl	800b9be <IRQ_Context>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d003      	beq.n	800bbea <osDelay+0x1a>
    stat = osErrorISR;
 800bbe2:	f06f 0305 	mvn.w	r3, #5
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	e007      	b.n	800bbfa <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800bbea:	2300      	movs	r3, #0
 800bbec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <osDelay+0x2a>
      vTaskDelay(ticks);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f001 fbed 	bl	800d3d4 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af02      	add	r7, sp, #8
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 800bc10:	2300      	movs	r3, #0
 800bc12:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 800bc14:	f7ff fed3 	bl	800b9be <IRQ_Context>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d175      	bne.n	800bd0a <osSemaphoreNew+0x106>
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d072      	beq.n	800bd0a <osSemaphoreNew+0x106>
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d86e      	bhi.n	800bd0a <osSemaphoreNew+0x106>
    mem = -1;
 800bc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc30:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d015      	beq.n	800bc64 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d006      	beq.n	800bc4e <osSemaphoreNew+0x4a>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	2b4f      	cmp	r3, #79	@ 0x4f
 800bc46:	d902      	bls.n	800bc4e <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	613b      	str	r3, [r7, #16]
 800bc4c:	e00c      	b.n	800bc68 <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d108      	bne.n	800bc68 <osSemaphoreNew+0x64>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d104      	bne.n	800bc68 <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	613b      	str	r3, [r7, #16]
 800bc62:	e001      	b.n	800bc68 <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6e:	d04c      	beq.n	800bd0a <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d128      	bne.n	800bcc8 <osSemaphoreNew+0xc4>
        if (mem == 1) {
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d10a      	bne.n	800bc92 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	2203      	movs	r2, #3
 800bc82:	9200      	str	r2, [sp, #0]
 800bc84:	2200      	movs	r2, #0
 800bc86:	2100      	movs	r1, #0
 800bc88:	2001      	movs	r0, #1
 800bc8a:	f000 fb2e 	bl	800c2ea <xQueueGenericCreateStatic>
 800bc8e:	6178      	str	r0, [r7, #20]
 800bc90:	e005      	b.n	800bc9e <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bc92:	2203      	movs	r2, #3
 800bc94:	2100      	movs	r1, #0
 800bc96:	2001      	movs	r0, #1
 800bc98:	f000 fb70 	bl	800c37c <xQueueGenericCreate>
 800bc9c:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d022      	beq.n	800bcea <osSemaphoreNew+0xe6>
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d01f      	beq.n	800bcea <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bcaa:	2300      	movs	r3, #0
 800bcac:	2200      	movs	r2, #0
 800bcae:	2100      	movs	r1, #0
 800bcb0:	6978      	ldr	r0, [r7, #20]
 800bcb2:	f000 fc23 	bl	800c4fc <xQueueGenericSend>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d016      	beq.n	800bcea <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 800bcbc:	6978      	ldr	r0, [r7, #20]
 800bcbe:	f000 fff0 	bl	800cca2 <vQueueDelete>
            hSemaphore = NULL;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	617b      	str	r3, [r7, #20]
 800bcc6:	e010      	b.n	800bcea <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d108      	bne.n	800bce0 <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	68b9      	ldr	r1, [r7, #8]
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 fbbe 	bl	800c458 <xQueueCreateCountingSemaphoreStatic>
 800bcdc:	6178      	str	r0, [r7, #20]
 800bcde:	e004      	b.n	800bcea <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bce0:	68b9      	ldr	r1, [r7, #8]
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f000 fbe3 	bl	800c4ae <xQueueCreateCountingSemaphore>
 800bce8:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d00c      	beq.n	800bd0a <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d009      	beq.n	800bd0a <osSemaphoreNew+0x106>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d005      	beq.n	800bd0a <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4619      	mov	r1, r3
 800bd04:	6978      	ldr	r0, [r7, #20]
 800bd06:	f001 f911 	bl	800cf2c <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 800bd0a:	697b      	ldr	r3, [r7, #20]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d103      	bne.n	800bd34 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bd2c:	f06f 0303 	mvn.w	r3, #3
 800bd30:	617b      	str	r3, [r7, #20]
 800bd32:	e034      	b.n	800bd9e <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 800bd34:	f7ff fe43 	bl	800b9be <IRQ_Context>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d01e      	beq.n	800bd7c <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d003      	beq.n	800bd4c <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 800bd44:	f06f 0303 	mvn.w	r3, #3
 800bd48:	617b      	str	r3, [r7, #20]
 800bd4a:	e028      	b.n	800bd9e <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bd50:	f107 030c 	add.w	r3, r7, #12
 800bd54:	461a      	mov	r2, r3
 800bd56:	2100      	movs	r1, #0
 800bd58:	6938      	ldr	r0, [r7, #16]
 800bd5a:	f000 ff30 	bl	800cbbe <xQueueReceiveFromISR>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d003      	beq.n	800bd6c <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 800bd64:	f06f 0302 	mvn.w	r3, #2
 800bd68:	617b      	str	r3, [r7, #20]
 800bd6a:	e018      	b.n	800bd9e <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d015      	beq.n	800bd9e <osSemaphoreAcquire+0x8a>
 800bd72:	4b0d      	ldr	r3, [pc, #52]	@ (800bda8 <osSemaphoreAcquire+0x94>)
 800bd74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd78:	601a      	str	r2, [r3, #0]
 800bd7a:	e010      	b.n	800bd9e <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	6938      	ldr	r0, [r7, #16]
 800bd80:	f000 fe43 	bl	800ca0a <xQueueSemaphoreTake>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d009      	beq.n	800bd9e <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 800bd90:	f06f 0301 	mvn.w	r3, #1
 800bd94:	617b      	str	r3, [r7, #20]
 800bd96:	e002      	b.n	800bd9e <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 800bd98:	f06f 0302 	mvn.w	r3, #2
 800bd9c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800bd9e:	697b      	ldr	r3, [r7, #20]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	e000ed04 	.word	0xe000ed04

0800bdac <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d103      	bne.n	800bdca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bdc2:	f06f 0303 	mvn.w	r3, #3
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	e027      	b.n	800be1a <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 800bdca:	f7ff fdf8 	bl	800b9be <IRQ_Context>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d016      	beq.n	800be02 <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bdd8:	f107 030c 	add.w	r3, r7, #12
 800bddc:	4619      	mov	r1, r3
 800bdde:	6938      	ldr	r0, [r7, #16]
 800bde0:	f000 fcdf 	bl	800c7a2 <xQueueGiveFromISR>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d003      	beq.n	800bdf2 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800bdea:	f06f 0302 	mvn.w	r3, #2
 800bdee:	617b      	str	r3, [r7, #20]
 800bdf0:	e013      	b.n	800be1a <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d010      	beq.n	800be1a <osSemaphoreRelease+0x6e>
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	@ (800be24 <osSemaphoreRelease+0x78>)
 800bdfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdfe:	601a      	str	r2, [r3, #0]
 800be00:	e00b      	b.n	800be1a <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800be02:	2300      	movs	r3, #0
 800be04:	2200      	movs	r2, #0
 800be06:	2100      	movs	r1, #0
 800be08:	6938      	ldr	r0, [r7, #16]
 800be0a:	f000 fb77 	bl	800c4fc <xQueueGenericSend>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b01      	cmp	r3, #1
 800be12:	d002      	beq.n	800be1a <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 800be14:	f06f 0302 	mvn.w	r3, #2
 800be18:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 800be1a:	697b      	ldr	r3, [r7, #20]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	e000ed04 	.word	0xe000ed04

0800be28 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800be28:	b580      	push	{r7, lr}
 800be2a:	b088      	sub	sp, #32
 800be2c:	af02      	add	r7, sp, #8
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800be34:	2300      	movs	r3, #0
 800be36:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800be38:	f7ff fdc1 	bl	800b9be <IRQ_Context>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d15f      	bne.n	800bf02 <osMessageQueueNew+0xda>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d05c      	beq.n	800bf02 <osMessageQueueNew+0xda>
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d059      	beq.n	800bf02 <osMessageQueueNew+0xda>
    mem = -1;
 800be4e:	f04f 33ff 	mov.w	r3, #4294967295
 800be52:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d029      	beq.n	800beae <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d012      	beq.n	800be88 <osMessageQueueNew+0x60>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	2b4f      	cmp	r3, #79	@ 0x4f
 800be68:	d90e      	bls.n	800be88 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00a      	beq.n	800be88 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	695a      	ldr	r2, [r3, #20]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	68b9      	ldr	r1, [r7, #8]
 800be7a:	fb01 f303 	mul.w	r3, r1, r3
 800be7e:	429a      	cmp	r2, r3
 800be80:	d302      	bcc.n	800be88 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 800be82:	2301      	movs	r3, #1
 800be84:	613b      	str	r3, [r7, #16]
 800be86:	e014      	b.n	800beb2 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d110      	bne.n	800beb2 <osMessageQueueNew+0x8a>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10c      	bne.n	800beb2 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d108      	bne.n	800beb2 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d104      	bne.n	800beb2 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	613b      	str	r3, [r7, #16]
 800beac:	e001      	b.n	800beb2 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d10b      	bne.n	800bed0 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	691a      	ldr	r2, [r3, #16]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	2100      	movs	r1, #0
 800bec2:	9100      	str	r1, [sp, #0]
 800bec4:	68b9      	ldr	r1, [r7, #8]
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f000 fa0f 	bl	800c2ea <xQueueGenericCreateStatic>
 800becc:	6178      	str	r0, [r7, #20]
 800bece:	e008      	b.n	800bee2 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d105      	bne.n	800bee2 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bed6:	2200      	movs	r2, #0
 800bed8:	68b9      	ldr	r1, [r7, #8]
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 fa4e 	bl	800c37c <xQueueGenericCreate>
 800bee0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00c      	beq.n	800bf02 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d009      	beq.n	800bf02 <osMessageQueueNew+0xda>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d005      	beq.n	800bf02 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4619      	mov	r1, r3
 800befc:	6978      	ldr	r0, [r7, #20]
 800befe:	f001 f815 	bl	800cf2c <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800bf02:	697b      	ldr	r3, [r7, #20]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3718      	adds	r7, #24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b088      	sub	sp, #32
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	603b      	str	r3, [r7, #0]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800bf24:	f7ff fd4b 	bl	800b9be <IRQ_Context>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d024      	beq.n	800bf78 <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d005      	beq.n	800bf40 <osMessageQueuePut+0x34>
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <osMessageQueuePut+0x34>
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d003      	beq.n	800bf48 <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 800bf40:	f06f 0303 	mvn.w	r3, #3
 800bf44:	61fb      	str	r3, [r7, #28]
 800bf46:	e034      	b.n	800bfb2 <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bf4c:	f107 0214 	add.w	r2, r7, #20
 800bf50:	2300      	movs	r3, #0
 800bf52:	68b9      	ldr	r1, [r7, #8]
 800bf54:	69b8      	ldr	r0, [r7, #24]
 800bf56:	f000 fb9e 	bl	800c696 <xQueueGenericSendFromISR>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d003      	beq.n	800bf68 <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 800bf60:	f06f 0302 	mvn.w	r3, #2
 800bf64:	61fb      	str	r3, [r7, #28]
 800bf66:	e024      	b.n	800bfb2 <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d021      	beq.n	800bfb2 <osMessageQueuePut+0xa6>
 800bf6e:	4b13      	ldr	r3, [pc, #76]	@ (800bfbc <osMessageQueuePut+0xb0>)
 800bf70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf74:	601a      	str	r2, [r3, #0]
 800bf76:	e01c      	b.n	800bfb2 <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d002      	beq.n	800bf84 <osMessageQueuePut+0x78>
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d103      	bne.n	800bf8c <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 800bf84:	f06f 0303 	mvn.w	r3, #3
 800bf88:	61fb      	str	r3, [r7, #28]
 800bf8a:	e012      	b.n	800bfb2 <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	683a      	ldr	r2, [r7, #0]
 800bf90:	68b9      	ldr	r1, [r7, #8]
 800bf92:	69b8      	ldr	r0, [r7, #24]
 800bf94:	f000 fab2 	bl	800c4fc <xQueueGenericSend>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d009      	beq.n	800bfb2 <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d003      	beq.n	800bfac <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 800bfa4:	f06f 0301 	mvn.w	r3, #1
 800bfa8:	61fb      	str	r3, [r7, #28]
 800bfaa:	e002      	b.n	800bfb2 <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 800bfac:	f06f 0302 	mvn.w	r3, #2
 800bfb0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800bfb2:	69fb      	ldr	r3, [r7, #28]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3720      	adds	r7, #32
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	e000ed04 	.word	0xe000ed04

0800bfc0 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b088      	sub	sp, #32
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
 800bfcc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800bfd6:	f7ff fcf2 	bl	800b9be <IRQ_Context>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d024      	beq.n	800c02a <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d005      	beq.n	800bff2 <osMessageQueueGet+0x32>
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d002      	beq.n	800bff2 <osMessageQueueGet+0x32>
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d003      	beq.n	800bffa <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800bff2:	f06f 0303 	mvn.w	r3, #3
 800bff6:	61fb      	str	r3, [r7, #28]
 800bff8:	e033      	b.n	800c062 <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 800bffa:	2300      	movs	r3, #0
 800bffc:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bffe:	f107 0314 	add.w	r3, r7, #20
 800c002:	461a      	mov	r2, r3
 800c004:	68b9      	ldr	r1, [r7, #8]
 800c006:	69b8      	ldr	r0, [r7, #24]
 800c008:	f000 fdd9 	bl	800cbbe <xQueueReceiveFromISR>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d003      	beq.n	800c01a <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 800c012:	f06f 0302 	mvn.w	r3, #2
 800c016:	61fb      	str	r3, [r7, #28]
 800c018:	e023      	b.n	800c062 <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d020      	beq.n	800c062 <osMessageQueueGet+0xa2>
 800c020:	4b12      	ldr	r3, [pc, #72]	@ (800c06c <osMessageQueueGet+0xac>)
 800c022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c026:	601a      	str	r2, [r3, #0]
 800c028:	e01b      	b.n	800c062 <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d002      	beq.n	800c036 <osMessageQueueGet+0x76>
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d103      	bne.n	800c03e <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 800c036:	f06f 0303 	mvn.w	r3, #3
 800c03a:	61fb      	str	r3, [r7, #28]
 800c03c:	e011      	b.n	800c062 <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	68b9      	ldr	r1, [r7, #8]
 800c042:	69b8      	ldr	r0, [r7, #24]
 800c044:	f000 fc25 	bl	800c892 <xQueueReceive>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d009      	beq.n	800c062 <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d003      	beq.n	800c05c <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 800c054:	f06f 0301 	mvn.w	r3, #1
 800c058:	61fb      	str	r3, [r7, #28]
 800c05a:	e002      	b.n	800c062 <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 800c05c:	f06f 0302 	mvn.w	r3, #2
 800c060:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800c062:	69fb      	ldr	r3, [r7, #28]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3720      	adds	r7, #32
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	e000ed04 	.word	0xe000ed04

0800c070 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	4a07      	ldr	r2, [pc, #28]	@ (800c09c <vApplicationGetIdleTaskMemory+0x2c>)
 800c080:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	4a06      	ldr	r2, [pc, #24]	@ (800c0a0 <vApplicationGetIdleTaskMemory+0x30>)
 800c086:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c08e:	601a      	str	r2, [r3, #0]
}
 800c090:	bf00      	nop
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	20045c90 	.word	0x20045c90
 800c0a0:	20045cec 	.word	0x20045cec

0800c0a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	4a07      	ldr	r2, [pc, #28]	@ (800c0d0 <vApplicationGetTimerTaskMemory+0x2c>)
 800c0b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	4a06      	ldr	r2, [pc, #24]	@ (800c0d4 <vApplicationGetTimerTaskMemory+0x30>)
 800c0ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2280      	movs	r2, #128	@ 0x80
 800c0c0:	601a      	str	r2, [r3, #0]
}
 800c0c2:	bf00      	nop
 800c0c4:	3714      	adds	r7, #20
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	200464ec 	.word	0x200464ec
 800c0d4:	20046548 	.word	0x20046548

0800c0d8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f103 0208 	add.w	r2, r3, #8
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f103 0208 	add.w	r2, r3, #8
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f103 0208 	add.w	r2, r3, #8
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c126:	bf00      	nop
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800c132:	b480      	push	{r7}
 800c134:	b085      	sub	sp, #20
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c148:	d103      	bne.n	800c152 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	e00c      	b.n	800c16c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	3308      	adds	r3, #8
 800c156:	60fb      	str	r3, [r7, #12]
 800c158:	e002      	b.n	800c160 <vListInsert+0x2e>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	60fb      	str	r3, [r7, #12]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d2f6      	bcs.n	800c15a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	685a      	ldr	r2, [r3, #4]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	683a      	ldr	r2, [r7, #0]
 800c17a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	601a      	str	r2, [r3, #0]
}
 800c198:	bf00      	nop
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	6892      	ldr	r2, [r2, #8]
 800c1ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	6852      	ldr	r2, [r2, #4]
 800c1c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d103      	bne.n	800c1d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	1e5a      	subs	r2, r3, #1
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3714      	adds	r7, #20
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800c202:	2301      	movs	r3, #1
 800c204:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d103      	bne.n	800c218 <xQueueGenericReset+0x20>
 800c210:	f002 fd72 	bl	800ecf8 <ulSetInterruptMask>
 800c214:	bf00      	nop
 800c216:	e7fd      	b.n	800c214 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d057      	beq.n	800c2ce <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800c222:	2b00      	cmp	r3, #0
 800c224:	d053      	beq.n	800c2ce <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c22e:	2100      	movs	r1, #0
 800c230:	fba3 2302 	umull	r2, r3, r3, r2
 800c234:	2b00      	cmp	r3, #0
 800c236:	d000      	beq.n	800c23a <xQueueGenericReset+0x42>
 800c238:	2101      	movs	r1, #1
 800c23a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d146      	bne.n	800c2ce <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800c240:	f002 fb90 	bl	800e964 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c24c:	68b9      	ldr	r1, [r7, #8]
 800c24e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c250:	fb01 f303 	mul.w	r3, r1, r3
 800c254:	441a      	add	r2, r3
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2200      	movs	r2, #0
 800c25e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c270:	3b01      	subs	r3, #1
 800c272:	68b9      	ldr	r1, [r7, #8]
 800c274:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c276:	fb01 f303 	mul.w	r3, r1, r3
 800c27a:	441a      	add	r2, r3
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	22ff      	movs	r2, #255	@ 0xff
 800c284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	22ff      	movs	r2, #255	@ 0xff
 800c28c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d10e      	bne.n	800c2b4 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d014      	beq.n	800c2c8 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	3310      	adds	r3, #16
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f001 fbf0 	bl	800da88 <xTaskRemoveFromEventList>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00c      	beq.n	800c2c8 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c2ae:	f002 fb47 	bl	800e940 <vPortYield>
 800c2b2:	e009      	b.n	800c2c8 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	3310      	adds	r3, #16
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff ff0d 	bl	800c0d8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	3324      	adds	r3, #36	@ 0x24
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7ff ff08 	bl	800c0d8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800c2c8:	f002 fb5e 	bl	800e988 <vPortExitCritical>
 800c2cc:	e001      	b.n	800c2d2 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d103      	bne.n	800c2e0 <xQueueGenericReset+0xe8>
 800c2d8:	f002 fd0e 	bl	800ecf8 <ulSetInterruptMask>
 800c2dc:	bf00      	nop
 800c2de:	e7fd      	b.n	800c2dc <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b088      	sub	sp, #32
 800c2ee:	af02      	add	r7, sp, #8
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
 800c2f6:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d103      	bne.n	800c30a <xQueueGenericCreateStatic+0x20>
 800c302:	f002 fcf9 	bl	800ecf8 <ulSetInterruptMask>
 800c306:	bf00      	nop
 800c308:	e7fd      	b.n	800c306 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d029      	beq.n	800c364 <xQueueGenericCreateStatic+0x7a>
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d026      	beq.n	800c364 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d020      	beq.n	800c364 <xQueueGenericCreateStatic+0x7a>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d102      	bne.n	800c32e <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d11a      	bne.n	800c364 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800c32e:	2350      	movs	r3, #80	@ 0x50
 800c330:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	2b50      	cmp	r3, #80	@ 0x50
 800c336:	d003      	beq.n	800c340 <xQueueGenericCreateStatic+0x56>
 800c338:	f002 fcde 	bl	800ecf8 <ulSetInterruptMask>
 800c33c:	bf00      	nop
 800c33e:	e7fd      	b.n	800c33c <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800c340:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c34e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	4613      	mov	r3, r2
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	68b9      	ldr	r1, [r7, #8]
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f000 f858 	bl	800c412 <prvInitialiseNewQueue>
 800c362:	e006      	b.n	800c372 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d103      	bne.n	800c372 <xQueueGenericCreateStatic+0x88>
 800c36a:	f002 fcc5 	bl	800ecf8 <ulSetInterruptMask>
 800c36e:	bf00      	nop
 800c370:	e7fd      	b.n	800c36e <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c372:	697b      	ldr	r3, [r7, #20]
    }
 800c374:	4618      	mov	r0, r3
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08a      	sub	sp, #40	@ 0x28
 800c380:	af02      	add	r7, sp, #8
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	4613      	mov	r3, r2
 800c388:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d032      	beq.n	800c3fa <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c394:	2100      	movs	r1, #0
 800c396:	68ba      	ldr	r2, [r7, #8]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	fba3 2302 	umull	r2, r3, r3, r2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d000      	beq.n	800c3a4 <xQueueGenericCreate+0x28>
 800c3a2:	2101      	movs	r1, #1
 800c3a4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d127      	bne.n	800c3fa <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c3b2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800c3b6:	d820      	bhi.n	800c3fa <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	fb02 f303 	mul.w	r3, r2, r3
 800c3c0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	3350      	adds	r3, #80	@ 0x50
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f002 fcfe 	bl	800edc8 <pvPortMalloc>
 800c3cc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d019      	beq.n	800c408 <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	3350      	adds	r3, #80	@ 0x50
 800c3dc:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3e6:	79fa      	ldrb	r2, [r7, #7]
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	697a      	ldr	r2, [r7, #20]
 800c3f0:	68b9      	ldr	r1, [r7, #8]
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f000 f80d 	bl	800c412 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800c3f8:	e006      	b.n	800c408 <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d103      	bne.n	800c408 <xQueueGenericCreate+0x8c>
 800c400:	f002 fc7a 	bl	800ecf8 <ulSetInterruptMask>
 800c404:	bf00      	nop
 800c406:	e7fd      	b.n	800c404 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c408:	69fb      	ldr	r3, [r7, #28]
    }
 800c40a:	4618      	mov	r0, r3
 800c40c:	3720      	adds	r7, #32
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	60f8      	str	r0, [r7, #12]
 800c41a:	60b9      	str	r1, [r7, #8]
 800c41c:	607a      	str	r2, [r7, #4]
 800c41e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d103      	bne.n	800c42e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	69ba      	ldr	r2, [r7, #24]
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	e002      	b.n	800c434 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c440:	2101      	movs	r1, #1
 800c442:	69b8      	ldr	r0, [r7, #24]
 800c444:	f7ff fed8 	bl	800c1f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	78fa      	ldrb	r2, [r7, #3]
 800c44c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800c450:	bf00      	nop
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 800c458:	b580      	push	{r7, lr}
 800c45a:	b088      	sub	sp, #32
 800c45c:	af02      	add	r7, sp, #8
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 800c464:	2300      	movs	r3, #0
 800c466:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d013      	beq.n	800c496 <xQueueCreateCountingSemaphoreStatic+0x3e>
 800c46e:	68ba      	ldr	r2, [r7, #8]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	429a      	cmp	r2, r3
 800c474:	d80f      	bhi.n	800c496 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c476:	2302      	movs	r3, #2
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	2100      	movs	r1, #0
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f7ff ff32 	bl	800c2ea <xQueueGenericCreateStatic>
 800c486:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00a      	beq.n	800c4a4 <xQueueCreateCountingSemaphoreStatic+0x4c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c494:	e006      	b.n	800c4a4 <xQueueCreateCountingSemaphoreStatic+0x4c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d103      	bne.n	800c4a4 <xQueueCreateCountingSemaphoreStatic+0x4c>
 800c49c:	f002 fc2c 	bl	800ecf8 <ulSetInterruptMask>
 800c4a0:	bf00      	nop
 800c4a2:	e7fd      	b.n	800c4a0 <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c4a4:	697b      	ldr	r3, [r7, #20]
    }
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d010      	beq.n	800c4e4 <xQueueCreateCountingSemaphore+0x36>
 800c4c2:	683a      	ldr	r2, [r7, #0]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d80c      	bhi.n	800c4e4 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c4ca:	2202      	movs	r2, #2
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff ff54 	bl	800c37c <xQueueGenericCreate>
 800c4d4:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00a      	beq.n	800c4f2 <xQueueCreateCountingSemaphore+0x44>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c4e2:	e006      	b.n	800c4f2 <xQueueCreateCountingSemaphore+0x44>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d103      	bne.n	800c4f2 <xQueueCreateCountingSemaphore+0x44>
 800c4ea:	f002 fc05 	bl	800ecf8 <ulSetInterruptMask>
 800c4ee:	bf00      	nop
 800c4f0:	e7fd      	b.n	800c4ee <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
    }
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08a      	sub	sp, #40	@ 0x28
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
 800c508:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c50a:	2300      	movs	r3, #0
 800c50c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c512:	6a3b      	ldr	r3, [r7, #32]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d103      	bne.n	800c520 <xQueueGenericSend+0x24>
 800c518:	f002 fbee 	bl	800ecf8 <ulSetInterruptMask>
 800c51c:	bf00      	nop
 800c51e:	e7fd      	b.n	800c51c <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d103      	bne.n	800c52e <xQueueGenericSend+0x32>
 800c526:	6a3b      	ldr	r3, [r7, #32]
 800c528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d101      	bne.n	800c532 <xQueueGenericSend+0x36>
 800c52e:	2301      	movs	r3, #1
 800c530:	e000      	b.n	800c534 <xQueueGenericSend+0x38>
 800c532:	2300      	movs	r3, #0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d103      	bne.n	800c540 <xQueueGenericSend+0x44>
 800c538:	f002 fbde 	bl	800ecf8 <ulSetInterruptMask>
 800c53c:	bf00      	nop
 800c53e:	e7fd      	b.n	800c53c <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b02      	cmp	r3, #2
 800c544:	d103      	bne.n	800c54e <xQueueGenericSend+0x52>
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d101      	bne.n	800c552 <xQueueGenericSend+0x56>
 800c54e:	2301      	movs	r3, #1
 800c550:	e000      	b.n	800c554 <xQueueGenericSend+0x58>
 800c552:	2300      	movs	r3, #0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d103      	bne.n	800c560 <xQueueGenericSend+0x64>
 800c558:	f002 fbce 	bl	800ecf8 <ulSetInterruptMask>
 800c55c:	bf00      	nop
 800c55e:	e7fd      	b.n	800c55c <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c560:	f001 fc9c 	bl	800de9c <xTaskGetSchedulerState>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d102      	bne.n	800c570 <xQueueGenericSend+0x74>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d101      	bne.n	800c574 <xQueueGenericSend+0x78>
 800c570:	2301      	movs	r3, #1
 800c572:	e000      	b.n	800c576 <xQueueGenericSend+0x7a>
 800c574:	2300      	movs	r3, #0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d103      	bne.n	800c582 <xQueueGenericSend+0x86>
 800c57a:	f002 fbbd 	bl	800ecf8 <ulSetInterruptMask>
 800c57e:	bf00      	nop
 800c580:	e7fd      	b.n	800c57e <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c582:	f002 f9ef 	bl	800e964 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c58a:	6a3b      	ldr	r3, [r7, #32]
 800c58c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c58e:	429a      	cmp	r2, r3
 800c590:	d302      	bcc.n	800c598 <xQueueGenericSend+0x9c>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b02      	cmp	r3, #2
 800c596:	d11d      	bne.n	800c5d4 <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	68b9      	ldr	r1, [r7, #8]
 800c59c:	6a38      	ldr	r0, [r7, #32]
 800c59e:	f000 fbb4 	bl	800cd0a <prvCopyDataToQueue>
 800c5a2:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d00a      	beq.n	800c5c2 <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	3324      	adds	r3, #36	@ 0x24
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f001 fa69 	bl	800da88 <xTaskRemoveFromEventList>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d007      	beq.n	800c5cc <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c5bc:	f002 f9c0 	bl	800e940 <vPortYield>
 800c5c0:	e004      	b.n	800c5cc <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d001      	beq.n	800c5cc <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800c5c8:	f002 f9ba 	bl	800e940 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c5cc:	f002 f9dc 	bl	800e988 <vPortExitCritical>
                return pdPASS;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e05c      	b.n	800c68e <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d103      	bne.n	800c5e2 <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c5da:	f002 f9d5 	bl	800e988 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	e055      	b.n	800c68e <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d106      	bne.n	800c5f6 <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c5e8:	f107 0314 	add.w	r3, r7, #20
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f001 fb19 	bl	800dc24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c5f6:	f002 f9c7 	bl	800e988 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c5fa:	f000 ff6d 	bl	800d4d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c5fe:	f002 f9b1 	bl	800e964 <vPortEnterCritical>
 800c602:	6a3b      	ldr	r3, [r7, #32]
 800c604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c608:	b25b      	sxtb	r3, r3
 800c60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c60e:	d103      	bne.n	800c618 <xQueueGenericSend+0x11c>
 800c610:	6a3b      	ldr	r3, [r7, #32]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c61e:	b25b      	sxtb	r3, r3
 800c620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c624:	d103      	bne.n	800c62e <xQueueGenericSend+0x132>
 800c626:	6a3b      	ldr	r3, [r7, #32]
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c62e:	f002 f9ab 	bl	800e988 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c632:	1d3a      	adds	r2, r7, #4
 800c634:	f107 0314 	add.w	r3, r7, #20
 800c638:	4611      	mov	r1, r2
 800c63a:	4618      	mov	r0, r3
 800c63c:	f001 fb08 	bl	800dc50 <xTaskCheckForTimeOut>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d11d      	bne.n	800c682 <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c646:	6a38      	ldr	r0, [r7, #32]
 800c648:	f000 fc57 	bl	800cefa <prvIsQueueFull>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d011      	beq.n	800c676 <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	3310      	adds	r3, #16
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	4611      	mov	r1, r2
 800c65a:	4618      	mov	r0, r3
 800c65c:	f001 f9b8 	bl	800d9d0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800c660:	6a38      	ldr	r0, [r7, #32]
 800c662:	f000 fbe2 	bl	800ce2a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800c666:	f000 ff45 	bl	800d4f4 <xTaskResumeAll>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d188      	bne.n	800c582 <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 800c670:	f002 f966 	bl	800e940 <vPortYield>
 800c674:	e785      	b.n	800c582 <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800c676:	6a38      	ldr	r0, [r7, #32]
 800c678:	f000 fbd7 	bl	800ce2a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c67c:	f000 ff3a 	bl	800d4f4 <xTaskResumeAll>
 800c680:	e77f      	b.n	800c582 <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800c682:	6a38      	ldr	r0, [r7, #32]
 800c684:	f000 fbd1 	bl	800ce2a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c688:	f000 ff34 	bl	800d4f4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800c68c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3728      	adds	r7, #40	@ 0x28
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b08a      	sub	sp, #40	@ 0x28
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	60f8      	str	r0, [r7, #12]
 800c69e:	60b9      	str	r1, [r7, #8]
 800c6a0:	607a      	str	r2, [r7, #4]
 800c6a2:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c6a8:	6a3b      	ldr	r3, [r7, #32]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d103      	bne.n	800c6b6 <xQueueGenericSendFromISR+0x20>
 800c6ae:	f002 fb23 	bl	800ecf8 <ulSetInterruptMask>
 800c6b2:	bf00      	nop
 800c6b4:	e7fd      	b.n	800c6b2 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d103      	bne.n	800c6c4 <xQueueGenericSendFromISR+0x2e>
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d101      	bne.n	800c6c8 <xQueueGenericSendFromISR+0x32>
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e000      	b.n	800c6ca <xQueueGenericSendFromISR+0x34>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d103      	bne.n	800c6d6 <xQueueGenericSendFromISR+0x40>
 800c6ce:	f002 fb13 	bl	800ecf8 <ulSetInterruptMask>
 800c6d2:	bf00      	nop
 800c6d4:	e7fd      	b.n	800c6d2 <xQueueGenericSendFromISR+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d103      	bne.n	800c6e4 <xQueueGenericSendFromISR+0x4e>
 800c6dc:	6a3b      	ldr	r3, [r7, #32]
 800c6de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d101      	bne.n	800c6e8 <xQueueGenericSendFromISR+0x52>
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e000      	b.n	800c6ea <xQueueGenericSendFromISR+0x54>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d103      	bne.n	800c6f6 <xQueueGenericSendFromISR+0x60>
 800c6ee:	f002 fb03 	bl	800ecf8 <ulSetInterruptMask>
 800c6f2:	bf00      	nop
 800c6f4:	e7fd      	b.n	800c6f2 <xQueueGenericSendFromISR+0x5c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6f6:	f002 fa99 	bl	800ec2c <vPortValidateInterruptPriority>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6fa:	f002 fafd 	bl	800ecf8 <ulSetInterruptMask>
 800c6fe:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c700:	6a3b      	ldr	r3, [r7, #32]
 800c702:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c704:	6a3b      	ldr	r3, [r7, #32]
 800c706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c708:	429a      	cmp	r2, r3
 800c70a:	d302      	bcc.n	800c712 <xQueueGenericSendFromISR+0x7c>
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d13d      	bne.n	800c78e <xQueueGenericSendFromISR+0xf8>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c718:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c71e:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c720:	683a      	ldr	r2, [r7, #0]
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	6a38      	ldr	r0, [r7, #32]
 800c726:	f000 faf0 	bl	800cd0a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c72a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c732:	d112      	bne.n	800c75a <xQueueGenericSendFromISR+0xc4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c734:	6a3b      	ldr	r3, [r7, #32]
 800c736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d025      	beq.n	800c788 <xQueueGenericSendFromISR+0xf2>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	3324      	adds	r3, #36	@ 0x24
 800c740:	4618      	mov	r0, r3
 800c742:	f001 f9a1 	bl	800da88 <xTaskRemoveFromEventList>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d01d      	beq.n	800c788 <xQueueGenericSendFromISR+0xf2>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d01a      	beq.n	800c788 <xQueueGenericSendFromISR+0xf2>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2201      	movs	r2, #1
 800c756:	601a      	str	r2, [r3, #0]
 800c758:	e016      	b.n	800c788 <xQueueGenericSendFromISR+0xf2>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c75a:	f000 ffc9 	bl	800d6f0 <uxTaskGetNumberOfTasks>
 800c75e:	6138      	str	r0, [r7, #16]
 800c760:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	429a      	cmp	r2, r3
 800c768:	d90e      	bls.n	800c788 <xQueueGenericSendFromISR+0xf2>
 800c76a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c76e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c770:	d103      	bne.n	800c77a <xQueueGenericSendFromISR+0xe4>
 800c772:	f002 fac1 	bl	800ecf8 <ulSetInterruptMask>
 800c776:	bf00      	nop
 800c778:	e7fd      	b.n	800c776 <xQueueGenericSendFromISR+0xe0>
 800c77a:	7efb      	ldrb	r3, [r7, #27]
 800c77c:	3301      	adds	r3, #1
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	b25a      	sxtb	r2, r3
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c788:	2301      	movs	r3, #1
 800c78a:	627b      	str	r3, [r7, #36]	@ 0x24
        {
 800c78c:	e001      	b.n	800c792 <xQueueGenericSendFromISR+0xfc>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c78e:	2300      	movs	r3, #0
 800c790:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c792:	69f8      	ldr	r0, [r7, #28]
 800c794:	f002 fabd 	bl	800ed12 <vClearInterruptMask>

    return xReturn;
 800c798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3728      	adds	r7, #40	@ 0x28
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b088      	sub	sp, #32
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d103      	bne.n	800c7be <xQueueGiveFromISR+0x1c>
 800c7b6:	f002 fa9f 	bl	800ecf8 <ulSetInterruptMask>
 800c7ba:	bf00      	nop
 800c7bc:	e7fd      	b.n	800c7ba <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d003      	beq.n	800c7ce <xQueueGiveFromISR+0x2c>
 800c7c6:	f002 fa97 	bl	800ecf8 <ulSetInterruptMask>
 800c7ca:	bf00      	nop
 800c7cc:	e7fd      	b.n	800c7ca <xQueueGiveFromISR+0x28>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d103      	bne.n	800c7de <xQueueGiveFromISR+0x3c>
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <xQueueGiveFromISR+0x40>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e000      	b.n	800c7e4 <xQueueGiveFromISR+0x42>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d103      	bne.n	800c7f0 <xQueueGiveFromISR+0x4e>
 800c7e8:	f002 fa86 	bl	800ecf8 <ulSetInterruptMask>
 800c7ec:	bf00      	nop
 800c7ee:	e7fd      	b.n	800c7ec <xQueueGiveFromISR+0x4a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7f0:	f002 fa1c 	bl	800ec2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7f4:	f002 fa80 	bl	800ecf8 <ulSetInterruptMask>
 800c7f8:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7fe:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	429a      	cmp	r2, r3
 800c808:	d239      	bcs.n	800c87e <xQueueGiveFromISR+0xdc>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c810:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	1c5a      	adds	r2, r3, #1
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c81a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c822:	d112      	bne.n	800c84a <xQueueGiveFromISR+0xa8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d025      	beq.n	800c878 <xQueueGiveFromISR+0xd6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	3324      	adds	r3, #36	@ 0x24
 800c830:	4618      	mov	r0, r3
 800c832:	f001 f929 	bl	800da88 <xTaskRemoveFromEventList>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d01d      	beq.n	800c878 <xQueueGiveFromISR+0xd6>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d01a      	beq.n	800c878 <xQueueGiveFromISR+0xd6>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	2201      	movs	r2, #1
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	e016      	b.n	800c878 <xQueueGiveFromISR+0xd6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c84a:	f000 ff51 	bl	800d6f0 <uxTaskGetNumberOfTasks>
 800c84e:	60b8      	str	r0, [r7, #8]
 800c850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	429a      	cmp	r2, r3
 800c858:	d90e      	bls.n	800c878 <xQueueGiveFromISR+0xd6>
 800c85a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c85e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c860:	d103      	bne.n	800c86a <xQueueGiveFromISR+0xc8>
 800c862:	f002 fa49 	bl	800ecf8 <ulSetInterruptMask>
 800c866:	bf00      	nop
 800c868:	e7fd      	b.n	800c866 <xQueueGiveFromISR+0xc4>
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
 800c86c:	3301      	adds	r3, #1
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	b25a      	sxtb	r2, r3
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c878:	2301      	movs	r3, #1
 800c87a:	61fb      	str	r3, [r7, #28]
 800c87c:	e001      	b.n	800c882 <xQueueGiveFromISR+0xe0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c87e:	2300      	movs	r3, #0
 800c880:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c882:	6978      	ldr	r0, [r7, #20]
 800c884:	f002 fa45 	bl	800ed12 <vClearInterruptMask>

    return xReturn;
 800c888:	69fb      	ldr	r3, [r7, #28]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3720      	adds	r7, #32
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b08a      	sub	sp, #40	@ 0x28
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c8a6:	6a3b      	ldr	r3, [r7, #32]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d103      	bne.n	800c8b4 <xQueueReceive+0x22>
 800c8ac:	f002 fa24 	bl	800ecf8 <ulSetInterruptMask>
 800c8b0:	bf00      	nop
 800c8b2:	e7fd      	b.n	800c8b0 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d103      	bne.n	800c8c2 <xQueueReceive+0x30>
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d101      	bne.n	800c8c6 <xQueueReceive+0x34>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e000      	b.n	800c8c8 <xQueueReceive+0x36>
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d103      	bne.n	800c8d4 <xQueueReceive+0x42>
 800c8cc:	f002 fa14 	bl	800ecf8 <ulSetInterruptMask>
 800c8d0:	bf00      	nop
 800c8d2:	e7fd      	b.n	800c8d0 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8d4:	f001 fae2 	bl	800de9c <xTaskGetSchedulerState>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d102      	bne.n	800c8e4 <xQueueReceive+0x52>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <xQueueReceive+0x56>
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	e000      	b.n	800c8ea <xQueueReceive+0x58>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d103      	bne.n	800c8f6 <xQueueReceive+0x64>
 800c8ee:	f002 fa03 	bl	800ecf8 <ulSetInterruptMask>
 800c8f2:	bf00      	nop
 800c8f4:	e7fd      	b.n	800c8f2 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c8f6:	f002 f835 	bl	800e964 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8fe:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d019      	beq.n	800c93a <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c906:	68b9      	ldr	r1, [r7, #8]
 800c908:	6a38      	ldr	r0, [r7, #32]
 800c90a:	f000 fa68 	bl	800cdde <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	1e5a      	subs	r2, r3, #1
 800c912:	6a3b      	ldr	r3, [r7, #32]
 800c914:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d009      	beq.n	800c932 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	3310      	adds	r3, #16
 800c922:	4618      	mov	r0, r3
 800c924:	f001 f8b0 	bl	800da88 <xTaskRemoveFromEventList>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d001      	beq.n	800c932 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c92e:	f002 f807 	bl	800e940 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c932:	f002 f829 	bl	800e988 <vPortExitCritical>
                return pdPASS;
 800c936:	2301      	movs	r3, #1
 800c938:	e063      	b.n	800ca02 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d103      	bne.n	800c948 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c940:	f002 f822 	bl	800e988 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800c944:	2300      	movs	r3, #0
 800c946:	e05c      	b.n	800ca02 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d106      	bne.n	800c95c <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c94e:	f107 0314 	add.w	r3, r7, #20
 800c952:	4618      	mov	r0, r3
 800c954:	f001 f966 	bl	800dc24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c958:	2301      	movs	r3, #1
 800c95a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c95c:	f002 f814 	bl	800e988 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c960:	f000 fdba 	bl	800d4d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c964:	f001 fffe 	bl	800e964 <vPortEnterCritical>
 800c968:	6a3b      	ldr	r3, [r7, #32]
 800c96a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c96e:	b25b      	sxtb	r3, r3
 800c970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c974:	d103      	bne.n	800c97e <xQueueReceive+0xec>
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c984:	b25b      	sxtb	r3, r3
 800c986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98a:	d103      	bne.n	800c994 <xQueueReceive+0x102>
 800c98c:	6a3b      	ldr	r3, [r7, #32]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c994:	f001 fff8 	bl	800e988 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c998:	1d3a      	adds	r2, r7, #4
 800c99a:	f107 0314 	add.w	r3, r7, #20
 800c99e:	4611      	mov	r1, r2
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f001 f955 	bl	800dc50 <xTaskCheckForTimeOut>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d11d      	bne.n	800c9e8 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9ac:	6a38      	ldr	r0, [r7, #32]
 800c9ae:	f000 fa8e 	bl	800cece <prvIsQueueEmpty>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d011      	beq.n	800c9dc <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c9b8:	6a3b      	ldr	r3, [r7, #32]
 800c9ba:	3324      	adds	r3, #36	@ 0x24
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	4611      	mov	r1, r2
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f001 f805 	bl	800d9d0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800c9c6:	6a38      	ldr	r0, [r7, #32]
 800c9c8:	f000 fa2f 	bl	800ce2a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800c9cc:	f000 fd92 	bl	800d4f4 <xTaskResumeAll>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d18f      	bne.n	800c8f6 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800c9d6:	f001 ffb3 	bl	800e940 <vPortYield>
 800c9da:	e78c      	b.n	800c8f6 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800c9dc:	6a38      	ldr	r0, [r7, #32]
 800c9de:	f000 fa24 	bl	800ce2a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c9e2:	f000 fd87 	bl	800d4f4 <xTaskResumeAll>
 800c9e6:	e786      	b.n	800c8f6 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800c9e8:	6a38      	ldr	r0, [r7, #32]
 800c9ea:	f000 fa1e 	bl	800ce2a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c9ee:	f000 fd81 	bl	800d4f4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9f2:	6a38      	ldr	r0, [r7, #32]
 800c9f4:	f000 fa6b 	bl	800cece <prvIsQueueEmpty>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f43f af7b 	beq.w	800c8f6 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800ca00:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3728      	adds	r7, #40	@ 0x28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b08a      	sub	sp, #40	@ 0x28
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
 800ca12:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800ca14:	2300      	movs	r3, #0
 800ca16:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d103      	bne.n	800ca2e <xQueueSemaphoreTake+0x24>
 800ca26:	f002 f967 	bl	800ecf8 <ulSetInterruptMask>
 800ca2a:	bf00      	nop
 800ca2c:	e7fd      	b.n	800ca2a <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d003      	beq.n	800ca3e <xQueueSemaphoreTake+0x34>
 800ca36:	f002 f95f 	bl	800ecf8 <ulSetInterruptMask>
 800ca3a:	bf00      	nop
 800ca3c:	e7fd      	b.n	800ca3a <xQueueSemaphoreTake+0x30>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca3e:	f001 fa2d 	bl	800de9c <xTaskGetSchedulerState>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d102      	bne.n	800ca4e <xQueueSemaphoreTake+0x44>
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d101      	bne.n	800ca52 <xQueueSemaphoreTake+0x48>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e000      	b.n	800ca54 <xQueueSemaphoreTake+0x4a>
 800ca52:	2300      	movs	r3, #0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d103      	bne.n	800ca60 <xQueueSemaphoreTake+0x56>
 800ca58:	f002 f94e 	bl	800ecf8 <ulSetInterruptMask>
 800ca5c:	bf00      	nop
 800ca5e:	e7fd      	b.n	800ca5c <xQueueSemaphoreTake+0x52>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ca60:	f001 ff80 	bl	800e964 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca68:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d01e      	beq.n	800caae <xQueueSemaphoreTake+0xa4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	1e5a      	subs	r2, r3, #1
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d104      	bne.n	800ca8a <xQueueSemaphoreTake+0x80>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ca80:	f001 fbde 	bl	800e240 <pvTaskIncrementMutexHeldCount>
 800ca84:	4602      	mov	r2, r0
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	691b      	ldr	r3, [r3, #16]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d009      	beq.n	800caa6 <xQueueSemaphoreTake+0x9c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	3310      	adds	r3, #16
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 fff6 	bl	800da88 <xTaskRemoveFromEventList>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d001      	beq.n	800caa6 <xQueueSemaphoreTake+0x9c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800caa2:	f001 ff4d 	bl	800e940 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800caa6:	f001 ff6f 	bl	800e988 <vPortExitCritical>
                return pdPASS;
 800caaa:	2301      	movs	r3, #1
 800caac:	e083      	b.n	800cbb6 <xQueueSemaphoreTake+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d103      	bne.n	800cabc <xQueueSemaphoreTake+0xb2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800cab4:	f001 ff68 	bl	800e988 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800cab8:	2300      	movs	r3, #0
 800caba:	e07c      	b.n	800cbb6 <xQueueSemaphoreTake+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d106      	bne.n	800cad0 <xQueueSemaphoreTake+0xc6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800cac2:	f107 030c 	add.w	r3, r7, #12
 800cac6:	4618      	mov	r0, r3
 800cac8:	f001 f8ac 	bl	800dc24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800cacc:	2301      	movs	r3, #1
 800cace:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800cad0:	f001 ff5a 	bl	800e988 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800cad4:	f000 fd00 	bl	800d4d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800cad8:	f001 ff44 	bl	800e964 <vPortEnterCritical>
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cae2:	b25b      	sxtb	r3, r3
 800cae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae8:	d103      	bne.n	800caf2 <xQueueSemaphoreTake+0xe8>
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	2200      	movs	r2, #0
 800caee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800caf8:	b25b      	sxtb	r3, r3
 800cafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafe:	d103      	bne.n	800cb08 <xQueueSemaphoreTake+0xfe>
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cb08:	f001 ff3e 	bl	800e988 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb0c:	463a      	mov	r2, r7
 800cb0e:	f107 030c 	add.w	r3, r7, #12
 800cb12:	4611      	mov	r1, r2
 800cb14:	4618      	mov	r0, r3
 800cb16:	f001 f89b 	bl	800dc50 <xTaskCheckForTimeOut>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d12c      	bne.n	800cb7a <xQueueSemaphoreTake+0x170>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb20:	69f8      	ldr	r0, [r7, #28]
 800cb22:	f000 f9d4 	bl	800cece <prvIsQueueEmpty>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d020      	beq.n	800cb6e <xQueueSemaphoreTake+0x164>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d109      	bne.n	800cb48 <xQueueSemaphoreTake+0x13e>
                    {
                        taskENTER_CRITICAL();
 800cb34:	f001 ff16 	bl	800e964 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f001 f9cb 	bl	800ded8 <xTaskPriorityInherit>
 800cb42:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800cb44:	f001 ff20 	bl	800e988 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	3324      	adds	r3, #36	@ 0x24
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	4611      	mov	r1, r2
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 ff3d 	bl	800d9d0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cb56:	69f8      	ldr	r0, [r7, #28]
 800cb58:	f000 f967 	bl	800ce2a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cb5c:	f000 fcca 	bl	800d4f4 <xTaskResumeAll>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f47f af7c 	bne.w	800ca60 <xQueueSemaphoreTake+0x56>
                {
                    portYIELD_WITHIN_API();
 800cb68:	f001 feea 	bl	800e940 <vPortYield>
 800cb6c:	e778      	b.n	800ca60 <xQueueSemaphoreTake+0x56>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800cb6e:	69f8      	ldr	r0, [r7, #28]
 800cb70:	f000 f95b 	bl	800ce2a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cb74:	f000 fcbe 	bl	800d4f4 <xTaskResumeAll>
 800cb78:	e772      	b.n	800ca60 <xQueueSemaphoreTake+0x56>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800cb7a:	69f8      	ldr	r0, [r7, #28]
 800cb7c:	f000 f955 	bl	800ce2a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cb80:	f000 fcb8 	bl	800d4f4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb84:	69f8      	ldr	r0, [r7, #28]
 800cb86:	f000 f9a2 	bl	800cece <prvIsQueueEmpty>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f43f af67 	beq.w	800ca60 <xQueueSemaphoreTake+0x56>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800cb92:	6a3b      	ldr	r3, [r7, #32]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d00d      	beq.n	800cbb4 <xQueueSemaphoreTake+0x1aa>
                    {
                        taskENTER_CRITICAL();
 800cb98:	f001 fee4 	bl	800e964 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cb9c:	69f8      	ldr	r0, [r7, #28]
 800cb9e:	f000 f89c 	bl	800ccda <prvGetDisinheritPriorityAfterTimeout>
 800cba2:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	6979      	ldr	r1, [r7, #20]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f001 faac 	bl	800e108 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800cbb0:	f001 feea 	bl	800e988 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800cbb4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3728      	adds	r7, #40	@ 0x28
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b08a      	sub	sp, #40	@ 0x28
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	60f8      	str	r0, [r7, #12]
 800cbc6:	60b9      	str	r1, [r7, #8]
 800cbc8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800cbce:	6a3b      	ldr	r3, [r7, #32]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d103      	bne.n	800cbdc <xQueueReceiveFromISR+0x1e>
 800cbd4:	f002 f890 	bl	800ecf8 <ulSetInterruptMask>
 800cbd8:	bf00      	nop
 800cbda:	e7fd      	b.n	800cbd8 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d103      	bne.n	800cbea <xQueueReceiveFromISR+0x2c>
 800cbe2:	6a3b      	ldr	r3, [r7, #32]
 800cbe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d101      	bne.n	800cbee <xQueueReceiveFromISR+0x30>
 800cbea:	2301      	movs	r3, #1
 800cbec:	e000      	b.n	800cbf0 <xQueueReceiveFromISR+0x32>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d103      	bne.n	800cbfc <xQueueReceiveFromISR+0x3e>
 800cbf4:	f002 f880 	bl	800ecf8 <ulSetInterruptMask>
 800cbf8:	bf00      	nop
 800cbfa:	e7fd      	b.n	800cbf8 <xQueueReceiveFromISR+0x3a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbfc:	f002 f816 	bl	800ec2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc00:	f002 f87a 	bl	800ecf8 <ulSetInterruptMask>
 800cc04:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc06:	6a3b      	ldr	r3, [r7, #32]
 800cc08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc0a:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d03d      	beq.n	800cc8e <xQueueReceiveFromISR+0xd0>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800cc12:	6a3b      	ldr	r3, [r7, #32]
 800cc14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc18:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cc1a:	68b9      	ldr	r1, [r7, #8]
 800cc1c:	6a38      	ldr	r0, [r7, #32]
 800cc1e:	f000 f8de 	bl	800cdde <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	1e5a      	subs	r2, r3, #1
 800cc26:	6a3b      	ldr	r3, [r7, #32]
 800cc28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800cc2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc32:	d112      	bne.n	800cc5a <xQueueReceiveFromISR+0x9c>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc34:	6a3b      	ldr	r3, [r7, #32]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d025      	beq.n	800cc88 <xQueueReceiveFromISR+0xca>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc3c:	6a3b      	ldr	r3, [r7, #32]
 800cc3e:	3310      	adds	r3, #16
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 ff21 	bl	800da88 <xTaskRemoveFromEventList>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d01d      	beq.n	800cc88 <xQueueReceiveFromISR+0xca>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d01a      	beq.n	800cc88 <xQueueReceiveFromISR+0xca>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2201      	movs	r2, #1
 800cc56:	601a      	str	r2, [r3, #0]
 800cc58:	e016      	b.n	800cc88 <xQueueReceiveFromISR+0xca>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800cc5a:	f000 fd49 	bl	800d6f0 <uxTaskGetNumberOfTasks>
 800cc5e:	6138      	str	r0, [r7, #16]
 800cc60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc64:	693a      	ldr	r2, [r7, #16]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d90e      	bls.n	800cc88 <xQueueReceiveFromISR+0xca>
 800cc6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc6e:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc70:	d103      	bne.n	800cc7a <xQueueReceiveFromISR+0xbc>
 800cc72:	f002 f841 	bl	800ecf8 <ulSetInterruptMask>
 800cc76:	bf00      	nop
 800cc78:	e7fd      	b.n	800cc76 <xQueueReceiveFromISR+0xb8>
 800cc7a:	7dfb      	ldrb	r3, [r7, #23]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	b25a      	sxtb	r2, r3
 800cc82:	6a3b      	ldr	r3, [r7, #32]
 800cc84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc8c:	e001      	b.n	800cc92 <xQueueReceiveFromISR+0xd4>
        }
        else
        {
            xReturn = pdFAIL;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	627b      	str	r3, [r7, #36]	@ 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800cc92:	69f8      	ldr	r0, [r7, #28]
 800cc94:	f002 f83d 	bl	800ed12 <vClearInterruptMask>

    return xReturn;
 800cc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3728      	adds	r7, #40	@ 0x28
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b084      	sub	sp, #16
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d103      	bne.n	800ccbc <vQueueDelete+0x1a>
 800ccb4:	f002 f820 	bl	800ecf8 <ulSetInterruptMask>
 800ccb8:	bf00      	nop
 800ccba:	e7fd      	b.n	800ccb8 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f000 f97b 	bl	800cfb8 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d102      	bne.n	800ccd2 <vQueueDelete+0x30>
        {
            vPortFree( pxQueue );
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f002 f937 	bl	800ef40 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ccd2:	bf00      	nop
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800ccda:	b480      	push	{r7}
 800ccdc:	b085      	sub	sp, #20
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d006      	beq.n	800ccf8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ccf4:	60fb      	str	r3, [r7, #12]
 800ccf6:	e001      	b.n	800ccfc <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
    }
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3714      	adds	r7, #20
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b086      	sub	sp, #24
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	60f8      	str	r0, [r7, #12]
 800cd12:	60b9      	str	r1, [r7, #8]
 800cd14:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800cd16:	2300      	movs	r3, #0
 800cd18:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd1e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10d      	bne.n	800cd44 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d14d      	bne.n	800cdcc <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	4618      	mov	r0, r3
 800cd36:	f001 f95f 	bl	800dff8 <xTaskPriorityDisinherit>
 800cd3a:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	609a      	str	r2, [r3, #8]
 800cd42:	e043      	b.n	800cdcc <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d119      	bne.n	800cd7e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	6858      	ldr	r0, [r3, #4]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd52:	461a      	mov	r2, r3
 800cd54:	68b9      	ldr	r1, [r7, #8]
 800cd56:	f020 f9d4 	bl	802d102 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd62:	441a      	add	r2, r3
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d32b      	bcc.n	800cdcc <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	605a      	str	r2, [r3, #4]
 800cd7c:	e026      	b.n	800cdcc <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	68d8      	ldr	r0, [r3, #12]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd86:	461a      	mov	r2, r3
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	f020 f9ba 	bl	802d102 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	68da      	ldr	r2, [r3, #12]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd96:	425b      	negs	r3, r3
 800cd98:	441a      	add	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	68da      	ldr	r2, [r3, #12]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d207      	bcs.n	800cdba <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	689a      	ldr	r2, [r3, #8]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdb2:	425b      	negs	r3, r3
 800cdb4:	441a      	add	r2, r3
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	d105      	bne.n	800cdcc <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d002      	beq.n	800cdcc <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	1c5a      	adds	r2, r3, #1
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800cdd4:	697b      	ldr	r3, [r7, #20]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b082      	sub	sp, #8
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d018      	beq.n	800ce22 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	68da      	ldr	r2, [r3, #12]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdf8:	441a      	add	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	68da      	ldr	r2, [r3, #12]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	689b      	ldr	r3, [r3, #8]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d303      	bcc.n	800ce12 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68d9      	ldr	r1, [r3, #12]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	6838      	ldr	r0, [r7, #0]
 800ce1e:	f020 f970 	bl	802d102 <memcpy>
    }
}
 800ce22:	bf00      	nop
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b084      	sub	sp, #16
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800ce32:	f001 fd97 	bl	800e964 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce3c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce3e:	e011      	b.n	800ce64 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d012      	beq.n	800ce6e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3324      	adds	r3, #36	@ 0x24
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f000 fe1b 	bl	800da88 <xTaskRemoveFromEventList>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d001      	beq.n	800ce5c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800ce58:	f000 ff52 	bl	800dd00 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	dce9      	bgt.n	800ce40 <prvUnlockQueue+0x16>
 800ce6c:	e000      	b.n	800ce70 <prvUnlockQueue+0x46>
                    break;
 800ce6e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	22ff      	movs	r2, #255	@ 0xff
 800ce74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800ce78:	f001 fd86 	bl	800e988 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800ce7c:	f001 fd72 	bl	800e964 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce86:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce88:	e011      	b.n	800ceae <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d012      	beq.n	800ceb8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3310      	adds	r3, #16
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 fdf6 	bl	800da88 <xTaskRemoveFromEventList>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d001      	beq.n	800cea6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800cea2:	f000 ff2d 	bl	800dd00 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800ceae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	dce9      	bgt.n	800ce8a <prvUnlockQueue+0x60>
 800ceb6:	e000      	b.n	800ceba <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800ceb8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	22ff      	movs	r2, #255	@ 0xff
 800cebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800cec2:	f001 fd61 	bl	800e988 <vPortExitCritical>
}
 800cec6:	bf00      	nop
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b084      	sub	sp, #16
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800ced6:	f001 fd45 	bl	800e964 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d102      	bne.n	800cee8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800cee2:	2301      	movs	r3, #1
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	e001      	b.n	800ceec <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800cee8:	2300      	movs	r3, #0
 800ceea:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800ceec:	f001 fd4c 	bl	800e988 <vPortExitCritical>

    return xReturn;
 800cef0:	68fb      	ldr	r3, [r7, #12]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b084      	sub	sp, #16
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cf02:	f001 fd2f 	bl	800e964 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d102      	bne.n	800cf18 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800cf12:	2301      	movs	r3, #1
 800cf14:	60fb      	str	r3, [r7, #12]
 800cf16:	e001      	b.n	800cf1c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cf1c:	f001 fd34 	bl	800e988 <vPortExitCritical>

    return xReturn;
 800cf20:	68fb      	ldr	r3, [r7, #12]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
	...

0800cf2c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800cf36:	2300      	movs	r3, #0
 800cf38:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d103      	bne.n	800cf48 <vQueueAddToRegistry+0x1c>
 800cf40:	f001 feda 	bl	800ecf8 <ulSetInterruptMask>
 800cf44:	bf00      	nop
 800cf46:	e7fd      	b.n	800cf44 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d024      	beq.n	800cf98 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf4e:	2300      	movs	r3, #0
 800cf50:	60fb      	str	r3, [r7, #12]
 800cf52:	e01e      	b.n	800cf92 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800cf54:	4a17      	ldr	r2, [pc, #92]	@ (800cfb4 <vQueueAddToRegistry+0x88>)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	00db      	lsls	r3, r3, #3
 800cf5a:	4413      	add	r3, r2
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d105      	bne.n	800cf70 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	00db      	lsls	r3, r3, #3
 800cf68:	4a12      	ldr	r2, [pc, #72]	@ (800cfb4 <vQueueAddToRegistry+0x88>)
 800cf6a:	4413      	add	r3, r2
 800cf6c:	60bb      	str	r3, [r7, #8]
                    break;
 800cf6e:	e013      	b.n	800cf98 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10a      	bne.n	800cf8c <vQueueAddToRegistry+0x60>
 800cf76:	4a0f      	ldr	r2, [pc, #60]	@ (800cfb4 <vQueueAddToRegistry+0x88>)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d104      	bne.n	800cf8c <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	00db      	lsls	r3, r3, #3
 800cf86:	4a0b      	ldr	r2, [pc, #44]	@ (800cfb4 <vQueueAddToRegistry+0x88>)
 800cf88:	4413      	add	r3, r2
 800cf8a:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	60fb      	str	r3, [r7, #12]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2b07      	cmp	r3, #7
 800cf96:	d9dd      	bls.n	800cf54 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d005      	beq.n	800cfaa <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	683a      	ldr	r2, [r7, #0]
 800cfa2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800cfaa:	bf00      	nop
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	20046748 	.word	0x20046748

0800cfb8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d103      	bne.n	800cfce <vQueueUnregisterQueue+0x16>
 800cfc6:	f001 fe97 	bl	800ecf8 <ulSetInterruptMask>
 800cfca:	bf00      	nop
 800cfcc:	e7fd      	b.n	800cfca <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfce:	2300      	movs	r3, #0
 800cfd0:	60fb      	str	r3, [r7, #12]
 800cfd2:	e016      	b.n	800d002 <vQueueUnregisterQueue+0x4a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cfd4:	4a0f      	ldr	r2, [pc, #60]	@ (800d014 <vQueueUnregisterQueue+0x5c>)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	00db      	lsls	r3, r3, #3
 800cfda:	4413      	add	r3, r2
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d10b      	bne.n	800cffc <vQueueUnregisterQueue+0x44>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800cfe4:	4a0b      	ldr	r2, [pc, #44]	@ (800d014 <vQueueUnregisterQueue+0x5c>)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2100      	movs	r1, #0
 800cfea:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cfee:	4a09      	ldr	r2, [pc, #36]	@ (800d014 <vQueueUnregisterQueue+0x5c>)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	00db      	lsls	r3, r3, #3
 800cff4:	4413      	add	r3, r2
 800cff6:	2200      	movs	r2, #0
 800cff8:	605a      	str	r2, [r3, #4]
                break;
 800cffa:	e006      	b.n	800d00a <vQueueUnregisterQueue+0x52>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3301      	adds	r3, #1
 800d000:	60fb      	str	r3, [r7, #12]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2b07      	cmp	r3, #7
 800d006:	d9e5      	bls.n	800cfd4 <vQueueUnregisterQueue+0x1c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d008:	bf00      	nop
 800d00a:	bf00      	nop
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20046748 	.word	0x20046748

0800d018 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800d018:	b580      	push	{r7, lr}
 800d01a:	b086      	sub	sp, #24
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800d028:	f001 fc9c 	bl	800e964 <vPortEnterCritical>
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d032:	b25b      	sxtb	r3, r3
 800d034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d038:	d103      	bne.n	800d042 <vQueueWaitForMessageRestricted+0x2a>
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d048:	b25b      	sxtb	r3, r3
 800d04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d04e:	d103      	bne.n	800d058 <vQueueWaitForMessageRestricted+0x40>
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	2200      	movs	r2, #0
 800d054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d058:	f001 fc96 	bl	800e988 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d060:	2b00      	cmp	r3, #0
 800d062:	d106      	bne.n	800d072 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	3324      	adds	r3, #36	@ 0x24
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	68b9      	ldr	r1, [r7, #8]
 800d06c:	4618      	mov	r0, r3
 800d06e:	f000 fccd 	bl	800da0c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800d072:	6978      	ldr	r0, [r7, #20]
 800d074:	f7ff fed9 	bl	800ce2a <prvUnlockQueue>
    }
 800d078:	bf00      	nop
 800d07a:	3718      	adds	r7, #24
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800d080:	b580      	push	{r7, lr}
 800d082:	b08c      	sub	sp, #48	@ 0x30
 800d084:	af04      	add	r7, sp, #16
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
 800d08c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800d08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d090:	2b00      	cmp	r3, #0
 800d092:	d103      	bne.n	800d09c <xTaskCreateStatic+0x1c>
 800d094:	f001 fe30 	bl	800ecf8 <ulSetInterruptMask>
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800d09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d103      	bne.n	800d0aa <xTaskCreateStatic+0x2a>
 800d0a2:	f001 fe29 	bl	800ecf8 <ulSetInterruptMask>
 800d0a6:	bf00      	nop
 800d0a8:	e7fd      	b.n	800d0a6 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800d0aa:	235c      	movs	r3, #92	@ 0x5c
 800d0ac:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	2b5c      	cmp	r3, #92	@ 0x5c
 800d0b2:	d003      	beq.n	800d0bc <xTaskCreateStatic+0x3c>
 800d0b4:	f001 fe20 	bl	800ecf8 <ulSetInterruptMask>
 800d0b8:	bf00      	nop
 800d0ba:	e7fd      	b.n	800d0b8 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d0bc:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d023      	beq.n	800d10c <xTaskCreateStatic+0x8c>
 800d0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d020      	beq.n	800d10c <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0cc:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d0ce:	225c      	movs	r2, #92	@ 0x5c
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	69f8      	ldr	r0, [r7, #28]
 800d0d4:	f01f ff46 	bl	802cf64 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0dc:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	9303      	str	r3, [sp, #12]
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	9302      	str	r3, [sp, #8]
 800d0ee:	f107 0318 	add.w	r3, r7, #24
 800d0f2:	9301      	str	r3, [sp, #4]
 800d0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	68b9      	ldr	r1, [r7, #8]
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f000 f855 	bl	800d1ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d104:	69f8      	ldr	r0, [r7, #28]
 800d106:	f000 f8d5 	bl	800d2b4 <prvAddNewTaskToReadyList>
 800d10a:	e001      	b.n	800d110 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800d10c:	2300      	movs	r3, #0
 800d10e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d110:	69bb      	ldr	r3, [r7, #24]
    }
 800d112:	4618      	mov	r0, r3
 800d114:	3720      	adds	r7, #32
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b08c      	sub	sp, #48	@ 0x30
 800d11e:	af04      	add	r7, sp, #16
 800d120:	60f8      	str	r0, [r7, #12]
 800d122:	60b9      	str	r1, [r7, #8]
 800d124:	603b      	str	r3, [r7, #0]
 800d126:	4613      	mov	r3, r2
 800d128:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d12a:	88fb      	ldrh	r3, [r7, #6]
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	4618      	mov	r0, r3
 800d130:	f001 fe4a 	bl	800edc8 <pvPortMalloc>
 800d134:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d013      	beq.n	800d164 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d13c:	205c      	movs	r0, #92	@ 0x5c
 800d13e:	f001 fe43 	bl	800edc8 <pvPortMalloc>
 800d142:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d008      	beq.n	800d15c <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d14a:	225c      	movs	r2, #92	@ 0x5c
 800d14c:	2100      	movs	r1, #0
 800d14e:	69f8      	ldr	r0, [r7, #28]
 800d150:	f01f ff08 	bl	802cf64 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	697a      	ldr	r2, [r7, #20]
 800d158:	631a      	str	r2, [r3, #48]	@ 0x30
 800d15a:	e005      	b.n	800d168 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800d15c:	6978      	ldr	r0, [r7, #20]
 800d15e:	f001 feef 	bl	800ef40 <vPortFree>
 800d162:	e001      	b.n	800d168 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800d164:	2300      	movs	r3, #0
 800d166:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d017      	beq.n	800d19e <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d176:	88fa      	ldrh	r2, [r7, #6]
 800d178:	2300      	movs	r3, #0
 800d17a:	9303      	str	r3, [sp, #12]
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	9302      	str	r3, [sp, #8]
 800d180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	68b9      	ldr	r1, [r7, #8]
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f000 f80e 	bl	800d1ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d192:	69f8      	ldr	r0, [r7, #28]
 800d194:	f000 f88e 	bl	800d2b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800d198:	2301      	movs	r3, #1
 800d19a:	61bb      	str	r3, [r7, #24]
 800d19c:	e002      	b.n	800d1a4 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d19e:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d1a4:	69bb      	ldr	r3, [r7, #24]
    }
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3720      	adds	r7, #32
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b086      	sub	sp, #24
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	60f8      	str	r0, [r7, #12]
 800d1b6:	60b9      	str	r1, [r7, #8]
 800d1b8:	607a      	str	r2, [r7, #4]
 800d1ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	21a5      	movs	r1, #165	@ 0xa5
 800d1c8:	f01f fecc 	bl	802cf64 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4413      	add	r3, r2
 800d1dc:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	f023 0307 	bic.w	r3, r3, #7
 800d1e4:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	f003 0307 	and.w	r3, r3, #7
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d003      	beq.n	800d1f8 <prvInitialiseNewTask+0x4a>
 800d1f0:	f001 fd82 	bl	800ecf8 <ulSetInterruptMask>
 800d1f4:	bf00      	nop
 800d1f6:	e7fd      	b.n	800d1f4 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d01e      	beq.n	800d23c <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1fe:	2300      	movs	r3, #0
 800d200:	617b      	str	r3, [r7, #20]
 800d202:	e012      	b.n	800d22a <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	4413      	add	r3, r2
 800d20a:	7819      	ldrb	r1, [r3, #0]
 800d20c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	4413      	add	r3, r2
 800d212:	3334      	adds	r3, #52	@ 0x34
 800d214:	460a      	mov	r2, r1
 800d216:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	4413      	add	r3, r2
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d006      	beq.n	800d232 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	3301      	adds	r3, #1
 800d228:	617b      	str	r3, [r7, #20]
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	2b0f      	cmp	r3, #15
 800d22e:	d9e9      	bls.n	800d204 <prvInitialiseNewTask+0x56>
 800d230:	e000      	b.n	800d234 <prvInitialiseNewTask+0x86>
            {
                break;
 800d232:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d236:	2200      	movs	r2, #0
 800d238:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d23c:	6a3b      	ldr	r3, [r7, #32]
 800d23e:	2b37      	cmp	r3, #55	@ 0x37
 800d240:	d903      	bls.n	800d24a <prvInitialiseNewTask+0x9c>
 800d242:	f001 fd59 	bl	800ecf8 <ulSetInterruptMask>
 800d246:	bf00      	nop
 800d248:	e7fd      	b.n	800d246 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d24a:	6a3b      	ldr	r3, [r7, #32]
 800d24c:	2b37      	cmp	r3, #55	@ 0x37
 800d24e:	d901      	bls.n	800d254 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d250:	2337      	movs	r3, #55	@ 0x37
 800d252:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d256:	6a3a      	ldr	r2, [r7, #32]
 800d258:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800d25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25c:	6a3a      	ldr	r2, [r7, #32]
 800d25e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d262:	3304      	adds	r3, #4
 800d264:	4618      	mov	r0, r3
 800d266:	f7fe ff57 	bl	800c118 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d26c:	3318      	adds	r3, #24
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe ff52 	bl	800c118 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d278:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d27a:	6a3b      	ldr	r3, [r7, #32]
 800d27c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d282:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d288:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d28c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	6938      	ldr	r0, [r7, #16]
 800d294:	f001 fbc6 	bl	800ea24 <pxPortInitialiseStack>
 800d298:	4602      	mov	r2, r0
 800d29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d002      	beq.n	800d2aa <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d2aa:	bf00      	nop
 800d2ac:	3718      	adds	r7, #24
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
	...

0800d2b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d2bc:	f001 fb52 	bl	800e964 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d2c0:	4b3e      	ldr	r3, [pc, #248]	@ (800d3bc <prvAddNewTaskToReadyList+0x108>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	4a3d      	ldr	r2, [pc, #244]	@ (800d3bc <prvAddNewTaskToReadyList+0x108>)
 800d2c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d2ca:	4b3d      	ldr	r3, [pc, #244]	@ (800d3c0 <prvAddNewTaskToReadyList+0x10c>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d109      	bne.n	800d2e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d2d2:	4a3b      	ldr	r2, [pc, #236]	@ (800d3c0 <prvAddNewTaskToReadyList+0x10c>)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d2d8:	4b38      	ldr	r3, [pc, #224]	@ (800d3bc <prvAddNewTaskToReadyList+0x108>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d110      	bne.n	800d302 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d2e0:	f000 fd2a 	bl	800dd38 <prvInitialiseTaskLists>
 800d2e4:	e00d      	b.n	800d302 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d2e6:	4b37      	ldr	r3, [pc, #220]	@ (800d3c4 <prvAddNewTaskToReadyList+0x110>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d109      	bne.n	800d302 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d2ee:	4b34      	ldr	r3, [pc, #208]	@ (800d3c0 <prvAddNewTaskToReadyList+0x10c>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d802      	bhi.n	800d302 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d2fc:	4a30      	ldr	r2, [pc, #192]	@ (800d3c0 <prvAddNewTaskToReadyList+0x10c>)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d302:	4b31      	ldr	r3, [pc, #196]	@ (800d3c8 <prvAddNewTaskToReadyList+0x114>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	3301      	adds	r3, #1
 800d308:	4a2f      	ldr	r2, [pc, #188]	@ (800d3c8 <prvAddNewTaskToReadyList+0x114>)
 800d30a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d30c:	4b2e      	ldr	r3, [pc, #184]	@ (800d3c8 <prvAddNewTaskToReadyList+0x114>)
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d318:	4b2c      	ldr	r3, [pc, #176]	@ (800d3cc <prvAddNewTaskToReadyList+0x118>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d903      	bls.n	800d328 <prvAddNewTaskToReadyList+0x74>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d324:	4a29      	ldr	r2, [pc, #164]	@ (800d3cc <prvAddNewTaskToReadyList+0x118>)
 800d326:	6013      	str	r3, [r2, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d32c:	4928      	ldr	r1, [pc, #160]	@ (800d3d0 <prvAddNewTaskToReadyList+0x11c>)
 800d32e:	4613      	mov	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	440b      	add	r3, r1
 800d338:	3304      	adds	r3, #4
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	60fb      	str	r3, [r7, #12]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	609a      	str	r2, [r3, #8]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	689a      	ldr	r2, [r3, #8]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	60da      	str	r2, [r3, #12]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	3204      	adds	r2, #4
 800d354:	605a      	str	r2, [r3, #4]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	1d1a      	adds	r2, r3, #4
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	609a      	str	r2, [r3, #8]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d362:	4613      	mov	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4a19      	ldr	r2, [pc, #100]	@ (800d3d0 <prvAddNewTaskToReadyList+0x11c>)
 800d36c:	441a      	add	r2, r3
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	615a      	str	r2, [r3, #20]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d376:	4916      	ldr	r1, [pc, #88]	@ (800d3d0 <prvAddNewTaskToReadyList+0x11c>)
 800d378:	4613      	mov	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	440b      	add	r3, r1
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	1c59      	adds	r1, r3, #1
 800d386:	4812      	ldr	r0, [pc, #72]	@ (800d3d0 <prvAddNewTaskToReadyList+0x11c>)
 800d388:	4613      	mov	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	4413      	add	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4403      	add	r3, r0
 800d392:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d394:	f001 faf8 	bl	800e988 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d398:	4b0a      	ldr	r3, [pc, #40]	@ (800d3c4 <prvAddNewTaskToReadyList+0x110>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d008      	beq.n	800d3b2 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d3a0:	4b07      	ldr	r3, [pc, #28]	@ (800d3c0 <prvAddNewTaskToReadyList+0x10c>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d201      	bcs.n	800d3b2 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d3ae:	f001 fac7 	bl	800e940 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d3b2:	bf00      	nop
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20046c5c 	.word	0x20046c5c
 800d3c0:	20046788 	.word	0x20046788
 800d3c4:	20046c68 	.word	0x20046c68
 800d3c8:	20046c78 	.word	0x20046c78
 800d3cc:	20046c64 	.word	0x20046c64
 800d3d0:	2004678c 	.word	0x2004678c

0800d3d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d010      	beq.n	800d408 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 800d3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d41c <vTaskDelay+0x48>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d003      	beq.n	800d3f6 <vTaskDelay+0x22>
 800d3ee:	f001 fc83 	bl	800ecf8 <ulSetInterruptMask>
 800d3f2:	bf00      	nop
 800d3f4:	e7fd      	b.n	800d3f2 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800d3f6:	f000 f86f 	bl	800d4d8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d3fa:	2100      	movs	r1, #0
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 ff33 	bl	800e268 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d402:	f000 f877 	bl	800d4f4 <xTaskResumeAll>
 800d406:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800d40e:	f001 fa97 	bl	800e940 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d412:	bf00      	nop
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	20046c84 	.word	0x20046c84

0800d420 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b088      	sub	sp, #32
 800d424:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d426:	2300      	movs	r3, #0
 800d428:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d42a:	2300      	movs	r3, #0
 800d42c:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d42e:	463a      	mov	r2, r7
 800d430:	1d39      	adds	r1, r7, #4
 800d432:	f107 0308 	add.w	r3, r7, #8
 800d436:	4618      	mov	r0, r3
 800d438:	f7fe fe1a 	bl	800c070 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800d43c:	6839      	ldr	r1, [r7, #0]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	68ba      	ldr	r2, [r7, #8]
 800d442:	9202      	str	r2, [sp, #8]
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	2300      	movs	r3, #0
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	2300      	movs	r3, #0
 800d44c:	460a      	mov	r2, r1
 800d44e:	491b      	ldr	r1, [pc, #108]	@ (800d4bc <vTaskStartScheduler+0x9c>)
 800d450:	481b      	ldr	r0, [pc, #108]	@ (800d4c0 <vTaskStartScheduler+0xa0>)
 800d452:	f7ff fe15 	bl	800d080 <xTaskCreateStatic>
 800d456:	4603      	mov	r3, r0
 800d458:	4a1a      	ldr	r2, [pc, #104]	@ (800d4c4 <vTaskStartScheduler+0xa4>)
 800d45a:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800d45c:	4b19      	ldr	r3, [pc, #100]	@ (800d4c4 <vTaskStartScheduler+0xa4>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d002      	beq.n	800d46a <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800d464:	2301      	movs	r3, #1
 800d466:	60fb      	str	r3, [r7, #12]
 800d468:	e001      	b.n	800d46e <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800d46a:	2300      	movs	r3, #0
 800d46c:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2b01      	cmp	r3, #1
 800d472:	d102      	bne.n	800d47a <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800d474:	f000 ff66 	bl	800e344 <xTimerCreateTimerTask>
 800d478:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d10e      	bne.n	800d49e <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800d480:	f001 fc3a 	bl	800ecf8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d484:	4b10      	ldr	r3, [pc, #64]	@ (800d4c8 <vTaskStartScheduler+0xa8>)
 800d486:	f04f 32ff 	mov.w	r2, #4294967295
 800d48a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d48c:	4b0f      	ldr	r3, [pc, #60]	@ (800d4cc <vTaskStartScheduler+0xac>)
 800d48e:	2201      	movs	r2, #1
 800d490:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d492:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d0 <vTaskStartScheduler+0xb0>)
 800d494:	2200      	movs	r2, #0
 800d496:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800d498:	f001 fb4e 	bl	800eb38 <xPortStartScheduler>
 800d49c:	e007      	b.n	800d4ae <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a4:	d103      	bne.n	800d4ae <vTaskStartScheduler+0x8e>
 800d4a6:	f001 fc27 	bl	800ecf8 <ulSetInterruptMask>
 800d4aa:	bf00      	nop
 800d4ac:	e7fd      	b.n	800d4aa <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d4ae:	4b09      	ldr	r3, [pc, #36]	@ (800d4d4 <vTaskStartScheduler+0xb4>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
}
 800d4b2:	bf00      	nop
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	0802db10 	.word	0x0802db10
 800d4c0:	0800dd19 	.word	0x0800dd19
 800d4c4:	20046c80 	.word	0x20046c80
 800d4c8:	20046c7c 	.word	0x20046c7c
 800d4cc:	20046c68 	.word	0x20046c68
 800d4d0:	20046c60 	.word	0x20046c60
 800d4d4:	0802e86c 	.word	0x0802e86c

0800d4d8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d4d8:	b480      	push	{r7}
 800d4da:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d4dc:	4b04      	ldr	r3, [pc, #16]	@ (800d4f0 <vTaskSuspendAll+0x18>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	4a03      	ldr	r2, [pc, #12]	@ (800d4f0 <vTaskSuspendAll+0x18>)
 800d4e4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d4e6:	bf00      	nop
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	20046c84 	.word	0x20046c84

0800d4f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b086      	sub	sp, #24
 800d4f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d4fe:	2300      	movs	r3, #0
 800d500:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800d502:	4b6b      	ldr	r3, [pc, #428]	@ (800d6b0 <xTaskResumeAll+0x1bc>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d103      	bne.n	800d512 <xTaskResumeAll+0x1e>
 800d50a:	f001 fbf5 	bl	800ecf8 <ulSetInterruptMask>
 800d50e:	bf00      	nop
 800d510:	e7fd      	b.n	800d50e <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d512:	f001 fa27 	bl	800e964 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d516:	4b66      	ldr	r3, [pc, #408]	@ (800d6b0 <xTaskResumeAll+0x1bc>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	3b01      	subs	r3, #1
 800d51c:	4a64      	ldr	r2, [pc, #400]	@ (800d6b0 <xTaskResumeAll+0x1bc>)
 800d51e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d520:	4b63      	ldr	r3, [pc, #396]	@ (800d6b0 <xTaskResumeAll+0x1bc>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	f040 80bb 	bne.w	800d6a0 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d52a:	4b62      	ldr	r3, [pc, #392]	@ (800d6b4 <xTaskResumeAll+0x1c0>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f000 80b6 	beq.w	800d6a0 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d534:	e08b      	b.n	800d64e <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d536:	4b60      	ldr	r3, [pc, #384]	@ (800d6b8 <xTaskResumeAll+0x1c4>)
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d542:	60bb      	str	r3, [r7, #8]
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	69db      	ldr	r3, [r3, #28]
 800d548:	697a      	ldr	r2, [r7, #20]
 800d54a:	6a12      	ldr	r2, [r2, #32]
 800d54c:	609a      	str	r2, [r3, #8]
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	6a1b      	ldr	r3, [r3, #32]
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	69d2      	ldr	r2, [r2, #28]
 800d556:	605a      	str	r2, [r3, #4]
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	3318      	adds	r3, #24
 800d560:	429a      	cmp	r2, r3
 800d562:	d103      	bne.n	800d56c <xTaskResumeAll+0x78>
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	6a1a      	ldr	r2, [r3, #32]
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	605a      	str	r2, [r3, #4]
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	2200      	movs	r2, #0
 800d570:	629a      	str	r2, [r3, #40]	@ 0x28
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	1e5a      	subs	r2, r3, #1
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	695b      	ldr	r3, [r3, #20]
 800d580:	607b      	str	r3, [r7, #4]
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	68d2      	ldr	r2, [r2, #12]
 800d58a:	609a      	str	r2, [r3, #8]
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	697a      	ldr	r2, [r7, #20]
 800d592:	6892      	ldr	r2, [r2, #8]
 800d594:	605a      	str	r2, [r3, #4]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	685a      	ldr	r2, [r3, #4]
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	3304      	adds	r3, #4
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d103      	bne.n	800d5aa <xTaskResumeAll+0xb6>
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	68da      	ldr	r2, [r3, #12]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	605a      	str	r2, [r3, #4]
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	615a      	str	r2, [r3, #20]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	1e5a      	subs	r2, r3, #1
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5be:	4b3f      	ldr	r3, [pc, #252]	@ (800d6bc <xTaskResumeAll+0x1c8>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d903      	bls.n	800d5ce <xTaskResumeAll+0xda>
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5ca:	4a3c      	ldr	r2, [pc, #240]	@ (800d6bc <xTaskResumeAll+0x1c8>)
 800d5cc:	6013      	str	r3, [r2, #0]
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5d2:	493b      	ldr	r1, [pc, #236]	@ (800d6c0 <xTaskResumeAll+0x1cc>)
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	4413      	add	r3, r2
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	440b      	add	r3, r1
 800d5de:	3304      	adds	r3, #4
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	603b      	str	r3, [r7, #0]
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	683a      	ldr	r2, [r7, #0]
 800d5e8:	609a      	str	r2, [r3, #8]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	689a      	ldr	r2, [r3, #8]
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	60da      	str	r2, [r3, #12]
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	697a      	ldr	r2, [r7, #20]
 800d5f8:	3204      	adds	r2, #4
 800d5fa:	605a      	str	r2, [r3, #4]
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	1d1a      	adds	r2, r3, #4
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	609a      	str	r2, [r3, #8]
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d608:	4613      	mov	r3, r2
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	4413      	add	r3, r2
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	4a2b      	ldr	r2, [pc, #172]	@ (800d6c0 <xTaskResumeAll+0x1cc>)
 800d612:	441a      	add	r2, r3
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	615a      	str	r2, [r3, #20]
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d61c:	4928      	ldr	r1, [pc, #160]	@ (800d6c0 <xTaskResumeAll+0x1cc>)
 800d61e:	4613      	mov	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	4413      	add	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	440b      	add	r3, r1
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	1c59      	adds	r1, r3, #1
 800d62c:	4824      	ldr	r0, [pc, #144]	@ (800d6c0 <xTaskResumeAll+0x1cc>)
 800d62e:	4613      	mov	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	4413      	add	r3, r2
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	4403      	add	r3, r0
 800d638:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d63e:	4b21      	ldr	r3, [pc, #132]	@ (800d6c4 <xTaskResumeAll+0x1d0>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d644:	429a      	cmp	r2, r3
 800d646:	d902      	bls.n	800d64e <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800d648:	4b1f      	ldr	r3, [pc, #124]	@ (800d6c8 <xTaskResumeAll+0x1d4>)
 800d64a:	2201      	movs	r2, #1
 800d64c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d64e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6b8 <xTaskResumeAll+0x1c4>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	f47f af6f 	bne.w	800d536 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d001      	beq.n	800d662 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d65e:	f000 fc01 	bl	800de64 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d662:	4b1a      	ldr	r3, [pc, #104]	@ (800d6cc <xTaskResumeAll+0x1d8>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d010      	beq.n	800d690 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d66e:	f000 f84b 	bl	800d708 <xTaskIncrementTick>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d002      	beq.n	800d67e <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800d678:	4b13      	ldr	r3, [pc, #76]	@ (800d6c8 <xTaskResumeAll+0x1d4>)
 800d67a:	2201      	movs	r2, #1
 800d67c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	3b01      	subs	r3, #1
 800d682:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1f1      	bne.n	800d66e <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800d68a:	4b10      	ldr	r3, [pc, #64]	@ (800d6cc <xTaskResumeAll+0x1d8>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d690:	4b0d      	ldr	r3, [pc, #52]	@ (800d6c8 <xTaskResumeAll+0x1d4>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d003      	beq.n	800d6a0 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800d698:	2301      	movs	r3, #1
 800d69a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d69c:	f001 f950 	bl	800e940 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d6a0:	f001 f972 	bl	800e988 <vPortExitCritical>

    return xAlreadyYielded;
 800d6a4:	693b      	ldr	r3, [r7, #16]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	20046c84 	.word	0x20046c84
 800d6b4:	20046c5c 	.word	0x20046c5c
 800d6b8:	20046c1c 	.word	0x20046c1c
 800d6bc:	20046c64 	.word	0x20046c64
 800d6c0:	2004678c 	.word	0x2004678c
 800d6c4:	20046788 	.word	0x20046788
 800d6c8:	20046c70 	.word	0x20046c70
 800d6cc:	20046c6c 	.word	0x20046c6c

0800d6d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d6d6:	4b05      	ldr	r3, [pc, #20]	@ (800d6ec <xTaskGetTickCount+0x1c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d6dc:	687b      	ldr	r3, [r7, #4]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	20046c60 	.word	0x20046c60

0800d6f0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800d6f4:	4b03      	ldr	r3, [pc, #12]	@ (800d704 <uxTaskGetNumberOfTasks+0x14>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop
 800d704:	20046c5c 	.word	0x20046c5c

0800d708 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b088      	sub	sp, #32
 800d70c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d70e:	2300      	movs	r3, #0
 800d710:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d712:	4b7a      	ldr	r3, [pc, #488]	@ (800d8fc <xTaskIncrementTick+0x1f4>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	f040 80e6 	bne.w	800d8e8 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d71c:	4b78      	ldr	r3, [pc, #480]	@ (800d900 <xTaskIncrementTick+0x1f8>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	3301      	adds	r3, #1
 800d722:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d724:	4a76      	ldr	r2, [pc, #472]	@ (800d900 <xTaskIncrementTick+0x1f8>)
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d119      	bne.n	800d764 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800d730:	4b74      	ldr	r3, [pc, #464]	@ (800d904 <xTaskIncrementTick+0x1fc>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d003      	beq.n	800d742 <xTaskIncrementTick+0x3a>
 800d73a:	f001 fadd 	bl	800ecf8 <ulSetInterruptMask>
 800d73e:	bf00      	nop
 800d740:	e7fd      	b.n	800d73e <xTaskIncrementTick+0x36>
 800d742:	4b70      	ldr	r3, [pc, #448]	@ (800d904 <xTaskIncrementTick+0x1fc>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	617b      	str	r3, [r7, #20]
 800d748:	4b6f      	ldr	r3, [pc, #444]	@ (800d908 <xTaskIncrementTick+0x200>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4a6d      	ldr	r2, [pc, #436]	@ (800d904 <xTaskIncrementTick+0x1fc>)
 800d74e:	6013      	str	r3, [r2, #0]
 800d750:	4a6d      	ldr	r2, [pc, #436]	@ (800d908 <xTaskIncrementTick+0x200>)
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	6013      	str	r3, [r2, #0]
 800d756:	4b6d      	ldr	r3, [pc, #436]	@ (800d90c <xTaskIncrementTick+0x204>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	3301      	adds	r3, #1
 800d75c:	4a6b      	ldr	r2, [pc, #428]	@ (800d90c <xTaskIncrementTick+0x204>)
 800d75e:	6013      	str	r3, [r2, #0]
 800d760:	f000 fb80 	bl	800de64 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d764:	4b6a      	ldr	r3, [pc, #424]	@ (800d910 <xTaskIncrementTick+0x208>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	69ba      	ldr	r2, [r7, #24]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	f0c0 80a7 	bcc.w	800d8be <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d770:	4b64      	ldr	r3, [pc, #400]	@ (800d904 <xTaskIncrementTick+0x1fc>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d104      	bne.n	800d784 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d77a:	4b65      	ldr	r3, [pc, #404]	@ (800d910 <xTaskIncrementTick+0x208>)
 800d77c:	f04f 32ff 	mov.w	r2, #4294967295
 800d780:	601a      	str	r2, [r3, #0]
                    break;
 800d782:	e09c      	b.n	800d8be <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d784:	4b5f      	ldr	r3, [pc, #380]	@ (800d904 <xTaskIncrementTick+0x1fc>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800d794:	69ba      	ldr	r2, [r7, #24]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d203      	bcs.n	800d7a4 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d79c:	4a5c      	ldr	r2, [pc, #368]	@ (800d910 <xTaskIncrementTick+0x208>)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800d7a2:	e08c      	b.n	800d8be <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	695b      	ldr	r3, [r3, #20]
 800d7a8:	60bb      	str	r3, [r7, #8]
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	693a      	ldr	r2, [r7, #16]
 800d7b0:	68d2      	ldr	r2, [r2, #12]
 800d7b2:	609a      	str	r2, [r3, #8]
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	693a      	ldr	r2, [r7, #16]
 800d7ba:	6892      	ldr	r2, [r2, #8]
 800d7bc:	605a      	str	r2, [r3, #4]
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	685a      	ldr	r2, [r3, #4]
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d103      	bne.n	800d7d2 <xTaskIncrementTick+0xca>
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	68da      	ldr	r2, [r3, #12]
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	605a      	str	r2, [r3, #4]
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	615a      	str	r2, [r3, #20]
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	1e5a      	subs	r2, r3, #1
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d01e      	beq.n	800d828 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ee:	607b      	str	r3, [r7, #4]
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	69db      	ldr	r3, [r3, #28]
 800d7f4:	693a      	ldr	r2, [r7, #16]
 800d7f6:	6a12      	ldr	r2, [r2, #32]
 800d7f8:	609a      	str	r2, [r3, #8]
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	6a1b      	ldr	r3, [r3, #32]
 800d7fe:	693a      	ldr	r2, [r7, #16]
 800d800:	69d2      	ldr	r2, [r2, #28]
 800d802:	605a      	str	r2, [r3, #4]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	685a      	ldr	r2, [r3, #4]
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	3318      	adds	r3, #24
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d103      	bne.n	800d818 <xTaskIncrementTick+0x110>
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	6a1a      	ldr	r2, [r3, #32]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	605a      	str	r2, [r3, #4]
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	2200      	movs	r2, #0
 800d81c:	629a      	str	r2, [r3, #40]	@ 0x28
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	1e5a      	subs	r2, r3, #1
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d82c:	4b39      	ldr	r3, [pc, #228]	@ (800d914 <xTaskIncrementTick+0x20c>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	429a      	cmp	r2, r3
 800d832:	d903      	bls.n	800d83c <xTaskIncrementTick+0x134>
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d838:	4a36      	ldr	r2, [pc, #216]	@ (800d914 <xTaskIncrementTick+0x20c>)
 800d83a:	6013      	str	r3, [r2, #0]
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d840:	4935      	ldr	r1, [pc, #212]	@ (800d918 <xTaskIncrementTick+0x210>)
 800d842:	4613      	mov	r3, r2
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	4413      	add	r3, r2
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	440b      	add	r3, r1
 800d84c:	3304      	adds	r3, #4
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	603b      	str	r3, [r7, #0]
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	683a      	ldr	r2, [r7, #0]
 800d856:	609a      	str	r2, [r3, #8]
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	689a      	ldr	r2, [r3, #8]
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	60da      	str	r2, [r3, #12]
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	693a      	ldr	r2, [r7, #16]
 800d866:	3204      	adds	r2, #4
 800d868:	605a      	str	r2, [r3, #4]
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	1d1a      	adds	r2, r3, #4
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	609a      	str	r2, [r3, #8]
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d876:	4613      	mov	r3, r2
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	4413      	add	r3, r2
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	4a26      	ldr	r2, [pc, #152]	@ (800d918 <xTaskIncrementTick+0x210>)
 800d880:	441a      	add	r2, r3
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	615a      	str	r2, [r3, #20]
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d88a:	4923      	ldr	r1, [pc, #140]	@ (800d918 <xTaskIncrementTick+0x210>)
 800d88c:	4613      	mov	r3, r2
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4413      	add	r3, r2
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	440b      	add	r3, r1
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	1c59      	adds	r1, r3, #1
 800d89a:	481f      	ldr	r0, [pc, #124]	@ (800d918 <xTaskIncrementTick+0x210>)
 800d89c:	4613      	mov	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4413      	add	r3, r2
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	4403      	add	r3, r0
 800d8a6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ac:	4b1b      	ldr	r3, [pc, #108]	@ (800d91c <xTaskIncrementTick+0x214>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	f67f af5c 	bls.w	800d770 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8bc:	e758      	b.n	800d770 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d8be:	4b17      	ldr	r3, [pc, #92]	@ (800d91c <xTaskIncrementTick+0x214>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8c4:	4914      	ldr	r1, [pc, #80]	@ (800d918 <xTaskIncrementTick+0x210>)
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	4413      	add	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	440b      	add	r3, r1
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d901      	bls.n	800d8da <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800d8da:	4b11      	ldr	r3, [pc, #68]	@ (800d920 <xTaskIncrementTick+0x218>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d007      	beq.n	800d8f2 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	61fb      	str	r3, [r7, #28]
 800d8e6:	e004      	b.n	800d8f2 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800d8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d924 <xTaskIncrementTick+0x21c>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	4a0d      	ldr	r2, [pc, #52]	@ (800d924 <xTaskIncrementTick+0x21c>)
 800d8f0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800d8f2:	69fb      	ldr	r3, [r7, #28]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3720      	adds	r7, #32
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	20046c84 	.word	0x20046c84
 800d900:	20046c60 	.word	0x20046c60
 800d904:	20046c14 	.word	0x20046c14
 800d908:	20046c18 	.word	0x20046c18
 800d90c:	20046c74 	.word	0x20046c74
 800d910:	20046c7c 	.word	0x20046c7c
 800d914:	20046c64 	.word	0x20046c64
 800d918:	2004678c 	.word	0x2004678c
 800d91c:	20046788 	.word	0x20046788
 800d920:	20046c70 	.word	0x20046c70
 800d924:	20046c6c 	.word	0x20046c6c

0800d928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800d92e:	4b23      	ldr	r3, [pc, #140]	@ (800d9bc <vTaskSwitchContext+0x94>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d003      	beq.n	800d93e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800d936:	4b22      	ldr	r3, [pc, #136]	@ (800d9c0 <vTaskSwitchContext+0x98>)
 800d938:	2201      	movs	r2, #1
 800d93a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800d93c:	e039      	b.n	800d9b2 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800d93e:	4b20      	ldr	r3, [pc, #128]	@ (800d9c0 <vTaskSwitchContext+0x98>)
 800d940:	2200      	movs	r2, #0
 800d942:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d944:	4b1f      	ldr	r3, [pc, #124]	@ (800d9c4 <vTaskSwitchContext+0x9c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	607b      	str	r3, [r7, #4]
 800d94a:	e009      	b.n	800d960 <vTaskSwitchContext+0x38>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d103      	bne.n	800d95a <vTaskSwitchContext+0x32>
 800d952:	f001 f9d1 	bl	800ecf8 <ulSetInterruptMask>
 800d956:	bf00      	nop
 800d958:	e7fd      	b.n	800d956 <vTaskSwitchContext+0x2e>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	3b01      	subs	r3, #1
 800d95e:	607b      	str	r3, [r7, #4]
 800d960:	4919      	ldr	r1, [pc, #100]	@ (800d9c8 <vTaskSwitchContext+0xa0>)
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	4613      	mov	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4413      	add	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	440b      	add	r3, r1
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d0eb      	beq.n	800d94c <vTaskSwitchContext+0x24>
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	4613      	mov	r3, r2
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	4413      	add	r3, r2
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	4a12      	ldr	r2, [pc, #72]	@ (800d9c8 <vTaskSwitchContext+0xa0>)
 800d980:	4413      	add	r3, r2
 800d982:	603b      	str	r3, [r7, #0]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	685a      	ldr	r2, [r3, #4]
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	605a      	str	r2, [r3, #4]
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	685a      	ldr	r2, [r3, #4]
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	3308      	adds	r3, #8
 800d996:	429a      	cmp	r2, r3
 800d998:	d103      	bne.n	800d9a2 <vTaskSwitchContext+0x7a>
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	68da      	ldr	r2, [r3, #12]
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	605a      	str	r2, [r3, #4]
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	4a08      	ldr	r2, [pc, #32]	@ (800d9cc <vTaskSwitchContext+0xa4>)
 800d9aa:	6013      	str	r3, [r2, #0]
 800d9ac:	4a05      	ldr	r2, [pc, #20]	@ (800d9c4 <vTaskSwitchContext+0x9c>)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6013      	str	r3, [r2, #0]
}
 800d9b2:	bf00      	nop
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	20046c84 	.word	0x20046c84
 800d9c0:	20046c70 	.word	0x20046c70
 800d9c4:	20046c64 	.word	0x20046c64
 800d9c8:	2004678c 	.word	0x2004678c
 800d9cc:	20046788 	.word	0x20046788

0800d9d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d103      	bne.n	800d9e8 <vTaskPlaceOnEventList+0x18>
 800d9e0:	f001 f98a 	bl	800ecf8 <ulSetInterruptMask>
 800d9e4:	bf00      	nop
 800d9e6:	e7fd      	b.n	800d9e4 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9e8:	4b07      	ldr	r3, [pc, #28]	@ (800da08 <vTaskPlaceOnEventList+0x38>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	3318      	adds	r3, #24
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7fe fb9e 	bl	800c132 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d9f6:	2101      	movs	r1, #1
 800d9f8:	6838      	ldr	r0, [r7, #0]
 800d9fa:	f000 fc35 	bl	800e268 <prvAddCurrentTaskToDelayedList>
}
 800d9fe:	bf00      	nop
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	20046788 	.word	0x20046788

0800da0c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d103      	bne.n	800da26 <vTaskPlaceOnEventListRestricted+0x1a>
 800da1e:	f001 f96b 	bl	800ecf8 <ulSetInterruptMask>
 800da22:	bf00      	nop
 800da24:	e7fd      	b.n	800da22 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	617b      	str	r3, [r7, #20]
 800da2c:	4b15      	ldr	r3, [pc, #84]	@ (800da84 <vTaskPlaceOnEventListRestricted+0x78>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	61da      	str	r2, [r3, #28]
 800da34:	4b13      	ldr	r3, [pc, #76]	@ (800da84 <vTaskPlaceOnEventListRestricted+0x78>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	697a      	ldr	r2, [r7, #20]
 800da3a:	6892      	ldr	r2, [r2, #8]
 800da3c:	621a      	str	r2, [r3, #32]
 800da3e:	4b11      	ldr	r3, [pc, #68]	@ (800da84 <vTaskPlaceOnEventListRestricted+0x78>)
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	3218      	adds	r2, #24
 800da48:	605a      	str	r2, [r3, #4]
 800da4a:	4b0e      	ldr	r3, [pc, #56]	@ (800da84 <vTaskPlaceOnEventListRestricted+0x78>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f103 0218 	add.w	r2, r3, #24
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	609a      	str	r2, [r3, #8]
 800da56:	4b0b      	ldr	r3, [pc, #44]	@ (800da84 <vTaskPlaceOnEventListRestricted+0x78>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	629a      	str	r2, [r3, #40]	@ 0x28
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	1c5a      	adds	r2, r3, #1
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d002      	beq.n	800da74 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800da6e:	f04f 33ff 	mov.w	r3, #4294967295
 800da72:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da74:	6879      	ldr	r1, [r7, #4]
 800da76:	68b8      	ldr	r0, [r7, #8]
 800da78:	f000 fbf6 	bl	800e268 <prvAddCurrentTaskToDelayedList>
    }
 800da7c:	bf00      	nop
 800da7e:	3718      	adds	r7, #24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	20046788 	.word	0x20046788

0800da88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b088      	sub	sp, #32
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d103      	bne.n	800daa6 <xTaskRemoveFromEventList+0x1e>
 800da9e:	f001 f92b 	bl	800ecf8 <ulSetInterruptMask>
 800daa2:	bf00      	nop
 800daa4:	e7fd      	b.n	800daa2 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daaa:	617b      	str	r3, [r7, #20]
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	69db      	ldr	r3, [r3, #28]
 800dab0:	69ba      	ldr	r2, [r7, #24]
 800dab2:	6a12      	ldr	r2, [r2, #32]
 800dab4:	609a      	str	r2, [r3, #8]
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	6a1b      	ldr	r3, [r3, #32]
 800daba:	69ba      	ldr	r2, [r7, #24]
 800dabc:	69d2      	ldr	r2, [r2, #28]
 800dabe:	605a      	str	r2, [r3, #4]
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	3318      	adds	r3, #24
 800dac8:	429a      	cmp	r2, r3
 800daca:	d103      	bne.n	800dad4 <xTaskRemoveFromEventList+0x4c>
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	6a1a      	ldr	r2, [r3, #32]
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	605a      	str	r2, [r3, #4]
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	2200      	movs	r2, #0
 800dad8:	629a      	str	r2, [r3, #40]	@ 0x28
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	1e5a      	subs	r2, r3, #1
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800dae4:	4b49      	ldr	r3, [pc, #292]	@ (800dc0c <xTaskRemoveFromEventList+0x184>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d15f      	bne.n	800dbac <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	695b      	ldr	r3, [r3, #20]
 800daf0:	60fb      	str	r3, [r7, #12]
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	69ba      	ldr	r2, [r7, #24]
 800daf8:	68d2      	ldr	r2, [r2, #12]
 800dafa:	609a      	str	r2, [r3, #8]
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	69ba      	ldr	r2, [r7, #24]
 800db02:	6892      	ldr	r2, [r2, #8]
 800db04:	605a      	str	r2, [r3, #4]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	685a      	ldr	r2, [r3, #4]
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	3304      	adds	r3, #4
 800db0e:	429a      	cmp	r2, r3
 800db10:	d103      	bne.n	800db1a <xTaskRemoveFromEventList+0x92>
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	605a      	str	r2, [r3, #4]
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	2200      	movs	r2, #0
 800db1e:	615a      	str	r2, [r3, #20]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	1e5a      	subs	r2, r3, #1
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db2e:	4b38      	ldr	r3, [pc, #224]	@ (800dc10 <xTaskRemoveFromEventList+0x188>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	429a      	cmp	r2, r3
 800db34:	d903      	bls.n	800db3e <xTaskRemoveFromEventList+0xb6>
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db3a:	4a35      	ldr	r2, [pc, #212]	@ (800dc10 <xTaskRemoveFromEventList+0x188>)
 800db3c:	6013      	str	r3, [r2, #0]
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db42:	4934      	ldr	r1, [pc, #208]	@ (800dc14 <xTaskRemoveFromEventList+0x18c>)
 800db44:	4613      	mov	r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4413      	add	r3, r2
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	440b      	add	r3, r1
 800db4e:	3304      	adds	r3, #4
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	60bb      	str	r3, [r7, #8]
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	68ba      	ldr	r2, [r7, #8]
 800db58:	609a      	str	r2, [r3, #8]
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	689a      	ldr	r2, [r3, #8]
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	60da      	str	r2, [r3, #12]
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	69ba      	ldr	r2, [r7, #24]
 800db68:	3204      	adds	r2, #4
 800db6a:	605a      	str	r2, [r3, #4]
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	1d1a      	adds	r2, r3, #4
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	609a      	str	r2, [r3, #8]
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db78:	4613      	mov	r3, r2
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	4413      	add	r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4a24      	ldr	r2, [pc, #144]	@ (800dc14 <xTaskRemoveFromEventList+0x18c>)
 800db82:	441a      	add	r2, r3
 800db84:	69bb      	ldr	r3, [r7, #24]
 800db86:	615a      	str	r2, [r3, #20]
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db8c:	4921      	ldr	r1, [pc, #132]	@ (800dc14 <xTaskRemoveFromEventList+0x18c>)
 800db8e:	4613      	mov	r3, r2
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	4413      	add	r3, r2
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	440b      	add	r3, r1
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	1c59      	adds	r1, r3, #1
 800db9c:	481d      	ldr	r0, [pc, #116]	@ (800dc14 <xTaskRemoveFromEventList+0x18c>)
 800db9e:	4613      	mov	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	4403      	add	r3, r0
 800dba8:	6019      	str	r1, [r3, #0]
 800dbaa:	e01b      	b.n	800dbe4 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dbac:	4b1a      	ldr	r3, [pc, #104]	@ (800dc18 <xTaskRemoveFromEventList+0x190>)
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	613b      	str	r3, [r7, #16]
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	693a      	ldr	r2, [r7, #16]
 800dbb6:	61da      	str	r2, [r3, #28]
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	689a      	ldr	r2, [r3, #8]
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	621a      	str	r2, [r3, #32]
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	69ba      	ldr	r2, [r7, #24]
 800dbc6:	3218      	adds	r2, #24
 800dbc8:	605a      	str	r2, [r3, #4]
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	f103 0218 	add.w	r2, r3, #24
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	609a      	str	r2, [r3, #8]
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	4a10      	ldr	r2, [pc, #64]	@ (800dc18 <xTaskRemoveFromEventList+0x190>)
 800dbd8:	629a      	str	r2, [r3, #40]	@ 0x28
 800dbda:	4b0f      	ldr	r3, [pc, #60]	@ (800dc18 <xTaskRemoveFromEventList+0x190>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	4a0d      	ldr	r2, [pc, #52]	@ (800dc18 <xTaskRemoveFromEventList+0x190>)
 800dbe2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dbe4:	69bb      	ldr	r3, [r7, #24]
 800dbe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbe8:	4b0c      	ldr	r3, [pc, #48]	@ (800dc1c <xTaskRemoveFromEventList+0x194>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d905      	bls.n	800dbfe <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800dbf6:	4b0a      	ldr	r3, [pc, #40]	@ (800dc20 <xTaskRemoveFromEventList+0x198>)
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	601a      	str	r2, [r3, #0]
 800dbfc:	e001      	b.n	800dc02 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800dc02:	69fb      	ldr	r3, [r7, #28]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3720      	adds	r7, #32
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	20046c84 	.word	0x20046c84
 800dc10:	20046c64 	.word	0x20046c64
 800dc14:	2004678c 	.word	0x2004678c
 800dc18:	20046c1c 	.word	0x20046c1c
 800dc1c:	20046788 	.word	0x20046788
 800dc20:	20046c70 	.word	0x20046c70

0800dc24 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc2c:	4b06      	ldr	r3, [pc, #24]	@ (800dc48 <vTaskInternalSetTimeOutState+0x24>)
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800dc34:	4b05      	ldr	r3, [pc, #20]	@ (800dc4c <vTaskInternalSetTimeOutState+0x28>)
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	605a      	str	r2, [r3, #4]
}
 800dc3c:	bf00      	nop
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr
 800dc48:	20046c74 	.word	0x20046c74
 800dc4c:	20046c60 	.word	0x20046c60

0800dc50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b086      	sub	sp, #24
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d103      	bne.n	800dc68 <xTaskCheckForTimeOut+0x18>
 800dc60:	f001 f84a 	bl	800ecf8 <ulSetInterruptMask>
 800dc64:	bf00      	nop
 800dc66:	e7fd      	b.n	800dc64 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d103      	bne.n	800dc76 <xTaskCheckForTimeOut+0x26>
 800dc6e:	f001 f843 	bl	800ecf8 <ulSetInterruptMask>
 800dc72:	bf00      	nop
 800dc74:	e7fd      	b.n	800dc72 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800dc76:	f000 fe75 	bl	800e964 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800dc7a:	4b1f      	ldr	r3, [pc, #124]	@ (800dcf8 <xTaskCheckForTimeOut+0xa8>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc92:	d102      	bne.n	800dc9a <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800dc94:	2300      	movs	r3, #0
 800dc96:	617b      	str	r3, [r7, #20]
 800dc98:	e026      	b.n	800dce8 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	4b17      	ldr	r3, [pc, #92]	@ (800dcfc <xTaskCheckForTimeOut+0xac>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d00a      	beq.n	800dcbc <xTaskCheckForTimeOut+0x6c>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	693a      	ldr	r2, [r7, #16]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d305      	bcc.n	800dcbc <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]
 800dcba:	e015      	b.n	800dce8 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	68fa      	ldr	r2, [r7, #12]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d20b      	bcs.n	800dcde <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	1ad2      	subs	r2, r2, r3
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f7ff ffa6 	bl	800dc24 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	617b      	str	r3, [r7, #20]
 800dcdc:	e004      	b.n	800dce8 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	2200      	movs	r2, #0
 800dce2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800dce4:	2301      	movs	r3, #1
 800dce6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800dce8:	f000 fe4e 	bl	800e988 <vPortExitCritical>

    return xReturn;
 800dcec:	697b      	ldr	r3, [r7, #20]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3718      	adds	r7, #24
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	20046c60 	.word	0x20046c60
 800dcfc:	20046c74 	.word	0x20046c74

0800dd00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dd00:	b480      	push	{r7}
 800dd02:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800dd04:	4b03      	ldr	r3, [pc, #12]	@ (800dd14 <vTaskMissedYield+0x14>)
 800dd06:	2201      	movs	r2, #1
 800dd08:	601a      	str	r2, [r3, #0]
}
 800dd0a:	bf00      	nop
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr
 800dd14:	20046c70 	.word	0x20046c70

0800dd18 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800dd20:	f000 f84a 	bl	800ddb8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd24:	4b03      	ldr	r3, [pc, #12]	@ (800dd34 <prvIdleTask+0x1c>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d9f9      	bls.n	800dd20 <prvIdleTask+0x8>
            {
                taskYIELD();
 800dd2c:	f000 fe08 	bl	800e940 <vPortYield>
        prvCheckTasksWaitingTermination();
 800dd30:	e7f6      	b.n	800dd20 <prvIdleTask+0x8>
 800dd32:	bf00      	nop
 800dd34:	2004678c 	.word	0x2004678c

0800dd38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd3e:	2300      	movs	r3, #0
 800dd40:	607b      	str	r3, [r7, #4]
 800dd42:	e00c      	b.n	800dd5e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	4613      	mov	r3, r2
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	4413      	add	r3, r2
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	4a12      	ldr	r2, [pc, #72]	@ (800dd98 <prvInitialiseTaskLists+0x60>)
 800dd50:	4413      	add	r3, r2
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe f9c0 	bl	800c0d8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	607b      	str	r3, [r7, #4]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2b37      	cmp	r3, #55	@ 0x37
 800dd62:	d9ef      	bls.n	800dd44 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800dd64:	480d      	ldr	r0, [pc, #52]	@ (800dd9c <prvInitialiseTaskLists+0x64>)
 800dd66:	f7fe f9b7 	bl	800c0d8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800dd6a:	480d      	ldr	r0, [pc, #52]	@ (800dda0 <prvInitialiseTaskLists+0x68>)
 800dd6c:	f7fe f9b4 	bl	800c0d8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800dd70:	480c      	ldr	r0, [pc, #48]	@ (800dda4 <prvInitialiseTaskLists+0x6c>)
 800dd72:	f7fe f9b1 	bl	800c0d8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800dd76:	480c      	ldr	r0, [pc, #48]	@ (800dda8 <prvInitialiseTaskLists+0x70>)
 800dd78:	f7fe f9ae 	bl	800c0d8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800dd7c:	480b      	ldr	r0, [pc, #44]	@ (800ddac <prvInitialiseTaskLists+0x74>)
 800dd7e:	f7fe f9ab 	bl	800c0d8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800dd82:	4b0b      	ldr	r3, [pc, #44]	@ (800ddb0 <prvInitialiseTaskLists+0x78>)
 800dd84:	4a05      	ldr	r2, [pc, #20]	@ (800dd9c <prvInitialiseTaskLists+0x64>)
 800dd86:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd88:	4b0a      	ldr	r3, [pc, #40]	@ (800ddb4 <prvInitialiseTaskLists+0x7c>)
 800dd8a:	4a05      	ldr	r2, [pc, #20]	@ (800dda0 <prvInitialiseTaskLists+0x68>)
 800dd8c:	601a      	str	r2, [r3, #0]
}
 800dd8e:	bf00      	nop
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	2004678c 	.word	0x2004678c
 800dd9c:	20046bec 	.word	0x20046bec
 800dda0:	20046c00 	.word	0x20046c00
 800dda4:	20046c1c 	.word	0x20046c1c
 800dda8:	20046c30 	.word	0x20046c30
 800ddac:	20046c48 	.word	0x20046c48
 800ddb0:	20046c14 	.word	0x20046c14
 800ddb4:	20046c18 	.word	0x20046c18

0800ddb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddbe:	e019      	b.n	800ddf4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800ddc0:	f000 fdd0 	bl	800e964 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddc4:	4b10      	ldr	r3, [pc, #64]	@ (800de08 <prvCheckTasksWaitingTermination+0x50>)
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	3304      	adds	r3, #4
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fe f9e7 	bl	800c1a4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800ddd6:	4b0d      	ldr	r3, [pc, #52]	@ (800de0c <prvCheckTasksWaitingTermination+0x54>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3b01      	subs	r3, #1
 800dddc:	4a0b      	ldr	r2, [pc, #44]	@ (800de0c <prvCheckTasksWaitingTermination+0x54>)
 800ddde:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800dde0:	4b0b      	ldr	r3, [pc, #44]	@ (800de10 <prvCheckTasksWaitingTermination+0x58>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	3b01      	subs	r3, #1
 800dde6:	4a0a      	ldr	r2, [pc, #40]	@ (800de10 <prvCheckTasksWaitingTermination+0x58>)
 800dde8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800ddea:	f000 fdcd 	bl	800e988 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 f810 	bl	800de14 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddf4:	4b06      	ldr	r3, [pc, #24]	@ (800de10 <prvCheckTasksWaitingTermination+0x58>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d1e1      	bne.n	800ddc0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800ddfc:	bf00      	nop
 800ddfe:	bf00      	nop
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	20046c30 	.word	0x20046c30
 800de0c:	20046c5c 	.word	0x20046c5c
 800de10:	20046c44 	.word	0x20046c44

0800de14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800de22:	2b00      	cmp	r3, #0
 800de24:	d108      	bne.n	800de38 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de2a:	4618      	mov	r0, r3
 800de2c:	f001 f888 	bl	800ef40 <vPortFree>
                vPortFree( pxTCB );
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f001 f885 	bl	800ef40 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800de36:	e011      	b.n	800de5c <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d103      	bne.n	800de4a <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f001 f87c 	bl	800ef40 <vPortFree>
    }
 800de48:	e008      	b.n	800de5c <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800de50:	2b02      	cmp	r3, #2
 800de52:	d003      	beq.n	800de5c <prvDeleteTCB+0x48>
 800de54:	f000 ff50 	bl	800ecf8 <ulSetInterruptMask>
 800de58:	bf00      	nop
 800de5a:	e7fd      	b.n	800de58 <prvDeleteTCB+0x44>
    }
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de64:	b480      	push	{r7}
 800de66:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de68:	4b0a      	ldr	r3, [pc, #40]	@ (800de94 <prvResetNextTaskUnblockTime+0x30>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d104      	bne.n	800de7c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800de72:	4b09      	ldr	r3, [pc, #36]	@ (800de98 <prvResetNextTaskUnblockTime+0x34>)
 800de74:	f04f 32ff 	mov.w	r2, #4294967295
 800de78:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800de7a:	e005      	b.n	800de88 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800de7c:	4b05      	ldr	r3, [pc, #20]	@ (800de94 <prvResetNextTaskUnblockTime+0x30>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a04      	ldr	r2, [pc, #16]	@ (800de98 <prvResetNextTaskUnblockTime+0x34>)
 800de86:	6013      	str	r3, [r2, #0]
}
 800de88:	bf00      	nop
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	20046c14 	.word	0x20046c14
 800de98:	20046c7c 	.word	0x20046c7c

0800de9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800dea2:	4b0b      	ldr	r3, [pc, #44]	@ (800ded0 <xTaskGetSchedulerState+0x34>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d102      	bne.n	800deb0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800deaa:	2301      	movs	r3, #1
 800deac:	607b      	str	r3, [r7, #4]
 800deae:	e008      	b.n	800dec2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800deb0:	4b08      	ldr	r3, [pc, #32]	@ (800ded4 <xTaskGetSchedulerState+0x38>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d102      	bne.n	800debe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800deb8:	2302      	movs	r3, #2
 800deba:	607b      	str	r3, [r7, #4]
 800debc:	e001      	b.n	800dec2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800debe:	2300      	movs	r3, #0
 800dec0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800dec2:	687b      	ldr	r3, [r7, #4]
    }
 800dec4:	4618      	mov	r0, r3
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr
 800ded0:	20046c68 	.word	0x20046c68
 800ded4:	20046c84 	.word	0x20046c84

0800ded8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800ded8:	b580      	push	{r7, lr}
 800deda:	b086      	sub	sp, #24
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800dee4:	2300      	movs	r3, #0
 800dee6:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d079      	beq.n	800dfe2 <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800def2:	4b3e      	ldr	r3, [pc, #248]	@ (800dfec <xTaskPriorityInherit+0x114>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def8:	429a      	cmp	r2, r3
 800defa:	d269      	bcs.n	800dfd0 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	2b00      	cmp	r3, #0
 800df02:	db06      	blt.n	800df12 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df04:	4b39      	ldr	r3, [pc, #228]	@ (800dfec <xTaskPriorityInherit+0x114>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	6959      	ldr	r1, [r3, #20]
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df1a:	4613      	mov	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4413      	add	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4a33      	ldr	r2, [pc, #204]	@ (800dff0 <xTaskPriorityInherit+0x118>)
 800df24:	4413      	add	r3, r2
 800df26:	4299      	cmp	r1, r3
 800df28:	d14a      	bne.n	800dfc0 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	3304      	adds	r3, #4
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fe f938 	bl	800c1a4 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df34:	4b2d      	ldr	r3, [pc, #180]	@ (800dfec <xTaskPriorityInherit+0x114>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df42:	4b2c      	ldr	r3, [pc, #176]	@ (800dff4 <xTaskPriorityInherit+0x11c>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	429a      	cmp	r2, r3
 800df48:	d903      	bls.n	800df52 <xTaskPriorityInherit+0x7a>
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df4e:	4a29      	ldr	r2, [pc, #164]	@ (800dff4 <xTaskPriorityInherit+0x11c>)
 800df50:	6013      	str	r3, [r2, #0]
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df56:	4926      	ldr	r1, [pc, #152]	@ (800dff0 <xTaskPriorityInherit+0x118>)
 800df58:	4613      	mov	r3, r2
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	440b      	add	r3, r1
 800df62:	3304      	adds	r3, #4
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	60fb      	str	r3, [r7, #12]
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	609a      	str	r2, [r3, #8]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	689a      	ldr	r2, [r3, #8]
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	60da      	str	r2, [r3, #12]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	693a      	ldr	r2, [r7, #16]
 800df7c:	3204      	adds	r2, #4
 800df7e:	605a      	str	r2, [r3, #4]
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	1d1a      	adds	r2, r3, #4
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	609a      	str	r2, [r3, #8]
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df8c:	4613      	mov	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4413      	add	r3, r2
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	4a16      	ldr	r2, [pc, #88]	@ (800dff0 <xTaskPriorityInherit+0x118>)
 800df96:	441a      	add	r2, r3
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	615a      	str	r2, [r3, #20]
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfa0:	4913      	ldr	r1, [pc, #76]	@ (800dff0 <xTaskPriorityInherit+0x118>)
 800dfa2:	4613      	mov	r3, r2
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	4413      	add	r3, r2
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	440b      	add	r3, r1
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	1c59      	adds	r1, r3, #1
 800dfb0:	480f      	ldr	r0, [pc, #60]	@ (800dff0 <xTaskPriorityInherit+0x118>)
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4413      	add	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4403      	add	r3, r0
 800dfbc:	6019      	str	r1, [r3, #0]
 800dfbe:	e004      	b.n	800dfca <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dfc0:	4b0a      	ldr	r3, [pc, #40]	@ (800dfec <xTaskPriorityInherit+0x114>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	617b      	str	r3, [r7, #20]
 800dfce:	e008      	b.n	800dfe2 <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dfd4:	4b05      	ldr	r3, [pc, #20]	@ (800dfec <xTaskPriorityInherit+0x114>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d201      	bcs.n	800dfe2 <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800dfe2:	697b      	ldr	r3, [r7, #20]
    }
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3718      	adds	r7, #24
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	20046788 	.word	0x20046788
 800dff0:	2004678c 	.word	0x2004678c
 800dff4:	20046c64 	.word	0x20046c64

0800dff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800e004:	2300      	movs	r3, #0
 800e006:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d070      	beq.n	800e0f0 <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800e00e:	4b3b      	ldr	r3, [pc, #236]	@ (800e0fc <xTaskPriorityDisinherit+0x104>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	429a      	cmp	r2, r3
 800e016:	d003      	beq.n	800e020 <xTaskPriorityDisinherit+0x28>
 800e018:	f000 fe6e 	bl	800ecf8 <ulSetInterruptMask>
 800e01c:	bf00      	nop
 800e01e:	e7fd      	b.n	800e01c <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e024:	2b00      	cmp	r3, #0
 800e026:	d103      	bne.n	800e030 <xTaskPriorityDisinherit+0x38>
 800e028:	f000 fe66 	bl	800ecf8 <ulSetInterruptMask>
 800e02c:	bf00      	nop
 800e02e:	e7fd      	b.n	800e02c <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e034:	1e5a      	subs	r2, r3, #1
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e042:	429a      	cmp	r2, r3
 800e044:	d054      	beq.n	800e0f0 <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d150      	bne.n	800e0f0 <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	3304      	adds	r3, #4
 800e052:	4618      	mov	r0, r3
 800e054:	f7fe f8a6 	bl	800c1a4 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e064:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e070:	4b23      	ldr	r3, [pc, #140]	@ (800e100 <xTaskPriorityDisinherit+0x108>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	429a      	cmp	r2, r3
 800e076:	d903      	bls.n	800e080 <xTaskPriorityDisinherit+0x88>
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e07c:	4a20      	ldr	r2, [pc, #128]	@ (800e100 <xTaskPriorityDisinherit+0x108>)
 800e07e:	6013      	str	r3, [r2, #0]
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e084:	491f      	ldr	r1, [pc, #124]	@ (800e104 <xTaskPriorityDisinherit+0x10c>)
 800e086:	4613      	mov	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	440b      	add	r3, r1
 800e090:	3304      	adds	r3, #4
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	60fb      	str	r3, [r7, #12]
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	609a      	str	r2, [r3, #8]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	689a      	ldr	r2, [r3, #8]
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	60da      	str	r2, [r3, #12]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	3204      	adds	r2, #4
 800e0ac:	605a      	str	r2, [r3, #4]
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	1d1a      	adds	r2, r3, #4
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	609a      	str	r2, [r3, #8]
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4413      	add	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	4a10      	ldr	r2, [pc, #64]	@ (800e104 <xTaskPriorityDisinherit+0x10c>)
 800e0c4:	441a      	add	r2, r3
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	615a      	str	r2, [r3, #20]
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ce:	490d      	ldr	r1, [pc, #52]	@ (800e104 <xTaskPriorityDisinherit+0x10c>)
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	440b      	add	r3, r1
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	1c59      	adds	r1, r3, #1
 800e0de:	4809      	ldr	r0, [pc, #36]	@ (800e104 <xTaskPriorityDisinherit+0x10c>)
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4403      	add	r3, r0
 800e0ea:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e0f0:	697b      	ldr	r3, [r7, #20]
    }
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3718      	adds	r7, #24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	20046788 	.word	0x20046788
 800e100:	20046c64 	.word	0x20046c64
 800e104:	2004678c 	.word	0x2004678c

0800e108 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800e108:	b580      	push	{r7, lr}
 800e10a:	b088      	sub	sp, #32
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e116:	2301      	movs	r3, #1
 800e118:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f000 8085 	beq.w	800e22c <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e126:	2b00      	cmp	r3, #0
 800e128:	d103      	bne.n	800e132 <vTaskPriorityDisinheritAfterTimeout+0x2a>
 800e12a:	f000 fde5 	bl	800ecf8 <ulSetInterruptMask>
 800e12e:	bf00      	nop
 800e130:	e7fd      	b.n	800e12e <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d902      	bls.n	800e142 <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	61fb      	str	r3, [r7, #28]
 800e140:	e002      	b.n	800e148 <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e146:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e14c:	69fa      	ldr	r2, [r7, #28]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d06c      	beq.n	800e22c <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e156:	697a      	ldr	r2, [r7, #20]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d167      	bne.n	800e22c <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800e15c:	4b35      	ldr	r3, [pc, #212]	@ (800e234 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	69ba      	ldr	r2, [r7, #24]
 800e162:	429a      	cmp	r2, r3
 800e164:	d103      	bne.n	800e16e <vTaskPriorityDisinheritAfterTimeout+0x66>
 800e166:	f000 fdc7 	bl	800ecf8 <ulSetInterruptMask>
 800e16a:	bf00      	nop
 800e16c:	e7fd      	b.n	800e16a <vTaskPriorityDisinheritAfterTimeout+0x62>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e16e:	69bb      	ldr	r3, [r7, #24]
 800e170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e172:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800e174:	69bb      	ldr	r3, [r7, #24]
 800e176:	69fa      	ldr	r2, [r7, #28]
 800e178:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	699b      	ldr	r3, [r3, #24]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	db04      	blt.n	800e18c <vTaskPriorityDisinheritAfterTimeout+0x84>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	6959      	ldr	r1, [r3, #20]
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	4613      	mov	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4413      	add	r3, r2
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	4a27      	ldr	r2, [pc, #156]	@ (800e238 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e19c:	4413      	add	r3, r2
 800e19e:	4299      	cmp	r1, r3
 800e1a0:	d144      	bne.n	800e22c <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fd fffc 	bl	800c1a4 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1b0:	4b22      	ldr	r3, [pc, #136]	@ (800e23c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d903      	bls.n	800e1c0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1bc:	4a1f      	ldr	r2, [pc, #124]	@ (800e23c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1c4:	491c      	ldr	r1, [pc, #112]	@ (800e238 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	4413      	add	r3, r2
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	440b      	add	r3, r1
 800e1d0:	3304      	adds	r3, #4
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	60fb      	str	r3, [r7, #12]
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	609a      	str	r2, [r3, #8]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	689a      	ldr	r2, [r3, #8]
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	60da      	str	r2, [r3, #12]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	69ba      	ldr	r2, [r7, #24]
 800e1ea:	3204      	adds	r2, #4
 800e1ec:	605a      	str	r2, [r3, #4]
 800e1ee:	69bb      	ldr	r3, [r7, #24]
 800e1f0:	1d1a      	adds	r2, r3, #4
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	609a      	str	r2, [r3, #8]
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	4413      	add	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4a0d      	ldr	r2, [pc, #52]	@ (800e238 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e204:	441a      	add	r2, r3
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	615a      	str	r2, [r3, #20]
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e20e:	490a      	ldr	r1, [pc, #40]	@ (800e238 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e210:	4613      	mov	r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	4413      	add	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	440b      	add	r3, r1
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	1c59      	adds	r1, r3, #1
 800e21e:	4806      	ldr	r0, [pc, #24]	@ (800e238 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e220:	4613      	mov	r3, r2
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4413      	add	r3, r2
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4403      	add	r3, r0
 800e22a:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800e22c:	bf00      	nop
 800e22e:	3720      	adds	r7, #32
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	20046788 	.word	0x20046788
 800e238:	2004678c 	.word	0x2004678c
 800e23c:	20046c64 	.word	0x20046c64

0800e240 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800e240:	b480      	push	{r7}
 800e242:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800e244:	4b07      	ldr	r3, [pc, #28]	@ (800e264 <pvTaskIncrementMutexHeldCount+0x24>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d004      	beq.n	800e256 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800e24c:	4b05      	ldr	r3, [pc, #20]	@ (800e264 <pvTaskIncrementMutexHeldCount+0x24>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e252:	3201      	adds	r2, #1
 800e254:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800e256:	4b03      	ldr	r3, [pc, #12]	@ (800e264 <pvTaskIncrementMutexHeldCount+0x24>)
 800e258:	681b      	ldr	r3, [r3, #0]
    }
 800e25a:	4618      	mov	r0, r3
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	20046788 	.word	0x20046788

0800e268 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800e272:	4b2e      	ldr	r3, [pc, #184]	@ (800e32c <prvAddCurrentTaskToDelayedList+0xc4>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e278:	4b2d      	ldr	r3, [pc, #180]	@ (800e330 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	3304      	adds	r3, #4
 800e27e:	4618      	mov	r0, r3
 800e280:	f7fd ff90 	bl	800c1a4 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e28a:	d124      	bne.n	800e2d6 <prvAddCurrentTaskToDelayedList+0x6e>
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d021      	beq.n	800e2d6 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e292:	4b28      	ldr	r3, [pc, #160]	@ (800e334 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	613b      	str	r3, [r7, #16]
 800e298:	4b25      	ldr	r3, [pc, #148]	@ (800e330 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	693a      	ldr	r2, [r7, #16]
 800e29e:	609a      	str	r2, [r3, #8]
 800e2a0:	4b23      	ldr	r3, [pc, #140]	@ (800e330 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	693a      	ldr	r2, [r7, #16]
 800e2a6:	6892      	ldr	r2, [r2, #8]
 800e2a8:	60da      	str	r2, [r3, #12]
 800e2aa:	4b21      	ldr	r3, [pc, #132]	@ (800e330 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	3204      	adds	r2, #4
 800e2b4:	605a      	str	r2, [r3, #4]
 800e2b6:	4b1e      	ldr	r3, [pc, #120]	@ (800e330 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	1d1a      	adds	r2, r3, #4
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	609a      	str	r2, [r3, #8]
 800e2c0:	4b1b      	ldr	r3, [pc, #108]	@ (800e330 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4a1b      	ldr	r2, [pc, #108]	@ (800e334 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e2c6:	615a      	str	r2, [r3, #20]
 800e2c8:	4b1a      	ldr	r3, [pc, #104]	@ (800e334 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	4a19      	ldr	r2, [pc, #100]	@ (800e334 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e2d0:	6013      	str	r3, [r2, #0]
 800e2d2:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e2d4:	e026      	b.n	800e324 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800e2d6:	697a      	ldr	r2, [r7, #20]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4413      	add	r3, r2
 800e2dc:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2de:	4b14      	ldr	r3, [pc, #80]	@ (800e330 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	68fa      	ldr	r2, [r7, #12]
 800e2e4:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800e2e6:	68fa      	ldr	r2, [r7, #12]
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d209      	bcs.n	800e302 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2ee:	4b12      	ldr	r3, [pc, #72]	@ (800e338 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	4b0f      	ldr	r3, [pc, #60]	@ (800e330 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	4610      	mov	r0, r2
 800e2fc:	f7fd ff19 	bl	800c132 <vListInsert>
}
 800e300:	e010      	b.n	800e324 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e302:	4b0e      	ldr	r3, [pc, #56]	@ (800e33c <prvAddCurrentTaskToDelayedList+0xd4>)
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	4b0a      	ldr	r3, [pc, #40]	@ (800e330 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	3304      	adds	r3, #4
 800e30c:	4619      	mov	r1, r3
 800e30e:	4610      	mov	r0, r2
 800e310:	f7fd ff0f 	bl	800c132 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800e314:	4b0a      	ldr	r3, [pc, #40]	@ (800e340 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	68fa      	ldr	r2, [r7, #12]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d202      	bcs.n	800e324 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800e31e:	4a08      	ldr	r2, [pc, #32]	@ (800e340 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6013      	str	r3, [r2, #0]
}
 800e324:	bf00      	nop
 800e326:	3718      	adds	r7, #24
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	20046c60 	.word	0x20046c60
 800e330:	20046788 	.word	0x20046788
 800e334:	20046c48 	.word	0x20046c48
 800e338:	20046c18 	.word	0x20046c18
 800e33c:	20046c14 	.word	0x20046c14
 800e340:	20046c7c 	.word	0x20046c7c

0800e344 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800e344:	b580      	push	{r7, lr}
 800e346:	b088      	sub	sp, #32
 800e348:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800e34a:	2300      	movs	r3, #0
 800e34c:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800e34e:	f000 fa5f 	bl	800e810 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800e352:	4b18      	ldr	r3, [pc, #96]	@ (800e3b4 <xTimerCreateTimerTask+0x70>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d020      	beq.n	800e39c <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800e35a:	2300      	movs	r3, #0
 800e35c:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800e35e:	2300      	movs	r3, #0
 800e360:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e362:	463a      	mov	r2, r7
 800e364:	1d39      	adds	r1, r7, #4
 800e366:	f107 0308 	add.w	r3, r7, #8
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fd fe9a 	bl	800c0a4 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	68ba      	ldr	r2, [r7, #8]
 800e376:	9202      	str	r2, [sp, #8]
 800e378:	9301      	str	r3, [sp, #4]
 800e37a:	2302      	movs	r3, #2
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	2300      	movs	r3, #0
 800e380:	460a      	mov	r2, r1
 800e382:	490d      	ldr	r1, [pc, #52]	@ (800e3b8 <xTimerCreateTimerTask+0x74>)
 800e384:	480d      	ldr	r0, [pc, #52]	@ (800e3bc <xTimerCreateTimerTask+0x78>)
 800e386:	f7fe fe7b 	bl	800d080 <xTaskCreateStatic>
 800e38a:	4603      	mov	r3, r0
 800e38c:	4a0c      	ldr	r2, [pc, #48]	@ (800e3c0 <xTimerCreateTimerTask+0x7c>)
 800e38e:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800e390:	4b0b      	ldr	r3, [pc, #44]	@ (800e3c0 <xTimerCreateTimerTask+0x7c>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d001      	beq.n	800e39c <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800e398:	2301      	movs	r3, #1
 800e39a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d103      	bne.n	800e3aa <xTimerCreateTimerTask+0x66>
 800e3a2:	f000 fca9 	bl	800ecf8 <ulSetInterruptMask>
 800e3a6:	bf00      	nop
 800e3a8:	e7fd      	b.n	800e3a6 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
    }
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	20046cb8 	.word	0x20046cb8
 800e3b8:	0802db18 	.word	0x0802db18
 800e3bc:	0800e469 	.word	0x0800e469
 800e3c0:	20046cbc 	.word	0x20046cbc

0800e3c4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e3d0:	e008      	b.n	800e3e4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	68ba      	ldr	r2, [r7, #8]
 800e3d8:	4413      	add	r3, r2
 800e3da:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6a1b      	ldr	r3, [r3, #32]
 800e3e0:	68f8      	ldr	r0, [r7, #12]
 800e3e2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	699a      	ldr	r2, [r3, #24]
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	18d1      	adds	r1, r2, r3
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f000 f8d7 	bl	800e5a4 <prvInsertTimerInActiveList>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d1ea      	bne.n	800e3d2 <prvReloadTimer+0xe>
        }
    }
 800e3fc:	bf00      	nop
 800e3fe:	bf00      	nop
 800e400:	3710      	adds	r7, #16
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
	...

0800e408 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e412:	4b14      	ldr	r3, [pc, #80]	@ (800e464 <prvProcessExpiredTimer+0x5c>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	3304      	adds	r3, #4
 800e420:	4618      	mov	r0, r3
 800e422:	f7fd febf 	bl	800c1a4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e42c:	f003 0304 	and.w	r3, r3, #4
 800e430:	2b00      	cmp	r3, #0
 800e432:	d005      	beq.n	800e440 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800e434:	683a      	ldr	r2, [r7, #0]
 800e436:	6879      	ldr	r1, [r7, #4]
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f7ff ffc3 	bl	800e3c4 <prvReloadTimer>
 800e43e:	e008      	b.n	800e452 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e446:	f023 0301 	bic.w	r3, r3, #1
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	6a1b      	ldr	r3, [r3, #32]
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	4798      	blx	r3
    }
 800e45a:	bf00      	nop
 800e45c:	3710      	adds	r7, #16
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	20046cb0 	.word	0x20046cb0

0800e468 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e470:	f107 0308 	add.w	r3, r7, #8
 800e474:	4618      	mov	r0, r3
 800e476:	f000 f851 	bl	800e51c <prvGetNextExpireTime>
 800e47a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	4619      	mov	r1, r3
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f000 f805 	bl	800e490 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e486:	f000 f8cf 	bl	800e628 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e48a:	bf00      	nop
 800e48c:	e7f0      	b.n	800e470 <prvTimerTask+0x8>
	...

0800e490 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e49a:	f7ff f81d 	bl	800d4d8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e49e:	f107 0308 	add.w	r3, r7, #8
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f000 f85e 	bl	800e564 <prvSampleTimeNow>
 800e4a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d12a      	bne.n	800e506 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d10a      	bne.n	800e4cc <prvProcessTimerOrBlockTask+0x3c>
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d806      	bhi.n	800e4cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800e4be:	f7ff f819 	bl	800d4f4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e4c2:	68f9      	ldr	r1, [r7, #12]
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f7ff ff9f 	bl	800e408 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800e4ca:	e01e      	b.n	800e50a <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d008      	beq.n	800e4e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e4d2:	4b10      	ldr	r3, [pc, #64]	@ (800e514 <prvProcessTimerOrBlockTask+0x84>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d101      	bne.n	800e4e0 <prvProcessTimerOrBlockTask+0x50>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e000      	b.n	800e4e2 <prvProcessTimerOrBlockTask+0x52>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e518 <prvProcessTimerOrBlockTask+0x88>)
 800e4e6:	6818      	ldr	r0, [r3, #0]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	1ad3      	subs	r3, r2, r3
 800e4ee:	683a      	ldr	r2, [r7, #0]
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	f7fe fd91 	bl	800d018 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800e4f6:	f7fe fffd 	bl	800d4f4 <xTaskResumeAll>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d104      	bne.n	800e50a <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800e500:	f000 fa1e 	bl	800e940 <vPortYield>
    }
 800e504:	e001      	b.n	800e50a <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800e506:	f7fe fff5 	bl	800d4f4 <xTaskResumeAll>
    }
 800e50a:	bf00      	nop
 800e50c:	3710      	adds	r7, #16
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	20046cb4 	.word	0x20046cb4
 800e518:	20046cb8 	.word	0x20046cb8

0800e51c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e524:	4b0e      	ldr	r3, [pc, #56]	@ (800e560 <prvGetNextExpireTime+0x44>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d101      	bne.n	800e532 <prvGetNextExpireTime+0x16>
 800e52e:	2201      	movs	r2, #1
 800e530:	e000      	b.n	800e534 <prvGetNextExpireTime+0x18>
 800e532:	2200      	movs	r2, #0
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d105      	bne.n	800e54c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e540:	4b07      	ldr	r3, [pc, #28]	@ (800e560 <prvGetNextExpireTime+0x44>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	60fb      	str	r3, [r7, #12]
 800e54a:	e001      	b.n	800e550 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800e54c:	2300      	movs	r3, #0
 800e54e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800e550:	68fb      	ldr	r3, [r7, #12]
    }
 800e552:	4618      	mov	r0, r3
 800e554:	3714      	adds	r7, #20
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	20046cb0 	.word	0x20046cb0

0800e564 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800e56c:	f7ff f8b0 	bl	800d6d0 <xTaskGetTickCount>
 800e570:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800e572:	4b0b      	ldr	r3, [pc, #44]	@ (800e5a0 <prvSampleTimeNow+0x3c>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	68fa      	ldr	r2, [r7, #12]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d205      	bcs.n	800e588 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800e57c:	f000 f922 	bl	800e7c4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	601a      	str	r2, [r3, #0]
 800e586:	e002      	b.n	800e58e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2200      	movs	r2, #0
 800e58c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800e58e:	4a04      	ldr	r2, [pc, #16]	@ (800e5a0 <prvSampleTimeNow+0x3c>)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e594:	68fb      	ldr	r3, [r7, #12]
    }
 800e596:	4618      	mov	r0, r3
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	20046cc0 	.word	0x20046cc0

0800e5a4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
 800e5b0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	68ba      	ldr	r2, [r7, #8]
 800e5ba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d812      	bhi.n	800e5f0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	1ad2      	subs	r2, r2, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	699b      	ldr	r3, [r3, #24]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d302      	bcc.n	800e5de <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	617b      	str	r3, [r7, #20]
 800e5dc:	e01b      	b.n	800e616 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e5de:	4b10      	ldr	r3, [pc, #64]	@ (800e620 <prvInsertTimerInActiveList+0x7c>)
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	f7fd fda2 	bl	800c132 <vListInsert>
 800e5ee:	e012      	b.n	800e616 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d206      	bcs.n	800e606 <prvInsertTimerInActiveList+0x62>
 800e5f8:	68ba      	ldr	r2, [r7, #8]
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d302      	bcc.n	800e606 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e600:	2301      	movs	r3, #1
 800e602:	617b      	str	r3, [r7, #20]
 800e604:	e007      	b.n	800e616 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e606:	4b07      	ldr	r3, [pc, #28]	@ (800e624 <prvInsertTimerInActiveList+0x80>)
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	3304      	adds	r3, #4
 800e60e:	4619      	mov	r1, r3
 800e610:	4610      	mov	r0, r2
 800e612:	f7fd fd8e 	bl	800c132 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e616:	697b      	ldr	r3, [r7, #20]
    }
 800e618:	4618      	mov	r0, r3
 800e61a:	3718      	adds	r7, #24
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	20046cb4 	.word	0x20046cb4
 800e624:	20046cb0 	.word	0x20046cb0

0800e628 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e628:	b580      	push	{r7, lr}
 800e62a:	b088      	sub	sp, #32
 800e62c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e62e:	e0b7      	b.n	800e7a0 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2b00      	cmp	r3, #0
 800e634:	da11      	bge.n	800e65a <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e636:	1d3b      	adds	r3, r7, #4
 800e638:	3304      	adds	r3, #4
 800e63a:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d103      	bne.n	800e64a <prvProcessReceivedCommands+0x22>
 800e642:	f000 fb59 	bl	800ecf8 <ulSetInterruptMask>
 800e646:	bf00      	nop
 800e648:	e7fd      	b.n	800e646 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	69fa      	ldr	r2, [r7, #28]
 800e650:	6850      	ldr	r0, [r2, #4]
 800e652:	69fa      	ldr	r2, [r7, #28]
 800e654:	6892      	ldr	r2, [r2, #8]
 800e656:	4611      	mov	r1, r2
 800e658:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f2c0 809f 	blt.w	800e7a0 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	695b      	ldr	r3, [r3, #20]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d004      	beq.n	800e678 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	3304      	adds	r3, #4
 800e672:	4618      	mov	r0, r3
 800e674:	f7fd fd96 	bl	800c1a4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e678:	463b      	mov	r3, r7
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7ff ff72 	bl	800e564 <prvSampleTimeNow>
 800e680:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	3b01      	subs	r3, #1
 800e686:	2b08      	cmp	r3, #8
 800e688:	f200 8087 	bhi.w	800e79a <prvProcessReceivedCommands+0x172>
 800e68c:	a201      	add	r2, pc, #4	@ (adr r2, 800e694 <prvProcessReceivedCommands+0x6c>)
 800e68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e692:	bf00      	nop
 800e694:	0800e6b9 	.word	0x0800e6b9
 800e698:	0800e6b9 	.word	0x0800e6b9
 800e69c:	0800e721 	.word	0x0800e721
 800e6a0:	0800e735 	.word	0x0800e735
 800e6a4:	0800e771 	.word	0x0800e771
 800e6a8:	0800e6b9 	.word	0x0800e6b9
 800e6ac:	0800e6b9 	.word	0x0800e6b9
 800e6b0:	0800e721 	.word	0x0800e721
 800e6b4:	0800e735 	.word	0x0800e735
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e6be:	f043 0301 	orr.w	r3, r3, #1
 800e6c2:	b2da      	uxtb	r2, r3
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e6ca:	68ba      	ldr	r2, [r7, #8]
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	699b      	ldr	r3, [r3, #24]
 800e6d0:	18d1      	adds	r1, r2, r3
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	697a      	ldr	r2, [r7, #20]
 800e6d6:	69b8      	ldr	r0, [r7, #24]
 800e6d8:	f7ff ff64 	bl	800e5a4 <prvInsertTimerInActiveList>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d05d      	beq.n	800e79e <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e6e8:	f003 0304 	and.w	r3, r3, #4
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d009      	beq.n	800e704 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e6f0:	68ba      	ldr	r2, [r7, #8]
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	699b      	ldr	r3, [r3, #24]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	697a      	ldr	r2, [r7, #20]
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	69b8      	ldr	r0, [r7, #24]
 800e6fe:	f7ff fe61 	bl	800e3c4 <prvReloadTimer>
 800e702:	e008      	b.n	800e716 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e70a:	f023 0301 	bic.w	r3, r3, #1
 800e70e:	b2da      	uxtb	r2, r3
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	6a1b      	ldr	r3, [r3, #32]
 800e71a:	69b8      	ldr	r0, [r7, #24]
 800e71c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800e71e:	e03e      	b.n	800e79e <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e726:	f023 0301 	bic.w	r3, r3, #1
 800e72a:	b2da      	uxtb	r2, r3
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e732:	e035      	b.n	800e7a0 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e73a:	f043 0301 	orr.w	r3, r3, #1
 800e73e:	b2da      	uxtb	r2, r3
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	699b      	ldr	r3, [r3, #24]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d103      	bne.n	800e75c <prvProcessReceivedCommands+0x134>
 800e754:	f000 fad0 	bl	800ecf8 <ulSetInterruptMask>
 800e758:	bf00      	nop
 800e75a:	e7fd      	b.n	800e758 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	699a      	ldr	r2, [r3, #24]
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	18d1      	adds	r1, r2, r3
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	69b8      	ldr	r0, [r7, #24]
 800e76a:	f7ff ff1b 	bl	800e5a4 <prvInsertTimerInActiveList>
                        break;
 800e76e:	e017      	b.n	800e7a0 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e776:	f003 0302 	and.w	r3, r3, #2
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d103      	bne.n	800e786 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800e77e:	69b8      	ldr	r0, [r7, #24]
 800e780:	f000 fbde 	bl	800ef40 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e784:	e00c      	b.n	800e7a0 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e78c:	f023 0301 	bic.w	r3, r3, #1
 800e790:	b2da      	uxtb	r2, r3
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e798:	e002      	b.n	800e7a0 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e79a:	bf00      	nop
 800e79c:	e000      	b.n	800e7a0 <prvProcessReceivedCommands+0x178>
                        break;
 800e79e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e7a0:	4b07      	ldr	r3, [pc, #28]	@ (800e7c0 <prvProcessReceivedCommands+0x198>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	1d39      	adds	r1, r7, #4
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fe f872 	bl	800c892 <xQueueReceive>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	f47f af3d 	bne.w	800e630 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800e7b6:	bf00      	nop
 800e7b8:	bf00      	nop
 800e7ba:	3720      	adds	r7, #32
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	20046cb8 	.word	0x20046cb8

0800e7c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e7ca:	e009      	b.n	800e7e0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7cc:	4b0e      	ldr	r3, [pc, #56]	@ (800e808 <prvSwitchTimerLists+0x44>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	68db      	ldr	r3, [r3, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800e7d6:	f04f 31ff 	mov.w	r1, #4294967295
 800e7da:	6838      	ldr	r0, [r7, #0]
 800e7dc:	f7ff fe14 	bl	800e408 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e7e0:	4b09      	ldr	r3, [pc, #36]	@ (800e808 <prvSwitchTimerLists+0x44>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1f0      	bne.n	800e7cc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800e7ea:	4b07      	ldr	r3, [pc, #28]	@ (800e808 <prvSwitchTimerLists+0x44>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800e7f0:	4b06      	ldr	r3, [pc, #24]	@ (800e80c <prvSwitchTimerLists+0x48>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a04      	ldr	r2, [pc, #16]	@ (800e808 <prvSwitchTimerLists+0x44>)
 800e7f6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800e7f8:	4a04      	ldr	r2, [pc, #16]	@ (800e80c <prvSwitchTimerLists+0x48>)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6013      	str	r3, [r2, #0]
    }
 800e7fe:	bf00      	nop
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20046cb0 	.word	0x20046cb0
 800e80c:	20046cb4 	.word	0x20046cb4

0800e810 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800e816:	f000 f8a5 	bl	800e964 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800e81a:	4b15      	ldr	r3, [pc, #84]	@ (800e870 <prvCheckForValidListAndQueue+0x60>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d120      	bne.n	800e864 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800e822:	4814      	ldr	r0, [pc, #80]	@ (800e874 <prvCheckForValidListAndQueue+0x64>)
 800e824:	f7fd fc58 	bl	800c0d8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800e828:	4813      	ldr	r0, [pc, #76]	@ (800e878 <prvCheckForValidListAndQueue+0x68>)
 800e82a:	f7fd fc55 	bl	800c0d8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800e82e:	4b13      	ldr	r3, [pc, #76]	@ (800e87c <prvCheckForValidListAndQueue+0x6c>)
 800e830:	4a10      	ldr	r2, [pc, #64]	@ (800e874 <prvCheckForValidListAndQueue+0x64>)
 800e832:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800e834:	4b12      	ldr	r3, [pc, #72]	@ (800e880 <prvCheckForValidListAndQueue+0x70>)
 800e836:	4a10      	ldr	r2, [pc, #64]	@ (800e878 <prvCheckForValidListAndQueue+0x68>)
 800e838:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e83a:	2300      	movs	r3, #0
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	4b11      	ldr	r3, [pc, #68]	@ (800e884 <prvCheckForValidListAndQueue+0x74>)
 800e840:	4a11      	ldr	r2, [pc, #68]	@ (800e888 <prvCheckForValidListAndQueue+0x78>)
 800e842:	2110      	movs	r1, #16
 800e844:	200a      	movs	r0, #10
 800e846:	f7fd fd50 	bl	800c2ea <xQueueGenericCreateStatic>
 800e84a:	4603      	mov	r3, r0
 800e84c:	4a08      	ldr	r2, [pc, #32]	@ (800e870 <prvCheckForValidListAndQueue+0x60>)
 800e84e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800e850:	4b07      	ldr	r3, [pc, #28]	@ (800e870 <prvCheckForValidListAndQueue+0x60>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d005      	beq.n	800e864 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e858:	4b05      	ldr	r3, [pc, #20]	@ (800e870 <prvCheckForValidListAndQueue+0x60>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	490b      	ldr	r1, [pc, #44]	@ (800e88c <prvCheckForValidListAndQueue+0x7c>)
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fe fb64 	bl	800cf2c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e864:	f000 f890 	bl	800e988 <vPortExitCritical>
    }
 800e868:	bf00      	nop
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	20046cb8 	.word	0x20046cb8
 800e874:	20046c88 	.word	0x20046c88
 800e878:	20046c9c 	.word	0x20046c9c
 800e87c:	20046cb0 	.word	0x20046cb0
 800e880:	20046cb4 	.word	0x20046cb4
 800e884:	20046d64 	.word	0x20046d64
 800e888:	20046cc4 	.word	0x20046cc4
 800e88c:	0802db20 	.word	0x0802db20

0800e890 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800e890:	b480      	push	{r7}
 800e892:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e894:	4b0b      	ldr	r3, [pc, #44]	@ (800e8c4 <vPortSetupTimerInterrupt+0x34>)
 800e896:	2200      	movs	r2, #0
 800e898:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e89a:	4b0b      	ldr	r3, [pc, #44]	@ (800e8c8 <vPortSetupTimerInterrupt+0x38>)
 800e89c:	2200      	movs	r2, #0
 800e89e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8a0:	4b0a      	ldr	r3, [pc, #40]	@ (800e8cc <vPortSetupTimerInterrupt+0x3c>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4a0a      	ldr	r2, [pc, #40]	@ (800e8d0 <vPortSetupTimerInterrupt+0x40>)
 800e8a6:	fba2 2303 	umull	r2, r3, r2, r3
 800e8aa:	099b      	lsrs	r3, r3, #6
 800e8ac:	4a09      	ldr	r2, [pc, #36]	@ (800e8d4 <vPortSetupTimerInterrupt+0x44>)
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800e8b2:	4b04      	ldr	r3, [pc, #16]	@ (800e8c4 <vPortSetupTimerInterrupt+0x34>)
 800e8b4:	2207      	movs	r2, #7
 800e8b6:	601a      	str	r2, [r3, #0]
}
 800e8b8:	bf00      	nop
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr
 800e8c2:	bf00      	nop
 800e8c4:	e000e010 	.word	0xe000e010
 800e8c8:	e000e018 	.word	0xe000e018
 800e8cc:	20000004 	.word	0x20000004
 800e8d0:	10624dd3 	.word	0x10624dd3
 800e8d4:	e000e014 	.word	0xe000e014

0800e8d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800e8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e90c <prvTaskExitError+0x34>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ea:	d003      	beq.n	800e8f4 <prvTaskExitError+0x1c>
 800e8ec:	f000 fa04 	bl	800ecf8 <ulSetInterruptMask>
 800e8f0:	bf00      	nop
 800e8f2:	e7fd      	b.n	800e8f0 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800e8f4:	f000 fa00 	bl	800ecf8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800e8f8:	bf00      	nop
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d0fc      	beq.n	800e8fa <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800e900:	bf00      	nop
 800e902:	bf00      	nop
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	20000010 	.word	0x20000010

0800e910 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if ( configENABLE_FPU == 1 )
    static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
    {
 800e910:	b480      	push	{r7}
 800e912:	af00      	add	r7, sp, #0
        #endif /* configENABLE_TRUSTZONE */

        /* CP10 = 11 ==> Full access to FPU i.e. both privileged and
         * unprivileged code should be able to access FPU. CP11 should be
         * programmed to the same value as CP10. */
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800e914:	4b08      	ldr	r3, [pc, #32]	@ (800e938 <prvSetupFPU+0x28>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a07      	ldr	r2, [pc, #28]	@ (800e938 <prvSetupFPU+0x28>)
 800e91a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e91e:	6013      	str	r3, [r2, #0]
                            );

        /* ASPEN = 1 ==> Hardware should automatically preserve floating point
         * context on exception entry and restore on exception return.
         * LSPEN = 1 ==> Enable lazy context save of FP state. */
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800e920:	4b06      	ldr	r3, [pc, #24]	@ (800e93c <prvSetupFPU+0x2c>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a05      	ldr	r2, [pc, #20]	@ (800e93c <prvSetupFPU+0x2c>)
 800e926:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e92a:	6013      	str	r3, [r2, #0]
    }
 800e92c:	bf00      	nop
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop
 800e938:	e000ed88 	.word	0xe000ed88
 800e93c:	e000ef34 	.word	0xe000ef34

0800e940 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800e940:	b480      	push	{r7}
 800e942:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e944:	4b06      	ldr	r3, [pc, #24]	@ (800e960 <vPortYield+0x20>)
 800e946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e94a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e94c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e950:	f3bf 8f6f 	isb	sy
}
 800e954:	bf00      	nop
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	e000ed04 	.word	0xe000ed04

0800e964 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e964:	b580      	push	{r7, lr}
 800e966:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e968:	f000 f9c6 	bl	800ecf8 <ulSetInterruptMask>
    ulCriticalNesting++;
 800e96c:	4b05      	ldr	r3, [pc, #20]	@ (800e984 <vPortEnterCritical+0x20>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3301      	adds	r3, #1
 800e972:	4a04      	ldr	r2, [pc, #16]	@ (800e984 <vPortEnterCritical+0x20>)
 800e974:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e976:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e97a:	f3bf 8f6f 	isb	sy
}
 800e97e:	bf00      	nop
 800e980:	bd80      	pop	{r7, pc}
 800e982:	bf00      	nop
 800e984:	20000010 	.word	0x20000010

0800e988 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800e98c:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b8 <vPortExitCritical+0x30>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d103      	bne.n	800e99c <vPortExitCritical+0x14>
 800e994:	f000 f9b0 	bl	800ecf8 <ulSetInterruptMask>
 800e998:	bf00      	nop
 800e99a:	e7fd      	b.n	800e998 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800e99c:	4b06      	ldr	r3, [pc, #24]	@ (800e9b8 <vPortExitCritical+0x30>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	3b01      	subs	r3, #1
 800e9a2:	4a05      	ldr	r2, [pc, #20]	@ (800e9b8 <vPortExitCritical+0x30>)
 800e9a4:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800e9a6:	4b04      	ldr	r3, [pc, #16]	@ (800e9b8 <vPortExitCritical+0x30>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d102      	bne.n	800e9b4 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	f000 f9af 	bl	800ed12 <vClearInterruptMask>
    }
}
 800e9b4:	bf00      	nop
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	20000010 	.word	0x20000010

0800e9bc <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9c2:	f000 f999 	bl	800ecf8 <ulSetInterruptMask>
 800e9c6:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800e9c8:	f7fe fe9e 	bl	800d708 <xTaskIncrementTick>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d003      	beq.n	800e9da <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e9d2:	4b05      	ldr	r3, [pc, #20]	@ (800e9e8 <xPortSysTickHandler+0x2c>)
 800e9d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9d8:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 f999 	bl	800ed12 <vClearInterruptMask>
}
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	e000ed04 	.word	0xe000ed04

0800e9ec <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	699b      	ldr	r3, [r3, #24]
 800e9f8:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	3b02      	subs	r3, #2
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800ea02:	7afb      	ldrb	r3, [r7, #11]
 800ea04:	2b66      	cmp	r3, #102	@ 0x66
 800ea06:	d104      	bne.n	800ea12 <vPortSVCHandler_C+0x26>
            #endif /* configENABLE_TRUSTZONE */

            #if ( configENABLE_FPU == 1 )
            {
                /* Setup the Floating Point Unit (FPU). */
                prvSetupFPU();
 800ea08:	f7ff ff82 	bl	800e910 <prvSetupFPU>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800ea0c:	f000 f940 	bl	800ec90 <vRestoreContextOfFirstTask>
            break;
 800ea10:	e003      	b.n	800ea1a <vPortSVCHandler_C+0x2e>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800ea12:	f000 f971 	bl	800ecf8 <ulSetInterruptMask>
 800ea16:	bf00      	nop
 800ea18:	e7fd      	b.n	800ea16 <vPortSVCHandler_C+0x2a>
    }
}
 800ea1a:	bf00      	nop
 800ea1c:	3710      	adds	r7, #16
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
	...

0800ea24 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	607a      	str	r2, [r7, #4]
 800ea30:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	3b04      	subs	r3, #4
 800ea36:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ea3e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	3b04      	subs	r3, #4
 800ea44:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	3b04      	subs	r3, #4
 800ea50:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 800ea52:	4a38      	ldr	r2, [pc, #224]	@ (800eb34 <pxPortInitialiseStack+0x110>)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	3b04      	subs	r3, #4
 800ea5c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800ea64:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	3b04      	subs	r3, #4
 800ea6a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800ea72:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	3b04      	subs	r3, #4
 800ea78:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800ea80:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	3b04      	subs	r3, #4
 800ea86:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800ea8e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	3b04      	subs	r3, #4
 800ea94:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800ea96:	683a      	ldr	r2, [r7, #0]
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	3b04      	subs	r3, #4
 800eaa0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800eaa8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	3b04      	subs	r3, #4
 800eaae:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800eab6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	3b04      	subs	r3, #4
 800eabc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800eac4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	3b04      	subs	r3, #4
 800eaca:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800ead2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	3b04      	subs	r3, #4
 800ead8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800eae0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	3b04      	subs	r3, #4
 800eae6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800eaee:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	3b04      	subs	r3, #4
 800eaf4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800eafc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	3b04      	subs	r3, #4
 800eb02:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800eb0a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3b04      	subs	r3, #4
 800eb10:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800eb18:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	3b04      	subs	r3, #4
 800eb1e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800eb20:	68ba      	ldr	r2, [r7, #8]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 800eb26:	68fb      	ldr	r3, [r7, #12]
    }
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3714      	adds	r7, #20
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr
 800eb34:	0800e8d9 	.word	0x0800e8d9

0800eb38 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 800eb42:	4b35      	ldr	r3, [pc, #212]	@ (800ec18 <xPortStartScheduler+0xe0>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 800eb48:	4b33      	ldr	r3, [pc, #204]	@ (800ec18 <xPortStartScheduler+0xe0>)
 800eb4a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800eb4e:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800eb50:	4b31      	ldr	r3, [pc, #196]	@ (800ec18 <xPortStartScheduler+0xe0>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	0e1b      	lsrs	r3, r3, #24
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb5a:	79fb      	ldrb	r3, [r7, #7]
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	4b2d      	ldr	r3, [pc, #180]	@ (800ec1c <xPortStartScheduler+0xe4>)
 800eb66:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800eb68:	4b2c      	ldr	r3, [pc, #176]	@ (800ec1c <xPortStartScheduler+0xe4>)
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d103      	bne.n	800eb78 <xPortStartScheduler+0x40>
 800eb70:	f000 f8c2 	bl	800ecf8 <ulSetInterruptMask>
 800eb74:	bf00      	nop
 800eb76:	e7fd      	b.n	800eb74 <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800eb78:	79fb      	ldrb	r3, [r7, #7]
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	43db      	mvns	r3, r3
 800eb7e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00b      	beq.n	800eb9e <xPortStartScheduler+0x66>
 800eb86:	f000 f8b7 	bl	800ecf8 <ulSetInterruptMask>
 800eb8a:	bf00      	nop
 800eb8c:	e7fd      	b.n	800eb8a <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	3301      	adds	r3, #1
 800eb92:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb94:	79fb      	ldrb	r3, [r7, #7]
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	005b      	lsls	r3, r3, #1
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb9e:	79fb      	ldrb	r3, [r7, #7]
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eba6:	2b80      	cmp	r3, #128	@ 0x80
 800eba8:	d0f1      	beq.n	800eb8e <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	2b08      	cmp	r3, #8
 800ebae:	d103      	bne.n	800ebb8 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800ebb0:	4b1b      	ldr	r3, [pc, #108]	@ (800ec20 <xPortStartScheduler+0xe8>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	601a      	str	r2, [r3, #0]
 800ebb6:	e004      	b.n	800ebc2 <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	f1c3 0307 	rsb	r3, r3, #7
 800ebbe:	4a18      	ldr	r2, [pc, #96]	@ (800ec20 <xPortStartScheduler+0xe8>)
 800ebc0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ebc2:	4b17      	ldr	r3, [pc, #92]	@ (800ec20 <xPortStartScheduler+0xe8>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	021b      	lsls	r3, r3, #8
 800ebc8:	4a15      	ldr	r2, [pc, #84]	@ (800ec20 <xPortStartScheduler+0xe8>)
 800ebca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ebcc:	4b14      	ldr	r3, [pc, #80]	@ (800ec20 <xPortStartScheduler+0xe8>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ebd4:	4a12      	ldr	r2, [pc, #72]	@ (800ec20 <xPortStartScheduler+0xe8>)
 800ebd6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 800ebd8:	4a0f      	ldr	r2, [pc, #60]	@ (800ec18 <xPortStartScheduler+0xe0>)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800ebde:	4b11      	ldr	r3, [pc, #68]	@ (800ec24 <xPortStartScheduler+0xec>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4a10      	ldr	r2, [pc, #64]	@ (800ec24 <xPortStartScheduler+0xec>)
 800ebe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ebe8:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800ebea:	4b0e      	ldr	r3, [pc, #56]	@ (800ec24 <xPortStartScheduler+0xec>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a0d      	ldr	r2, [pc, #52]	@ (800ec24 <xPortStartScheduler+0xec>)
 800ebf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ebf4:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800ebf6:	f7ff fe4b 	bl	800e890 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800ebfa:	4b0b      	ldr	r3, [pc, #44]	@ (800ec28 <xPortStartScheduler+0xf0>)
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 800ec00:	f000 f866 	bl	800ecd0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800ec04:	f7fe fe90 	bl	800d928 <vTaskSwitchContext>
    prvTaskExitError();
 800ec08:	f7ff fe66 	bl	800e8d8 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800ec0c:	2300      	movs	r3, #0
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	e000ed1c 	.word	0xe000ed1c
 800ec1c:	20046db4 	.word	0x20046db4
 800ec20:	20046db8 	.word	0x20046db8
 800ec24:	e000ed20 	.word	0xe000ed20
 800ec28:	20000010 	.word	0x20000010

0800ec2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )

    void vPortValidateInterruptPriority( void )
    {
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800ec32:	f3ef 8305 	mrs	r3, IPSR
 800ec36:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2b0f      	cmp	r3, #15
 800ec3c:	d90d      	bls.n	800ec5a <vPortValidateInterruptPriority+0x2e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec3e:	4a0f      	ldr	r2, [pc, #60]	@ (800ec7c <vPortValidateInterruptPriority+0x50>)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	4413      	add	r3, r2
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec48:	4b0d      	ldr	r3, [pc, #52]	@ (800ec80 <vPortValidateInterruptPriority+0x54>)
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	78fa      	ldrb	r2, [r7, #3]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d203      	bcs.n	800ec5a <vPortValidateInterruptPriority+0x2e>
 800ec52:	f000 f851 	bl	800ecf8 <ulSetInterruptMask>
 800ec56:	bf00      	nop
 800ec58:	e7fd      	b.n	800ec56 <vPortValidateInterruptPriority+0x2a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ec84 <vPortValidateInterruptPriority+0x58>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ec62:	4b09      	ldr	r3, [pc, #36]	@ (800ec88 <vPortValidateInterruptPriority+0x5c>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d903      	bls.n	800ec72 <vPortValidateInterruptPriority+0x46>
 800ec6a:	f000 f845 	bl	800ecf8 <ulSetInterruptMask>
 800ec6e:	bf00      	nop
 800ec70:	e7fd      	b.n	800ec6e <vPortValidateInterruptPriority+0x42>
    }
 800ec72:	bf00      	nop
 800ec74:	3708      	adds	r7, #8
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	e000e3f0 	.word	0xe000e3f0
 800ec80:	20046db4 	.word	0x20046db4
 800ec84:	e000ed0c 	.word	0xe000ed0c
 800ec88:	20046db8 	.word	0x20046db8
 800ec8c:	00000000 	.word	0x00000000

0800ec90 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800ec90:	4a0b      	ldr	r2, [pc, #44]	@ (800ecc0 <pxCurrentTCBConst2>)
 800ec92:	6811      	ldr	r1, [r2, #0]
 800ec94:	6808      	ldr	r0, [r1, #0]
 800ec96:	c806      	ldmia	r0!, {r1, r2}
 800ec98:	f381 880b 	msr	PSPLIM, r1
 800ec9c:	2102      	movs	r1, #2
 800ec9e:	f381 8814 	msr	CONTROL, r1
 800eca2:	3020      	adds	r0, #32
 800eca4:	f380 8809 	msr	PSP, r0
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f04f 0000 	mov.w	r0, #0
 800ecb0:	f380 8811 	msr	BASEPRI, r0
 800ecb4:	4710      	bx	r2
 800ecb6:	bf00      	nop
 800ecb8:	f3af 8000 	nop.w
 800ecbc:	f3af 8000 	nop.w

0800ecc0 <pxCurrentTCBConst2>:
 800ecc0:	20046788 	.word	0x20046788
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 800ecc4:	bf00      	nop
 800ecc6:	bf00      	nop
	...

0800ecd0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ecd0:	4807      	ldr	r0, [pc, #28]	@ (800ecf0 <xVTORConst>)
 800ecd2:	6800      	ldr	r0, [r0, #0]
 800ecd4:	6800      	ldr	r0, [r0, #0]
 800ecd6:	f380 8808 	msr	MSP, r0
 800ecda:	b662      	cpsie	i
 800ecdc:	b661      	cpsie	f
 800ecde:	f3bf 8f4f 	dsb	sy
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	df66      	svc	102	@ 0x66
 800ece8:	bf00      	nop
 800ecea:	bf00      	nop
 800ecec:	f3af 8000 	nop.w

0800ecf0 <xVTORConst>:
 800ecf0:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800ecf4:	bf00      	nop
 800ecf6:	bf00      	nop

0800ecf8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ecf8:	f3ef 8011 	mrs	r0, BASEPRI
 800ecfc:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800ed00:	f381 8811 	msr	BASEPRI, r1
 800ed04:	f3bf 8f4f 	dsb	sy
 800ed08:	f3bf 8f6f 	isb	sy
 800ed0c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800ed0e:	bf00      	nop
 800ed10:	4618      	mov	r0, r3

0800ed12 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ed12:	f380 8811 	msr	BASEPRI, r0
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	f3bf 8f6f 	isb	sy
 800ed1e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 800ed20:	bf00      	nop
	...

0800ed30 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800ed30:	f3ef 8009 	mrs	r0, PSP
 800ed34:	f01e 0f10 	tst.w	lr, #16
 800ed38:	bf08      	it	eq
 800ed3a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ed3e:	f3ef 820b 	mrs	r2, PSPLIM
 800ed42:	4673      	mov	r3, lr
 800ed44:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ed48:	4a11      	ldr	r2, [pc, #68]	@ (800ed90 <pxCurrentTCBConst>)
 800ed4a:	6811      	ldr	r1, [r2, #0]
 800ed4c:	6008      	str	r0, [r1, #0]
 800ed4e:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ed52:	f380 8811 	msr	BASEPRI, r0
 800ed56:	f3bf 8f4f 	dsb	sy
 800ed5a:	f3bf 8f6f 	isb	sy
 800ed5e:	f7fe fde3 	bl	800d928 <vTaskSwitchContext>
 800ed62:	f04f 0000 	mov.w	r0, #0
 800ed66:	f380 8811 	msr	BASEPRI, r0
 800ed6a:	4a09      	ldr	r2, [pc, #36]	@ (800ed90 <pxCurrentTCBConst>)
 800ed6c:	6811      	ldr	r1, [r2, #0]
 800ed6e:	6808      	ldr	r0, [r1, #0]
 800ed70:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ed74:	f013 0f10 	tst.w	r3, #16
 800ed78:	bf08      	it	eq
 800ed7a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed7e:	f382 880b 	msr	PSPLIM, r2
 800ed82:	f380 8809 	msr	PSP, r0
 800ed86:	4718      	bx	r3
 800ed88:	f3af 8000 	nop.w
 800ed8c:	f3af 8000 	nop.w

0800ed90 <pxCurrentTCBConst>:
 800ed90:	20046788 	.word	0x20046788
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800ed94:	bf00      	nop
 800ed96:	bf00      	nop
	...

0800eda0 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800eda0:	f01e 0f04 	tst.w	lr, #4
 800eda4:	bf0c      	ite	eq
 800eda6:	f3ef 8008 	mrseq	r0, MSP
 800edaa:	f3ef 8009 	mrsne	r0, PSP
 800edae:	4904      	ldr	r1, [pc, #16]	@ (800edc0 <svchandler_address_const>)
 800edb0:	4708      	bx	r1
 800edb2:	bf00      	nop
 800edb4:	f3af 8000 	nop.w
 800edb8:	f3af 8000 	nop.w
 800edbc:	f3af 8000 	nop.w

0800edc0 <svchandler_address_const>:
 800edc0:	0800e9ed 	.word	0x0800e9ed
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 800edc4:	bf00      	nop
 800edc6:	bf00      	nop

0800edc8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b088      	sub	sp, #32
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800edd0:	2300      	movs	r3, #0
 800edd2:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800edd4:	f7fe fb80 	bl	800d4d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800edd8:	4b54      	ldr	r3, [pc, #336]	@ (800ef2c <pvPortMalloc+0x164>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d101      	bne.n	800ede4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800ede0:	f000 f8f8 	bl	800efd4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d022      	beq.n	800ee30 <pvPortMalloc+0x68>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800edea:	2308      	movs	r3, #8
 800edec:	43db      	mvns	r3, r3
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d81b      	bhi.n	800ee2c <pvPortMalloc+0x64>
            {
                xWantedSize += xHeapStructSize;
 800edf4:	2208      	movs	r2, #8
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4413      	add	r3, r2
 800edfa:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f003 0307 	and.w	r3, r3, #7
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d014      	beq.n	800ee30 <pvPortMalloc+0x68>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f003 0307 	and.w	r3, r3, #7
 800ee0c:	f1c3 0308 	rsb	r3, r3, #8
 800ee10:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	43db      	mvns	r3, r3
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d804      	bhi.n	800ee26 <pvPortMalloc+0x5e>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	4413      	add	r3, r2
 800ee22:	607b      	str	r3, [r7, #4]
 800ee24:	e004      	b.n	800ee30 <pvPortMalloc+0x68>
                    }
                    else
                    {
                        xWantedSize = 0;
 800ee26:	2300      	movs	r3, #0
 800ee28:	607b      	str	r3, [r7, #4]
 800ee2a:	e001      	b.n	800ee30 <pvPortMalloc+0x68>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	db69      	blt.n	800ef0a <pvPortMalloc+0x142>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d066      	beq.n	800ef0a <pvPortMalloc+0x142>
 800ee3c:	4b3c      	ldr	r3, [pc, #240]	@ (800ef30 <pvPortMalloc+0x168>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d861      	bhi.n	800ef0a <pvPortMalloc+0x142>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ee46:	4b3b      	ldr	r3, [pc, #236]	@ (800ef34 <pvPortMalloc+0x16c>)
 800ee48:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800ee4a:	4b3a      	ldr	r3, [pc, #232]	@ (800ef34 <pvPortMalloc+0x16c>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee50:	e004      	b.n	800ee5c <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d903      	bls.n	800ee6e <pvPortMalloc+0xa6>
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d1f1      	bne.n	800ee52 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ee6e:	4b2f      	ldr	r3, [pc, #188]	@ (800ef2c <pvPortMalloc+0x164>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	69fa      	ldr	r2, [r7, #28]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d048      	beq.n	800ef0a <pvPortMalloc+0x142>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ee78:	69bb      	ldr	r3, [r7, #24]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2208      	movs	r2, #8
 800ee7e:	4413      	add	r3, r2
 800ee80:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ee82:	69fb      	ldr	r3, [r7, #28]
 800ee84:	681a      	ldr	r2, [r3, #0]
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	685a      	ldr	r2, [r3, #4]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	1ad2      	subs	r2, r2, r3
 800ee92:	2308      	movs	r3, #8
 800ee94:	005b      	lsls	r3, r3, #1
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d918      	bls.n	800eecc <pvPortMalloc+0x104>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ee9a:	69fa      	ldr	r2, [r7, #28]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4413      	add	r3, r2
 800eea0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f003 0307 	and.w	r3, r3, #7
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d003      	beq.n	800eeb4 <pvPortMalloc+0xec>
 800eeac:	f7ff ff24 	bl	800ecf8 <ulSetInterruptMask>
 800eeb0:	bf00      	nop
 800eeb2:	e7fd      	b.n	800eeb0 <pvPortMalloc+0xe8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	685a      	ldr	r2, [r3, #4]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	1ad2      	subs	r2, r2, r3
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	f000 f8e2 	bl	800f090 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eecc:	4b18      	ldr	r3, [pc, #96]	@ (800ef30 <pvPortMalloc+0x168>)
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	1ad3      	subs	r3, r2, r3
 800eed6:	4a16      	ldr	r2, [pc, #88]	@ (800ef30 <pvPortMalloc+0x168>)
 800eed8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eeda:	4b15      	ldr	r3, [pc, #84]	@ (800ef30 <pvPortMalloc+0x168>)
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	4b16      	ldr	r3, [pc, #88]	@ (800ef38 <pvPortMalloc+0x170>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d203      	bcs.n	800eeee <pvPortMalloc+0x126>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eee6:	4b12      	ldr	r3, [pc, #72]	@ (800ef30 <pvPortMalloc+0x168>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4a13      	ldr	r2, [pc, #76]	@ (800ef38 <pvPortMalloc+0x170>)
 800eeec:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800eeee:	69fb      	ldr	r3, [r7, #28]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	2200      	movs	r2, #0
 800eefe:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800ef00:	4b0e      	ldr	r3, [pc, #56]	@ (800ef3c <pvPortMalloc+0x174>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	3301      	adds	r3, #1
 800ef06:	4a0d      	ldr	r2, [pc, #52]	@ (800ef3c <pvPortMalloc+0x174>)
 800ef08:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800ef0a:	f7fe faf3 	bl	800d4f4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	f003 0307 	and.w	r3, r3, #7
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d003      	beq.n	800ef20 <pvPortMalloc+0x158>
 800ef18:	f7ff feee 	bl	800ecf8 <ulSetInterruptMask>
 800ef1c:	bf00      	nop
 800ef1e:	e7fd      	b.n	800ef1c <pvPortMalloc+0x154>
    return pvReturn;
 800ef20:	697b      	ldr	r3, [r7, #20]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3720      	adds	r7, #32
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	2005a644 	.word	0x2005a644
 800ef30:	2005a648 	.word	0x2005a648
 800ef34:	2005a63c 	.word	0x2005a63c
 800ef38:	2005a64c 	.word	0x2005a64c
 800ef3c:	2005a650 	.word	0x2005a650

0800ef40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d037      	beq.n	800efc2 <vPortFree+0x82>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ef52:	2308      	movs	r3, #8
 800ef54:	425b      	negs	r3, r3
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	4413      	add	r3, r2
 800ef5a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	db03      	blt.n	800ef70 <vPortFree+0x30>
 800ef68:	f7ff fec6 	bl	800ecf8 <ulSetInterruptMask>
 800ef6c:	bf00      	nop
 800ef6e:	e7fd      	b.n	800ef6c <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d003      	beq.n	800ef80 <vPortFree+0x40>
 800ef78:	f7ff febe 	bl	800ecf8 <ulSetInterruptMask>
 800ef7c:	bf00      	nop
 800ef7e:	e7fd      	b.n	800ef7c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	da1c      	bge.n	800efc2 <vPortFree+0x82>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d118      	bne.n	800efc2 <vPortFree+0x82>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800ef9c:	f7fe fa9c 	bl	800d4d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	685a      	ldr	r2, [r3, #4]
 800efa4:	4b09      	ldr	r3, [pc, #36]	@ (800efcc <vPortFree+0x8c>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4413      	add	r3, r2
 800efaa:	4a08      	ldr	r2, [pc, #32]	@ (800efcc <vPortFree+0x8c>)
 800efac:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800efae:	68b8      	ldr	r0, [r7, #8]
 800efb0:	f000 f86e 	bl	800f090 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800efb4:	4b06      	ldr	r3, [pc, #24]	@ (800efd0 <vPortFree+0x90>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	3301      	adds	r3, #1
 800efba:	4a05      	ldr	r2, [pc, #20]	@ (800efd0 <vPortFree+0x90>)
 800efbc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800efbe:	f7fe fa99 	bl	800d4f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800efc2:	bf00      	nop
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	2005a648 	.word	0x2005a648
 800efd0:	2005a654 	.word	0x2005a654

0800efd4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800efd4:	b480      	push	{r7}
 800efd6:	b085      	sub	sp, #20
 800efd8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800efda:	4b27      	ldr	r3, [pc, #156]	@ (800f078 <prvHeapInit+0xa4>)
 800efdc:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800efde:	4b27      	ldr	r3, [pc, #156]	@ (800f07c <prvHeapInit+0xa8>)
 800efe0:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f003 0307 	and.w	r3, r3, #7
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00c      	beq.n	800f006 <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	3307      	adds	r3, #7
 800eff0:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f023 0307 	bic.w	r3, r3, #7
 800eff8:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800effa:	68ba      	ldr	r2, [r7, #8]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	4a1e      	ldr	r2, [pc, #120]	@ (800f07c <prvHeapInit+0xa8>)
 800f002:	4413      	add	r3, r2
 800f004:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f00a:	4a1d      	ldr	r2, [pc, #116]	@ (800f080 <prvHeapInit+0xac>)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800f010:	4b1b      	ldr	r3, [pc, #108]	@ (800f080 <prvHeapInit+0xac>)
 800f012:	2200      	movs	r2, #0
 800f014:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	4413      	add	r3, r2
 800f01c:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800f01e:	2208      	movs	r2, #8
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	1a9b      	subs	r3, r3, r2
 800f024:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f023 0307 	bic.w	r3, r3, #7
 800f02c:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	4a14      	ldr	r2, [pc, #80]	@ (800f084 <prvHeapInit+0xb0>)
 800f032:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800f034:	4b13      	ldr	r3, [pc, #76]	@ (800f084 <prvHeapInit+0xb0>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2200      	movs	r2, #0
 800f03a:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800f03c:	4b11      	ldr	r3, [pc, #68]	@ (800f084 <prvHeapInit+0xb0>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2200      	movs	r2, #0
 800f042:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	1ad2      	subs	r2, r2, r3
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f052:	4b0c      	ldr	r3, [pc, #48]	@ (800f084 <prvHeapInit+0xb0>)
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	4a0a      	ldr	r2, [pc, #40]	@ (800f088 <prvHeapInit+0xb4>)
 800f060:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	4a09      	ldr	r2, [pc, #36]	@ (800f08c <prvHeapInit+0xb8>)
 800f068:	6013      	str	r3, [r2, #0]
}
 800f06a:	bf00      	nop
 800f06c:	3714      	adds	r7, #20
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr
 800f076:	bf00      	nop
 800f078:	00013880 	.word	0x00013880
 800f07c:	20046dbc 	.word	0x20046dbc
 800f080:	2005a63c 	.word	0x2005a63c
 800f084:	2005a644 	.word	0x2005a644
 800f088:	2005a64c 	.word	0x2005a64c
 800f08c:	2005a648 	.word	0x2005a648

0800f090 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800f090:	b480      	push	{r7}
 800f092:	b085      	sub	sp, #20
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f098:	4b28      	ldr	r3, [pc, #160]	@ (800f13c <prvInsertBlockIntoFreeList+0xac>)
 800f09a:	60fb      	str	r3, [r7, #12]
 800f09c:	e002      	b.n	800f0a4 <prvInsertBlockIntoFreeList+0x14>
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	60fb      	str	r3, [r7, #12]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d8f7      	bhi.n	800f09e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	68ba      	ldr	r2, [r7, #8]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d108      	bne.n	800f0d2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	685a      	ldr	r2, [r3, #4]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	441a      	add	r2, r3
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	68ba      	ldr	r2, [r7, #8]
 800f0dc:	441a      	add	r2, r3
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d118      	bne.n	800f118 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	4b15      	ldr	r3, [pc, #84]	@ (800f140 <prvInsertBlockIntoFreeList+0xb0>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d00d      	beq.n	800f10e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	685a      	ldr	r2, [r3, #4]
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	441a      	add	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	681a      	ldr	r2, [r3, #0]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	601a      	str	r2, [r3, #0]
 800f10c:	e008      	b.n	800f120 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f10e:	4b0c      	ldr	r3, [pc, #48]	@ (800f140 <prvInsertBlockIntoFreeList+0xb0>)
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	601a      	str	r2, [r3, #0]
 800f116:	e003      	b.n	800f120 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	429a      	cmp	r2, r3
 800f126:	d002      	beq.n	800f12e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800f12e:	bf00      	nop
 800f130:	3714      	adds	r7, #20
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	2005a63c 	.word	0x2005a63c
 800f140:	2005a644 	.word	0x2005a644

0800f144 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800f144:	b480      	push	{r7}
 800f146:	af00      	add	r7, sp, #0
}
 800f148:	bf00      	nop
 800f14a:	46bd      	mov	sp, r7
 800f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f150:	4770      	bx	lr

0800f152 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f152:	b580      	push	{r7, lr}
 800f154:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800f156:	f003 fee1 	bl	8012f1c <touchgfx_components_init>
    touchgfx_init();
 800f15a:	f003 fead 	bl	8012eb8 <touchgfx_init>
}
 800f15e:	bf00      	nop
 800f160:	bd80      	pop	{r7, pc}

0800f162 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800f166:	f003 fee1 	bl	8012f2c <touchgfx_taskEntry>
}
 800f16a:	bf00      	nop
 800f16c:	bd80      	pop	{r7, pc}
	...

0800f170 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
    {
 800f178:	4a04      	ldr	r2, [pc, #16]	@ (800f18c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	601a      	str	r2, [r3, #0]
    }
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4618      	mov	r0, r3
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr
 800f18c:	0802e88c 	.word	0x0802e88c

0800f190 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
    }
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f7ff ffe9 	bl	800f170 <_ZN8touchgfx12FontProviderD1Ev>
 800f19e:	2104      	movs	r1, #4
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f01c fcde 	bl	802bb62 <_ZdlPvj>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3708      	adds	r7, #8
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f1bc:	887b      	ldrh	r3, [r7, #2]
 800f1be:	2b02      	cmp	r3, #2
 800f1c0:	d010      	beq.n	800f1e4 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f1c2:	2b02      	cmp	r3, #2
 800f1c4:	dc13      	bgt.n	800f1ee <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d002      	beq.n	800f1d0 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	d005      	beq.n	800f1da <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f1ce:	e00e      	b.n	800f1ee <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f1d0:	f001 fea6 	bl	8010f20 <_ZN17TypedTextDatabase8getFontsEv>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	e00a      	b.n	800f1f0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f1da:	f001 fea1 	bl	8010f20 <_ZN17TypedTextDatabase8getFontsEv>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	e005      	b.n	800f1f0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f1e4:	f001 fe9c 	bl	8010f20 <_ZN17TypedTextDatabase8getFontsEv>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	e000      	b.n	800f1f0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f1ee:	2300      	movs	r3, #0
    }
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	4a05      	ldr	r2, [pc, #20]	@ (800f218 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	601a      	str	r2, [r3, #0]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4618      	mov	r0, r3
 800f20a:	f7ff ffb1 	bl	800f170 <_ZN8touchgfx12FontProviderD1Ev>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	0802e878 	.word	0x0802e878

0800f21c <_ZN23ApplicationFontProviderD0Ev>:
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7ff ffe7 	bl	800f1f8 <_ZN23ApplicationFontProviderD1Ev>
 800f22a:	2104      	movs	r1, #4
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f01c fc98 	bl	802bb62 <_ZdlPvj>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4618      	mov	r0, r3
 800f236:	3708      	adds	r7, #8
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
    {
 800f244:	4a04      	ldr	r2, [pc, #16]	@ (800f258 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	601a      	str	r2, [r3, #0]
    }
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4618      	mov	r0, r3
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	0802eb48 	.word	0x0802eb48

0800f25c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
    }
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7ff ffe9 	bl	800f23c <_ZN8touchgfx4FontD1Ev>
 800f26a:	2114      	movs	r1, #20
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f01c fc78 	bl	802bb62 <_ZdlPvj>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	4618      	mov	r0, r3
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f27c:	b590      	push	{r4, r7, lr}
 800f27e:	b087      	sub	sp, #28
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	460b      	mov	r3, r1
 800f286:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f288:	887b      	ldrh	r3, [r7, #2]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d101      	bne.n	800f292 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f28e:	2300      	movs	r3, #0
 800f290:	e010      	b.n	800f2b4 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f292:	2300      	movs	r3, #0
 800f294:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f296:	2300      	movs	r3, #0
 800f298:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	3308      	adds	r3, #8
 800f2a0:	681c      	ldr	r4, [r3, #0]
 800f2a2:	f107 030f 	add.w	r3, r7, #15
 800f2a6:	f107 0210 	add.w	r2, r7, #16
 800f2aa:	8879      	ldrh	r1, [r7, #2]
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	47a0      	blx	r4
 800f2b0:	6178      	str	r0, [r7, #20]
        return glyph;
 800f2b2:	697b      	ldr	r3, [r7, #20]
    }
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	371c      	adds	r7, #28
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd90      	pop	{r4, r7, pc}

0800f2bc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	89db      	ldrh	r3, [r3, #14]
    }
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	8a1b      	ldrh	r3, [r3, #16]
    }
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	88db      	ldrh	r3, [r3, #6]
    }
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	889b      	ldrh	r3, [r3, #4]
    }
 800f310:	4618      	mov	r0, r3
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f31c:	b480      	push	{r7}
 800f31e:	b083      	sub	sp, #12
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	7a9b      	ldrb	r3, [r3, #10]
 800f328:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f32c:	b2db      	uxtb	r3, r3
    }
 800f32e:	4618      	mov	r0, r3
 800f330:	370c      	adds	r7, #12
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr

0800f33a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800f33a:	b480      	push	{r7}
 800f33c:	b083      	sub	sp, #12
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	7a9b      	ldrb	r3, [r3, #10]
 800f346:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f34a:	b2db      	uxtb	r3, r3
    }
 800f34c:	4618      	mov	r0, r3
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800f358:	b480      	push	{r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
    {
        return false;
 800f360:	2300      	movs	r3, #0
    }
 800f362:	4618      	mov	r0, r3
 800f364:	370c      	adds	r7, #12
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr

0800f36e <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800f36e:	b480      	push	{r7}
 800f370:	b083      	sub	sp, #12
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f376:	f04f 0300 	mov.w	r3, #0
 800f37a:	ee07 3a90 	vmov	s15, r3
    }
 800f37e:	eeb0 0a67 	vmov.f32	s0, s15
 800f382:	370c      	adds	r7, #12
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr

0800f38c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	4a05      	ldr	r2, [pc, #20]	@ (800f3ac <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	601a      	str	r2, [r3, #0]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7ff ff4d 	bl	800f23c <_ZN8touchgfx4FontD1Ev>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3708      	adds	r7, #8
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	0802f93c 	.word	0x0802f93c

0800f3b0 <_ZN8touchgfx9ConstFontD0Ev>:
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f7ff ffe7 	bl	800f38c <_ZN8touchgfx9ConstFontD1Ev>
 800f3be:	211c      	movs	r1, #28
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f01c fbce 	bl	802bb62 <_ZdlPvj>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3708      	adds	r7, #8
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	4a05      	ldr	r2, [pc, #20]	@ (800f3f0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	601a      	str	r2, [r3, #0]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7ff ffd3 	bl	800f38c <_ZN8touchgfx9ConstFontD1Ev>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3708      	adds	r7, #8
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	0802e8a0 	.word	0x0802e8a0

0800f3f4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7ff ffe7 	bl	800f3d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f402:	212c      	movs	r1, #44	@ 0x2c
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f01c fbac 	bl	802bb62 <_ZdlPvj>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	4618      	mov	r0, r3
 800f40e:	3708      	adds	r7, #8
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f414:	b480      	push	{r7}
 800f416:	af00      	add	r7, sp, #0
    {
        return instance;
 800f418:	4b03      	ldr	r3, [pc, #12]	@ (800f428 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f41a:	681b      	ldr	r3, [r3, #0]
    }
 800f41c:	4618      	mov	r0, r3
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	2005ba80 	.word	0x2005ba80

0800f42c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800f438:	4618      	mov	r0, r3
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800f450:	4618      	mov	r0, r3
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b08e      	sub	sp, #56	@ 0x38
 800f460:	af0a      	add	r7, sp, #40	@ 0x28
 800f462:	60f8      	str	r0, [r7, #12]
 800f464:	60b9      	str	r1, [r7, #8]
 800f466:	4611      	mov	r1, r2
 800f468:	461a      	mov	r2, r3
 800f46a:	460b      	mov	r3, r1
 800f46c:	80fb      	strh	r3, [r7, #6]
 800f46e:	4613      	mov	r3, r2
 800f470:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	88b9      	ldrh	r1, [r7, #4]
 800f476:	88fa      	ldrh	r2, [r7, #6]
 800f478:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f47c:	9308      	str	r3, [sp, #32]
 800f47e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f480:	9307      	str	r3, [sp, #28]
 800f482:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800f486:	9306      	str	r3, [sp, #24]
 800f488:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f48c:	9305      	str	r3, [sp, #20]
 800f48e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f492:	9304      	str	r3, [sp, #16]
 800f494:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f498:	9303      	str	r3, [sp, #12]
 800f49a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f49e:	9302      	str	r3, [sp, #8]
 800f4a0:	7f3b      	ldrb	r3, [r7, #28]
 800f4a2:	9301      	str	r3, [sp, #4]
 800f4a4:	8b3b      	ldrh	r3, [r7, #24]
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	68b9      	ldr	r1, [r7, #8]
 800f4ac:	f00b ff1c 	bl	801b2e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800f4b0:	4a09      	ldr	r2, [pc, #36]	@ (800f4d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4ba:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f4c0:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f4c6:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f4cc:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	0802e8a0 	.word	0x0802e8a0

0800f4dc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b087      	sub	sp, #28
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	881b      	ldrh	r3, [r3, #0]
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	3302      	adds	r3, #2
 800f4f6:	881b      	ldrh	r3, [r3, #0]
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	041b      	lsls	r3, r3, #16
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	4313      	orrs	r3, r2
 800f502:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	69db      	ldr	r3, [r3, #28]
 800f508:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	889b      	ldrh	r3, [r3, #4]
 800f50e:	0adb      	lsrs	r3, r3, #11
 800f510:	b29b      	uxth	r3, r3
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	4413      	add	r3, r2
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 800f51c:	68ba      	ldr	r2, [r7, #8]
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	4413      	add	r3, r2
}
 800f522:	4618      	mov	r0, r3
 800f524:	371c      	adds	r7, #28
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr

0800f52e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f52e:	b480      	push	{r7}
 800f530:	b089      	sub	sp, #36	@ 0x24
 800f532:	af00      	add	r7, sp, #0
 800f534:	60f8      	str	r0, [r7, #12]
 800f536:	460b      	mov	r3, r1
 800f538:	607a      	str	r2, [r7, #4]
 800f53a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d003      	beq.n	800f54a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	7b1b      	ldrb	r3, [r3, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d101      	bne.n	800f54e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f54a:	2300      	movs	r3, #0
 800f54c:	e032      	b.n	800f5b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	6a1a      	ldr	r2, [r3, #32]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	7b5b      	ldrb	r3, [r3, #13]
 800f55a:	b21b      	sxth	r3, r3
 800f55c:	021b      	lsls	r3, r3, #8
 800f55e:	b21b      	sxth	r3, r3
 800f560:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f564:	b219      	sxth	r1, r3
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	7adb      	ldrb	r3, [r3, #11]
 800f56a:	b21b      	sxth	r3, r3
 800f56c:	430b      	orrs	r3, r1
 800f56e:	b21b      	sxth	r3, r3
 800f570:	b29b      	uxth	r3, r3
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	4413      	add	r3, r2
 800f576:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	7b1b      	ldrb	r3, [r3, #12]
 800f57c:	837b      	strh	r3, [r7, #26]
 800f57e:	e013      	b.n	800f5a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	881b      	ldrh	r3, [r3, #0]
 800f584:	897a      	ldrh	r2, [r7, #10]
 800f586:	429a      	cmp	r2, r3
 800f588:	d103      	bne.n	800f592 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f590:	e010      	b.n	800f5b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	881b      	ldrh	r3, [r3, #0]
 800f596:	897a      	ldrh	r2, [r7, #10]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d309      	bcc.n	800f5b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f59c:	8b7b      	ldrh	r3, [r7, #26]
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	837b      	strh	r3, [r7, #26]
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	61fb      	str	r3, [r7, #28]
 800f5a8:	8b7b      	ldrh	r3, [r7, #26]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d1e8      	bne.n	800f580 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800f5ae:	e000      	b.n	800f5b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800f5b0:	bf00      	nop
        }
    }
    return 0;
 800f5b2:	2300      	movs	r3, #0
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3724      	adds	r7, #36	@ 0x24
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	4801      	ldr	r0, [pc, #4]	@ (800f5cc <__tcf_0+0xc>)
 800f5c6:	f7ff ff03 	bl	800f3d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	2005a658 	.word	0x2005a658

0800f5d0 <_Z23getFont_verdana_10_4bppv>:
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b08e      	sub	sp, #56	@ 0x38
 800f5d4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f5d6:	4b20      	ldr	r3, [pc, #128]	@ (800f658 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f5d8:	e8d3 3faf 	lda	r3, [r3]
 800f5dc:	f003 0301 	and.w	r3, r3, #1
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	bf0c      	ite	eq
 800f5e4:	2301      	moveq	r3, #1
 800f5e6:	2300      	movne	r3, #0
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d030      	beq.n	800f650 <_Z23getFont_verdana_10_4bppv+0x80>
 800f5ee:	481a      	ldr	r0, [pc, #104]	@ (800f658 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f5f0:	f01c fab9 	bl	802bb66 <__cxa_guard_acquire>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	bf14      	ite	ne
 800f5fa:	2301      	movne	r3, #1
 800f5fc:	2300      	moveq	r3, #0
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	2b00      	cmp	r3, #0
 800f602:	d025      	beq.n	800f650 <_Z23getFont_verdana_10_4bppv+0x80>
 800f604:	2300      	movs	r3, #0
 800f606:	930c      	str	r3, [sp, #48]	@ 0x30
 800f608:	2300      	movs	r3, #0
 800f60a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f60c:	2300      	movs	r3, #0
 800f60e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f610:	233f      	movs	r3, #63	@ 0x3f
 800f612:	9309      	str	r3, [sp, #36]	@ 0x24
 800f614:	4b11      	ldr	r3, [pc, #68]	@ (800f65c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800f616:	9308      	str	r3, [sp, #32]
 800f618:	4b11      	ldr	r3, [pc, #68]	@ (800f660 <_Z23getFont_verdana_10_4bppv+0x90>)
 800f61a:	9307      	str	r3, [sp, #28]
 800f61c:	2300      	movs	r3, #0
 800f61e:	9306      	str	r3, [sp, #24]
 800f620:	2300      	movs	r3, #0
 800f622:	9305      	str	r3, [sp, #20]
 800f624:	2301      	movs	r3, #1
 800f626:	9304      	str	r3, [sp, #16]
 800f628:	2304      	movs	r3, #4
 800f62a:	9303      	str	r3, [sp, #12]
 800f62c:	2300      	movs	r3, #0
 800f62e:	9302      	str	r3, [sp, #8]
 800f630:	2300      	movs	r3, #0
 800f632:	9301      	str	r3, [sp, #4]
 800f634:	230a      	movs	r3, #10
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	230a      	movs	r3, #10
 800f63a:	2201      	movs	r2, #1
 800f63c:	4909      	ldr	r1, [pc, #36]	@ (800f664 <_Z23getFont_verdana_10_4bppv+0x94>)
 800f63e:	480a      	ldr	r0, [pc, #40]	@ (800f668 <_Z23getFont_verdana_10_4bppv+0x98>)
 800f640:	f7ff ff0c 	bl	800f45c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f644:	4809      	ldr	r0, [pc, #36]	@ (800f66c <_Z23getFont_verdana_10_4bppv+0x9c>)
 800f646:	f01d f99f 	bl	802c988 <atexit>
 800f64a:	4803      	ldr	r0, [pc, #12]	@ (800f658 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f64c:	f01c fa97 	bl	802bb7e <__cxa_guard_release>
    return verdana_10_4bpp;
 800f650:	4b05      	ldr	r3, [pc, #20]	@ (800f668 <_Z23getFont_verdana_10_4bppv+0x98>)
}
 800f652:	4618      	mov	r0, r3
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	2005a684 	.word	0x2005a684
 800f65c:	08030338 	.word	0x08030338
 800f660:	08030344 	.word	0x08030344
 800f664:	08030308 	.word	0x08030308
 800f668:	2005a658 	.word	0x2005a658
 800f66c:	0800f5c1 	.word	0x0800f5c1

0800f670 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f670:	b580      	push	{r7, lr}
 800f672:	af00      	add	r7, sp, #0
 800f674:	4801      	ldr	r0, [pc, #4]	@ (800f67c <__tcf_0+0xc>)
 800f676:	f7ff feab 	bl	800f3d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	2005a688 	.word	0x2005a688

0800f680 <_Z23getFont_verdana_20_4bppv>:
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b08e      	sub	sp, #56	@ 0x38
 800f684:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f686:	4b20      	ldr	r3, [pc, #128]	@ (800f708 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f688:	e8d3 3faf 	lda	r3, [r3]
 800f68c:	f003 0301 	and.w	r3, r3, #1
 800f690:	2b00      	cmp	r3, #0
 800f692:	bf0c      	ite	eq
 800f694:	2301      	moveq	r3, #1
 800f696:	2300      	movne	r3, #0
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d030      	beq.n	800f700 <_Z23getFont_verdana_20_4bppv+0x80>
 800f69e:	481a      	ldr	r0, [pc, #104]	@ (800f708 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f6a0:	f01c fa61 	bl	802bb66 <__cxa_guard_acquire>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	bf14      	ite	ne
 800f6aa:	2301      	movne	r3, #1
 800f6ac:	2300      	moveq	r3, #0
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d025      	beq.n	800f700 <_Z23getFont_verdana_20_4bppv+0x80>
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6bc:	2300      	movs	r3, #0
 800f6be:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6c0:	233f      	movs	r3, #63	@ 0x3f
 800f6c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6c4:	4b11      	ldr	r3, [pc, #68]	@ (800f70c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800f6c6:	9308      	str	r3, [sp, #32]
 800f6c8:	4b11      	ldr	r3, [pc, #68]	@ (800f710 <_Z23getFont_verdana_20_4bppv+0x90>)
 800f6ca:	9307      	str	r3, [sp, #28]
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	9306      	str	r3, [sp, #24]
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	9305      	str	r3, [sp, #20]
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	9304      	str	r3, [sp, #16]
 800f6d8:	2304      	movs	r3, #4
 800f6da:	9303      	str	r3, [sp, #12]
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9302      	str	r3, [sp, #8]
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	9301      	str	r3, [sp, #4]
 800f6e4:	2314      	movs	r3, #20
 800f6e6:	9300      	str	r3, [sp, #0]
 800f6e8:	2314      	movs	r3, #20
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	4909      	ldr	r1, [pc, #36]	@ (800f714 <_Z23getFont_verdana_20_4bppv+0x94>)
 800f6ee:	480a      	ldr	r0, [pc, #40]	@ (800f718 <_Z23getFont_verdana_20_4bppv+0x98>)
 800f6f0:	f7ff feb4 	bl	800f45c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f6f4:	4809      	ldr	r0, [pc, #36]	@ (800f71c <_Z23getFont_verdana_20_4bppv+0x9c>)
 800f6f6:	f01d f947 	bl	802c988 <atexit>
 800f6fa:	4803      	ldr	r0, [pc, #12]	@ (800f708 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f6fc:	f01c fa3f 	bl	802bb7e <__cxa_guard_release>
    return verdana_20_4bpp;
 800f700:	4b05      	ldr	r3, [pc, #20]	@ (800f718 <_Z23getFont_verdana_20_4bppv+0x98>)
}
 800f702:	4618      	mov	r0, r3
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	2005a6b4 	.word	0x2005a6b4
 800f70c:	0803033c 	.word	0x0803033c
 800f710:	08030348 	.word	0x08030348
 800f714:	08030318 	.word	0x08030318
 800f718:	2005a688 	.word	0x2005a688
 800f71c:	0800f671 	.word	0x0800f671

0800f720 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f720:	b580      	push	{r7, lr}
 800f722:	af00      	add	r7, sp, #0
 800f724:	4801      	ldr	r0, [pc, #4]	@ (800f72c <__tcf_0+0xc>)
 800f726:	f7ff fe53 	bl	800f3d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	2005a6b8 	.word	0x2005a6b8

0800f730 <_Z23getFont_verdana_40_4bppv>:
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b08e      	sub	sp, #56	@ 0x38
 800f734:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f736:	4b20      	ldr	r3, [pc, #128]	@ (800f7b8 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f738:	e8d3 3faf 	lda	r3, [r3]
 800f73c:	f003 0301 	and.w	r3, r3, #1
 800f740:	2b00      	cmp	r3, #0
 800f742:	bf0c      	ite	eq
 800f744:	2301      	moveq	r3, #1
 800f746:	2300      	movne	r3, #0
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d030      	beq.n	800f7b0 <_Z23getFont_verdana_40_4bppv+0x80>
 800f74e:	481a      	ldr	r0, [pc, #104]	@ (800f7b8 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f750:	f01c fa09 	bl	802bb66 <__cxa_guard_acquire>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	bf14      	ite	ne
 800f75a:	2301      	movne	r3, #1
 800f75c:	2300      	moveq	r3, #0
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b00      	cmp	r3, #0
 800f762:	d025      	beq.n	800f7b0 <_Z23getFont_verdana_40_4bppv+0x80>
 800f764:	2300      	movs	r3, #0
 800f766:	930c      	str	r3, [sp, #48]	@ 0x30
 800f768:	2300      	movs	r3, #0
 800f76a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f76c:	2300      	movs	r3, #0
 800f76e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f770:	233f      	movs	r3, #63	@ 0x3f
 800f772:	9309      	str	r3, [sp, #36]	@ 0x24
 800f774:	4b11      	ldr	r3, [pc, #68]	@ (800f7bc <_Z23getFont_verdana_40_4bppv+0x8c>)
 800f776:	9308      	str	r3, [sp, #32]
 800f778:	4b11      	ldr	r3, [pc, #68]	@ (800f7c0 <_Z23getFont_verdana_40_4bppv+0x90>)
 800f77a:	9307      	str	r3, [sp, #28]
 800f77c:	2300      	movs	r3, #0
 800f77e:	9306      	str	r3, [sp, #24]
 800f780:	2300      	movs	r3, #0
 800f782:	9305      	str	r3, [sp, #20]
 800f784:	2301      	movs	r3, #1
 800f786:	9304      	str	r3, [sp, #16]
 800f788:	2304      	movs	r3, #4
 800f78a:	9303      	str	r3, [sp, #12]
 800f78c:	2300      	movs	r3, #0
 800f78e:	9302      	str	r3, [sp, #8]
 800f790:	2300      	movs	r3, #0
 800f792:	9301      	str	r3, [sp, #4]
 800f794:	2328      	movs	r3, #40	@ 0x28
 800f796:	9300      	str	r3, [sp, #0]
 800f798:	2328      	movs	r3, #40	@ 0x28
 800f79a:	2201      	movs	r2, #1
 800f79c:	4909      	ldr	r1, [pc, #36]	@ (800f7c4 <_Z23getFont_verdana_40_4bppv+0x94>)
 800f79e:	480a      	ldr	r0, [pc, #40]	@ (800f7c8 <_Z23getFont_verdana_40_4bppv+0x98>)
 800f7a0:	f7ff fe5c 	bl	800f45c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f7a4:	4809      	ldr	r0, [pc, #36]	@ (800f7cc <_Z23getFont_verdana_40_4bppv+0x9c>)
 800f7a6:	f01d f8ef 	bl	802c988 <atexit>
 800f7aa:	4803      	ldr	r0, [pc, #12]	@ (800f7b8 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f7ac:	f01c f9e7 	bl	802bb7e <__cxa_guard_release>
    return verdana_40_4bpp;
 800f7b0:	4b05      	ldr	r3, [pc, #20]	@ (800f7c8 <_Z23getFont_verdana_40_4bppv+0x98>)
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	2005a6e4 	.word	0x2005a6e4
 800f7bc:	08030340 	.word	0x08030340
 800f7c0:	0803034c 	.word	0x0803034c
 800f7c4:	08030328 	.word	0x08030328
 800f7c8:	2005a6b8 	.word	0x2005a6b8
 800f7cc:	0800f721 	.word	0x0800f721

0800f7d0 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b085      	sub	sp, #20
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
 800f7dc:	603b      	str	r3, [r7, #0]
    pointArray = 0;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	601a      	str	r2, [r3, #0]
    pointArraySize = 0;
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	601a      	str	r2, [r3, #0]
    commandArray = 0;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	601a      	str	r2, [r3, #0]
    commandArraySize = 0;
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	601a      	str	r2, [r3, #0]
}
 800f7f6:	bf00      	nop
 800f7f8:	3714      	adds	r7, #20
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr

0800f802 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f802:	b480      	push	{r7}
 800f804:	b083      	sub	sp, #12
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
 800f80a:	6039      	str	r1, [r7, #0]
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	4618      	mov	r0, r3
 800f810:	370c      	adds	r7, #12
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr

0800f81a <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f81a:	b480      	push	{r7}
 800f81c:	b083      	sub	sp, #12
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
 800f822:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f824:	bf00      	nop
 800f826:	370c      	adds	r7, #12
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f830:	b480      	push	{r7}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f83a:	bf00      	nop
 800f83c:	370c      	adds	r7, #12
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr

0800f846 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f846:	b480      	push	{r7}
 800f848:	b083      	sub	sp, #12
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
 800f84e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f850:	bf00      	nop
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	460b      	mov	r3, r1
 800f866:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800f868:	bf00      	nop
 800f86a:	370c      	adds	r7, #12
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f874:	b480      	push	{r7}
 800f876:	b083      	sub	sp, #12
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
    {
    }
 800f87c:	bf00      	nop
 800f87e:	370c      	adds	r7, #12
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
    {
    }
 800f890:	bf00      	nop
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr

0800f89c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800f89c:	b480      	push	{r7}
 800f89e:	b083      	sub	sp, #12
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
    {
 800f8a4:	4a04      	ldr	r2, [pc, #16]	@ (800f8b8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	601a      	str	r2, [r3, #0]
    }
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	370c      	adds	r7, #12
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr
 800f8b8:	0802ea28 	.word	0x0802ea28

0800f8bc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
    }
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7ff ffe9 	bl	800f89c <_ZN8touchgfx15UIEventListenerD1Ev>
 800f8ca:	2104      	movs	r1, #4
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f01c f948 	bl	802bb62 <_ZdlPvj>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
    {
    }
 800f8e4:	bf00      	nop
 800f8e6:	370c      	adds	r7, #12
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f8f0:	b480      	push	{r7}
 800f8f2:	b083      	sub	sp, #12
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	460b      	mov	r3, r1
 800f8fa:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800f8fc:	bf00      	nop
 800f8fe:	370c      	adds	r7, #12
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	683a      	ldr	r2, [r7, #0]
 800f916:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f91a:	6810      	ldr	r0, [r2, #0]
 800f91c:	6851      	ldr	r1, [r2, #4]
 800f91e:	c303      	stmia	r3!, {r0, r1}
    }
 800f920:	bf00      	nop
 800f922:	370c      	adds	r7, #12
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	3304      	adds	r3, #4
 800f938:	4618      	mov	r0, r3
 800f93a:	f009 fec7 	bl	80196cc <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800f93e:	bf00      	nop
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
	...

0800f948 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
    {
 800f950:	4a04      	ldr	r2, [pc, #16]	@ (800f964 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	601a      	str	r2, [r3, #0]
    }
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	4618      	mov	r0, r3
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr
 800f964:	0802ea10 	.word	0x0802ea10

0800f968 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
    }
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7ff ffe9 	bl	800f948 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f976:	2104      	movs	r1, #4
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f01c f8f2 	bl	802bb62 <_ZdlPvj>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4618      	mov	r0, r3
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f988:	b480      	push	{r7}
 800f98a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f98c:	4b0b      	ldr	r3, [pc, #44]	@ (800f9bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800f994:	2b00      	cmp	r3, #0
 800f996:	d008      	beq.n	800f9aa <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f998:	4b08      	ldr	r3, [pc, #32]	@ (800f9bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d003      	beq.n	800f9aa <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f9a2:	4b06      	ldr	r3, [pc, #24]	@ (800f9bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f9a8:	e002      	b.n	800f9b0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800f9aa:	4b04      	ldr	r3, [pc, #16]	@ (800f9bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	689b      	ldr	r3, [r3, #8]
    }
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop
 800f9bc:	2005ba80 	.word	0x2005ba80

0800f9c0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800f9c8:	4a07      	ldr	r2, [pc, #28]	@ (800f9e8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	601a      	str	r2, [r3, #0]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	605a      	str	r2, [r3, #4]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	721a      	strb	r2, [r3, #8]
    {
    }
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	370c      	adds	r7, #12
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr
 800f9e8:	0802e9ec 	.word	0x0802e9ec

0800f9ec <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
    {
 800f9f4:	4a04      	ldr	r2, [pc, #16]	@ (800fa08 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	601a      	str	r2, [r3, #0]
    }
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
 800fa08:	0802e9ec 	.word	0x0802e9ec

0800fa0c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
    }
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f7ff ffe9 	bl	800f9ec <_ZN8touchgfx10TransitionD1Ev>
 800fa1a:	210c      	movs	r1, #12
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f01c f8a0 	bl	802bb62 <_ZdlPvj>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4618      	mov	r0, r3
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}

0800fa2c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
    {
    }
 800fa34:	bf00      	nop
 800fa36:	370c      	adds	r7, #12
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800fa40:	b480      	push	{r7}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
    {
    }
 800fa48:	bf00      	nop
 800fa4a:	370c      	adds	r7, #12
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800fa54:	b480      	push	{r7}
 800fa56:	b083      	sub	sp, #12
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
    {
    }
 800fa5c:	bf00      	nop
 800fa5e:	370c      	adds	r7, #12
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr

0800fa68 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800fa70:	f009 fdee 	bl	8019650 <_ZN8touchgfx11Application11getInstanceEv>
 800fa74:	4603      	mov	r3, r0
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	323c      	adds	r2, #60	@ 0x3c
 800fa7a:	6812      	ldr	r2, [r2, #0]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	4790      	blx	r2
    }
 800fa80:	bf00      	nop
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800fa88:	b480      	push	{r7}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	683a      	ldr	r2, [r7, #0]
 800fa96:	605a      	str	r2, [r3, #4]
    }
 800fa98:	bf00      	nop
 800fa9a:	370c      	adds	r7, #12
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr

0800faa4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	4a05      	ldr	r2, [pc, #20]	@ (800fac4 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	601a      	str	r2, [r3, #0]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7ff fef1 	bl	800f89c <_ZN8touchgfx15UIEventListenerD1Ev>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4618      	mov	r0, r3
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	0802f86c 	.word	0x0802f86c

0800fac8 <_ZN8touchgfx11ApplicationD0Ev>:
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7ff ffe7 	bl	800faa4 <_ZN8touchgfx11ApplicationD1Ev>
 800fad6:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f01c f841 	bl	802bb62 <_ZdlPvj>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4618      	mov	r0, r3
 800fae4:	3708      	adds	r7, #8
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
	...

0800faec <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f009 feb6 	bl	8019868 <_ZN8touchgfx11ApplicationC1Ev>
 800fafc:	4a09      	ldr	r2, [pc, #36]	@ (800fb24 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4a04      	ldr	r2, [pc, #16]	@ (800fb28 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fb16:	6013      	str	r3, [r2, #0]
    }
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3708      	adds	r7, #8
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	0802e998 	.word	0x0802e998
 800fb28:	2005bad4 	.word	0x2005bad4

0800fb2c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 f804 	bl	800fb42 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fb3a:	bf00      	nop
 800fb3c:	3708      	adds	r7, #8
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}

0800fb42 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b082      	sub	sp, #8
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00f      	beq.n	800fb74 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	330c      	adds	r3, #12
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	4610      	mov	r0, r2
 800fb68:	4798      	blx	r3
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d001      	beq.n	800fb74 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fb70:	2301      	movs	r3, #1
 800fb72:	e000      	b.n	800fb76 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fb74:	2300      	movs	r3, #0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00e      	beq.n	800fb98 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	3308      	adds	r3, #8
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4610      	mov	r0, r2
 800fb8e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2200      	movs	r2, #0
 800fb94:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800fb98:	bf00      	nop
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	683a      	ldr	r2, [r7, #0]
 800fbae:	601a      	str	r2, [r3, #0]
    }
 800fbb0:	bf00      	nop
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr

0800fbbc <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	4a05      	ldr	r2, [pc, #20]	@ (800fbdc <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	601a      	str	r2, [r3, #0]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7ff ff69 	bl	800faa4 <_ZN8touchgfx11ApplicationD1Ev>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	0802e998 	.word	0x0802e998

0800fbe0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b082      	sub	sp, #8
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7ff ffe7 	bl	800fbbc <_ZN8touchgfx14MVPApplicationD1Ev>
 800fbee:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f01b ffb5 	bl	802bb62 <_ZdlPvj>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
	...

0800fc04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	4a05      	ldr	r2, [pc, #20]	@ (800fc24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	601a      	str	r2, [r3, #0]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7ff fe97 	bl	800f948 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	0802e980 	.word	0x0802e980

0800fc28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f7ff ffe7 	bl	800fc04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fc36:	2110      	movs	r1, #16
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f01b ff92 	bl	802bb62 <_ZdlPvj>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	4618      	mov	r0, r3
 800fc42:	3708      	adds	r7, #8
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	4a08      	ldr	r2, [pc, #32]	@ (800fc74 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	601a      	str	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7ff ffd1 	bl	800fc04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7ff ffa9 	bl	800fbbc <_ZN8touchgfx14MVPApplicationD1Ev>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	0802e92c 	.word	0x0802e92c

0800fc78 <_ZN23FrontendApplicationBaseD0Ev>:
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f7ff ffe1 	bl	800fc48 <_ZN23FrontendApplicationBaseD1Ev>
 800fc86:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f01b ff69 	bl	802bb62 <_ZdlPvj>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	4618      	mov	r0, r3
 800fc94:	3708      	adds	r7, #8
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800fc9a:	b580      	push	{r7, lr}
 800fc9c:	b082      	sub	sp, #8
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 f886 	bl	800fdb4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800fca8:	bf00      	nop
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2201      	movs	r2, #1
 800fcbc:	721a      	strb	r2, [r3, #8]
    }
 800fcbe:	bf00      	nop
 800fcc0:	370c      	adds	r7, #12
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr

0800fcca <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800fcca:	b480      	push	{r7}
 800fccc:	b083      	sub	sp, #12
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
 800fcd2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	683a      	ldr	r2, [r7, #0]
 800fcd8:	605a      	str	r2, [r3, #4]
    }
 800fcda:	bf00      	nop
 800fcdc:	370c      	adds	r7, #12
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr
	...

0800fce8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7ff fef8 	bl	800faec <_ZN8touchgfx14MVPApplicationC1Ev>
 800fcfc:	4a18      	ldr	r2, [pc, #96]	@ (800fd60 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f000 f8a9 	bl	800fe60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800fd1e:	f7ff fb79 	bl	800f414 <_ZN8touchgfx3HAL11getInstanceEv>
 800fd22:	4603      	mov	r3, r0
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	3208      	adds	r2, #8
 800fd28:	6812      	ldr	r2, [r2, #0]
 800fd2a:	2101      	movs	r1, #1
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fd30:	f7ff fe2a 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 800fd34:	4603      	mov	r3, r0
 800fd36:	4618      	mov	r0, r3
 800fd38:	f013 fe39 	bl	80239ae <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800fd3c:	f7ff fe24 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 800fd40:	4603      	mov	r3, r0
 800fd42:	4618      	mov	r0, r3
 800fd44:	f013 feaa 	bl	8023a9c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800fd48:	f7ff fe1e 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f013 feb0 	bl	8023ab4 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	4618      	mov	r0, r3
 800fd58:	3710      	adds	r7, #16
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	0802e92c 	.word	0x0802e92c

0800fd64 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	6039      	str	r1, [r7, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4618      	mov	r0, r3
 800fd72:	370c      	adds	r7, #12
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	683a      	ldr	r2, [r7, #0]
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff ffe9 	bl	800fd64 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	685a      	ldr	r2, [r3, #4]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	605a      	str	r2, [r3, #4]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	683a      	ldr	r2, [r7, #0]
 800fd9e:	3308      	adds	r3, #8
 800fda0:	3208      	adds	r2, #8
 800fda2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fda6:	e883 0003 	stmia.w	r3, {r0, r1}
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	4618      	mov	r0, r3
 800fdae:	3708      	adds	r7, #8
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800fdb4:	b590      	push	{r4, r7, lr}
 800fdb6:	b089      	sub	sp, #36	@ 0x24
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800fdc2:	4b10      	ldr	r3, [pc, #64]	@ (800fe04 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800fdc4:	61bb      	str	r3, [r7, #24]
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	61fb      	str	r3, [r7, #28]
 800fdca:	f107 0008 	add.w	r0, r7, #8
 800fdce:	f107 0318 	add.w	r3, r7, #24
 800fdd2:	cb0c      	ldmia	r3, {r2, r3}
 800fdd4:	6879      	ldr	r1, [r7, #4]
 800fdd6:	f000 f85f 	bl	800fe98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fdda:	f107 0308 	add.w	r3, r7, #8
 800fdde:	4619      	mov	r1, r3
 800fde0:	4620      	mov	r0, r4
 800fde2:	f7ff ffcb 	bl	800fd7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fde6:	f107 0308 	add.w	r3, r7, #8
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7ff ff0a 	bl	800fc04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800fdfc:	bf00      	nop
 800fdfe:	3724      	adds	r7, #36	@ 0x24
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd90      	pop	{r4, r7, pc}
 800fe04:	0800fe09 	.word	0x0800fe09

0800fe08 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b084      	sub	sp, #16
 800fe0c:	af02      	add	r7, sp, #8
 800fe0e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800fe24:	9300      	str	r3, [sp, #0]
 800fe26:	4b04      	ldr	r3, [pc, #16]	@ (800fe38 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800fe28:	4804      	ldr	r0, [pc, #16]	@ (800fe3c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800fe2a:	f000 f867 	bl	800fefc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fe2e:	bf00      	nop
 800fe30:	3708      	adds	r7, #8
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	2005bac8 	.word	0x2005bac8
 800fe3c:	2005bac4 	.word	0x2005bac4

0800fe40 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	4a04      	ldr	r2, [pc, #16]	@ (800fe5c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	601a      	str	r2, [r3, #0]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4618      	mov	r0, r3
 800fe52:	370c      	adds	r7, #12
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr
 800fe5c:	0802ea10 	.word	0x0802ea10

0800fe60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7ff ffe8 	bl	800fe40 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fe70:	4a08      	ldr	r2, [pc, #32]	@ (800fe94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	601a      	str	r2, [r3, #0]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	605a      	str	r2, [r3, #4]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	609a      	str	r2, [r3, #8]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	60da      	str	r2, [r3, #12]
    {
    }
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3708      	adds	r7, #8
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
 800fe92:	bf00      	nop
 800fe94:	0802e980 	.word	0x0802e980

0800fe98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	4639      	mov	r1, r7
 800fea4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	4618      	mov	r0, r3
 800feac:	f7ff ffc8 	bl	800fe40 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800feb0:	4a08      	ldr	r2, [pc, #32]	@ (800fed4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	601a      	str	r2, [r3, #0]
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	605a      	str	r2, [r3, #4]
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	3308      	adds	r3, #8
 800fec0:	463a      	mov	r2, r7
 800fec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fec6:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	4618      	mov	r0, r3
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	0802e980 	.word	0x0802e980

0800fed8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7ff fd6c 	bl	800f9c0 <_ZN8touchgfx10TransitionC1Ev>
 800fee8:	4a03      	ldr	r2, [pc, #12]	@ (800fef8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4618      	mov	r0, r3
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	0802e908 	.word	0x0802e908

0800fefc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800fefc:	b590      	push	{r4, r7, lr}
 800fefe:	b08f      	sub	sp, #60	@ 0x3c
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
 800ff08:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	689a      	ldr	r2, [r3, #8]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	3320      	adds	r3, #32
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	4610      	mov	r0, r2
 800ff1a:	4798      	blx	r3
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 800ff22:	d205      	bcs.n	800ff30 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800ff24:	4b7d      	ldr	r3, [pc, #500]	@ (801011c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800ff26:	4a7e      	ldr	r2, [pc, #504]	@ (8010120 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ff28:	21a3      	movs	r1, #163	@ 0xa3
 800ff2a:	487e      	ldr	r0, [pc, #504]	@ (8010124 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ff2c:	f01c fd0e 	bl	802c94c <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	685a      	ldr	r2, [r3, #4]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	3320      	adds	r3, #32
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4610      	mov	r0, r2
 800ff40:	4798      	blx	r3
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b0f      	cmp	r3, #15
 800ff46:	d805      	bhi.n	800ff54 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800ff48:	4b77      	ldr	r3, [pc, #476]	@ (8010128 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ff4a:	4a75      	ldr	r2, [pc, #468]	@ (8010120 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ff4c:	21a4      	movs	r1, #164	@ 0xa4
 800ff4e:	4875      	ldr	r0, [pc, #468]	@ (8010124 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ff50:	f01c fcfc 	bl	802c94c <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	68da      	ldr	r2, [r3, #12]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	3320      	adds	r3, #32
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4610      	mov	r0, r2
 800ff64:	4798      	blx	r3
 800ff66:	4603      	mov	r3, r0
 800ff68:	2b0b      	cmp	r3, #11
 800ff6a:	d805      	bhi.n	800ff78 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800ff6c:	4b6f      	ldr	r3, [pc, #444]	@ (801012c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ff6e:	4a6c      	ldr	r2, [pc, #432]	@ (8010120 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ff70:	21a5      	movs	r1, #165	@ 0xa5
 800ff72:	486c      	ldr	r0, [pc, #432]	@ (8010124 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ff74:	f01c fcea 	bl	802c94c <__assert_func>
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800ff84:	f009 fb64 	bl	8019650 <_ZN8touchgfx11Application11getInstanceEv>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7ff fcce 	bl	800f92c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800ff90:	6a3b      	ldr	r3, [r7, #32]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d008      	beq.n	800ffaa <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	6a3b      	ldr	r3, [r7, #32]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	330c      	adds	r3, #12
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4610      	mov	r0, r2
 800ffa8:	4798      	blx	r3
    if (*currentTrans)
 800ffaa:	6a3b      	ldr	r3, [r7, #32]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d007      	beq.n	800ffc2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800ffb2:	6a3b      	ldr	r3, [r7, #32]
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	6a3b      	ldr	r3, [r7, #32]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4610      	mov	r0, r2
 800ffc0:	4798      	blx	r3
    if (*currentScreen)
 800ffc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d008      	beq.n	800ffdc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800ffca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffcc:	681a      	ldr	r2, [r3, #0]
 800ffce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3314      	adds	r3, #20
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4610      	mov	r0, r2
 800ffda:	4798      	blx	r3
    if (*currentPresenter)
 800ffdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d008      	beq.n	800fff6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800ffe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	3304      	adds	r3, #4
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4610      	mov	r0, r2
 800fff4:	4798      	blx	r3
    if (*currentScreen)
 800fff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d007      	beq.n	801000e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800fffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4610      	mov	r0, r2
 801000c:	4798      	blx	r3
    if (*currentPresenter)
 801000e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d008      	beq.n	8010028 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8010016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	3308      	adds	r3, #8
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4610      	mov	r0, r2
 8010026:	4798      	blx	r3
}
 8010028:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	2100      	movs	r1, #0
 8010030:	4618      	mov	r0, r3
 8010032:	f000 f87d 	bl	8010130 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010036:	4603      	mov	r3, r0
 8010038:	4619      	mov	r1, r3
 801003a:	200c      	movs	r0, #12
 801003c:	f7ff fbe1 	bl	800f802 <_ZnwjPv>
 8010040:	4604      	mov	r4, r0
 8010042:	4620      	mov	r0, r4
 8010044:	f7ff ff48 	bl	800fed8 <_ZN8touchgfx12NoTransitionC1Ev>
 8010048:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	2100      	movs	r1, #0
 8010050:	4618      	mov	r0, r3
 8010052:	f000 f880 	bl	8010156 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8010056:	4603      	mov	r3, r0
 8010058:	4619      	mov	r1, r3
 801005a:	f44f 7005 	mov.w	r0, #532	@ 0x214
 801005e:	f7ff fbd0 	bl	800f802 <_ZnwjPv>
 8010062:	4604      	mov	r4, r0
 8010064:	4620      	mov	r0, r4
 8010066:	f001 f8e9 	bl	801123c <_ZN10screenViewC1Ev>
 801006a:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	2100      	movs	r1, #0
 8010072:	4618      	mov	r0, r3
 8010074:	f000 f882 	bl	801017c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8010078:	4603      	mov	r3, r0
 801007a:	4619      	mov	r1, r3
 801007c:	2010      	movs	r0, #16
 801007e:	f7ff fbc0 	bl	800f802 <_ZnwjPv>
 8010082:	4604      	mov	r4, r0
 8010084:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010086:	4620      	mov	r0, r4
 8010088:	f001 f880 	bl	801118c <_ZN15screenPresenterC1ER10screenView>
 801008c:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010092:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010098:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801009e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80100a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d002      	beq.n	80100ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 80100a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100a8:	3304      	adds	r3, #4
 80100aa:	e000      	b.n	80100ae <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80100ac:	2300      	movs	r3, #0
 80100ae:	4619      	mov	r1, r3
 80100b0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80100b2:	f7ff fd75 	bl	800fba0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80100b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b8:	3304      	adds	r3, #4
 80100ba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80100bc:	4618      	mov	r0, r3
 80100be:	f7ff fe04 	bl	800fcca <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80100c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100c6:	4618      	mov	r0, r3
 80100c8:	f000 f86b 	bl	80101a2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 80100cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ce:	61fb      	str	r3, [r7, #28]
 80100d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100d2:	61bb      	str	r3, [r7, #24]
 80100d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100d6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	330c      	adds	r3, #12
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	69f8      	ldr	r0, [r7, #28]
 80100e2:	4798      	blx	r3
    newPresenter->activate();
 80100e4:	69bb      	ldr	r3, [r7, #24]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	69b8      	ldr	r0, [r7, #24]
 80100ec:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80100ee:	6979      	ldr	r1, [r7, #20]
 80100f0:	69f8      	ldr	r0, [r7, #28]
 80100f2:	f00b fc97 	bl	801ba24 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	3310      	adds	r3, #16
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	6978      	ldr	r0, [r7, #20]
 8010100:	4798      	blx	r3
    newTransition->invalidate();
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	3314      	adds	r3, #20
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	6978      	ldr	r0, [r7, #20]
 801010c:	4798      	blx	r3
}
 801010e:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8010110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010112:	4618      	mov	r0, r3
 8010114:	373c      	adds	r7, #60	@ 0x3c
 8010116:	46bd      	mov	sp, r7
 8010118:	bd90      	pop	{r4, r7, pc}
 801011a:	bf00      	nop
 801011c:	0802db28 	.word	0x0802db28
 8010120:	0802dbb8 	.word	0x0802dbb8
 8010124:	0802dc88 	.word	0x0802dc88
 8010128:	0802dccc 	.word	0x0802dccc
 801012c:	0802dd70 	.word	0x0802dd70

08010130 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	460b      	mov	r3, r1
 801013a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	3324      	adds	r3, #36	@ 0x24
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	887a      	ldrh	r2, [r7, #2]
 8010146:	4611      	mov	r1, r2
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	4798      	blx	r3
 801014c:	4603      	mov	r3, r0
    }
 801014e:	4618      	mov	r0, r3
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8010156:	b580      	push	{r7, lr}
 8010158:	b082      	sub	sp, #8
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
 801015e:	460b      	mov	r3, r1
 8010160:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	3324      	adds	r3, #36	@ 0x24
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	887a      	ldrh	r2, [r7, #2]
 801016c:	4611      	mov	r1, r2
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	4798      	blx	r3
 8010172:	4603      	mov	r3, r0
    }
 8010174:	4618      	mov	r0, r3
 8010176:	3708      	adds	r7, #8
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	460b      	mov	r3, r1
 8010186:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	3324      	adds	r3, #36	@ 0x24
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	887a      	ldrh	r2, [r7, #2]
 8010192:	4611      	mov	r1, r2
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	4798      	blx	r3
 8010198:	4603      	mov	r3, r0
    }
 801019a:	4618      	mov	r0, r3
 801019c:	3708      	adds	r7, #8
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}

080101a2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 80101a2:	b480      	push	{r7}
 80101a4:	b083      	sub	sp, #12
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
 80101aa:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	683a      	ldr	r2, [r7, #0]
 80101b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 80101b2:	bf00      	nop
 80101b4:	370c      	adds	r7, #12
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
	...

080101c0 <_ZN8touchgfx12NoTransitionD1Ev>:
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	4a05      	ldr	r2, [pc, #20]	@ (80101e0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	601a      	str	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7ff fc0b 	bl	800f9ec <_ZN8touchgfx10TransitionD1Ev>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4618      	mov	r0, r3
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	0802e908 	.word	0x0802e908

080101e4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f7ff ffe7 	bl	80101c0 <_ZN8touchgfx12NoTransitionD1Ev>
 80101f2:	210c      	movs	r1, #12
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f01b fcb4 	bl	802bb62 <_ZdlPvj>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4618      	mov	r0, r3
 80101fe:	3708      	adds	r7, #8
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	68d2      	ldr	r2, [r2, #12]
 8010214:	1052      	asrs	r2, r2, #1
 8010216:	1899      	adds	r1, r3, r2
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	f003 0301 	and.w	r3, r3, #1
 8010220:	2b00      	cmp	r3, #0
 8010222:	d102      	bne.n	801022a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	689b      	ldr	r3, [r3, #8]
 8010228:	e00a      	b.n	8010240 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	68d2      	ldr	r2, [r2, #12]
 8010232:	1052      	asrs	r2, r2, #1
 8010234:	4413      	add	r3, r2
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	6892      	ldr	r2, [r2, #8]
 801023c:	4413      	add	r3, r2
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4608      	mov	r0, r1
 8010242:	4798      	blx	r3
    }
 8010244:	bf00      	nop
 8010246:	3708      	adds	r7, #8
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d010      	beq.n	801027e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	689b      	ldr	r3, [r3, #8]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d107      	bne.n	8010274 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	f003 0301 	and.w	r3, r3, #1
 801026c:	2b00      	cmp	r3, #0
 801026e:	d101      	bne.n	8010274 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010270:	2301      	movs	r3, #1
 8010272:	e000      	b.n	8010276 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010274:	2300      	movs	r3, #0
 8010276:	2b01      	cmp	r3, #1
 8010278:	d001      	beq.n	801027e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801027a:	2301      	movs	r3, #1
 801027c:	e000      	b.n	8010280 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801027e:	2300      	movs	r3, #0
    }
 8010280:	4618      	mov	r0, r3
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr

0801028c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
        : color(col)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	683a      	ldr	r2, [r7, #0]
 801029a:	601a      	str	r2, [r3, #0]
    {
    }
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	4618      	mov	r0, r3
 80102a0:	370c      	adds	r7, #12
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr

080102aa <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80102aa:	b480      	push	{r7}
 80102ac:	b083      	sub	sp, #12
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	801a      	strh	r2, [r3, #0]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2200      	movs	r2, #0
 80102bc:	805a      	strh	r2, [r3, #2]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	809a      	strh	r2, [r3, #4]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2200      	movs	r2, #0
 80102c8:	80da      	strh	r2, [r3, #6]
    {
    }
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4618      	mov	r0, r3
 80102ce:	370c      	adds	r7, #12
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80102e0:	4a14      	ldr	r2, [pc, #80]	@ (8010334 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	601a      	str	r2, [r3, #0]
        : rect(),
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	3304      	adds	r3, #4
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7ff ffdd 	bl	80102aa <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	330c      	adds	r3, #12
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7ff ffd8 	bl	80102aa <_ZN8touchgfx4RectC1Ev>
          parent(0),
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2200      	movs	r2, #0
 80102fe:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2200      	movs	r2, #0
 8010304:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2200      	movs	r2, #0
 801030a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2200      	movs	r2, #0
 801031c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2201      	movs	r2, #1
 8010324:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	4618      	mov	r0, r3
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	0802f8c0 	.word	0x0802f8c0

08010338 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
    {
 8010340:	4a04      	ldr	r2, [pc, #16]	@ (8010354 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	601a      	str	r2, [r3, #0]
    }
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4618      	mov	r0, r3
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr
 8010354:	0802f8c0 	.word	0x0802f8c0

08010358 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
    }
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f7ff ffe9 	bl	8010338 <_ZN8touchgfx8DrawableD1Ev>
 8010366:	2128      	movs	r1, #40	@ 0x28
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f01b fbfa 	bl	802bb62 <_ZdlPvj>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8010386:	2b00      	cmp	r3, #0
 8010388:	d005      	beq.n	8010396 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	3314      	adds	r3, #20
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	4798      	blx	r3
        }
    }
 8010396:	bf00      	nop
 8010398:	3708      	adds	r7, #8
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 801039e:	b480      	push	{r7}
 80103a0:	b083      	sub	sp, #12
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80103a6:	2300      	movs	r3, #0
    }
 80103a8:	4618      	mov	r0, r3
 80103aa:	370c      	adds	r7, #12
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr

080103b4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	4608      	mov	r0, r1
 80103be:	4611      	mov	r1, r2
 80103c0:	461a      	mov	r2, r3
 80103c2:	4603      	mov	r3, r0
 80103c4:	817b      	strh	r3, [r7, #10]
 80103c6:	460b      	mov	r3, r1
 80103c8:	813b      	strh	r3, [r7, #8]
 80103ca:	4613      	mov	r3, r2
 80103cc:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80103ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80103d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80103d6:	4619      	mov	r1, r3
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	f000 f82a 	bl	8010432 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80103de:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80103e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80103e6:	4619      	mov	r1, r3
 80103e8:	68f8      	ldr	r0, [r7, #12]
 80103ea:	f000 f87e 	bl	80104ea <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80103ee:	bf00      	nop
 80103f0:	3710      	adds	r7, #16
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80103f6:	b480      	push	{r7}
 80103f8:	b083      	sub	sp, #12
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
 80103fe:	460b      	mov	r3, r1
 8010400:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	887a      	ldrh	r2, [r7, #2]
 8010406:	809a      	strh	r2, [r3, #4]
    }
 8010408:	bf00      	nop
 801040a:	370c      	adds	r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr

08010414 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	460b      	mov	r3, r1
 801041e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	887a      	ldrh	r2, [r7, #2]
 8010424:	80da      	strh	r2, [r3, #6]
    }
 8010426:	bf00      	nop
 8010428:	370c      	adds	r7, #12
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr

08010432 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8010432:	b580      	push	{r7, lr}
 8010434:	b082      	sub	sp, #8
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
 801043a:	460b      	mov	r3, r1
 801043c:	807b      	strh	r3, [r7, #2]
 801043e:	4613      	mov	r3, r2
 8010440:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	3330      	adds	r3, #48	@ 0x30
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801044e:	4611      	mov	r1, r2
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	4798      	blx	r3
        setY(y);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	3334      	adds	r3, #52	@ 0x34
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010460:	4611      	mov	r1, r2
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	4798      	blx	r3
    }
 8010466:	bf00      	nop
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}

0801046e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 801046e:	b480      	push	{r7}
 8010470:	b083      	sub	sp, #12
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
 8010476:	460b      	mov	r3, r1
 8010478:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	887a      	ldrh	r2, [r7, #2]
 801047e:	811a      	strh	r2, [r3, #8]
    }
 8010480:	bf00      	nop
 8010482:	370c      	adds	r7, #12
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr

0801048c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	887a      	ldrh	r2, [r7, #2]
 801049c:	815a      	strh	r2, [r3, #10]
    }
 801049e:	bf00      	nop
 80104a0:	370c      	adds	r7, #12
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr

080104aa <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80104aa:	b480      	push	{r7}
 80104ac:	b083      	sub	sp, #12
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
    {
    }
 80104b2:	bf00      	nop
 80104b4:	370c      	adds	r7, #12
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr

080104be <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80104be:	b480      	push	{r7}
 80104c0:	b083      	sub	sp, #12
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
 80104c6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80104c8:	bf00      	nop
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80104de:	bf00      	nop
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr

080104ea <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80104ea:	b580      	push	{r7, lr}
 80104ec:	b082      	sub	sp, #8
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
 80104f2:	460b      	mov	r3, r1
 80104f4:	807b      	strh	r3, [r7, #2]
 80104f6:	4613      	mov	r3, r2
 80104f8:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	3338      	adds	r3, #56	@ 0x38
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010506:	4611      	mov	r1, r2
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	4798      	blx	r3
        setHeight(height);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	333c      	adds	r3, #60	@ 0x3c
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010518:	4611      	mov	r1, r2
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	4798      	blx	r3
    }
 801051e:	bf00      	nop
 8010520:	3708      	adds	r7, #8
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010526:	b480      	push	{r7}
 8010528:	b083      	sub	sp, #12
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
 801052e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010530:	bf00      	nop
 8010532:	370c      	adds	r7, #12
 8010534:	46bd      	mov	sp, r7
 8010536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053a:	4770      	bx	lr

0801053c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 801053c:	b480      	push	{r7}
 801053e:	b083      	sub	sp, #12
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
    {
    }
 8010544:	bf00      	nop
 8010546:	370c      	adds	r7, #12
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr

08010550 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010550:	b480      	push	{r7}
 8010552:	b083      	sub	sp, #12
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 801055e:	4618      	mov	r0, r3
 8010560:	370c      	adds	r7, #12
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr

0801056a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 801056a:	b480      	push	{r7}
 801056c:	b083      	sub	sp, #12
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 8010578:	4618      	mov	r0, r3
 801057a:	370c      	adds	r7, #12
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr

08010584 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010584:	b580      	push	{r7, lr}
 8010586:	b082      	sub	sp, #8
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	460b      	mov	r3, r1
 801058e:	807b      	strh	r3, [r7, #2]
 8010590:	4613      	mov	r3, r2
 8010592:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	3354      	adds	r3, #84	@ 0x54
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	8879      	ldrh	r1, [r7, #2]
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80105a4:	b292      	uxth	r2, r2
 80105a6:	1a8a      	subs	r2, r1, r2
 80105a8:	b292      	uxth	r2, r2
 80105aa:	b210      	sxth	r0, r2
 80105ac:	8839      	ldrh	r1, [r7, #0]
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80105b4:	b292      	uxth	r2, r2
 80105b6:	1a8a      	subs	r2, r1, r2
 80105b8:	b292      	uxth	r2, r2
 80105ba:	b212      	sxth	r2, r2
 80105bc:	4601      	mov	r1, r0
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	4798      	blx	r3
    }
 80105c2:	bf00      	nop
 80105c4:	3708      	adds	r7, #8
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}

080105ca <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80105ca:	b480      	push	{r7}
 80105cc:	b083      	sub	sp, #12
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80105d8:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80105e0:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80105e8:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 80105ea:	bf00      	nop
 80105ec:	370c      	adds	r7, #12
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr

080105f6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80105f6:	b580      	push	{r7, lr}
 80105f8:	b084      	sub	sp, #16
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	60f8      	str	r0, [r7, #12]
 80105fe:	60b9      	str	r1, [r7, #8]
 8010600:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8010602:	68f8      	ldr	r0, [r7, #12]
 8010604:	f7ff ffe1 	bl	80105ca <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	68fa      	ldr	r2, [r7, #12]
 8010614:	601a      	str	r2, [r3, #0]
    }
 8010616:	bf00      	nop
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}

0801061e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 801061e:	b580      	push	{r7, lr}
 8010620:	b084      	sub	sp, #16
 8010622:	af00      	add	r7, sp, #0
 8010624:	60f8      	str	r0, [r7, #12]
 8010626:	607b      	str	r3, [r7, #4]
 8010628:	460b      	mov	r3, r1
 801062a:	817b      	strh	r3, [r7, #10]
 801062c:	4613      	mov	r3, r2
 801062e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	4618      	mov	r0, r3
 8010634:	f7ff ff8c 	bl	8010550 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d008      	beq.n	8010650 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	4618      	mov	r0, r3
 8010642:	f7ff ff92 	bl	801056a <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010646:	4603      	mov	r3, r0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d001      	beq.n	8010650 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801064c:	2301      	movs	r3, #1
 801064e:	e000      	b.n	8010652 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010650:	2300      	movs	r3, #0
 8010652:	2b00      	cmp	r3, #0
 8010654:	d002      	beq.n	801065c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010656:	68fa      	ldr	r2, [r7, #12]
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	601a      	str	r2, [r3, #0]
        }
    }
 801065c:	bf00      	nop
 801065e:	3710      	adds	r7, #16
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	4618      	mov	r0, r3
 8010670:	f7ff fe32 	bl	80102d8 <_ZN8touchgfx8DrawableC1Ev>
 8010674:	4a05      	ldr	r2, [pc, #20]	@ (801068c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	601a      	str	r2, [r3, #0]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2200      	movs	r2, #0
 801067e:	629a      	str	r2, [r3, #40]	@ 0x28
    {
    }
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	4618      	mov	r0, r3
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	0802f194 	.word	0x0802f194

08010690 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8010690:	b580      	push	{r7, lr}
 8010692:	b082      	sub	sp, #8
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	4a05      	ldr	r2, [pc, #20]	@ (80106b0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	601a      	str	r2, [r3, #0]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7ff fe49 	bl	8010338 <_ZN8touchgfx8DrawableD1Ev>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4618      	mov	r0, r3
 80106aa:	3708      	adds	r7, #8
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	0802f194 	.word	0x0802f194

080106b4 <_ZN8touchgfx9ContainerD0Ev>:
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f7ff ffe7 	bl	8010690 <_ZN8touchgfx9ContainerD1Ev>
 80106c2:	212c      	movs	r1, #44	@ 0x2c
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f01b fa4c 	bl	802bb62 <_ZdlPvj>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4618      	mov	r0, r3
 80106ce:	3708      	adds	r7, #8
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
    {
 80106dc:	4a06      	ldr	r2, [pc, #24]	@ (80106f8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	601a      	str	r2, [r3, #0]
    }
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	3304      	adds	r3, #4
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7ff ffd2 	bl	8010690 <_ZN8touchgfx9ContainerD1Ev>
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	4618      	mov	r0, r3
 80106f0:	3708      	adds	r7, #8
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	0802f9e0 	.word	0x0802f9e0

080106fc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
    }
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7ff ffe5 	bl	80106d4 <_ZN8touchgfx6ScreenD1Ev>
 801070a:	213c      	movs	r1, #60	@ 0x3c
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f01b fa28 	bl	802bb62 <_ZdlPvj>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	4618      	mov	r0, r3
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 801071c:	b480      	push	{r7}
 801071e:	b083      	sub	sp, #12
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
    {
    }
 8010724:	bf00      	nop
 8010726:	370c      	adds	r7, #12
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
    {
    }
 8010738:	bf00      	nop
 801073a:	370c      	adds	r7, #12
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr

08010744 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8010744:	b480      	push	{r7}
 8010746:	b083      	sub	sp, #12
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
    {
    }
 801074c:	bf00      	nop
 801074e:	370c      	adds	r7, #12
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr

08010758 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010758:	b480      	push	{r7}
 801075a:	b083      	sub	sp, #12
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
    {
    }
 8010760:	bf00      	nop
 8010762:	370c      	adds	r7, #12
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr

0801076c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801076c:	b480      	push	{r7}
 801076e:	b083      	sub	sp, #12
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	460b      	mov	r3, r1
 8010776:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8010778:	bf00      	nop
 801077a:	370c      	adds	r7, #12
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	3304      	adds	r3, #4
 8010792:	6839      	ldr	r1, [r7, #0]
 8010794:	4618      	mov	r0, r3
 8010796:	f003 fabb 	bl	8013d10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801079a:	bf00      	nop
 801079c:	3708      	adds	r7, #8
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
	...

080107a4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7ff fd92 	bl	80102d8 <_ZN8touchgfx8DrawableC1Ev>
 80107b4:	4a03      	ldr	r2, [pc, #12]	@ (80107c4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	4618      	mov	r0, r3
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	0802eab8 	.word	0x0802eab8

080107c8 <_ZN8touchgfx6WidgetD1Ev>:
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	4a05      	ldr	r2, [pc, #20]	@ (80107e8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	601a      	str	r2, [r3, #0]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	4618      	mov	r0, r3
 80107da:	f7ff fdad 	bl	8010338 <_ZN8touchgfx8DrawableD1Ev>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4618      	mov	r0, r3
 80107e2:	3708      	adds	r7, #8
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}
 80107e8:	0802eab8 	.word	0x0802eab8

080107ec <_ZN8touchgfx6WidgetD0Ev>:
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f7ff ffe7 	bl	80107c8 <_ZN8touchgfx6WidgetD1Ev>
 80107fa:	2128      	movs	r1, #40	@ 0x28
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f01b f9b0 	bl	802bb62 <_ZdlPvj>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	4618      	mov	r0, r3
 8010806:	3708      	adds	r7, #8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	4618      	mov	r0, r3
 8010818:	2326      	movs	r3, #38	@ 0x26
 801081a:	461a      	mov	r2, r3
 801081c:	2100      	movs	r1, #0
 801081e:	f01c fba1 	bl	802cf64 <memset>
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	4618      	mov	r0, r3
 8010826:	f7ff ffbd 	bl	80107a4 <_ZN8touchgfx6WidgetC1Ev>
 801082a:	4a09      	ldr	r2, [pc, #36]	@ (8010850 <_ZN8touchgfx3BoxC1Ev+0x44>)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	601a      	str	r2, [r3, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	22ff      	movs	r2, #255	@ 0xff
 8010834:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	3328      	adds	r3, #40	@ 0x28
 801083c:	2100      	movs	r1, #0
 801083e:	4618      	mov	r0, r3
 8010840:	f7ff fd24 	bl	801028c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	4618      	mov	r0, r3
 8010848:	3708      	adds	r7, #8
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}
 801084e:	bf00      	nop
 8010850:	0802f6ac 	.word	0x0802f6ac

08010854 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8010854:	b480      	push	{r7}
 8010856:	b083      	sub	sp, #12
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	683a      	ldr	r2, [r7, #0]
 8010862:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8010864:	bf00      	nop
 8010866:	370c      	adds	r7, #12
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	4a05      	ldr	r2, [pc, #20]	@ (8010890 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	601a      	str	r2, [r3, #0]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	4618      	mov	r0, r3
 8010882:	f7ff ff27 	bl	80106d4 <_ZN8touchgfx6ScreenD1Ev>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4618      	mov	r0, r3
 801088a:	3708      	adds	r7, #8
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}
 8010890:	0802ea84 	.word	0x0802ea84

08010894 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f7ff ffe7 	bl	8010870 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80108a2:	2140      	movs	r1, #64	@ 0x40
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f01b f95c 	bl	802bb62 <_ZdlPvj>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4618      	mov	r0, r3
 80108ae:	3708      	adds	r7, #8
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	4a05      	ldr	r2, [pc, #20]	@ (80108d4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	601a      	str	r2, [r3, #0]
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7ff ff7f 	bl	80107c8 <_ZN8touchgfx6WidgetD1Ev>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4618      	mov	r0, r3
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	0802f6ac 	.word	0x0802f6ac

080108d8 <_ZN8touchgfx3BoxD0Ev>:
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f7ff ffe7 	bl	80108b4 <_ZN8touchgfx3BoxD1Ev>
 80108e6:	212c      	movs	r1, #44	@ 0x2c
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f01b f93a 	bl	802bb62 <_ZdlPvj>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	4618      	mov	r0, r3
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

screenViewBase::screenViewBase()
 80108f8:	b590      	push	{r4, r7, lr}
 80108fa:	b08b      	sub	sp, #44	@ 0x2c
 80108fc:	af02      	add	r7, sp, #8
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4618      	mov	r0, r3
 8010904:	f000 f962 	bl	8010bcc <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8010908:	4a87      	ldr	r2, [pc, #540]	@ (8010b28 <_ZN14screenViewBaseC1Ev+0x230>)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	601a      	str	r2, [r3, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	3340      	adds	r3, #64	@ 0x40
 8010912:	4618      	mov	r0, r3
 8010914:	f7ff ff7a 	bl	801080c <_ZN8touchgfx3BoxC1Ev>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	336c      	adds	r3, #108	@ 0x6c
 801091c:	4618      	mov	r0, r3
 801091e:	f003 fdab 	bl	8014478 <_ZN8touchgfx14SwipeContainerC1Ev>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010928:	4618      	mov	r0, r3
 801092a:	f7ff fe9b 	bl	8010664 <_ZN8touchgfx9ContainerC1Ev>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8010934:	4618      	mov	r0, r3
 8010936:	f7ff ff69 	bl	801080c <_ZN8touchgfx3BoxC1Ev>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010940:	4618      	mov	r0, r3
 8010942:	f7ff fe8f 	bl	8010664 <_ZN8touchgfx9ContainerC1Ev>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801094c:	4618      	mov	r0, r3
 801094e:	f7ff ff5d 	bl	801080c <_ZN8touchgfx3BoxC1Ev>
{
    __background.setPosition(0, 0, 240, 296);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8010958:	f44f 7394 	mov.w	r3, #296	@ 0x128
 801095c:	9300      	str	r3, [sp, #0]
 801095e:	23f0      	movs	r3, #240	@ 0xf0
 8010960:	2200      	movs	r2, #0
 8010962:	2100      	movs	r1, #0
 8010964:	f7ff fd26 	bl	80103b4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 801096e:	2300      	movs	r3, #0
 8010970:	767b      	strb	r3, [r7, #25]
 8010972:	2300      	movs	r3, #0
 8010974:	763b      	strb	r3, [r7, #24]
 8010976:	2300      	movs	r3, #0
 8010978:	75fb      	strb	r3, [r7, #23]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 801097a:	7e7b      	ldrb	r3, [r7, #25]
 801097c:	041a      	lsls	r2, r3, #16
 801097e:	7e3b      	ldrb	r3, [r7, #24]
 8010980:	021b      	lsls	r3, r3, #8
 8010982:	431a      	orrs	r2, r3
 8010984:	7dfb      	ldrb	r3, [r7, #23]
 8010986:	4313      	orrs	r3, r2
 8010988:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 801098c:	f107 0310 	add.w	r3, r7, #16
 8010990:	4611      	mov	r1, r2
 8010992:	4618      	mov	r0, r3
 8010994:	f7ff fc7a 	bl	801028c <_ZN8touchgfx9colortypeC1Em>
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	4619      	mov	r1, r3
 801099c:	4620      	mov	r0, r4
 801099e:	f7ff ff59 	bl	8010854 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	3340      	adds	r3, #64	@ 0x40
 80109a8:	4619      	mov	r1, r3
 80109aa:	4610      	mov	r0, r2
 80109ac:	f7ff feea 	bl	8010784 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    swipeContainer1.setXY(0, 0);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	336c      	adds	r3, #108	@ 0x6c
 80109b4:	2200      	movs	r2, #0
 80109b6:	2100      	movs	r1, #0
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7ff fd3a 	bl	8010432 <_ZN8touchgfx8Drawable5setXYEss>
    swipeContainer1.setSwipeCutoff(50);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	336c      	adds	r3, #108	@ 0x6c
 80109c2:	2132      	movs	r1, #50	@ 0x32
 80109c4:	4618      	mov	r0, r3
 80109c6:	f003 fc22 	bl	801420e <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    swipeContainer1.setEndSwipeElasticWidth(50);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	336c      	adds	r3, #108	@ 0x6c
 80109ce:	2132      	movs	r1, #50	@ 0x32
 80109d0:	4618      	mov	r0, r3
 80109d2:	f003 fca1 	bl	8014318 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>

    swipeContainer1Page2.setWidth(240);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80109dc:	21f0      	movs	r1, #240	@ 0xf0
 80109de:	4618      	mov	r0, r3
 80109e0:	f7ff fd45 	bl	801046e <_ZN8touchgfx8Drawable8setWidthEs>
    swipeContainer1Page2.setHeight(296);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80109ea:	f44f 7194 	mov.w	r1, #296	@ 0x128
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7ff fd4c 	bl	801048c <_ZN8touchgfx8Drawable9setHeightEs>
    box1.setPosition(0, 0, 240, 296);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f503 70c8 	add.w	r0, r3, #400	@ 0x190
 80109fa:	f44f 7394 	mov.w	r3, #296	@ 0x128
 80109fe:	9300      	str	r3, [sp, #0]
 8010a00:	23f0      	movs	r3, #240	@ 0xf0
 8010a02:	2200      	movs	r2, #0
 8010a04:	2100      	movs	r1, #0
 8010a06:	f7ff fcd5 	bl	80103b4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f503 74c8 	add.w	r4, r3, #400	@ 0x190
 8010a10:	23ff      	movs	r3, #255	@ 0xff
 8010a12:	773b      	strb	r3, [r7, #28]
 8010a14:	23ff      	movs	r3, #255	@ 0xff
 8010a16:	76fb      	strb	r3, [r7, #27]
 8010a18:	23ff      	movs	r3, #255	@ 0xff
 8010a1a:	76bb      	strb	r3, [r7, #26]
 8010a1c:	7f3b      	ldrb	r3, [r7, #28]
 8010a1e:	041a      	lsls	r2, r3, #16
 8010a20:	7efb      	ldrb	r3, [r7, #27]
 8010a22:	021b      	lsls	r3, r3, #8
 8010a24:	431a      	orrs	r2, r3
 8010a26:	7ebb      	ldrb	r3, [r7, #26]
 8010a28:	4313      	orrs	r3, r2
 8010a2a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010a2e:	f107 030c 	add.w	r3, r7, #12
 8010a32:	4611      	mov	r1, r2
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7ff fc29 	bl	801028c <_ZN8touchgfx9colortypeC1Em>
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f7ff ff08 	bl	8010854 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    swipeContainer1Page2.add(box1);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8010a50:	4619      	mov	r1, r3
 8010a52:	4610      	mov	r0, r2
 8010a54:	f003 f95c 	bl	8013d10 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    swipeContainer1.add(swipeContainer1Page2);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010a64:	4619      	mov	r1, r3
 8010a66:	4610      	mov	r0, r2
 8010a68:	f003 fe07 	bl	801467a <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    swipeContainer1Page3.setWidth(240);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010a72:	21f0      	movs	r1, #240	@ 0xf0
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7ff fcfa 	bl	801046e <_ZN8touchgfx8Drawable8setWidthEs>
    swipeContainer1Page3.setHeight(296);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010a80:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7ff fd01 	bl	801048c <_ZN8touchgfx8Drawable9setHeightEs>
    box2.setPosition(0, 0, 240, 296);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f503 70f4 	add.w	r0, r3, #488	@ 0x1e8
 8010a90:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8010a94:	9300      	str	r3, [sp, #0]
 8010a96:	23f0      	movs	r3, #240	@ 0xf0
 8010a98:	2200      	movs	r2, #0
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	f7ff fc8a 	bl	80103b4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFromRGB(250, 25, 25));
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f503 74f4 	add.w	r4, r3, #488	@ 0x1e8
 8010aa6:	23fa      	movs	r3, #250	@ 0xfa
 8010aa8:	77fb      	strb	r3, [r7, #31]
 8010aaa:	2319      	movs	r3, #25
 8010aac:	77bb      	strb	r3, [r7, #30]
 8010aae:	2319      	movs	r3, #25
 8010ab0:	777b      	strb	r3, [r7, #29]
 8010ab2:	7ffb      	ldrb	r3, [r7, #31]
 8010ab4:	041a      	lsls	r2, r3, #16
 8010ab6:	7fbb      	ldrb	r3, [r7, #30]
 8010ab8:	021b      	lsls	r3, r3, #8
 8010aba:	431a      	orrs	r2, r3
 8010abc:	7f7b      	ldrb	r3, [r7, #29]
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010ac4:	f107 0308 	add.w	r3, r7, #8
 8010ac8:	4611      	mov	r1, r2
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7ff fbde 	bl	801028c <_ZN8touchgfx9colortypeC1Em>
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f7ff febd 	bl	8010854 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    swipeContainer1Page3.add(box2);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f503 72de 	add.w	r2, r3, #444	@ 0x1bc
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	4610      	mov	r0, r2
 8010aea:	f003 f911 	bl	8013d10 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    swipeContainer1.add(swipeContainer1Page3);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010afa:	4619      	mov	r1, r3
 8010afc:	4610      	mov	r0, r2
 8010afe:	f003 fdbc 	bl	801467a <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    swipeContainer1.setSelectedPage(1);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	336c      	adds	r3, #108	@ 0x6c
 8010b06:	2101      	movs	r1, #1
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f003 fda7 	bl	801465c <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
    add(swipeContainer1);
 8010b0e:	687a      	ldr	r2, [r7, #4]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	336c      	adds	r3, #108	@ 0x6c
 8010b14:	4619      	mov	r1, r3
 8010b16:	4610      	mov	r0, r2
 8010b18:	f7ff fe34 	bl	8010784 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3724      	adds	r7, #36	@ 0x24
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd90      	pop	{r4, r7, pc}
 8010b26:	bf00      	nop
 8010b28:	0802ea50 	.word	0x0802ea50

08010b2c <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	4a16      	ldr	r2, [pc, #88]	@ (8010b90 <_ZN14screenViewBaseD1Ev+0x64>)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	601a      	str	r2, [r3, #0]
{

}
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7ff feb7 	bl	80108b4 <_ZN8touchgfx3BoxD1Ev>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7ff fd9f 	bl	8010690 <_ZN8touchgfx9ContainerD1Ev>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7ff feab 	bl	80108b4 <_ZN8touchgfx3BoxD1Ev>
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7ff fd93 	bl	8010690 <_ZN8touchgfx9ContainerD1Ev>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	336c      	adds	r3, #108	@ 0x6c
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f003 fb58 	bl	8014224 <_ZN8touchgfx14SwipeContainerD1Ev>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	3340      	adds	r3, #64	@ 0x40
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7ff fe9b 	bl	80108b4 <_ZN8touchgfx3BoxD1Ev>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7ff fe75 	bl	8010870 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3708      	adds	r7, #8
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	0802ea50 	.word	0x0802ea50

08010b94 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b082      	sub	sp, #8
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
}
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f7ff ffc5 	bl	8010b2c <_ZN14screenViewBaseD1Ev>
 8010ba2:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f01a ffdb 	bl	802bb62 <_ZdlPvj>
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3708      	adds	r7, #8
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8010bb6:	b480      	push	{r7}
 8010bb8:	b083      	sub	sp, #12
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]

}
 8010bbe:	bf00      	nop
 8010bc0:	370c      	adds	r7, #12
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
	...

08010bcc <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f00a fd78 	bl	801b6cc <_ZN8touchgfx6ScreenC1Ev>
 8010bdc:	4a05      	ldr	r2, [pc, #20]	@ (8010bf4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	601a      	str	r2, [r3, #0]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2200      	movs	r2, #0
 8010be6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4618      	mov	r0, r3
 8010bec:	3708      	adds	r7, #8
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	0802ea84 	.word	0x0802ea84

08010bf8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	af00      	add	r7, sp, #0
    return bitmap_database;
 8010bfc:	4b02      	ldr	r3, [pc, #8]	@ (8010c08 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr
 8010c08:	0802eb18 	.word	0x0802eb18

08010c0c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8010c10:	2302      	movs	r3, #2
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr

08010c1c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8010c1c:	b480      	push	{r7}
 8010c1e:	b085      	sub	sp, #20
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	460b      	mov	r3, r1
 8010c26:	607a      	str	r2, [r7, #4]
 8010c28:	817b      	strh	r3, [r7, #10]
        return 0;
 8010c2a:	2300      	movs	r3, #0
    }
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3714      	adds	r7, #20
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr

08010c38 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
        return 0;
 8010c40:	2300      	movs	r3, #0
    }
 8010c42:	4618      	mov	r0, r3
 8010c44:	370c      	adds	r7, #12
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr

08010c4e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8010c4e:	b480      	push	{r7}
 8010c50:	b083      	sub	sp, #12
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
        return 0;
 8010c56:	2300      	movs	r3, #0
    }
 8010c58:	4618      	mov	r0, r3
 8010c5a:	370c      	adds	r7, #12
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c62:	4770      	bx	lr

08010c64 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8010c64:	b480      	push	{r7}
 8010c66:	b085      	sub	sp, #20
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	60b9      	str	r1, [r7, #8]
 8010c6e:	4613      	mov	r3, r2
 8010c70:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8010c72:	4a07      	ldr	r2, [pc, #28]	@ (8010c90 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010c78:	4a06      	ldr	r2, [pc, #24]	@ (8010c94 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8010c7e:	4a06      	ldr	r2, [pc, #24]	@ (8010c98 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010c80:	88fb      	ldrh	r3, [r7, #6]
 8010c82:	8013      	strh	r3, [r2, #0]
    }
 8010c84:	bf00      	nop
 8010c86:	3714      	adds	r7, #20
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr
 8010c90:	2005bad8 	.word	0x2005bad8
 8010c94:	2005bae0 	.word	0x2005bae0
 8010c98:	2005badc 	.word	0x2005badc

08010c9c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010c9c:	b40e      	push	{r1, r2, r3}
 8010c9e:	b580      	push	{r7, lr}
 8010ca0:	b085      	sub	sp, #20
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8010ca6:	f107 0320 	add.w	r3, r7, #32
 8010caa:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	69fa      	ldr	r2, [r7, #28]
 8010cb0:	2100      	movs	r1, #0
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f009 fd9e 	bl	801a7f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010cbc:	89fb      	ldrh	r3, [r7, #14]
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3714      	adds	r7, #20
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010cc8:	b003      	add	sp, #12
 8010cca:	4770      	bx	lr

08010ccc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010ccc:	b40c      	push	{r2, r3}
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b084      	sub	sp, #16
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
 8010cd6:	460b      	mov	r3, r1
 8010cd8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8010cda:	f107 031c 	add.w	r3, r7, #28
 8010cde:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8010ce0:	78f9      	ldrb	r1, [r7, #3]
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	69ba      	ldr	r2, [r7, #24]
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f009 fd84 	bl	801a7f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010cec:	4603      	mov	r3, r0
 8010cee:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3710      	adds	r7, #16
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010cfc:	b002      	add	sp, #8
 8010cfe:	4770      	bx	lr

08010d00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b08a      	sub	sp, #40	@ 0x28
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	460b      	mov	r3, r1
 8010d0a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d016      	beq.n	8010d42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	3322      	adds	r3, #34	@ 0x22
 8010d18:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8010d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d1c:	8adb      	ldrh	r3, [r3, #22]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d105      	bne.n	8010d2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010d22:	4b43      	ldr	r3, [pc, #268]	@ (8010e30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010d24:	4a43      	ldr	r2, [pc, #268]	@ (8010e34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010d26:	21c5      	movs	r1, #197	@ 0xc5
 8010d28:	4843      	ldr	r0, [pc, #268]	@ (8010e38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010d2a:	f01b fe0f 	bl	802c94c <__assert_func>
            return buffer[pos];
 8010d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d30:	8a9b      	ldrh	r3, [r3, #20]
 8010d32:	461a      	mov	r2, r3
 8010d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d001      	beq.n	8010d42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010d3e:	2301      	movs	r3, #1
 8010d40:	e000      	b.n	8010d44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8010d42:	2300      	movs	r3, #0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d06a      	beq.n	8010e1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f00b fbd0 	bl	801c4ee <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	3322      	adds	r3, #34	@ 0x22
 8010d52:	623b      	str	r3, [r7, #32]
 8010d54:	2301      	movs	r3, #1
 8010d56:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8010d58:	6a3b      	ldr	r3, [r7, #32]
 8010d5a:	8adb      	ldrh	r3, [r3, #22]
 8010d5c:	8bfa      	ldrh	r2, [r7, #30]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d305      	bcc.n	8010d6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8010d62:	4b36      	ldr	r3, [pc, #216]	@ (8010e3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8010d64:	4a36      	ldr	r2, [pc, #216]	@ (8010e40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8010d66:	21cb      	movs	r1, #203	@ 0xcb
 8010d68:	4833      	ldr	r0, [pc, #204]	@ (8010e38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010d6a:	f01b fdef 	bl	802c94c <__assert_func>
            const uint16_t index = pos + offset;
 8010d6e:	6a3b      	ldr	r3, [r7, #32]
 8010d70:	8a9a      	ldrh	r2, [r3, #20]
 8010d72:	8bfb      	ldrh	r3, [r7, #30]
 8010d74:	4413      	add	r3, r2
 8010d76:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8010d78:	8bbb      	ldrh	r3, [r7, #28]
 8010d7a:	2b09      	cmp	r3, #9
 8010d7c:	d801      	bhi.n	8010d82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8010d7e:	8bbb      	ldrh	r3, [r7, #28]
 8010d80:	e001      	b.n	8010d86 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8010d82:	8bbb      	ldrh	r3, [r7, #28]
 8010d84:	3b0a      	subs	r3, #10
 8010d86:	6a3a      	ldr	r2, [r7, #32]
 8010d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d8c:	f640 123f 	movw	r2, #2367	@ 0x93f
 8010d90:	4293      	cmp	r3, r2
 8010d92:	bf0c      	ite	eq
 8010d94:	2301      	moveq	r3, #1
 8010d96:	2300      	movne	r3, #0
 8010d98:	b2db      	uxtb	r3, r3
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d03f      	beq.n	8010e1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	3322      	adds	r3, #34	@ 0x22
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	3222      	adds	r2, #34	@ 0x22
 8010da6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8010da8:	68ba      	ldr	r2, [r7, #8]
 8010daa:	8ad2      	ldrh	r2, [r2, #22]
 8010dac:	2a00      	cmp	r2, #0
 8010dae:	d105      	bne.n	8010dbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010db0:	4b1f      	ldr	r3, [pc, #124]	@ (8010e30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010db2:	4a20      	ldr	r2, [pc, #128]	@ (8010e34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010db4:	21c5      	movs	r1, #197	@ 0xc5
 8010db6:	4820      	ldr	r0, [pc, #128]	@ (8010e38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010db8:	f01b fdc8 	bl	802c94c <__assert_func>
            return buffer[pos];
 8010dbc:	68ba      	ldr	r2, [r7, #8]
 8010dbe:	8a92      	ldrh	r2, [r2, #20]
 8010dc0:	4611      	mov	r1, r2
 8010dc2:	68ba      	ldr	r2, [r7, #8]
 8010dc4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8010dc8:	613b      	str	r3, [r7, #16]
 8010dca:	4613      	mov	r3, r2
 8010dcc:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	8adb      	ldrh	r3, [r3, #22]
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d806      	bhi.n	8010de4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8010dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8010e44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8010dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8010e48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8010dda:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8010dde:	4816      	ldr	r0, [pc, #88]	@ (8010e38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010de0:	f01b fdb4 	bl	802c94c <__assert_func>
            const uint16_t index = pos + 1;
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	8a9b      	ldrh	r3, [r3, #20]
 8010de8:	3301      	adds	r3, #1
 8010dea:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010dec:	89bb      	ldrh	r3, [r7, #12]
 8010dee:	2b09      	cmp	r3, #9
 8010df0:	d801      	bhi.n	8010df6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8010df2:	89bb      	ldrh	r3, [r7, #12]
 8010df4:	e000      	b.n	8010df8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8010df6:	2300      	movs	r3, #0
 8010df8:	693a      	ldr	r2, [r7, #16]
 8010dfa:	89f9      	ldrh	r1, [r7, #14]
 8010dfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8010e00:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	3322      	adds	r3, #34	@ 0x22
 8010e06:	61bb      	str	r3, [r7, #24]
 8010e08:	f640 133f 	movw	r3, #2367	@ 0x93f
 8010e0c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8010e0e:	69bb      	ldr	r3, [r7, #24]
 8010e10:	8a9b      	ldrh	r3, [r3, #20]
 8010e12:	4619      	mov	r1, r3
 8010e14:	69bb      	ldr	r3, [r7, #24]
 8010e16:	8afa      	ldrh	r2, [r7, #22]
 8010e18:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8010e1c:	bf00      	nop
        }
    }
    return getNextChar();
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f00b fa68 	bl	801c2f4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010e24:	4603      	mov	r3, r0
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3728      	adds	r7, #40	@ 0x28
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	0802de14 	.word	0x0802de14
 8010e34:	0802de20 	.word	0x0802de20
 8010e38:	0802decc 	.word	0x0802decc
 8010e3c:	0802df14 	.word	0x0802df14
 8010e40:	0802df24 	.word	0x0802df24
 8010e44:	0802dff8 	.word	0x0802dff8
 8010e48:	0802e004 	.word	0x0802e004

08010e4c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f00b fa14 	bl	801c282 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8010e5a:	bf00      	nop
 8010e5c:	3708      	adds	r7, #8
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
	...

08010e64 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8010e64:	b590      	push	{r4, r7, lr}
 8010e66:	b085      	sub	sp, #20
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8010e72:	88fb      	ldrh	r3, [r7, #6]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d127      	bne.n	8010ec8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8010e78:	88fb      	ldrh	r3, [r7, #6]
 8010e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8010ef4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d016      	beq.n	8010eb2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8010e84:	88fb      	ldrh	r3, [r7, #6]
 8010e86:	4a1b      	ldr	r2, [pc, #108]	@ (8010ef4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e8c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	68ba      	ldr	r2, [r7, #8]
 8010e94:	4413      	add	r3, r2
 8010e96:	4a18      	ldr	r2, [pc, #96]	@ (8010ef8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010e98:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	68ba      	ldr	r2, [r7, #8]
 8010ea0:	4413      	add	r3, r2
 8010ea2:	4a16      	ldr	r2, [pc, #88]	@ (8010efc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010ea4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	689b      	ldr	r3, [r3, #8]
 8010eaa:	68ba      	ldr	r2, [r7, #8]
 8010eac:	4413      	add	r3, r2
 8010eae:	60fb      	str	r3, [r7, #12]
 8010eb0:	e00a      	b.n	8010ec8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8010eb2:	4b11      	ldr	r3, [pc, #68]	@ (8010ef8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010eb4:	4a12      	ldr	r2, [pc, #72]	@ (8010f00 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8010eb6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8010eb8:	4a12      	ldr	r2, [pc, #72]	@ (8010f04 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8010eba:	4b10      	ldr	r3, [pc, #64]	@ (8010efc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010ebc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010ebe:	88fb      	ldrh	r3, [r7, #6]
 8010ec0:	4a11      	ldr	r2, [pc, #68]	@ (8010f08 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ec6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d00d      	beq.n	8010eea <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8010ece:	4a0f      	ldr	r2, [pc, #60]	@ (8010f0c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8010ed0:	88fb      	ldrh	r3, [r7, #6]
 8010ed2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010ed4:	f000 f824 	bl	8010f20 <_ZN17TypedTextDatabase8getFontsEv>
 8010ed8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8010eda:	f000 f819 	bl	8010f10 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	4621      	mov	r1, r4
 8010ee4:	68f8      	ldr	r0, [r7, #12]
 8010ee6:	f7ff febd 	bl	8010c64 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8010eea:	bf00      	nop
 8010eec:	3714      	adds	r7, #20
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd90      	pop	{r4, r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	2005a6e8 	.word	0x2005a6e8
 8010ef8:	2005a6f0 	.word	0x2005a6f0
 8010efc:	2005a6f4 	.word	0x2005a6f4
 8010f00:	08030fd4 	.word	0x08030fd4
 8010f04:	08030fd0 	.word	0x08030fd0
 8010f08:	08030fdc 	.word	0x08030fdc
 8010f0c:	2005a6ec 	.word	0x2005a6ec

08010f10 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8010f10:	b480      	push	{r7}
 8010f12:	af00      	add	r7, sp, #0
    return 0;
 8010f14:	2300      	movs	r3, #0
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr

08010f20 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8010f20:	b480      	push	{r7}
 8010f22:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8010f24:	4b02      	ldr	r3, [pc, #8]	@ (8010f30 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr
 8010f30:	2005a6f8 	.word	0x2005a6f8

08010f34 <_Z41__static_initialization_and_destruction_0v>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8010f34:	b580      	push	{r7, lr}
 8010f36:	af00      	add	r7, sp, #0
    &(getFont_verdana_20_4bpp()),
 8010f38:	f7fe fba2 	bl	800f680 <_Z23getFont_verdana_20_4bppv>
 8010f3c:	4603      	mov	r3, r0
};
 8010f3e:	4a07      	ldr	r2, [pc, #28]	@ (8010f5c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8010f40:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8010f42:	f7fe fbf5 	bl	800f730 <_Z23getFont_verdana_40_4bppv>
 8010f46:	4603      	mov	r3, r0
};
 8010f48:	4a04      	ldr	r2, [pc, #16]	@ (8010f5c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8010f4a:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8010f4c:	f7fe fb40 	bl	800f5d0 <_Z23getFont_verdana_10_4bppv>
 8010f50:	4603      	mov	r3, r0
};
 8010f52:	4a02      	ldr	r2, [pc, #8]	@ (8010f5c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8010f54:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8010f56:	bf00      	nop
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	2005a6f8 	.word	0x2005a6f8

08010f60 <_GLOBAL__sub_I_touchgfx_fonts>:
 8010f60:	b580      	push	{r7, lr}
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	f7ff ffe6 	bl	8010f34 <_Z41__static_initialization_and_destruction_0v>
 8010f68:	bd80      	pop	{r7, pc}
	...

08010f6c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	4a05      	ldr	r2, [pc, #20]	@ (8010f8c <_ZN19FrontendApplicationD1Ev+0x20>)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	601a      	str	r2, [r3, #0]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fe fe63 	bl	800fc48 <_ZN23FrontendApplicationBaseD1Ev>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	4618      	mov	r0, r3
 8010f86:	3708      	adds	r7, #8
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}
 8010f8c:	0802ebac 	.word	0x0802ebac

08010f90 <_ZN19FrontendApplicationD0Ev>:
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f7ff ffe7 	bl	8010f6c <_ZN19FrontendApplicationD1Ev>
 8010f9e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f01a fddd 	bl	802bb62 <_ZdlPvj>
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	4618      	mov	r0, r3
 8010fac:	3708      	adds	r7, #8
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}

08010fb2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8010fb2:	b580      	push	{r7, lr}
 8010fb4:	b082      	sub	sp, #8
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f000 f82d 	bl	8011020 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f008 fbdd 	bl	8019788 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8010fce:	bf00      	nop
 8010fd0:	3708      	adds	r7, #8
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
	...

08010fd8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b084      	sub	sp, #16
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	687a      	ldr	r2, [r7, #4]
 8010fe8:	68b9      	ldr	r1, [r7, #8]
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7fe fe7c 	bl	800fce8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8010ff0:	4a03      	ldr	r2, [pc, #12]	@ (8011000 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	601a      	str	r2, [r3, #0]
{

}
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3710      	adds	r7, #16
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	0802ebac 	.word	0x0802ebac

08011004 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011004:	b480      	push	{r7}
 8011006:	b083      	sub	sp, #12
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2200      	movs	r2, #0
 8011010:	601a      	str	r2, [r3, #0]
{

}
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4618      	mov	r0, r3
 8011016:	370c      	adds	r7, #12
 8011018:	46bd      	mov	sp, r7
 801101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101e:	4770      	bx	lr

08011020 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011020:	b480      	push	{r7}
 8011022:	b083      	sub	sp, #12
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]

}
 8011028:	bf00      	nop
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
    {
    }
 801103c:	bf00      	nop
 801103e:	370c      	adds	r7, #12
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
    {
    }
 8011050:	bf00      	nop
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr

0801105c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 801105c:	b480      	push	{r7}
 801105e:	b083      	sub	sp, #12
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
    {
 8011064:	4a04      	ldr	r2, [pc, #16]	@ (8011078 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	601a      	str	r2, [r3, #0]
    }
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	4618      	mov	r0, r3
 801106e:	370c      	adds	r7, #12
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr
 8011078:	0802ec38 	.word	0x0802ec38

0801107c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
    }
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f7ff ffe9 	bl	801105c <_ZN8touchgfx9PresenterD1Ev>
 801108a:	2104      	movs	r1, #4
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f01a fd68 	bl	802bb62 <_ZdlPvj>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4618      	mov	r0, r3
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 801109c:	b480      	push	{r7}
 801109e:	b083      	sub	sp, #12
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
    {
 80110a4:	4a04      	ldr	r2, [pc, #16]	@ (80110b8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	601a      	str	r2, [r3, #0]
    }
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	4618      	mov	r0, r3
 80110ae:	370c      	adds	r7, #12
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr
 80110b8:	0802ec38 	.word	0x0802ec38

080110bc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	4a06      	ldr	r2, [pc, #24]	@ (80110e0 <_ZN13ModelListenerC1Ev+0x24>)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	601a      	str	r2, [r3, #0]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2200      	movs	r2, #0
 80110ce:	605a      	str	r2, [r3, #4]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	4618      	mov	r0, r3
 80110d4:	370c      	adds	r7, #12
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr
 80110de:	bf00      	nop
 80110e0:	0802ec28 	.word	0x0802ec28

080110e4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	4a04      	ldr	r2, [pc, #16]	@ (8011100 <_ZN13ModelListenerD1Ev+0x1c>)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	601a      	str	r2, [r3, #0]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4618      	mov	r0, r3
 80110f6:	370c      	adds	r7, #12
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr
 8011100:	0802ec28 	.word	0x0802ec28

08011104 <_ZN13ModelListenerD0Ev>:
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f7ff ffe9 	bl	80110e4 <_ZN13ModelListenerD1Ev>
 8011112:	2108      	movs	r1, #8
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f01a fd24 	bl	802bb62 <_ZdlPvj>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	4618      	mov	r0, r3
 801111e:	3708      	adds	r7, #8
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 8011124:	b580      	push	{r7, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	4a09      	ldr	r2, [pc, #36]	@ (8011154 <_ZN15screenPresenterD1Ev+0x30>)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	601a      	str	r2, [r3, #0]
 8011132:	4a09      	ldr	r2, [pc, #36]	@ (8011158 <_ZN15screenPresenterD1Ev+0x34>)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	605a      	str	r2, [r3, #4]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	3304      	adds	r3, #4
 801113c:	4618      	mov	r0, r3
 801113e:	f7ff ffd1 	bl	80110e4 <_ZN13ModelListenerD1Ev>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	4618      	mov	r0, r3
 8011146:	f7ff ff89 	bl	801105c <_ZN8touchgfx9PresenterD1Ev>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	4618      	mov	r0, r3
 801114e:	3708      	adds	r7, #8
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}
 8011154:	0802ec00 	.word	0x0802ec00
 8011158:	0802ec18 	.word	0x0802ec18

0801115c <_ZThn4_N15screenPresenterD1Ev>:
 801115c:	f1a0 0004 	sub.w	r0, r0, #4
 8011160:	e7e0      	b.n	8011124 <_ZN15screenPresenterD1Ev>
 8011162:	bf00      	nop

08011164 <_ZN15screenPresenterD0Ev>:
 8011164:	b580      	push	{r7, lr}
 8011166:	b082      	sub	sp, #8
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f7ff ffd9 	bl	8011124 <_ZN15screenPresenterD1Ev>
 8011172:	2110      	movs	r1, #16
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f01a fcf4 	bl	802bb62 <_ZdlPvj>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	4618      	mov	r0, r3
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <_ZThn4_N15screenPresenterD0Ev>:
 8011184:	f1a0 0004 	sub.w	r0, r0, #4
 8011188:	e7ec      	b.n	8011164 <_ZN15screenPresenterD0Ev>
	...

0801118c <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
    : view(v)
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	4618      	mov	r0, r3
 801119a:	f7ff ff7f 	bl	801109c <_ZN8touchgfx9PresenterC1Ev>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	3304      	adds	r3, #4
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7ff ff8a 	bl	80110bc <_ZN13ModelListenerC1Ev>
 80111a8:	4a06      	ldr	r2, [pc, #24]	@ (80111c4 <_ZN15screenPresenterC1ER10screenView+0x38>)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	601a      	str	r2, [r3, #0]
 80111ae:	4a06      	ldr	r2, [pc, #24]	@ (80111c8 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	605a      	str	r2, [r3, #4]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	683a      	ldr	r2, [r7, #0]
 80111b8:	60da      	str	r2, [r3, #12]
{

}
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4618      	mov	r0, r3
 80111be:	3708      	adds	r7, #8
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	0802ec00 	.word	0x0802ec00
 80111c8:	0802ec18 	.word	0x0802ec18

080111cc <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 80111cc:	b480      	push	{r7}
 80111ce:	b083      	sub	sp, #12
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]

}
 80111d4:	bf00      	nop
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 80111e0:	b480      	push	{r7}
 80111e2:	b083      	sub	sp, #12
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]

}
 80111e8:	bf00      	nop
 80111ea:	370c      	adds	r7, #12
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr

080111f4 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	4a05      	ldr	r2, [pc, #20]	@ (8011214 <_ZN10screenViewD1Ev+0x20>)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	601a      	str	r2, [r3, #0]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	4618      	mov	r0, r3
 8011206:	f7ff fc91 	bl	8010b2c <_ZN14screenViewBaseD1Ev>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4618      	mov	r0, r3
 801120e:	3708      	adds	r7, #8
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	0802ec50 	.word	0x0802ec50

08011218 <_ZN10screenViewD0Ev>:
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f7ff ffe7 	bl	80111f4 <_ZN10screenViewD1Ev>
 8011226:	f44f 7105 	mov.w	r1, #532	@ 0x214
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f01a fc99 	bl	802bb62 <_ZdlPvj>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	4618      	mov	r0, r3
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
	...

0801123c <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4618      	mov	r0, r3
 8011248:	f7ff fb56 	bl	80108f8 <_ZN14screenViewBaseC1Ev>
 801124c:	4a03      	ldr	r2, [pc, #12]	@ (801125c <_ZN10screenViewC1Ev+0x20>)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	601a      	str	r2, [r3, #0]
{

}
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	4618      	mov	r0, r3
 8011256:	3708      	adds	r7, #8
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	0802ec50 	.word	0x0802ec50

08011260 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b082      	sub	sp, #8
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	4618      	mov	r0, r3
 801126c:	f7ff fca3 	bl	8010bb6 <_ZN14screenViewBase11setupScreenEv>
}
 8011270:	bf00      	nop
 8011272:	3708      	adds	r7, #8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}

08011278 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	4618      	mov	r0, r3
 8011284:	f7ff fa5e 	bl	8010744 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011288:	bf00      	nop
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2b00      	cmp	r3, #0
 801129c:	bfb8      	it	lt
 801129e:	425b      	neglt	r3, r3
 80112a0:	4618      	mov	r0, r3
 80112a2:	370c      	adds	r7, #12
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr

080112ac <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80112ac:	b480      	push	{r7}
 80112ae:	b083      	sub	sp, #12
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
    {
 80112b4:	4a04      	ldr	r2, [pc, #16]	@ (80112c8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	601a      	str	r2, [r3, #0]
    }
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	4618      	mov	r0, r3
 80112be:	370c      	adds	r7, #12
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr
 80112c8:	0802ec9c 	.word	0x0802ec9c

080112cc <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
    }
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7ff ffe9 	bl	80112ac <_ZN8touchgfx15TouchControllerD1Ev>
 80112da:	2104      	movs	r1, #4
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f01a fc40 	bl	802bb62 <_ZdlPvj>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	4618      	mov	r0, r3
 80112e6:	3708      	adds	r7, #8
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <_ZN20STM32TouchController4initEv>:
#include <stdio.h>

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    CST816D_Init();
 80112f4:	f7ef fa0a 	bl	800070c <CST816D_Init>
    uint8_t irq_setting = EnTouch | EnChange | EnMotion;
 80112f8:	2370      	movs	r3, #112	@ 0x70
 80112fa:	73fb      	strb	r3, [r7, #15]
    CST816D_SetIrqCtl(irq_setting);
 80112fc:	7bfb      	ldrb	r3, [r7, #15]
 80112fe:	4618      	mov	r0, r3
 8011300:	f7ef fa72 	bl	80007e8 <CST816D_SetIrqCtl>
    CST816D_SetMotionMask(0x07);
 8011304:	2007      	movs	r0, #7
 8011306:	f7ef fa5f 	bl	80007c8 <CST816D_SetMotionMask>
    printf("cst816d init\n");
 801130a:	4803      	ldr	r0, [pc, #12]	@ (8011318 <_ZN20STM32TouchController4initEv+0x2c>)
 801130c:	f01b fd4a 	bl	802cda4 <puts>
}
 8011310:	bf00      	nop
 8011312:	3710      	adds	r7, #16
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}
 8011318:	0802e0b8 	.word	0x0802e0b8

0801131c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t &x, int32_t &y)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b08e      	sub	sp, #56	@ 0x38
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	607a      	str	r2, [r7, #4]
    static int32_t lastY = 0;
    static bool wasTouched = false;
    static uint32_t touchStartTime = 0;
    static uint8_t lastGesture = 0;

    const int32_t MIN_X = 0;
 8011328:	2300      	movs	r3, #0
 801132a:	637b      	str	r3, [r7, #52]	@ 0x34
    const int32_t MAX_X = 239;
 801132c:	23ef      	movs	r3, #239	@ 0xef
 801132e:	633b      	str	r3, [r7, #48]	@ 0x30
    const int32_t MIN_Y = 0;
 8011330:	2300      	movs	r3, #0
 8011332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const int32_t MAX_Y = 295;
 8011334:	f240 1327 	movw	r3, #295	@ 0x127
 8011338:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int32_t MIN_DELTA = 1;
 801133a:	2301      	movs	r3, #1
 801133c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (CST816D_IsTouched())
 801133e:	f7ef fa31 	bl	80007a4 <CST816D_IsTouched>
 8011342:	4603      	mov	r3, r0
 8011344:	2b00      	cmp	r3, #0
 8011346:	bf14      	ite	ne
 8011348:	2301      	movne	r3, #1
 801134a:	2300      	moveq	r3, #0
 801134c:	b2db      	uxtb	r3, r3
 801134e:	2b00      	cmp	r3, #0
 8011350:	f000 809e 	beq.w	8011490 <_ZN20STM32TouchController11sampleTouchERlS0_+0x174>
    {
        uint8_t raw_data[7] = {0};
 8011354:	f107 0318 	add.w	r3, r7, #24
 8011358:	2200      	movs	r2, #0
 801135a:	601a      	str	r2, [r3, #0]
 801135c:	f8c3 2003 	str.w	r2, [r3, #3]
        extern HAL_StatusTypeDef CST816D_ReadReg(uint8_t reg_addr, uint8_t *data, uint16_t len);

        if (CST816D_ReadReg(0x01, raw_data, 7) == HAL_OK)
 8011360:	f107 0318 	add.w	r3, r7, #24
 8011364:	2207      	movs	r2, #7
 8011366:	4619      	mov	r1, r3
 8011368:	2001      	movs	r0, #1
 801136a:	f7ef f997 	bl	800069c <CST816D_ReadReg>
 801136e:	4603      	mov	r3, r0
 8011370:	2b00      	cmp	r3, #0
 8011372:	bf0c      	ite	eq
 8011374:	2301      	moveq	r3, #1
 8011376:	2300      	movne	r3, #0
 8011378:	b2db      	uxtb	r3, r3
 801137a:	2b00      	cmp	r3, #0
 801137c:	f000 8099 	beq.w	80114b2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x196>
        {
            uint8_t gesture = raw_data[0];
 8011380:	7e3b      	ldrb	r3, [r7, #24]
 8011382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            uint8_t finger_num = raw_data[1] & 0x0F;
 8011386:	7e7b      	ldrb	r3, [r7, #25]
 8011388:	f003 030f 	and.w	r3, r3, #15
 801138c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            int32_t newX = ((uint16_t)(raw_data[2] & 0x0F) << 8) | raw_data[3];
 8011390:	7ebb      	ldrb	r3, [r7, #26]
 8011392:	021b      	lsls	r3, r3, #8
 8011394:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8011398:	7efa      	ldrb	r2, [r7, #27]
 801139a:	4313      	orrs	r3, r2
 801139c:	617b      	str	r3, [r7, #20]
            int32_t newY = ((uint16_t)(raw_data[4] & 0x0F) << 8) | raw_data[5];
 801139e:	7f3b      	ldrb	r3, [r7, #28]
 80113a0:	021b      	lsls	r3, r3, #8
 80113a2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80113a6:	7f7a      	ldrb	r2, [r7, #29]
 80113a8:	4313      	orrs	r3, r2
 80113aa:	613b      	str	r3, [r7, #16]
            // printf("Raw: [%02X %02X %02X %02X %02X %02X %02X] -> fingers=%d, X=%ld, Y=%ld\n",
            //        raw_data[0], raw_data[1], raw_data[2], raw_data[3],
            //        raw_data[4], raw_data[5], raw_data[6],
            //        finger_num, newX, newY);

            if (finger_num > 0)
 80113ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d07e      	beq.n	80114b2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x196>
            {
                // 如果是新的触摸事件
                if (!wasTouched)
 80113b4:	4b41      	ldr	r3, [pc, #260]	@ (80114bc <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a0>)
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	f083 0301 	eor.w	r3, r3, #1
 80113bc:	b2db      	uxtb	r3, r3
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d008      	beq.n	80113d4 <_ZN20STM32TouchController11sampleTouchERlS0_+0xb8>
                {
                    touchStartTime = HAL_GetTick();
 80113c2:	f7f0 fd29 	bl	8001e18 <HAL_GetTick>
 80113c6:	4603      	mov	r3, r0
 80113c8:	4a3d      	ldr	r2, [pc, #244]	@ (80114c0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a4>)
 80113ca:	6013      	str	r3, [r2, #0]
                    lastGesture = gesture;
 80113cc:	4a3d      	ldr	r2, [pc, #244]	@ (80114c4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a8>)
 80113ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80113d2:	7013      	strb	r3, [r2, #0]
                }

                // 确保坐标在有效范围内
                newX = (newX < MIN_X) ? MIN_X : (newX > MAX_X) ? MAX_X
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	db08      	blt.n	80113ec <_ZN20STM32TouchController11sampleTouchERlS0_+0xd0>
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	2bef      	cmp	r3, #239	@ 0xef
 80113de:	dc03      	bgt.n	80113e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0xcc>
                                                               : newX;
 80113e0:	f107 0314 	add.w	r3, r7, #20
                newX = (newX < MIN_X) ? MIN_X : (newX > MAX_X) ? MAX_X
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	e002      	b.n	80113ee <_ZN20STM32TouchController11sampleTouchERlS0_+0xd2>
 80113e8:	23ef      	movs	r3, #239	@ 0xef
 80113ea:	e000      	b.n	80113ee <_ZN20STM32TouchController11sampleTouchERlS0_+0xd2>
 80113ec:	2300      	movs	r3, #0
 80113ee:	617b      	str	r3, [r7, #20]
                newY = (newY < MIN_Y) ? MIN_Y : (newY > MAX_Y) ? MAX_Y
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	db0a      	blt.n	801140c <_ZN20STM32TouchController11sampleTouchERlS0_+0xf0>
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80113fc:	da03      	bge.n	8011406 <_ZN20STM32TouchController11sampleTouchERlS0_+0xea>
                                                               : newY;
 80113fe:	f107 0310 	add.w	r3, r7, #16
                newY = (newY < MIN_Y) ? MIN_Y : (newY > MAX_Y) ? MAX_Y
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	e003      	b.n	801140e <_ZN20STM32TouchController11sampleTouchERlS0_+0xf2>
 8011406:	f240 1327 	movw	r3, #295	@ 0x127
 801140a:	e000      	b.n	801140e <_ZN20STM32TouchController11sampleTouchERlS0_+0xf2>
 801140c:	2300      	movs	r3, #0
 801140e:	613b      	str	r3, [r7, #16]

                bool significantChange = !wasTouched ||
 8011410:	4b2a      	ldr	r3, [pc, #168]	@ (80114bc <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a0>)
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	f083 0301 	eor.w	r3, r3, #1
 8011418:	b2db      	uxtb	r3, r3
                                         abs(newX - lastX) > MIN_DELTA ||
 801141a:	2b00      	cmp	r3, #0
 801141c:	d113      	bne.n	8011446 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12a>
 801141e:	697a      	ldr	r2, [r7, #20]
 8011420:	4b29      	ldr	r3, [pc, #164]	@ (80114c8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	1ad3      	subs	r3, r2, r3
 8011426:	4618      	mov	r0, r3
 8011428:	f7ff ff32 	bl	8011290 <_ZSt3absl>
 801142c:	4603      	mov	r3, r0
                bool significantChange = !wasTouched ||
 801142e:	2b01      	cmp	r3, #1
 8011430:	dc09      	bgt.n	8011446 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12a>
                                         abs(newY - lastY) > MIN_DELTA;
 8011432:	693a      	ldr	r2, [r7, #16]
 8011434:	4b25      	ldr	r3, [pc, #148]	@ (80114cc <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	4618      	mov	r0, r3
 801143c:	f7ff ff28 	bl	8011290 <_ZSt3absl>
 8011440:	4603      	mov	r3, r0
                                         abs(newX - lastX) > MIN_DELTA ||
 8011442:	2b01      	cmp	r3, #1
 8011444:	dd01      	ble.n	801144a <_ZN20STM32TouchController11sampleTouchERlS0_+0x12e>
 8011446:	2301      	movs	r3, #1
 8011448:	e000      	b.n	801144c <_ZN20STM32TouchController11sampleTouchERlS0_+0x130>
 801144a:	2300      	movs	r3, #0
                                         abs(newY - lastY) > MIN_DELTA;
 801144c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                if (significantChange)
 8011450:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00e      	beq.n	8011476 <_ZN20STM32TouchController11sampleTouchERlS0_+0x15a>
                {
                    x = newX;
 8011458:	697a      	ldr	r2, [r7, #20]
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	601a      	str	r2, [r3, #0]
                    y = newY;
 801145e:	693a      	ldr	r2, [r7, #16]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	601a      	str	r2, [r3, #0]
                    lastX = x;
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4a17      	ldr	r2, [pc, #92]	@ (80114c8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 801146a:	6013      	str	r3, [r2, #0]
                    lastY = y;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4a16      	ldr	r2, [pc, #88]	@ (80114cc <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 8011472:	6013      	str	r3, [r2, #0]
 8011474:	e007      	b.n	8011486 <_ZN20STM32TouchController11sampleTouchERlS0_+0x16a>
                    // printf("Touch Event - X: %ld, Y: %ld, isDrag: %s, Gesture: 0x%02X\n",
                    //        x, y, wasTouched ? "true" : "false", gesture);
                }
                else
                {
                    x = lastX;
 8011476:	4b14      	ldr	r3, [pc, #80]	@ (80114c8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	601a      	str	r2, [r3, #0]
                    y = lastY;
 801147e:	4b13      	ldr	r3, [pc, #76]	@ (80114cc <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	601a      	str	r2, [r3, #0]
                }

                wasTouched = true;
 8011486:	4b0d      	ldr	r3, [pc, #52]	@ (80114bc <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a0>)
 8011488:	2201      	movs	r2, #1
 801148a:	701a      	strb	r2, [r3, #0]
                return true;
 801148c:	2301      	movs	r3, #1
 801148e:	e011      	b.n	80114b4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x198>
            }
        }
    }
    else if (wasTouched)
 8011490:	4b0a      	ldr	r3, [pc, #40]	@ (80114bc <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a0>)
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d00c      	beq.n	80114b2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x196>
    {
        // // 只在真正释放时发送一次释放事件
        // printf("Touch Released - Final X: %ld, Y: %ld, Duration: %ldms\n",
        //        lastX, lastY, HAL_GetTick() - touchStartTime);
        x = lastX;
 8011498:	4b0b      	ldr	r3, [pc, #44]	@ (80114c8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 801149a:	681a      	ldr	r2, [r3, #0]
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	601a      	str	r2, [r3, #0]
        y = lastY;
 80114a0:	4b0a      	ldr	r3, [pc, #40]	@ (80114cc <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	601a      	str	r2, [r3, #0]
        wasTouched = false;
 80114a8:	4b04      	ldr	r3, [pc, #16]	@ (80114bc <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a0>)
 80114aa:	2200      	movs	r2, #0
 80114ac:	701a      	strb	r2, [r3, #0]
        return true;
 80114ae:	2301      	movs	r3, #1
 80114b0:	e000      	b.n	80114b4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x198>
    }

    return false;
 80114b2:	2300      	movs	r3, #0
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3738      	adds	r7, #56	@ 0x38
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}
 80114bc:	2005a70c 	.word	0x2005a70c
 80114c0:	2005a710 	.word	0x2005a710
 80114c4:	2005a714 	.word	0x2005a714
 80114c8:	2005a704 	.word	0x2005a704
 80114cc:	2005a708 	.word	0x2005a708

080114d0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	4a05      	ldr	r2, [pc, #20]	@ (80114f0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	601a      	str	r2, [r3, #0]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7ff fee3 	bl	80112ac <_ZN8touchgfx15TouchControllerD1Ev>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	4618      	mov	r0, r3
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	0802ec84 	.word	0x0802ec84

080114f4 <_ZN20STM32TouchControllerD0Ev>:
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f7ff ffe7 	bl	80114d0 <_ZN20STM32TouchControllerD1Ev>
 8011502:	2104      	movs	r1, #4
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f01a fb2c 	bl	802bb62 <_ZdlPvj>
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4618      	mov	r0, r3
 801150e:	3708      	adds	r7, #8
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8011514:	b480      	push	{r7}
 8011516:	af00      	add	r7, sp, #0

}
 8011518:	bf00      	nop
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr
	...

08011524 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8011524:	b480      	push	{r7}
 8011526:	b083      	sub	sp, #12
 8011528:	af00      	add	r7, sp, #0
 801152a:	4603      	mov	r3, r0
 801152c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801152e:	79fb      	ldrb	r3, [r7, #7]
 8011530:	2b03      	cmp	r3, #3
 8011532:	d80c      	bhi.n	801154e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8011534:	a201      	add	r2, pc, #4	@ (adr r2, 801153c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8011536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801153a:	bf00      	nop
 801153c:	0801154d 	.word	0x0801154d
 8011540:	0801154d 	.word	0x0801154d
 8011544:	0801154d 	.word	0x0801154d
 8011548:	0801154d 	.word	0x0801154d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 801154c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 801154e:	bf00      	nop
 8011550:	370c      	adds	r7, #12
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop

0801155c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
 8011562:	4603      	mov	r3, r0
 8011564:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011566:	79fb      	ldrb	r3, [r7, #7]
 8011568:	2b03      	cmp	r3, #3
 801156a:	d80c      	bhi.n	8011586 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 801156c:	a201      	add	r2, pc, #4	@ (adr r2, 8011574 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 801156e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011572:	bf00      	nop
 8011574:	08011585 	.word	0x08011585
 8011578:	08011585 	.word	0x08011585
 801157c:	08011585 	.word	0x08011585
 8011580:	08011585 	.word	0x08011585
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8011584:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8011586:	bf00      	nop
 8011588:	370c      	adds	r7, #12
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop

08011594 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
 801159a:	4603      	mov	r3, r0
 801159c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801159e:	79fb      	ldrb	r3, [r7, #7]
 80115a0:	2b03      	cmp	r3, #3
 80115a2:	d80c      	bhi.n	80115be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80115a4:	a201      	add	r2, pc, #4	@ (adr r2, 80115ac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80115a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115aa:	bf00      	nop
 80115ac:	080115bd 	.word	0x080115bd
 80115b0:	080115bd 	.word	0x080115bd
 80115b4:	080115bd 	.word	0x080115bd
 80115b8:	080115bd 	.word	0x080115bd
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80115bc:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80115be:	bf00      	nop
 80115c0:	370c      	adds	r7, #12
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr
 80115ca:	bf00      	nop

080115cc <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
    {
 80115d4:	4a04      	ldr	r2, [pc, #16]	@ (80115e8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	601a      	str	r2, [r3, #0]
    }
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4618      	mov	r0, r3
 80115de:	370c      	adds	r7, #12
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr
 80115e8:	0802f41c 	.word	0x0802f41c

080115ec <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b082      	sub	sp, #8
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
    }
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f7ff ffe9 	bl	80115cc <_ZN8touchgfx3HALD1Ev>
 80115fa:	2184      	movs	r1, #132	@ 0x84
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f01a fab0 	bl	802bb62 <_ZdlPvj>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	4618      	mov	r0, r3
 8011606:	3708      	adds	r7, #8
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	460b      	mov	r3, r1
 8011616:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	78fa      	ldrb	r2, [r7, #3]
 801161c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2201      	movs	r2, #1
 8011624:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8011628:	bf00      	nop
 801162a:	370c      	adds	r7, #12
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr

08011634 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	460b      	mov	r3, r1
 801163e:	807b      	strh	r3, [r7, #2]
 8011640:	4613      	mov	r3, r2
 8011642:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8011644:	4b0c      	ldr	r3, [pc, #48]	@ (8011678 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8011646:	881b      	ldrh	r3, [r3, #0]
 8011648:	887a      	ldrh	r2, [r7, #2]
 801164a:	429a      	cmp	r2, r3
 801164c:	d304      	bcc.n	8011658 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801164e:	4b0b      	ldr	r3, [pc, #44]	@ (801167c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	883a      	ldrh	r2, [r7, #0]
 8011654:	429a      	cmp	r2, r3
 8011656:	d205      	bcs.n	8011664 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8011658:	4b09      	ldr	r3, [pc, #36]	@ (8011680 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 801165a:	4a0a      	ldr	r2, [pc, #40]	@ (8011684 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 801165c:	21a3      	movs	r1, #163	@ 0xa3
 801165e:	480a      	ldr	r0, [pc, #40]	@ (8011688 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8011660:	f01b f974 	bl	802c94c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8011664:	4a09      	ldr	r2, [pc, #36]	@ (801168c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8011666:	887b      	ldrh	r3, [r7, #2]
 8011668:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 801166a:	4a09      	ldr	r2, [pc, #36]	@ (8011690 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 801166c:	883b      	ldrh	r3, [r7, #0]
 801166e:	8013      	strh	r3, [r2, #0]
    }
 8011670:	bf00      	nop
 8011672:	3708      	adds	r7, #8
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	2005ba74 	.word	0x2005ba74
 801167c:	2005ba76 	.word	0x2005ba76
 8011680:	0802e0c8 	.word	0x0802e0c8
 8011684:	0802e12c 	.word	0x0802e12c
 8011688:	0802e170 	.word	0x0802e170
 801168c:	2005ba7a 	.word	0x2005ba7a
 8011690:	2005ba7c 	.word	0x2005ba7c

08011694 <_ZN8touchgfx3HAL11submitGPU2DEv>:
    virtual void submitGPU2D()
 8011694:	b480      	push	{r7}
 8011696:	b083      	sub	sp, #12
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
    }
 801169c:	bf00      	nop
 801169e:	370c      	adds	r7, #12
 80116a0:	46bd      	mov	sp, r7
 80116a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a6:	4770      	bx	lr

080116a8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d009      	beq.n	80116ce <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	685a      	ldr	r2, [r3, #4]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	4610      	mov	r0, r2
 80116c8:	4798      	blx	r3
 80116ca:	4603      	mov	r3, r0
 80116cc:	e000      	b.n	80116d0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80116ce:	2300      	movs	r3, #0
    }
 80116d0:	4618      	mov	r0, r3
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}

080116d8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    }

    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f004 f85d 	bl	80157a0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	33bc      	adds	r3, #188	@ 0xbc
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	4798      	blx	r3
    }
 80116f2:	bf00      	nop
 80116f4:	3708      	adds	r7, #8
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}

080116fa <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80116fa:	b480      	push	{r7}
 80116fc:	b083      	sub	sp, #12
 80116fe:	af00      	add	r7, sp, #0
 8011700:	6078      	str	r0, [r7, #4]
 8011702:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8011704:	2300      	movs	r3, #0
    }
 8011706:	4618      	mov	r0, r3
 8011708:	370c      	adds	r7, #12
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr
	...

08011714 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	607a      	str	r2, [r7, #4]
 8011720:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d106      	bne.n	8011736 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8011728:	4b0f      	ldr	r3, [pc, #60]	@ (8011768 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 801172a:	4a10      	ldr	r2, [pc, #64]	@ (801176c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 801172c:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8011730:	480f      	ldr	r0, [pc, #60]	@ (8011770 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8011732:	f01b f90b 	bl	802c94c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	68ba      	ldr	r2, [r7, #8]
 801173a:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2b00      	cmp	r3, #0
 8011746:	bf14      	ite	ne
 8011748:	2301      	movne	r3, #1
 801174a:	2300      	moveq	r3, #0
 801174c:	b2da      	uxtb	r2, r3
 801174e:	4b09      	ldr	r3, [pc, #36]	@ (8011774 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8011750:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	3390      	adds	r3, #144	@ 0x90
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	6839      	ldr	r1, [r7, #0]
 801175c:	68f8      	ldr	r0, [r7, #12]
 801175e:	4798      	blx	r3
    }
 8011760:	bf00      	nop
 8011762:	3710      	adds	r7, #16
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	0802e1b4 	.word	0x0802e1b4
 801176c:	0802e1ec 	.word	0x0802e1ec
 8011770:	0802e170 	.word	0x0802e170
 8011774:	2005ba7e 	.word	0x2005ba7e

08011778 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8011778:	b480      	push	{r7}
 801177a:	b083      	sub	sp, #12
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
 8011780:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	683a      	ldr	r2, [r7, #0]
 8011786:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	bf14      	ite	ne
 801178e:	2301      	movne	r3, #1
 8011790:	2300      	moveq	r3, #0
 8011792:	b2da      	uxtb	r2, r3
 8011794:	4b03      	ldr	r3, [pc, #12]	@ (80117a4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8011796:	701a      	strb	r2, [r3, #0]
    }
 8011798:	bf00      	nop
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr
 80117a4:	2005ba7f 	.word	0x2005ba7f

080117a8 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     * Only applicable on LTDC systems and when the partial framebuffer strategy is
     * enabled.
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	460b      	mov	r3, r1
 80117b2:	807b      	strh	r3, [r7, #2]
    {
    }
 80117b4:	bf00      	nop
 80117b6:	370c      	adds	r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80117c8:	2300      	movs	r3, #0
    }
 80117ca:	4618      	mov	r0, r3
 80117cc:	370c      	adds	r7, #12
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr

080117d6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80117d6:	b580      	push	{r7, lr}
 80117d8:	b082      	sub	sp, #8
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
 80117de:	460b      	mov	r3, r1
 80117e0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d004      	beq.n	80117f4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117ee:	887a      	ldrh	r2, [r7, #2]
 80117f0:	4610      	mov	r0, r2
 80117f2:	4798      	blx	r3
        }
    }
 80117f4:	bf00      	nop
 80117f6:	3708      	adds	r7, #8
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80117fc:	b480      	push	{r7}
 80117fe:	b083      	sub	sp, #12
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8011804:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 8011808:	4618      	mov	r0, r3
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	685a      	ldr	r2, [r3, #4]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	685b      	ldr	r3, [r3, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	3318      	adds	r3, #24
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	4610      	mov	r0, r2
 801182c:	4798      	blx	r3
 801182e:	4603      	mov	r3, r0
    }
 8011830:	4618      	mov	r0, r3
 8011832:	3708      	adds	r7, #8
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}

08011838 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This occurrence will lead to tearing on the display.
     *
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
 8011838:	b480      	push	{r7}
 801183a:	b083      	sub	sp, #12
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
    {
    }
 8011840:	bf00      	nop
 8011842:	370c      	adds	r7, #12
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr

0801184c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 8011854:	4b0e      	ldr	r3, [pc, #56]	@ (8011890 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d00c      	beq.n	8011876 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	3334      	adds	r3, #52	@ 0x34
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	4798      	blx	r3
 8011868:	4602      	mov	r2, r0
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801186e:	429a      	cmp	r2, r3
 8011870:	d101      	bne.n	8011876 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8011872:	2301      	movs	r3, #1
 8011874:	e000      	b.n	8011878 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 8011876:	2300      	movs	r3, #0
 8011878:	2b00      	cmp	r3, #0
 801187a:	d002      	beq.n	8011882 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011880:	e001      	b.n	8011886 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8011886:	4618      	mov	r0, r3
 8011888:	3708      	adds	r7, #8
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}
 801188e:	bf00      	nop
 8011890:	2005ba7e 	.word	0x2005ba7e

08011894 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8011894:	b480      	push	{r7}
 8011896:	b085      	sub	sp, #20
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d011      	beq.n	80118d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80118ac:	4b14      	ldr	r3, [pc, #80]	@ (8011900 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d11e      	bne.n	80118f2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80118b4:	4b13      	ldr	r3, [pc, #76]	@ (8011904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80118b6:	881b      	ldrh	r3, [r3, #0]
 80118b8:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80118ba:	4b13      	ldr	r3, [pc, #76]	@ (8011908 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80118bc:	881a      	ldrh	r2, [r3, #0]
 80118be:	4b11      	ldr	r3, [pc, #68]	@ (8011904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80118c0:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80118c2:	4a11      	ldr	r2, [pc, #68]	@ (8011908 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80118c4:	89bb      	ldrh	r3, [r7, #12]
 80118c6:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80118c8:	4b0d      	ldr	r3, [pc, #52]	@ (8011900 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80118ca:	2201      	movs	r2, #1
 80118cc:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80118ce:	e010      	b.n	80118f2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80118d0:	4b0b      	ldr	r3, [pc, #44]	@ (8011900 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d00c      	beq.n	80118f2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80118d8:	4b0a      	ldr	r3, [pc, #40]	@ (8011904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80118da:	881b      	ldrh	r3, [r3, #0]
 80118dc:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80118de:	4b0a      	ldr	r3, [pc, #40]	@ (8011908 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80118e0:	881a      	ldrh	r2, [r3, #0]
 80118e2:	4b08      	ldr	r3, [pc, #32]	@ (8011904 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80118e4:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80118e6:	4a08      	ldr	r2, [pc, #32]	@ (8011908 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80118e8:	89fb      	ldrh	r3, [r7, #14]
 80118ea:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80118ec:	4b04      	ldr	r3, [pc, #16]	@ (8011900 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80118ee:	2200      	movs	r2, #0
 80118f0:	701a      	strb	r2, [r3, #0]
    }
 80118f2:	bf00      	nop
 80118f4:	3714      	adds	r7, #20
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	2005ba78 	.word	0x2005ba78
 8011904:	2005ba76 	.word	0x2005ba76
 8011908:	2005ba74 	.word	0x2005ba74

0801190c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
    {
    }
 8011914:	bf00      	nop
 8011916:	370c      	adds	r7, #12
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
    {
    }
 8011928:	bf00      	nop
 801192a:	370c      	adds	r7, #12
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Invalidate texture cache(s).
     *
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
 8011934:	b480      	push	{r7}
 8011936:	b083      	sub	sp, #12
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
    {
    }
 801193c:	bf00      	nop
 801193e:	370c      	adds	r7, #12
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	4618      	mov	r0, r3
 8011954:	f003 f951 	bl	8014bfa <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8011958:	bf00      	nop
 801195a:	3708      	adds	r7, #8
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}

08011960 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8011960:	b580      	push	{r7, lr}
 8011962:	b082      	sub	sp, #8
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	4a05      	ldr	r2, [pc, #20]	@ (8011980 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	601a      	str	r2, [r3, #0]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	4618      	mov	r0, r3
 8011972:	f7ff fe2b 	bl	80115cc <_ZN8touchgfx3HALD1Ev>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	4618      	mov	r0, r3
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	0802f034 	.word	0x0802f034

08011984 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8011984:	b580      	push	{r7, lr}
 8011986:	b082      	sub	sp, #8
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f7ff ffe7 	bl	8011960 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011992:	2184      	movs	r1, #132	@ 0x84
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f01a f8e4 	bl	802bb62 <_ZdlPvj>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	4618      	mov	r0, r3
 801199e:	3708      	adds	r7, #8
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7ff ffca 	bl	8011948 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80119b4:	bf00      	nop
 80119b6:	3708      	adds	r7, #8
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <_ZN11TouchGFXHAL10initializeEv>:
#include <touchgfx/hal/GPIO.hpp>

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b082      	sub	sp, #8
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    printf("ICNA3306_Init\r\n");
 80119c4:	4806      	ldr	r0, [pc, #24]	@ (80119e0 <_ZN11TouchGFXHAL10initializeEv+0x24>)
 80119c6:	f01b f9ed 	bl	802cda4 <puts>

    TouchGFXGeneratedHAL::initialize();
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4618      	mov	r0, r3
 80119ce:	f002 f8c3 	bl	8013b58 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    // setAnimationStorage((void *)animationBuffer); // Add animation storage
    ICNA3306_Init();
 80119d2:	f7ef fa11 	bl	8000df8 <ICNA3306_Init>
}
 80119d6:	bf00      	nop
 80119d8:	3708      	adds	r7, #8
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	bf00      	nop
 80119e0:	0802e23c 	.word	0x0802e23c

080119e4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t *TouchGFXHAL::getTFTFrameBuffer() const
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	4618      	mov	r0, r3
 80119f0:	f002 f91c 	bl	8013c2c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80119f4:	4603      	mov	r3, r0
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3708      	adds	r7, #8
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}

080119fe <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t *address)
{
 80119fe:	b580      	push	{r7, lr}
 8011a00:	b082      	sub	sp, #8
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
 8011a06:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6839      	ldr	r1, [r7, #0]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f002 f91b 	bl	8013c48 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8011a12:	bf00      	nop
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
	...

08011a1c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect &rect)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b08a      	sub	sp, #40	@ 0x28
 8011a20:	af02      	add	r7, sp, #8
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp
    // printf("fluashBuffer\r\n");
    uint8_t *fbPtr = (uint8_t *)getClientFrameBuffer();
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7ff ff0f 	bl	801184c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011a2e:	6138      	str	r0, [r7, #16]
    for (size_t row = 0; row < rect.height; row++)
 8011a30:	2300      	movs	r3, #0
 8011a32:	61fb      	str	r3, [r7, #28]
 8011a34:	e030      	b.n	8011a98 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x7c>
    {
        uint8_t *pixel = fbPtr + ((rect.y + row) * 240 + rect.x) * 2;
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	69fb      	ldr	r3, [r7, #28]
 8011a40:	441a      	add	r2, r3
 8011a42:	4613      	mov	r3, r2
 8011a44:	011b      	lsls	r3, r3, #4
 8011a46:	1a9b      	subs	r3, r3, r2
 8011a48:	011b      	lsls	r3, r3, #4
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a52:	4413      	add	r3, r2
 8011a54:	005b      	lsls	r3, r3, #1
 8011a56:	693a      	ldr	r2, [r7, #16]
 8011a58:	4413      	add	r3, r2
 8011a5a:	61bb      	str	r3, [r7, #24]
        for (size_t col = 0; col < rect.width; col++)
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	617b      	str	r3, [r7, #20]
 8011a60:	e010      	b.n	8011a84 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x68>
        {
            uint8_t temp = pixel[0];
 8011a62:	69bb      	ldr	r3, [r7, #24]
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	73fb      	strb	r3, [r7, #15]
            pixel[0] = pixel[1];
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	785a      	ldrb	r2, [r3, #1]
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	701a      	strb	r2, [r3, #0]
            pixel[1] = temp;
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	3301      	adds	r3, #1
 8011a74:	7bfa      	ldrb	r2, [r7, #15]
 8011a76:	701a      	strb	r2, [r3, #0]
            pixel += 2;
 8011a78:	69bb      	ldr	r3, [r7, #24]
 8011a7a:	3302      	adds	r3, #2
 8011a7c:	61bb      	str	r3, [r7, #24]
        for (size_t col = 0; col < rect.width; col++)
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	3301      	adds	r3, #1
 8011a82:	617b      	str	r3, [r7, #20]
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	d3e7      	bcc.n	8011a62 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x46>
    for (size_t row = 0; row < rect.height; row++)
 8011a92:	69fb      	ldr	r3, [r7, #28]
 8011a94:	3301      	adds	r3, #1
 8011a96:	61fb      	str	r3, [r7, #28]
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011a9e:	461a      	mov	r2, r3
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d3c7      	bcc.n	8011a36 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1a>
        }
    }
    // printf("fluashBuffer\r\n");
    ICNA3306_DrawBuffer(0, 0, 240, 296, fbPtr, (240 * 296) * 2);
 8011aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8011ad0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0xb4>)
 8011aa8:	9301      	str	r3, [sp, #4]
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8011ab2:	22f0      	movs	r2, #240	@ 0xf0
 8011ab4:	2100      	movs	r1, #0
 8011ab6:	2000      	movs	r0, #0
 8011ab8:	f7ef f940 	bl	8000d3c <ICNA3306_DrawBuffer>

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6839      	ldr	r1, [r7, #0]
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f002 f8cc 	bl	8013c5e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8011ac6:	bf00      	nop
 8011ac8:	3720      	adds	r7, #32
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	00022b00 	.word	0x00022b00

08011ad4 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src, uint32_t numBytes)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	60f8      	str	r0, [r7, #12]
 8011adc:	60b9      	str	r1, [r7, #8]
 8011ade:	607a      	str	r2, [r7, #4]
 8011ae0:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8011ae2:	68f8      	ldr	r0, [r7, #12]
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	68b9      	ldr	r1, [r7, #8]
 8011aea:	f002 f8c6 	bl	8013c7a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8011aee:	4603      	mov	r3, r0
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	4618      	mov	r0, r3
 8011b04:	f002 f84c 	bl	8013ba0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011b08:	bf00      	nop
 8011b0a:	3708      	adds	r7, #8
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}

08011b10 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f002 f84c 	bl	8013bb8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8011b20:	bf00      	nop
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	4618      	mov	r0, r3
 8011b34:	f002 f84b 	bl	8013bce <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8011b38:	bf00      	nop
 8011b3a:	3708      	adds	r7, #8
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f002 f84a 	bl	8013be4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011b50:	bf00      	nop
 8011b52:	3708      	adds	r7, #8
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
    //printf("TouchGFX beginFrame\n");
    return TouchGFXGeneratedHAL::beginFrame();
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	4618      	mov	r0, r3
 8011b64:	f002 f848 	bl	8013bf8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8011b68:	4603      	mov	r3, r0
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3708      	adds	r7, #8
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b082      	sub	sp, #8
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
    //printf("TouchGFX endFrame\n");
    TouchGFXGeneratedHAL::endFrame();
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f002 f848 	bl	8013c12 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8011b82:	bf00      	nop
 8011b84:	3708      	adds	r7, #8
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}

08011b8a <touchgfx_tim_vsync>:
extern "C" void touchgfx_tim_vsync(void)
{
 8011b8a:	b580      	push	{r7, lr}
 8011b8c:	af00      	add	r7, sp, #0
    OSWrappers::signalVSync();
 8011b8e:	f000 f88b 	bl	8011ca8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
    // printf("5555\r\n");
}
 8011b92:	bf00      	nop
 8011b94:	bd80      	pop	{r7, pc}
	...

08011b98 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	4a05      	ldr	r2, [pc, #20]	@ (8011bb8 <_ZN11TouchGFXHALD1Ev+0x20>)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	601a      	str	r2, [r3, #0]
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7ff fed9 	bl	8011960 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3708      	adds	r7, #8
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	0802ecb4 	.word	0x0802ecb4

08011bbc <_ZN11TouchGFXHALD0Ev>:
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f7ff ffe7 	bl	8011b98 <_ZN11TouchGFXHALD1Ev>
 8011bca:	2184      	movs	r1, #132	@ 0x84
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f019 ffc8 	bl	802bb62 <_ZdlPvj>
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3708      	adds	r7, #8
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8011be0:	2200      	movs	r2, #0
 8011be2:	2101      	movs	r1, #1
 8011be4:	2001      	movs	r0, #1
 8011be6:	f7fa f80d 	bl	800bc04 <osSemaphoreNew>
 8011bea:	4603      	mov	r3, r0
 8011bec:	4a0f      	ldr	r2, [pc, #60]	@ (8011c2c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011bee:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8011bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8011c2c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d105      	bne.n	8011c04 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8011bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8011c30 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8011bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8011c34 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011bfc:	2128      	movs	r1, #40	@ 0x28
 8011bfe:	480e      	ldr	r0, [pc, #56]	@ (8011c38 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011c00:	f01a fea4 	bl	802c94c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8011c04:	2200      	movs	r2, #0
 8011c06:	2104      	movs	r1, #4
 8011c08:	2001      	movs	r0, #1
 8011c0a:	f7fa f90d 	bl	800be28 <osMessageQueueNew>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	4a0a      	ldr	r2, [pc, #40]	@ (8011c3c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8011c12:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8011c14:	4b09      	ldr	r3, [pc, #36]	@ (8011c3c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d105      	bne.n	8011c28 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8011c1c:	4b08      	ldr	r3, [pc, #32]	@ (8011c40 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8011c1e:	4a05      	ldr	r2, [pc, #20]	@ (8011c34 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011c20:	212c      	movs	r1, #44	@ 0x2c
 8011c22:	4805      	ldr	r0, [pc, #20]	@ (8011c38 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011c24:	f01a fe92 	bl	802c94c <__assert_func>
}
 8011c28:	bf00      	nop
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	2005a718 	.word	0x2005a718
 8011c30:	0802e24c 	.word	0x0802e24c
 8011c34:	0802e298 	.word	0x0802e298
 8011c38:	0802e2c8 	.word	0x0802e2c8
 8011c3c:	2005a71c 	.word	0x2005a71c
 8011c40:	0802e2f4 	.word	0x0802e2f4

08011c44 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8011c48:	4b04      	ldr	r3, [pc, #16]	@ (8011c5c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7fa f85f 	bl	800bd14 <osSemaphoreAcquire>
}
 8011c56:	bf00      	nop
 8011c58:	bd80      	pop	{r7, pc}
 8011c5a:	bf00      	nop
 8011c5c:	2005a718 	.word	0x2005a718

08011c60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011c64:	4b03      	ldr	r3, [pc, #12]	@ (8011c74 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7fa f89f 	bl	800bdac <osSemaphoreRelease>
}
 8011c6e:	bf00      	nop
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	2005a718 	.word	0x2005a718

08011c78 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8011c7c:	4b03      	ldr	r3, [pc, #12]	@ (8011c8c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	2100      	movs	r1, #0
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7fa f846 	bl	800bd14 <osSemaphoreAcquire>
}
 8011c88:	bf00      	nop
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	2005a718 	.word	0x2005a718

08011c90 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011c94:	4b03      	ldr	r3, [pc, #12]	@ (8011ca4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7fa f887 	bl	800bdac <osSemaphoreRelease>
}
 8011c9e:	bf00      	nop
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	2005a718 	.word	0x2005a718

08011ca8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8011cac:	4b04      	ldr	r3, [pc, #16]	@ (8011cc0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8011cae:	6818      	ldr	r0, [r3, #0]
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	4903      	ldr	r1, [pc, #12]	@ (8011cc4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8011cb6:	f7fa f929 	bl	800bf0c <osMessageQueuePut>
}
 8011cba:	bf00      	nop
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	2005a71c 	.word	0x2005a71c
 8011cc4:	20000014 	.word	0x20000014

08011cc8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b082      	sub	sp, #8
 8011ccc:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8011cce:	4b09      	ldr	r3, [pc, #36]	@ (8011cf4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011cd0:	6818      	ldr	r0, [r3, #0]
 8011cd2:	1d39      	adds	r1, r7, #4
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	f7fa f972 	bl	800bfc0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8011cdc:	4b05      	ldr	r3, [pc, #20]	@ (8011cf4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011cde:	6818      	ldr	r0, [r3, #0]
 8011ce0:	1d39      	adds	r1, r7, #4
 8011ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	f7fa f96a 	bl	800bfc0 <osMessageQueueGet>
}
 8011cec:	bf00      	nop
 8011cee:	3708      	adds	r7, #8
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}
 8011cf4:	2005a71c 	.word	0x2005a71c

08011cf8 <__NVIC_EnableIRQ>:
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	4603      	mov	r3, r0
 8011d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	db0b      	blt.n	8011d22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011d0a:	79fb      	ldrb	r3, [r7, #7]
 8011d0c:	f003 021f 	and.w	r2, r3, #31
 8011d10:	4907      	ldr	r1, [pc, #28]	@ (8011d30 <__NVIC_EnableIRQ+0x38>)
 8011d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d16:	095b      	lsrs	r3, r3, #5
 8011d18:	2001      	movs	r0, #1
 8011d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8011d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011d22:	bf00      	nop
 8011d24:	370c      	adds	r7, #12
 8011d26:	46bd      	mov	sp, r7
 8011d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2c:	4770      	bx	lr
 8011d2e:	bf00      	nop
 8011d30:	e000e100 	.word	0xe000e100

08011d34 <__NVIC_DisableIRQ>:
{
 8011d34:	b480      	push	{r7}
 8011d36:	b083      	sub	sp, #12
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	db12      	blt.n	8011d6c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011d46:	79fb      	ldrb	r3, [r7, #7]
 8011d48:	f003 021f 	and.w	r2, r3, #31
 8011d4c:	490a      	ldr	r1, [pc, #40]	@ (8011d78 <__NVIC_DisableIRQ+0x44>)
 8011d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d52:	095b      	lsrs	r3, r3, #5
 8011d54:	2001      	movs	r0, #1
 8011d56:	fa00 f202 	lsl.w	r2, r0, r2
 8011d5a:	3320      	adds	r3, #32
 8011d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011d60:	f3bf 8f4f 	dsb	sy
}
 8011d64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011d66:	f3bf 8f6f 	isb	sy
}
 8011d6a:	bf00      	nop
}
 8011d6c:	bf00      	nop
 8011d6e:	370c      	adds	r7, #12
 8011d70:	46bd      	mov	sp, r7
 8011d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d76:	4770      	bx	lr
 8011d78:	e000e100 	.word	0xe000e100

08011d7c <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8011d7c:	b480      	push	{r7}
 8011d7e:	b083      	sub	sp, #12
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
        : color(0)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	601a      	str	r2, [r3, #0]
    }
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	370c      	adds	r7, #12
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8011d98:	b480      	push	{r7}
 8011d9a:	b083      	sub	sp, #12
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
        return color;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
    }
 8011da4:	4618      	mov	r0, r3
 8011da6:	370c      	adds	r7, #12
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr

08011db0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8011db0:	b480      	push	{r7}
 8011db2:	b083      	sub	sp, #12
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
    {
 8011db8:	4a04      	ldr	r2, [pc, #16]	@ (8011dcc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	601a      	str	r2, [r3, #0]
    }
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	370c      	adds	r7, #12
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr
 8011dcc:	0802edf0 	.word	0x0802edf0

08011dd0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
    }
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f7ff ffe9 	bl	8011db0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011dde:	2104      	movs	r1, #4
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f019 febe 	bl	802bb62 <_ZdlPvj>
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	4618      	mov	r0, r3
 8011dea:	3708      	adds	r7, #8
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}

08011df0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b082      	sub	sp, #8
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	3344      	adds	r3, #68	@ 0x44
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	4798      	blx	r3
    }
 8011e04:	bf00      	nop
 8011e06:	3708      	adds	r7, #8
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8011e0c:	b480      	push	{r7}
 8011e0e:	b083      	sub	sp, #12
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
    {
 8011e14:	4a04      	ldr	r2, [pc, #16]	@ (8011e28 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	601a      	str	r2, [r3, #0]
    }
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	370c      	adds	r7, #12
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr
 8011e28:	0802f508 	.word	0x0802f508

08011e2c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
    }
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f7ff ffe9 	bl	8011e0c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011e3a:	210c      	movs	r1, #12
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f019 fe90 	bl	802bb62 <_ZdlPvj>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	4618      	mov	r0, r3
 8011e46:	3708      	adds	r7, #8
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8011e4c:	b480      	push	{r7}
 8011e4e:	b083      	sub	sp, #12
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8011e56:	4a09      	ldr	r2, [pc, #36]	@ (8011e7c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	601a      	str	r2, [r3, #0]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	683a      	ldr	r2, [r7, #0]
 8011e60:	605a      	str	r2, [r3, #4]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2200      	movs	r2, #0
 8011e66:	721a      	strb	r2, [r3, #8]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	725a      	strb	r2, [r3, #9]
    {
    }
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	4618      	mov	r0, r3
 8011e72:	370c      	adds	r7, #12
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr
 8011e7c:	0802f508 	.word	0x0802f508

08011e80 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8011e80:	b480      	push	{r7}
 8011e82:	b083      	sub	sp, #12
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8011e88:	2301      	movs	r3, #1
    }
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	370c      	adds	r7, #12
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e94:	4770      	bx	lr

08011e96 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8011e96:	b580      	push	{r7, lr}
 8011e98:	b082      	sub	sp, #8
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	3328      	adds	r3, #40	@ 0x28
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	4610      	mov	r0, r2
 8011eaa:	4798      	blx	r3
    }
 8011eac:	bf00      	nop
 8011eae:	3708      	adds	r7, #8
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	685a      	ldr	r2, [r3, #4]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	3314      	adds	r3, #20
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	4610      	mov	r0, r2
 8011ecc:	4798      	blx	r3
    }
 8011ece:	bf00      	nop
 8011ed0:	3708      	adds	r7, #8
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}

08011ed6 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8011ed6:	b580      	push	{r7, lr}
 8011ed8:	b082      	sub	sp, #8
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8011ede:	f7fd fa99 	bl	800f414 <_ZN8touchgfx3HAL11getInstanceEv>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7ff ffe5 	bl	8011eb4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8011eea:	bf00      	nop
 8011eec:	3708      	adds	r7, #8
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}

08011ef2 <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 8011ef2:	b480      	push	{r7}
 8011ef4:	b083      	sub	sp, #12
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        while (1)
 8011efa:	bf00      	nop
 8011efc:	e7fd      	b.n	8011efa <DMA2D_XferErrorCallback+0x8>
	...

08011f00 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	4a05      	ldr	r2, [pc, #20]	@ (8011f20 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	601a      	str	r2, [r3, #0]
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7ff ff4d 	bl	8011db0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3708      	adds	r7, #8
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	0802f558 	.word	0x0802f558

08011f24 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b082      	sub	sp, #8
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f7ff ffe7 	bl	8011f00 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011f32:	2114      	movs	r1, #20
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f019 fe14 	bl	802bb62 <_ZdlPvj>
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3708      	adds	r7, #8
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	330c      	adds	r3, #12
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7ff ff13 	bl	8011d7c <_ZN8touchgfx9colortypeC1Ev>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <_ZN8STM32DMAC1Ev>:

        }
    }
}

STM32DMA::STM32DMA()
 8011f60:	b5b0      	push	{r4, r5, r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8011f68:	687a      	ldr	r2, [r7, #4]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	330c      	adds	r3, #12
 8011f6e:	4619      	mov	r1, r3
 8011f70:	4610      	mov	r0, r2
 8011f72:	f7ff ff6b 	bl	8011e4c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8011f76:	4a0e      	ldr	r2, [pc, #56]	@ (8011fb0 <_ZN8STM32DMAC1Ev+0x50>)
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	601a      	str	r2, [r3, #0]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f103 000c 	add.w	r0, r3, #12
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	3320      	adds	r3, #32
 8011f86:	2260      	movs	r2, #96	@ 0x60
 8011f88:	4619      	mov	r1, r3
 8011f8a:	f003 fd5b 	bl	8015a44 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	3320      	adds	r3, #32
 8011f92:	245f      	movs	r4, #95	@ 0x5f
 8011f94:	461d      	mov	r5, r3
 8011f96:	e004      	b.n	8011fa2 <_ZN8STM32DMAC1Ev+0x42>
 8011f98:	4628      	mov	r0, r5
 8011f9a:	f7ff ffd3 	bl	8011f44 <_ZN8touchgfx6BlitOpC1Ev>
 8011f9e:	3c01      	subs	r4, #1
 8011fa0:	3524      	adds	r5, #36	@ 0x24
 8011fa2:	2c00      	cmp	r4, #0
 8011fa4:	daf8      	bge.n	8011f98 <_ZN8STM32DMAC1Ev+0x38>
{
}
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3708      	adds	r7, #8
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bdb0      	pop	{r4, r5, r7, pc}
 8011fb0:	0802eda0 	.word	0x0802eda0

08011fb4 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	4a09      	ldr	r2, [pc, #36]	@ (8011fe4 <_ZN8STM32DMAD1Ev+0x30>)
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8011fc2:	2076      	movs	r0, #118	@ 0x76
 8011fc4:	f7ff feb6 	bl	8011d34 <__NVIC_DisableIRQ>
}
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	330c      	adds	r3, #12
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7ff ff97 	bl	8011f00 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7ff ff19 	bl	8011e0c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	0802eda0 	.word	0x0802eda0

08011fe8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
}
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7ff ffdf 	bl	8011fb4 <_ZN8STM32DMAD1Ev>
 8011ff6:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f019 fdb1 	bl	802bb62 <_ZdlPvj>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	4618      	mov	r0, r3
 8012004:	3708      	adds	r7, #8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
	...

0801200c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b084      	sub	sp, #16
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8012014:	4b13      	ldr	r3, [pc, #76]	@ (8012064 <_ZN8STM32DMA10initializeEv+0x58>)
 8012016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801201a:	4a12      	ldr	r2, [pc, #72]	@ (8012064 <_ZN8STM32DMA10initializeEv+0x58>)
 801201c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012020:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8012024:	4b0f      	ldr	r3, [pc, #60]	@ (8012064 <_ZN8STM32DMA10initializeEv+0x58>)
 8012026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801202a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801202e:	60fb      	str	r3, [r7, #12]
 8012030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8012032:	4b0c      	ldr	r3, [pc, #48]	@ (8012064 <_ZN8STM32DMA10initializeEv+0x58>)
 8012034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012036:	4a0b      	ldr	r2, [pc, #44]	@ (8012064 <_ZN8STM32DMA10initializeEv+0x58>)
 8012038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801203c:	6613      	str	r3, [r2, #96]	@ 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 801203e:	4b09      	ldr	r3, [pc, #36]	@ (8012064 <_ZN8STM32DMA10initializeEv+0x58>)
 8012040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012042:	4a08      	ldr	r2, [pc, #32]	@ (8012064 <_ZN8STM32DMA10initializeEv+0x58>)
 8012044:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012048:	6613      	str	r3, [r2, #96]	@ 0x60

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801204a:	4b07      	ldr	r3, [pc, #28]	@ (8012068 <_ZN8STM32DMA10initializeEv+0x5c>)
 801204c:	4a07      	ldr	r2, [pc, #28]	@ (801206c <_ZN8STM32DMA10initializeEv+0x60>)
 801204e:	621a      	str	r2, [r3, #32]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8012050:	4b05      	ldr	r3, [pc, #20]	@ (8012068 <_ZN8STM32DMA10initializeEv+0x5c>)
 8012052:	4a07      	ldr	r2, [pc, #28]	@ (8012070 <_ZN8STM32DMA10initializeEv+0x64>)
 8012054:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8012056:	2076      	movs	r0, #118	@ 0x76
 8012058:	f7ff fe4e 	bl	8011cf8 <__NVIC_EnableIRQ>
}
 801205c:	bf00      	nop
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}
 8012064:	46020c00 	.word	0x46020c00
 8012068:	200459d0 	.word	0x200459d0
 801206c:	08011ed7 	.word	0x08011ed7
 8012070:	08011ef3 	.word	0x08011ef3

08012074 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b084      	sub	sp, #16
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	460b      	mov	r3, r1
 801207e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012080:	2300      	movs	r3, #0
 8012082:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012084:	78fb      	ldrb	r3, [r7, #3]
 8012086:	2b0b      	cmp	r3, #11
 8012088:	d826      	bhi.n	80120d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 801208a:	a201      	add	r2, pc, #4	@ (adr r2, 8012090 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801208c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012090:	080120cd 	.word	0x080120cd
 8012094:	080120c7 	.word	0x080120c7
 8012098:	080120c1 	.word	0x080120c1
 801209c:	080120d9 	.word	0x080120d9
 80120a0:	080120d9 	.word	0x080120d9
 80120a4:	080120d9 	.word	0x080120d9
 80120a8:	080120d9 	.word	0x080120d9
 80120ac:	080120d3 	.word	0x080120d3
 80120b0:	080120d3 	.word	0x080120d3
 80120b4:	080120d3 	.word	0x080120d3
 80120b8:	080120d3 	.word	0x080120d3
 80120bc:	080120d3 	.word	0x080120d3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80120c0:	2300      	movs	r3, #0
 80120c2:	60fb      	str	r3, [r7, #12]
        break;
 80120c4:	e00e      	b.n	80120e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80120c6:	2301      	movs	r3, #1
 80120c8:	60fb      	str	r3, [r7, #12]
        break;
 80120ca:	e00b      	b.n	80120e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80120cc:	2302      	movs	r3, #2
 80120ce:	60fb      	str	r3, [r7, #12]
        break;
 80120d0:	e008      	b.n	80120e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80120d2:	2305      	movs	r3, #5
 80120d4:	60fb      	str	r3, [r7, #12]
        break;
 80120d6:	e005      	b.n	80120e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80120d8:	4b05      	ldr	r3, [pc, #20]	@ (80120f0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80120da:	4a06      	ldr	r2, [pc, #24]	@ (80120f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80120dc:	216f      	movs	r1, #111	@ 0x6f
 80120de:	4806      	ldr	r0, [pc, #24]	@ (80120f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80120e0:	f01a fc34 	bl	802c94c <__assert_func>
        break;
    }

    return dma2dColorMode;
 80120e4:	68fb      	ldr	r3, [r7, #12]
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3710      	adds	r7, #16
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	bf00      	nop
 80120f0:	0802e338 	.word	0x0802e338
 80120f4:	0802e354 	.word	0x0802e354
 80120f8:	0802e3a0 	.word	0x0802e3a0

080120fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b084      	sub	sp, #16
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	460b      	mov	r3, r1
 8012106:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012108:	2300      	movs	r3, #0
 801210a:	60fb      	str	r3, [r7, #12]

    switch (format)
 801210c:	78fb      	ldrb	r3, [r7, #3]
 801210e:	2b0a      	cmp	r3, #10
 8012110:	d821      	bhi.n	8012156 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8012112:	a201      	add	r2, pc, #4	@ (adr r2, 8012118 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012118:	08012151 	.word	0x08012151
 801211c:	0801214b 	.word	0x0801214b
 8012120:	08012145 	.word	0x08012145
 8012124:	08012157 	.word	0x08012157
 8012128:	08012157 	.word	0x08012157
 801212c:	08012157 	.word	0x08012157
 8012130:	08012157 	.word	0x08012157
 8012134:	0801214b 	.word	0x0801214b
 8012138:	0801214b 	.word	0x0801214b
 801213c:	0801214b 	.word	0x0801214b
 8012140:	0801214b 	.word	0x0801214b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012144:	2300      	movs	r3, #0
 8012146:	60fb      	str	r3, [r7, #12]
        break;
 8012148:	e00b      	b.n	8012162 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 801214a:	2301      	movs	r3, #1
 801214c:	60fb      	str	r3, [r7, #12]
        break;
 801214e:	e008      	b.n	8012162 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8012150:	2302      	movs	r3, #2
 8012152:	60fb      	str	r3, [r7, #12]
        break;
 8012154:	e005      	b.n	8012162 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012156:	4b05      	ldr	r3, [pc, #20]	@ (801216c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8012158:	4a05      	ldr	r2, [pc, #20]	@ (8012170 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 801215a:	2190      	movs	r1, #144	@ 0x90
 801215c:	4805      	ldr	r0, [pc, #20]	@ (8012174 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801215e:	f01a fbf5 	bl	802c94c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012162:	68fb      	ldr	r3, [r7, #12]
}
 8012164:	4618      	mov	r0, r3
 8012166:	3710      	adds	r7, #16
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}
 801216c:	0802e338 	.word	0x0802e338
 8012170:	0802e3cc 	.word	0x0802e3cc
 8012174:	0802e3a0 	.word	0x0802e3a0

08012178 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8012178:	b480      	push	{r7}
 801217a:	b083      	sub	sp, #12
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8012180:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 8012184:	4618      	mov	r0, r3
 8012186:	370c      	adds	r7, #12
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr

08012190 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012190:	b590      	push	{r4, r7, lr}
 8012192:	b089      	sub	sp, #36	@ 0x24
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	7f5b      	ldrb	r3, [r3, #29]
 801219e:	4619      	mov	r1, r3
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f7ff ff67 	bl	8012074 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80121a6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	7f9b      	ldrb	r3, [r3, #30]
 80121ac:	4619      	mov	r1, r3
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f7ff ff60 	bl	8012074 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80121b4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	7f9b      	ldrb	r3, [r3, #30]
 80121ba:	4619      	mov	r1, r3
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7ff ff9d 	bl	80120fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80121c2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	8b5b      	ldrh	r3, [r3, #26]
 80121c8:	461a      	mov	r2, r3
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	8a9b      	ldrh	r3, [r3, #20]
 80121ce:	1ad2      	subs	r2, r2, r3
 80121d0:	4b97      	ldr	r3, [pc, #604]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80121d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	8b5b      	ldrh	r3, [r3, #26]
 80121d8:	461a      	mov	r2, r3
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	8a9b      	ldrh	r3, [r3, #20]
 80121de:	1ad2      	subs	r2, r2, r3
 80121e0:	4b93      	ldr	r3, [pc, #588]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80121e2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	8b1b      	ldrh	r3, [r3, #24]
 80121e8:	461a      	mov	r2, r3
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	8a9b      	ldrh	r3, [r3, #20]
 80121ee:	1ad2      	subs	r2, r2, r3
 80121f0:	4b8f      	ldr	r3, [pc, #572]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80121f2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80121f4:	4a8e      	ldr	r2, [pc, #568]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80121f6:	693b      	ldr	r3, [r7, #16]
 80121f8:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	8adb      	ldrh	r3, [r3, #22]
 80121fe:	461a      	mov	r2, r3
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	8a9b      	ldrh	r3, [r3, #20]
 8012204:	041b      	lsls	r3, r3, #16
 8012206:	431a      	orrs	r2, r3
 8012208:	4b89      	ldr	r3, [pc, #548]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801220a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	691a      	ldr	r2, [r3, #16]
 8012210:	4b87      	ldr	r3, [pc, #540]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012212:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	685a      	ldr	r2, [r3, #4]
 8012218:	4b85      	ldr	r3, [pc, #532]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801221a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012224:	d037      	beq.n	8012296 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8012226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801222a:	f200 80e4 	bhi.w	80123f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 801222e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012232:	d014      	beq.n	801225e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8012234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012238:	f200 80dd 	bhi.w	80123f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 801223c:	2b80      	cmp	r3, #128	@ 0x80
 801223e:	d05a      	beq.n	80122f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
 8012240:	2b80      	cmp	r3, #128	@ 0x80
 8012242:	f200 80d8 	bhi.w	80123f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8012246:	2b40      	cmp	r3, #64	@ 0x40
 8012248:	f000 80c1 	beq.w	80123ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
 801224c:	2b40      	cmp	r3, #64	@ 0x40
 801224e:	f200 80d2 	bhi.w	80123f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8012252:	2b04      	cmp	r3, #4
 8012254:	d03b      	beq.n	80122ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8012256:	2b20      	cmp	r3, #32
 8012258:	f000 80b9 	beq.w	80123ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
 801225c:	e0cb      	b.n	80123f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	7f1b      	ldrb	r3, [r3, #28]
 8012262:	061b      	lsls	r3, r3, #24
 8012264:	4a72      	ldr	r2, [pc, #456]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801226a:	f043 030a 	orr.w	r3, r3, #10
 801226e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	330c      	adds	r3, #12
 8012274:	4c6e      	ldr	r4, [pc, #440]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012276:	4618      	mov	r0, r3
 8012278:	f7ff fd8e 	bl	8011d98 <_ZNK8touchgfx9colortypecvmEv>
 801227c:	4603      	mov	r3, r0
 801227e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012280:	4a6b      	ldr	r2, [pc, #428]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	691a      	ldr	r2, [r3, #16]
 801228a:	4b69      	ldr	r3, [pc, #420]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801228c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801228e:	4b68      	ldr	r3, [pc, #416]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012290:	4a68      	ldr	r2, [pc, #416]	@ (8012434 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012292:	601a      	str	r2, [r3, #0]
        break;
 8012294:	e0c7      	b.n	8012426 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	7f1b      	ldrb	r3, [r3, #28]
 801229a:	061b      	lsls	r3, r3, #24
 801229c:	4a64      	ldr	r2, [pc, #400]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801229e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122a2:	f043 0309 	orr.w	r3, r3, #9
 80122a6:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	330c      	adds	r3, #12
 80122ac:	4c60      	ldr	r4, [pc, #384]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7ff fd72 	bl	8011d98 <_ZNK8touchgfx9colortypecvmEv>
 80122b4:	4603      	mov	r3, r0
 80122b6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80122b8:	4a5d      	ldr	r2, [pc, #372]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	691a      	ldr	r2, [r3, #16]
 80122c2:	4b5b      	ldr	r3, [pc, #364]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122c4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80122c6:	4b5a      	ldr	r3, [pc, #360]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122c8:	4a5a      	ldr	r2, [pc, #360]	@ (8012434 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80122ca:	601a      	str	r2, [r3, #0]
        break;
 80122cc:	e0ab      	b.n	8012426 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	7f1b      	ldrb	r3, [r3, #28]
 80122d2:	061a      	lsls	r2, r3, #24
 80122d4:	69bb      	ldr	r3, [r7, #24]
 80122d6:	4313      	orrs	r3, r2
 80122d8:	4a55      	ldr	r2, [pc, #340]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122de:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80122e0:	4a53      	ldr	r2, [pc, #332]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	691a      	ldr	r2, [r3, #16]
 80122ea:	4b51      	ldr	r3, [pc, #324]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122ec:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80122ee:	4b50      	ldr	r3, [pc, #320]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122f0:	4a50      	ldr	r2, [pc, #320]	@ (8012434 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80122f2:	601a      	str	r2, [r3, #0]
        break;
 80122f4:	e097      	b.n	8012426 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 80122f6:	2301      	movs	r3, #1
 80122f8:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	689b      	ldr	r3, [r3, #8]
 80122fe:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	1d1a      	adds	r2, r3, #4
 8012304:	4b4a      	ldr	r3, [pc, #296]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012306:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	7f1b      	ldrb	r3, [r3, #28]
 801230c:	061a      	lsls	r2, r3, #24
 801230e:	69bb      	ldr	r3, [r7, #24]
 8012310:	4313      	orrs	r3, r2
 8012312:	4a47      	ldr	r2, [pc, #284]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012318:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801231a:	4a45      	ldr	r2, [pc, #276]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	691a      	ldr	r2, [r3, #16]
 8012324:	4b42      	ldr	r3, [pc, #264]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012326:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	881b      	ldrh	r3, [r3, #0]
 801232c:	b2db      	uxtb	r3, r3
 801232e:	2b00      	cmp	r3, #0
 8012330:	d002      	beq.n	8012338 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8012332:	2b01      	cmp	r3, #1
 8012334:	d00e      	beq.n	8012354 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>
 8012336:	e023      	b.n	8012380 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012338:	4b3d      	ldr	r3, [pc, #244]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801233a:	69db      	ldr	r3, [r3, #28]
 801233c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012340:	f023 0310 	bic.w	r3, r3, #16
 8012344:	68fa      	ldr	r2, [r7, #12]
 8012346:	8852      	ldrh	r2, [r2, #2]
 8012348:	3a01      	subs	r2, #1
 801234a:	0212      	lsls	r2, r2, #8
 801234c:	4938      	ldr	r1, [pc, #224]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801234e:	4313      	orrs	r3, r2
 8012350:	61cb      	str	r3, [r1, #28]
                break;
 8012352:	e01c      	b.n	801238e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	7f1b      	ldrb	r3, [r3, #28]
 8012358:	2bff      	cmp	r3, #255	@ 0xff
 801235a:	d101      	bne.n	8012360 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
                {
                    blend = false;
 801235c:	2300      	movs	r3, #0
 801235e:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012360:	4b33      	ldr	r3, [pc, #204]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012362:	69db      	ldr	r3, [r3, #28]
 8012364:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012368:	f023 0310 	bic.w	r3, r3, #16
 801236c:	68fa      	ldr	r2, [r7, #12]
 801236e:	8852      	ldrh	r2, [r2, #2]
 8012370:	3a01      	subs	r2, #1
 8012372:	0212      	lsls	r2, r2, #8
 8012374:	4313      	orrs	r3, r2
 8012376:	4a2e      	ldr	r2, [pc, #184]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012378:	f043 0310 	orr.w	r3, r3, #16
 801237c:	61d3      	str	r3, [r2, #28]
                break;
 801237e:	e006      	b.n	801238e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8012380:	4b2d      	ldr	r3, [pc, #180]	@ (8012438 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8012382:	4a2e      	ldr	r2, [pc, #184]	@ (801243c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8012384:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8012388:	482d      	ldr	r0, [pc, #180]	@ (8012440 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 801238a:	f01a fadf 	bl	802c94c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 801238e:	4b28      	ldr	r3, [pc, #160]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012390:	69db      	ldr	r3, [r3, #28]
 8012392:	4a27      	ldr	r2, [pc, #156]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012394:	f043 0320 	orr.w	r3, r3, #32
 8012398:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 801239a:	bf00      	nop
 801239c:	4b24      	ldr	r3, [pc, #144]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801239e:	69db      	ldr	r3, [r3, #28]
 80123a0:	f003 0320 	and.w	r3, r3, #32
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	bf14      	ite	ne
 80123a8:	2301      	movne	r3, #1
 80123aa:	2300      	moveq	r3, #0
 80123ac:	b2db      	uxtb	r3, r3
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d1f4      	bne.n	801239c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80123b2:	4b1f      	ldr	r3, [pc, #124]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123b4:	2210      	movs	r2, #16
 80123b6:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 80123b8:	7ffb      	ldrb	r3, [r7, #31]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d003      	beq.n	80123c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x236>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80123be:	4b1c      	ldr	r3, [pc, #112]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123c0:	4a1c      	ldr	r2, [pc, #112]	@ (8012434 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80123c2:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 80123c4:	e02f      	b.n	8012426 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80123c6:	4b1a      	ldr	r3, [pc, #104]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123c8:	4a1e      	ldr	r2, [pc, #120]	@ (8012444 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 80123ca:	601a      	str	r2, [r3, #0]
        break;
 80123cc:	e02b      	b.n	8012426 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	7f1b      	ldrb	r3, [r3, #28]
 80123d2:	061a      	lsls	r2, r3, #24
 80123d4:	69bb      	ldr	r3, [r7, #24]
 80123d6:	4313      	orrs	r3, r2
 80123d8:	4a15      	ldr	r2, [pc, #84]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80123de:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80123e0:	4a13      	ldr	r2, [pc, #76]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	691a      	ldr	r2, [r3, #16]
 80123ea:	4b11      	ldr	r3, [pc, #68]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123ec:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80123ee:	4b10      	ldr	r3, [pc, #64]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123f0:	4a10      	ldr	r2, [pc, #64]	@ (8012434 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80123f2:	601a      	str	r2, [r3, #0]
        break;
 80123f4:	e017      	b.n	8012426 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	7f1b      	ldrb	r3, [r3, #28]
 80123fa:	061a      	lsls	r2, r3, #24
 80123fc:	69bb      	ldr	r3, [r7, #24]
 80123fe:	4313      	orrs	r3, r2
 8012400:	4a0b      	ldr	r2, [pc, #44]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012406:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	7f5a      	ldrb	r2, [r3, #29]
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	7f9b      	ldrb	r3, [r3, #30]
 8012410:	429a      	cmp	r2, r3
 8012412:	d003      	beq.n	801241c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012414:	4b06      	ldr	r3, [pc, #24]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012416:	4a0b      	ldr	r2, [pc, #44]	@ (8012444 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8012418:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }
        break;
 801241a:	e003      	b.n	8012424 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801241c:	4b04      	ldr	r3, [pc, #16]	@ (8012430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801241e:	f242 3201 	movw	r2, #8961	@ 0x2301
 8012422:	601a      	str	r2, [r3, #0]
        break;
 8012424:	bf00      	nop
    }
}
 8012426:	bf00      	nop
 8012428:	3724      	adds	r7, #36	@ 0x24
 801242a:	46bd      	mov	sp, r7
 801242c:	bd90      	pop	{r4, r7, pc}
 801242e:	bf00      	nop
 8012430:	4002b000 	.word	0x4002b000
 8012434:	00022301 	.word	0x00022301
 8012438:	0802e418 	.word	0x0802e418
 801243c:	0802e434 	.word	0x0802e434
 8012440:	0802e3a0 	.word	0x0802e3a0
 8012444:	00012301 	.word	0x00012301

08012448 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8012448:	b590      	push	{r4, r7, lr}
 801244a:	b085      	sub	sp, #20
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	7f9b      	ldrb	r3, [r3, #30]
 8012456:	4619      	mov	r1, r3
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7ff fe4f 	bl	80120fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801245e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012460:	4a3b      	ldr	r2, [pc, #236]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	8adb      	ldrh	r3, [r3, #22]
 801246a:	461a      	mov	r2, r3
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	8a9b      	ldrh	r3, [r3, #20]
 8012470:	041b      	lsls	r3, r3, #16
 8012472:	431a      	orrs	r2, r3
 8012474:	4b36      	ldr	r3, [pc, #216]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012476:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	691a      	ldr	r2, [r3, #16]
 801247c:	4b34      	ldr	r3, [pc, #208]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801247e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	8b5b      	ldrh	r3, [r3, #26]
 8012484:	461a      	mov	r2, r3
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	8a9b      	ldrh	r3, [r3, #20]
 801248a:	1ad2      	subs	r2, r2, r3
 801248c:	4b30      	ldr	r3, [pc, #192]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801248e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	2b08      	cmp	r3, #8
 8012496:	d12f      	bne.n	80124f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	8b5b      	ldrh	r3, [r3, #26]
 801249c:	461a      	mov	r2, r3
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	8a9b      	ldrh	r3, [r3, #20]
 80124a2:	1ad2      	subs	r2, r2, r3
 80124a4:	4b2a      	ldr	r3, [pc, #168]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124a6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	8b5b      	ldrh	r3, [r3, #26]
 80124ac:	461a      	mov	r2, r3
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	8a9b      	ldrh	r3, [r3, #20]
 80124b2:	1ad2      	subs	r2, r2, r3
 80124b4:	4b26      	ldr	r3, [pc, #152]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124b6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80124b8:	4a25      	ldr	r2, [pc, #148]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	7f1b      	ldrb	r3, [r3, #28]
 80124c2:	061b      	lsls	r3, r3, #24
 80124c4:	4a22      	ldr	r2, [pc, #136]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80124ca:	f043 0309 	orr.w	r3, r3, #9
 80124ce:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	330c      	adds	r3, #12
 80124d4:	4c1e      	ldr	r4, [pc, #120]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7ff fc5e 	bl	8011d98 <_ZNK8touchgfx9colortypecvmEv>
 80124dc:	4603      	mov	r3, r0
 80124de:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	691a      	ldr	r2, [r3, #16]
 80124e4:	4b1a      	ldr	r3, [pc, #104]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124e6:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	691a      	ldr	r2, [r3, #16]
 80124ec:	4b18      	ldr	r3, [pc, #96]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124ee:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 80124f0:	4b17      	ldr	r3, [pc, #92]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124f2:	4a18      	ldr	r2, [pc, #96]	@ (8012554 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 80124f4:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 80124f6:	e027      	b.n	8012548 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80124f8:	4a15      	ldr	r2, [pc, #84]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80124fe:	4b14      	ldr	r3, [pc, #80]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012500:	2200      	movs	r2, #0
 8012502:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	330c      	adds	r3, #12
 8012508:	4618      	mov	r0, r3
 801250a:	f7ff fc45 	bl	8011d98 <_ZNK8touchgfx9colortypecvmEv>
 801250e:	4603      	mov	r3, r0
 8012510:	0a1b      	lsrs	r3, r3, #8
 8012512:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	330c      	adds	r3, #12
 801251a:	4618      	mov	r0, r3
 801251c:	f7ff fc3c 	bl	8011d98 <_ZNK8touchgfx9colortypecvmEv>
 8012520:	4603      	mov	r3, r0
 8012522:	095b      	lsrs	r3, r3, #5
 8012524:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8012528:	431c      	orrs	r4, r3
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	330c      	adds	r3, #12
 801252e:	4618      	mov	r0, r3
 8012530:	f7ff fc32 	bl	8011d98 <_ZNK8touchgfx9colortypecvmEv>
 8012534:	4603      	mov	r3, r0
 8012536:	08db      	lsrs	r3, r3, #3
 8012538:	f003 031f 	and.w	r3, r3, #31
 801253c:	4a04      	ldr	r2, [pc, #16]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801253e:	4323      	orrs	r3, r4
 8012540:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8012542:	4b03      	ldr	r3, [pc, #12]	@ (8012550 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012544:	4a04      	ldr	r2, [pc, #16]	@ (8012558 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8012546:	601a      	str	r2, [r3, #0]
}
 8012548:	bf00      	nop
 801254a:	3714      	adds	r7, #20
 801254c:	46bd      	mov	sp, r7
 801254e:	bd90      	pop	{r4, r7, pc}
 8012550:	4002b000 	.word	0x4002b000
 8012554:	00022301 	.word	0x00022301
 8012558:	00032301 	.word	0x00032301

0801255c <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 801255c:	b480      	push	{r7}
 801255e:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012560:	bf00      	nop
 8012562:	4b09      	ldr	r3, [pc, #36]	@ (8012588 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f003 0301 	and.w	r3, r3, #1
 801256a:	2b00      	cmp	r3, #0
 801256c:	bf14      	ite	ne
 801256e:	2301      	movne	r3, #1
 8012570:	2300      	moveq	r3, #0
 8012572:	b2db      	uxtb	r3, r3
 8012574:	2b00      	cmp	r3, #0
 8012576:	d1f4      	bne.n	8012562 <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8012578:	4b03      	ldr	r3, [pc, #12]	@ (8012588 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 801257a:	2223      	movs	r2, #35	@ 0x23
 801257c:	609a      	str	r2, [r3, #8]
}
 801257e:	bf00      	nop
 8012580:	46bd      	mov	sp, r7
 8012582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012586:	4770      	bx	lr
 8012588:	4002b000 	.word	0x4002b000

0801258c <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 801258c:	b480      	push	{r7}
 801258e:	b083      	sub	sp, #12
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
}
 8012596:	bf00      	nop
 8012598:	370c      	adds	r7, #12
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr
	...

080125a4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 80125a4:	b480      	push	{r7}
 80125a6:	b085      	sub	sp, #20
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	60b9      	str	r1, [r7, #8]
 80125ae:	607a      	str	r2, [r7, #4]
 80125b0:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80125b2:	bf00      	nop
 80125b4:	4b21      	ldr	r3, [pc, #132]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	f003 0301 	and.w	r3, r3, #1
 80125bc:	2b00      	cmp	r3, #0
 80125be:	bf14      	ite	ne
 80125c0:	2301      	movne	r3, #1
 80125c2:	2300      	moveq	r3, #0
 80125c4:	b2db      	uxtb	r3, r3
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d1f4      	bne.n	80125b4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80125ca:	4b1c      	ldr	r3, [pc, #112]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80125cc:	2223      	movs	r2, #35	@ 0x23
 80125ce:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 80125d0:	4b1a      	ldr	r3, [pc, #104]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80125d2:	2202      	movs	r2, #2
 80125d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	041b      	lsls	r3, r3, #16
 80125da:	4a18      	ldr	r2, [pc, #96]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80125dc:	f043 0301 	orr.w	r3, r3, #1
 80125e0:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80125e2:	4a16      	ldr	r2, [pc, #88]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (alpha < 0xFF)
 80125e8:	78fb      	ldrb	r3, [r7, #3]
 80125ea:	2bff      	cmp	r3, #255	@ 0xff
 80125ec:	d017      	beq.n	801261e <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80125ee:	4b13      	ldr	r3, [pc, #76]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80125f0:	2202      	movs	r2, #2
 80125f2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80125f4:	78fb      	ldrb	r3, [r7, #3]
 80125f6:	061b      	lsls	r3, r3, #24
 80125f8:	4a10      	ldr	r2, [pc, #64]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80125fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80125fe:	f043 0309 	orr.w	r3, r3, #9
 8012602:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color);
 8012604:	4a0d      	ldr	r2, [pc, #52]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 801260a:	4a0c      	ldr	r2, [pc, #48]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8012610:	4a0a      	ldr	r2, [pc, #40]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8012616:	4b09      	ldr	r3, [pc, #36]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012618:	4a09      	ldr	r2, [pc, #36]	@ (8012640 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 801261a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 801261c:	e008      	b.n	8012630 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 801261e:	4b07      	ldr	r3, [pc, #28]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012620:	2202      	movs	r2, #2
 8012622:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 8012624:	4a05      	ldr	r2, [pc, #20]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012626:	69bb      	ldr	r3, [r7, #24]
 8012628:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 801262a:	4b04      	ldr	r3, [pc, #16]	@ (801263c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801262c:	4a05      	ldr	r2, [pc, #20]	@ (8012644 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 801262e:	601a      	str	r2, [r3, #0]
}
 8012630:	bf00      	nop
 8012632:	3714      	adds	r7, #20
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr
 801263c:	4002b000 	.word	0x4002b000
 8012640:	00020001 	.word	0x00020001
 8012644:	00030001 	.word	0x00030001

08012648 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 8012648:	b480      	push	{r7}
 801264a:	b085      	sub	sp, #20
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
 8012654:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012656:	bf00      	nop
 8012658:	4b1f      	ldr	r3, [pc, #124]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	f003 0301 	and.w	r3, r3, #1
 8012660:	2b00      	cmp	r3, #0
 8012662:	bf14      	ite	ne
 8012664:	2301      	movne	r3, #1
 8012666:	2300      	moveq	r3, #0
 8012668:	b2db      	uxtb	r3, r3
 801266a:	2b00      	cmp	r3, #0
 801266c:	d1f4      	bne.n	8012658 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 801266e:	4b1a      	ldr	r3, [pc, #104]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012670:	2223      	movs	r2, #35	@ 0x23
 8012672:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8012674:	4b18      	ldr	r3, [pc, #96]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012676:	2202      	movs	r2, #2
 8012678:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	041b      	lsls	r3, r3, #16
 801267e:	4a16      	ldr	r2, [pc, #88]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012680:	f043 0301 	orr.w	r3, r3, #1
 8012684:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8012686:	4a14      	ldr	r2, [pc, #80]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 801268c:	4a12      	ldr	r2, [pc, #72]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 8012692:	78fb      	ldrb	r3, [r7, #3]
 8012694:	2bff      	cmp	r3, #255	@ 0xff
 8012696:	d00f      	beq.n	80126b8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x70>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8012698:	78fb      	ldrb	r3, [r7, #3]
 801269a:	061b      	lsls	r3, r3, #24
 801269c:	4a0e      	ldr	r2, [pc, #56]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801269e:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 80126a2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80126a4:	4b0c      	ldr	r3, [pc, #48]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126a6:	2202      	movs	r2, #2
 80126a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80126aa:	4a0b      	ldr	r2, [pc, #44]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80126b0:	4b09      	ldr	r3, [pc, #36]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126b2:	4a0a      	ldr	r2, [pc, #40]	@ (80126dc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x94>)
 80126b4:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 80126b6:	e008      	b.n	80126ca <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80126b8:	78fb      	ldrb	r3, [r7, #3]
 80126ba:	061b      	lsls	r3, r3, #24
 80126bc:	4a06      	ldr	r2, [pc, #24]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126be:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 80126c2:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 80126c4:	4b04      	ldr	r3, [pc, #16]	@ (80126d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126c6:	2201      	movs	r2, #1
 80126c8:	601a      	str	r2, [r3, #0]
}
 80126ca:	bf00      	nop
 80126cc:	3714      	adds	r7, #20
 80126ce:	46bd      	mov	sp, r7
 80126d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	4002b000 	.word	0x4002b000
 80126dc:	00020001 	.word	0x00020001

080126e0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 80126e0:	b480      	push	{r7}
 80126e2:	b085      	sub	sp, #20
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	60b9      	str	r1, [r7, #8]
 80126ea:	607a      	str	r2, [r7, #4]
 80126ec:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80126ee:	bf00      	nop
 80126f0:	4b18      	ldr	r3, [pc, #96]	@ (8012754 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	f003 0301 	and.w	r3, r3, #1
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	bf14      	ite	ne
 80126fc:	2301      	movne	r3, #1
 80126fe:	2300      	moveq	r3, #0
 8012700:	b2db      	uxtb	r3, r3
 8012702:	2b00      	cmp	r3, #0
 8012704:	d1f4      	bne.n	80126f0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8012706:	4b13      	ldr	r3, [pc, #76]	@ (8012754 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012708:	2223      	movs	r2, #35	@ 0x23
 801270a:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 801270c:	4b11      	ldr	r3, [pc, #68]	@ (8012754 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801270e:	2202      	movs	r2, #2
 8012710:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	041b      	lsls	r3, r3, #16
 8012716:	4a0f      	ldr	r2, [pc, #60]	@ (8012754 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012718:	f043 0301 	orr.w	r3, r3, #1
 801271c:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 801271e:	4a0d      	ldr	r2, [pc, #52]	@ (8012754 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8012724:	4a0b      	ldr	r2, [pc, #44]	@ (8012754 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	60d3      	str	r3, [r2, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 801272a:	78fb      	ldrb	r3, [r7, #3]
 801272c:	061b      	lsls	r3, r3, #24
 801272e:	4a09      	ldr	r2, [pc, #36]	@ (8012754 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012734:	61d3      	str	r3, [r2, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012736:	4b07      	ldr	r3, [pc, #28]	@ (8012754 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012738:	2202      	movs	r2, #2
 801273a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 801273c:	4a05      	ldr	r2, [pc, #20]	@ (8012754 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	6153      	str	r3, [r2, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8012742:	4b04      	ldr	r3, [pc, #16]	@ (8012754 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012744:	4a04      	ldr	r2, [pc, #16]	@ (8012758 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x78>)
 8012746:	601a      	str	r2, [r3, #0]
}
 8012748:	bf00      	nop
 801274a:	3714      	adds	r7, #20
 801274c:	46bd      	mov	sp, r7
 801274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012752:	4770      	bx	lr
 8012754:	4002b000 	.word	0x4002b000
 8012758:	00020001 	.word	0x00020001

0801275c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 801275c:	b480      	push	{r7}
 801275e:	b083      	sub	sp, #12
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8012764:	4a04      	ldr	r2, [pc, #16]	@ (8012778 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6013      	str	r3, [r2, #0]
    }
 801276a:	bf00      	nop
 801276c:	370c      	adds	r7, #12
 801276e:	46bd      	mov	sp, r7
 8012770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012774:	4770      	bx	lr
 8012776:	bf00      	nop
 8012778:	2005bae4 	.word	0x2005bae4

0801277c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 801277c:	b480      	push	{r7}
 801277e:	b085      	sub	sp, #20
 8012780:	af00      	add	r7, sp, #0
 8012782:	60f8      	str	r0, [r7, #12]
 8012784:	60b9      	str	r1, [r7, #8]
 8012786:	607a      	str	r2, [r7, #4]
 8012788:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801278a:	4a0b      	ldr	r2, [pc, #44]	@ (80127b8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	68ba      	ldr	r2, [r7, #8]
 8012794:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	683a      	ldr	r2, [r7, #0]
 80127a0:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	69ba      	ldr	r2, [r7, #24]
 80127a6:	611a      	str	r2, [r3, #16]
    {
    }
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	4618      	mov	r0, r3
 80127ac:	3714      	adds	r7, #20
 80127ae:	46bd      	mov	sp, r7
 80127b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b4:	4770      	bx	lr
 80127b6:	bf00      	nop
 80127b8:	0802eeec 	.word	0x0802eeec

080127bc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80127bc:	b480      	push	{r7}
 80127be:	b083      	sub	sp, #12
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
    {
 80127c4:	4a04      	ldr	r2, [pc, #16]	@ (80127d8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	601a      	str	r2, [r3, #0]
    }
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	4618      	mov	r0, r3
 80127ce:	370c      	adds	r7, #12
 80127d0:	46bd      	mov	sp, r7
 80127d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d6:	4770      	bx	lr
 80127d8:	0802eeec 	.word	0x0802eeec

080127dc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
    }
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f7ff ffe9 	bl	80127bc <_ZN8touchgfx7MVPHeapD1Ev>
 80127ea:	2114      	movs	r1, #20
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f019 f9b8 	bl	802bb62 <_ZdlPvj>
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	4618      	mov	r0, r3
 80127f6:	3708      	adds	r7, #8
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <_ZN8touchgfx18VectorFontRendererD1Ev>:
 */
class VectorFontRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorFontRenderer()
 80127fc:	b480      	push	{r7}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
    {
 8012804:	4a04      	ldr	r2, [pc, #16]	@ (8012818 <_ZN8touchgfx18VectorFontRendererD1Ev+0x1c>)
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	601a      	str	r2, [r3, #0]
    }
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	4618      	mov	r0, r3
 801280e:	370c      	adds	r7, #12
 8012810:	46bd      	mov	sp, r7
 8012812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012816:	4770      	bx	lr
 8012818:	0802eed8 	.word	0x0802eed8

0801281c <_ZN8touchgfx18VectorFontRendererD0Ev>:
    virtual ~VectorFontRenderer()
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
    }
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7ff ffe9 	bl	80127fc <_ZN8touchgfx18VectorFontRendererD1Ev>
 801282a:	2104      	movs	r1, #4
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f019 f998 	bl	802bb62 <_ZdlPvj>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	4618      	mov	r0, r3
 8012836:	3708      	adds	r7, #8
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}

0801283c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801283c:	b480      	push	{r7}
 801283e:	b083      	sub	sp, #12
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
    {
 8012844:	4a04      	ldr	r2, [pc, #16]	@ (8012858 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	601a      	str	r2, [r3, #0]
    }
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	370c      	adds	r7, #12
 8012850:	46bd      	mov	sp, r7
 8012852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012856:	4770      	bx	lr
 8012858:	0802f814 	.word	0x0802f814

0801285c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
    }
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f7ff ffe9 	bl	801283c <_ZN8touchgfx3LCDD1Ev>
 801286a:	210c      	movs	r1, #12
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f019 f978 	bl	802bb62 <_ZdlPvj>
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	4618      	mov	r0, r3
 8012876:	3708      	adds	r7, #8
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>:
    /**
     * Set the vector font renderer
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
 801287c:	b480      	push	{r7}
 801287e:	b083      	sub	sp, #12
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
    {
        vectorFontRenderer = renderer;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	683a      	ldr	r2, [r7, #0]
 801288a:	609a      	str	r2, [r3, #8]
    }
 801288c:	bf00      	nop
 801288e:	370c      	adds	r7, #12
 8012890:	46bd      	mov	sp, r7
 8012892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012896:	4770      	bx	lr

08012898 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8012898:	b480      	push	{r7}
 801289a:	b083      	sub	sp, #12
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
            : startX(0),
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2200      	movs	r2, #0
 80128a4:	801a      	strh	r2, [r3, #0]
              startY(0),
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	2200      	movs	r2, #0
 80128aa:	805a      	strh	r2, [r3, #2]
              downX(0),
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2200      	movs	r2, #0
 80128b0:	809a      	strh	r2, [r3, #4]
              downY(0),
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2200      	movs	r2, #0
 80128b6:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2200      	movs	r2, #0
 80128bc:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2200      	movs	r2, #0
 80128c2:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2200      	movs	r2, #0
 80128c8:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2200      	movs	r2, #0
 80128ce:	739a      	strb	r2, [r3, #14]
        {
        }
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	4618      	mov	r0, r3
 80128d4:	370c      	adds	r7, #12
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr

080128de <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80128de:	b580      	push	{r7, lr}
 80128e0:	b082      	sub	sp, #8
 80128e2:	af00      	add	r7, sp, #0
 80128e4:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7ff ffd5 	bl	8012898 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2200      	movs	r2, #0
 80128f2:	611a      	str	r2, [r3, #16]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2200      	movs	r2, #0
 80128f8:	829a      	strh	r2, [r3, #20]
    {
    }
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4618      	mov	r0, r3
 80128fe:	3708      	adds	r7, #8
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8012904:	b580      	push	{r7, lr}
 8012906:	b084      	sub	sp, #16
 8012908:	af00      	add	r7, sp, #0
 801290a:	60f8      	str	r0, [r7, #12]
 801290c:	60b9      	str	r1, [r7, #8]
 801290e:	607a      	str	r2, [r7, #4]
 8012910:	603b      	str	r3, [r7, #0]
          maxBlockLines(20)
 8012912:	4a65      	ldr	r2, [pc, #404]	@ (8012aa8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a4>)
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	68ba      	ldr	r2, [r7, #8]
 801291c:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	687a      	ldr	r2, [r7, #4]
 8012922:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	683a      	ldr	r2, [r7, #0]
 8012928:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	2200      	movs	r2, #0
 801292e:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2200      	movs	r2, #0
 8012934:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	2200      	movs	r2, #0
 801293a:	619a      	str	r2, [r3, #24]
          gestures(),
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	331c      	adds	r3, #28
 8012940:	4618      	mov	r0, r3
 8012942:	f7ff ffcc 	bl	80128de <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	2200      	movs	r2, #0
 801294a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	2200      	movs	r2, #0
 8012952:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	2200      	movs	r2, #0
 8012958:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	2200      	movs	r2, #0
 801295e:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	2200      	movs	r2, #0
 8012964:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2200      	movs	r2, #0
 801296a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	2201      	movs	r2, #1
 8012972:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	2200      	movs	r2, #0
 801297a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2200      	movs	r2, #0
 8012982:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	2200      	movs	r2, #0
 801298a:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	3350      	adds	r3, #80	@ 0x50
 8012990:	4618      	mov	r0, r3
 8012992:	f7fd fc8a 	bl	80102aa <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	2200      	movs	r2, #0
 801299a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	2200      	movs	r2, #0
 80129a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	2200      	movs	r2, #0
 80129a8:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	2200      	movs	r2, #0
 80129ae:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	2201      	movs	r2, #1
 80129b4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2200      	movs	r2, #0
 80129bc:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2200      	movs	r2, #0
 80129c4:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	2201      	movs	r2, #1
 80129cc:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	2200      	movs	r2, #0
 80129d4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	2200      	movs	r2, #0
 80129dc:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	2200      	movs	r2, #0
 80129e4:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	2200      	movs	r2, #0
 80129ec:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2200      	movs	r2, #0
 80129f4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2200      	movs	r2, #0
 80129fc:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2200      	movs	r2, #0
 8012a02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	2201      	movs	r2, #1
 8012a12:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE),
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	2201      	movs	r2, #1
 8012a1a:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
          isFrontPorchEntered(false),
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2200      	movs	r2, #0
 8012a22:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          numberOfBlocks(4),
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2204      	movs	r2, #4
 8012a2a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 8012a2e:	8bbb      	ldrh	r3, [r7, #28]
 8012a30:	68fa      	ldr	r2, [r7, #12]
 8012a32:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 8012a36:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8012a48:	4a18      	ldr	r2, [pc, #96]	@ (8012aac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a8>)
 8012a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8012a4e:	085b      	lsrs	r3, r3, #1
 8012a50:	b29a      	uxth	r2, r3
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
          maxBlockLines(20)
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2214      	movs	r2, #20
 8012a5c:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
        instance = this;
 8012a60:	4a13      	ldr	r2, [pc, #76]	@ (8012ab0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1ac>)
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8012a66:	4a13      	ldr	r2, [pc, #76]	@ (8012ab4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 8012a68:	8b3b      	ldrh	r3, [r7, #24]
 8012a6a:	8013      	strh	r3, [r2, #0]
 8012a6c:	4b11      	ldr	r3, [pc, #68]	@ (8012ab4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 8012a6e:	881a      	ldrh	r2, [r3, #0]
 8012a70:	4b11      	ldr	r3, [pc, #68]	@ (8012ab8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b4>)
 8012a72:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8012a74:	4a11      	ldr	r2, [pc, #68]	@ (8012abc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 8012a76:	8bbb      	ldrh	r3, [r7, #28]
 8012a78:	8013      	strh	r3, [r2, #0]
 8012a7a:	4b10      	ldr	r3, [pc, #64]	@ (8012abc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 8012a7c:	881a      	ldrh	r2, [r3, #0]
 8012a7e:	4b10      	ldr	r3, [pc, #64]	@ (8012ac0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1bc>)
 8012a80:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8012a82:	4b10      	ldr	r3, [pc, #64]	@ (8012ac4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1c0>)
 8012a84:	2200      	movs	r2, #0
 8012a86:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8012a88:	8b3a      	ldrh	r2, [r7, #24]
 8012a8a:	8bbb      	ldrh	r3, [r7, #28]
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	bf34      	ite	cc
 8012a90:	2301      	movcc	r3, #1
 8012a92:	2300      	movcs	r3, #0
 8012a94:	b2db      	uxtb	r3, r3
 8012a96:	461a      	mov	r2, r3
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3710      	adds	r7, #16
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}
 8012aa8:	0802f41c 	.word	0x0802f41c
 8012aac:	aaaaaaab 	.word	0xaaaaaaab
 8012ab0:	2005ba80 	.word	0x2005ba80
 8012ab4:	2005ba74 	.word	0x2005ba74
 8012ab8:	2005ba7a 	.word	0x2005ba7a
 8012abc:	2005ba76 	.word	0x2005ba76
 8012ac0:	2005ba7c 	.word	0x2005ba7c
 8012ac4:	2005ba78 	.word	0x2005ba78

08012ac8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7fd f96d 	bl	800fdb4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8012ada:	bf00      	nop
 8012adc:	3708      	adds	r7, #8
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
	...

08012ae4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b086      	sub	sp, #24
 8012ae8:	af02      	add	r7, sp, #8
 8012aea:	60f8      	str	r0, [r7, #12]
 8012aec:	60b9      	str	r1, [r7, #8]
 8012aee:	607a      	str	r2, [r7, #4]
 8012af0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8012af2:	68f8      	ldr	r0, [r7, #12]
 8012af4:	69bb      	ldr	r3, [r7, #24]
 8012af6:	9300      	str	r3, [sp, #0]
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	687a      	ldr	r2, [r7, #4]
 8012afc:	68b9      	ldr	r1, [r7, #8]
 8012afe:	f7ff fe3d 	bl	801277c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8012b02:	4a04      	ldr	r2, [pc, #16]	@ (8012b14 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	601a      	str	r2, [r3, #0]
    {

    }
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3710      	adds	r7, #16
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	0802eec4 	.word	0x0802eec4

08012b18 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b082      	sub	sp, #8
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	4a05      	ldr	r2, [pc, #20]	@ (8012b38 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	601a      	str	r2, [r3, #0]
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7ff fe47 	bl	80127bc <_ZN8touchgfx7MVPHeapD1Ev>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4618      	mov	r0, r3
 8012b32:	3708      	adds	r7, #8
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}
 8012b38:	0802eec4 	.word	0x0802eec4

08012b3c <_ZN16FrontendHeapBaseD0Ev>:
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b082      	sub	sp, #8
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	6878      	ldr	r0, [r7, #4]
 8012b46:	f7ff ffe7 	bl	8012b18 <_ZN16FrontendHeapBaseD1Ev>
 8012b4a:	2114      	movs	r1, #20
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f019 f808 	bl	802bb62 <_ZdlPvj>
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	4618      	mov	r0, r3
 8012b56:	3708      	adds	r7, #8
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}

08012b5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	4a05      	ldr	r2, [pc, #20]	@ (8012b7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	601a      	str	r2, [r3, #0]
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f001 f8b9 	bl	8013ce4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	4618      	mov	r0, r3
 8012b76:	3708      	adds	r7, #8
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	0802ee90 	.word	0x0802ee90

08012b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b082      	sub	sp, #8
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f7ff ffe7 	bl	8012b5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012b8e:	2118      	movs	r1, #24
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f018 ffe6 	bl	802bb62 <_ZdlPvj>
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3708      	adds	r7, #8
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}

08012ba0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b082      	sub	sp, #8
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	4a05      	ldr	r2, [pc, #20]	@ (8012bc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	601a      	str	r2, [r3, #0]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f001 f897 	bl	8013ce4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3708      	adds	r7, #8
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}
 8012bc0:	0802ee5c 	.word	0x0802ee5c

08012bc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff ffe7 	bl	8012ba0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012bd2:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	f018 ffc3 	bl	802bb62 <_ZdlPvj>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	4618      	mov	r0, r3
 8012be0:	3708      	adds	r7, #8
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}
	...

08012be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
 8012bf0:	4a05      	ldr	r2, [pc, #20]	@ (8012c08 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	601a      	str	r2, [r3, #0]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f001 f873 	bl	8013ce4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	4618      	mov	r0, r3
 8012c02:	3708      	adds	r7, #8
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	0802ee28 	.word	0x0802ee28

08012c0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f7ff ffe7 	bl	8012be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012c1a:	2114      	movs	r1, #20
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f018 ffa0 	bl	802bb62 <_ZdlPvj>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	4618      	mov	r0, r3
 8012c26:	3708      	adds	r7, #8
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	4a10      	ldr	r2, [pc, #64]	@ (8012c78 <_ZN12FrontendHeapD1Ev+0x4c>)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	601a      	str	r2, [r3, #0]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7fe f993 	bl	8010f6c <_ZN19FrontendApplicationD1Ev>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7ff ffcb 	bl	8012be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	332c      	adds	r3, #44	@ 0x2c
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7ff ffa2 	bl	8012ba0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	3314      	adds	r3, #20
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7ff ff7b 	bl	8012b5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f7ff ff55 	bl	8012b18 <_ZN16FrontendHeapBaseD1Ev>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	4618      	mov	r0, r3
 8012c72:	3708      	adds	r7, #8
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}
 8012c78:	0802ee14 	.word	0x0802ee14

08012c7c <_ZN12FrontendHeapD0Ev>:
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f7ff ffd1 	bl	8012c2c <_ZN12FrontendHeapD1Ev>
 8012c8a:	f44f 716f 	mov.w	r1, #956	@ 0x3bc
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f018 ff67 	bl	802bb62 <_ZdlPvj>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	4618      	mov	r0, r3
 8012c98:	3708      	adds	r7, #8
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
	...

08012ca0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	af00      	add	r7, sp, #0
 8012ca4:	4801      	ldr	r0, [pc, #4]	@ (8012cac <__tcf_0+0xc>)
 8012ca6:	f7ff ffc1 	bl	8012c2c <_ZN12FrontendHeapD1Ev>
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	2005a720 	.word	0x2005a720

08012cb0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012cb4:	4b11      	ldr	r3, [pc, #68]	@ (8012cfc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012cb6:	e8d3 3faf 	lda	r3, [r3]
 8012cba:	f003 0301 	and.w	r3, r3, #1
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	bf0c      	ite	eq
 8012cc2:	2301      	moveq	r3, #1
 8012cc4:	2300      	movne	r3, #0
 8012cc6:	b2db      	uxtb	r3, r3
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d013      	beq.n	8012cf4 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8012ccc:	480b      	ldr	r0, [pc, #44]	@ (8012cfc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012cce:	f018 ff4a 	bl	802bb66 <__cxa_guard_acquire>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	bf14      	ite	ne
 8012cd8:	2301      	movne	r3, #1
 8012cda:	2300      	moveq	r3, #0
 8012cdc:	b2db      	uxtb	r3, r3
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d008      	beq.n	8012cf4 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8012ce2:	4807      	ldr	r0, [pc, #28]	@ (8012d00 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8012ce4:	f000 f846 	bl	8012d74 <_ZN12FrontendHeapC1Ev>
 8012ce8:	4806      	ldr	r0, [pc, #24]	@ (8012d04 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8012cea:	f019 fe4d 	bl	802c988 <atexit>
 8012cee:	4803      	ldr	r0, [pc, #12]	@ (8012cfc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012cf0:	f018 ff45 	bl	802bb7e <__cxa_guard_release>
        return instance;
 8012cf4:	4b02      	ldr	r3, [pc, #8]	@ (8012d00 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	2005aadc 	.word	0x2005aadc
 8012d00:	2005a720 	.word	0x2005a720
 8012d04:	08012ca1 	.word	0x08012ca1

08012d08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f000 ffe8 	bl	8013ce8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012d18:	4a03      	ldr	r2, [pc, #12]	@ (8012d28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	601a      	str	r2, [r3, #0]
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	4618      	mov	r0, r3
 8012d22:	3708      	adds	r7, #8
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	0802ee90 	.word	0x0802ee90

08012d2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	4618      	mov	r0, r3
 8012d38:	f000 ffd6 	bl	8013ce8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012d3c:	4a03      	ldr	r2, [pc, #12]	@ (8012d4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	601a      	str	r2, [r3, #0]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	4618      	mov	r0, r3
 8012d46:	3708      	adds	r7, #8
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}
 8012d4c:	0802ee5c 	.word	0x0802ee5c

08012d50 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f000 ffc4 	bl	8013ce8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012d60:	4a03      	ldr	r2, [pc, #12]	@ (8012d70 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	601a      	str	r2, [r3, #0]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3708      	adds	r7, #8
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	0802ee28 	.word	0x0802ee28

08012d74 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012d74:	b590      	push	{r4, r7, lr}
 8012d76:	b085      	sub	sp, #20
 8012d78:	af02      	add	r7, sp, #8
 8012d7a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f103 0114 	add.w	r1, r3, #20
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f503 7412 	add.w	r4, r3, #584	@ 0x248
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f503 7318 	add.w	r3, r3, #608	@ 0x260
                     app(model, *this)
 8012d96:	9300      	str	r3, [sp, #0]
 8012d98:	4623      	mov	r3, r4
 8012d9a:	f7ff fea3 	bl	8012ae4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8012d9e:	4a18      	ldr	r2, [pc, #96]	@ (8012e00 <_ZN12FrontendHeapC1Ev+0x8c>)
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	601a      	str	r2, [r3, #0]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	3314      	adds	r3, #20
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7ff ffad 	bl	8012d08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	332c      	adds	r3, #44	@ 0x2c
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7ff ffba 	bl	8012d2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7ff ffc6 	bl	8012d50 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7fe f91a 	bl	8011004 <_ZN5ModelC1Ev>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f503 7018 	add.w	r0, r3, #608	@ 0x260
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8012ddc:	687a      	ldr	r2, [r7, #4]
 8012dde:	4619      	mov	r1, r3
 8012de0:	f7fe f8fa 	bl	8010fd8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8012de4:	687a      	ldr	r2, [r7, #4]
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012dec:	4619      	mov	r1, r3
 8012dee:	4610      	mov	r0, r2
 8012df0:	f7ff fe6a 	bl	8012ac8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	4618      	mov	r0, r3
 8012df8:	370c      	adds	r7, #12
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd90      	pop	{r4, r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	0802ee14 	.word	0x0802ee14

08012e04 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b086      	sub	sp, #24
 8012e08:	af02      	add	r7, sp, #8
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	60b9      	str	r1, [r7, #8]
 8012e0e:	607a      	str	r2, [r7, #4]
 8012e10:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8012e12:	68f8      	ldr	r0, [r7, #12]
 8012e14:	8bbb      	ldrh	r3, [r7, #28]
 8012e16:	9301      	str	r3, [sp, #4]
 8012e18:	8b3b      	ldrh	r3, [r7, #24]
 8012e1a:	9300      	str	r3, [sp, #0]
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	687a      	ldr	r2, [r7, #4]
 8012e20:	68b9      	ldr	r1, [r7, #8]
 8012e22:	f7ff fd6f 	bl	8012904 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8012e26:	4a04      	ldr	r2, [pc, #16]	@ (8012e38 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	601a      	str	r2, [r3, #0]
    }
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3710      	adds	r7, #16
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	0802f034 	.word	0x0802f034

08012e3c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b086      	sub	sp, #24
 8012e40:	af02      	add	r7, sp, #8
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
 8012e48:	603b      	str	r3, [r7, #0]
 8012e4a:	68f8      	ldr	r0, [r7, #12]
 8012e4c:	8bbb      	ldrh	r3, [r7, #28]
 8012e4e:	9301      	str	r3, [sp, #4]
 8012e50:	8b3b      	ldrh	r3, [r7, #24]
 8012e52:	9300      	str	r3, [sp, #0]
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	68b9      	ldr	r1, [r7, #8]
 8012e5a:	f7ff ffd3 	bl	8012e04 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012e5e:	4a04      	ldr	r2, [pc, #16]	@ (8012e70 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	601a      	str	r2, [r3, #0]
    }
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	4618      	mov	r0, r3
 8012e68:	3710      	adds	r7, #16
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	0802ecb4 	.word	0x0802ecb4

08012e74 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8012e74:	b480      	push	{r7}
 8012e76:	b083      	sub	sp, #12
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	4a04      	ldr	r2, [pc, #16]	@ (8012e90 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	601a      	str	r2, [r3, #0]
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	4618      	mov	r0, r3
 8012e86:	370c      	adds	r7, #12
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8e:	4770      	bx	lr
 8012e90:	0802ec9c 	.word	0x0802ec9c

08012e94 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7ff ffe8 	bl	8012e74 <_ZN8touchgfx15TouchControllerC1Ev>
 8012ea4:	4a03      	ldr	r2, [pc, #12]	@ (8012eb4 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	601a      	str	r2, [r3, #0]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	4618      	mov	r0, r3
 8012eae:	3708      	adds	r7, #8
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}
 8012eb4:	0802ec84 	.word	0x0802ec84

08012eb8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 296);

void touchgfx_init()
{
 8012eb8:	b590      	push	{r4, r7, lr}
 8012eba:	b085      	sub	sp, #20
 8012ebc:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8012ebe:	f7fd fe9b 	bl	8010bf8 <_ZN14BitmapDatabase11getInstanceEv>
 8012ec2:	4604      	mov	r4, r0
 8012ec4:	f7fd fea2 	bl	8010c0c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	4619      	mov	r1, r3
 8012ecc:	2300      	movs	r3, #0
 8012ece:	9300      	str	r3, [sp, #0]
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	f009 fddf 	bl	801ca98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8012eda:	480b      	ldr	r0, [pc, #44]	@ (8012f08 <touchgfx_init+0x50>)
 8012edc:	f7ff fc3e 	bl	801275c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8012ee0:	2000      	movs	r0, #0
 8012ee2:	f7fd ffbf 	bl	8010e64 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setVectorFontRenderer(&vectorFontRenderer);
 8012ee6:	4909      	ldr	r1, [pc, #36]	@ (8012f0c <touchgfx_init+0x54>)
 8012ee8:	4809      	ldr	r0, [pc, #36]	@ (8012f10 <touchgfx_init+0x58>)
 8012eea:	f7ff fcc7 	bl	801287c <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>

    FontManager::setFontProvider(&fontProvider);
 8012eee:	4809      	ldr	r0, [pc, #36]	@ (8012f14 <touchgfx_init+0x5c>)
 8012ef0:	f009 fd3a 	bl	801c968 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8012ef4:	f7ff fedc 	bl	8012cb0 <_ZN12FrontendHeap11getInstanceEv>
 8012ef8:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8012efa:	4807      	ldr	r0, [pc, #28]	@ (8012f18 <touchgfx_init+0x60>)
 8012efc:	f7fe fd5e 	bl	80119bc <_ZN11TouchGFXHAL10initializeEv>
}
 8012f00:	bf00      	nop
 8012f02:	370c      	adds	r7, #12
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd90      	pop	{r4, r7, pc}
 8012f08:	2005b92c 	.word	0x2005b92c
 8012f0c:	2005b910 	.word	0x2005b910
 8012f10:	2005b884 	.word	0x2005b884
 8012f14:	20000018 	.word	0x20000018
 8012f18:	2005b930 	.word	0x2005b930

08012f1c <touchgfx_components_init>:

void touchgfx_components_init()
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	af00      	add	r7, sp, #0
}
 8012f20:	bf00      	nop
 8012f22:	46bd      	mov	sp, r7
 8012f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f28:	4770      	bx	lr
	...

08012f2c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8012f30:	4802      	ldr	r0, [pc, #8]	@ (8012f3c <touchgfx_taskEntry+0x10>)
 8012f32:	f001 fecc 	bl	8014cce <_ZN8touchgfx3HAL9taskEntryEv>
}
 8012f36:	bf00      	nop
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	2005b930 	.word	0x2005b930

08012f40 <_Z41__static_initialization_and_destruction_0v>:
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af02      	add	r7, sp, #8
static STM32TouchController tc;
 8012f46:	480d      	ldr	r0, [pc, #52]	@ (8012f7c <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8012f48:	f7ff ffa4 	bl	8012e94 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8012f4c:	480c      	ldr	r0, [pc, #48]	@ (8012f80 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8012f4e:	f7ff f807 	bl	8011f60 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8012f52:	480c      	ldr	r0, [pc, #48]	@ (8012f84 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8012f54:	f00e fea0 	bl	8021c98 <_ZN8touchgfx8LCD16bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8012f58:	480b      	ldr	r0, [pc, #44]	@ (8012f88 <_Z41__static_initialization_and_destruction_0v+0x48>)
 8012f5a:	f007 fe23 	bl	801aba4 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 296);
 8012f5e:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8012f62:	9301      	str	r3, [sp, #4]
 8012f64:	23f0      	movs	r3, #240	@ 0xf0
 8012f66:	9300      	str	r3, [sp, #0]
 8012f68:	4b04      	ldr	r3, [pc, #16]	@ (8012f7c <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8012f6a:	4a06      	ldr	r2, [pc, #24]	@ (8012f84 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8012f6c:	4904      	ldr	r1, [pc, #16]	@ (8012f80 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8012f6e:	4807      	ldr	r0, [pc, #28]	@ (8012f8c <_Z41__static_initialization_and_destruction_0v+0x4c>)
 8012f70:	f7ff ff64 	bl	8012e3c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8012f74:	bf00      	nop
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	2005aae0 	.word	0x2005aae0
 8012f80:	2005aae4 	.word	0x2005aae4
 8012f84:	2005b884 	.word	0x2005b884
 8012f88:	2005b910 	.word	0x2005b910
 8012f8c:	2005b930 	.word	0x2005b930

08012f90 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
namespace touchgfx
{
/**
 * Implementation of the VectorFontRenderer interface
 */
class VectorFontRendererImpl : public VectorFontRenderer
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b082      	sub	sp, #8
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	4a05      	ldr	r2, [pc, #20]	@ (8012fb0 <_ZN8touchgfx22VectorFontRendererImplD1Ev+0x20>)
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	601a      	str	r2, [r3, #0]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7ff fc2b 	bl	80127fc <_ZN8touchgfx18VectorFontRendererD1Ev>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3708      	adds	r7, #8
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	0802f928 	.word	0x0802f928

08012fb4 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f7ff ffe7 	bl	8012f90 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
 8012fc2:	211c      	movs	r1, #28
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f018 fdcc 	bl	802bb62 <_ZdlPvj>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3708      	adds	r7, #8
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	4a05      	ldr	r2, [pc, #20]	@ (8012ff4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	601a      	str	r2, [r3, #0]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7ff fc29 	bl	801283c <_ZN8touchgfx3LCDD1Ev>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	4618      	mov	r0, r3
 8012fee:	3708      	adds	r7, #8
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}
 8012ff4:	0802fcb0 	.word	0x0802fcb0

08012ff8 <_ZN8touchgfx8LCD16bppD0Ev>:
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b082      	sub	sp, #8
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f7ff ffe7 	bl	8012fd4 <_ZN8touchgfx8LCD16bppD1Ev>
 8013006:	218c      	movs	r1, #140	@ 0x8c
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f018 fdaa 	bl	802bb62 <_ZdlPvj>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	4618      	mov	r0, r3
 8013012:	3708      	adds	r7, #8
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <_Z41__static_initialization_and_destruction_1v>:
 8013018:	b580      	push	{r7, lr}
 801301a:	af00      	add	r7, sp, #0
static TouchGFXHAL hal(dma, display, tc, 240, 296);
 801301c:	4809      	ldr	r0, [pc, #36]	@ (8013044 <_Z41__static_initialization_and_destruction_1v+0x2c>)
 801301e:	f7fe fdbb 	bl	8011b98 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013022:	4809      	ldr	r0, [pc, #36]	@ (8013048 <_Z41__static_initialization_and_destruction_1v+0x30>)
 8013024:	f7fc f8e8 	bl	800f1f8 <_ZN23ApplicationFontProviderD1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8013028:	4808      	ldr	r0, [pc, #32]	@ (801304c <_Z41__static_initialization_and_destruction_1v+0x34>)
 801302a:	f7ff ffb1 	bl	8012f90 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
static LCD16bpp display;
 801302e:	4808      	ldr	r0, [pc, #32]	@ (8013050 <_Z41__static_initialization_and_destruction_1v+0x38>)
 8013030:	f7ff ffd0 	bl	8012fd4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8013034:	4807      	ldr	r0, [pc, #28]	@ (8013054 <_Z41__static_initialization_and_destruction_1v+0x3c>)
 8013036:	f7fe ffbd 	bl	8011fb4 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801303a:	4807      	ldr	r0, [pc, #28]	@ (8013058 <_Z41__static_initialization_and_destruction_1v+0x40>)
 801303c:	f7fe fa48 	bl	80114d0 <_ZN20STM32TouchControllerD1Ev>
}
 8013040:	bf00      	nop
 8013042:	bd80      	pop	{r7, pc}
 8013044:	2005b930 	.word	0x2005b930
 8013048:	20000018 	.word	0x20000018
 801304c:	2005b910 	.word	0x2005b910
 8013050:	2005b884 	.word	0x2005b884
 8013054:	2005aae4 	.word	0x2005aae4
 8013058:	2005aae0 	.word	0x2005aae0

0801305c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013064:	2301      	movs	r3, #1
    }
 8013066:	4618      	mov	r0, r3
 8013068:	370c      	adds	r7, #12
 801306a:	46bd      	mov	sp, r7
 801306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013070:	4770      	bx	lr

08013072 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8013072:	b480      	push	{r7}
 8013074:	b083      	sub	sp, #12
 8013076:	af00      	add	r7, sp, #0
 8013078:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801307a:	230c      	movs	r3, #12
    }
 801307c:	4618      	mov	r0, r3
 801307e:	370c      	adds	r7, #12
 8013080:	46bd      	mov	sp, r7
 8013082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013086:	4770      	bx	lr

08013088 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8013088:	b480      	push	{r7}
 801308a:	b083      	sub	sp, #12
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	460b      	mov	r3, r1
 8013092:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013094:	887a      	ldrh	r2, [r7, #2]
 8013096:	4613      	mov	r3, r2
 8013098:	005b      	lsls	r3, r3, #1
 801309a:	4413      	add	r3, r2
 801309c:	009b      	lsls	r3, r3, #2
 801309e:	3308      	adds	r3, #8
 80130a0:	687a      	ldr	r2, [r7, #4]
 80130a2:	4413      	add	r3, r2
    }
 80130a4:	4618      	mov	r0, r3
 80130a6:	370c      	adds	r7, #12
 80130a8:	46bd      	mov	sp, r7
 80130aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ae:	4770      	bx	lr

080130b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80130b0:	b480      	push	{r7}
 80130b2:	b083      	sub	sp, #12
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	460b      	mov	r3, r1
 80130ba:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80130bc:	887a      	ldrh	r2, [r7, #2]
 80130be:	4613      	mov	r3, r2
 80130c0:	005b      	lsls	r3, r3, #1
 80130c2:	4413      	add	r3, r2
 80130c4:	009b      	lsls	r3, r3, #2
 80130c6:	3308      	adds	r3, #8
 80130c8:	687a      	ldr	r2, [r7, #4]
 80130ca:	4413      	add	r3, r2
    }
 80130cc:	4618      	mov	r0, r3
 80130ce:	370c      	adds	r7, #12
 80130d0:	46bd      	mov	sp, r7
 80130d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d6:	4770      	bx	lr

080130d8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80130d8:	b480      	push	{r7}
 80130da:	b083      	sub	sp, #12
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80130e0:	2301      	movs	r3, #1
    }
 80130e2:	4618      	mov	r0, r3
 80130e4:	370c      	adds	r7, #12
 80130e6:	46bd      	mov	sp, r7
 80130e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ec:	4770      	bx	lr

080130ee <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80130ee:	b480      	push	{r7}
 80130f0:	b083      	sub	sp, #12
 80130f2:	af00      	add	r7, sp, #0
 80130f4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80130f6:	f44f 7305 	mov.w	r3, #532	@ 0x214
    }
 80130fa:	4618      	mov	r0, r3
 80130fc:	370c      	adds	r7, #12
 80130fe:	46bd      	mov	sp, r7
 8013100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013104:	4770      	bx	lr

08013106 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013106:	b480      	push	{r7}
 8013108:	b083      	sub	sp, #12
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
 801310e:	460b      	mov	r3, r1
 8013110:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013112:	887b      	ldrh	r3, [r7, #2]
 8013114:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8013118:	fb02 f303 	mul.w	r3, r2, r3
 801311c:	3308      	adds	r3, #8
 801311e:	687a      	ldr	r2, [r7, #4]
 8013120:	4413      	add	r3, r2
    }
 8013122:	4618      	mov	r0, r3
 8013124:	370c      	adds	r7, #12
 8013126:	46bd      	mov	sp, r7
 8013128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312c:	4770      	bx	lr

0801312e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801312e:	b480      	push	{r7}
 8013130:	b083      	sub	sp, #12
 8013132:	af00      	add	r7, sp, #0
 8013134:	6078      	str	r0, [r7, #4]
 8013136:	460b      	mov	r3, r1
 8013138:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801313a:	887b      	ldrh	r3, [r7, #2]
 801313c:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8013140:	fb02 f303 	mul.w	r3, r2, r3
 8013144:	3308      	adds	r3, #8
 8013146:	687a      	ldr	r2, [r7, #4]
 8013148:	4413      	add	r3, r2
    }
 801314a:	4618      	mov	r0, r3
 801314c:	370c      	adds	r7, #12
 801314e:	46bd      	mov	sp, r7
 8013150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013154:	4770      	bx	lr

08013156 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013156:	b480      	push	{r7}
 8013158:	b083      	sub	sp, #12
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801315e:	2301      	movs	r3, #1
    }
 8013160:	4618      	mov	r0, r3
 8013162:	370c      	adds	r7, #12
 8013164:	46bd      	mov	sp, r7
 8013166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316a:	4770      	bx	lr

0801316c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801316c:	b480      	push	{r7}
 801316e:	b083      	sub	sp, #12
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013174:	2310      	movs	r3, #16
    }
 8013176:	4618      	mov	r0, r3
 8013178:	370c      	adds	r7, #12
 801317a:	46bd      	mov	sp, r7
 801317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013180:	4770      	bx	lr

08013182 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013182:	b480      	push	{r7}
 8013184:	b083      	sub	sp, #12
 8013186:	af00      	add	r7, sp, #0
 8013188:	6078      	str	r0, [r7, #4]
 801318a:	460b      	mov	r3, r1
 801318c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801318e:	887b      	ldrh	r3, [r7, #2]
 8013190:	011b      	lsls	r3, r3, #4
 8013192:	3308      	adds	r3, #8
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	4413      	add	r3, r2
    }
 8013198:	4618      	mov	r0, r3
 801319a:	370c      	adds	r7, #12
 801319c:	46bd      	mov	sp, r7
 801319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a2:	4770      	bx	lr

080131a4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	460b      	mov	r3, r1
 80131ae:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80131b0:	887b      	ldrh	r3, [r7, #2]
 80131b2:	011b      	lsls	r3, r3, #4
 80131b4:	3308      	adds	r3, #8
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	4413      	add	r3, r2
    }
 80131ba:	4618      	mov	r0, r3
 80131bc:	370c      	adds	r7, #12
 80131be:	46bd      	mov	sp, r7
 80131c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c4:	4770      	bx	lr

080131c6 <_GLOBAL__sub_I_touchgfx_init>:
 80131c6:	b580      	push	{r7, lr}
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	f7ff feb9 	bl	8012f40 <_Z41__static_initialization_and_destruction_0v>
 80131ce:	bd80      	pop	{r7, pc}

080131d0 <_GLOBAL__sub_D_touchgfx_init>:
 80131d0:	b580      	push	{r7, lr}
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	f7ff ff20 	bl	8013018 <_Z41__static_initialization_and_destruction_1v>
 80131d8:	bd80      	pop	{r7, pc}

080131da <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 80131da:	b480      	push	{r7}
 80131dc:	b085      	sub	sp, #20
 80131de:	af00      	add	r7, sp, #0
 80131e0:	60f8      	str	r0, [r7, #12]
 80131e2:	4608      	mov	r0, r1
 80131e4:	4611      	mov	r1, r2
 80131e6:	461a      	mov	r2, r3
 80131e8:	4603      	mov	r3, r0
 80131ea:	817b      	strh	r3, [r7, #10]
 80131ec:	460b      	mov	r3, r1
 80131ee:	813b      	strh	r3, [r7, #8]
 80131f0:	4613      	mov	r3, r2
 80131f2:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	897a      	ldrh	r2, [r7, #10]
 80131f8:	801a      	strh	r2, [r3, #0]
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	893a      	ldrh	r2, [r7, #8]
 80131fe:	805a      	strh	r2, [r3, #2]
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	88fa      	ldrh	r2, [r7, #6]
 8013204:	809a      	strh	r2, [r3, #4]
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	8b3a      	ldrh	r2, [r7, #24]
 801320a:	80da      	strh	r2, [r3, #6]
    {
    }
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	4618      	mov	r0, r3
 8013210:	3714      	adds	r7, #20
 8013212:	46bd      	mov	sp, r7
 8013214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013218:	4770      	bx	lr

0801321a <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 801321a:	b480      	push	{r7}
 801321c:	b083      	sub	sp, #12
 801321e:	af00      	add	r7, sp, #0
 8013220:	6078      	str	r0, [r7, #4]
        return rect.width;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8013228:	4618      	mov	r0, r3
 801322a:	370c      	adds	r7, #12
 801322c:	46bd      	mov	sp, r7
 801322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013232:	4770      	bx	lr

08013234 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8013234:	b480      	push	{r7}
 8013236:	b083      	sub	sp, #12
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
        return rect.height;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8013242:	4618      	mov	r0, r3
 8013244:	370c      	adds	r7, #12
 8013246:	46bd      	mov	sp, r7
 8013248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324c:	4770      	bx	lr
	...

08013250 <_ZN8touchgfx14VectorRendererD1Ev>:
 */
class VectorRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorRenderer()
 8013250:	b480      	push	{r7}
 8013252:	b083      	sub	sp, #12
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
    {
 8013258:	4a04      	ldr	r2, [pc, #16]	@ (801326c <_ZN8touchgfx14VectorRendererD1Ev+0x1c>)
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	601a      	str	r2, [r3, #0]
    }
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	4618      	mov	r0, r3
 8013262:	370c      	adds	r7, #12
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr
 801326c:	0802f120 	.word	0x0802f120

08013270 <_ZN8touchgfx14VectorRendererD0Ev>:
    virtual ~VectorRenderer()
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
    }
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f7ff ffe9 	bl	8013250 <_ZN8touchgfx14VectorRendererD1Ev>
 801327e:	2104      	movs	r1, #4
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	f018 fc6e 	bl	802bb62 <_ZdlPvj>
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	4618      	mov	r0, r3
 801328a:	3708      	adds	r7, #8
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8013290:	b480      	push	{r7}
 8013292:	b083      	sub	sp, #12
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 801329c:	4618      	mov	r0, r3
 801329e:	370c      	adds	r7, #12
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr

080132a8 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
 80132b0:	6039      	str	r1, [r7, #0]
    {
 80132b2:	4a08      	ldr	r2, [pc, #32]	@ (80132d4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	601a      	str	r2, [r3, #0]
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	3304      	adds	r3, #4
 80132bc:	4618      	mov	r0, r3
 80132be:	f7fe fd5d 	bl	8011d7c <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 80132c2:	6839      	ldr	r1, [r7, #0]
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 f827 	bl	8013318 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	4618      	mov	r0, r3
 80132ce:	3708      	adds	r7, #8
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	0802f020 	.word	0x0802f020

080132d8 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 80132d8:	b480      	push	{r7}
 80132da:	b083      	sub	sp, #12
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
    {
 80132e0:	4a04      	ldr	r2, [pc, #16]	@ (80132f4 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	601a      	str	r2, [r3, #0]
    }
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	4618      	mov	r0, r3
 80132ea:	370c      	adds	r7, #12
 80132ec:	46bd      	mov	sp, r7
 80132ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f2:	4770      	bx	lr
 80132f4:	0802f020 	.word	0x0802f020

080132f8 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
    }
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f7ff ffe9 	bl	80132d8 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8013306:	2108      	movs	r1, #8
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f018 fc2a 	bl	802bb62 <_ZdlPvj>
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	4618      	mov	r0, r3
 8013312:	3708      	adds	r7, #8
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8013318:	b480      	push	{r7}
 801331a:	b083      	sub	sp, #12
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	683a      	ldr	r2, [r7, #0]
 8013326:	605a      	str	r2, [r3, #4]
    }
 8013328:	bf00      	nop
 801332a:	370c      	adds	r7, #12
 801332c:	46bd      	mov	sp, r7
 801332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013332:	4770      	bx	lr

08013334 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8013334:	b480      	push	{r7}
 8013336:	b083      	sub	sp, #12
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 801333c:	4a06      	ldr	r2, [pc, #24]	@ (8013358 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	601a      	str	r2, [r3, #0]
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2200      	movs	r2, #0
 8013346:	809a      	strh	r2, [r3, #4]
    {
    }
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	4618      	mov	r0, r3
 801334c:	370c      	adds	r7, #12
 801334e:	46bd      	mov	sp, r7
 8013350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop
 8013358:	0802f000 	.word	0x0802f000

0801335c <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 801335c:	b480      	push	{r7}
 801335e:	b083      	sub	sp, #12
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
    {
 8013364:	4a04      	ldr	r2, [pc, #16]	@ (8013378 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	601a      	str	r2, [r3, #0]
    }
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	4618      	mov	r0, r3
 801336e:	370c      	adds	r7, #12
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr
 8013378:	0802f000 	.word	0x0802f000

0801337c <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
    }
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7ff ffe9 	bl	801335c <_ZN8touchgfx15AbstractPainterD1Ev>
 801338a:	2108      	movs	r1, #8
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f018 fbe8 	bl	802bb62 <_ZdlPvj>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	4618      	mov	r0, r3
 8013396:	3708      	adds	r7, #8
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}

0801339c <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 80133a4:	2300      	movs	r3, #0
    }
 80133a6:	4618      	mov	r0, r3
 80133a8:	370c      	adds	r7, #12
 80133aa:	46bd      	mov	sp, r7
 80133ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b0:	4770      	bx	lr

080133b2 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 80133b2:	b480      	push	{r7}
 80133b4:	b083      	sub	sp, #12
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
 80133ba:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	809a      	strh	r2, [r3, #4]
        return true;
 80133c6:	2301      	movs	r3, #1
    }
 80133c8:	4618      	mov	r0, r3
 80133ca:	370c      	adds	r7, #12
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 80133d4:	b480      	push	{r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
    {
        return;
 80133dc:	bf00      	nop
    }
 80133de:	370c      	adds	r7, #12
 80133e0:	46bd      	mov	sp, r7
 80133e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e6:	4770      	bx	lr

080133e8 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>:
 */
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b082      	sub	sp, #8
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
        : AbstractPainter(),
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7ff ff9e 	bl	8013334 <_ZN8touchgfx15AbstractPainterC1Ev>
 80133f8:	4a14      	ldr	r2, [pc, #80]	@ (801344c <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev+0x64>)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	601a      	str	r2, [r3, #0]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2200      	movs	r2, #0
 8013402:	811a      	strh	r2, [r3, #8]
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2264      	movs	r2, #100	@ 0x64
 8013408:	815a      	strh	r2, [r3, #10]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	2200      	movs	r2, #0
 801340e:	60da      	str	r2, [r3, #12]
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2200      	movs	r2, #0
 8013414:	741a      	strb	r2, [r3, #16]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2200      	movs	r2, #0
 801341a:	745a      	strb	r2, [r3, #17]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2200      	movs	r2, #0
 8013420:	749a      	strb	r2, [r3, #18]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f04f 0200 	mov.w	r2, #0
 8013428:	615a      	str	r2, [r3, #20]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f04f 0200 	mov.w	r2, #0
 8013430:	619a      	str	r2, [r3, #24]
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f04f 0200 	mov.w	r2, #0
 8013438:	61da      	str	r2, [r3, #28]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f04f 0200 	mov.w	r2, #0
 8013440:	621a      	str	r2, [r3, #32]
    {
    }
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	4618      	mov	r0, r3
 8013446:	3708      	adds	r7, #8
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}
 801344c:	0802efe0 	.word	0x0802efe0

08013450 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterLinearGradient()
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
    {
 8013458:	4a05      	ldr	r2, [pc, #20]	@ (8013470 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev+0x20>)
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	601a      	str	r2, [r3, #0]
    }
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	4618      	mov	r0, r3
 8013462:	f7ff ff7b 	bl	801335c <_ZN8touchgfx15AbstractPainterD1Ev>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	4618      	mov	r0, r3
 801346a:	3708      	adds	r7, #8
 801346c:	46bd      	mov	sp, r7
 801346e:	bd80      	pop	{r7, pc}
 8013470:	0802efe0 	.word	0x0802efe0

08013474 <_ZN8touchgfx29AbstractPainterLinearGradientD0Ev>:
    virtual ~AbstractPainterLinearGradient()
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
    }
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f7ff ffe7 	bl	8013450 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 8013482:	2124      	movs	r1, #36	@ 0x24
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f018 fb6c 	bl	802bb62 <_ZdlPvj>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	4618      	mov	r0, r3
 801348e:	3708      	adds	r7, #8
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}

08013494 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8013494:	b480      	push	{r7}
 8013496:	b083      	sub	sp, #12
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
 801349c:	460b      	mov	r3, r1
 801349e:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	78fa      	ldrb	r2, [r7, #3]
 80134a4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 80134a8:	bf00      	nop
 80134aa:	370c      	adds	r7, #12
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr

080134b4 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 80134c2:	4618      	mov	r0, r3
 80134c4:	370c      	adds	r7, #12
 80134c6:	46bd      	mov	sp, r7
 80134c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134cc:	4770      	bx	lr

080134ce <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80134ce:	b590      	push	{r4, r7, lr}
 80134d0:	b085      	sub	sp, #20
 80134d2:	af02      	add	r7, sp, #8
 80134d4:	6078      	str	r0, [r7, #4]
 80134d6:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	4618      	mov	r0, r3
 80134dc:	f7ff fe9d 	bl	801321a <_ZNK8touchgfx8Drawable8getWidthEv>
 80134e0:	4603      	mov	r3, r0
 80134e2:	461c      	mov	r4, r3
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7ff fea4 	bl	8013234 <_ZNK8touchgfx8Drawable9getHeightEv>
 80134ec:	4603      	mov	r3, r0
 80134ee:	9300      	str	r3, [sp, #0]
 80134f0:	4623      	mov	r3, r4
 80134f2:	2200      	movs	r2, #0
 80134f4:	2100      	movs	r1, #0
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f7ff fe6f 	bl	80131da <_ZN8touchgfx4RectC1Essss>
    }
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	370c      	adds	r7, #12
 8013500:	46bd      	mov	sp, r7
 8013502:	bd90      	pop	{r4, r7, pc}

08013504 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f7fc fecb 	bl	80102aa <_ZN8touchgfx4RectC1Ev>
    }
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	3708      	adds	r7, #8
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}

0801351c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 801351c:	b580      	push	{r7, lr}
 801351e:	b084      	sub	sp, #16
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	4618      	mov	r0, r3
 8013528:	f7ff ff04 	bl	8013334 <_ZN8touchgfx15AbstractPainterC1Ev>
 801352c:	4a26      	ldr	r2, [pc, #152]	@ (80135c8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	601a      	str	r2, [r3, #0]
 8013532:	2300      	movs	r3, #0
 8013534:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8013536:	f7fc fa27 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 801353a:	4603      	mov	r3, r0
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	322c      	adds	r2, #44	@ 0x2c
 8013540:	6812      	ldr	r2, [r2, #0]
 8013542:	4618      	mov	r0, r3
 8013544:	4790      	blx	r2
 8013546:	4603      	mov	r3, r0
 8013548:	461a      	mov	r2, r3
 801354a:	7bfb      	ldrb	r3, [r7, #15]
 801354c:	4293      	cmp	r3, r2
 801354e:	bf0c      	ite	eq
 8013550:	2301      	moveq	r3, #1
 8013552:	2300      	movne	r3, #0
 8013554:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8013556:	f7fb ff5d 	bl	800f414 <_ZN8touchgfx3HAL11getInstanceEv>
 801355a:	4603      	mov	r3, r0
 801355c:	4618      	mov	r0, r3
 801355e:	f7ff fe97 	bl	8013290 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8013562:	4603      	mov	r3, r0
 8013564:	2b00      	cmp	r3, #0
 8013566:	bf14      	ite	ne
 8013568:	2301      	movne	r3, #1
 801356a:	2300      	moveq	r3, #0
 801356c:	b2db      	uxtb	r3, r3
 801356e:	2b00      	cmp	r3, #0
 8013570:	d01b      	beq.n	80135aa <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8013572:	f7fb ff4f 	bl	800f414 <_ZN8touchgfx3HAL11getInstanceEv>
 8013576:	4603      	mov	r3, r0
 8013578:	4618      	mov	r0, r3
 801357a:	f7ff fe89 	bl	8013290 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 801357e:	4603      	mov	r3, r0
 8013580:	681a      	ldr	r2, [r3, #0]
 8013582:	322c      	adds	r2, #44	@ 0x2c
 8013584:	6812      	ldr	r2, [r2, #0]
 8013586:	4618      	mov	r0, r3
 8013588:	4790      	blx	r2
 801358a:	4603      	mov	r3, r0
 801358c:	461a      	mov	r2, r3
 801358e:	7bfb      	ldrb	r3, [r7, #15]
 8013590:	4293      	cmp	r3, r2
 8013592:	bf0c      	ite	eq
 8013594:	2301      	moveq	r3, #1
 8013596:	2300      	movne	r3, #0
 8013598:	b2da      	uxtb	r2, r3
 801359a:	7bbb      	ldrb	r3, [r7, #14]
 801359c:	4313      	orrs	r3, r2
 801359e:	b2db      	uxtb	r3, r3
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	bf14      	ite	ne
 80135a4:	2301      	movne	r3, #1
 80135a6:	2300      	moveq	r3, #0
 80135a8:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 80135aa:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d105      	bne.n	80135bc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 80135b0:	4b06      	ldr	r3, [pc, #24]	@ (80135cc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 80135b2:	4a07      	ldr	r2, [pc, #28]	@ (80135d0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 80135b4:	212c      	movs	r1, #44	@ 0x2c
 80135b6:	4807      	ldr	r0, [pc, #28]	@ (80135d4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 80135b8:	f019 f9c8 	bl	802c94c <__assert_func>
    }
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	4618      	mov	r0, r3
 80135c0:	3710      	adds	r7, #16
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd80      	pop	{r7, pc}
 80135c6:	bf00      	nop
 80135c8:	0802efc0 	.word	0x0802efc0
 80135cc:	0802e5e8 	.word	0x0802e5e8
 80135d0:	0802e648 	.word	0x0802e648
 80135d4:	0802e684 	.word	0x0802e684

080135d8 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 80135d8:	b580      	push	{r7, lr}
 80135da:	b082      	sub	sp, #8
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	4a05      	ldr	r2, [pc, #20]	@ (80135f8 <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	601a      	str	r2, [r3, #0]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7ff feb7 	bl	801335c <_ZN8touchgfx15AbstractPainterD1Ev>
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	4618      	mov	r0, r3
 80135f2:	3708      	adds	r7, #8
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	0802efc0 	.word	0x0802efc0

080135fc <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f7ff ffe7 	bl	80135d8 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 801360a:	2108      	movs	r1, #8
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f018 faa8 	bl	802bb62 <_ZdlPvj>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	4618      	mov	r0, r3
 8013616:	3708      	adds	r7, #8
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}

0801361c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4618      	mov	r0, r3
 801362a:	f7ff ff77 	bl	801351c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	3308      	adds	r3, #8
 8013632:	6839      	ldr	r1, [r7, #0]
 8013634:	4618      	mov	r0, r3
 8013636:	f7ff fe37 	bl	80132a8 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 801363a:	4a05      	ldr	r2, [pc, #20]	@ (8013650 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	601a      	str	r2, [r3, #0]
 8013640:	4a04      	ldr	r2, [pc, #16]	@ (8013654 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	609a      	str	r2, [r3, #8]
    {
    }
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	4618      	mov	r0, r3
 801364a:	3708      	adds	r7, #8
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}
 8013650:	0802f59c 	.word	0x0802f59c
 8013654:	0802f5c0 	.word	0x0802f5c0

08013658 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * The default mode is non-zero filling.
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
 8013658:	b480      	push	{r7}
 801365a:	b083      	sub	sp, #12
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	460b      	mov	r3, r1
 8013662:	70fb      	strb	r3, [r7, #3]
    {
        drawMode = mode;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	78fa      	ldrb	r2, [r7, #3]
 8013668:	771a      	strb	r2, [r3, #28]
    }
 801366a:	bf00      	nop
 801366c:	370c      	adds	r7, #12
 801366e:	46bd      	mov	sp, r7
 8013670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013674:	4770      	bx	lr

08013676 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
 8013676:	b480      	push	{r7}
 8013678:	b083      	sub	sp, #12
 801367a:	af00      	add	r7, sp, #0
 801367c:	6078      	str	r0, [r7, #4]
 801367e:	ed87 0a00 	vstr	s0, [r7]
    {
        strokeMiterLimit = miterLimit;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	683a      	ldr	r2, [r7, #0]
 8013686:	621a      	str	r2, [r3, #32]
    }
 8013688:	bf00      	nop
 801368a:	370c      	adds	r7, #12
 801368c:	46bd      	mov	sp, r7
 801368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013692:	4770      	bx	lr

08013694 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
 8013694:	b480      	push	{r7}
 8013696:	b083      	sub	sp, #12
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	460b      	mov	r3, r1
 801369e:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineJoin = lineJoin;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	78fa      	ldrb	r2, [r7, #3]
 80136a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 80136a8:	bf00      	nop
 80136aa:	370c      	adds	r7, #12
 80136ac:	46bd      	mov	sp, r7
 80136ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b2:	4770      	bx	lr

080136b4 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
 80136b4:	b480      	push	{r7}
 80136b6:	b083      	sub	sp, #12
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	460b      	mov	r3, r1
 80136be:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineCap = lineCap;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	78fa      	ldrb	r2, [r7, #3]
 80136c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 80136c8:	bf00      	nop
 80136ca:	370c      	adds	r7, #12
 80136cc:	46bd      	mov	sp, r7
 80136ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d2:	4770      	bx	lr

080136d4 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    void drawStrokeBackwards(uint32_t cmdInxPathStart, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points, bool drawLineCaps, StrokeCanvas& canvas) const;
    void getPreviousDestination(float& positionX, float& positionY, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points) const;

    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
 80136d4:	b480      	push	{r7}
 80136d6:	b083      	sub	sp, #12
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	6039      	str	r1, [r7, #0]
        {
            return true;
 80136de:	2301      	movs	r3, #1
        }
 80136e0:	4618      	mov	r0, r3
 80136e2:	370c      	adds	r7, #12
 80136e4:	46bd      	mov	sp, r7
 80136e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ea:	4770      	bx	lr

080136ec <_ZN8touchgfx23CWRVectorRendererRGB56516getLinearPainterEv>:
 * Implementation of the CWRVectorRendererInterface
 * for the RGB565 framebuffer format.
 */
class CWRVectorRendererRGB565 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
 80136ec:	b480      	push	{r7}
 80136ee:	b083      	sub	sp, #12
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
    {
        return linearPainter;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	3398      	adds	r3, #152	@ 0x98
    }
 80136f8:	4618      	mov	r0, r3
 80136fa:	370c      	adds	r7, #12
 80136fc:	46bd      	mov	sp, r7
 80136fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013702:	4770      	bx	lr

08013704 <_ZN8touchgfx23CWRVectorRendererRGB56520getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
 8013704:	b480      	push	{r7}
 8013706:	b083      	sub	sp, #12
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	338c      	adds	r3, #140	@ 0x8c
    }
 8013710:	4618      	mov	r0, r3
 8013712:	370c      	adds	r7, #12
 8013714:	46bd      	mov	sp, r7
 8013716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371a:	4770      	bx	lr

0801371c <_ZN8touchgfx23CWRVectorRendererRGB56515getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
 801371c:	b480      	push	{r7}
 801371e:	b083      	sub	sp, #12
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	3384      	adds	r3, #132	@ 0x84
    }
 8013728:	4618      	mov	r0, r3
 801372a:	370c      	adds	r7, #12
 801372c:	46bd      	mov	sp, r7
 801372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013732:	4770      	bx	lr

08013734 <_ZN8touchgfx14VectorRendererC1Ev>:
class VectorRenderer
 8013734:	b480      	push	{r7}
 8013736:	b083      	sub	sp, #12
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	4a04      	ldr	r2, [pc, #16]	@ (8013750 <_ZN8touchgfx14VectorRendererC1Ev+0x1c>)
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	601a      	str	r2, [r3, #0]
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	4618      	mov	r0, r3
 8013746:	370c      	adds	r7, #12
 8013748:	46bd      	mov	sp, r7
 801374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374e:	4770      	bx	lr
 8013750:	0802f120 	.word	0x0802f120

08013754 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8013754:	b580      	push	{r7, lr}
 8013756:	b082      	sub	sp, #8
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	4a05      	ldr	r2, [pc, #20]	@ (8013774 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	601a      	str	r2, [r3, #0]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	4618      	mov	r0, r3
 8013766:	f7fd f82f 	bl	80107c8 <_ZN8touchgfx6WidgetD1Ev>
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	4618      	mov	r0, r3
 801376e:	3708      	adds	r7, #8
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}
 8013774:	0802f634 	.word	0x0802f634

08013778 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f7ff ffe7 	bl	8013754 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8013786:	212c      	movs	r1, #44	@ 0x2c
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f018 f9ea 	bl	802bb62 <_ZdlPvj>
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	4618      	mov	r0, r3
 8013792:	3708      	adds	r7, #8
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}

08013798 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	4618      	mov	r0, r3
 80137a4:	f003 fdee 	bl	8017384 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80137a8:	4a03      	ldr	r2, [pc, #12]	@ (80137b8 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev+0x20>)
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	601a      	str	r2, [r3, #0]
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	4618      	mov	r0, r3
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}
 80137b8:	0802ef48 	.word	0x0802ef48

080137bc <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
 80137c4:	4a05      	ldr	r2, [pc, #20]	@ (80137dc <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev+0x20>)
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	601a      	str	r2, [r3, #0]
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7ff ffc1 	bl	8013754 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	4618      	mov	r0, r3
 80137d6:	3708      	adds	r7, #8
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	0802ef48 	.word	0x0802ef48

080137e0 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f7ff ffe7 	bl	80137bc <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 80137ee:	212c      	movs	r1, #44	@ 0x2c
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f018 f9b6 	bl	802bb62 <_ZdlPvj>
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4618      	mov	r0, r3
 80137fa:	3708      	adds	r7, #8
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}

08013800 <_ZN8touchgfx17CWRVectorRendererC1Ev>:
class CWRVectorRenderer : public VectorRenderer
 8013800:	b580      	push	{r7, lr}
 8013802:	b082      	sub	sp, #8
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	4618      	mov	r0, r3
 801380c:	f7ff ff92 	bl	8013734 <_ZN8touchgfx14VectorRendererC1Ev>
 8013810:	4a10      	ldr	r2, [pc, #64]	@ (8013854 <_ZN8touchgfx17CWRVectorRendererC1Ev+0x54>)
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	601a      	str	r2, [r3, #0]
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	3304      	adds	r3, #4
 801381a:	4618      	mov	r0, r3
 801381c:	f7fc fd45 	bl	80102aa <_ZN8touchgfx4RectC1Ev>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	330c      	adds	r3, #12
 8013824:	4618      	mov	r0, r3
 8013826:	f7fc fd40 	bl	80102aa <_ZN8touchgfx4RectC1Ev>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	3326      	adds	r3, #38	@ 0x26
 801382e:	4618      	mov	r0, r3
 8013830:	f7fc fd3b 	bl	80102aa <_ZN8touchgfx4RectC1Ev>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	3334      	adds	r3, #52	@ 0x34
 8013838:	4618      	mov	r0, r3
 801383a:	f007 fc98 	bl	801b16e <_ZN8touchgfx9Matrix3x3C1Ev>
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	3358      	adds	r3, #88	@ 0x58
 8013842:	4618      	mov	r0, r3
 8013844:	f7ff ffa8 	bl	8013798 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	4618      	mov	r0, r3
 801384c:	3708      	adds	r7, #8
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}
 8013852:	bf00      	nop
 8013854:	0802f5e8 	.word	0x0802f5e8

08013858 <_ZN8touchgfx17CWRVectorRendererD1Ev>:
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	4a08      	ldr	r2, [pc, #32]	@ (8013884 <_ZN8touchgfx17CWRVectorRendererD1Ev+0x2c>)
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	601a      	str	r2, [r3, #0]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	3358      	adds	r3, #88	@ 0x58
 801386a:	4618      	mov	r0, r3
 801386c:	f7ff ffa6 	bl	80137bc <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	4618      	mov	r0, r3
 8013874:	f7ff fcec 	bl	8013250 <_ZN8touchgfx14VectorRendererD1Ev>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	4618      	mov	r0, r3
 801387c:	3708      	adds	r7, #8
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	0802f5e8 	.word	0x0802f5e8

08013888 <_ZN8touchgfx17CWRVectorRendererD0Ev>:
 8013888:	b580      	push	{r7, lr}
 801388a:	b082      	sub	sp, #8
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f7ff ffe1 	bl	8013858 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 8013896:	2184      	movs	r1, #132	@ 0x84
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f018 f962 	bl	802bb62 <_ZdlPvj>
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	4618      	mov	r0, r3
 80138a2:	3708      	adds	r7, #8
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}

080138a8 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b082      	sub	sp, #8
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	4a09      	ldr	r2, [pc, #36]	@ (80138d8 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	601a      	str	r2, [r3, #0]
 80138b6:	4a09      	ldr	r2, [pc, #36]	@ (80138dc <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	609a      	str	r2, [r3, #8]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	3308      	adds	r3, #8
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7ff fd09 	bl	80132d8 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7ff fe85 	bl	80135d8 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	4618      	mov	r0, r3
 80138d2:	3708      	adds	r7, #8
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}
 80138d8:	0802f59c 	.word	0x0802f59c
 80138dc:	0802f5c0 	.word	0x0802f5c0

080138e0 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 80138e0:	f1a0 0008 	sub.w	r0, r0, #8
 80138e4:	e7e0      	b.n	80138a8 <_ZN8touchgfx13PainterRGB565D1Ev>
 80138e6:	bf00      	nop

080138e8 <_ZN8touchgfx13PainterRGB565D0Ev>:
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b082      	sub	sp, #8
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f7ff ffd9 	bl	80138a8 <_ZN8touchgfx13PainterRGB565D1Ev>
 80138f6:	2114      	movs	r1, #20
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f018 f932 	bl	802bb62 <_ZdlPvj>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	4618      	mov	r0, r3
 8013902:	3708      	adds	r7, #8
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8013908:	f1a0 0008 	sub.w	r0, r0, #8
 801390c:	e7ec      	b.n	80138e8 <_ZN8touchgfx13PainterRGB565D0Ev>
	...

08013910 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>:
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB565LinearGradient : public AbstractPainterLinearGradient
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	4618      	mov	r0, r3
 801391c:	f7ff fd64 	bl	80133e8 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>
 8013920:	4a03      	ldr	r2, [pc, #12]	@ (8013930 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev+0x20>)
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	601a      	str	r2, [r3, #0]
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	4618      	mov	r0, r3
 801392a:	3708      	adds	r7, #8
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}
 8013930:	0802f57c 	.word	0x0802f57c

08013934 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>:
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	4a05      	ldr	r2, [pc, #20]	@ (8013954 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev+0x20>)
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	601a      	str	r2, [r3, #0]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	4618      	mov	r0, r3
 8013946:	f7ff fd83 	bl	8013450 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	4618      	mov	r0, r3
 801394e:	3708      	adds	r7, #8
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	0802f57c 	.word	0x0802f57c

08013958 <_ZN8touchgfx27PainterRGB565LinearGradientD0Ev>:
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f7ff ffe7 	bl	8013934 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 8013966:	2124      	movs	r1, #36	@ 0x24
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f018 f8fa 	bl	802bb62 <_ZdlPvj>
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	4618      	mov	r0, r3
 8013972:	3708      	adds	r7, #8
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}

08013978 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 8013978:	b590      	push	{r4, r7, lr}
 801397a:	b085      	sub	sp, #20
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	4618      	mov	r0, r3
 8013984:	f7ff ff3c 	bl	8013800 <_ZN8touchgfx17CWRVectorRendererC1Ev>
 8013988:	4a0c      	ldr	r2, [pc, #48]	@ (80139bc <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev+0x44>)
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	601a      	str	r2, [r3, #0]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 8013994:	f107 030c 	add.w	r3, r7, #12
 8013998:	2100      	movs	r1, #0
 801399a:	4618      	mov	r0, r3
 801399c:	f7fc fc76 	bl	801028c <_ZN8touchgfx9colortypeC1Em>
 80139a0:	68f9      	ldr	r1, [r7, #12]
 80139a2:	4620      	mov	r0, r4
 80139a4:	f7ff fe3a 	bl	801361c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	3398      	adds	r3, #152	@ 0x98
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7ff ffaf 	bl	8013910 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	4618      	mov	r0, r3
 80139b6:	3714      	adds	r7, #20
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd90      	pop	{r4, r7, pc}
 80139bc:	0802eefc 	.word	0x0802eefc

080139c0 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>:
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b082      	sub	sp, #8
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	4a0a      	ldr	r2, [pc, #40]	@ (80139f4 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev+0x34>)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	601a      	str	r2, [r3, #0]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	3398      	adds	r3, #152	@ 0x98
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7ff ffae 	bl	8013934 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	3384      	adds	r3, #132	@ 0x84
 80139dc:	4618      	mov	r0, r3
 80139de:	f7ff ff63 	bl	80138a8 <_ZN8touchgfx13PainterRGB565D1Ev>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7ff ff37 	bl	8013858 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4618      	mov	r0, r3
 80139ee:	3708      	adds	r7, #8
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}
 80139f4:	0802eefc 	.word	0x0802eefc

080139f8 <_ZN8touchgfx23CWRVectorRendererRGB565D0Ev>:
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b082      	sub	sp, #8
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f7ff ffdd 	bl	80139c0 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 8013a06:	21bc      	movs	r1, #188	@ 0xbc
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f018 f8aa 	bl	802bb62 <_ZdlPvj>
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	4618      	mov	r0, r3
 8013a12:	3708      	adds	r7, #8
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB565 renderer;
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	af00      	add	r7, sp, #0
 8013a1c:	4801      	ldr	r0, [pc, #4]	@ (8013a24 <__tcf_1+0xc>)
 8013a1e:	f7ff ffcf 	bl	80139c0 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	2005b9b4 	.word	0x2005b9b4

08013a28 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	af00      	add	r7, sp, #0
    static CWRVectorRendererRGB565 renderer;
 8013a2c:	4b11      	ldr	r3, [pc, #68]	@ (8013a74 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8013a2e:	e8d3 3faf 	lda	r3, [r3]
 8013a32:	f003 0301 	and.w	r3, r3, #1
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	bf0c      	ite	eq
 8013a3a:	2301      	moveq	r3, #1
 8013a3c:	2300      	movne	r3, #0
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d013      	beq.n	8013a6c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x44>
 8013a44:	480b      	ldr	r0, [pc, #44]	@ (8013a74 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8013a46:	f018 f88e 	bl	802bb66 <__cxa_guard_acquire>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	bf14      	ite	ne
 8013a50:	2301      	movne	r3, #1
 8013a52:	2300      	moveq	r3, #0
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d008      	beq.n	8013a6c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x44>
 8013a5a:	4807      	ldr	r0, [pc, #28]	@ (8013a78 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
 8013a5c:	f7ff ff8c 	bl	8013978 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>
 8013a60:	4806      	ldr	r0, [pc, #24]	@ (8013a7c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x54>)
 8013a62:	f018 ff91 	bl	802c988 <atexit>
 8013a66:	4803      	ldr	r0, [pc, #12]	@ (8013a74 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8013a68:	f018 f889 	bl	802bb7e <__cxa_guard_release>

    return &renderer;
 8013a6c:	4b02      	ldr	r3, [pc, #8]	@ (8013a78 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	bd80      	pop	{r7, pc}
 8013a72:	bf00      	nop
 8013a74:	2005ba70 	.word	0x2005ba70
 8013a78:	2005b9b4 	.word	0x2005b9b4
 8013a7c:	08013a19 	.word	0x08013a19

08013a80 <__NVIC_EnableIRQ>:
{
 8013a80:	b480      	push	{r7}
 8013a82:	b083      	sub	sp, #12
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	4603      	mov	r3, r0
 8013a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	db0b      	blt.n	8013aaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013a92:	79fb      	ldrb	r3, [r7, #7]
 8013a94:	f003 021f 	and.w	r2, r3, #31
 8013a98:	4907      	ldr	r1, [pc, #28]	@ (8013ab8 <__NVIC_EnableIRQ+0x38>)
 8013a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a9e:	095b      	lsrs	r3, r3, #5
 8013aa0:	2001      	movs	r0, #1
 8013aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8013aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013aaa:	bf00      	nop
 8013aac:	370c      	adds	r7, #12
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop
 8013ab8:	e000e100 	.word	0xe000e100

08013abc <__NVIC_DisableIRQ>:
{
 8013abc:	b480      	push	{r7}
 8013abe:	b083      	sub	sp, #12
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	db12      	blt.n	8013af4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013ace:	79fb      	ldrb	r3, [r7, #7]
 8013ad0:	f003 021f 	and.w	r2, r3, #31
 8013ad4:	490a      	ldr	r1, [pc, #40]	@ (8013b00 <__NVIC_DisableIRQ+0x44>)
 8013ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ada:	095b      	lsrs	r3, r3, #5
 8013adc:	2001      	movs	r0, #1
 8013ade:	fa00 f202 	lsl.w	r2, r0, r2
 8013ae2:	3320      	adds	r3, #32
 8013ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013ae8:	f3bf 8f4f 	dsb	sy
}
 8013aec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013aee:	f3bf 8f6f 	isb	sy
}
 8013af2:	bf00      	nop
}
 8013af4:	bf00      	nop
 8013af6:	370c      	adds	r7, #12
 8013af8:	46bd      	mov	sp, r7
 8013afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afe:	4770      	bx	lr
 8013b00:	e000e100 	.word	0xe000e100

08013b04 <__NVIC_SetPriority>:
{
 8013b04:	b480      	push	{r7}
 8013b06:	b083      	sub	sp, #12
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	6039      	str	r1, [r7, #0]
 8013b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	db0a      	blt.n	8013b2e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	b2da      	uxtb	r2, r3
 8013b1c:	490c      	ldr	r1, [pc, #48]	@ (8013b50 <__NVIC_SetPriority+0x4c>)
 8013b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b22:	0112      	lsls	r2, r2, #4
 8013b24:	b2d2      	uxtb	r2, r2
 8013b26:	440b      	add	r3, r1
 8013b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013b2c:	e00a      	b.n	8013b44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	b2da      	uxtb	r2, r3
 8013b32:	4908      	ldr	r1, [pc, #32]	@ (8013b54 <__NVIC_SetPriority+0x50>)
 8013b34:	79fb      	ldrb	r3, [r7, #7]
 8013b36:	f003 030f 	and.w	r3, r3, #15
 8013b3a:	3b04      	subs	r3, #4
 8013b3c:	0112      	lsls	r2, r2, #4
 8013b3e:	b2d2      	uxtb	r2, r2
 8013b40:	440b      	add	r3, r1
 8013b42:	761a      	strb	r2, [r3, #24]
}
 8013b44:	bf00      	nop
 8013b46:	370c      	adds	r7, #12
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4e:	4770      	bx	lr
 8013b50:	e000e100 	.word	0xe000e100
 8013b54:	e000ed00 	.word	0xe000ed00

08013b58 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
uint32_t frameBuf[(240 * 296 * 2 + 3) / 4 * 2] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 8013b58:	b5b0      	push	{r4, r5, r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	4618      	mov	r0, r3
 8013b64:	f001 f89f 	bl	8014ca6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8013b68:	687d      	ldr	r5, [r7, #4]
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	3368      	adds	r3, #104	@ 0x68
 8013b70:	681c      	ldr	r4, [r3, #0]
 8013b72:	f005 fd6d 	bl	8019650 <_ZN8touchgfx11Application11getInstanceEv>
 8013b76:	4603      	mov	r3, r0
 8013b78:	4619      	mov	r1, r3
 8013b7a:	4628      	mov	r0, r5
 8013b7c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	338c      	adds	r3, #140	@ 0x8c
 8013b86:	681c      	ldr	r4, [r3, #0]
 8013b88:	4a03      	ldr	r2, [pc, #12]	@ (8013b98 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	4903      	ldr	r1, [pc, #12]	@ (8013b9c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8013b8e:	47a0      	blx	r4
}
 8013b90:	bf00      	nop
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bdb0      	pop	{r4, r5, r7, pc}
 8013b98:	20022bfc 	.word	0x20022bfc
 8013b9c:	200000fc 	.word	0x200000fc

08013ba0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b082      	sub	sp, #8
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013ba8:	2109      	movs	r1, #9
 8013baa:	2076      	movs	r0, #118	@ 0x76
 8013bac:	f7ff ffaa 	bl	8013b04 <__NVIC_SetPriority>
}
 8013bb0:	bf00      	nop
 8013bb2:	3708      	adds	r7, #8
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}

08013bb8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013bc0:	2076      	movs	r0, #118	@ 0x76
 8013bc2:	f7ff ff5d 	bl	8013a80 <__NVIC_EnableIRQ>
}
 8013bc6:	bf00      	nop
 8013bc8:	3708      	adds	r7, #8
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}

08013bce <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013bce:	b580      	push	{r7, lr}
 8013bd0:	b082      	sub	sp, #8
 8013bd2:	af00      	add	r7, sp, #0
 8013bd4:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013bd6:	2076      	movs	r0, #118	@ 0x76
 8013bd8:	f7ff ff70 	bl	8013abc <__NVIC_DisableIRQ>
}
 8013bdc:	bf00      	nop
 8013bde:	3708      	adds	r7, #8
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013be4:	b480      	push	{r7}
 8013be6:	b083      	sub	sp, #12
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
}
 8013bec:	bf00      	nop
 8013bee:	370c      	adds	r7, #12
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf6:	4770      	bx	lr

08013bf8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	4618      	mov	r0, r3
 8013c04:	f001 f836 	bl	8014c74 <_ZN8touchgfx3HAL10beginFrameEv>
 8013c08:	4603      	mov	r3, r0
}
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	3708      	adds	r7, #8
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}

08013c12 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8013c12:	b580      	push	{r7, lr}
 8013c14:	b082      	sub	sp, #8
 8013c16:	af00      	add	r7, sp, #0
 8013c18:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f001 f835 	bl	8014c8c <_ZN8touchgfx3HAL8endFrameEv>
}
 8013c22:	bf00      	nop
 8013c24:	3708      	adds	r7, #8
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}
	...

08013c2c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b083      	sub	sp, #12
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8013c34:	4b03      	ldr	r3, [pc, #12]	@ (8013c44 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	370c      	adds	r7, #12
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c40:	4770      	bx	lr
 8013c42:	bf00      	nop
 8013c44:	200000fc 	.word	0x200000fc

08013c48 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8013c52:	bf00      	nop
 8013c54:	370c      	adds	r7, #12
 8013c56:	46bd      	mov	sp, r7
 8013c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5c:	4770      	bx	lr

08013c5e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013c5e:	b580      	push	{r7, lr}
 8013c60:	b082      	sub	sp, #8
 8013c62:	af00      	add	r7, sp, #0
 8013c64:	6078      	str	r0, [r7, #4]
 8013c66:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6839      	ldr	r1, [r7, #0]
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f000 ffca 	bl	8014c06 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013c72:	bf00      	nop
 8013c74:	3708      	adds	r7, #8
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}

08013c7a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013c7a:	b580      	push	{r7, lr}
 8013c7c:	b084      	sub	sp, #16
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	60f8      	str	r0, [r7, #12]
 8013c82:	60b9      	str	r1, [r7, #8]
 8013c84:	607a      	str	r2, [r7, #4]
 8013c86:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8013c88:	68f8      	ldr	r0, [r7, #12]
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	687a      	ldr	r2, [r7, #4]
 8013c8e:	68b9      	ldr	r1, [r7, #8]
 8013c90:	f001 f93d 	bl	8014f0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013c94:	4603      	mov	r3, r0
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3710      	adds	r7, #16
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}

08013c9e <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013c9e:	8880      	ldrh	r0, [r0, #4]
 8013ca0:	4770      	bx	lr

08013ca2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013ca2:	b570      	push	{r4, r5, r6, lr}
 8013ca4:	6803      	ldr	r3, [r0, #0]
 8013ca6:	4605      	mov	r5, r0
 8013ca8:	460c      	mov	r4, r1
 8013caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cac:	2100      	movs	r1, #0
 8013cae:	4798      	blx	r3
 8013cb0:	682b      	ldr	r3, [r5, #0]
 8013cb2:	4606      	mov	r6, r0
 8013cb4:	6a1b      	ldr	r3, [r3, #32]
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	4798      	blx	r3
 8013cba:	1ba4      	subs	r4, r4, r6
 8013cbc:	b2a4      	uxth	r4, r4
 8013cbe:	fbb4 f0f0 	udiv	r0, r4, r0
 8013cc2:	bd70      	pop	{r4, r5, r6, pc}

08013cc4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	8083      	strh	r3, [r0, #4]
 8013cc8:	4770      	bx	lr

08013cca <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013cca:	b510      	push	{r4, lr}
 8013ccc:	4604      	mov	r4, r0
 8013cce:	6803      	ldr	r3, [r0, #0]
 8013cd0:	8881      	ldrh	r1, [r0, #4]
 8013cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cd4:	4798      	blx	r3
 8013cd6:	88a3      	ldrh	r3, [r4, #4]
 8013cd8:	3301      	adds	r3, #1
 8013cda:	80a3      	strh	r3, [r4, #4]
 8013cdc:	bd10      	pop	{r4, pc}

08013cde <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013cde:	6803      	ldr	r3, [r0, #0]
 8013ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ce2:	4718      	bx	r3

08013ce4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013ce4:	4770      	bx	lr
	...

08013ce8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013ce8:	4a02      	ldr	r2, [pc, #8]	@ (8013cf4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013cea:	6002      	str	r2, [r0, #0]
 8013cec:	2200      	movs	r2, #0
 8013cee:	8082      	strh	r2, [r0, #4]
 8013cf0:	4770      	bx	lr
 8013cf2:	bf00      	nop
 8013cf4:	0802f160 	.word	0x0802f160

08013cf8 <_ZN8touchgfx9Container13getFirstChildEv>:
 8013cf8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8013cfa:	4770      	bx	lr

08013cfc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013cfc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013cfe:	2000      	movs	r0, #0
 8013d00:	b12b      	cbz	r3, 8013d0e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013d02:	b920      	cbnz	r0, 8013d0e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013d04:	1a5a      	subs	r2, r3, r1
 8013d06:	4250      	negs	r0, r2
 8013d08:	4150      	adcs	r0, r2
 8013d0a:	699b      	ldr	r3, [r3, #24]
 8013d0c:	e7f8      	b.n	8013d00 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8013d0e:	4770      	bx	lr

08013d10 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013d10:	2300      	movs	r3, #0
 8013d12:	6148      	str	r0, [r1, #20]
 8013d14:	618b      	str	r3, [r1, #24]
 8013d16:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013d18:	b913      	cbnz	r3, 8013d20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8013d1a:	6281      	str	r1, [r0, #40]	@ 0x28
 8013d1c:	4770      	bx	lr
 8013d1e:	4613      	mov	r3, r2
 8013d20:	699a      	ldr	r2, [r3, #24]
 8013d22:	2a00      	cmp	r2, #0
 8013d24:	d1fb      	bne.n	8013d1e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8013d26:	6199      	str	r1, [r3, #24]
 8013d28:	4770      	bx	lr

08013d2a <_ZN8touchgfx9Container9removeAllEv>:
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013d2e:	b123      	cbz	r3, 8013d3a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8013d30:	6999      	ldr	r1, [r3, #24]
 8013d32:	6281      	str	r1, [r0, #40]	@ 0x28
 8013d34:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013d38:	e7f8      	b.n	8013d2c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013d3a:	4770      	bx	lr

08013d3c <_ZN8touchgfx9Container6unlinkEv>:
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	6283      	str	r3, [r0, #40]	@ 0x28
 8013d40:	4770      	bx	lr

08013d42 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013d42:	2200      	movs	r2, #0
 8013d44:	8002      	strh	r2, [r0, #0]
 8013d46:	8042      	strh	r2, [r0, #2]
 8013d48:	8082      	strh	r2, [r0, #4]
 8013d4a:	80c2      	strh	r2, [r0, #6]
 8013d4c:	4770      	bx	lr

08013d4e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013d4e:	b570      	push	{r4, r5, r6, lr}
 8013d50:	460d      	mov	r5, r1
 8013d52:	4616      	mov	r6, r2
 8013d54:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013d56:	b13c      	cbz	r4, 8013d68 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013d58:	6823      	ldr	r3, [r4, #0]
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d5e:	4632      	mov	r2, r6
 8013d60:	4629      	mov	r1, r5
 8013d62:	4798      	blx	r3
 8013d64:	69a4      	ldr	r4, [r4, #24]
 8013d66:	e7f6      	b.n	8013d56 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013d68:	bd70      	pop	{r4, r5, r6, pc}

08013d6a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013d6a:	b538      	push	{r3, r4, r5, lr}
 8013d6c:	460d      	mov	r5, r1
 8013d6e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013d70:	b134      	cbz	r4, 8013d80 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013d72:	682b      	ldr	r3, [r5, #0]
 8013d74:	4621      	mov	r1, r4
 8013d76:	689b      	ldr	r3, [r3, #8]
 8013d78:	4628      	mov	r0, r5
 8013d7a:	4798      	blx	r3
 8013d7c:	69a4      	ldr	r4, [r4, #24]
 8013d7e:	e7f7      	b.n	8013d70 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013d80:	bd38      	pop	{r3, r4, r5, pc}

08013d82 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013d82:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013d84:	b19b      	cbz	r3, 8013dae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013d86:	428b      	cmp	r3, r1
 8013d88:	d109      	bne.n	8013d9e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013d8a:	2100      	movs	r1, #0
 8013d8c:	699a      	ldr	r2, [r3, #24]
 8013d8e:	6159      	str	r1, [r3, #20]
 8013d90:	6282      	str	r2, [r0, #40]	@ 0x28
 8013d92:	b902      	cbnz	r2, 8013d96 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013d94:	4770      	bx	lr
 8013d96:	6199      	str	r1, [r3, #24]
 8013d98:	4770      	bx	lr
 8013d9a:	4613      	mov	r3, r2
 8013d9c:	b13a      	cbz	r2, 8013dae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013d9e:	699a      	ldr	r2, [r3, #24]
 8013da0:	428a      	cmp	r2, r1
 8013da2:	d1fa      	bne.n	8013d9a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013da4:	698a      	ldr	r2, [r1, #24]
 8013da6:	619a      	str	r2, [r3, #24]
 8013da8:	2300      	movs	r3, #0
 8013daa:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013dae:	4770      	bx	lr

08013db0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013db0:	b410      	push	{r4}
 8013db2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013db4:	4604      	mov	r4, r0
 8013db6:	b92b      	cbnz	r3, 8013dc4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013db8:	6803      	ldr	r3, [r0, #0]
 8013dba:	4611      	mov	r1, r2
 8013dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dc2:	4718      	bx	r3
 8013dc4:	b941      	cbnz	r1, 8013dd8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013dc6:	6193      	str	r3, [r2, #24]
 8013dc8:	6282      	str	r2, [r0, #40]	@ 0x28
 8013dca:	6154      	str	r4, [r2, #20]
 8013dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dd0:	4770      	bx	lr
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	d0f9      	beq.n	8013dcc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013dd8:	4299      	cmp	r1, r3
 8013dda:	6998      	ldr	r0, [r3, #24]
 8013ddc:	d1f9      	bne.n	8013dd2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013dde:	6190      	str	r0, [r2, #24]
 8013de0:	618a      	str	r2, [r1, #24]
 8013de2:	e7f2      	b.n	8013dca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08013de4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013de8:	461f      	mov	r7, r3
 8013dea:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8013dee:	460d      	mov	r5, r1
 8013df0:	4616      	mov	r6, r2
 8013df2:	b103      	cbz	r3, 8013df6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013df4:	6038      	str	r0, [r7, #0]
 8013df6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013df8:	b314      	cbz	r4, 8013e40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013dfa:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8013dfe:	b1eb      	cbz	r3, 8013e3c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e00:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013e04:	428d      	cmp	r5, r1
 8013e06:	db19      	blt.n	8013e3c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e08:	8923      	ldrh	r3, [r4, #8]
 8013e0a:	b289      	uxth	r1, r1
 8013e0c:	440b      	add	r3, r1
 8013e0e:	b21b      	sxth	r3, r3
 8013e10:	429d      	cmp	r5, r3
 8013e12:	da13      	bge.n	8013e3c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e14:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013e18:	4296      	cmp	r6, r2
 8013e1a:	db0f      	blt.n	8013e3c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e1c:	8963      	ldrh	r3, [r4, #10]
 8013e1e:	b292      	uxth	r2, r2
 8013e20:	4413      	add	r3, r2
 8013e22:	b21b      	sxth	r3, r3
 8013e24:	429e      	cmp	r6, r3
 8013e26:	da09      	bge.n	8013e3c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e28:	6823      	ldr	r3, [r4, #0]
 8013e2a:	1ab2      	subs	r2, r6, r2
 8013e2c:	1a69      	subs	r1, r5, r1
 8013e2e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8013e32:	b212      	sxth	r2, r2
 8013e34:	463b      	mov	r3, r7
 8013e36:	b209      	sxth	r1, r1
 8013e38:	4620      	mov	r0, r4
 8013e3a:	47c0      	blx	r8
 8013e3c:	69a4      	ldr	r4, [r4, #24]
 8013e3e:	e7db      	b.n	8013df8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e48:	4c6c      	ldr	r4, [pc, #432]	@ (8013ffc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8013e4a:	b0a1      	sub	sp, #132	@ 0x84
 8013e4c:	6824      	ldr	r4, [r4, #0]
 8013e4e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8013e50:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8013e54:	2400      	movs	r4, #0
 8013e56:	802c      	strh	r4, [r5, #0]
 8013e58:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8013e5a:	4606      	mov	r6, r0
 8013e5c:	802c      	strh	r4, [r5, #0]
 8013e5e:	601c      	str	r4, [r3, #0]
 8013e60:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013e64:	9303      	str	r3, [sp, #12]
 8013e66:	f7ff ffbd 	bl	8013de4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013e6a:	f1b9 0f03 	cmp.w	r9, #3
 8013e6e:	f340 80bf 	ble.w	8013ff0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8013e72:	4631      	mov	r1, r6
 8013e74:	a80c      	add	r0, sp, #48	@ 0x30
 8013e76:	f006 fe83 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013e7a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8013e7e:	9306      	str	r3, [sp, #24]
 8013e80:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013e84:	9307      	str	r3, [sp, #28]
 8013e86:	9b03      	ldr	r3, [sp, #12]
 8013e88:	f8d3 a000 	ldr.w	sl, [r3]
 8013e8c:	f1ba 0f00 	cmp.w	sl, #0
 8013e90:	f000 80b1 	beq.w	8013ff6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8013e94:	4651      	mov	r1, sl
 8013e96:	a810      	add	r0, sp, #64	@ 0x40
 8013e98:	f006 fe72 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013e9c:	2002      	movs	r0, #2
 8013e9e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8013ea2:	9b01      	ldr	r3, [sp, #4]
 8013ea4:	fb91 f1f0 	sdiv	r1, r1, r0
 8013ea8:	9a06      	ldr	r2, [sp, #24]
 8013eaa:	189d      	adds	r5, r3, r2
 8013eac:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8013eb0:	9a07      	ldr	r2, [sp, #28]
 8013eb2:	4419      	add	r1, r3
 8013eb4:	9b02      	ldr	r3, [sp, #8]
 8013eb6:	1a6d      	subs	r5, r5, r1
 8013eb8:	4413      	add	r3, r2
 8013eba:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8013ebe:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8013ec2:	fb92 f2f0 	sdiv	r2, r2, r0
 8013ec6:	440a      	add	r2, r1
 8013ec8:	1a9b      	subs	r3, r3, r2
 8013eca:	435b      	muls	r3, r3
 8013ecc:	fb05 3505 	mla	r5, r5, r5, r3
 8013ed0:	4f4b      	ldr	r7, [pc, #300]	@ (8014000 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013ed2:	ac10      	add	r4, sp, #64	@ 0x40
 8013ed4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ed8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013edc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ee0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8013ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013ee8:	2303      	movs	r3, #3
 8013eea:	f1b9 0f0c 	cmp.w	r9, #12
 8013eee:	bfda      	itte	le
 8013ef0:	f109 32ff 	addle.w	r2, r9, #4294967295
 8013ef4:	fb92 f8f3 	sdivle	r8, r2, r3
 8013ef8:	4698      	movgt	r8, r3
 8013efa:	2400      	movs	r4, #0
 8013efc:	f8cd 9000 	str.w	r9, [sp]
 8013f00:	1c63      	adds	r3, r4, #1
 8013f02:	9308      	str	r3, [sp, #32]
 8013f04:	9b00      	ldr	r3, [sp, #0]
 8013f06:	f04f 0b00 	mov.w	fp, #0
 8013f0a:	fb93 f3f8 	sdiv	r3, r3, r8
 8013f0e:	f004 0401 	and.w	r4, r4, #1
 8013f12:	aa10      	add	r2, sp, #64	@ 0x40
 8013f14:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8013f18:	b29b      	uxth	r3, r3
 8013f1a:	3404      	adds	r4, #4
 8013f1c:	9304      	str	r3, [sp, #16]
 8013f1e:	9a04      	ldr	r2, [sp, #16]
 8013f20:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013f24:	fb13 f302 	smulbb	r3, r3, r2
 8013f28:	9a01      	ldr	r2, [sp, #4]
 8013f2a:	b29b      	uxth	r3, r3
 8013f2c:	1899      	adds	r1, r3, r2
 8013f2e:	9305      	str	r3, [sp, #20]
 8013f30:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013f34:	b209      	sxth	r1, r1
 8013f36:	4299      	cmp	r1, r3
 8013f38:	db4d      	blt.n	8013fd6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f3a:	8932      	ldrh	r2, [r6, #8]
 8013f3c:	4413      	add	r3, r2
 8013f3e:	b21b      	sxth	r3, r3
 8013f40:	4299      	cmp	r1, r3
 8013f42:	da48      	bge.n	8013fd6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f44:	9b04      	ldr	r3, [sp, #16]
 8013f46:	6827      	ldr	r7, [r4, #0]
 8013f48:	fb17 f703 	smulbb	r7, r7, r3
 8013f4c:	9b02      	ldr	r3, [sp, #8]
 8013f4e:	b2bf      	uxth	r7, r7
 8013f50:	18fa      	adds	r2, r7, r3
 8013f52:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013f56:	b212      	sxth	r2, r2
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	db3c      	blt.n	8013fd6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f5c:	8970      	ldrh	r0, [r6, #10]
 8013f5e:	4403      	add	r3, r0
 8013f60:	b21b      	sxth	r3, r3
 8013f62:	429a      	cmp	r2, r3
 8013f64:	da37      	bge.n	8013fd6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f66:	2300      	movs	r3, #0
 8013f68:	4630      	mov	r0, r6
 8013f6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013f6c:	ab0b      	add	r3, sp, #44	@ 0x2c
 8013f6e:	f7ff ff39 	bl	8013de4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013f72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013f74:	b37a      	cbz	r2, 8013fd6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f76:	4552      	cmp	r2, sl
 8013f78:	d02d      	beq.n	8013fd6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f7a:	4611      	mov	r1, r2
 8013f7c:	a80e      	add	r0, sp, #56	@ 0x38
 8013f7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f80:	f006 fdfe 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f84:	f04f 0e02 	mov.w	lr, #2
 8013f88:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8013f8c:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8013f90:	fb91 f1fe 	sdiv	r1, r1, lr
 8013f94:	fb9c fcfe 	sdiv	ip, ip, lr
 8013f98:	9a06      	ldr	r2, [sp, #24]
 8013f9a:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8013f9e:	9b01      	ldr	r3, [sp, #4]
 8013fa0:	4401      	add	r1, r0
 8013fa2:	4413      	add	r3, r2
 8013fa4:	1a58      	subs	r0, r3, r1
 8013fa6:	9a07      	ldr	r2, [sp, #28]
 8013fa8:	9b02      	ldr	r3, [sp, #8]
 8013faa:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8013fae:	4413      	add	r3, r2
 8013fb0:	448c      	add	ip, r1
 8013fb2:	eba3 030c 	sub.w	r3, r3, ip
 8013fb6:	435b      	muls	r3, r3
 8013fb8:	fb00 3300 	mla	r3, r0, r0, r3
 8013fbc:	42ab      	cmp	r3, r5
 8013fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013fc0:	d208      	bcs.n	8013fd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8013fc2:	461d      	mov	r5, r3
 8013fc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013fc6:	9803      	ldr	r0, [sp, #12]
 8013fc8:	6001      	str	r1, [r0, #0]
 8013fca:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8013fcc:	9805      	ldr	r0, [sp, #20]
 8013fce:	8008      	strh	r0, [r1, #0]
 8013fd0:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8013fd2:	800f      	strh	r7, [r1, #0]
 8013fd4:	4692      	mov	sl, r2
 8013fd6:	f10b 0b01 	add.w	fp, fp, #1
 8013fda:	f1bb 0f04 	cmp.w	fp, #4
 8013fde:	f104 0408 	add.w	r4, r4, #8
 8013fe2:	d19c      	bne.n	8013f1e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8013fe4:	9b00      	ldr	r3, [sp, #0]
 8013fe6:	9c08      	ldr	r4, [sp, #32]
 8013fe8:	444b      	add	r3, r9
 8013fea:	4544      	cmp	r4, r8
 8013fec:	9300      	str	r3, [sp, #0]
 8013fee:	d187      	bne.n	8013f00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8013ff0:	b021      	add	sp, #132	@ 0x84
 8013ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ff6:	f04f 35ff 	mov.w	r5, #4294967295
 8013ffa:	e769      	b.n	8013ed0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8013ffc:	2005ba80 	.word	0x2005ba80
 8014000:	0802e6e4 	.word	0x0802e6e4

08014004 <_ZN8touchgfx4RectaNERKS0_>:
 8014004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014008:	f9b1 7000 	ldrsh.w	r7, [r1]
 801400c:	888c      	ldrh	r4, [r1, #4]
 801400e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014012:	443c      	add	r4, r7
 8014014:	b2a4      	uxth	r4, r4
 8014016:	fa0f f884 	sxth.w	r8, r4
 801401a:	45c1      	cmp	r9, r8
 801401c:	da2f      	bge.n	801407e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801401e:	8882      	ldrh	r2, [r0, #4]
 8014020:	444a      	add	r2, r9
 8014022:	b292      	uxth	r2, r2
 8014024:	fa0f fe82 	sxth.w	lr, r2
 8014028:	4577      	cmp	r7, lr
 801402a:	da28      	bge.n	801407e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801402c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014030:	88cb      	ldrh	r3, [r1, #6]
 8014032:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014036:	442b      	add	r3, r5
 8014038:	b21b      	sxth	r3, r3
 801403a:	429e      	cmp	r6, r3
 801403c:	da1f      	bge.n	801407e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801403e:	88c3      	ldrh	r3, [r0, #6]
 8014040:	4433      	add	r3, r6
 8014042:	b29b      	uxth	r3, r3
 8014044:	fa0f fc83 	sxth.w	ip, r3
 8014048:	4565      	cmp	r5, ip
 801404a:	da18      	bge.n	801407e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801404c:	454f      	cmp	r7, r9
 801404e:	bfb8      	it	lt
 8014050:	464f      	movlt	r7, r9
 8014052:	42b5      	cmp	r5, r6
 8014054:	bfb8      	it	lt
 8014056:	4635      	movlt	r5, r6
 8014058:	45f0      	cmp	r8, lr
 801405a:	bfd8      	it	le
 801405c:	4622      	movle	r2, r4
 801405e:	1bd2      	subs	r2, r2, r7
 8014060:	8082      	strh	r2, [r0, #4]
 8014062:	884a      	ldrh	r2, [r1, #2]
 8014064:	88c9      	ldrh	r1, [r1, #6]
 8014066:	8007      	strh	r7, [r0, #0]
 8014068:	440a      	add	r2, r1
 801406a:	b292      	uxth	r2, r2
 801406c:	b211      	sxth	r1, r2
 801406e:	458c      	cmp	ip, r1
 8014070:	bfa8      	it	ge
 8014072:	4613      	movge	r3, r2
 8014074:	1b5b      	subs	r3, r3, r5
 8014076:	80c3      	strh	r3, [r0, #6]
 8014078:	8045      	strh	r5, [r0, #2]
 801407a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801407e:	2300      	movs	r3, #0
 8014080:	8003      	strh	r3, [r0, #0]
 8014082:	8043      	strh	r3, [r0, #2]
 8014084:	8083      	strh	r3, [r0, #4]
 8014086:	80c3      	strh	r3, [r0, #6]
 8014088:	e7f7      	b.n	801407a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801408a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801408a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801408e:	2b00      	cmp	r3, #0
 8014090:	dd06      	ble.n	80140a0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8014092:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014096:	2800      	cmp	r0, #0
 8014098:	bfcc      	ite	gt
 801409a:	2000      	movgt	r0, #0
 801409c:	2001      	movle	r0, #1
 801409e:	4770      	bx	lr
 80140a0:	2001      	movs	r0, #1
 80140a2:	4770      	bx	lr

080140a4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80140a4:	2300      	movs	r3, #0
 80140a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140aa:	4604      	mov	r4, r0
 80140ac:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80140ae:	8003      	strh	r3, [r0, #0]
 80140b0:	8043      	strh	r3, [r0, #2]
 80140b2:	8083      	strh	r3, [r0, #4]
 80140b4:	80c3      	strh	r3, [r0, #6]
 80140b6:	2d00      	cmp	r5, #0
 80140b8:	d040      	beq.n	801413c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80140ba:	1d28      	adds	r0, r5, #4
 80140bc:	f7ff ffe5 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 80140c0:	b988      	cbnz	r0, 80140e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80140c2:	4620      	mov	r0, r4
 80140c4:	f7ff ffe1 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 80140c8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80140cc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80140d0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80140d4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80140d8:	b138      	cbz	r0, 80140ea <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80140da:	8022      	strh	r2, [r4, #0]
 80140dc:	8063      	strh	r3, [r4, #2]
 80140de:	f8a4 e004 	strh.w	lr, [r4, #4]
 80140e2:	f8a4 c006 	strh.w	ip, [r4, #6]
 80140e6:	69ad      	ldr	r5, [r5, #24]
 80140e8:	e7e5      	b.n	80140b6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80140ea:	f9b4 0000 	ldrsh.w	r0, [r4]
 80140ee:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80140f2:	4290      	cmp	r0, r2
 80140f4:	4607      	mov	r7, r0
 80140f6:	bfa8      	it	ge
 80140f8:	4617      	movge	r7, r2
 80140fa:	4299      	cmp	r1, r3
 80140fc:	460e      	mov	r6, r1
 80140fe:	bfa8      	it	ge
 8014100:	461e      	movge	r6, r3
 8014102:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8014106:	4472      	add	r2, lr
 8014108:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801410c:	4440      	add	r0, r8
 801410e:	4471      	add	r1, lr
 8014110:	4463      	add	r3, ip
 8014112:	b200      	sxth	r0, r0
 8014114:	b212      	sxth	r2, r2
 8014116:	b209      	sxth	r1, r1
 8014118:	b21b      	sxth	r3, r3
 801411a:	4290      	cmp	r0, r2
 801411c:	bfac      	ite	ge
 801411e:	ebc7 0200 	rsbge	r2, r7, r0
 8014122:	ebc7 0202 	rsblt	r2, r7, r2
 8014126:	4299      	cmp	r1, r3
 8014128:	bfac      	ite	ge
 801412a:	ebc6 0301 	rsbge	r3, r6, r1
 801412e:	ebc6 0303 	rsblt	r3, r6, r3
 8014132:	8027      	strh	r7, [r4, #0]
 8014134:	8066      	strh	r6, [r4, #2]
 8014136:	80a2      	strh	r2, [r4, #4]
 8014138:	80e3      	strh	r3, [r4, #6]
 801413a:	e7d4      	b.n	80140e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801413c:	4620      	mov	r0, r4
 801413e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014142 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014142:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014146:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801414a:	b383      	cbz	r3, 80141ae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801414c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801414e:	b374      	cbz	r4, 80141ae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014150:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014154:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014158:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801415c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014160:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014164:	b303      	cbz	r3, 80141a8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014166:	4668      	mov	r0, sp
 8014168:	1d21      	adds	r1, r4, #4
 801416a:	f8ad 5000 	strh.w	r5, [sp]
 801416e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014172:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014176:	f8ad 8006 	strh.w	r8, [sp, #6]
 801417a:	f7ff ff43 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801417e:	4668      	mov	r0, sp
 8014180:	f7ff ff83 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014184:	b980      	cbnz	r0, 80141a8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014186:	f8bd 3000 	ldrh.w	r3, [sp]
 801418a:	88a2      	ldrh	r2, [r4, #4]
 801418c:	4669      	mov	r1, sp
 801418e:	1a9b      	subs	r3, r3, r2
 8014190:	f8ad 3000 	strh.w	r3, [sp]
 8014194:	88e2      	ldrh	r2, [r4, #6]
 8014196:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801419a:	4620      	mov	r0, r4
 801419c:	1a9b      	subs	r3, r3, r2
 801419e:	f8ad 3002 	strh.w	r3, [sp, #2]
 80141a2:	6823      	ldr	r3, [r4, #0]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	4798      	blx	r3
 80141a8:	69a4      	ldr	r4, [r4, #24]
 80141aa:	2c00      	cmp	r4, #0
 80141ac:	d1d8      	bne.n	8014160 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80141ae:	b002      	add	sp, #8
 80141b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141b4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80141b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80141b6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80141ba:	460d      	mov	r5, r1
 80141bc:	4616      	mov	r6, r2
 80141be:	b323      	cbz	r3, 801420a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80141c0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80141c2:	b314      	cbz	r4, 801420a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80141c4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80141c8:	b1eb      	cbz	r3, 8014206 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80141ca:	466b      	mov	r3, sp
 80141cc:	6828      	ldr	r0, [r5, #0]
 80141ce:	6869      	ldr	r1, [r5, #4]
 80141d0:	c303      	stmia	r3!, {r0, r1}
 80141d2:	4668      	mov	r0, sp
 80141d4:	1d21      	adds	r1, r4, #4
 80141d6:	f7ff ff15 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 80141da:	4668      	mov	r0, sp
 80141dc:	f7ff ff55 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 80141e0:	b988      	cbnz	r0, 8014206 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80141e2:	f8bd 3000 	ldrh.w	r3, [sp]
 80141e6:	88a2      	ldrh	r2, [r4, #4]
 80141e8:	4669      	mov	r1, sp
 80141ea:	1a9b      	subs	r3, r3, r2
 80141ec:	f8ad 3000 	strh.w	r3, [sp]
 80141f0:	88e2      	ldrh	r2, [r4, #6]
 80141f2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80141f6:	4620      	mov	r0, r4
 80141f8:	1a9b      	subs	r3, r3, r2
 80141fa:	f8ad 3002 	strh.w	r3, [sp, #2]
 80141fe:	6823      	ldr	r3, [r4, #0]
 8014200:	4632      	mov	r2, r6
 8014202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014204:	4798      	blx	r3
 8014206:	69a4      	ldr	r4, [r4, #24]
 8014208:	e7db      	b.n	80141c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801420a:	b002      	add	sp, #8
 801420c:	bd70      	pop	{r4, r5, r6, pc}

0801420e <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>:
 801420e:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8014210:	4770      	bx	lr

08014212 <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>:
 8014212:	4770      	bx	lr

08014214 <_ZN8touchgfx14SwipeContainer13PageIndicatorD0Ev>:
 8014214:	b510      	push	{r4, lr}
 8014216:	4604      	mov	r4, r0
 8014218:	218c      	movs	r1, #140	@ 0x8c
 801421a:	f017 fca2 	bl	802bb62 <_ZdlPvj>
 801421e:	4620      	mov	r0, r4
 8014220:	bd10      	pop	{r4, pc}
	...

08014224 <_ZN8touchgfx14SwipeContainerD1Ev>:
 8014224:	4b05      	ldr	r3, [pc, #20]	@ (801423c <_ZN8touchgfx14SwipeContainerD1Ev+0x18>)
 8014226:	b510      	push	{r4, lr}
 8014228:	6003      	str	r3, [r0, #0]
 801422a:	4604      	mov	r4, r0
 801422c:	f005 fa10 	bl	8019650 <_ZN8touchgfx11Application11getInstanceEv>
 8014230:	4621      	mov	r1, r4
 8014232:	3004      	adds	r0, #4
 8014234:	f005 fa31 	bl	801969a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8014238:	4620      	mov	r0, r4
 801423a:	bd10      	pop	{r4, pc}
 801423c:	0802f2b4 	.word	0x0802f2b4

08014240 <_ZN8touchgfx14SwipeContainerD0Ev>:
 8014240:	b510      	push	{r4, lr}
 8014242:	4604      	mov	r4, r0
 8014244:	f7ff ffee 	bl	8014224 <_ZN8touchgfx14SwipeContainerD1Ev>
 8014248:	4620      	mov	r0, r4
 801424a:	21f8      	movs	r1, #248	@ 0xf8
 801424c:	f017 fc89 	bl	802bb62 <_ZdlPvj>
 8014250:	4620      	mov	r0, r4
 8014252:	bd10      	pop	{r4, pc}

08014254 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE>:
 8014254:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014258:	2b07      	cmp	r3, #7
 801425a:	d118      	bne.n	801428e <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 801425c:	790b      	ldrb	r3, [r1, #4]
 801425e:	2b01      	cmp	r3, #1
 8014260:	d115      	bne.n	801428e <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 8014262:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 8014266:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 801426a:	2b00      	cmp	r3, #0
 801426c:	8643      	strh	r3, [r0, #50]	@ 0x32
 801426e:	8682      	strh	r2, [r0, #52]	@ 0x34
 8014270:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 8014274:	da0e      	bge.n	8014294 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x40>
 8014276:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 801427a:	3a01      	subs	r2, #1
 801427c:	4291      	cmp	r1, r2
 801427e:	d007      	beq.n	8014290 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 8014280:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 8014282:	4252      	negs	r2, r2
 8014284:	4293      	cmp	r3, r2
 8014286:	dc03      	bgt.n	8014290 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 8014288:	2302      	movs	r3, #2
 801428a:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 801428e:	4770      	bx	lr
 8014290:	2300      	movs	r3, #0
 8014292:	e7fa      	b.n	801428a <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 8014294:	d0fb      	beq.n	801428e <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 8014296:	b111      	cbz	r1, 801429e <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4a>
 8014298:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 801429a:	4293      	cmp	r3, r2
 801429c:	da01      	bge.n	80142a2 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4e>
 801429e:	2301      	movs	r3, #1
 80142a0:	e7f3      	b.n	801428a <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 80142a2:	2303      	movs	r3, #3
 80142a4:	e7f1      	b.n	801428a <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>

080142a6 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE>:
 80142a6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80142aa:	2b07      	cmp	r3, #7
 80142ac:	d114      	bne.n	80142d8 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80142ae:	790b      	ldrb	r3, [r1, #4]
 80142b0:	b993      	cbnz	r3, 80142d8 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80142b2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80142b4:	f890 20f5 	ldrb.w	r2, [r0, #245]	@ 0xf5
 80142b8:	8643      	strh	r3, [r0, #50]	@ 0x32
 80142ba:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80142be:	8683      	strh	r3, [r0, #52]	@ 0x34
 80142c0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	da08      	bge.n	80142da <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x34>
 80142c8:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 80142cc:	3b01      	subs	r3, #1
 80142ce:	429a      	cmp	r2, r3
 80142d0:	da02      	bge.n	80142d8 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80142d2:	2302      	movs	r3, #2
 80142d4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80142d8:	4770      	bx	lr
 80142da:	d0fd      	beq.n	80142d8 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80142dc:	2a00      	cmp	r2, #0
 80142de:	d0fb      	beq.n	80142d8 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80142e0:	2303      	movs	r3, #3
 80142e2:	e7f7      	b.n	80142d4 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x2e>

080142e4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 80142e4:	b538      	push	{r3, r4, r5, lr}
 80142e6:	4604      	mov	r4, r0
 80142e8:	460d      	mov	r5, r1
 80142ea:	2226      	movs	r2, #38	@ 0x26
 80142ec:	2100      	movs	r1, #0
 80142ee:	f018 fe39 	bl	802cf64 <memset>
 80142f2:	4620      	mov	r0, r4
 80142f4:	f7fb fff0 	bl	80102d8 <_ZN8touchgfx8DrawableC1Ev>
 80142f8:	4b06      	ldr	r3, [pc, #24]	@ (8014314 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 80142fa:	4620      	mov	r0, r4
 80142fc:	6023      	str	r3, [r4, #0]
 80142fe:	882b      	ldrh	r3, [r5, #0]
 8014300:	4629      	mov	r1, r5
 8014302:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8014304:	23ff      	movs	r3, #255	@ 0xff
 8014306:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801430a:	f003 fa66 	bl	80177da <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801430e:	4620      	mov	r0, r4
 8014310:	bd38      	pop	{r3, r4, r5, pc}
 8014312:	bf00      	nop
 8014314:	0802f798 	.word	0x0802f798

08014318 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>:
 8014318:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801431a:	4770      	bx	lr

0801431c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>:
 801431c:	b508      	push	{r3, lr}
 801431e:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 8014320:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 8014324:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014328:	303c      	adds	r0, #60	@ 0x3c
 801432a:	fb03 2111 	mls	r1, r3, r1, r2
 801432e:	2200      	movs	r2, #0
 8014330:	b209      	sxth	r1, r1
 8014332:	f7fc f927 	bl	8010584 <_ZN8touchgfx8Drawable6moveToEss>
 8014336:	bd08      	pop	{r3, pc}

08014338 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE>:
 8014338:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801433c:	2b07      	cmp	r3, #7
 801433e:	d119      	bne.n	8014374 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x3c>
 8014340:	88ca      	ldrh	r2, [r1, #6]
 8014342:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8014344:	1a9b      	subs	r3, r3, r2
 8014346:	894a      	ldrh	r2, [r1, #10]
 8014348:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 801434c:	4413      	add	r3, r2
 801434e:	b21b      	sxth	r3, r3
 8014350:	8603      	strh	r3, [r0, #48]	@ 0x30
 8014352:	b921      	cbnz	r1, 801435e <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 8014354:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 8014356:	4293      	cmp	r3, r2
 8014358:	dd01      	ble.n	801435e <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 801435a:	8602      	strh	r2, [r0, #48]	@ 0x30
 801435c:	e008      	b.n	8014370 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 801435e:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 8014362:	3a01      	subs	r2, #1
 8014364:	4291      	cmp	r1, r2
 8014366:	d103      	bne.n	8014370 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 8014368:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 801436a:	4252      	negs	r2, r2
 801436c:	4293      	cmp	r3, r2
 801436e:	dbf4      	blt.n	801435a <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x22>
 8014370:	f7ff bfd4 	b.w	801431c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014374:	4770      	bx	lr

08014376 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>:
 8014376:	b538      	push	{r3, r4, r5, lr}
 8014378:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 801437c:	4604      	mov	r4, r0
 801437e:	2d0e      	cmp	r5, #14
 8014380:	d813      	bhi.n	80143aa <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x34>
 8014382:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 8014384:	230e      	movs	r3, #14
 8014386:	4252      	negs	r2, r2
 8014388:	b212      	sxth	r2, r2
 801438a:	2100      	movs	r1, #0
 801438c:	4628      	mov	r0, r5
 801438e:	f007 fb4f 	bl	801ba30 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 8014392:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014394:	4418      	add	r0, r3
 8014396:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014398:	4620      	mov	r0, r4
 801439a:	f7ff ffbf 	bl	801431c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801439e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80143a2:	3301      	adds	r3, #1
 80143a4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80143a8:	bd38      	pop	{r3, r4, r5, pc}
 80143aa:	2307      	movs	r3, #7
 80143ac:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80143b0:	2300      	movs	r3, #0
 80143b2:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 80143b6:	8603      	strh	r3, [r0, #48]	@ 0x30
 80143b8:	e7ef      	b.n	801439a <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x24>

080143ba <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>:
 80143ba:	b538      	push	{r3, r4, r5, lr}
 80143bc:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 80143c0:	4604      	mov	r4, r0
 80143c2:	2d0e      	cmp	r5, #14
 80143c4:	d812      	bhi.n	80143ec <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x32>
 80143c6:	230e      	movs	r3, #14
 80143c8:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 80143cc:	2100      	movs	r1, #0
 80143ce:	4628      	mov	r0, r5
 80143d0:	f007 fb2e 	bl	801ba30 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 80143d4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80143d6:	1a18      	subs	r0, r3, r0
 80143d8:	8620      	strh	r0, [r4, #48]	@ 0x30
 80143da:	4620      	mov	r0, r4
 80143dc:	f7ff ff9e 	bl	801431c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80143e0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80143e4:	3301      	adds	r3, #1
 80143e6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80143ea:	bd38      	pop	{r3, r4, r5, pc}
 80143ec:	2307      	movs	r3, #7
 80143ee:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80143f2:	2300      	movs	r3, #0
 80143f4:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 80143f8:	8603      	strh	r3, [r0, #48]	@ 0x30
 80143fa:	e7ef      	b.n	80143dc <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x22>

080143fc <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>:
 80143fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014400:	4604      	mov	r4, r0
 8014402:	2500      	movs	r5, #0
 8014404:	4626      	mov	r6, r4
 8014406:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801440a:	f7fb ff65 	bl	80102d8 <_ZN8touchgfx8DrawableC1Ev>
 801440e:	4b18      	ldr	r3, [pc, #96]	@ (8014470 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x74>)
 8014410:	af02      	add	r7, sp, #8
 8014412:	f827 9d04 	strh.w	r9, [r7, #-4]!
 8014416:	62a5      	str	r5, [r4, #40]	@ 0x28
 8014418:	f846 3b2c 	str.w	r3, [r6], #44
 801441c:	4639      	mov	r1, r7
 801441e:	4630      	mov	r0, r6
 8014420:	f7ff ff60 	bl	80142e4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014424:	4b13      	ldr	r3, [pc, #76]	@ (8014474 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x78>)
 8014426:	f104 085c 	add.w	r8, r4, #92	@ 0x5c
 801442a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801442c:	4639      	mov	r1, r7
 801442e:	f8a4 5056 	strh.w	r5, [r4, #86]	@ 0x56
 8014432:	f8a4 5058 	strh.w	r5, [r4, #88]	@ 0x58
 8014436:	4640      	mov	r0, r8
 8014438:	f8ad 9004 	strh.w	r9, [sp, #4]
 801443c:	f7ff ff52 	bl	80142e4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014440:	462a      	mov	r2, r5
 8014442:	4629      	mov	r1, r5
 8014444:	4630      	mov	r0, r6
 8014446:	f8a4 5088 	strh.w	r5, [r4, #136]	@ 0x88
 801444a:	f7fb fff2 	bl	8010432 <_ZN8touchgfx8Drawable5setXYEss>
 801444e:	462a      	mov	r2, r5
 8014450:	4629      	mov	r1, r5
 8014452:	4640      	mov	r0, r8
 8014454:	f7fb ffed 	bl	8010432 <_ZN8touchgfx8Drawable5setXYEss>
 8014458:	4631      	mov	r1, r6
 801445a:	4620      	mov	r0, r4
 801445c:	f7ff fc58 	bl	8013d10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014460:	4620      	mov	r0, r4
 8014462:	4641      	mov	r1, r8
 8014464:	f7ff fc54 	bl	8013d10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014468:	4620      	mov	r0, r4
 801446a:	b003      	add	sp, #12
 801446c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014470:	0802f224 	.word	0x0802f224
 8014474:	0802f714 	.word	0x0802f714

08014478 <_ZN8touchgfx14SwipeContainerC1Ev>:
 8014478:	b570      	push	{r4, r5, r6, lr}
 801447a:	4604      	mov	r4, r0
 801447c:	f7fb ff2c 	bl	80102d8 <_ZN8touchgfx8DrawableC1Ev>
 8014480:	4b1c      	ldr	r3, [pc, #112]	@ (80144f4 <_ZN8touchgfx14SwipeContainerC1Ev+0x7c>)
 8014482:	2500      	movs	r5, #0
 8014484:	6023      	str	r3, [r4, #0]
 8014486:	2307      	movs	r3, #7
 8014488:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801448c:	2350      	movs	r3, #80	@ 0x50
 801448e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8014490:	231e      	movs	r3, #30
 8014492:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8014494:	2314      	movs	r3, #20
 8014496:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 801449a:	62a5      	str	r5, [r4, #40]	@ 0x28
 801449c:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 80144a0:	8625      	strh	r5, [r4, #48]	@ 0x30
 80144a2:	8665      	strh	r5, [r4, #50]	@ 0x32
 80144a4:	86a5      	strh	r5, [r4, #52]	@ 0x34
 80144a6:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 80144aa:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 80144ae:	4630      	mov	r0, r6
 80144b0:	f7fb ff12 	bl	80102d8 <_ZN8touchgfx8DrawableC1Ev>
 80144b4:	4b10      	ldr	r3, [pc, #64]	@ (80144f8 <_ZN8touchgfx14SwipeContainerC1Ev+0x80>)
 80144b6:	6665      	str	r5, [r4, #100]	@ 0x64
 80144b8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80144ba:	2302      	movs	r3, #2
 80144bc:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
 80144c0:	f104 056c 	add.w	r5, r4, #108	@ 0x6c
 80144c4:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 80144c8:	4628      	mov	r0, r5
 80144ca:	f7ff ff97 	bl	80143fc <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>
 80144ce:	f005 f8bf 	bl	8019650 <_ZN8touchgfx11Application11getInstanceEv>
 80144d2:	4621      	mov	r1, r4
 80144d4:	3004      	adds	r0, #4
 80144d6:	f005 f989 	bl	80197ec <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 80144da:	2301      	movs	r3, #1
 80144dc:	4631      	mov	r1, r6
 80144de:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80144e2:	4620      	mov	r0, r4
 80144e4:	f7ff fc14 	bl	8013d10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80144e8:	4620      	mov	r0, r4
 80144ea:	4629      	mov	r1, r5
 80144ec:	f7ff fc10 	bl	8013d10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80144f0:	4620      	mov	r0, r4
 80144f2:	bd70      	pop	{r4, r5, r6, pc}
 80144f4:	0802f2b4 	.word	0x0802f2b4
 80144f8:	0802f378 	.word	0x0802f378

080144fc <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>:
 80144fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80144fe:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 8014502:	4604      	mov	r4, r0
 8014504:	428b      	cmp	r3, r1
 8014506:	460d      	mov	r5, r1
 8014508:	d915      	bls.n	8014536 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 801450a:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 801450e:	428b      	cmp	r3, r1
 8014510:	d011      	beq.n	8014536 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 8014512:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 8014516:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 801451a:	a802      	add	r0, sp, #8
 801451c:	f820 3d04 	strh.w	r3, [r0, #-4]!
 8014520:	f008 face 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014524:	fb15 f100 	smulbb	r1, r5, r0
 8014528:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	@ 0x62
 801452c:	b209      	sxth	r1, r1
 801452e:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8014532:	f7fc f827 	bl	8010584 <_ZN8touchgfx8Drawable6moveToEss>
 8014536:	b003      	add	sp, #12
 8014538:	bd30      	pop	{r4, r5, pc}

0801453a <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>:
 801453a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801453c:	4604      	mov	r4, r0
 801453e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014542:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 8014546:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 801454a:	460d      	mov	r5, r1
 801454c:	4293      	cmp	r3, r2
 801454e:	d01e      	beq.n	801458e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x54>
 8014550:	a802      	add	r0, sp, #8
 8014552:	f820 3d04 	strh.w	r3, [r0, #-4]!
 8014556:	f008 fab3 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801455a:	fb15 f000 	smulbb	r0, r5, r0
 801455e:	6823      	ldr	r3, [r4, #0]
 8014560:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8014562:	695b      	ldr	r3, [r3, #20]
 8014564:	4620      	mov	r0, r4
 8014566:	4798      	blx	r3
 8014568:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 801456c:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8014570:	4620      	mov	r0, r4
 8014572:	f7fb ffba 	bl	80104ea <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014576:	f894 1089 	ldrb.w	r1, [r4, #137]	@ 0x89
 801457a:	4620      	mov	r0, r4
 801457c:	42a9      	cmp	r1, r5
 801457e:	bf28      	it	cs
 8014580:	4629      	movcs	r1, r5
 8014582:	f7ff ffbb 	bl	80144fc <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 8014586:	6823      	ldr	r3, [r4, #0]
 8014588:	4620      	mov	r0, r4
 801458a:	695b      	ldr	r3, [r3, #20]
 801458c:	4798      	blx	r3
 801458e:	b003      	add	sp, #12
 8014590:	bd30      	pop	{r4, r5, pc}

08014592 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>:
 8014592:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 8014596:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 801459a:	3101      	adds	r1, #1
 801459c:	fb91 f3f2 	sdiv	r3, r1, r2
 80145a0:	fb02 1113 	mls	r1, r2, r3, r1
 80145a4:	b2c9      	uxtb	r1, r1
 80145a6:	f7ff bfa9 	b.w	80144fc <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

080145aa <_ZN8touchgfx14SwipeContainer11animateLeftEv>:
 80145aa:	b510      	push	{r4, lr}
 80145ac:	4604      	mov	r4, r0
 80145ae:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80145b2:	280a      	cmp	r0, #10
 80145b4:	d813      	bhi.n	80145de <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x34>
 80145b6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80145b8:	8922      	ldrh	r2, [r4, #8]
 80145ba:	2100      	movs	r1, #0
 80145bc:	441a      	add	r2, r3
 80145be:	b212      	sxth	r2, r2
 80145c0:	230a      	movs	r3, #10
 80145c2:	f007 fa73 	bl	801baac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80145c6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80145c8:	1a18      	subs	r0, r3, r0
 80145ca:	8620      	strh	r0, [r4, #48]	@ 0x30
 80145cc:	4620      	mov	r0, r4
 80145ce:	f7ff fea5 	bl	801431c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80145d2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80145d6:	3301      	adds	r3, #1
 80145d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80145dc:	bd10      	pop	{r4, pc}
 80145de:	2307      	movs	r3, #7
 80145e0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80145e4:	2300      	movs	r3, #0
 80145e6:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80145ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80145ee:	8623      	strh	r3, [r4, #48]	@ 0x30
 80145f0:	f7ff ffcf 	bl	8014592 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 80145f4:	e7ea      	b.n	80145cc <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x22>

080145f6 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>:
 80145f6:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 80145fa:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 80145fe:	4411      	add	r1, r2
 8014600:	3901      	subs	r1, #1
 8014602:	fb91 f3f2 	sdiv	r3, r1, r2
 8014606:	fb02 1113 	mls	r1, r2, r3, r1
 801460a:	b2c9      	uxtb	r1, r1
 801460c:	f7ff bf76 	b.w	80144fc <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

08014610 <_ZN8touchgfx14SwipeContainer12animateRightEv>:
 8014610:	b510      	push	{r4, lr}
 8014612:	4604      	mov	r4, r0
 8014614:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8014618:	280a      	cmp	r0, #10
 801461a:	d813      	bhi.n	8014644 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x34>
 801461c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801461e:	8922      	ldrh	r2, [r4, #8]
 8014620:	2100      	movs	r1, #0
 8014622:	1ad2      	subs	r2, r2, r3
 8014624:	b212      	sxth	r2, r2
 8014626:	230a      	movs	r3, #10
 8014628:	f007 fa40 	bl	801baac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801462c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801462e:	4418      	add	r0, r3
 8014630:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014632:	4620      	mov	r0, r4
 8014634:	f7ff fe72 	bl	801431c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014638:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801463c:	3301      	adds	r3, #1
 801463e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014642:	bd10      	pop	{r4, pc}
 8014644:	2307      	movs	r3, #7
 8014646:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801464a:	2300      	movs	r3, #0
 801464c:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8014650:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014654:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014656:	f7ff ffce 	bl	80145f6 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 801465a:	e7ea      	b.n	8014632 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x22>

0801465c <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>:
 801465c:	b510      	push	{r4, lr}
 801465e:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 8014662:	4604      	mov	r4, r0
 8014664:	428b      	cmp	r3, r1
 8014666:	d907      	bls.n	8014678 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh+0x1c>
 8014668:	306c      	adds	r0, #108	@ 0x6c
 801466a:	f7ff ff47 	bl	80144fc <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 801466e:	4620      	mov	r0, r4
 8014670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014674:	f7ff be52 	b.w	801431c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014678:	bd10      	pop	{r4, pc}

0801467a <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>:
 801467a:	b538      	push	{r3, r4, r5, lr}
 801467c:	4604      	mov	r4, r0
 801467e:	460d      	mov	r5, r1
 8014680:	303c      	adds	r0, #60	@ 0x3c
 8014682:	f000 f9fd 	bl	8014a80 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
 8014686:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 801468a:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801468e:	3101      	adds	r1, #1
 8014690:	b2c9      	uxtb	r1, r1
 8014692:	f7ff ff52 	bl	801453a <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 8014696:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 801469a:	4620      	mov	r0, r4
 801469c:	f7ff ffde 	bl	801465c <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 80146a0:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 80146a4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80146a8:	4620      	mov	r0, r4
 80146aa:	f7fb ff1e 	bl	80104ea <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80146ae:	bd38      	pop	{r3, r4, r5, pc}

080146b0 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE>:
 80146b0:	b538      	push	{r3, r4, r5, lr}
 80146b2:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 80146b6:	4604      	mov	r4, r0
 80146b8:	b1e3      	cbz	r3, 80146f4 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 80146ba:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80146bc:	b1d3      	cbz	r3, 80146f4 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 80146be:	428b      	cmp	r3, r1
 80146c0:	d125      	bne.n	801470e <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x5e>
 80146c2:	4619      	mov	r1, r3
 80146c4:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 80146c8:	f000 fa5a 	bl	8014b80 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>
 80146cc:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 80146d0:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80146d4:	3901      	subs	r1, #1
 80146d6:	b2c9      	uxtb	r1, r1
 80146d8:	f7ff ff2f 	bl	801453a <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 80146dc:	f894 50f4 	ldrb.w	r5, [r4, #244]	@ 0xf4
 80146e0:	b94d      	cbnz	r5, 80146f6 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x46>
 80146e2:	6823      	ldr	r3, [r4, #0]
 80146e4:	4620      	mov	r0, r4
 80146e6:	695b      	ldr	r3, [r3, #20]
 80146e8:	4798      	blx	r3
 80146ea:	462a      	mov	r2, r5
 80146ec:	4629      	mov	r1, r5
 80146ee:	4620      	mov	r0, r4
 80146f0:	f7fb fefb 	bl	80104ea <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80146f4:	bd38      	pop	{r3, r4, r5, pc}
 80146f6:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 80146fa:	3d01      	subs	r5, #1
 80146fc:	42a9      	cmp	r1, r5
 80146fe:	bfa8      	it	ge
 8014700:	4629      	movge	r1, r5
 8014702:	4620      	mov	r0, r4
 8014704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014708:	b2c9      	uxtb	r1, r1
 801470a:	f7ff bfa7 	b.w	801465c <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 801470e:	699b      	ldr	r3, [r3, #24]
 8014710:	e7d4      	b.n	80146bc <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0xc>

08014712 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>:
 8014712:	b510      	push	{r4, lr}
 8014714:	4604      	mov	r4, r0
 8014716:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 801471a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801471e:	4298      	cmp	r0, r3
 8014720:	d812      	bhi.n	8014748 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x36>
 8014722:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 8014724:	8922      	ldrh	r2, [r4, #8]
 8014726:	440a      	add	r2, r1
 8014728:	b212      	sxth	r2, r2
 801472a:	2100      	movs	r1, #0
 801472c:	f007 f9be 	bl	801baac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8014730:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014732:	1a18      	subs	r0, r3, r0
 8014734:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014736:	4620      	mov	r0, r4
 8014738:	f7ff fdf0 	bl	801431c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801473c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014740:	3301      	adds	r3, #1
 8014742:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014746:	bd10      	pop	{r4, pc}
 8014748:	2307      	movs	r3, #7
 801474a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801474e:	2300      	movs	r3, #0
 8014750:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8014754:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014758:	8623      	strh	r3, [r4, #48]	@ 0x30
 801475a:	f7ff ff1a 	bl	8014592 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 801475e:	e7ea      	b.n	8014736 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x24>

08014760 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>:
 8014760:	b510      	push	{r4, lr}
 8014762:	4604      	mov	r4, r0
 8014764:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8014768:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801476c:	4298      	cmp	r0, r3
 801476e:	d812      	bhi.n	8014796 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x36>
 8014770:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 8014772:	8922      	ldrh	r2, [r4, #8]
 8014774:	1a52      	subs	r2, r2, r1
 8014776:	b212      	sxth	r2, r2
 8014778:	2100      	movs	r1, #0
 801477a:	f007 f997 	bl	801baac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801477e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014780:	4418      	add	r0, r3
 8014782:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014784:	4620      	mov	r0, r4
 8014786:	f7ff fdc9 	bl	801431c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801478a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801478e:	3301      	adds	r3, #1
 8014790:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014794:	bd10      	pop	{r4, pc}
 8014796:	2307      	movs	r3, #7
 8014798:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801479c:	2300      	movs	r3, #0
 801479e:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80147a2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80147a6:	8623      	strh	r3, [r4, #48]	@ 0x30
 80147a8:	f7ff ff25 	bl	80145f6 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 80147ac:	e7ea      	b.n	8014784 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x24>

080147ae <_ZN8touchgfx14SwipeContainer13animateToPageEv>:
 80147ae:	b538      	push	{r3, r4, r5, lr}
 80147b0:	4604      	mov	r4, r0
 80147b2:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80147b6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80147ba:	f994 1039 	ldrsb.w	r1, [r4, #57]	@ 0x39
 80147be:	4298      	cmp	r0, r3
 80147c0:	d814      	bhi.n	80147ec <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x3e>
 80147c2:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80147c6:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 80147c8:	fb05 2201 	mla	r2, r5, r1, r2
 80147cc:	2100      	movs	r1, #0
 80147ce:	b212      	sxth	r2, r2
 80147d0:	f007 f96c 	bl	801baac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80147d4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80147d6:	1a18      	subs	r0, r3, r0
 80147d8:	8620      	strh	r0, [r4, #48]	@ 0x30
 80147da:	4620      	mov	r0, r4
 80147dc:	f7ff fd9e 	bl	801431c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80147e0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80147e4:	3301      	adds	r3, #1
 80147e6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80147ea:	bd38      	pop	{r3, r4, r5, pc}
 80147ec:	2307      	movs	r3, #7
 80147ee:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80147f2:	2300      	movs	r3, #0
 80147f4:	f894 20f5 	ldrb.w	r2, [r4, #245]	@ 0xf5
 80147f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80147fc:	4411      	add	r1, r2
 80147fe:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014800:	b2c9      	uxtb	r1, r1
 8014802:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8014806:	f7ff fe79 	bl	80144fc <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 801480a:	e7e6      	b.n	80147da <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x2c>

0801480c <_ZN8touchgfx14SwipeContainer15handleTickEventEv>:
 801480c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014810:	b90b      	cbnz	r3, 8014816 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0xa>
 8014812:	f7ff bdb0 	b.w	8014376 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>
 8014816:	2b01      	cmp	r3, #1
 8014818:	d101      	bne.n	801481e <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x12>
 801481a:	f7ff bdce 	b.w	80143ba <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>
 801481e:	2b02      	cmp	r3, #2
 8014820:	d101      	bne.n	8014826 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x1a>
 8014822:	f7ff bec2 	b.w	80145aa <_ZN8touchgfx14SwipeContainer11animateLeftEv>
 8014826:	2b03      	cmp	r3, #3
 8014828:	d101      	bne.n	801482e <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x22>
 801482a:	f7ff bef1 	b.w	8014610 <_ZN8touchgfx14SwipeContainer12animateRightEv>
 801482e:	2b04      	cmp	r3, #4
 8014830:	d101      	bne.n	8014836 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x2a>
 8014832:	f7ff bf6e 	b.w	8014712 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>
 8014836:	2b05      	cmp	r3, #5
 8014838:	d101      	bne.n	801483e <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x32>
 801483a:	f7ff bf91 	b.w	8014760 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>
 801483e:	2b06      	cmp	r3, #6
 8014840:	d101      	bne.n	8014846 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x3a>
 8014842:	f7ff bfb4 	b.w	80147ae <_ZN8touchgfx14SwipeContainer13animateToPageEv>
 8014846:	4770      	bx	lr

08014848 <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 8014848:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 801484c:	4770      	bx	lr

0801484e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 801484e:	b538      	push	{r3, r4, r5, lr}
 8014850:	7882      	ldrb	r2, [r0, #2]
 8014852:	4604      	mov	r4, r0
 8014854:	460d      	mov	r5, r1
 8014856:	6843      	ldr	r3, [r0, #4]
 8014858:	b98a      	cbnz	r2, 801487e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 801485a:	4299      	cmp	r1, r3
 801485c:	d101      	bne.n	8014862 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801485e:	2301      	movs	r3, #1
 8014860:	7083      	strb	r3, [r0, #2]
 8014862:	6863      	ldr	r3, [r4, #4]
 8014864:	42ab      	cmp	r3, r5
 8014866:	d009      	beq.n	801487c <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8014868:	7a23      	ldrb	r3, [r4, #8]
 801486a:	2b01      	cmp	r3, #1
 801486c:	d11b      	bne.n	80148a6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 801486e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8014872:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014876:	429a      	cmp	r2, r3
 8014878:	bfb8      	it	lt
 801487a:	8023      	strhlt	r3, [r4, #0]
 801487c:	bd38      	pop	{r3, r4, r5, pc}
 801487e:	7a02      	ldrb	r2, [r0, #8]
 8014880:	2a01      	cmp	r2, #1
 8014882:	d108      	bne.n	8014896 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 8014884:	895b      	ldrh	r3, [r3, #10]
 8014886:	88c9      	ldrh	r1, [r1, #6]
 8014888:	1ac9      	subs	r1, r1, r3
 801488a:	682b      	ldr	r3, [r5, #0]
 801488c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801488e:	b209      	sxth	r1, r1
 8014890:	4628      	mov	r0, r5
 8014892:	4798      	blx	r3
 8014894:	e7e5      	b.n	8014862 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8014896:	2a02      	cmp	r2, #2
 8014898:	d1e3      	bne.n	8014862 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801489a:	891b      	ldrh	r3, [r3, #8]
 801489c:	8889      	ldrh	r1, [r1, #4]
 801489e:	1ac9      	subs	r1, r1, r3
 80148a0:	682b      	ldr	r3, [r5, #0]
 80148a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148a4:	e7f3      	b.n	801488e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 80148a6:	2b02      	cmp	r3, #2
 80148a8:	d1e8      	bne.n	801487c <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 80148aa:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80148ae:	e7e0      	b.n	8014872 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

080148b0 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 80148b0:	4770      	bx	lr

080148b2 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 80148b2:	4770      	bx	lr

080148b4 <_ZN8touchgfx10ListLayoutD1Ev>:
 80148b4:	4770      	bx	lr

080148b6 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 80148b6:	4603      	mov	r3, r0
 80148b8:	b430      	push	{r4, r5}
 80148ba:	68c5      	ldr	r5, [r0, #12]
 80148bc:	6844      	ldr	r4, [r0, #4]
 80148be:	106a      	asrs	r2, r5, #1
 80148c0:	07ed      	lsls	r5, r5, #31
 80148c2:	eb04 0002 	add.w	r0, r4, r2
 80148c6:	689b      	ldr	r3, [r3, #8]
 80148c8:	bf48      	it	mi
 80148ca:	58a2      	ldrmi	r2, [r4, r2]
 80148cc:	bc30      	pop	{r4, r5}
 80148ce:	bf48      	it	mi
 80148d0:	58d3      	ldrmi	r3, [r2, r3]
 80148d2:	4718      	bx	r3

080148d4 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 80148d4:	6843      	ldr	r3, [r0, #4]
 80148d6:	b12b      	cbz	r3, 80148e4 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 80148d8:	6883      	ldr	r3, [r0, #8]
 80148da:	b92b      	cbnz	r3, 80148e8 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 80148dc:	68c0      	ldr	r0, [r0, #12]
 80148de:	f000 0001 	and.w	r0, r0, #1
 80148e2:	4770      	bx	lr
 80148e4:	4618      	mov	r0, r3
 80148e6:	4770      	bx	lr
 80148e8:	2001      	movs	r0, #1
 80148ea:	4770      	bx	lr

080148ec <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 80148ec:	4603      	mov	r3, r0
 80148ee:	b430      	push	{r4, r5}
 80148f0:	68c5      	ldr	r5, [r0, #12]
 80148f2:	6844      	ldr	r4, [r0, #4]
 80148f4:	106a      	asrs	r2, r5, #1
 80148f6:	07ed      	lsls	r5, r5, #31
 80148f8:	eb04 0002 	add.w	r0, r4, r2
 80148fc:	689b      	ldr	r3, [r3, #8]
 80148fe:	bf48      	it	mi
 8014900:	58a2      	ldrmi	r2, [r4, r2]
 8014902:	bc30      	pop	{r4, r5}
 8014904:	bf48      	it	mi
 8014906:	58d3      	ldrmi	r3, [r2, r3]
 8014908:	4718      	bx	r3

0801490a <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 801490a:	6843      	ldr	r3, [r0, #4]
 801490c:	b12b      	cbz	r3, 801491a <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 801490e:	6883      	ldr	r3, [r0, #8]
 8014910:	b92b      	cbnz	r3, 801491e <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 8014912:	68c0      	ldr	r0, [r0, #12]
 8014914:	f000 0001 	and.w	r0, r0, #1
 8014918:	4770      	bx	lr
 801491a:	4618      	mov	r0, r3
 801491c:	4770      	bx	lr
 801491e:	2001      	movs	r0, #1
 8014920:	4770      	bx	lr

08014922 <_ZN8touchgfx10ListLayoutD0Ev>:
 8014922:	b510      	push	{r4, lr}
 8014924:	4604      	mov	r4, r0
 8014926:	2130      	movs	r1, #48	@ 0x30
 8014928:	f017 f91b 	bl	802bb62 <_ZdlPvj>
 801492c:	4620      	mov	r0, r4
 801492e:	bd10      	pop	{r4, pc}

08014930 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 8014930:	b510      	push	{r4, lr}
 8014932:	4604      	mov	r4, r0
 8014934:	2110      	movs	r1, #16
 8014936:	f017 f914 	bl	802bb62 <_ZdlPvj>
 801493a:	4620      	mov	r0, r4
 801493c:	bd10      	pop	{r4, pc}

0801493e <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 801493e:	b510      	push	{r4, lr}
 8014940:	4604      	mov	r4, r0
 8014942:	2110      	movs	r1, #16
 8014944:	f017 f90d 	bl	802bb62 <_ZdlPvj>
 8014948:	4620      	mov	r0, r4
 801494a:	bd10      	pop	{r4, pc}

0801494c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 801494c:	4603      	mov	r3, r0
 801494e:	789a      	ldrb	r2, [r3, #2]
 8014950:	4608      	mov	r0, r1
 8014952:	b992      	cbnz	r2, 801497a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 8014954:	685a      	ldr	r2, [r3, #4]
 8014956:	428a      	cmp	r2, r1
 8014958:	d102      	bne.n	8014960 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 801495a:	2201      	movs	r2, #1
 801495c:	709a      	strb	r2, [r3, #2]
 801495e:	4770      	bx	lr
 8014960:	7a1a      	ldrb	r2, [r3, #8]
 8014962:	2a01      	cmp	r2, #1
 8014964:	d104      	bne.n	8014970 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 8014966:	88ca      	ldrh	r2, [r1, #6]
 8014968:	8949      	ldrh	r1, [r1, #10]
 801496a:	440a      	add	r2, r1
 801496c:	801a      	strh	r2, [r3, #0]
 801496e:	4770      	bx	lr
 8014970:	2a02      	cmp	r2, #2
 8014972:	d116      	bne.n	80149a2 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8014974:	888a      	ldrh	r2, [r1, #4]
 8014976:	8909      	ldrh	r1, [r1, #8]
 8014978:	e7f7      	b.n	801496a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 801497a:	7a1a      	ldrb	r2, [r3, #8]
 801497c:	2a01      	cmp	r2, #1
 801497e:	d107      	bne.n	8014990 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 8014980:	685b      	ldr	r3, [r3, #4]
 8014982:	8959      	ldrh	r1, [r3, #10]
 8014984:	88c3      	ldrh	r3, [r0, #6]
 8014986:	4419      	add	r1, r3
 8014988:	6803      	ldr	r3, [r0, #0]
 801498a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801498c:	b209      	sxth	r1, r1
 801498e:	4718      	bx	r3
 8014990:	2a02      	cmp	r2, #2
 8014992:	d106      	bne.n	80149a2 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8014994:	685b      	ldr	r3, [r3, #4]
 8014996:	8919      	ldrh	r1, [r3, #8]
 8014998:	8883      	ldrh	r3, [r0, #4]
 801499a:	4419      	add	r1, r3
 801499c:	6803      	ldr	r3, [r0, #0]
 801499e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80149a0:	e7f4      	b.n	801498c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 80149a2:	4770      	bx	lr

080149a4 <_ZN8touchgfx10ListLayout9removeAllEv>:
 80149a4:	2200      	movs	r2, #0
 80149a6:	b510      	push	{r4, lr}
 80149a8:	4604      	mov	r4, r0
 80149aa:	85c2      	strh	r2, [r0, #46]	@ 0x2e
 80149ac:	4611      	mov	r1, r2
 80149ae:	f7fb fd9c 	bl	80104ea <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80149b2:	4620      	mov	r0, r4
 80149b4:	f7ff f9b9 	bl	8013d2a <_ZN8touchgfx9Container9removeAllEv>
 80149b8:	6960      	ldr	r0, [r4, #20]
 80149ba:	b120      	cbz	r0, 80149c6 <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 80149bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149c0:	6803      	ldr	r3, [r0, #0]
 80149c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80149c4:	4718      	bx	r3
 80149c6:	bd10      	pop	{r4, pc}

080149c8 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 80149c8:	b530      	push	{r4, r5, lr}
 80149ca:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80149ce:	b085      	sub	sp, #20
 80149d0:	428b      	cmp	r3, r1
 80149d2:	4604      	mov	r4, r0
 80149d4:	d017      	beq.n	8014a06 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 80149d6:	2500      	movs	r5, #0
 80149d8:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 80149dc:	85c5      	strh	r5, [r0, #46]	@ 0x2e
 80149de:	462a      	mov	r2, r5
 80149e0:	4629      	mov	r1, r5
 80149e2:	f7fb fd82 	bl	80104ea <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80149e6:	4b09      	ldr	r3, [pc, #36]	@ (8014a0c <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x44>)
 80149e8:	4620      	mov	r0, r4
 80149ea:	e9cd 3400 	strd	r3, r4, [sp]
 80149ee:	4b08      	ldr	r3, [pc, #32]	@ (8014a10 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x48>)
 80149f0:	4669      	mov	r1, sp
 80149f2:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80149f6:	6823      	ldr	r3, [r4, #0]
 80149f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149fa:	4798      	blx	r3
 80149fc:	6960      	ldr	r0, [r4, #20]
 80149fe:	b110      	cbz	r0, 8014a06 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8014a00:	6803      	ldr	r3, [r0, #0]
 8014a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a04:	4798      	blx	r3
 8014a06:	b005      	add	sp, #20
 8014a08:	bd30      	pop	{r4, r5, pc}
 8014a0a:	bf00      	nop
 8014a0c:	0802f348 	.word	0x0802f348
 8014a10:	08014a79 	.word	0x08014a79

08014a14 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 8014a14:	b538      	push	{r3, r4, r5, lr}
 8014a16:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014a1a:	460d      	mov	r5, r1
 8014a1c:	2b01      	cmp	r3, #1
 8014a1e:	4604      	mov	r4, r0
 8014a20:	4611      	mov	r1, r2
 8014a22:	d002      	beq.n	8014a2a <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 8014a24:	2b02      	cmp	r3, #2
 8014a26:	d015      	beq.n	8014a54 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 8014a28:	bd38      	pop	{r3, r4, r5, pc}
 8014a2a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8014a2e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8014a32:	429a      	cmp	r2, r3
 8014a34:	bfb8      	it	lt
 8014a36:	8103      	strhlt	r3, [r0, #8]
 8014a38:	896a      	ldrh	r2, [r5, #10]
 8014a3a:	8943      	ldrh	r3, [r0, #10]
 8014a3c:	4413      	add	r3, r2
 8014a3e:	8143      	strh	r3, [r0, #10]
 8014a40:	460a      	mov	r2, r1
 8014a42:	4628      	mov	r0, r5
 8014a44:	2100      	movs	r1, #0
 8014a46:	f7fb fcf4 	bl	8010432 <_ZN8touchgfx8Drawable5setXYEss>
 8014a4a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014a4c:	896a      	ldrh	r2, [r5, #10]
 8014a4e:	4413      	add	r3, r2
 8014a50:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8014a52:	e7e9      	b.n	8014a28 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 8014a54:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8014a58:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	bfb8      	it	lt
 8014a60:	8143      	strhlt	r3, [r0, #10]
 8014a62:	892a      	ldrh	r2, [r5, #8]
 8014a64:	8903      	ldrh	r3, [r0, #8]
 8014a66:	4413      	add	r3, r2
 8014a68:	8103      	strh	r3, [r0, #8]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	4628      	mov	r0, r5
 8014a6e:	f7fb fce0 	bl	8010432 <_ZN8touchgfx8Drawable5setXYEss>
 8014a72:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014a74:	892a      	ldrh	r2, [r5, #8]
 8014a76:	e7ea      	b.n	8014a4e <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

08014a78 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 8014a78:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	@ 0x2e
 8014a7c:	f7ff bfca 	b.w	8014a14 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

08014a80 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 8014a80:	b570      	push	{r4, r5, r6, lr}
 8014a82:	4604      	mov	r4, r0
 8014a84:	460d      	mov	r5, r1
 8014a86:	f7ff fff7 	bl	8014a78 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 8014a8a:	4620      	mov	r0, r4
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	f7ff f93f 	bl	8013d10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014a92:	6960      	ldr	r0, [r4, #20]
 8014a94:	b120      	cbz	r0, 8014aa0 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 8014a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a9a:	6803      	ldr	r3, [r0, #0]
 8014a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a9e:	4718      	bx	r3
 8014aa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08014aa4 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 8014aa4:	b530      	push	{r4, r5, lr}
 8014aa6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014aa8:	b089      	sub	sp, #36	@ 0x24
 8014aaa:	4604      	mov	r4, r0
 8014aac:	4615      	mov	r5, r2
 8014aae:	b92b      	cbnz	r3, 8014abc <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 8014ab0:	6803      	ldr	r3, [r0, #0]
 8014ab2:	4611      	mov	r1, r2
 8014ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014ab6:	4798      	blx	r3
 8014ab8:	b009      	add	sp, #36	@ 0x24
 8014aba:	bd30      	pop	{r4, r5, pc}
 8014abc:	f7ff f978 	bl	8013db0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8014ac6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014aca:	f88d 200c 	strb.w	r2, [sp, #12]
 8014ace:	4a0e      	ldr	r2, [pc, #56]	@ (8014b08 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8014ad0:	f88d 3006 	strb.w	r3, [sp, #6]
 8014ad4:	9204      	str	r2, [sp, #16]
 8014ad6:	aa01      	add	r2, sp, #4
 8014ad8:	9205      	str	r2, [sp, #20]
 8014ada:	4a0c      	ldr	r2, [pc, #48]	@ (8014b0c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8014adc:	a904      	add	r1, sp, #16
 8014ade:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014ae2:	6823      	ldr	r3, [r4, #0]
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ae8:	9502      	str	r5, [sp, #8]
 8014aea:	4798      	blx	r3
 8014aec:	4620      	mov	r0, r4
 8014aee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014af2:	4629      	mov	r1, r5
 8014af4:	f7ff ff8e 	bl	8014a14 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 8014af8:	6960      	ldr	r0, [r4, #20]
 8014afa:	2800      	cmp	r0, #0
 8014afc:	d0dc      	beq.n	8014ab8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8014afe:	6803      	ldr	r3, [r0, #0]
 8014b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b02:	4798      	blx	r3
 8014b04:	e7d8      	b.n	8014ab8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8014b06:	bf00      	nop
 8014b08:	0802f360 	.word	0x0802f360
 8014b0c:	0801494d 	.word	0x0801494d

08014b10 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 8014b10:	b538      	push	{r3, r4, r5, lr}
 8014b12:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014b16:	4604      	mov	r4, r0
 8014b18:	2b01      	cmp	r3, #1
 8014b1a:	460d      	mov	r5, r1
 8014b1c:	d002      	beq.n	8014b24 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 8014b1e:	2b02      	cmp	r3, #2
 8014b20:	d018      	beq.n	8014b54 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 8014b22:	bd38      	pop	{r3, r4, r5, pc}
 8014b24:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014b28:	4293      	cmp	r3, r2
 8014b2a:	bfc8      	it	gt
 8014b2c:	8102      	strhgt	r2, [r0, #8]
 8014b2e:	894a      	ldrh	r2, [r1, #10]
 8014b30:	8943      	ldrh	r3, [r0, #10]
 8014b32:	1a9b      	subs	r3, r3, r2
 8014b34:	8143      	strh	r3, [r0, #10]
 8014b36:	680b      	ldr	r3, [r1, #0]
 8014b38:	4628      	mov	r0, r5
 8014b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b3c:	2100      	movs	r1, #0
 8014b3e:	4798      	blx	r3
 8014b40:	682b      	ldr	r3, [r5, #0]
 8014b42:	2100      	movs	r1, #0
 8014b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b46:	4628      	mov	r0, r5
 8014b48:	4798      	blx	r3
 8014b4a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014b4c:	896a      	ldrh	r2, [r5, #10]
 8014b4e:	1a9b      	subs	r3, r3, r2
 8014b50:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8014b52:	e7e6      	b.n	8014b22 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 8014b54:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014b58:	4293      	cmp	r3, r2
 8014b5a:	bfc8      	it	gt
 8014b5c:	8142      	strhgt	r2, [r0, #10]
 8014b5e:	890a      	ldrh	r2, [r1, #8]
 8014b60:	8903      	ldrh	r3, [r0, #8]
 8014b62:	1a9b      	subs	r3, r3, r2
 8014b64:	8103      	strh	r3, [r0, #8]
 8014b66:	680b      	ldr	r3, [r1, #0]
 8014b68:	4628      	mov	r0, r5
 8014b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b6c:	2100      	movs	r1, #0
 8014b6e:	4798      	blx	r3
 8014b70:	682b      	ldr	r3, [r5, #0]
 8014b72:	2100      	movs	r1, #0
 8014b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b76:	4628      	mov	r0, r5
 8014b78:	4798      	blx	r3
 8014b7a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014b7c:	892a      	ldrh	r2, [r5, #8]
 8014b7e:	e7e6      	b.n	8014b4e <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08014b80 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8014b80:	2300      	movs	r3, #0
 8014b82:	b530      	push	{r4, r5, lr}
 8014b84:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8014b88:	b089      	sub	sp, #36	@ 0x24
 8014b8a:	f88d 200c 	strb.w	r2, [sp, #12]
 8014b8e:	4a13      	ldr	r2, [pc, #76]	@ (8014bdc <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8014b90:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014b94:	9204      	str	r2, [sp, #16]
 8014b96:	aa01      	add	r2, sp, #4
 8014b98:	9205      	str	r2, [sp, #20]
 8014b9a:	4a11      	ldr	r2, [pc, #68]	@ (8014be0 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 8014b9c:	f88d 3006 	strb.w	r3, [sp, #6]
 8014ba0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014ba4:	6803      	ldr	r3, [r0, #0]
 8014ba6:	9102      	str	r1, [sp, #8]
 8014ba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014baa:	460d      	mov	r5, r1
 8014bac:	a904      	add	r1, sp, #16
 8014bae:	4604      	mov	r4, r0
 8014bb0:	4798      	blx	r3
 8014bb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014bb6:	b14b      	cbz	r3, 8014bcc <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 8014bb8:	4629      	mov	r1, r5
 8014bba:	4620      	mov	r0, r4
 8014bbc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014bc0:	f7ff ffa6 	bl	8014b10 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8014bc4:	4629      	mov	r1, r5
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	f7ff f8db 	bl	8013d82 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8014bcc:	6960      	ldr	r0, [r4, #20]
 8014bce:	b110      	cbz	r0, 8014bd6 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8014bd0:	6803      	ldr	r3, [r0, #0]
 8014bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014bd4:	4798      	blx	r3
 8014bd6:	b009      	add	sp, #36	@ 0x24
 8014bd8:	bd30      	pop	{r4, r5, pc}
 8014bda:	bf00      	nop
 8014bdc:	0802f360 	.word	0x0802f360
 8014be0:	0801484f 	.word	0x0801484f

08014be4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014be4:	b513      	push	{r0, r1, r4, lr}
 8014be6:	6803      	ldr	r3, [r0, #0]
 8014be8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8014bec:	2300      	movs	r3, #0
 8014bee:	e9cd 3300 	strd	r3, r3, [sp]
 8014bf2:	466b      	mov	r3, sp
 8014bf4:	47a0      	blx	r4
 8014bf6:	b002      	add	sp, #8
 8014bf8:	bd10      	pop	{r4, pc}

08014bfa <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014c00:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014c04:	4770      	bx	lr

08014c06 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014c06:	2301      	movs	r3, #1
 8014c08:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014c0c:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014c10:	4770      	bx	lr

08014c12 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014c12:	2201      	movs	r2, #1
 8014c14:	6843      	ldr	r3, [r0, #4]
 8014c16:	725a      	strb	r2, [r3, #9]
 8014c18:	6840      	ldr	r0, [r0, #4]
 8014c1a:	6803      	ldr	r3, [r0, #0]
 8014c1c:	691b      	ldr	r3, [r3, #16]
 8014c1e:	4718      	bx	r3

08014c20 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014c20:	6840      	ldr	r0, [r0, #4]
 8014c22:	6803      	ldr	r3, [r0, #0]
 8014c24:	689b      	ldr	r3, [r3, #8]
 8014c26:	4718      	bx	r3

08014c28 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8014c28:	b530      	push	{r4, r5, lr}
 8014c2a:	b08b      	sub	sp, #44	@ 0x2c
 8014c2c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8014c30:	6804      	ldr	r4, [r0, #0]
 8014c32:	9509      	str	r5, [sp, #36]	@ 0x24
 8014c34:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8014c38:	9508      	str	r5, [sp, #32]
 8014c3a:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8014c3e:	9507      	str	r5, [sp, #28]
 8014c40:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8014c44:	9506      	str	r5, [sp, #24]
 8014c46:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8014c4a:	9505      	str	r5, [sp, #20]
 8014c4c:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8014c50:	9504      	str	r5, [sp, #16]
 8014c52:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8014c56:	9503      	str	r5, [sp, #12]
 8014c58:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8014c5c:	9502      	str	r5, [sp, #8]
 8014c5e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8014c62:	e9cd 3500 	strd	r3, r5, [sp]
 8014c66:	4613      	mov	r3, r2
 8014c68:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	47a0      	blx	r4
 8014c6e:	b00b      	add	sp, #44	@ 0x2c
 8014c70:	bd30      	pop	{r4, r5, pc}
	...

08014c74 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014c74:	4b04      	ldr	r3, [pc, #16]	@ (8014c88 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	b123      	cbz	r3, 8014c84 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014c7a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8014c7e:	f080 0001 	eor.w	r0, r0, #1
 8014c82:	4770      	bx	lr
 8014c84:	2001      	movs	r0, #1
 8014c86:	4770      	bx	lr
 8014c88:	2005ba7e 	.word	0x2005ba7e

08014c8c <_ZN8touchgfx3HAL8endFrameEv>:
 8014c8c:	b510      	push	{r4, lr}
 8014c8e:	4604      	mov	r4, r0
 8014c90:	6840      	ldr	r0, [r0, #4]
 8014c92:	6803      	ldr	r3, [r0, #0]
 8014c94:	689b      	ldr	r3, [r3, #8]
 8014c96:	4798      	blx	r3
 8014c98:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8014c9c:	b113      	cbz	r3, 8014ca4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8014ca4:	bd10      	pop	{r4, pc}

08014ca6 <_ZN8touchgfx3HAL10initializeEv>:
 8014ca6:	b510      	push	{r4, lr}
 8014ca8:	4604      	mov	r4, r0
 8014caa:	f7fc ff97 	bl	8011bdc <_ZN8touchgfx10OSWrappers10initializeEv>
 8014cae:	f7fc fc31 	bl	8011514 <_ZN8touchgfx4GPIO4initEv>
 8014cb2:	6860      	ldr	r0, [r4, #4]
 8014cb4:	6803      	ldr	r3, [r0, #0]
 8014cb6:	68db      	ldr	r3, [r3, #12]
 8014cb8:	4798      	blx	r3
 8014cba:	68e0      	ldr	r0, [r4, #12]
 8014cbc:	6803      	ldr	r3, [r0, #0]
 8014cbe:	689b      	ldr	r3, [r3, #8]
 8014cc0:	4798      	blx	r3
 8014cc2:	6823      	ldr	r3, [r4, #0]
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014ccc:	4718      	bx	r3

08014cce <_ZN8touchgfx3HAL9taskEntryEv>:
 8014cce:	4604      	mov	r4, r0
 8014cd0:	b508      	push	{r3, lr}
 8014cd2:	6803      	ldr	r3, [r0, #0]
 8014cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014cd8:	4798      	blx	r3
 8014cda:	6823      	ldr	r3, [r4, #0]
 8014cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014cde:	4620      	mov	r0, r4
 8014ce0:	4798      	blx	r3
 8014ce2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014ce6:	2b02      	cmp	r3, #2
 8014ce8:	d001      	beq.n	8014cee <_ZN8touchgfx3HAL9taskEntryEv+0x20>
 8014cea:	f7fc ffed 	bl	8011cc8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014cee:	6823      	ldr	r3, [r4, #0]
 8014cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014cf2:	e7f4      	b.n	8014cde <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08014cf4 <_ZN8touchgfx3HAL4tickEv>:
 8014cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014cf6:	6803      	ldr	r3, [r0, #0]
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014cfe:	4798      	blx	r3
 8014d00:	4d60      	ldr	r5, [pc, #384]	@ (8014e84 <_ZN8touchgfx3HAL4tickEv+0x190>)
 8014d02:	2800      	cmp	r0, #0
 8014d04:	f000 809e 	beq.w	8014e44 <_ZN8touchgfx3HAL4tickEv+0x150>
 8014d08:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014d0c:	2b02      	cmp	r3, #2
 8014d0e:	d002      	beq.n	8014d16 <_ZN8touchgfx3HAL4tickEv+0x22>
 8014d10:	2001      	movs	r0, #1
 8014d12:	f7fc fc07 	bl	8011524 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014d16:	2600      	movs	r6, #0
 8014d18:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8014d1c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8014d20:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014d24:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8014d28:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8014d2c:	b133      	cbz	r3, 8014d3c <_ZN8touchgfx3HAL4tickEv+0x48>
 8014d2e:	6823      	ldr	r3, [r4, #0]
 8014d30:	4620      	mov	r0, r4
 8014d32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8014d36:	4798      	blx	r3
 8014d38:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8014d3c:	2601      	movs	r6, #1
 8014d3e:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8014d42:	6862      	ldr	r2, [r4, #4]
 8014d44:	f083 0301 	eor.w	r3, r3, #1
 8014d48:	7253      	strb	r3, [r2, #9]
 8014d4a:	702e      	strb	r6, [r5, #0]
 8014d4c:	f004 fc80 	bl	8019650 <_ZN8touchgfx11Application11getInstanceEv>
 8014d50:	6803      	ldr	r3, [r0, #0]
 8014d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d54:	4798      	blx	r3
 8014d56:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014d5a:	b90b      	cbnz	r3, 8014d60 <_ZN8touchgfx3HAL4tickEv+0x6c>
 8014d5c:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8014d60:	f004 fc76 	bl	8019650 <_ZN8touchgfx11Application11getInstanceEv>
 8014d64:	6803      	ldr	r3, [r0, #0]
 8014d66:	695b      	ldr	r3, [r3, #20]
 8014d68:	4798      	blx	r3
 8014d6a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014d6c:	6803      	ldr	r3, [r0, #0]
 8014d6e:	691b      	ldr	r3, [r3, #16]
 8014d70:	4798      	blx	r3
 8014d72:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014d76:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8014d7a:	3b01      	subs	r3, #1
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014d82:	b10a      	cbz	r2, 8014d88 <_ZN8touchgfx3HAL4tickEv+0x94>
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d1eb      	bne.n	8014d60 <_ZN8touchgfx3HAL4tickEv+0x6c>
 8014d88:	4a3f      	ldr	r2, [pc, #252]	@ (8014e88 <_ZN8touchgfx3HAL4tickEv+0x194>)
 8014d8a:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8014d8e:	7813      	ldrb	r3, [r2, #0]
 8014d90:	3301      	adds	r3, #1
 8014d92:	b25b      	sxtb	r3, r3
 8014d94:	4299      	cmp	r1, r3
 8014d96:	7013      	strb	r3, [r2, #0]
 8014d98:	dc10      	bgt.n	8014dbc <_ZN8touchgfx3HAL4tickEv+0xc8>
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	68e0      	ldr	r0, [r4, #12]
 8014d9e:	7013      	strb	r3, [r2, #0]
 8014da0:	6803      	ldr	r3, [r0, #0]
 8014da2:	aa03      	add	r2, sp, #12
 8014da4:	68db      	ldr	r3, [r3, #12]
 8014da6:	a902      	add	r1, sp, #8
 8014da8:	4798      	blx	r3
 8014daa:	6823      	ldr	r3, [r4, #0]
 8014dac:	2800      	cmp	r0, #0
 8014dae:	d059      	beq.n	8014e64 <_ZN8touchgfx3HAL4tickEv+0x170>
 8014db0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014db4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8014db8:	4620      	mov	r0, r4
 8014dba:	4798      	blx	r3
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	6960      	ldr	r0, [r4, #20]
 8014dc0:	f88d 3007 	strb.w	r3, [sp, #7]
 8014dc4:	b158      	cbz	r0, 8014dde <_ZN8touchgfx3HAL4tickEv+0xea>
 8014dc6:	6803      	ldr	r3, [r0, #0]
 8014dc8:	f10d 0107 	add.w	r1, sp, #7
 8014dcc:	68db      	ldr	r3, [r3, #12]
 8014dce:	4798      	blx	r3
 8014dd0:	b128      	cbz	r0, 8014dde <_ZN8touchgfx3HAL4tickEv+0xea>
 8014dd2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014dd4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014dd8:	6803      	ldr	r3, [r0, #0]
 8014dda:	68db      	ldr	r3, [r3, #12]
 8014ddc:	4798      	blx	r3
 8014dde:	f104 001c 	add.w	r0, r4, #28
 8014de2:	f016 f8c1 	bl	802af68 <_ZN8touchgfx8Gestures4tickEv>
 8014de6:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8014dea:	b30b      	cbz	r3, 8014e30 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8014dec:	6920      	ldr	r0, [r4, #16]
 8014dee:	6803      	ldr	r3, [r0, #0]
 8014df0:	691b      	ldr	r3, [r3, #16]
 8014df2:	4798      	blx	r3
 8014df4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014df6:	4606      	mov	r6, r0
 8014df8:	b903      	cbnz	r3, 8014dfc <_ZN8touchgfx3HAL4tickEv+0x108>
 8014dfa:	6760      	str	r0, [r4, #116]	@ 0x74
 8014dfc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014dfe:	4a23      	ldr	r2, [pc, #140]	@ (8014e8c <_ZN8touchgfx3HAL4tickEv+0x198>)
 8014e00:	1af3      	subs	r3, r6, r3
 8014e02:	4293      	cmp	r3, r2
 8014e04:	d914      	bls.n	8014e30 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8014e06:	6920      	ldr	r0, [r4, #16]
 8014e08:	6803      	ldr	r3, [r0, #0]
 8014e0a:	699b      	ldr	r3, [r3, #24]
 8014e0c:	4798      	blx	r3
 8014e0e:	2264      	movs	r2, #100	@ 0x64
 8014e10:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014e12:	1af3      	subs	r3, r6, r3
 8014e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e18:	fbb0 f0f3 	udiv	r0, r0, r3
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	dc26      	bgt.n	8014e6e <_ZN8touchgfx3HAL4tickEv+0x17a>
 8014e20:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8014e24:	6920      	ldr	r0, [r4, #16]
 8014e26:	2100      	movs	r1, #0
 8014e28:	6803      	ldr	r3, [r0, #0]
 8014e2a:	69db      	ldr	r3, [r3, #28]
 8014e2c:	4798      	blx	r3
 8014e2e:	6766      	str	r6, [r4, #116]	@ 0x74
 8014e30:	6823      	ldr	r3, [r4, #0]
 8014e32:	4620      	mov	r0, r4
 8014e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014e38:	4798      	blx	r3
 8014e3a:	f004 fc09 	bl	8019650 <_ZN8touchgfx11Application11getInstanceEv>
 8014e3e:	6803      	ldr	r3, [r0, #0]
 8014e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e42:	4798      	blx	r3
 8014e44:	6823      	ldr	r3, [r4, #0]
 8014e46:	4620      	mov	r0, r4
 8014e48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8014e4c:	4798      	blx	r3
 8014e4e:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014e52:	2b02      	cmp	r3, #2
 8014e54:	d002      	beq.n	8014e5c <_ZN8touchgfx3HAL4tickEv+0x168>
 8014e56:	2001      	movs	r0, #1
 8014e58:	f7fc fb80 	bl	801155c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	702b      	strb	r3, [r5, #0]
 8014e60:	b004      	add	sp, #16
 8014e62:	bd70      	pop	{r4, r5, r6, pc}
 8014e64:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8014e68:	4620      	mov	r0, r4
 8014e6a:	4798      	blx	r3
 8014e6c:	e7a6      	b.n	8014dbc <_ZN8touchgfx3HAL4tickEv+0xc8>
 8014e6e:	2863      	cmp	r0, #99	@ 0x63
 8014e70:	bfcb      	itete	gt
 8014e72:	2300      	movgt	r3, #0
 8014e74:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8014e78:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8014e7c:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8014e80:	e7d0      	b.n	8014e24 <_ZN8touchgfx3HAL4tickEv+0x130>
 8014e82:	bf00      	nop
 8014e84:	2005ba84 	.word	0x2005ba84
 8014e88:	2005ba85 	.word	0x2005ba85
 8014e8c:	05f5e100 	.word	0x05f5e100

08014e90 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014e90:	b510      	push	{r4, lr}
 8014e92:	4604      	mov	r4, r0
 8014e94:	f7fc fee4 	bl	8011c60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8014e98:	2200      	movs	r2, #0
 8014e9a:	6863      	ldr	r3, [r4, #4]
 8014e9c:	729a      	strb	r2, [r3, #10]
 8014e9e:	bd10      	pop	{r4, pc}

08014ea0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014ea0:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8014ea2:	301c      	adds	r0, #28
 8014ea4:	f016 b85e 	b.w	802af64 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014ea8 <_ZN8touchgfx3HAL5touchEll>:
 8014ea8:	b530      	push	{r4, r5, lr}
 8014eaa:	4604      	mov	r4, r0
 8014eac:	b087      	sub	sp, #28
 8014eae:	a804      	add	r0, sp, #16
 8014eb0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014eb4:	f004 f9be 	bl	8019234 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014eb8:	9b04      	ldr	r3, [sp, #16]
 8014eba:	a906      	add	r1, sp, #24
 8014ebc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014ec0:	9b05      	ldr	r3, [sp, #20]
 8014ec2:	a803      	add	r0, sp, #12
 8014ec4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014ec8:	f004 fa06 	bl	80192d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014ecc:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8014ed0:	f104 001c 	add.w	r0, r4, #28
 8014ed4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014ed8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014edc:	b189      	cbz	r1, 8014f02 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014ede:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8014ee2:	9300      	str	r3, [sp, #0]
 8014ee4:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8014ee8:	4613      	mov	r3, r2
 8014eea:	462a      	mov	r2, r5
 8014eec:	f016 f84a 	bl	802af84 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014ef0:	b128      	cbz	r0, 8014efe <_ZN8touchgfx3HAL5touchEll+0x56>
 8014ef2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014ef6:	6623      	str	r3, [r4, #96]	@ 0x60
 8014ef8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014efc:	6663      	str	r3, [r4, #100]	@ 0x64
 8014efe:	b007      	add	sp, #28
 8014f00:	bd30      	pop	{r4, r5, pc}
 8014f02:	f016 f87f 	bl	802b004 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014f06:	2301      	movs	r3, #1
 8014f08:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8014f0c:	e7f1      	b.n	8014ef2 <_ZN8touchgfx3HAL5touchEll+0x4a>

08014f0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8014f0e:	b510      	push	{r4, lr}
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d046      	beq.n	8014fa2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014f14:	ea81 0002 	eor.w	r0, r1, r2
 8014f18:	07c4      	lsls	r4, r0, #31
 8014f1a:	d508      	bpl.n	8014f2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8014f1c:	440b      	add	r3, r1
 8014f1e:	3a01      	subs	r2, #1
 8014f20:	428b      	cmp	r3, r1
 8014f22:	d93e      	bls.n	8014fa2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014f24:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014f28:	f801 0b01 	strb.w	r0, [r1], #1
 8014f2c:	e7f8      	b.n	8014f20 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8014f2e:	07d0      	lsls	r0, r2, #31
 8014f30:	bf42      	ittt	mi
 8014f32:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014f36:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8014f3a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8014f3e:	2b01      	cmp	r3, #1
 8014f40:	d911      	bls.n	8014f66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014f42:	ea81 0402 	eor.w	r4, r1, r2
 8014f46:	07a4      	lsls	r4, r4, #30
 8014f48:	4610      	mov	r0, r2
 8014f4a:	d022      	beq.n	8014f92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8014f4c:	f023 0401 	bic.w	r4, r3, #1
 8014f50:	440c      	add	r4, r1
 8014f52:	428c      	cmp	r4, r1
 8014f54:	4602      	mov	r2, r0
 8014f56:	d904      	bls.n	8014f62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8014f58:	8812      	ldrh	r2, [r2, #0]
 8014f5a:	3002      	adds	r0, #2
 8014f5c:	f821 2b02 	strh.w	r2, [r1], #2
 8014f60:	e7f7      	b.n	8014f52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014f62:	f003 0301 	and.w	r3, r3, #1
 8014f66:	f023 0003 	bic.w	r0, r3, #3
 8014f6a:	4408      	add	r0, r1
 8014f6c:	4288      	cmp	r0, r1
 8014f6e:	4614      	mov	r4, r2
 8014f70:	d904      	bls.n	8014f7c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014f72:	6824      	ldr	r4, [r4, #0]
 8014f74:	3204      	adds	r2, #4
 8014f76:	f841 4b04 	str.w	r4, [r1], #4
 8014f7a:	e7f7      	b.n	8014f6c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014f7c:	f003 0303 	and.w	r3, r3, #3
 8014f80:	440b      	add	r3, r1
 8014f82:	3a01      	subs	r2, #1
 8014f84:	428b      	cmp	r3, r1
 8014f86:	d90c      	bls.n	8014fa2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014f88:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014f8c:	f801 0b01 	strb.w	r0, [r1], #1
 8014f90:	e7f8      	b.n	8014f84 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014f92:	0790      	lsls	r0, r2, #30
 8014f94:	d0e7      	beq.n	8014f66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014f96:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014f9a:	3b02      	subs	r3, #2
 8014f9c:	f821 0b02 	strh.w	r0, [r1], #2
 8014fa0:	e7e1      	b.n	8014f66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014fa2:	2001      	movs	r0, #1
 8014fa4:	bd10      	pop	{r4, pc}

08014fa6 <_ZN8touchgfx3HAL7noTouchEv>:
 8014fa6:	b510      	push	{r4, lr}
 8014fa8:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8014fac:	4604      	mov	r4, r0
 8014fae:	b153      	cbz	r3, 8014fc6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014fb0:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8014fb4:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8014fb8:	2101      	movs	r1, #1
 8014fba:	301c      	adds	r0, #28
 8014fbc:	f016 f822 	bl	802b004 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8014fc6:	bd10      	pop	{r4, pc}

08014fc8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fcc:	4604      	mov	r4, r0
 8014fce:	2000      	movs	r0, #0
 8014fd0:	b085      	sub	sp, #20
 8014fd2:	ad04      	add	r5, sp, #16
 8014fd4:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014fd8:	69a0      	ldr	r0, [r4, #24]
 8014fda:	4699      	mov	r9, r3
 8014fdc:	6806      	ldr	r6, [r0, #0]
 8014fde:	9501      	str	r5, [sp, #4]
 8014fe0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8014fe4:	460f      	mov	r7, r1
 8014fe6:	9500      	str	r5, [sp, #0]
 8014fe8:	6835      	ldr	r5, [r6, #0]
 8014fea:	4690      	mov	r8, r2
 8014fec:	47a8      	blx	r5
 8014fee:	4d10      	ldr	r5, [pc, #64]	@ (8015030 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8014ff0:	4606      	mov	r6, r0
 8014ff2:	f8a5 9000 	strh.w	r9, [r5]
 8014ff6:	f7fa fcc7 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 8014ffa:	6803      	ldr	r3, [r0, #0]
 8014ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ffe:	4798      	blx	r3
 8015000:	b128      	cbz	r0, 801500e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8015002:	2801      	cmp	r0, #1
 8015004:	d00b      	beq.n	801501e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8015006:	4630      	mov	r0, r6
 8015008:	b005      	add	sp, #20
 801500a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801500e:	882b      	ldrh	r3, [r5, #0]
 8015010:	fb08 7203 	mla	r2, r8, r3, r7
 8015014:	9b03      	ldr	r3, [sp, #12]
 8015016:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801501a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801501c:	e7f3      	b.n	8015006 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801501e:	882a      	ldrh	r2, [r5, #0]
 8015020:	9b03      	ldr	r3, [sp, #12]
 8015022:	fb08 7202 	mla	r2, r8, r2, r7
 8015026:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801502a:	1a9a      	subs	r2, r3, r2
 801502c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 801502e:	e7ea      	b.n	8015006 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015030:	2005ba7a 	.word	0x2005ba7a

08015034 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 8015034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015036:	4b15      	ldr	r3, [pc, #84]	@ (801508c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 8015038:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 801503c:	881b      	ldrh	r3, [r3, #0]
 801503e:	460f      	mov	r7, r1
 8015040:	fb93 f4f4 	sdiv	r4, r3, r4
 8015044:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8015046:	4606      	mov	r6, r0
 8015048:	f7fa fc9e 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 801504c:	6803      	ldr	r3, [r0, #0]
 801504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015050:	4798      	blx	r3
 8015052:	2801      	cmp	r0, #1
 8015054:	d00b      	beq.n	801506e <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 8015056:	d303      	bcc.n	8015060 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 8015058:	2802      	cmp	r0, #2
 801505a:	d010      	beq.n	801507e <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 801505c:	63f5      	str	r5, [r6, #60]	@ 0x3c
 801505e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015060:	437c      	muls	r4, r7
 8015062:	4b0b      	ldr	r3, [pc, #44]	@ (8015090 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8015064:	8819      	ldrh	r1, [r3, #0]
 8015066:	434c      	muls	r4, r1
 8015068:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 801506c:	e7f6      	b.n	801505c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 801506e:	437c      	muls	r4, r7
 8015070:	4b07      	ldr	r3, [pc, #28]	@ (8015090 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8015072:	8819      	ldrh	r1, [r3, #0]
 8015074:	434c      	muls	r4, r1
 8015076:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801507a:	1b2d      	subs	r5, r5, r4
 801507c:	e7ee      	b.n	801505c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 801507e:	437c      	muls	r4, r7
 8015080:	4b03      	ldr	r3, [pc, #12]	@ (8015090 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8015082:	8819      	ldrh	r1, [r3, #0]
 8015084:	434c      	muls	r4, r1
 8015086:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 801508a:	e7e7      	b.n	801505c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 801508c:	2005ba7c 	.word	0x2005ba7c
 8015090:	2005ba7a 	.word	0x2005ba7a

08015094 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8015094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015096:	b08b      	sub	sp, #44	@ 0x2c
 8015098:	4617      	mov	r7, r2
 801509a:	4604      	mov	r4, r0
 801509c:	460e      	mov	r6, r1
 801509e:	461d      	mov	r5, r3
 80150a0:	f7fa fc72 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 80150a4:	6803      	ldr	r3, [r0, #0]
 80150a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150a8:	4798      	blx	r3
 80150aa:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80150ae:	9007      	str	r0, [sp, #28]
 80150b0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80150b4:	4b0d      	ldr	r3, [pc, #52]	@ (80150ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80150b6:	6822      	ldr	r2, [r4, #0]
 80150b8:	881b      	ldrh	r3, [r3, #0]
 80150ba:	4631      	mov	r1, r6
 80150bc:	9306      	str	r3, [sp, #24]
 80150be:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80150c2:	4620      	mov	r0, r4
 80150c4:	9305      	str	r3, [sp, #20]
 80150c6:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80150ca:	9304      	str	r3, [sp, #16]
 80150cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80150d0:	9303      	str	r3, [sp, #12]
 80150d2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80150d6:	9302      	str	r3, [sp, #8]
 80150d8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80150dc:	e9cd 5300 	strd	r5, r3, [sp]
 80150e0:	463b      	mov	r3, r7
 80150e2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80150e4:	2200      	movs	r2, #0
 80150e6:	47a8      	blx	r5
 80150e8:	b00b      	add	sp, #44	@ 0x2c
 80150ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150ec:	2005ba7a 	.word	0x2005ba7a

080150f0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80150f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150f4:	4698      	mov	r8, r3
 80150f6:	6803      	ldr	r3, [r0, #0]
 80150f8:	b08b      	sub	sp, #44	@ 0x2c
 80150fa:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 80150fc:	4b14      	ldr	r3, [pc, #80]	@ (8015150 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80150fe:	4617      	mov	r7, r2
 8015100:	f8b3 9000 	ldrh.w	r9, [r3]
 8015104:	460e      	mov	r6, r1
 8015106:	4604      	mov	r4, r0
 8015108:	f7fa fc3e 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 801510c:	6803      	ldr	r3, [r0, #0]
 801510e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015110:	4798      	blx	r3
 8015112:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8015116:	2200      	movs	r2, #0
 8015118:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801511c:	2302      	movs	r3, #2
 801511e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8015122:	2301      	movs	r3, #1
 8015124:	9305      	str	r3, [sp, #20]
 8015126:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801512a:	4631      	mov	r1, r6
 801512c:	9304      	str	r3, [sp, #16]
 801512e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8015132:	4620      	mov	r0, r4
 8015134:	9303      	str	r3, [sp, #12]
 8015136:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801513a:	9302      	str	r3, [sp, #8]
 801513c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015140:	e9cd 8300 	strd	r8, r3, [sp]
 8015144:	463b      	mov	r3, r7
 8015146:	47a8      	blx	r5
 8015148:	b00b      	add	sp, #44	@ 0x2c
 801514a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801514e:	bf00      	nop
 8015150:	2005ba7a 	.word	0x2005ba7a

08015154 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8015154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015158:	4698      	mov	r8, r3
 801515a:	6803      	ldr	r3, [r0, #0]
 801515c:	b087      	sub	sp, #28
 801515e:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8015160:	4b10      	ldr	r3, [pc, #64]	@ (80151a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8015162:	460e      	mov	r6, r1
 8015164:	f8b3 9000 	ldrh.w	r9, [r3]
 8015168:	4617      	mov	r7, r2
 801516a:	4604      	mov	r4, r0
 801516c:	f7fa fc0c 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 8015170:	6803      	ldr	r3, [r0, #0]
 8015172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015174:	4798      	blx	r3
 8015176:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801517a:	f8cd 900c 	str.w	r9, [sp, #12]
 801517e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8015182:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8015186:	463a      	mov	r2, r7
 8015188:	9302      	str	r3, [sp, #8]
 801518a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801518e:	4631      	mov	r1, r6
 8015190:	9301      	str	r3, [sp, #4]
 8015192:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015196:	4620      	mov	r0, r4
 8015198:	9300      	str	r3, [sp, #0]
 801519a:	4643      	mov	r3, r8
 801519c:	47a8      	blx	r5
 801519e:	b007      	add	sp, #28
 80151a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151a4:	2005ba7a 	.word	0x2005ba7a

080151a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80151a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ac:	4604      	mov	r4, r0
 80151ae:	b08f      	sub	sp, #60	@ 0x3c
 80151b0:	4610      	mov	r0, r2
 80151b2:	460d      	mov	r5, r1
 80151b4:	4691      	mov	r9, r2
 80151b6:	461e      	mov	r6, r3
 80151b8:	f007 fbee 	bl	801c998 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80151bc:	2800      	cmp	r0, #0
 80151be:	f000 809d 	beq.w	80152fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80151c2:	6823      	ldr	r3, [r4, #0]
 80151c4:	4620      	mov	r0, r4
 80151c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151c8:	4798      	blx	r3
 80151ca:	6823      	ldr	r3, [r4, #0]
 80151cc:	f8df b190 	ldr.w	fp, [pc, #400]	@ 8015360 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80151d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151d2:	4620      	mov	r0, r4
 80151d4:	4798      	blx	r3
 80151d6:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8015364 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80151da:	f8bb 3000 	ldrh.w	r3, [fp]
 80151de:	4f5d      	ldr	r7, [pc, #372]	@ (8015354 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80151e0:	9301      	str	r3, [sp, #4]
 80151e2:	f8ba 3000 	ldrh.w	r3, [sl]
 80151e6:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80151ea:	9302      	str	r3, [sp, #8]
 80151ec:	883b      	ldrh	r3, [r7, #0]
 80151ee:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80151f2:	9303      	str	r3, [sp, #12]
 80151f4:	4b58      	ldr	r3, [pc, #352]	@ (8015358 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80151f6:	4640      	mov	r0, r8
 80151f8:	881a      	ldrh	r2, [r3, #0]
 80151fa:	9305      	str	r3, [sp, #20]
 80151fc:	9204      	str	r2, [sp, #16]
 80151fe:	f007 fc5f 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015202:	8038      	strh	r0, [r7, #0]
 8015204:	4640      	mov	r0, r8
 8015206:	f007 fc8f 	bl	801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801520a:	9b05      	ldr	r3, [sp, #20]
 801520c:	b280      	uxth	r0, r0
 801520e:	8018      	strh	r0, [r3, #0]
 8015210:	4b52      	ldr	r3, [pc, #328]	@ (801535c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8015212:	781b      	ldrb	r3, [r3, #0]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d174      	bne.n	8015302 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8015218:	883b      	ldrh	r3, [r7, #0]
 801521a:	f8aa 0000 	strh.w	r0, [sl]
 801521e:	f8ab 3000 	strh.w	r3, [fp]
 8015222:	4648      	mov	r0, r9
 8015224:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8015228:	f007 fbb6 	bl	801c998 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801522c:	2200      	movs	r2, #0
 801522e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8015232:	4611      	mov	r1, r2
 8015234:	4628      	mov	r0, r5
 8015236:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801523a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801523e:	f7fb f8f8 	bl	8010432 <_ZN8touchgfx8Drawable5setXYEss>
 8015242:	2301      	movs	r3, #1
 8015244:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8015248:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 801524c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015250:	2b00      	cmp	r3, #0
 8015252:	dd5c      	ble.n	801530e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015254:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015258:	2b00      	cmp	r3, #0
 801525a:	dd58      	ble.n	801530e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801525c:	462a      	mov	r2, r5
 801525e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015262:	ab0a      	add	r3, sp, #40	@ 0x28
 8015264:	6851      	ldr	r1, [r2, #4]
 8015266:	c303      	stmia	r3!, {r0, r1}
 8015268:	4631      	mov	r1, r6
 801526a:	a80a      	add	r0, sp, #40	@ 0x28
 801526c:	f7fe feca 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 8015270:	2100      	movs	r1, #0
 8015272:	4b38      	ldr	r3, [pc, #224]	@ (8015354 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015274:	910c      	str	r1, [sp, #48]	@ 0x30
 8015276:	f9b3 2000 	ldrsh.w	r2, [r3]
 801527a:	4b37      	ldr	r3, [pc, #220]	@ (8015358 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801527c:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8015280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015284:	aa0a      	add	r2, sp, #40	@ 0x28
 8015286:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801528a:	ab08      	add	r3, sp, #32
 801528c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015290:	e883 0003 	stmia.w	r3, {r0, r1}
 8015294:	4618      	mov	r0, r3
 8015296:	a90c      	add	r1, sp, #48	@ 0x30
 8015298:	f7fe feb4 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801529c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d13c      	bne.n	801531c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80152a2:	2000      	movs	r0, #0
 80152a4:	2600      	movs	r6, #0
 80152a6:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 80152aa:	696b      	ldr	r3, [r5, #20]
 80152ac:	682a      	ldr	r2, [r5, #0]
 80152ae:	616e      	str	r6, [r5, #20]
 80152b0:	9305      	str	r3, [sp, #20]
 80152b2:	6892      	ldr	r2, [r2, #8]
 80152b4:	a908      	add	r1, sp, #32
 80152b6:	4628      	mov	r0, r5
 80152b8:	4790      	blx	r2
 80152ba:	9b05      	ldr	r3, [sp, #20]
 80152bc:	4652      	mov	r2, sl
 80152be:	616b      	str	r3, [r5, #20]
 80152c0:	4649      	mov	r1, r9
 80152c2:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 80152c6:	4628      	mov	r0, r5
 80152c8:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80152cc:	f7fb f8b1 	bl	8010432 <_ZN8touchgfx8Drawable5setXYEss>
 80152d0:	9a01      	ldr	r2, [sp, #4]
 80152d2:	4b23      	ldr	r3, [pc, #140]	@ (8015360 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80152d4:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80152d8:	801a      	strh	r2, [r3, #0]
 80152da:	9a02      	ldr	r2, [sp, #8]
 80152dc:	4b21      	ldr	r3, [pc, #132]	@ (8015364 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80152de:	4620      	mov	r0, r4
 80152e0:	801a      	strh	r2, [r3, #0]
 80152e2:	9a03      	ldr	r2, [sp, #12]
 80152e4:	4b1b      	ldr	r3, [pc, #108]	@ (8015354 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80152e6:	801a      	strh	r2, [r3, #0]
 80152e8:	4b1b      	ldr	r3, [pc, #108]	@ (8015358 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80152ea:	9a04      	ldr	r2, [sp, #16]
 80152ec:	801a      	strh	r2, [r3, #0]
 80152ee:	6823      	ldr	r3, [r4, #0]
 80152f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152f2:	4798      	blx	r3
 80152f4:	6823      	ldr	r3, [r4, #0]
 80152f6:	4620      	mov	r0, r4
 80152f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152fa:	4798      	blx	r3
 80152fc:	b00f      	add	sp, #60	@ 0x3c
 80152fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015302:	883b      	ldrh	r3, [r7, #0]
 8015304:	f8ab 0000 	strh.w	r0, [fp]
 8015308:	f8aa 3000 	strh.w	r3, [sl]
 801530c:	e789      	b.n	8015222 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801530e:	462a      	mov	r2, r5
 8015310:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015314:	ab0a      	add	r3, sp, #40	@ 0x28
 8015316:	6851      	ldr	r1, [r2, #4]
 8015318:	c303      	stmia	r3!, {r0, r1}
 801531a:	e7a9      	b.n	8015270 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801531c:	a807      	add	r0, sp, #28
 801531e:	f007 fd45 	bl	801cdac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015322:	4606      	mov	r6, r0
 8015324:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8015326:	6803      	ldr	r3, [r0, #0]
 8015328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801532a:	4798      	blx	r3
 801532c:	4286      	cmp	r6, r0
 801532e:	d1b8      	bne.n	80152a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8015330:	f7fa fb2a 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 8015334:	6803      	ldr	r3, [r0, #0]
 8015336:	4606      	mov	r6, r0
 8015338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801533a:	a807      	add	r0, sp, #28
 801533c:	9305      	str	r3, [sp, #20]
 801533e:	f007 fd35 	bl	801cdac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015342:	9b05      	ldr	r3, [sp, #20]
 8015344:	4601      	mov	r1, r0
 8015346:	4630      	mov	r0, r6
 8015348:	4798      	blx	r3
 801534a:	f080 0001 	eor.w	r0, r0, #1
 801534e:	b2c0      	uxtb	r0, r0
 8015350:	e7a8      	b.n	80152a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8015352:	bf00      	nop
 8015354:	2005ba74 	.word	0x2005ba74
 8015358:	2005ba76 	.word	0x2005ba76
 801535c:	2005ba78 	.word	0x2005ba78
 8015360:	2005ba7a 	.word	0x2005ba7a
 8015364:	2005ba7c 	.word	0x2005ba7c

08015368 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801536c:	461d      	mov	r5, r3
 801536e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015372:	2400      	movs	r4, #0
 8015374:	b08a      	sub	sp, #40	@ 0x28
 8015376:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801537a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801537e:	4690      	mov	r8, r2
 8015380:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015384:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015388:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 801538c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015390:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015394:	4607      	mov	r7, r0
 8015396:	f8ad 301c 	strh.w	r3, [sp, #28]
 801539a:	9404      	str	r4, [sp, #16]
 801539c:	f88d 4020 	strb.w	r4, [sp, #32]
 80153a0:	f7fc fa54 	bl	801184c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80153a4:	fb06 8505 	mla	r5, r6, r5, r8
 80153a8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	9505      	str	r5, [sp, #20]
 80153b0:	f8ad 601e 	strh.w	r6, [sp, #30]
 80153b4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80153b8:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 80153bc:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80153c0:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80153c4:	6803      	ldr	r3, [r0, #0]
 80153c6:	a901      	add	r1, sp, #4
 80153c8:	685b      	ldr	r3, [r3, #4]
 80153ca:	4798      	blx	r3
 80153cc:	b00a      	add	sp, #40	@ 0x28
 80153ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080153d2 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80153d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153d6:	2400      	movs	r4, #0
 80153d8:	461d      	mov	r5, r3
 80153da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80153de:	4691      	mov	r9, r2
 80153e0:	b08b      	sub	sp, #44	@ 0x2c
 80153e2:	4688      	mov	r8, r1
 80153e4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 80153e8:	4607      	mov	r7, r0
 80153ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80153ee:	9404      	str	r4, [sp, #16]
 80153f0:	f7fc fa2c 	bl	801184c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80153f4:	fb06 9505 	mla	r5, r6, r5, r9
 80153f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80153fc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015400:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015404:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	9505      	str	r5, [sp, #20]
 801540c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015410:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015414:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015418:	f8cd 8010 	str.w	r8, [sp, #16]
 801541c:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015420:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015424:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8015428:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801542c:	6803      	ldr	r3, [r0, #0]
 801542e:	a901      	add	r1, sp, #4
 8015430:	685b      	ldr	r3, [r3, #4]
 8015432:	4798      	blx	r3
 8015434:	b00b      	add	sp, #44	@ 0x2c
 8015436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801543c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801543c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015440:	4698      	mov	r8, r3
 8015442:	2300      	movs	r3, #0
 8015444:	b08a      	sub	sp, #40	@ 0x28
 8015446:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801544a:	4606      	mov	r6, r0
 801544c:	2d0b      	cmp	r5, #11
 801544e:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8015452:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8015456:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 801545a:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 801545e:	9304      	str	r3, [sp, #16]
 8015460:	d137      	bne.n	80154d2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8015462:	2380      	movs	r3, #128	@ 0x80
 8015464:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015468:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801546c:	f88d 0020 	strb.w	r0, [sp, #32]
 8015470:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015474:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015478:	4630      	mov	r0, r6
 801547a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801547e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015482:	9203      	str	r2, [sp, #12]
 8015484:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015488:	f7fc f9e0 	bl	801184c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801548c:	2c0b      	cmp	r4, #11
 801548e:	bf8c      	ite	hi
 8015490:	2100      	movhi	r1, #0
 8015492:	4b1b      	ldrls	r3, [pc, #108]	@ (8015500 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8015494:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8015498:	bf98      	it	ls
 801549a:	5d19      	ldrbls	r1, [r3, r4]
 801549c:	fb02 8307 	mla	r3, r2, r7, r8
 80154a0:	10c9      	asrs	r1, r1, #3
 80154a2:	fb01 0003 	mla	r0, r1, r3, r0
 80154a6:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80154aa:	9005      	str	r0, [sp, #20]
 80154ac:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80154b0:	2300      	movs	r3, #0
 80154b2:	6870      	ldr	r0, [r6, #4]
 80154b4:	f8ad 701e 	strh.w	r7, [sp, #30]
 80154b8:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80154bc:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80154c0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80154c4:	6803      	ldr	r3, [r0, #0]
 80154c6:	a901      	add	r1, sp, #4
 80154c8:	685b      	ldr	r3, [r3, #4]
 80154ca:	4798      	blx	r3
 80154cc:	b00a      	add	sp, #40	@ 0x28
 80154ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154d2:	2d02      	cmp	r5, #2
 80154d4:	d109      	bne.n	80154ea <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80154d6:	28ff      	cmp	r0, #255	@ 0xff
 80154d8:	d105      	bne.n	80154e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80154da:	f1bc 0f00 	cmp.w	ip, #0
 80154de:	bf14      	ite	ne
 80154e0:	2340      	movne	r3, #64	@ 0x40
 80154e2:	2320      	moveq	r3, #32
 80154e4:	e7be      	b.n	8015464 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80154e6:	2340      	movs	r3, #64	@ 0x40
 80154e8:	e7bc      	b.n	8015464 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80154ea:	28ff      	cmp	r0, #255	@ 0xff
 80154ec:	d105      	bne.n	80154fa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80154ee:	f1bc 0f00 	cmp.w	ip, #0
 80154f2:	bf14      	ite	ne
 80154f4:	2304      	movne	r3, #4
 80154f6:	2301      	moveq	r3, #1
 80154f8:	e7b4      	b.n	8015464 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80154fa:	2304      	movs	r3, #4
 80154fc:	e7b2      	b.n	8015464 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80154fe:	bf00      	nop
 8015500:	0802f408 	.word	0x0802f408

08015504 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8015504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015508:	b08b      	sub	sp, #44	@ 0x2c
 801550a:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 801550e:	461d      	mov	r5, r3
 8015510:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8015514:	bf14      	ite	ne
 8015516:	2308      	movne	r3, #8
 8015518:	2302      	moveq	r3, #2
 801551a:	2400      	movs	r4, #0
 801551c:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8015520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015524:	4688      	mov	r8, r1
 8015526:	4693      	mov	fp, r2
 8015528:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 801552c:	9404      	str	r4, [sp, #16]
 801552e:	4607      	mov	r7, r0
 8015530:	f7fc f98c 	bl	801184c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015534:	2e0b      	cmp	r6, #11
 8015536:	bf98      	it	ls
 8015538:	4b15      	ldrls	r3, [pc, #84]	@ (8015590 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801553a:	fb05 b50a 	mla	r5, r5, sl, fp
 801553e:	bf98      	it	ls
 8015540:	5d9c      	ldrbls	r4, [r3, r6]
 8015542:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8015546:	10e4      	asrs	r4, r4, #3
 8015548:	f8ad 3018 	strh.w	r3, [sp, #24]
 801554c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8015550:	fb04 0405 	mla	r4, r4, r5, r0
 8015554:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015558:	2300      	movs	r3, #0
 801555a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	9405      	str	r4, [sp, #20]
 8015562:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015566:	f8ad a01e 	strh.w	sl, [sp, #30]
 801556a:	f8cd 8010 	str.w	r8, [sp, #16]
 801556e:	f88d 9020 	strb.w	r9, [sp, #32]
 8015572:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8015576:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801557a:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 801557e:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8015582:	6803      	ldr	r3, [r0, #0]
 8015584:	a901      	add	r1, sp, #4
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	4798      	blx	r3
 801558a:	b00b      	add	sp, #44	@ 0x2c
 801558c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015590:	0802f408 	.word	0x0802f408

08015594 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015598:	461e      	mov	r6, r3
 801559a:	4b0a      	ldr	r3, [pc, #40]	@ (80155c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801559c:	460f      	mov	r7, r1
 801559e:	881d      	ldrh	r5, [r3, #0]
 80155a0:	4690      	mov	r8, r2
 80155a2:	f7fa f9f1 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 80155a6:	6803      	ldr	r3, [r0, #0]
 80155a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155aa:	4798      	blx	r3
 80155ac:	280b      	cmp	r0, #11
 80155ae:	bf8e      	itee	hi
 80155b0:	2400      	movhi	r4, #0
 80155b2:	4b05      	ldrls	r3, [pc, #20]	@ (80155c8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80155b4:	5c1c      	ldrbls	r4, [r3, r0]
 80155b6:	fb08 7005 	mla	r0, r8, r5, r7
 80155ba:	10e4      	asrs	r4, r4, #3
 80155bc:	fb04 6000 	mla	r0, r4, r0, r6
 80155c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155c4:	2005ba7a 	.word	0x2005ba7a
 80155c8:	0802f408 	.word	0x0802f408

080155cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80155cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155ce:	2500      	movs	r5, #0
 80155d0:	b08b      	sub	sp, #44	@ 0x2c
 80155d2:	461f      	mov	r7, r3
 80155d4:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80155d8:	4604      	mov	r4, r0
 80155da:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80155de:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80155e2:	4616      	mov	r6, r2
 80155e4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80155e8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80155ec:	9504      	str	r5, [sp, #16]
 80155ee:	f8ad 301a 	strh.w	r3, [sp, #26]
 80155f2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80155f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80155fa:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80155fe:	f88d 3020 	strb.w	r3, [sp, #32]
 8015602:	f7fc f923 	bl	801184c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015606:	463a      	mov	r2, r7
 8015608:	4631      	mov	r1, r6
 801560a:	4603      	mov	r3, r0
 801560c:	4620      	mov	r0, r4
 801560e:	f7ff ffc1 	bl	8015594 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015612:	4b0e      	ldr	r3, [pc, #56]	@ (801564c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8015614:	9005      	str	r0, [sp, #20]
 8015616:	881b      	ldrh	r3, [r3, #0]
 8015618:	f8ad 301e 	strh.w	r3, [sp, #30]
 801561c:	f7fa f9b4 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 8015620:	6803      	ldr	r3, [r0, #0]
 8015622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015624:	4798      	blx	r3
 8015626:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015628:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 801562c:	9304      	str	r3, [sp, #16]
 801562e:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8015632:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8015636:	6860      	ldr	r0, [r4, #4]
 8015638:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801563c:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8015640:	6803      	ldr	r3, [r0, #0]
 8015642:	a901      	add	r1, sp, #4
 8015644:	685b      	ldr	r3, [r3, #4]
 8015646:	4798      	blx	r3
 8015648:	b00b      	add	sp, #44	@ 0x2c
 801564a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801564c:	2005ba7a 	.word	0x2005ba7a

08015650 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015652:	b08d      	sub	sp, #52	@ 0x34
 8015654:	466b      	mov	r3, sp
 8015656:	e883 0006 	stmia.w	r3, {r1, r2}
 801565a:	2300      	movs	r3, #0
 801565c:	2501      	movs	r5, #1
 801565e:	9306      	str	r3, [sp, #24]
 8015660:	6803      	ldr	r3, [r0, #0]
 8015662:	9503      	str	r5, [sp, #12]
 8015664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015666:	4604      	mov	r4, r0
 8015668:	f8bd 6000 	ldrh.w	r6, [sp]
 801566c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015670:	4798      	blx	r3
 8015672:	463a      	mov	r2, r7
 8015674:	4631      	mov	r1, r6
 8015676:	4603      	mov	r3, r0
 8015678:	4620      	mov	r0, r4
 801567a:	f7ff ff8b 	bl	8015594 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801567e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015680:	9004      	str	r0, [sp, #16]
 8015682:	9307      	str	r3, [sp, #28]
 8015684:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015688:	f8ad 3020 	strh.w	r3, [sp, #32]
 801568c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015690:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8015694:	4b0e      	ldr	r3, [pc, #56]	@ (80156d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8015696:	881b      	ldrh	r3, [r3, #0]
 8015698:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801569c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80156a0:	f7fa f972 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 80156a4:	6803      	ldr	r3, [r0, #0]
 80156a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156a8:	4798      	blx	r3
 80156aa:	23ff      	movs	r3, #255	@ 0xff
 80156ac:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80156b0:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80156b4:	6860      	ldr	r0, [r4, #4]
 80156b6:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80156ba:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80156be:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80156c2:	6803      	ldr	r3, [r0, #0]
 80156c4:	a903      	add	r1, sp, #12
 80156c6:	685b      	ldr	r3, [r3, #4]
 80156c8:	4798      	blx	r3
 80156ca:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80156cc:	b00d      	add	sp, #52	@ 0x34
 80156ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156d0:	2005ba7a 	.word	0x2005ba7a

080156d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80156d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156d8:	b08c      	sub	sp, #48	@ 0x30
 80156da:	466d      	mov	r5, sp
 80156dc:	461e      	mov	r6, r3
 80156de:	2300      	movs	r3, #0
 80156e0:	e885 0006 	stmia.w	r5, {r1, r2}
 80156e4:	2501      	movs	r5, #1
 80156e6:	9306      	str	r3, [sp, #24]
 80156e8:	6803      	ldr	r3, [r0, #0]
 80156ea:	9503      	str	r5, [sp, #12]
 80156ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156ee:	4604      	mov	r4, r0
 80156f0:	f8bd 7000 	ldrh.w	r7, [sp]
 80156f4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80156f8:	4798      	blx	r3
 80156fa:	4642      	mov	r2, r8
 80156fc:	4639      	mov	r1, r7
 80156fe:	4603      	mov	r3, r0
 8015700:	4620      	mov	r0, r4
 8015702:	f7ff ff47 	bl	8015594 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015706:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801570a:	9004      	str	r0, [sp, #16]
 801570c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015710:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015714:	9607      	str	r6, [sp, #28]
 8015716:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801571a:	4b10      	ldr	r3, [pc, #64]	@ (801575c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801571c:	881b      	ldrh	r3, [r3, #0]
 801571e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015722:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015724:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015728:	f7fa f92e 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 801572c:	6803      	ldr	r3, [r0, #0]
 801572e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015730:	4798      	blx	r3
 8015732:	23ff      	movs	r3, #255	@ 0xff
 8015734:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015738:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801573c:	6860      	ldr	r0, [r4, #4]
 801573e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8015742:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015746:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801574a:	6803      	ldr	r3, [r0, #0]
 801574c:	a903      	add	r1, sp, #12
 801574e:	685b      	ldr	r3, [r3, #4]
 8015750:	4798      	blx	r3
 8015752:	4630      	mov	r0, r6
 8015754:	b00c      	add	sp, #48	@ 0x30
 8015756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801575a:	bf00      	nop
 801575c:	2005ba7a 	.word	0x2005ba7a

08015760 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8015760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015762:	b085      	sub	sp, #20
 8015764:	ac02      	add	r4, sp, #8
 8015766:	e884 0006 	stmia.w	r4, {r1, r2}
 801576a:	4605      	mov	r5, r0
 801576c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8015770:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8015774:	f7fc f86a 	bl	801184c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015778:	463a      	mov	r2, r7
 801577a:	4603      	mov	r3, r0
 801577c:	4631      	mov	r1, r6
 801577e:	4628      	mov	r0, r5
 8015780:	f7ff ff08 	bl	8015594 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015784:	4a05      	ldr	r2, [pc, #20]	@ (801579c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8015786:	682b      	ldr	r3, [r5, #0]
 8015788:	8812      	ldrh	r2, [r2, #0]
 801578a:	9200      	str	r2, [sp, #0]
 801578c:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801578e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015792:	4603      	mov	r3, r0
 8015794:	4628      	mov	r0, r5
 8015796:	47b0      	blx	r6
 8015798:	b005      	add	sp, #20
 801579a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801579c:	2005ba7a 	.word	0x2005ba7a

080157a0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80157a0:	b570      	push	{r4, r5, r6, lr}
 80157a2:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 80157a6:	4604      	mov	r4, r0
 80157a8:	b19b      	cbz	r3, 80157d2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80157aa:	2002      	movs	r0, #2
 80157ac:	f7fb fef2 	bl	8011594 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80157b0:	2300      	movs	r3, #0
 80157b2:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80157b6:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80157ba:	6823      	ldr	r3, [r4, #0]
 80157bc:	4620      	mov	r0, r4
 80157be:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 80157c2:	f7fc f843 	bl	801184c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80157c6:	462b      	mov	r3, r5
 80157c8:	4601      	mov	r1, r0
 80157ca:	4620      	mov	r0, r4
 80157cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157d0:	4718      	bx	r3
 80157d2:	bd70      	pop	{r4, r5, r6, pc}

080157d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80157d4:	b538      	push	{r3, r4, r5, lr}
 80157d6:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80157da:	4604      	mov	r4, r0
 80157dc:	428b      	cmp	r3, r1
 80157de:	460d      	mov	r5, r1
 80157e0:	d006      	beq.n	80157f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80157e2:	6803      	ldr	r3, [r0, #0]
 80157e4:	b929      	cbnz	r1, 80157f2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80157e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80157ea:	4798      	blx	r3
 80157ec:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 80157f0:	bd38      	pop	{r3, r4, r5, pc}
 80157f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80157f6:	e7f8      	b.n	80157ea <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080157f8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80157f8:	b510      	push	{r4, lr}
 80157fa:	4b0c      	ldr	r3, [pc, #48]	@ (801582c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 80157fc:	4604      	mov	r4, r0
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	b953      	cbnz	r3, 8015818 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8015802:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8015806:	b93b      	cbnz	r3, 8015818 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8015808:	6840      	ldr	r0, [r0, #4]
 801580a:	f000 f927 	bl	8015a5c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801580e:	b118      	cbz	r0, 8015818 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8015810:	6862      	ldr	r2, [r4, #4]
 8015812:	7a53      	ldrb	r3, [r2, #9]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d0fc      	beq.n	8015812 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 8015818:	f7fc fa14 	bl	8011c44 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801581c:	4620      	mov	r0, r4
 801581e:	2100      	movs	r1, #0
 8015820:	f7ff ffd8 	bl	80157d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015824:	4620      	mov	r0, r4
 8015826:	f7fc f811 	bl	801184c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801582a:	bd10      	pop	{r4, pc}
 801582c:	2005ba7e 	.word	0x2005ba7e

08015830 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8015830:	b570      	push	{r4, r5, r6, lr}
 8015832:	4604      	mov	r4, r0
 8015834:	6803      	ldr	r3, [r0, #0]
 8015836:	b919      	cbnz	r1, 8015840 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8015838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801583c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801583e:	4718      	bx	r3
 8015840:	2200      	movs	r2, #0
 8015842:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8015846:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 801584a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801584c:	4798      	blx	r3
 801584e:	2101      	movs	r1, #1
 8015850:	4605      	mov	r5, r0
 8015852:	6863      	ldr	r3, [r4, #4]
 8015854:	4620      	mov	r0, r4
 8015856:	7299      	strb	r1, [r3, #10]
 8015858:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 801585c:	f7ff ffba 	bl	80157d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015860:	4628      	mov	r0, r5
 8015862:	bd70      	pop	{r4, r5, r6, pc}

08015864 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015864:	4770      	bx	lr

08015866 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8015866:	2000      	movs	r0, #0
 8015868:	4770      	bx	lr

0801586a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801586a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801586e:	1a13      	subs	r3, r2, r0
 8015870:	4258      	negs	r0, r3
 8015872:	4158      	adcs	r0, r3
 8015874:	4770      	bx	lr

08015876 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015876:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801587a:	1a9b      	subs	r3, r3, r2
 801587c:	2b00      	cmp	r3, #0
 801587e:	bfdc      	itt	le
 8015880:	6882      	ldrle	r2, [r0, #8]
 8015882:	189b      	addle	r3, r3, r2
 8015884:	2b01      	cmp	r3, #1
 8015886:	bfcc      	ite	gt
 8015888:	2000      	movgt	r0, #0
 801588a:	2001      	movle	r0, #1
 801588c:	4770      	bx	lr

0801588e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801588e:	6902      	ldr	r2, [r0, #16]
 8015890:	6843      	ldr	r3, [r0, #4]
 8015892:	2024      	movs	r0, #36	@ 0x24
 8015894:	fb00 3002 	mla	r0, r0, r2, r3
 8015898:	4770      	bx	lr

0801589a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801589a:	6803      	ldr	r3, [r0, #0]
 801589c:	691b      	ldr	r3, [r3, #16]
 801589e:	4718      	bx	r3

080158a0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80158a0:	2301      	movs	r3, #1
 80158a2:	b570      	push	{r4, r5, r6, lr}
 80158a4:	7203      	strb	r3, [r0, #8]
 80158a6:	4604      	mov	r4, r0
 80158a8:	6840      	ldr	r0, [r0, #4]
 80158aa:	6803      	ldr	r3, [r0, #0]
 80158ac:	699b      	ldr	r3, [r3, #24]
 80158ae:	4798      	blx	r3
 80158b0:	6803      	ldr	r3, [r0, #0]
 80158b2:	4605      	mov	r5, r0
 80158b4:	2b40      	cmp	r3, #64	@ 0x40
 80158b6:	d00c      	beq.n	80158d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80158b8:	d810      	bhi.n	80158dc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80158ba:	2b04      	cmp	r3, #4
 80158bc:	d01d      	beq.n	80158fa <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80158be:	d804      	bhi.n	80158ca <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80158c0:	2b01      	cmp	r3, #1
 80158c2:	d006      	beq.n	80158d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80158c4:	2b02      	cmp	r3, #2
 80158c6:	d02c      	beq.n	8015922 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80158c8:	bd70      	pop	{r4, r5, r6, pc}
 80158ca:	2b08      	cmp	r3, #8
 80158cc:	d01d      	beq.n	801590a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80158ce:	2b20      	cmp	r3, #32
 80158d0:	d1fa      	bne.n	80158c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80158d2:	6823      	ldr	r3, [r4, #0]
 80158d4:	4620      	mov	r0, r4
 80158d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80158d8:	4798      	blx	r3
 80158da:	e013      	b.n	8015904 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80158dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80158e0:	d0f7      	beq.n	80158d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80158e2:	d804      	bhi.n	80158ee <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80158e4:	2b80      	cmp	r3, #128	@ 0x80
 80158e6:	d0f4      	beq.n	80158d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80158e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80158ec:	e7f0      	b.n	80158d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80158ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80158f2:	d0ee      	beq.n	80158d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80158f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80158f8:	e7e5      	b.n	80158c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80158fa:	6823      	ldr	r3, [r4, #0]
 80158fc:	7f01      	ldrb	r1, [r0, #28]
 80158fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015900:	4620      	mov	r0, r4
 8015902:	4798      	blx	r3
 8015904:	6823      	ldr	r3, [r4, #0]
 8015906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015908:	e006      	b.n	8015918 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801590a:	6823      	ldr	r3, [r4, #0]
 801590c:	7f01      	ldrb	r1, [r0, #28]
 801590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015910:	4620      	mov	r0, r4
 8015912:	4798      	blx	r3
 8015914:	6823      	ldr	r3, [r4, #0]
 8015916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015918:	4629      	mov	r1, r5
 801591a:	4620      	mov	r0, r4
 801591c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015920:	4718      	bx	r3
 8015922:	6823      	ldr	r3, [r4, #0]
 8015924:	4620      	mov	r0, r4
 8015926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015928:	4798      	blx	r3
 801592a:	e7f3      	b.n	8015914 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801592c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801592c:	4770      	bx	lr

0801592e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801592e:	4770      	bx	lr

08015930 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015930:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015934:	1ad2      	subs	r2, r2, r3
 8015936:	2a00      	cmp	r2, #0
 8015938:	b510      	push	{r4, lr}
 801593a:	bfdc      	itt	le
 801593c:	6884      	ldrle	r4, [r0, #8]
 801593e:	1912      	addle	r2, r2, r4
 8015940:	2a01      	cmp	r2, #1
 8015942:	dd16      	ble.n	8015972 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015944:	2424      	movs	r4, #36	@ 0x24
 8015946:	6842      	ldr	r2, [r0, #4]
 8015948:	fb04 2303 	mla	r3, r4, r3, r2
 801594c:	f101 0220 	add.w	r2, r1, #32
 8015950:	f851 4b04 	ldr.w	r4, [r1], #4
 8015954:	4291      	cmp	r1, r2
 8015956:	f843 4b04 	str.w	r4, [r3], #4
 801595a:	d1f9      	bne.n	8015950 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801595c:	780a      	ldrb	r2, [r1, #0]
 801595e:	701a      	strb	r2, [r3, #0]
 8015960:	68c3      	ldr	r3, [r0, #12]
 8015962:	6882      	ldr	r2, [r0, #8]
 8015964:	3301      	adds	r3, #1
 8015966:	429a      	cmp	r2, r3
 8015968:	bfd8      	it	le
 801596a:	1a9b      	suble	r3, r3, r2
 801596c:	f3bf 8f5b 	dmb	ish
 8015970:	60c3      	str	r3, [r0, #12]
 8015972:	bd10      	pop	{r4, pc}

08015974 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015974:	6903      	ldr	r3, [r0, #16]
 8015976:	6882      	ldr	r2, [r0, #8]
 8015978:	3301      	adds	r3, #1
 801597a:	429a      	cmp	r2, r3
 801597c:	bfd8      	it	le
 801597e:	1a9b      	suble	r3, r3, r2
 8015980:	f3bf 8f5b 	dmb	ish
 8015984:	6103      	str	r3, [r0, #16]
 8015986:	4770      	bx	lr

08015988 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015988:	b570      	push	{r4, r5, r6, lr}
 801598a:	4604      	mov	r4, r0
 801598c:	460e      	mov	r6, r1
 801598e:	6860      	ldr	r0, [r4, #4]
 8015990:	6803      	ldr	r3, [r0, #0]
 8015992:	685b      	ldr	r3, [r3, #4]
 8015994:	4798      	blx	r3
 8015996:	2800      	cmp	r0, #0
 8015998:	d1f9      	bne.n	801598e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801599a:	4d0d      	ldr	r5, [pc, #52]	@ (80159d0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801599c:	6828      	ldr	r0, [r5, #0]
 801599e:	6803      	ldr	r3, [r0, #0]
 80159a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80159a4:	4798      	blx	r3
 80159a6:	f7fc f967 	bl	8011c78 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80159aa:	6828      	ldr	r0, [r5, #0]
 80159ac:	2101      	movs	r1, #1
 80159ae:	f7ff ff11 	bl	80157d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80159b2:	6860      	ldr	r0, [r4, #4]
 80159b4:	4631      	mov	r1, r6
 80159b6:	6803      	ldr	r3, [r0, #0]
 80159b8:	689b      	ldr	r3, [r3, #8]
 80159ba:	4798      	blx	r3
 80159bc:	6823      	ldr	r3, [r4, #0]
 80159be:	4620      	mov	r0, r4
 80159c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159c2:	4798      	blx	r3
 80159c4:	6828      	ldr	r0, [r5, #0]
 80159c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159ca:	6803      	ldr	r3, [r0, #0]
 80159cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80159ce:	4718      	bx	r3
 80159d0:	2005ba80 	.word	0x2005ba80

080159d4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80159d4:	b508      	push	{r3, lr}
 80159d6:	f7fc f935 	bl	8011c44 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80159da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80159de:	f7fc b93f 	b.w	8011c60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080159e2 <_ZN8touchgfx13DMA_Interface5startEv>:
 80159e2:	b510      	push	{r4, lr}
 80159e4:	4604      	mov	r4, r0
 80159e6:	6840      	ldr	r0, [r0, #4]
 80159e8:	6803      	ldr	r3, [r0, #0]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	4798      	blx	r3
 80159ee:	b948      	cbnz	r0, 8015a04 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80159f0:	7a63      	ldrb	r3, [r4, #9]
 80159f2:	b13b      	cbz	r3, 8015a04 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80159f4:	7a23      	ldrb	r3, [r4, #8]
 80159f6:	b92b      	cbnz	r3, 8015a04 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80159f8:	6823      	ldr	r3, [r4, #0]
 80159fa:	4620      	mov	r0, r4
 80159fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a02:	4718      	bx	r3
 8015a04:	bd10      	pop	{r4, pc}

08015a06 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015a06:	b570      	push	{r4, r5, r6, lr}
 8015a08:	4604      	mov	r4, r0
 8015a0a:	6840      	ldr	r0, [r0, #4]
 8015a0c:	6803      	ldr	r3, [r0, #0]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	4798      	blx	r3
 8015a12:	4605      	mov	r5, r0
 8015a14:	b930      	cbnz	r0, 8015a24 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015a16:	7a23      	ldrb	r3, [r4, #8]
 8015a18:	b123      	cbz	r3, 8015a24 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015a1a:	6860      	ldr	r0, [r4, #4]
 8015a1c:	6803      	ldr	r3, [r0, #0]
 8015a1e:	695b      	ldr	r3, [r3, #20]
 8015a20:	4798      	blx	r3
 8015a22:	7225      	strb	r5, [r4, #8]
 8015a24:	6860      	ldr	r0, [r4, #4]
 8015a26:	6803      	ldr	r3, [r0, #0]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	4798      	blx	r3
 8015a2c:	b928      	cbnz	r0, 8015a3a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015a2e:	6823      	ldr	r3, [r4, #0]
 8015a30:	4620      	mov	r0, r4
 8015a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a38:	4718      	bx	r3
 8015a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a3e:	f7fc b927 	b.w	8011c90 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08015a44 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015a44:	6082      	str	r2, [r0, #8]
 8015a46:	2200      	movs	r2, #0
 8015a48:	b510      	push	{r4, lr}
 8015a4a:	4c03      	ldr	r4, [pc, #12]	@ (8015a58 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015a4c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015a50:	e9c0 4100 	strd	r4, r1, [r0]
 8015a54:	bd10      	pop	{r4, pc}
 8015a56:	bf00      	nop
 8015a58:	0802f558 	.word	0x0802f558

08015a5c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015a5c:	6840      	ldr	r0, [r0, #4]
 8015a5e:	6803      	ldr	r3, [r0, #0]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	4718      	bx	r3
 8015a64:	0000      	movs	r0, r0
	...

08015a68 <_ZN8touchgfxL10applyNoiseEiihhh>:
 8015a68:	fb80 0101 	smull	r0, r1, r0, r1
 8015a6c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8015a70:	4f1f      	ldr	r7, [pc, #124]	@ (8015af0 <_ZN8touchgfxL10applyNoiseEiihhh+0x88>)
 8015a72:	461c      	mov	r4, r3
 8015a74:	fba0 bc07 	umull	fp, ip, r0, r7
 8015a78:	fb07 cc01 	mla	ip, r7, r1, ip
 8015a7c:	fbab 010b 	umull	r0, r1, fp, fp
 8015a80:	fb0b f70c 	mul.w	r7, fp, ip
 8015a84:	fb00 f30c 	mul.w	r3, r0, ip
 8015a88:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8015a8c:	fb0b 3301 	mla	r3, fp, r1, r3
 8015a90:	fba0 010b 	umull	r0, r1, r0, fp
 8015a94:	4616      	mov	r6, r2
 8015a96:	4419      	add	r1, r3
 8015a98:	a313      	add	r3, pc, #76	@ (adr r3, 8015ae8 <_ZN8touchgfxL10applyNoiseEiihhh+0x80>)
 8015a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a9e:	f7ea fbef 	bl	8000280 <__aeabi_ldivmod>
 8015aa2:	2ef7      	cmp	r6, #247	@ 0xf7
 8015aa4:	b290      	uxth	r0, r2
 8015aa6:	bf9e      	ittt	ls
 8015aa8:	f002 0207 	andls.w	r2, r2, #7
 8015aac:	18b6      	addls	r6, r6, r2
 8015aae:	b2f6      	uxtbls	r6, r6
 8015ab0:	2cfb      	cmp	r4, #251	@ 0xfb
 8015ab2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8015ab6:	bf9e      	ittt	ls
 8015ab8:	f3c0 03c1 	ubfxls	r3, r0, #3, #2
 8015abc:	18e4      	addls	r4, r4, r3
 8015abe:	b2e4      	uxtbls	r4, r4
 8015ac0:	2df7      	cmp	r5, #247	@ 0xf7
 8015ac2:	bf9c      	itt	ls
 8015ac4:	f3c0 1042 	ubfxls	r0, r0, #5, #3
 8015ac8:	182d      	addls	r5, r5, r0
 8015aca:	480a      	ldr	r0, [pc, #40]	@ (8015af4 <_ZN8touchgfxL10applyNoiseEiihhh+0x8c>)
 8015acc:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8015ad0:	ea00 2006 	and.w	r0, r0, r6, lsl #8
 8015ad4:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8015ad8:	bf98      	it	ls
 8015ada:	b2ed      	uxtbls	r5, r5
 8015adc:	4304      	orrs	r4, r0
 8015ade:	ea44 00d5 	orr.w	r0, r4, r5, lsr #3
 8015ae2:	b280      	uxth	r0, r0
 8015ae4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8015ae8:	797a8d77 	.word	0x797a8d77
 8015aec:	00000000 	.word	0x00000000
 8015af0:	00ec4ba7 	.word	0x00ec4ba7
 8015af4:	fffff800 	.word	0xfffff800

08015af8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh>:
 8015af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015afc:	ed2d 8b02 	vpush	{d8}
 8015b00:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8015b04:	7c41      	ldrb	r1, [r0, #17]
 8015b06:	b087      	sub	sp, #28
 8015b08:	4605      	mov	r5, r0
 8015b0a:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	@ 0x48
 8015b0e:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	@ 0x4c
 8015b12:	f89d a050 	ldrb.w	sl, [sp, #80]	@ 0x50
 8015b16:	2900      	cmp	r1, #0
 8015b18:	f000 809a 	beq.w	8015c50 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x158>
 8015b1c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015b20:	ed90 7a08 	vldr	s14, [r0, #32]
 8015b24:	454a      	cmp	r2, r9
 8015b26:	68c0      	ldr	r0, [r0, #12]
 8015b28:	db25      	blt.n	8015b76 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x7e>
 8015b2a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b32:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8015b36:	bfc8      	it	gt
 8015b38:	2200      	movgt	r2, #0
 8015b3a:	2100      	movs	r1, #0
 8015b3c:	5882      	ldr	r2, [r0, r2]
 8015b3e:	7c2d      	ldrb	r5, [r5, #16]
 8015b40:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8015b44:	0950      	lsrs	r0, r2, #5
 8015b46:	f408 4e78 	and.w	lr, r8, #63488	@ 0xf800
 8015b4a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8015b4e:	f3c2 0cc4 	ubfx	ip, r2, #3, #5
 8015b52:	eb04 0746 	add.w	r7, r4, r6, lsl #1
 8015b56:	2d00      	cmp	r5, #0
 8015b58:	d044      	beq.n	8015be4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8015b5a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015b5e:	d141      	bne.n	8015be4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8015b60:	bb61      	cbnz	r1, 8015bbc <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xc4>
 8015b62:	ea4e 0000 	orr.w	r0, lr, r0
 8015b66:	ea4c 0500 	orr.w	r5, ip, r0
 8015b6a:	42bc      	cmp	r4, r7
 8015b6c:	f080 8216 	bcs.w	8015f9c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015b70:	f824 5b02 	strh.w	r5, [r4], #2
 8015b74:	e7f9      	b.n	8015b6a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x72>
 8015b76:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8015b7a:	454f      	cmp	r7, r9
 8015b7c:	dc08      	bgt.n	8015b90 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x98>
 8015b7e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b86:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8015b8a:	bfd8      	it	le
 8015b8c:	2200      	movle	r2, #0
 8015b8e:	e7d4      	b.n	8015b3a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42>
 8015b90:	eba9 0202 	sub.w	r2, r9, r2
 8015b94:	ee07 2a90 	vmov	s15, r2
 8015b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015ba0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bac:	ee17 2a90 	vmov	r2, s15
 8015bb0:	bfd8      	it	le
 8015bb2:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8015bb6:	0092      	lsls	r2, r2, #2
 8015bb8:	5882      	ldr	r2, [r0, r2]
 8015bba:	e7c0      	b.n	8015b3e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x46>
 8015bbc:	461e      	mov	r6, r3
 8015bbe:	b2d5      	uxtb	r5, r2
 8015bc0:	fa5f f888 	uxtb.w	r8, r8
 8015bc4:	f3c2 4a07 	ubfx	sl, r2, #16, #8
 8015bc8:	42bc      	cmp	r4, r7
 8015bca:	f080 81e7 	bcs.w	8015f9c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015bce:	4630      	mov	r0, r6
 8015bd0:	9500      	str	r5, [sp, #0]
 8015bd2:	4643      	mov	r3, r8
 8015bd4:	4652      	mov	r2, sl
 8015bd6:	4649      	mov	r1, r9
 8015bd8:	f7ff ff46 	bl	8015a68 <_ZN8touchgfxL10applyNoiseEiihhh>
 8015bdc:	3601      	adds	r6, #1
 8015bde:	f824 0b02 	strh.w	r0, [r4], #2
 8015be2:	e7f1      	b.n	8015bc8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xd0>
 8015be4:	0e12      	lsrs	r2, r2, #24
 8015be6:	fb02 f20a 	mul.w	r2, r2, sl
 8015bea:	1c53      	adds	r3, r2, #1
 8015bec:	eb03 2222 	add.w	r2, r3, r2, asr #8
 8015bf0:	1212      	asrs	r2, r2, #8
 8015bf2:	fb02 f50c 	mul.w	r5, r2, ip
 8015bf6:	fb02 f10e 	mul.w	r1, r2, lr
 8015bfa:	4350      	muls	r0, r2
 8015bfc:	43d2      	mvns	r2, r2
 8015bfe:	26ff      	movs	r6, #255	@ 0xff
 8015c00:	f8df c3ac 	ldr.w	ip, [pc, #940]	@ 8015fb0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015c04:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015c08:	42bc      	cmp	r4, r7
 8015c0a:	f080 81c7 	bcs.w	8015f9c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015c0e:	f8b4 e000 	ldrh.w	lr, [r4]
 8015c12:	ea0e 030c 	and.w	r3, lr, ip
 8015c16:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 8015c1a:	fb02 1303 	mla	r3, r2, r3, r1
 8015c1e:	fb02 0808 	mla	r8, r2, r8, r0
 8015c22:	f00e 0e1f 	and.w	lr, lr, #31
 8015c26:	fb02 5e0e 	mla	lr, r2, lr, r5
 8015c2a:	fb93 f3f6 	sdiv	r3, r3, r6
 8015c2e:	fb98 f8f6 	sdiv	r8, r8, r6
 8015c32:	fb9e fef6 	sdiv	lr, lr, r6
 8015c36:	ea03 030c 	and.w	r3, r3, ip
 8015c3a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8015c3e:	ea43 0308 	orr.w	r3, r3, r8
 8015c42:	f00e 0e1f 	and.w	lr, lr, #31
 8015c46:	ea43 030e 	orr.w	r3, r3, lr
 8015c4a:	f824 3b02 	strh.w	r3, [r4], #2
 8015c4e:	e7db      	b.n	8015c08 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x110>
 8015c50:	7c82      	ldrb	r2, [r0, #18]
 8015c52:	2a00      	cmp	r2, #0
 8015c54:	d050      	beq.n	8015cf8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x200>
 8015c56:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015c5a:	ee07 2a90 	vmov	s15, r2
 8015c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015c62:	ee07 3a10 	vmov	s14, r3
 8015c66:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015c6a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c72:	461f      	mov	r7, r3
 8015c74:	f200 8096 	bhi.w	8015da4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2ac>
 8015c78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015c80:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015c84:	ee06 6a90 	vmov	s13, r6
 8015c88:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015c8c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c94:	bf44      	itt	mi
 8015c96:	eebd 7ac7 	vcvtmi.s32.f32	s14, s14
 8015c9a:	ed8d 7a02 	vstrmi	s14, [sp, #8]
 8015c9e:	ed95 7a08 	vldr	s14, [r5, #32]
 8015ca2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015ca6:	bf58      	it	pl
 8015ca8:	9602      	strpl	r6, [sp, #8]
 8015caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cae:	f640 71fc 	movw	r1, #4092	@ 0xffc
 8015cb2:	bfc8      	it	gt
 8015cb4:	2100      	movgt	r1, #0
 8015cb6:	68ea      	ldr	r2, [r5, #12]
 8015cb8:	f895 c010 	ldrb.w	ip, [r5, #16]
 8015cbc:	5852      	ldr	r2, [r2, r1]
 8015cbe:	9902      	ldr	r1, [sp, #8]
 8015cc0:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8015cc4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015cc8:	0950      	lsrs	r0, r2, #5
 8015cca:	9103      	str	r1, [sp, #12]
 8015ccc:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8015cd0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8015cd4:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 8015cd8:	f1bc 0f00 	cmp.w	ip, #0
 8015cdc:	d024      	beq.n	8015d28 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x230>
 8015cde:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015ce2:	d121      	bne.n	8015d28 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x230>
 8015ce4:	ea4b 0b00 	orr.w	fp, fp, r0
 8015ce8:	ea41 010b 	orr.w	r1, r1, fp
 8015cec:	9a03      	ldr	r2, [sp, #12]
 8015cee:	4294      	cmp	r4, r2
 8015cf0:	d255      	bcs.n	8015d9e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a6>
 8015cf2:	f824 1b02 	strh.w	r1, [r4], #2
 8015cf6:	e7f9      	b.n	8015cec <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x1f4>
 8015cf8:	ee07 9a10 	vmov	s14, r9
 8015cfc:	edd0 7a06 	vldr	s15, [r0, #24]
 8015d00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015d04:	edd0 6a05 	vldr	s13, [r0, #20]
 8015d08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015d10:	ed90 7a08 	vldr	s14, [r0, #32]
 8015d14:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d1c:	bf44      	itt	mi
 8015d1e:	ed90 7a07 	vldrmi	s14, [r0, #28]
 8015d22:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
 8015d26:	e79c      	b.n	8015c62 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x16a>
 8015d28:	0e12      	lsrs	r2, r2, #24
 8015d2a:	fb02 f20a 	mul.w	r2, r2, sl
 8015d2e:	f102 0c01 	add.w	ip, r2, #1
 8015d32:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8015d36:	1212      	asrs	r2, r2, #8
 8015d38:	4350      	muls	r0, r2
 8015d3a:	4351      	muls	r1, r2
 8015d3c:	fb02 fb0b 	mul.w	fp, r2, fp
 8015d40:	43d2      	mvns	r2, r2
 8015d42:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 8015d46:	f8df 8268 	ldr.w	r8, [pc, #616]	@ 8015fb0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015d4a:	9004      	str	r0, [sp, #16]
 8015d4c:	9105      	str	r1, [sp, #20]
 8015d4e:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015d52:	9903      	ldr	r1, [sp, #12]
 8015d54:	428c      	cmp	r4, r1
 8015d56:	d222      	bcs.n	8015d9e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a6>
 8015d58:	8820      	ldrh	r0, [r4, #0]
 8015d5a:	f400 61fc 	and.w	r1, r0, #2016	@ 0x7e0
 8015d5e:	460f      	mov	r7, r1
 8015d60:	9904      	ldr	r1, [sp, #16]
 8015d62:	ea00 0c08 	and.w	ip, r0, r8
 8015d66:	fb02 bc0c 	mla	ip, r2, ip, fp
 8015d6a:	fb02 1107 	mla	r1, r2, r7, r1
 8015d6e:	fb9c fcfe 	sdiv	ip, ip, lr
 8015d72:	fb91 f1fe 	sdiv	r1, r1, lr
 8015d76:	ea0c 0c08 	and.w	ip, ip, r8
 8015d7a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8015d7e:	ea4c 0101 	orr.w	r1, ip, r1
 8015d82:	f000 0c1f 	and.w	ip, r0, #31
 8015d86:	9805      	ldr	r0, [sp, #20]
 8015d88:	fb02 0c0c 	mla	ip, r2, ip, r0
 8015d8c:	fb9c fcfe 	sdiv	ip, ip, lr
 8015d90:	f00c 0c1f 	and.w	ip, ip, #31
 8015d94:	ea41 010c 	orr.w	r1, r1, ip
 8015d98:	f824 1b02 	strh.w	r1, [r4], #2
 8015d9c:	e7d9      	b.n	8015d52 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x25a>
 8015d9e:	9a02      	ldr	r2, [sp, #8]
 8015da0:	441a      	add	r2, r3
 8015da2:	4617      	mov	r7, r2
 8015da4:	441e      	add	r6, r3
 8015da6:	b236      	sxth	r6, r6
 8015da8:	42be      	cmp	r6, r7
 8015daa:	f340 80f7 	ble.w	8015f9c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015dae:	ed95 7a07 	vldr	s14, [r5, #28]
 8015db2:	ee06 7a90 	vmov	s13, r7
 8015db6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015dba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015dbe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc6:	f340 80b3 	ble.w	8015f30 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x438>
 8015dca:	ee06 6a10 	vmov	s12, r6
 8015dce:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015dd2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dda:	bfdc      	itt	le
 8015ddc:	eebd 7ac7 	vcvtle.s32.f32	s14, s14
 8015de0:	ee17 8a10 	vmovle	r8, s14
 8015de4:	ed95 7a08 	vldr	s14, [r5, #32]
 8015de8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015dec:	bfc8      	it	gt
 8015dee:	46b0      	movgt	r8, r6
 8015df0:	ed9f 8a6d 	vldr	s16, [pc, #436]	@ 8015fa8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b0>
 8015df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015df8:	ed9f 6a6c 	vldr	s12, [pc, #432]	@ 8015fac <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8015dfc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015e00:	7c2b      	ldrb	r3, [r5, #16]
 8015e02:	eba8 0707 	sub.w	r7, r8, r7
 8015e06:	fe38 8a06 	vselgt.f32	s16, s16, s12
 8015e0a:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8015e0e:	eea7 8a27 	vfma.f32	s16, s14, s15
 8015e12:	b1db      	cbz	r3, 8015e4c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x354>
 8015e14:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015e18:	d118      	bne.n	8015e4c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x354>
 8015e1a:	42bc      	cmp	r4, r7
 8015e1c:	d262      	bcs.n	8015ee4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 8015e1e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015e22:	ee17 0a90 	vmov	r0, s15
 8015e26:	68eb      	ldr	r3, [r5, #12]
 8015e28:	4649      	mov	r1, r9
 8015e2a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8015e2e:	b2d3      	uxtb	r3, r2
 8015e30:	9300      	str	r3, [sp, #0]
 8015e32:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8015e36:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8015e3a:	f7ff fe15 	bl	8015a68 <_ZN8touchgfxL10applyNoiseEiihhh>
 8015e3e:	f824 0b02 	strh.w	r0, [r4], #2
 8015e42:	edd5 7a08 	vldr	s15, [r5, #32]
 8015e46:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015e4a:	e7e6      	b.n	8015e1a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x322>
 8015e4c:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8015e50:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 8015fb0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015e54:	42bc      	cmp	r4, r7
 8015e56:	d245      	bcs.n	8015ee4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 8015e58:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015e5c:	ee17 2a90 	vmov	r2, s15
 8015e60:	68eb      	ldr	r3, [r5, #12]
 8015e62:	f8b4 e000 	ldrh.w	lr, [r4]
 8015e66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015e6a:	0e13      	lsrs	r3, r2, #24
 8015e6c:	fb03 f30a 	mul.w	r3, r3, sl
 8015e70:	1c58      	adds	r0, r3, #1
 8015e72:	eb00 2023 	add.w	r0, r0, r3, asr #8
 8015e76:	1200      	asrs	r0, r0, #8
 8015e78:	ea6f 0c00 	mvn.w	ip, r0
 8015e7c:	ea0e 030b 	and.w	r3, lr, fp
 8015e80:	fa5f fc8c 	uxtb.w	ip, ip
 8015e84:	fb0c f303 	mul.w	r3, ip, r3
 8015e88:	ea0b 2112 	and.w	r1, fp, r2, lsr #8
 8015e8c:	b289      	uxth	r1, r1
 8015e8e:	fb00 3101 	mla	r1, r0, r1, r3
 8015e92:	fb91 f1f9 	sdiv	r1, r1, r9
 8015e96:	ea01 030b 	and.w	r3, r1, fp
 8015e9a:	9302      	str	r3, [sp, #8]
 8015e9c:	0953      	lsrs	r3, r2, #5
 8015e9e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8015ea2:	4619      	mov	r1, r3
 8015ea4:	f40e 63fc 	and.w	r3, lr, #2016	@ 0x7e0
 8015ea8:	fb0c f303 	mul.w	r3, ip, r3
 8015eac:	f00e 0e1f 	and.w	lr, lr, #31
 8015eb0:	fb0c fc0e 	mul.w	ip, ip, lr
 8015eb4:	fb00 3301 	mla	r3, r0, r1, r3
 8015eb8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8015ebc:	fb00 c002 	mla	r0, r0, r2, ip
 8015ec0:	fb93 f3f9 	sdiv	r3, r3, r9
 8015ec4:	fb90 f0f9 	sdiv	r0, r0, r9
 8015ec8:	9902      	ldr	r1, [sp, #8]
 8015eca:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8015ece:	4319      	orrs	r1, r3
 8015ed0:	f000 001f 	and.w	r0, r0, #31
 8015ed4:	4301      	orrs	r1, r0
 8015ed6:	f824 1b02 	strh.w	r1, [r4], #2
 8015eda:	edd5 7a08 	vldr	s15, [r5, #32]
 8015ede:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015ee2:	e7b7      	b.n	8015e54 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x35c>
 8015ee4:	4546      	cmp	r6, r8
 8015ee6:	dd59      	ble.n	8015f9c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015ee8:	edd5 7a08 	vldr	s15, [r5, #32]
 8015eec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8015ef8:	bfd8      	it	le
 8015efa:	2300      	movle	r3, #0
 8015efc:	68ea      	ldr	r2, [r5, #12]
 8015efe:	7c29      	ldrb	r1, [r5, #16]
 8015f00:	58d2      	ldr	r2, [r2, r3]
 8015f02:	eba6 0608 	sub.w	r6, r6, r8
 8015f06:	0a10      	lsrs	r0, r2, #8
 8015f08:	0953      	lsrs	r3, r2, #5
 8015f0a:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8015f0e:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8015f12:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8015f16:	f3c2 07c4 	ubfx	r7, r2, #3, #5
 8015f1a:	b159      	cbz	r1, 8015f34 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43c>
 8015f1c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015f20:	d108      	bne.n	8015f34 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43c>
 8015f22:	4318      	orrs	r0, r3
 8015f24:	4338      	orrs	r0, r7
 8015f26:	42b4      	cmp	r4, r6
 8015f28:	d238      	bcs.n	8015f9c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015f2a:	f824 0b02 	strh.w	r0, [r4], #2
 8015f2e:	e7fa      	b.n	8015f26 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42e>
 8015f30:	46b8      	mov	r8, r7
 8015f32:	e7d9      	b.n	8015ee8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3f0>
 8015f34:	0e12      	lsrs	r2, r2, #24
 8015f36:	fb02 f10a 	mul.w	r1, r2, sl
 8015f3a:	1c4a      	adds	r2, r1, #1
 8015f3c:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8015f40:	1212      	asrs	r2, r2, #8
 8015f42:	fb02 f507 	mul.w	r5, r2, r7
 8015f46:	4350      	muls	r0, r2
 8015f48:	4353      	muls	r3, r2
 8015f4a:	43d2      	mvns	r2, r2
 8015f4c:	27ff      	movs	r7, #255	@ 0xff
 8015f4e:	f8df c060 	ldr.w	ip, [pc, #96]	@ 8015fb0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015f52:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015f56:	42b4      	cmp	r4, r6
 8015f58:	d220      	bcs.n	8015f9c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015f5a:	f8b4 e000 	ldrh.w	lr, [r4]
 8015f5e:	ea0e 010c 	and.w	r1, lr, ip
 8015f62:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 8015f66:	fb02 0101 	mla	r1, r2, r1, r0
 8015f6a:	fb02 3808 	mla	r8, r2, r8, r3
 8015f6e:	f00e 0e1f 	and.w	lr, lr, #31
 8015f72:	fb02 5e0e 	mla	lr, r2, lr, r5
 8015f76:	fb91 f1f7 	sdiv	r1, r1, r7
 8015f7a:	fb98 f8f7 	sdiv	r8, r8, r7
 8015f7e:	fb9e fef7 	sdiv	lr, lr, r7
 8015f82:	ea01 010c 	and.w	r1, r1, ip
 8015f86:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8015f8a:	ea41 0108 	orr.w	r1, r1, r8
 8015f8e:	f00e 0e1f 	and.w	lr, lr, #31
 8015f92:	ea41 010e 	orr.w	r1, r1, lr
 8015f96:	f824 1b02 	strh.w	r1, [r4], #2
 8015f9a:	e7dc      	b.n	8015f56 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x45e>
 8015f9c:	b007      	add	sp, #28
 8015f9e:	ecbd 8b02 	vpop	{d8}
 8015fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fa6:	bf00      	nop
 8015fa8:	00000000 	.word	0x00000000
 8015fac:	447ffffe 	.word	0x447ffffe
 8015fb0:	fffff800 	.word	0xfffff800

08015fb4 <_ZNK8touchgfx27PainterRGB565LinearGradient8tearDownEv>:
 8015fb4:	4770      	bx	lr
	...

08015fb8 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8015fb8:	4b06      	ldr	r3, [pc, #24]	@ (8015fd4 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 8015fba:	094a      	lsrs	r2, r1, #5
 8015fbc:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8015fc0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8015fc4:	60c1      	str	r1, [r0, #12]
 8015fc6:	4313      	orrs	r3, r2
 8015fc8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8015fcc:	4319      	orrs	r1, r3
 8015fce:	8201      	strh	r1, [r0, #16]
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop
 8015fd4:	fffff800 	.word	0xfffff800

08015fd8 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8015fd8:	f1a0 0008 	sub.w	r0, r0, #8
 8015fdc:	e7ec      	b.n	8015fb8 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 8015fde:	bf00      	nop

08015fe0 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8015fe0:	b508      	push	{r3, lr}
 8015fe2:	4b05      	ldr	r3, [pc, #20]	@ (8015ff8 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8015fe4:	6818      	ldr	r0, [r3, #0]
 8015fe6:	6803      	ldr	r3, [r0, #0]
 8015fe8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015fec:	4798      	blx	r3
 8015fee:	1e43      	subs	r3, r0, #1
 8015ff0:	4258      	negs	r0, r3
 8015ff2:	4158      	adcs	r0, r3
 8015ff4:	bd08      	pop	{r3, pc}
 8015ff6:	bf00      	nop
 8015ff8:	2005ba80 	.word	0x2005ba80

08015ffc <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8015ffc:	b430      	push	{r4, r5}
 8015ffe:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8016002:	8a02      	ldrh	r2, [r0, #16]
 8016004:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8016008:	9202      	str	r2, [sp, #8]
 801600a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801600e:	68c2      	ldr	r2, [r0, #12]
 8016010:	4629      	mov	r1, r5
 8016012:	4620      	mov	r0, r4
 8016014:	bc30      	pop	{r4, r5}
 8016016:	f7fc bac5 	b.w	80125a4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

0801601a <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 801601a:	f7fc ba9f 	b.w	801255c <_ZN8touchgfx5paint8tearDownEv>

0801601e <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 801601e:	2300      	movs	r3, #0
 8016020:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8016022:	8503      	strh	r3, [r0, #40]	@ 0x28
 8016024:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8016026:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8016028:	6980      	ldr	r0, [r0, #24]
 801602a:	b110      	cbz	r0, 8016032 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 801602c:	6803      	ldr	r3, [r0, #0]
 801602e:	691b      	ldr	r3, [r3, #16]
 8016030:	4718      	bx	r3
 8016032:	4770      	bx	lr

08016034 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8016034:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8016038:	4770      	bx	lr

0801603a <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 801603a:	b538      	push	{r3, r4, r5, lr}
 801603c:	0e0b      	lsrs	r3, r1, #24
 801603e:	7783      	strb	r3, [r0, #30]
 8016040:	6803      	ldr	r3, [r0, #0]
 8016042:	4604      	mov	r4, r0
 8016044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016046:	460d      	mov	r5, r1
 8016048:	4798      	blx	r3
 801604a:	6803      	ldr	r3, [r0, #0]
 801604c:	4629      	mov	r1, r5
 801604e:	689b      	ldr	r3, [r3, #8]
 8016050:	4798      	blx	r3
 8016052:	6823      	ldr	r3, [r4, #0]
 8016054:	4620      	mov	r0, r4
 8016056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016058:	4798      	blx	r3
 801605a:	61a0      	str	r0, [r4, #24]
 801605c:	bd38      	pop	{r3, r4, r5, pc}

0801605e <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 801605e:	7741      	strb	r1, [r0, #29]
 8016060:	4770      	bx	lr

08016062 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8016062:	b530      	push	{r4, r5, lr}
 8016064:	460d      	mov	r5, r1
 8016066:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 801606a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801606c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801606e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016072:	682b      	ldr	r3, [r5, #0]
 8016074:	6023      	str	r3, [r4, #0]
 8016076:	bd30      	pop	{r4, r5, pc}

08016078 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8016078:	b538      	push	{r3, r4, r5, lr}
 801607a:	4604      	mov	r4, r0
 801607c:	2500      	movs	r5, #0
 801607e:	1d03      	adds	r3, r0, #4
 8016080:	6808      	ldr	r0, [r1, #0]
 8016082:	6849      	ldr	r1, [r1, #4]
 8016084:	c303      	stmia	r3!, {r0, r1}
 8016086:	6813      	ldr	r3, [r2, #0]
 8016088:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801608c:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8016090:	6853      	ldr	r3, [r2, #4]
 8016092:	61a5      	str	r5, [r4, #24]
 8016094:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8016098:	f005 f85c 	bl	801b154 <_ZN8touchgfx9Matrix3x35resetEv>
 801609c:	23ff      	movs	r3, #255	@ 0xff
 801609e:	7763      	strb	r3, [r4, #29]
 80160a0:	77a3      	strb	r3, [r4, #30]
 80160a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80160a6:	6323      	str	r3, [r4, #48]	@ 0x30
 80160a8:	2301      	movs	r3, #1
 80160aa:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 80160ae:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80160b2:	bd38      	pop	{r3, r4, r5, pc}

080160b4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 80160b4:	ee70 7a41 	vsub.f32	s15, s0, s2
 80160b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80160bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160c0:	ed2d 8b0a 	vpush	{d8-d12}
 80160c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c8:	b087      	sub	sp, #28
 80160ca:	4605      	mov	r5, r0
 80160cc:	eef0 9a40 	vmov.f32	s19, s0
 80160d0:	eeb0 aa60 	vmov.f32	s20, s1
 80160d4:	eeb0 9a41 	vmov.f32	s18, s2
 80160d8:	eef0 8a61 	vmov.f32	s17, s3
 80160dc:	eeb0 ca42 	vmov.f32	s24, s4
 80160e0:	eef0 ca62 	vmov.f32	s25, s5
 80160e4:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80160e8:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80160ea:	6802      	ldr	r2, [r0, #0]
 80160ec:	d112      	bne.n	8016114 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80160ee:	ee70 7ae1 	vsub.f32	s15, s1, s3
 80160f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80160f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160fa:	d10b      	bne.n	8016114 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80160fc:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8016100:	3901      	subs	r1, #1
 8016102:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8016104:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8016108:	b007      	add	sp, #28
 801610a:	ecbd 8b0a 	vpop	{d8-d12}
 801610e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016112:	4710      	bx	r2
 8016114:	23ff      	movs	r3, #255	@ 0xff
 8016116:	77ab      	strb	r3, [r5, #30]
 8016118:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801611a:	4628      	mov	r0, r5
 801611c:	4798      	blx	r3
 801611e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8016122:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8016126:	80c3      	strh	r3, [r0, #6]
 8016128:	eef0 0a4a 	vmov.f32	s1, s20
 801612c:	eeb0 0a69 	vmov.f32	s0, s19
 8016130:	4604      	mov	r4, r0
 8016132:	4640      	mov	r0, r8
 8016134:	f005 f8bd 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016138:	4640      	mov	r0, r8
 801613a:	eeb0 ba40 	vmov.f32	s22, s0
 801613e:	eef0 ba60 	vmov.f32	s23, s1
 8016142:	ed8d 0a00 	vstr	s0, [sp]
 8016146:	edcd 0a01 	vstr	s1, [sp, #4]
 801614a:	eeb0 0a49 	vmov.f32	s0, s18
 801614e:	eef0 0a68 	vmov.f32	s1, s17
 8016152:	f005 f8ae 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016156:	eeb4 ba40 	vcmp.f32	s22, s0
 801615a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801615e:	eef4 ba60 	vcmp.f32	s23, s1
 8016162:	bf0c      	ite	eq
 8016164:	2301      	moveq	r3, #1
 8016166:	2300      	movne	r3, #0
 8016168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801616c:	eeb4 ba40 	vcmp.f32	s22, s0
 8016170:	7463      	strb	r3, [r4, #17]
 8016172:	bf0c      	ite	eq
 8016174:	2301      	moveq	r3, #1
 8016176:	2300      	movne	r3, #0
 8016178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801617c:	eeb0 8a40 	vmov.f32	s16, s0
 8016180:	eef0 aa60 	vmov.f32	s21, s1
 8016184:	ed8d 0a02 	vstr	s0, [sp, #8]
 8016188:	edcd 0a03 	vstr	s1, [sp, #12]
 801618c:	74a3      	strb	r3, [r4, #18]
 801618e:	f8df 9250 	ldr.w	r9, [pc, #592]	@ 80163e0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 8016192:	d030      	beq.n	80161f6 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 8016194:	eef4 ba60 	vcmp.f32	s23, s1
 8016198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801619c:	d02b      	beq.n	80161f6 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 801619e:	ee39 9a69 	vsub.f32	s18, s18, s19
 80161a2:	ee78 8aca 	vsub.f32	s17, s17, s20
 80161a6:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 80161aa:	eec8 7aac 	vdiv.f32	s15, s17, s25
 80161ae:	eef0 0a4a 	vmov.f32	s1, s20
 80161b2:	eeb0 0a69 	vmov.f32	s0, s19
 80161b6:	eeec 0a87 	vfma.f32	s1, s25, s14
 80161ba:	eea7 0acc 	vfms.f32	s0, s15, s24
 80161be:	4640      	mov	r0, r8
 80161c0:	f005 f877 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80161c4:	edcd 0a05 	vstr	s1, [sp, #20]
 80161c8:	ee70 0aeb 	vsub.f32	s1, s1, s23
 80161cc:	f899 3000 	ldrb.w	r3, [r9]
 80161d0:	ed8d 0a04 	vstr	s0, [sp, #16]
 80161d4:	2b01      	cmp	r3, #1
 80161d6:	ee30 0a4b 	vsub.f32	s0, s0, s22
 80161da:	bf02      	ittt	eq
 80161dc:	eef1 7a60 	vnegeq.f32	s15, s1
 80161e0:	eef0 0a40 	vmoveq.f32	s1, s0
 80161e4:	eeb0 0a67 	vmoveq.f32	s0, s15
 80161e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80161ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161f0:	d134      	bne.n	801625c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 80161f2:	2301      	movs	r3, #1
 80161f4:	74a3      	strb	r3, [r4, #18]
 80161f6:	f899 2000 	ldrb.w	r2, [r9]
 80161fa:	7c63      	ldrb	r3, [r4, #17]
 80161fc:	2a01      	cmp	r2, #1
 80161fe:	f040 80a4 	bne.w	801634a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 8016202:	2b00      	cmp	r3, #0
 8016204:	d072      	beq.n	80162ec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x238>
 8016206:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 801620a:	eddf 6a73 	vldr	s13, [pc, #460]	@ 80163d8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 801620e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016212:	edc4 7a08 	vstr	s15, [r4, #32]
 8016216:	eefd 7aea 	vcvt.s32.f32	s15, s21
 801621a:	ee17 3a90 	vmov	r3, s15
 801621e:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8016222:	eef4 baea 	vcmpe.f32	s23, s21
 8016226:	b21a      	sxth	r2, r3
 8016228:	ee17 3a90 	vmov	r3, s15
 801622c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016230:	b21b      	sxth	r3, r3
 8016232:	bf47      	ittee	mi
 8016234:	8123      	strhmi	r3, [r4, #8]
 8016236:	8162      	strhmi	r2, [r4, #10]
 8016238:	8122      	strhpl	r2, [r4, #8]
 801623a:	8163      	strhpl	r3, [r4, #10]
 801623c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016240:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8016244:	1a9b      	subs	r3, r3, r2
 8016246:	ee07 3a90 	vmov	s15, r3
 801624a:	2300      	movs	r3, #0
 801624c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016250:	7463      	strb	r3, [r4, #17]
 8016252:	edc4 7a07 	vstr	s15, [r4, #28]
 8016256:	2301      	movs	r3, #1
 8016258:	74a3      	strb	r3, [r4, #18]
 801625a:	e03f      	b.n	80162dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 801625c:	ee80 7a80 	vdiv.f32	s14, s1, s0
 8016260:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016268:	ed84 7a05 	vstr	s14, [r4, #20]
 801626c:	d102      	bne.n	8016274 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c0>
 801626e:	2301      	movs	r3, #1
 8016270:	7463      	strb	r3, [r4, #17]
 8016272:	e7c0      	b.n	80161f6 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 8016274:	2b01      	cmp	r3, #1
 8016276:	bf09      	itett	eq
 8016278:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 801627c:	eef0 7a6b 	vmovne.f32	s15, s23
 8016280:	ee07 2a90 	vmoveq	s15, r2
 8016284:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 8016288:	bf0a      	itet	eq
 801628a:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 801628e:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 8016292:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 8016296:	ee38 8a4b 	vsub.f32	s16, s16, s22
 801629a:	2b01      	cmp	r3, #1
 801629c:	ee7a aaeb 	vsub.f32	s21, s21, s23
 80162a0:	edc4 7a06 	vstr	s15, [r4, #24]
 80162a4:	bf02      	ittt	eq
 80162a6:	eef1 7a48 	vnegeq.f32	s15, s16
 80162aa:	eeb0 8a6a 	vmoveq.f32	s16, s21
 80162ae:	eef0 aa67 	vmoveq.f32	s21, s15
 80162b2:	eeca 7a87 	vdiv.f32	s15, s21, s14
 80162b6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80162ba:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80163dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 80162be:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80162c2:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80162c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ca:	ed84 8a07 	vstr	s16, [r4, #28]
 80162ce:	edc4 7a08 	vstr	s15, [r4, #32]
 80162d2:	d503      	bpl.n	80162dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 80162d4:	eeb1 8a48 	vneg.f32	s16, s16
 80162d8:	ed84 8a07 	vstr	s16, [r4, #28]
 80162dc:	60e7      	str	r7, [r4, #12]
 80162de:	7426      	strb	r6, [r4, #16]
 80162e0:	61ac      	str	r4, [r5, #24]
 80162e2:	b007      	add	sp, #28
 80162e4:	ecbd 8b0a 	vpop	{d8-d12}
 80162e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162ec:	7ca3      	ldrb	r3, [r4, #18]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d0f4      	beq.n	80162dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 80162f2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80162f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80163d8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 80162fa:	ee00 3a10 	vmov	s0, r3
 80162fe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8016302:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016306:	ee30 0a4b 	vsub.f32	s0, s0, s22
 801630a:	ee38 7a40 	vsub.f32	s14, s16, s0
 801630e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016312:	edc4 7a08 	vstr	s15, [r4, #32]
 8016316:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801631a:	ee17 3a90 	vmov	r3, s15
 801631e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016322:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8016326:	b21a      	sxth	r2, r3
 8016328:	ee17 3a90 	vmov	r3, s15
 801632c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016330:	b21b      	sxth	r3, r3
 8016332:	bfcc      	ite	gt
 8016334:	8123      	strhgt	r3, [r4, #8]
 8016336:	8163      	strhle	r3, [r4, #10]
 8016338:	f04f 0301 	mov.w	r3, #1
 801633c:	bfc8      	it	gt
 801633e:	8162      	strhgt	r2, [r4, #10]
 8016340:	7463      	strb	r3, [r4, #17]
 8016342:	bfd8      	it	le
 8016344:	8122      	strhle	r2, [r4, #8]
 8016346:	2300      	movs	r3, #0
 8016348:	e786      	b.n	8016258 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a4>
 801634a:	b1db      	cbz	r3, 8016384 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d0>
 801634c:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 8016350:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80163d8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 8016354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016358:	edc4 7a08 	vstr	s15, [r4, #32]
 801635c:	eefd 7aea 	vcvt.s32.f32	s15, s21
 8016360:	ee17 3a90 	vmov	r3, s15
 8016364:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8016368:	eef4 baea 	vcmpe.f32	s23, s21
 801636c:	b21a      	sxth	r2, r3
 801636e:	ee17 3a90 	vmov	r3, s15
 8016372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016376:	b21b      	sxth	r3, r3
 8016378:	bf47      	ittee	mi
 801637a:	8123      	strhmi	r3, [r4, #8]
 801637c:	8162      	strhmi	r2, [r4, #10]
 801637e:	8122      	strhpl	r2, [r4, #8]
 8016380:	8163      	strhpl	r3, [r4, #10]
 8016382:	e7ab      	b.n	80162dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8016384:	7ca3      	ldrb	r3, [r4, #18]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d0a8      	beq.n	80162dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 801638a:	ee38 7a4b 	vsub.f32	s14, s16, s22
 801638e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80163d8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 8016392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016396:	edc4 7a08 	vstr	s15, [r4, #32]
 801639a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801639e:	ee17 3a90 	vmov	r3, s15
 80163a2:	eefd 7acb 	vcvt.s32.f32	s15, s22
 80163a6:	eeb4 bac8 	vcmpe.f32	s22, s16
 80163aa:	b21a      	sxth	r2, r3
 80163ac:	ee17 3a90 	vmov	r3, s15
 80163b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163b4:	b21b      	sxth	r3, r3
 80163b6:	bf47      	ittee	mi
 80163b8:	8123      	strhmi	r3, [r4, #8]
 80163ba:	8162      	strhmi	r2, [r4, #10]
 80163bc:	8122      	strhpl	r2, [r4, #8]
 80163be:	8163      	strhpl	r3, [r4, #10]
 80163c0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80163c4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80163c8:	1a9b      	subs	r3, r3, r2
 80163ca:	ee07 3a90 	vmov	s15, r3
 80163ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163d2:	edc4 7a07 	vstr	s15, [r4, #28]
 80163d6:	e781      	b.n	80162dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 80163d8:	447ffffe 	.word	0x447ffffe
 80163dc:	44800000 	.word	0x44800000
 80163e0:	2005ba78 	.word	0x2005ba78

080163e4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 80163e4:	b510      	push	{r4, lr}
 80163e6:	ed2d 8b02 	vpush	{d8}
 80163ea:	eef0 8a62 	vmov.f32	s17, s5
 80163ee:	2100      	movs	r1, #0
 80163f0:	4604      	mov	r4, r0
 80163f2:	eeb0 8a42 	vmov.f32	s16, s4
 80163f6:	f015 f945 	bl	802b684 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80163fa:	eef0 7a68 	vmov.f32	s15, s17
 80163fe:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016402:	ee17 2a90 	vmov	r2, s15
 8016406:	eef0 7a48 	vmov.f32	s15, s16
 801640a:	ecbd 8b02 	vpop	{d8}
 801640e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016412:	6823      	ldr	r3, [r4, #0]
 8016414:	4620      	mov	r0, r4
 8016416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801641a:	689b      	ldr	r3, [r3, #8]
 801641c:	ee17 1a90 	vmov	r1, s15
 8016420:	4718      	bx	r3

08016422 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8016422:	b510      	push	{r4, lr}
 8016424:	ed2d 8b02 	vpush	{d8}
 8016428:	eef0 8a63 	vmov.f32	s17, s7
 801642c:	2100      	movs	r1, #0
 801642e:	4604      	mov	r4, r0
 8016430:	eeb0 8a43 	vmov.f32	s16, s6
 8016434:	f015 f9e8 	bl	802b808 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8016438:	eef0 7a68 	vmov.f32	s15, s17
 801643c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016440:	ee17 2a90 	vmov	r2, s15
 8016444:	eef0 7a48 	vmov.f32	s15, s16
 8016448:	ecbd 8b02 	vpop	{d8}
 801644c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016450:	6823      	ldr	r3, [r4, #0]
 8016452:	4620      	mov	r0, r4
 8016454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016458:	689b      	ldr	r3, [r3, #8]
 801645a:	ee17 1a90 	vmov	r1, s15
 801645e:	4718      	bx	r3

08016460 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8016460:	b513      	push	{r0, r1, r4, lr}
 8016462:	4604      	mov	r4, r0
 8016464:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8016466:	f004 ff24 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801646a:	eef0 7a60 	vmov.f32	s15, s1
 801646e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016472:	ee17 2a90 	vmov	r2, s15
 8016476:	eef0 7a40 	vmov.f32	s15, s0
 801647a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801647e:	4620      	mov	r0, r4
 8016480:	ee17 1a90 	vmov	r1, s15
 8016484:	b002      	add	sp, #8
 8016486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801648a:	f015 b855 	b.w	802b538 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 801648e:	b513      	push	{r0, r1, r4, lr}
 8016490:	4604      	mov	r4, r0
 8016492:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8016494:	f004 ff0d 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016498:	eef0 7a60 	vmov.f32	s15, s1
 801649c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80164a0:	ee17 2a90 	vmov	r2, s15
 80164a4:	eef0 7a40 	vmov.f32	s15, s0
 80164a8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80164ac:	4620      	mov	r0, r4
 80164ae:	ee17 1a90 	vmov	r1, s15
 80164b2:	b002      	add	sp, #8
 80164b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164b8:	f015 b88b 	b.w	802b5d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

080164bc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 80164bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164be:	2400      	movs	r4, #0
 80164c0:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80164c4:	4626      	mov	r6, r4
 80164c6:	f04f 0e01 	mov.w	lr, #1
 80164ca:	9f07      	ldr	r7, [sp, #28]
 80164cc:	4463      	add	r3, ip
 80164ce:	4563      	cmp	r3, ip
 80164d0:	d02d      	beq.n	801652e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80164d2:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80164d6:	2d06      	cmp	r5, #6
 80164d8:	d8f9      	bhi.n	80164ce <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80164da:	fa0e f505 	lsl.w	r5, lr, r5
 80164de:	f015 0f66 	tst.w	r5, #102	@ 0x66
 80164e2:	d10d      	bne.n	8016500 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 80164e4:	f015 0f10 	tst.w	r5, #16
 80164e8:	d117      	bne.n	801651a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 80164ea:	072d      	lsls	r5, r5, #28
 80164ec:	d5ef      	bpl.n	80164ce <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80164ee:	3801      	subs	r0, #1
 80164f0:	b91e      	cbnz	r6, 80164fa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 80164f2:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 80164f6:	682d      	ldr	r5, [r5, #0]
 80164f8:	600d      	str	r5, [r1, #0]
 80164fa:	b96c      	cbnz	r4, 8016518 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80164fc:	2601      	movs	r6, #1
 80164fe:	e7e6      	b.n	80164ce <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8016500:	b926      	cbnz	r6, 801650c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8016502:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8016506:	f853 3c08 	ldr.w	r3, [r3, #-8]
 801650a:	600b      	str	r3, [r1, #0]
 801650c:	b924      	cbnz	r4, 8016518 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801650e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8016512:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016516:	6013      	str	r3, [r2, #0]
 8016518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801651a:	3801      	subs	r0, #1
 801651c:	b91c      	cbnz	r4, 8016526 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801651e:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8016522:	6824      	ldr	r4, [r4, #0]
 8016524:	6014      	str	r4, [r2, #0]
 8016526:	2e00      	cmp	r6, #0
 8016528:	d1f6      	bne.n	8016518 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801652a:	2401      	movs	r4, #1
 801652c:	e7cf      	b.n	80164ce <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801652e:	b90e      	cbnz	r6, 8016534 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8016530:	2300      	movs	r3, #0
 8016532:	600b      	str	r3, [r1, #0]
 8016534:	2c00      	cmp	r4, #0
 8016536:	d1ef      	bne.n	8016518 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8016538:	2300      	movs	r3, #0
 801653a:	e7ec      	b.n	8016516 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0801653c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 801653c:	b538      	push	{r3, r4, r5, lr}
 801653e:	4604      	mov	r4, r0
 8016540:	ed2d 8b0a 	vpush	{d8-d12}
 8016544:	460d      	mov	r5, r1
 8016546:	eef0 ba40 	vmov.f32	s23, s0
 801654a:	eeb0 ca60 	vmov.f32	s24, s1
 801654e:	eef0 aa41 	vmov.f32	s21, s2
 8016552:	eeb0 ba61 	vmov.f32	s22, s3
 8016556:	eeb0 9a42 	vmov.f32	s18, s4
 801655a:	eef0 9a62 	vmov.f32	s19, s5
 801655e:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8016562:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8016566:	ee3a 8a89 	vadd.f32	s16, s21, s18
 801656a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801656e:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8016572:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8016576:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 801657a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801657e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8016582:	f015 fb17 	bl	802bbb4 <sqrtf>
 8016586:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801658a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801658e:	d12e      	bne.n	80165ee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8016590:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8016594:	ee39 7acb 	vsub.f32	s14, s19, s22
 8016598:	eeb0 8a6a 	vmov.f32	s16, s21
 801659c:	eef0 8a4b 	vmov.f32	s17, s22
 80165a0:	eea7 8a8a 	vfma.f32	s16, s15, s20
 80165a4:	eee7 8a0a 	vfma.f32	s17, s14, s20
 80165a8:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80165ac:	eee7 8aca 	vfms.f32	s17, s15, s20
 80165b0:	2d02      	cmp	r5, #2
 80165b2:	dc2f      	bgt.n	8016614 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80165b4:	3501      	adds	r5, #1
 80165b6:	eef0 1a4b 	vmov.f32	s3, s22
 80165ba:	eeb0 1a6a 	vmov.f32	s2, s21
 80165be:	4629      	mov	r1, r5
 80165c0:	eef0 2a68 	vmov.f32	s5, s17
 80165c4:	eeb0 2a48 	vmov.f32	s4, s16
 80165c8:	eef0 0a4c 	vmov.f32	s1, s24
 80165cc:	eeb0 0a6b 	vmov.f32	s0, s23
 80165d0:	4620      	mov	r0, r4
 80165d2:	f7ff ffb3 	bl	801653c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80165d6:	eef0 0a68 	vmov.f32	s1, s17
 80165da:	eeb0 0a48 	vmov.f32	s0, s16
 80165de:	4620      	mov	r0, r4
 80165e0:	f7ff ff55 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80165e4:	eeb0 ba68 	vmov.f32	s22, s17
 80165e8:	eef0 aa48 	vmov.f32	s21, s16
 80165ec:	e7b9      	b.n	8016562 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 80165ee:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80165f2:	ee38 8a6b 	vsub.f32	s16, s16, s23
 80165f6:	ee78 8acc 	vsub.f32	s17, s17, s24
 80165fa:	ee28 7a27 	vmul.f32	s14, s16, s15
 80165fe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016602:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8016606:	eec7 8a80 	vdiv.f32	s17, s15, s0
 801660a:	ee3b 8a88 	vadd.f32	s16, s23, s16
 801660e:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8016612:	e7cd      	b.n	80165b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8016614:	eef0 0a68 	vmov.f32	s1, s17
 8016618:	eeb0 0a48 	vmov.f32	s0, s16
 801661c:	4620      	mov	r0, r4
 801661e:	f7ff ff36 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016622:	ecbd 8b0a 	vpop	{d8-d12}
 8016626:	bd38      	pop	{r3, r4, r5, pc}

08016628 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8016628:	b510      	push	{r4, lr}
 801662a:	ed2d 8b0a 	vpush	{d8-d12}
 801662e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8016632:	4604      	mov	r4, r0
 8016634:	2b02      	cmp	r3, #2
 8016636:	eeb0 ca40 	vmov.f32	s24, s0
 801663a:	eeb0 9a60 	vmov.f32	s18, s1
 801663e:	eef0 9a41 	vmov.f32	s19, s2
 8016642:	eef0 8a61 	vmov.f32	s17, s3
 8016646:	eeb0 ba42 	vmov.f32	s22, s4
 801664a:	eef0 ba62 	vmov.f32	s23, s5
 801664e:	eeb0 aa43 	vmov.f32	s20, s6
 8016652:	eef0 aa63 	vmov.f32	s21, s7
 8016656:	eeb0 8a44 	vmov.f32	s16, s8
 801665a:	eef0 ca64 	vmov.f32	s25, s9
 801665e:	d12c      	bne.n	80166ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8016660:	eef0 0a62 	vmov.f32	s1, s5
 8016664:	eeb0 0a42 	vmov.f32	s0, s4
 8016668:	f7ff ff11 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801666c:	ee79 9acb 	vsub.f32	s19, s19, s22
 8016670:	ee7a caec 	vsub.f32	s25, s21, s25
 8016674:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8016678:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801667c:	ee69 9aac 	vmul.f32	s19, s19, s25
 8016680:	ee28 8a88 	vmul.f32	s16, s17, s16
 8016684:	eef4 9ac8 	vcmpe.f32	s19, s16
 8016688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801668c:	db0f      	blt.n	80166ae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 801668e:	2101      	movs	r1, #1
 8016690:	eef0 2a6a 	vmov.f32	s5, s21
 8016694:	eeb0 2a4a 	vmov.f32	s4, s20
 8016698:	eef0 1a6b 	vmov.f32	s3, s23
 801669c:	eeb0 1a4b 	vmov.f32	s2, s22
 80166a0:	eef0 0a49 	vmov.f32	s1, s18
 80166a4:	eeb0 0a4c 	vmov.f32	s0, s24
 80166a8:	4620      	mov	r0, r4
 80166aa:	f7ff ff47 	bl	801653c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80166ae:	eef0 0a6a 	vmov.f32	s1, s21
 80166b2:	eeb0 0a4a 	vmov.f32	s0, s20
 80166b6:	4620      	mov	r0, r4
 80166b8:	e035      	b.n	8016726 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 80166ba:	2b01      	cmp	r3, #1
 80166bc:	d138      	bne.n	8016730 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80166be:	ee31 4ae2 	vsub.f32	s8, s3, s5
 80166c2:	ee33 6a48 	vsub.f32	s12, s6, s16
 80166c6:	ee71 7a42 	vsub.f32	s15, s2, s4
 80166ca:	ee73 6ae4 	vsub.f32	s13, s7, s9
 80166ce:	ee26 7a44 	vnmul.f32	s14, s12, s8
 80166d2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80166d6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80166da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166de:	d027      	beq.n	8016730 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80166e0:	ee28 8a63 	vnmul.f32	s16, s16, s7
 80166e4:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 80166e8:	eea4 8a83 	vfma.f32	s16, s9, s6
 80166ec:	eee1 8a22 	vfma.f32	s17, s2, s5
 80166f0:	ee68 7a67 	vnmul.f32	s15, s16, s15
 80166f4:	ee28 8a44 	vnmul.f32	s16, s16, s8
 80166f8:	eea6 8aa8 	vfma.f32	s16, s13, s17
 80166fc:	eee6 7a28 	vfma.f32	s15, s12, s17
 8016700:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8016704:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8016708:	ee39 9a60 	vsub.f32	s18, s18, s1
 801670c:	ee3c ca40 	vsub.f32	s24, s24, s0
 8016710:	ee29 9a09 	vmul.f32	s18, s18, s18
 8016714:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8016718:	eeac 9a0c 	vfma.f32	s18, s24, s24
 801671c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8016720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016724:	db04      	blt.n	8016730 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8016726:	f7ff feb2 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801672a:	ecbd 8b0a 	vpop	{d8-d12}
 801672e:	bd10      	pop	{r4, pc}
 8016730:	eef0 0a6b 	vmov.f32	s1, s23
 8016734:	eeb0 0a4b 	vmov.f32	s0, s22
 8016738:	4620      	mov	r0, r4
 801673a:	f7ff fea8 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801673e:	e7b6      	b.n	80166ae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08016740 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8016740:	b510      	push	{r4, lr}
 8016742:	ed2d 8b0c 	vpush	{d8-d13}
 8016746:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801674a:	4604      	mov	r4, r0
 801674c:	eeb0 9a40 	vmov.f32	s18, s0
 8016750:	eef0 9a60 	vmov.f32	s19, s1
 8016754:	eef0 aa41 	vmov.f32	s21, s2
 8016758:	eeb0 ba61 	vmov.f32	s22, s3
 801675c:	b933      	cbnz	r3, 801676c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 801675e:	f7ff fe96 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016762:	eef0 0a4b 	vmov.f32	s1, s22
 8016766:	eeb0 0a6a 	vmov.f32	s0, s21
 801676a:	e015      	b.n	8016798 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 801676c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016770:	ee71 8a40 	vsub.f32	s17, s2, s0
 8016774:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8016778:	2b02      	cmp	r3, #2
 801677a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801677e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016782:	d10f      	bne.n	80167a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8016784:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8016788:	ee30 0a08 	vadd.f32	s0, s0, s16
 801678c:	f7ff fe7f 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016790:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8016794:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8016798:	4620      	mov	r0, r4
 801679a:	f7ff fe78 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801679e:	ecbd 8b0c 	vpop	{d8-d13}
 80167a2:	bd10      	pop	{r4, pc}
 80167a4:	f7ff fe73 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80167a8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80168e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80167ac:	eef0 0a69 	vmov.f32	s1, s19
 80167b0:	eeb0 0a49 	vmov.f32	s0, s18
 80167b4:	eeb1 aa68 	vneg.f32	s20, s17
 80167b8:	eddf ba4a 	vldr	s23, [pc, #296]	@ 80168e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 80167bc:	eee8 0a27 	vfma.f32	s1, s16, s15
 80167c0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80167c4:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80167c8:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80167cc:	4620      	mov	r0, r4
 80167ce:	f7ff fe5e 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80167d2:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80168e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 80167d6:	eef0 0a69 	vmov.f32	s1, s19
 80167da:	eeb0 0a49 	vmov.f32	s0, s18
 80167de:	ed9f ca43 	vldr	s24, [pc, #268]	@ 80168ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 80167e2:	eee8 0a27 	vfma.f32	s1, s16, s15
 80167e6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80167ea:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80167ee:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80167f2:	4620      	mov	r0, r4
 80167f4:	f7ff fe4b 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80167f8:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 80168f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 80167fc:	eef0 0a69 	vmov.f32	s1, s19
 8016800:	eeb0 0a49 	vmov.f32	s0, s18
 8016804:	eddf ca3b 	vldr	s25, [pc, #236]	@ 80168f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8016808:	eee8 0a27 	vfma.f32	s1, s16, s15
 801680c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016810:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8016814:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8016818:	4620      	mov	r0, r4
 801681a:	f7ff fe38 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801681e:	eddf 7a36 	vldr	s15, [pc, #216]	@ 80168f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8016822:	eef0 0a69 	vmov.f32	s1, s19
 8016826:	eeb0 0a49 	vmov.f32	s0, s18
 801682a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801682e:	ed9f da33 	vldr	s26, [pc, #204]	@ 80168fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8016832:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016836:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801683a:	eea8 0a0d 	vfma.f32	s0, s16, s26
 801683e:	4620      	mov	r0, r4
 8016840:	f7ff fe25 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016844:	ee79 0a88 	vadd.f32	s1, s19, s16
 8016848:	ee39 0a28 	vadd.f32	s0, s18, s17
 801684c:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8016850:	ee30 0a08 	vadd.f32	s0, s0, s16
 8016854:	4620      	mov	r0, r4
 8016856:	f7ff fe1a 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801685a:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8016900 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 801685e:	eef0 0a69 	vmov.f32	s1, s19
 8016862:	eeb0 0a49 	vmov.f32	s0, s18
 8016866:	eee8 0a27 	vfma.f32	s1, s16, s15
 801686a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801686e:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8016872:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8016876:	4620      	mov	r0, r4
 8016878:	f7ff fe09 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801687c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8016904 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8016880:	eef0 0a69 	vmov.f32	s1, s19
 8016884:	eeb0 0a49 	vmov.f32	s0, s18
 8016888:	eee8 0a27 	vfma.f32	s1, s16, s15
 801688c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016890:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8016894:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8016898:	4620      	mov	r0, r4
 801689a:	f7ff fdf8 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801689e:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8016908 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80168a2:	eef0 0a69 	vmov.f32	s1, s19
 80168a6:	eeb0 0a49 	vmov.f32	s0, s18
 80168aa:	eee8 0a27 	vfma.f32	s1, s16, s15
 80168ae:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80168b2:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80168b6:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80168ba:	4620      	mov	r0, r4
 80168bc:	f7ff fde7 	bl	801648e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80168c0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801690c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 80168c4:	eef0 0a69 	vmov.f32	s1, s19
 80168c8:	eeb0 0a49 	vmov.f32	s0, s18
 80168cc:	eee8 0a27 	vfma.f32	s1, s16, s15
 80168d0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80168d4:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80168d8:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80168dc:	4620      	mov	r0, r4
 80168de:	e73e      	b.n	801675e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 80168e0:	3d23d70a 	.word	0x3d23d70a
 80168e4:	3e8f5c29 	.word	0x3e8f5c29
 80168e8:	3e4ccccd 	.word	0x3e4ccccd
 80168ec:	3f19999a 	.word	0x3f19999a
 80168f0:	3ecccccd 	.word	0x3ecccccd
 80168f4:	3f4ccccd 	.word	0x3f4ccccd
 80168f8:	3f3851ec 	.word	0x3f3851ec
 80168fc:	3f75c28f 	.word	0x3f75c28f
 8016900:	3fa3d70a 	.word	0x3fa3d70a
 8016904:	3fcccccd 	.word	0x3fcccccd
 8016908:	3fe66666 	.word	0x3fe66666
 801690c:	3ffae148 	.word	0x3ffae148

08016910 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8016910:	b570      	push	{r4, r5, r6, lr}
 8016912:	ed2d 8b06 	vpush	{d8-d10}
 8016916:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801691a:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 801691e:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8016922:	ee30 9a49 	vsub.f32	s18, s0, s18
 8016926:	eef0 aa40 	vmov.f32	s21, s0
 801692a:	ee28 0a08 	vmul.f32	s0, s16, s16
 801692e:	eea9 0a09 	vfma.f32	s0, s18, s18
 8016932:	4604      	mov	r4, r0
 8016934:	eeb0 aa60 	vmov.f32	s20, s1
 8016938:	f015 f93c 	bl	802bbb4 <sqrtf>
 801693c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016944:	dd36      	ble.n	80169b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8016946:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801694a:	eec0 6a27 	vdiv.f32	s13, s0, s15
 801694e:	2600      	movs	r6, #0
 8016950:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8016954:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8016958:	ee89 8a26 	vdiv.f32	s16, s18, s13
 801695c:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8016960:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8016964:	ee70 9a28 	vadd.f32	s19, s0, s17
 8016968:	ee30 9ac8 	vsub.f32	s18, s1, s16
 801696c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8016970:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8016974:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8016978:	b1fd      	cbz	r5, 80169ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 801697a:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 801697e:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8016982:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8016986:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 801698a:	eef0 0a49 	vmov.f32	s1, s18
 801698e:	eeb0 0a69 	vmov.f32	s0, s19
 8016992:	4620      	mov	r0, r4
 8016994:	f7ff fd64 	bl	8016460 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8016998:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 801699c:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 80169a0:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 80169a4:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 80169a8:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 80169ac:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 80169b0:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 80169b4:	ecbd 8b06 	vpop	{d8-d10}
 80169b8:	bd70      	pop	{r4, r5, r6, pc}
 80169ba:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 80169be:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80169c2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80169c6:	b16b      	cbz	r3, 80169e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 80169c8:	eef0 1a49 	vmov.f32	s3, s18
 80169cc:	eeb0 1a69 	vmov.f32	s2, s19
 80169d0:	eef0 0a62 	vmov.f32	s1, s5
 80169d4:	eeb0 0a42 	vmov.f32	s0, s4
 80169d8:	4620      	mov	r0, r4
 80169da:	f7ff feb1 	bl	8016740 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80169de:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 80169e2:	e7db      	b.n	801699c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 80169e4:	eef0 4a48 	vmov.f32	s9, s16
 80169e8:	eeb0 4a68 	vmov.f32	s8, s17
 80169ec:	eef0 3a49 	vmov.f32	s7, s18
 80169f0:	eeb0 3a69 	vmov.f32	s6, s19
 80169f4:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80169f8:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80169fc:	4620      	mov	r0, r4
 80169fe:	f7ff fe13 	bl	8016628 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8016a02:	e7cb      	b.n	801699c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08016a04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8016a04:	ee07 2a90 	vmov	s15, r2
 8016a08:	ee07 1a10 	vmov	s14, r1
 8016a0c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8016a10:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8016a14:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8016a24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8016a18:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8016a1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016a20:	f7ff bf76 	b.w	8016910 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016a24:	3d000000 	.word	0x3d000000

08016a28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8016a28:	b538      	push	{r3, r4, r5, lr}
 8016a2a:	ed2d 8b02 	vpush	{d8}
 8016a2e:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8016a32:	4604      	mov	r4, r0
 8016a34:	b31d      	cbz	r5, 8016a7e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8016a36:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8016a3a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8016a3e:	ee78 8a67 	vsub.f32	s17, s16, s15
 8016a42:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8016a46:	eef0 0a68 	vmov.f32	s1, s17
 8016a4a:	ee38 8a27 	vadd.f32	s16, s16, s15
 8016a4e:	f7ff fd07 	bl	8016460 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8016a52:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8016a56:	eef0 1a48 	vmov.f32	s3, s16
 8016a5a:	eeb0 0a41 	vmov.f32	s0, s2
 8016a5e:	eef0 0a68 	vmov.f32	s1, s17
 8016a62:	4620      	mov	r0, r4
 8016a64:	f7ff fe6c 	bl	8016740 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8016a68:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8016a6c:	eef0 1a68 	vmov.f32	s3, s17
 8016a70:	eef0 0a48 	vmov.f32	s1, s16
 8016a74:	eeb0 0a41 	vmov.f32	s0, s2
 8016a78:	4620      	mov	r0, r4
 8016a7a:	f7ff fe61 	bl	8016740 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8016a7e:	ecbd 8b02 	vpop	{d8}
 8016a82:	4628      	mov	r0, r5
 8016a84:	bd38      	pop	{r3, r4, r5, pc}

08016a86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8016a86:	b510      	push	{r4, lr}
 8016a88:	ed2d 8b02 	vpush	{d8}
 8016a8c:	4604      	mov	r4, r0
 8016a8e:	eeb0 8a40 	vmov.f32	s16, s0
 8016a92:	eef0 8a60 	vmov.f32	s17, s1
 8016a96:	f7ff ffc7 	bl	8016a28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016a9a:	b9d0      	cbnz	r0, 8016ad2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8016a9c:	4620      	mov	r0, r4
 8016a9e:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8016aa2:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8016aa6:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8016aaa:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8016aae:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8016ab2:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8016ab6:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8016aba:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8016abe:	eef0 0a68 	vmov.f32	s1, s17
 8016ac2:	eeb0 0a48 	vmov.f32	s0, s16
 8016ac6:	f7ff fdaf 	bl	8016628 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8016aca:	2001      	movs	r0, #1
 8016acc:	ecbd 8b02 	vpop	{d8}
 8016ad0:	bd10      	pop	{r4, pc}
 8016ad2:	2000      	movs	r0, #0
 8016ad4:	e7fa      	b.n	8016acc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08016ad6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8016ad6:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8016ada:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8016ade:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8016ae2:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8016ae6:	f7ff be2b 	b.w	8016740 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08016aec <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8016aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af0:	b089      	sub	sp, #36	@ 0x24
 8016af2:	461c      	mov	r4, r3
 8016af4:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8016af8:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8016afc:	4682      	mov	sl, r0
 8016afe:	9304      	str	r3, [sp, #16]
 8016b00:	2300      	movs	r3, #0
 8016b02:	4615      	mov	r5, r2
 8016b04:	f10d 0820 	add.w	r8, sp, #32
 8016b08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8016b0a:	9306      	str	r3, [sp, #24]
 8016b0c:	f848 3d04 	str.w	r3, [r8, #-4]!
 8016b10:	9b04      	ldr	r3, [sp, #16]
 8016b12:	9105      	str	r1, [sp, #20]
 8016b14:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8016b18:	9b05      	ldr	r3, [sp, #20]
 8016b1a:	429d      	cmp	r5, r3
 8016b1c:	d96d      	bls.n	8016bfa <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8016b1e:	3d01      	subs	r5, #1
 8016b20:	f819 3005 	ldrb.w	r3, [r9, r5]
 8016b24:	2b06      	cmp	r3, #6
 8016b26:	d8f7      	bhi.n	8016b18 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8016b28:	a201      	add	r2, pc, #4	@ (adr r2, 8016b30 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8016b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b2e:	bf00      	nop
 8016b30:	08016b4f 	.word	0x08016b4f
 8016b34:	08016b19 	.word	0x08016b19
 8016b38:	08016b4d 	.word	0x08016b4d
 8016b3c:	08016b71 	.word	0x08016b71
 8016b40:	08016b71 	.word	0x08016b71
 8016b44:	08016b75 	.word	0x08016b75
 8016b48:	08016bb5 	.word	0x08016bb5
 8016b4c:	3c02      	subs	r4, #2
 8016b4e:	4650      	mov	r0, sl
 8016b50:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8016b54:	9400      	str	r4, [sp, #0]
 8016b56:	462b      	mov	r3, r5
 8016b58:	4642      	mov	r2, r8
 8016b5a:	a906      	add	r1, sp, #24
 8016b5c:	f7ff fcae 	bl	80164bc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8016b60:	eddd 0a07 	vldr	s1, [sp, #28]
 8016b64:	ed9d 0a06 	vldr	s0, [sp, #24]
 8016b68:	4630      	mov	r0, r6
 8016b6a:	f7ff fed1 	bl	8016910 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016b6e:	e7d3      	b.n	8016b18 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8016b70:	3c01      	subs	r4, #1
 8016b72:	e7ec      	b.n	8016b4e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8016b74:	f1a4 0b04 	sub.w	fp, r4, #4
 8016b78:	3c02      	subs	r4, #2
 8016b7a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8016b7e:	4650      	mov	r0, sl
 8016b80:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8016b84:	f8cd b000 	str.w	fp, [sp]
 8016b88:	462b      	mov	r3, r5
 8016b8a:	4642      	mov	r2, r8
 8016b8c:	a906      	add	r1, sp, #24
 8016b8e:	f7ff fc95 	bl	80164bc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8016b92:	eddd 2a07 	vldr	s5, [sp, #28]
 8016b96:	ed9d 2a06 	vldr	s4, [sp, #24]
 8016b9a:	ed54 1a01 	vldr	s3, [r4, #-4]
 8016b9e:	ed14 1a02 	vldr	s2, [r4, #-8]
 8016ba2:	edd4 0a01 	vldr	s1, [r4, #4]
 8016ba6:	ed94 0a00 	vldr	s0, [r4]
 8016baa:	4630      	mov	r0, r6
 8016bac:	f7ff fc1a 	bl	80163e4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8016bb0:	465c      	mov	r4, fp
 8016bb2:	e7b1      	b.n	8016b18 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8016bb4:	f1a4 0b06 	sub.w	fp, r4, #6
 8016bb8:	3c02      	subs	r4, #2
 8016bba:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8016bbe:	4650      	mov	r0, sl
 8016bc0:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8016bc4:	f8cd b000 	str.w	fp, [sp]
 8016bc8:	462b      	mov	r3, r5
 8016bca:	4642      	mov	r2, r8
 8016bcc:	a906      	add	r1, sp, #24
 8016bce:	f7ff fc75 	bl	80164bc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8016bd2:	eddd 3a07 	vldr	s7, [sp, #28]
 8016bd6:	ed9d 3a06 	vldr	s6, [sp, #24]
 8016bda:	ed54 2a03 	vldr	s5, [r4, #-12]
 8016bde:	ed14 2a04 	vldr	s4, [r4, #-16]
 8016be2:	ed54 1a01 	vldr	s3, [r4, #-4]
 8016be6:	ed14 1a02 	vldr	s2, [r4, #-8]
 8016bea:	edd4 0a01 	vldr	s1, [r4, #4]
 8016bee:	ed94 0a00 	vldr	s0, [r4]
 8016bf2:	4630      	mov	r0, r6
 8016bf4:	f7ff fc15 	bl	8016422 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8016bf8:	e7da      	b.n	8016bb0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8016bfa:	9b04      	ldr	r3, [sp, #16]
 8016bfc:	b113      	cbz	r3, 8016c04 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8016bfe:	4630      	mov	r0, r6
 8016c00:	f7ff ff69 	bl	8016ad6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8016c04:	b009      	add	sp, #36	@ 0x24
 8016c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c0a:	bf00      	nop

08016c0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8016c0c:	eef0 7a60 	vmov.f32	s15, s1
 8016c10:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016c14:	ee17 2a90 	vmov	r2, s15
 8016c18:	eef0 7a40 	vmov.f32	s15, s0
 8016c1c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016c20:	6803      	ldr	r3, [r0, #0]
 8016c22:	ee17 1a90 	vmov	r1, s15
 8016c26:	689b      	ldr	r3, [r3, #8]
 8016c28:	4718      	bx	r3
	...

08016c2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8016c2c:	b510      	push	{r4, lr}
 8016c2e:	4604      	mov	r4, r0
 8016c30:	4b03      	ldr	r3, [pc, #12]	@ (8016c40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8016c32:	f840 3b14 	str.w	r3, [r0], #20
 8016c36:	f000 fe43 	bl	80178c0 <_ZN8touchgfx7OutlineD1Ev>
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	bd10      	pop	{r4, pc}
 8016c3e:	bf00      	nop
 8016c40:	0802fd08 	.word	0x0802fd08

08016c44 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8016c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c48:	ed2d 8b04 	vpush	{d8-d9}
 8016c4c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8016c50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c58:	b0b5      	sub	sp, #212	@ 0xd4
 8016c5a:	4605      	mov	r5, r0
 8016c5c:	468b      	mov	fp, r1
 8016c5e:	9206      	str	r2, [sp, #24]
 8016c60:	461e      	mov	r6, r3
 8016c62:	f04f 0400 	mov.w	r4, #0
 8016c66:	f240 814e 	bls.w	8016f06 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8016c6a:	23ff      	movs	r3, #255	@ 0xff
 8016c6c:	9300      	str	r3, [sp, #0]
 8016c6e:	1d02      	adds	r2, r0, #4
 8016c70:	6981      	ldr	r1, [r0, #24]
 8016c72:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016c74:	a808      	add	r0, sp, #32
 8016c76:	f014 fb13 	bl	802b2a0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8016c7a:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8016c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8016c8a:	bf48      	it	mi
 8016c8c:	eef1 7a67 	vnegmi.f32	s15, s15
 8016c90:	edd5 6a08 	vldr	s13, [r5, #32]
 8016c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016c98:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8016c9c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016ca0:	ed9f 9a9a 	vldr	s18, [pc, #616]	@ 8016f0c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8016ca4:	f04f 0800 	mov.w	r8, #0
 8016ca8:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8016cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016cb0:	4b97      	ldr	r3, [pc, #604]	@ (8016f10 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8016cb2:	2201      	movs	r2, #1
 8016cb4:	9308      	str	r3, [sp, #32]
 8016cb6:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8016cba:	9325      	str	r3, [sp, #148]	@ 0x94
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	942a      	str	r4, [sp, #168]	@ 0xa8
 8016cc0:	942b      	str	r4, [sp, #172]	@ 0xac
 8016cc2:	942c      	str	r4, [sp, #176]	@ 0xb0
 8016cc4:	942d      	str	r4, [sp, #180]	@ 0xb4
 8016cc6:	942e      	str	r4, [sp, #184]	@ 0xb8
 8016cc8:	942f      	str	r4, [sp, #188]	@ 0xbc
 8016cca:	9430      	str	r4, [sp, #192]	@ 0xc0
 8016ccc:	9431      	str	r4, [sp, #196]	@ 0xc4
 8016cce:	9432      	str	r4, [sp, #200]	@ 0xc8
 8016cd0:	9433      	str	r4, [sp, #204]	@ 0xcc
 8016cd2:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8016cd6:	eef0 9a49 	vmov.f32	s19, s18
 8016cda:	eeb0 8a49 	vmov.f32	s16, s18
 8016cde:	eef0 8a49 	vmov.f32	s17, s18
 8016ce2:	4644      	mov	r4, r8
 8016ce4:	46c1      	mov	r9, r8
 8016ce6:	f04f 0a01 	mov.w	sl, #1
 8016cea:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8016cee:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8016cf2:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8016cf6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8016cfa:	7f6a      	ldrb	r2, [r5, #29]
 8016cfc:	7fab      	ldrb	r3, [r5, #30]
 8016cfe:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8016d02:	435a      	muls	r2, r3
 8016d04:	1c53      	adds	r3, r2, #1
 8016d06:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8016d0a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016d0e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016d12:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8016d16:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8016d1a:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8016d1e:	af08      	add	r7, sp, #32
 8016d20:	9b06      	ldr	r3, [sp, #24]
 8016d22:	454b      	cmp	r3, r9
 8016d24:	f000 80cc 	beq.w	8016ec0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8016d28:	f109 0301 	add.w	r3, r9, #1
 8016d2c:	9305      	str	r3, [sp, #20]
 8016d2e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8016d32:	2b06      	cmp	r3, #6
 8016d34:	d839      	bhi.n	8016daa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016d36:	e8df f003 	tbb	[pc, r3]
 8016d3a:	3b04      	.short	0x3b04
 8016d3c:	817c6f60 	.word	0x817c6f60
 8016d40:	a0          	.byte	0xa0
 8016d41:	00          	.byte	0x00
 8016d42:	45c1      	cmp	r9, r8
 8016d44:	d92b      	bls.n	8016d9e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8016d46:	eef0 0a49 	vmov.f32	s1, s18
 8016d4a:	eeb0 0a69 	vmov.f32	s0, s19
 8016d4e:	4638      	mov	r0, r7
 8016d50:	f7ff fdde 	bl	8016910 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016d54:	4638      	mov	r0, r7
 8016d56:	f7ff fe67 	bl	8016a28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016d5a:	4681      	mov	r9, r0
 8016d5c:	b9f8      	cbnz	r0, 8016d9e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8016d5e:	eef0 0a49 	vmov.f32	s1, s18
 8016d62:	eeb0 0a69 	vmov.f32	s0, s19
 8016d66:	4638      	mov	r0, r7
 8016d68:	f7ff fe8d 	bl	8016a86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8016d6c:	4628      	mov	r0, r5
 8016d6e:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8016d72:	e9cd b600 	strd	fp, r6, [sp]
 8016d76:	4623      	mov	r3, r4
 8016d78:	9a05      	ldr	r2, [sp, #20]
 8016d7a:	4641      	mov	r1, r8
 8016d7c:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8016d80:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8016d84:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8016d88:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8016d8c:	f7ff feae 	bl	8016aec <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016d90:	eef0 0a49 	vmov.f32	s1, s18
 8016d94:	eeb0 0a69 	vmov.f32	s0, s19
 8016d98:	4638      	mov	r0, r7
 8016d9a:	f7ff fe74 	bl	8016a86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8016d9e:	eeb0 8a49 	vmov.f32	s16, s18
 8016da2:	eef0 8a69 	vmov.f32	s17, s19
 8016da6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016daa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016dae:	e7b7      	b.n	8016d20 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8016db0:	45c1      	cmp	r9, r8
 8016db2:	d90d      	bls.n	8016dd0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8016db4:	4638      	mov	r0, r7
 8016db6:	f7ff fe37 	bl	8016a28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016dba:	b948      	cbnz	r0, 8016dd0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8016dbc:	e9cd a702 	strd	sl, r7, [sp, #8]
 8016dc0:	e9cd b600 	strd	fp, r6, [sp]
 8016dc4:	4623      	mov	r3, r4
 8016dc6:	464a      	mov	r2, r9
 8016dc8:	4641      	mov	r1, r8
 8016dca:	4628      	mov	r0, r5
 8016dcc:	f7ff fe8e 	bl	8016aec <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016dd0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016dd4:	edd3 8a00 	vldr	s17, [r3]
 8016dd8:	ed93 8a01 	vldr	s16, [r3, #4]
 8016ddc:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8016de0:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8016de4:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8016de8:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8016dec:	3402      	adds	r4, #2
 8016dee:	46c8      	mov	r8, r9
 8016df0:	eeb0 9a48 	vmov.f32	s18, s16
 8016df4:	eef0 9a68 	vmov.f32	s19, s17
 8016df8:	e7d7      	b.n	8016daa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016dfa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016dfe:	edd3 8a00 	vldr	s17, [r3]
 8016e02:	ed93 8a01 	vldr	s16, [r3, #4]
 8016e06:	eeb0 0a68 	vmov.f32	s0, s17
 8016e0a:	eef0 0a48 	vmov.f32	s1, s16
 8016e0e:	4638      	mov	r0, r7
 8016e10:	f7ff fd7e 	bl	8016910 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016e14:	3402      	adds	r4, #2
 8016e16:	e7c8      	b.n	8016daa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016e18:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016e1c:	edd3 8a00 	vldr	s17, [r3]
 8016e20:	eef0 0a48 	vmov.f32	s1, s16
 8016e24:	eeb0 0a68 	vmov.f32	s0, s17
 8016e28:	4638      	mov	r0, r7
 8016e2a:	f7ff fd71 	bl	8016910 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016e2e:	3401      	adds	r4, #1
 8016e30:	e7bb      	b.n	8016daa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016e32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016e36:	ed93 8a00 	vldr	s16, [r3]
 8016e3a:	e7f1      	b.n	8016e20 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8016e3c:	00a3      	lsls	r3, r4, #2
 8016e3e:	f103 0208 	add.w	r2, r3, #8
 8016e42:	f103 090c 	add.w	r9, r3, #12
 8016e46:	4432      	add	r2, r6
 8016e48:	4433      	add	r3, r6
 8016e4a:	44b1      	add	r9, r6
 8016e4c:	ed92 2a00 	vldr	s4, [r2]
 8016e50:	eef0 0a48 	vmov.f32	s1, s16
 8016e54:	eeb0 0a68 	vmov.f32	s0, s17
 8016e58:	edd9 2a00 	vldr	s5, [r9]
 8016e5c:	edd3 1a01 	vldr	s3, [r3, #4]
 8016e60:	ed93 1a00 	vldr	s2, [r3]
 8016e64:	4638      	mov	r0, r7
 8016e66:	9207      	str	r2, [sp, #28]
 8016e68:	f7ff fabc 	bl	80163e4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8016e6c:	9a07      	ldr	r2, [sp, #28]
 8016e6e:	ed99 8a00 	vldr	s16, [r9]
 8016e72:	edd2 8a00 	vldr	s17, [r2]
 8016e76:	3404      	adds	r4, #4
 8016e78:	e797      	b.n	8016daa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016e7a:	00a3      	lsls	r3, r4, #2
 8016e7c:	f103 0210 	add.w	r2, r3, #16
 8016e80:	f103 0914 	add.w	r9, r3, #20
 8016e84:	4432      	add	r2, r6
 8016e86:	4433      	add	r3, r6
 8016e88:	44b1      	add	r9, r6
 8016e8a:	ed92 3a00 	vldr	s6, [r2]
 8016e8e:	eef0 0a48 	vmov.f32	s1, s16
 8016e92:	eeb0 0a68 	vmov.f32	s0, s17
 8016e96:	edd9 3a00 	vldr	s7, [r9]
 8016e9a:	edd3 2a03 	vldr	s5, [r3, #12]
 8016e9e:	ed93 2a02 	vldr	s4, [r3, #8]
 8016ea2:	edd3 1a01 	vldr	s3, [r3, #4]
 8016ea6:	ed93 1a00 	vldr	s2, [r3]
 8016eaa:	4638      	mov	r0, r7
 8016eac:	9207      	str	r2, [sp, #28]
 8016eae:	f7ff fab8 	bl	8016422 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8016eb2:	9a07      	ldr	r2, [sp, #28]
 8016eb4:	ed99 8a00 	vldr	s16, [r9]
 8016eb8:	edd2 8a00 	vldr	s17, [r2]
 8016ebc:	3406      	adds	r4, #6
 8016ebe:	e774      	b.n	8016daa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016ec0:	9b06      	ldr	r3, [sp, #24]
 8016ec2:	af08      	add	r7, sp, #32
 8016ec4:	4543      	cmp	r3, r8
 8016ec6:	d90f      	bls.n	8016ee8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8016ec8:	4638      	mov	r0, r7
 8016eca:	f7ff fdad 	bl	8016a28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016ece:	b958      	cbnz	r0, 8016ee8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8016ed0:	2301      	movs	r3, #1
 8016ed2:	9703      	str	r7, [sp, #12]
 8016ed4:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8016ed8:	f8cd b000 	str.w	fp, [sp]
 8016edc:	4623      	mov	r3, r4
 8016ede:	9a06      	ldr	r2, [sp, #24]
 8016ee0:	4641      	mov	r1, r8
 8016ee2:	4628      	mov	r0, r5
 8016ee4:	f7ff fe02 	bl	8016aec <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016ee8:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8016eec:	4638      	mov	r0, r7
 8016eee:	f014 fa6b 	bl	802b3c8 <_ZN8touchgfx6Canvas6renderEh>
 8016ef2:	4604      	mov	r4, r0
 8016ef4:	4638      	mov	r0, r7
 8016ef6:	f7ff fe99 	bl	8016c2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8016efa:	4620      	mov	r0, r4
 8016efc:	b035      	add	sp, #212	@ 0xd4
 8016efe:	ecbd 8b04 	vpop	{d8-d9}
 8016f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f06:	2401      	movs	r4, #1
 8016f08:	e7f7      	b.n	8016efa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8016f0a:	bf00      	nop
 8016f0c:	00000000 	.word	0x00000000
 8016f10:	0802f5d4 	.word	0x0802f5d4

08016f14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8016f14:	b510      	push	{r4, lr}
 8016f16:	4604      	mov	r4, r0
 8016f18:	f7ff fe88 	bl	8016c2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8016f1c:	4620      	mov	r0, r4
 8016f1e:	21b0      	movs	r1, #176	@ 0xb0
 8016f20:	f014 fe1f 	bl	802bb62 <_ZdlPvj>
 8016f24:	4620      	mov	r0, r4
 8016f26:	bd10      	pop	{r4, pc}

08016f28 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8016f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f2c:	ed2d 8b06 	vpush	{d8-d10}
 8016f30:	4698      	mov	r8, r3
 8016f32:	23ff      	movs	r3, #255	@ 0xff
 8016f34:	4607      	mov	r7, r0
 8016f36:	b0aa      	sub	sp, #168	@ 0xa8
 8016f38:	9300      	str	r3, [sp, #0]
 8016f3a:	4689      	mov	r9, r1
 8016f3c:	4692      	mov	sl, r2
 8016f3e:	6981      	ldr	r1, [r0, #24]
 8016f40:	1d02      	adds	r2, r0, #4
 8016f42:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8016f44:	a80d      	add	r0, sp, #52	@ 0x34
 8016f46:	f014 f9ab 	bl	802b2a0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8016f4a:	eddf 0a80 	vldr	s1, [pc, #512]	@ 801714c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8016f4e:	7f3b      	ldrb	r3, [r7, #28]
 8016f50:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8016f54:	1e5a      	subs	r2, r3, #1
 8016f56:	4253      	negs	r3, r2
 8016f58:	4153      	adcs	r3, r2
 8016f5a:	eeb0 0a60 	vmov.f32	s0, s1
 8016f5e:	4628      	mov	r0, r5
 8016f60:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8016f64:	ed9f 8a79 	vldr	s16, [pc, #484]	@ 801714c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8016f68:	f004 f9a3 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016f6c:	eef0 8a48 	vmov.f32	s17, s16
 8016f70:	eeb0 9a40 	vmov.f32	s18, s0
 8016f74:	eef0 9a60 	vmov.f32	s19, s1
 8016f78:	2400      	movs	r4, #0
 8016f7a:	44ca      	add	sl, r9
 8016f7c:	45ca      	cmp	sl, r9
 8016f7e:	f000 80cd 	beq.w	801711c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8016f82:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016f86:	2b06      	cmp	r3, #6
 8016f88:	d8f8      	bhi.n	8016f7c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8016f8a:	e8df f003 	tbb	[pc, r3]
 8016f8e:	0804      	.short	0x0804
 8016f90:	58533f2a 	.word	0x58533f2a
 8016f94:	8a          	.byte	0x8a
 8016f95:	00          	.byte	0x00
 8016f96:	a80d      	add	r0, sp, #52	@ 0x34
 8016f98:	f014 f9f4 	bl	802b384 <_ZN8touchgfx6Canvas5closeEv>
 8016f9c:	e7ee      	b.n	8016f7c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8016f9e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8016fa2:	edd3 8a00 	vldr	s17, [r3]
 8016fa6:	ed93 8a01 	vldr	s16, [r3, #4]
 8016faa:	eeb0 0a68 	vmov.f32	s0, s17
 8016fae:	eef0 0a48 	vmov.f32	s1, s16
 8016fb2:	4628      	mov	r0, r5
 8016fb4:	f004 f97d 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016fb8:	eef0 7a60 	vmov.f32	s15, s1
 8016fbc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016fc0:	ee17 2a90 	vmov	r2, s15
 8016fc4:	eef0 7a40 	vmov.f32	s15, s0
 8016fc8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016fcc:	a80d      	add	r0, sp, #52	@ 0x34
 8016fce:	ee17 1a90 	vmov	r1, s15
 8016fd2:	eeb0 9a40 	vmov.f32	s18, s0
 8016fd6:	eef0 9a60 	vmov.f32	s19, s1
 8016fda:	f014 faad 	bl	802b538 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016fde:	3402      	adds	r4, #2
 8016fe0:	e7cc      	b.n	8016f7c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8016fe2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8016fe6:	edd3 8a00 	vldr	s17, [r3]
 8016fea:	ed93 8a01 	vldr	s16, [r3, #4]
 8016fee:	eeb0 0a68 	vmov.f32	s0, s17
 8016ff2:	eef0 0a48 	vmov.f32	s1, s16
 8016ff6:	4628      	mov	r0, r5
 8016ff8:	f004 f95b 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016ffc:	a80d      	add	r0, sp, #52	@ 0x34
 8016ffe:	eeb0 9a40 	vmov.f32	s18, s0
 8017002:	eef0 9a60 	vmov.f32	s19, s1
 8017006:	f7ff fe01 	bl	8016c0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801700a:	e7e8      	b.n	8016fde <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 801700c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017010:	edd3 8a00 	vldr	s17, [r3]
 8017014:	eef0 0a48 	vmov.f32	s1, s16
 8017018:	eeb0 0a68 	vmov.f32	s0, s17
 801701c:	4628      	mov	r0, r5
 801701e:	f004 f948 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017022:	a80d      	add	r0, sp, #52	@ 0x34
 8017024:	eeb0 9a40 	vmov.f32	s18, s0
 8017028:	eef0 9a60 	vmov.f32	s19, s1
 801702c:	3401      	adds	r4, #1
 801702e:	f7ff fded 	bl	8016c0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8017032:	e7a3      	b.n	8016f7c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8017034:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017038:	ed93 8a00 	vldr	s16, [r3]
 801703c:	e7ea      	b.n	8017014 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 801703e:	1ca3      	adds	r3, r4, #2
 8017040:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8017044:	ed53 0a01 	vldr	s1, [r3, #-4]
 8017048:	ed13 0a02 	vldr	s0, [r3, #-8]
 801704c:	4628      	mov	r0, r5
 801704e:	edd3 8a00 	vldr	s17, [r3]
 8017052:	ed93 8a01 	vldr	s16, [r3, #4]
 8017056:	f004 f92c 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801705a:	4628      	mov	r0, r5
 801705c:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8017060:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8017064:	eeb0 0a68 	vmov.f32	s0, s17
 8017068:	eef0 0a48 	vmov.f32	s1, s16
 801706c:	f004 f921 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017070:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8017074:	eef0 2a60 	vmov.f32	s5, s1
 8017078:	eeb0 2a40 	vmov.f32	s4, s0
 801707c:	eeb0 aa40 	vmov.f32	s20, s0
 8017080:	eef0 aa60 	vmov.f32	s21, s1
 8017084:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8017088:	eef0 0a69 	vmov.f32	s1, s19
 801708c:	eeb0 0a49 	vmov.f32	s0, s18
 8017090:	a80d      	add	r0, sp, #52	@ 0x34
 8017092:	f7ff f9a7 	bl	80163e4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8017096:	3404      	adds	r4, #4
 8017098:	eef0 9a6a 	vmov.f32	s19, s21
 801709c:	eeb0 9a4a 	vmov.f32	s18, s20
 80170a0:	e76c      	b.n	8016f7c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80170a2:	1d26      	adds	r6, r4, #4
 80170a4:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80170a8:	ed56 0a03 	vldr	s1, [r6, #-12]
 80170ac:	ed16 0a04 	vldr	s0, [r6, #-16]
 80170b0:	4628      	mov	r0, r5
 80170b2:	edd6 8a00 	vldr	s17, [r6]
 80170b6:	ed96 8a01 	vldr	s16, [r6, #4]
 80170ba:	f004 f8fa 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80170be:	4628      	mov	r0, r5
 80170c0:	ed8d 0a07 	vstr	s0, [sp, #28]
 80170c4:	edcd 0a08 	vstr	s1, [sp, #32]
 80170c8:	ed16 0a02 	vldr	s0, [r6, #-8]
 80170cc:	ed56 0a01 	vldr	s1, [r6, #-4]
 80170d0:	f004 f8ef 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80170d4:	4628      	mov	r0, r5
 80170d6:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80170da:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80170de:	eeb0 0a68 	vmov.f32	s0, s17
 80170e2:	eef0 0a48 	vmov.f32	s1, s16
 80170e6:	f004 f8e4 	bl	801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80170ea:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 80170ee:	eef0 3a60 	vmov.f32	s7, s1
 80170f2:	eeb0 3a40 	vmov.f32	s6, s0
 80170f6:	eeb0 aa40 	vmov.f32	s20, s0
 80170fa:	eef0 aa60 	vmov.f32	s21, s1
 80170fe:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8017102:	eddd 1a08 	vldr	s3, [sp, #32]
 8017106:	ed9d 1a07 	vldr	s2, [sp, #28]
 801710a:	eef0 0a69 	vmov.f32	s1, s19
 801710e:	eeb0 0a49 	vmov.f32	s0, s18
 8017112:	a80d      	add	r0, sp, #52	@ 0x34
 8017114:	f7ff f985 	bl	8016422 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8017118:	3406      	adds	r4, #6
 801711a:	e7bd      	b.n	8017098 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 801711c:	7f7b      	ldrb	r3, [r7, #29]
 801711e:	7fb9      	ldrb	r1, [r7, #30]
 8017120:	a80d      	add	r0, sp, #52	@ 0x34
 8017122:	4359      	muls	r1, r3
 8017124:	1c4b      	adds	r3, r1, #1
 8017126:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801712a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801712e:	f014 f94b 	bl	802b3c8 <_ZN8touchgfx6Canvas6renderEh>
 8017132:	4604      	mov	r4, r0
 8017134:	4b06      	ldr	r3, [pc, #24]	@ (8017150 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8017136:	a812      	add	r0, sp, #72	@ 0x48
 8017138:	930d      	str	r3, [sp, #52]	@ 0x34
 801713a:	f000 fbc1 	bl	80178c0 <_ZN8touchgfx7OutlineD1Ev>
 801713e:	4620      	mov	r0, r4
 8017140:	b02a      	add	sp, #168	@ 0xa8
 8017142:	ecbd 8b06 	vpop	{d8-d10}
 8017146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801714a:	bf00      	nop
 801714c:	00000000 	.word	0x00000000
 8017150:	0802fd08 	.word	0x0802fd08

08017154 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8017154:	b410      	push	{r4}
 8017156:	7f04      	ldrb	r4, [r0, #28]
 8017158:	b11c      	cbz	r4, 8017162 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 801715a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801715e:	f7ff bee3 	b.w	8016f28 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8017162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017166:	f7ff bd6d 	b.w	8016c44 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

0801716c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 801716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017170:	4691      	mov	r9, r2
 8017172:	4602      	mov	r2, r0
 8017174:	4605      	mov	r5, r0
 8017176:	f852 0f26 	ldr.w	r0, [r2, #38]!
 801717a:	b085      	sub	sp, #20
 801717c:	4688      	mov	r8, r1
 801717e:	6851      	ldr	r1, [r2, #4]
 8017180:	469a      	mov	sl, r3
 8017182:	ab02      	add	r3, sp, #8
 8017184:	c303      	stmia	r3!, {r0, r1}
 8017186:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801718a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801718e:	2b00      	cmp	r3, #0
 8017190:	af02      	add	r7, sp, #8
 8017192:	dd08      	ble.n	80171a6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8017194:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8017198:	2c00      	cmp	r4, #0
 801719a:	dd04      	ble.n	80171a6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 801719c:	4a2e      	ldr	r2, [pc, #184]	@ (8017258 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 801719e:	7812      	ldrb	r2, [r2, #0]
 80171a0:	b122      	cbz	r2, 80171ac <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 80171a2:	2a01      	cmp	r2, #1
 80171a4:	d02d      	beq.n	8017202 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 80171a6:	b005      	add	sp, #20
 80171a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171ac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80171b0:	441c      	add	r4, r3
 80171b2:	b2a4      	uxth	r4, r4
 80171b4:	b226      	sxth	r6, r4
 80171b6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80171ba:	42b3      	cmp	r3, r6
 80171bc:	daf3      	bge.n	80171a6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80171be:	e9cd b700 	strd	fp, r7, [sp]
 80171c2:	4653      	mov	r3, sl
 80171c4:	464a      	mov	r2, r9
 80171c6:	4641      	mov	r1, r8
 80171c8:	4628      	mov	r0, r5
 80171ca:	f7ff ffc3 	bl	8017154 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80171ce:	b940      	cbnz	r0, 80171e2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 80171d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80171d4:	2b01      	cmp	r3, #1
 80171d6:	d004      	beq.n	80171e2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 80171d8:	3301      	adds	r3, #1
 80171da:	105b      	asrs	r3, r3, #1
 80171dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80171e0:	e7ed      	b.n	80171be <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 80171e2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80171e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80171ea:	4413      	add	r3, r2
 80171ec:	b29b      	uxth	r3, r3
 80171ee:	441a      	add	r2, r3
 80171f0:	b212      	sxth	r2, r2
 80171f2:	4296      	cmp	r6, r2
 80171f4:	f8ad 300a 	strh.w	r3, [sp, #10]
 80171f8:	dadd      	bge.n	80171b6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 80171fa:	1ae3      	subs	r3, r4, r3
 80171fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017200:	e7d9      	b.n	80171b6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8017202:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8017206:	441c      	add	r4, r3
 8017208:	b2a4      	uxth	r4, r4
 801720a:	b226      	sxth	r6, r4
 801720c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017210:	42b3      	cmp	r3, r6
 8017212:	dac8      	bge.n	80171a6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8017214:	e9cd b700 	strd	fp, r7, [sp]
 8017218:	4653      	mov	r3, sl
 801721a:	464a      	mov	r2, r9
 801721c:	4641      	mov	r1, r8
 801721e:	4628      	mov	r0, r5
 8017220:	f7ff ff98 	bl	8017154 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8017224:	b940      	cbnz	r0, 8017238 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8017226:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801722a:	2b01      	cmp	r3, #1
 801722c:	d004      	beq.n	8017238 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 801722e:	3301      	adds	r3, #1
 8017230:	105b      	asrs	r3, r3, #1
 8017232:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017236:	e7ed      	b.n	8017214 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 8017238:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801723c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017240:	4413      	add	r3, r2
 8017242:	b29b      	uxth	r3, r3
 8017244:	441a      	add	r2, r3
 8017246:	b212      	sxth	r2, r2
 8017248:	4296      	cmp	r6, r2
 801724a:	f8ad 3008 	strh.w	r3, [sp, #8]
 801724e:	dadd      	bge.n	801720c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8017250:	1ae3      	subs	r3, r4, r3
 8017252:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017256:	e7d9      	b.n	801720c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8017258:	2005ba78 	.word	0x2005ba78

0801725c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801725c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801725e:	6803      	ldr	r3, [r0, #0]
 8017260:	460d      	mov	r5, r1
 8017262:	4604      	mov	r4, r0
 8017264:	4601      	mov	r1, r0
 8017266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017268:	a802      	add	r0, sp, #8
 801726a:	4798      	blx	r3
 801726c:	466b      	mov	r3, sp
 801726e:	6828      	ldr	r0, [r5, #0]
 8017270:	6869      	ldr	r1, [r5, #4]
 8017272:	c303      	stmia	r3!, {r0, r1}
 8017274:	4668      	mov	r0, sp
 8017276:	4619      	mov	r1, r3
 8017278:	f7fc fec4 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801727c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801727e:	b188      	cbz	r0, 80172a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017280:	6803      	ldr	r3, [r0, #0]
 8017282:	1d21      	adds	r1, r4, #4
 8017284:	68db      	ldr	r3, [r3, #12]
 8017286:	4798      	blx	r3
 8017288:	b160      	cbz	r0, 80172a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801728a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801728e:	2b00      	cmp	r3, #0
 8017290:	dd08      	ble.n	80172a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017292:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8017296:	2d00      	cmp	r5, #0
 8017298:	dd04      	ble.n	80172a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801729a:	4a2b      	ldr	r2, [pc, #172]	@ (8017348 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801729c:	7812      	ldrb	r2, [r2, #0]
 801729e:	b11a      	cbz	r2, 80172a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80172a0:	2a01      	cmp	r2, #1
 80172a2:	d029      	beq.n	80172f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80172a4:	b004      	add	sp, #16
 80172a6:	bd70      	pop	{r4, r5, r6, pc}
 80172a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80172ac:	441d      	add	r5, r3
 80172ae:	b2ad      	uxth	r5, r5
 80172b0:	b22e      	sxth	r6, r5
 80172b2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80172b6:	42b3      	cmp	r3, r6
 80172b8:	daf4      	bge.n	80172a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80172ba:	6823      	ldr	r3, [r4, #0]
 80172bc:	4669      	mov	r1, sp
 80172be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80172c0:	4620      	mov	r0, r4
 80172c2:	4798      	blx	r3
 80172c4:	b940      	cbnz	r0, 80172d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80172c6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80172ca:	2b01      	cmp	r3, #1
 80172cc:	d004      	beq.n	80172d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80172ce:	3301      	adds	r3, #1
 80172d0:	105b      	asrs	r3, r3, #1
 80172d2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80172d6:	e7f0      	b.n	80172ba <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80172d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80172dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80172e0:	4413      	add	r3, r2
 80172e2:	b29b      	uxth	r3, r3
 80172e4:	441a      	add	r2, r3
 80172e6:	b212      	sxth	r2, r2
 80172e8:	4296      	cmp	r6, r2
 80172ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 80172ee:	dae0      	bge.n	80172b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80172f0:	1aeb      	subs	r3, r5, r3
 80172f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80172f6:	e7dc      	b.n	80172b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80172f8:	f8bd 5000 	ldrh.w	r5, [sp]
 80172fc:	441d      	add	r5, r3
 80172fe:	b2ad      	uxth	r5, r5
 8017300:	b22e      	sxth	r6, r5
 8017302:	f9bd 3000 	ldrsh.w	r3, [sp]
 8017306:	42b3      	cmp	r3, r6
 8017308:	dacc      	bge.n	80172a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801730a:	6823      	ldr	r3, [r4, #0]
 801730c:	4669      	mov	r1, sp
 801730e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017310:	4620      	mov	r0, r4
 8017312:	4798      	blx	r3
 8017314:	b940      	cbnz	r0, 8017328 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8017316:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801731a:	2b01      	cmp	r3, #1
 801731c:	d004      	beq.n	8017328 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801731e:	3301      	adds	r3, #1
 8017320:	105b      	asrs	r3, r3, #1
 8017322:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017326:	e7f0      	b.n	801730a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8017328:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801732c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017330:	4413      	add	r3, r2
 8017332:	b29b      	uxth	r3, r3
 8017334:	441a      	add	r2, r3
 8017336:	b212      	sxth	r2, r2
 8017338:	4296      	cmp	r6, r2
 801733a:	f8ad 3000 	strh.w	r3, [sp]
 801733e:	dae0      	bge.n	8017302 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8017340:	1aeb      	subs	r3, r5, r3
 8017342:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017346:	e7dc      	b.n	8017302 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8017348:	2005ba78 	.word	0x2005ba78

0801734c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801734c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801734e:	6803      	ldr	r3, [r0, #0]
 8017350:	4604      	mov	r4, r0
 8017352:	4601      	mov	r1, r0
 8017354:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017356:	4668      	mov	r0, sp
 8017358:	4798      	blx	r3
 801735a:	2100      	movs	r1, #0
 801735c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8017360:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017364:	9102      	str	r1, [sp, #8]
 8017366:	4668      	mov	r0, sp
 8017368:	a902      	add	r1, sp, #8
 801736a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801736e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017372:	f7fc fe47 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 8017376:	6823      	ldr	r3, [r4, #0]
 8017378:	4669      	mov	r1, sp
 801737a:	691b      	ldr	r3, [r3, #16]
 801737c:	4620      	mov	r0, r4
 801737e:	4798      	blx	r3
 8017380:	b004      	add	sp, #16
 8017382:	bd10      	pop	{r4, pc}

08017384 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017384:	2101      	movs	r1, #1
 8017386:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801738a:	490b      	ldr	r1, [pc, #44]	@ (80173b8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801738c:	2200      	movs	r2, #0
 801738e:	6001      	str	r1, [r0, #0]
 8017390:	21ff      	movs	r1, #255	@ 0xff
 8017392:	8082      	strh	r2, [r0, #4]
 8017394:	80c2      	strh	r2, [r0, #6]
 8017396:	8102      	strh	r2, [r0, #8]
 8017398:	8142      	strh	r2, [r0, #10]
 801739a:	8182      	strh	r2, [r0, #12]
 801739c:	81c2      	strh	r2, [r0, #14]
 801739e:	8202      	strh	r2, [r0, #16]
 80173a0:	8242      	strh	r2, [r0, #18]
 80173a2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80173a6:	61c2      	str	r2, [r0, #28]
 80173a8:	8402      	strh	r2, [r0, #32]
 80173aa:	8442      	strh	r2, [r0, #34]	@ 0x22
 80173ac:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80173b0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80173b4:	6282      	str	r2, [r0, #40]	@ 0x28
 80173b6:	4770      	bx	lr
 80173b8:	0802f634 	.word	0x0802f634

080173bc <_ZNK8touchgfx3Box12getSolidRectEv>:
 80173bc:	2300      	movs	r3, #0
 80173be:	8083      	strh	r3, [r0, #4]
 80173c0:	80c3      	strh	r3, [r0, #6]
 80173c2:	8003      	strh	r3, [r0, #0]
 80173c4:	8043      	strh	r3, [r0, #2]
 80173c6:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80173ca:	2bff      	cmp	r3, #255	@ 0xff
 80173cc:	bf01      	itttt	eq
 80173ce:	890b      	ldrheq	r3, [r1, #8]
 80173d0:	8083      	strheq	r3, [r0, #4]
 80173d2:	894b      	ldrheq	r3, [r1, #10]
 80173d4:	80c3      	strheq	r3, [r0, #6]
 80173d6:	4770      	bx	lr

080173d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80173d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80173da:	4604      	mov	r4, r0
 80173dc:	466b      	mov	r3, sp
 80173de:	6808      	ldr	r0, [r1, #0]
 80173e0:	6849      	ldr	r1, [r1, #4]
 80173e2:	c303      	stmia	r3!, {r0, r1}
 80173e4:	6823      	ldr	r3, [r4, #0]
 80173e6:	4669      	mov	r1, sp
 80173e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173ea:	4620      	mov	r0, r4
 80173ec:	4798      	blx	r3
 80173ee:	4b08      	ldr	r3, [pc, #32]	@ (8017410 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80173f6:	b10a      	cbz	r2, 80173fc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80173f8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80173fa:	b900      	cbnz	r0, 80173fe <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80173fc:	6898      	ldr	r0, [r3, #8]
 80173fe:	6803      	ldr	r3, [r0, #0]
 8017400:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017402:	6a1d      	ldr	r5, [r3, #32]
 8017404:	4669      	mov	r1, sp
 8017406:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801740a:	47a8      	blx	r5
 801740c:	b003      	add	sp, #12
 801740e:	bd30      	pop	{r4, r5, pc}
 8017410:	2005ba80 	.word	0x2005ba80

08017414 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8017414:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8017418:	b12a      	cbz	r2, 8017426 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801741a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801741e:	b112      	cbz	r2, 8017426 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017420:	6803      	ldr	r3, [r0, #0]
 8017422:	695b      	ldr	r3, [r3, #20]
 8017424:	4718      	bx	r3
 8017426:	4770      	bx	lr

08017428 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8017428:	b570      	push	{r4, r5, r6, lr}
 801742a:	4604      	mov	r4, r0
 801742c:	4615      	mov	r5, r2
 801742e:	6803      	ldr	r3, [r0, #0]
 8017430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017432:	4798      	blx	r3
 8017434:	6823      	ldr	r3, [r4, #0]
 8017436:	4629      	mov	r1, r5
 8017438:	4620      	mov	r0, r4
 801743a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801743e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017440:	4718      	bx	r3

08017442 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8017442:	b570      	push	{r4, r5, r6, lr}
 8017444:	6803      	ldr	r3, [r0, #0]
 8017446:	4604      	mov	r4, r0
 8017448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801744a:	460e      	mov	r6, r1
 801744c:	4615      	mov	r5, r2
 801744e:	4798      	blx	r3
 8017450:	8030      	strh	r0, [r6, #0]
 8017452:	6823      	ldr	r3, [r4, #0]
 8017454:	4620      	mov	r0, r4
 8017456:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017458:	4798      	blx	r3
 801745a:	8028      	strh	r0, [r5, #0]
 801745c:	bd70      	pop	{r4, r5, r6, pc}

0801745e <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801745e:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	@ 0x2a
 8017462:	4770      	bx	lr

08017464 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8017464:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8017468:	4770      	bx	lr

0801746a <_ZN8touchgfx10TiledImageD1Ev>:
 801746a:	4770      	bx	lr

0801746c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801746c:	b510      	push	{r4, lr}
 801746e:	4604      	mov	r4, r0
 8017470:	f000 f9b3 	bl	80177da <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017474:	6823      	ldr	r3, [r4, #0]
 8017476:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 801747a:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	@ 0x2a
 801747e:	4620      	mov	r0, r4
 8017480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017486:	4718      	bx	r3

08017488 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8017488:	b538      	push	{r3, r4, r5, lr}
 801748a:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 801748e:	4604      	mov	r4, r0
 8017490:	8541      	strh	r1, [r0, #42]	@ 0x2a
 8017492:	4628      	mov	r0, r5
 8017494:	f005 fb14 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017498:	b188      	cbz	r0, 80174be <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 801749a:	4628      	mov	r0, r5
 801749c:	f005 fb10 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80174a0:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	@ 0x2a
 80174a4:	fb92 f3f0 	sdiv	r3, r2, r0
 80174a8:	fb03 2010 	mls	r0, r3, r0, r2
 80174ac:	2800      	cmp	r0, #0
 80174ae:	8560      	strh	r0, [r4, #42]	@ 0x2a
 80174b0:	da05      	bge.n	80174be <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 80174b2:	4628      	mov	r0, r5
 80174b4:	f005 fb04 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80174b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80174ba:	4418      	add	r0, r3
 80174bc:	8560      	strh	r0, [r4, #42]	@ 0x2a
 80174be:	bd38      	pop	{r3, r4, r5, pc}

080174c0 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 80174c0:	b538      	push	{r3, r4, r5, lr}
 80174c2:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80174c6:	4604      	mov	r4, r0
 80174c8:	8581      	strh	r1, [r0, #44]	@ 0x2c
 80174ca:	4628      	mov	r0, r5
 80174cc:	f005 fb2c 	bl	801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80174d0:	b188      	cbz	r0, 80174f6 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 80174d2:	4628      	mov	r0, r5
 80174d4:	f005 fb28 	bl	801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80174d8:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 80174dc:	fb92 f3f0 	sdiv	r3, r2, r0
 80174e0:	fb03 2010 	mls	r0, r3, r0, r2
 80174e4:	2800      	cmp	r0, #0
 80174e6:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 80174e8:	da05      	bge.n	80174f6 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 80174ea:	4628      	mov	r0, r5
 80174ec:	f005 fb1c 	bl	801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80174f0:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80174f2:	4418      	add	r0, r3
 80174f4:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 80174f6:	bd38      	pop	{r3, r4, r5, pc}

080174f8 <_ZN8touchgfx10TiledImageD0Ev>:
 80174f8:	b510      	push	{r4, lr}
 80174fa:	4604      	mov	r4, r0
 80174fc:	2130      	movs	r1, #48	@ 0x30
 80174fe:	f014 fb30 	bl	802bb62 <_ZdlPvj>
 8017502:	4620      	mov	r0, r4
 8017504:	bd10      	pop	{r4, pc}
	...

08017508 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8017508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801750c:	f100 0b26 	add.w	fp, r0, #38	@ 0x26
 8017510:	b093      	sub	sp, #76	@ 0x4c
 8017512:	4607      	mov	r7, r0
 8017514:	4658      	mov	r0, fp
 8017516:	460e      	mov	r6, r1
 8017518:	f005 fad2 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801751c:	4681      	mov	r9, r0
 801751e:	4658      	mov	r0, fp
 8017520:	f005 fb02 	bl	801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017524:	4605      	mov	r5, r0
 8017526:	f1b9 0f00 	cmp.w	r9, #0
 801752a:	f000 80c4 	beq.w	80176b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801752e:	2800      	cmp	r0, #0
 8017530:	f000 80c1 	beq.w	80176b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017534:	2300      	movs	r3, #0
 8017536:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	a90e      	add	r1, sp, #56	@ 0x38
 801753e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017540:	4638      	mov	r0, r7
 8017542:	4798      	blx	r3
 8017544:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8017548:	f9b6 3000 	ldrsh.w	r3, [r6]
 801754c:	88b1      	ldrh	r1, [r6, #4]
 801754e:	189c      	adds	r4, r3, r2
 8017550:	440b      	add	r3, r1
 8017552:	fa02 f383 	sxtah	r3, r2, r3
 8017556:	3b01      	subs	r3, #1
 8017558:	fb93 f3f9 	sdiv	r3, r3, r9
 801755c:	fb94 f4f9 	sdiv	r4, r4, r9
 8017560:	fa1f f889 	uxth.w	r8, r9
 8017564:	fb13 f308 	smulbb	r3, r3, r8
 8017568:	fb14 f408 	smulbb	r4, r4, r8
 801756c:	b21b      	sxth	r3, r3
 801756e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8017572:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017574:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017578:	1aa4      	subs	r4, r4, r2
 801757a:	b2aa      	uxth	r2, r5
 801757c:	9205      	str	r2, [sp, #20]
 801757e:	185a      	adds	r2, r3, r1
 8017580:	fb92 f2f5 	sdiv	r2, r2, r5
 8017584:	9805      	ldr	r0, [sp, #20]
 8017586:	b2a4      	uxth	r4, r4
 8017588:	fb12 f200 	smulbb	r2, r2, r0
 801758c:	1a52      	subs	r2, r2, r1
 801758e:	b212      	sxth	r2, r2
 8017590:	920c      	str	r2, [sp, #48]	@ 0x30
 8017592:	88f2      	ldrh	r2, [r6, #6]
 8017594:	4413      	add	r3, r2
 8017596:	fa01 f383 	sxtah	r3, r1, r3
 801759a:	3b01      	subs	r3, #1
 801759c:	fb93 f3f5 	sdiv	r3, r3, r5
 80175a0:	fb13 f300 	smulbb	r3, r3, r0
 80175a4:	b21b      	sxth	r3, r3
 80175a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80175a8:	eb08 0504 	add.w	r5, r8, r4
 80175ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80175ae:	b223      	sxth	r3, r4
 80175b0:	4293      	cmp	r3, r2
 80175b2:	b2ad      	uxth	r5, r5
 80175b4:	9306      	str	r3, [sp, #24]
 80175b6:	dc7e      	bgt.n	80176b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80175b8:	b22b      	sxth	r3, r5
 80175ba:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80175be:	930a      	str	r3, [sp, #40]	@ 0x28
 80175c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80175c2:	4599      	cmp	r9, r3
 80175c4:	dd03      	ble.n	80175ce <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc6>
 80175c6:	4444      	add	r4, r8
 80175c8:	b2a4      	uxth	r4, r4
 80175ca:	4445      	add	r5, r8
 80175cc:	e7ee      	b.n	80175ac <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xa4>
 80175ce:	f9b6 c000 	ldrsh.w	ip, [r6]
 80175d2:	88b2      	ldrh	r2, [r6, #4]
 80175d4:	9806      	ldr	r0, [sp, #24]
 80175d6:	4462      	add	r2, ip
 80175d8:	b292      	uxth	r2, r2
 80175da:	b213      	sxth	r3, r2
 80175dc:	9905      	ldr	r1, [sp, #20]
 80175de:	9308      	str	r3, [sp, #32]
 80175e0:	fa1f f389 	uxth.w	r3, r9
 80175e4:	4419      	add	r1, r3
 80175e6:	9307      	str	r3, [sp, #28]
 80175e8:	4603      	mov	r3, r0
 80175ea:	9808      	ldr	r0, [sp, #32]
 80175ec:	b289      	uxth	r1, r1
 80175ee:	4283      	cmp	r3, r0
 80175f0:	fa0f fa81 	sxth.w	sl, r1
 80175f4:	da5b      	bge.n	80176ae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80175f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80175f8:	4584      	cmp	ip, r0
 80175fa:	da58      	bge.n	80176ae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80175fc:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8017600:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8017604:	4486      	add	lr, r0
 8017606:	fa1f fe8e 	uxth.w	lr, lr
 801760a:	fa0f f38e 	sxth.w	r3, lr
 801760e:	4599      	cmp	r9, r3
 8017610:	9309      	str	r3, [sp, #36]	@ 0x24
 8017612:	da4c      	bge.n	80176ae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017614:	4550      	cmp	r0, sl
 8017616:	da4a      	bge.n	80176ae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017618:	9b06      	ldr	r3, [sp, #24]
 801761a:	459c      	cmp	ip, r3
 801761c:	bfb8      	it	lt
 801761e:	469c      	movlt	ip, r3
 8017620:	9b08      	ldr	r3, [sp, #32]
 8017622:	4548      	cmp	r0, r9
 8017624:	bfb8      	it	lt
 8017626:	4648      	movlt	r0, r9
 8017628:	4699      	mov	r9, r3
 801762a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801762c:	f8ad c040 	strh.w	ip, [sp, #64]	@ 0x40
 8017630:	4599      	cmp	r9, r3
 8017632:	bfc8      	it	gt
 8017634:	462a      	movgt	r2, r5
 8017636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017638:	eba2 020c 	sub.w	r2, r2, ip
 801763c:	4553      	cmp	r3, sl
 801763e:	bfd8      	it	le
 8017640:	4671      	movle	r1, lr
 8017642:	1a09      	subs	r1, r1, r0
 8017644:	f8ad 2044 	strh.w	r2, [sp, #68]	@ 0x44
 8017648:	f8ad 1046 	strh.w	r1, [sp, #70]	@ 0x46
 801764c:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 8017650:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8017654:	9b07      	ldr	r3, [sp, #28]
 8017656:	1b12      	subs	r2, r2, r4
 8017658:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801765c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8017660:	1ad2      	subs	r2, r2, r3
 8017662:	4b16      	ldr	r3, [pc, #88]	@ (80176bc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8017664:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 8017668:	681a      	ldr	r2, [r3, #0]
 801766a:	f892 1058 	ldrb.w	r1, [r2, #88]	@ 0x58
 801766e:	b109      	cbz	r1, 8017674 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8017670:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8017672:	b900      	cbnz	r0, 8017676 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16e>
 8017674:	6890      	ldr	r0, [r2, #8]
 8017676:	f04f 0c01 	mov.w	ip, #1
 801767a:	6801      	ldr	r1, [r0, #0]
 801767c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8017680:	f8cd c008 	str.w	ip, [sp, #8]
 8017684:	9b07      	ldr	r3, [sp, #28]
 8017686:	f897 c028 	ldrb.w	ip, [r7, #40]	@ 0x28
 801768a:	4413      	add	r3, r2
 801768c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8017690:	f8cd c004 	str.w	ip, [sp, #4]
 8017694:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8017698:	f8cd c000 	str.w	ip, [sp]
 801769c:	4422      	add	r2, r4
 801769e:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80176a2:	b21b      	sxth	r3, r3
 80176a4:	b212      	sxth	r2, r2
 80176a6:	4659      	mov	r1, fp
 80176a8:	47c8      	blx	r9
 80176aa:	46d1      	mov	r9, sl
 80176ac:	e788      	b.n	80175c0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb8>
 80176ae:	2300      	movs	r3, #0
 80176b0:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 80176b4:	e7cc      	b.n	8017650 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x148>
 80176b6:	b013      	add	sp, #76	@ 0x4c
 80176b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176bc:	2005ba80 	.word	0x2005ba80

080176c0 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 80176c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176c4:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80176c8:	4606      	mov	r6, r0
 80176ca:	2bff      	cmp	r3, #255	@ 0xff
 80176cc:	4689      	mov	r9, r1
 80176ce:	d008      	beq.n	80176e2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80176d0:	2300      	movs	r3, #0
 80176d2:	8003      	strh	r3, [r0, #0]
 80176d4:	8043      	strh	r3, [r0, #2]
 80176d6:	8083      	strh	r3, [r0, #4]
 80176d8:	4630      	mov	r0, r6
 80176da:	80f3      	strh	r3, [r6, #6]
 80176dc:	b003      	add	sp, #12
 80176de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176e2:	f101 0b26 	add.w	fp, r1, #38	@ 0x26
 80176e6:	4659      	mov	r1, fp
 80176e8:	4668      	mov	r0, sp
 80176ea:	f005 fa51 	bl	801cb90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80176ee:	4658      	mov	r0, fp
 80176f0:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80176f4:	f9bd 7000 	ldrsh.w	r7, [sp]
 80176f8:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80176fc:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8017700:	f005 f9de 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017704:	4284      	cmp	r4, r0
 8017706:	d10d      	bne.n	8017724 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8017708:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801770c:	4658      	mov	r0, fp
 801770e:	f005 fa0b 	bl	801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017712:	4580      	cmp	r8, r0
 8017714:	d12a      	bne.n	801776c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 8017716:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801771a:	8037      	strh	r7, [r6, #0]
 801771c:	f8a6 a002 	strh.w	sl, [r6, #2]
 8017720:	80b5      	strh	r5, [r6, #4]
 8017722:	e7d9      	b.n	80176d8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8017724:	4658      	mov	r0, fp
 8017726:	f8b9 502a 	ldrh.w	r5, [r9, #42]	@ 0x2a
 801772a:	f005 f9c9 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801772e:	1b7f      	subs	r7, r7, r5
 8017730:	b2bd      	uxth	r5, r7
 8017732:	b22f      	sxth	r7, r5
 8017734:	2f00      	cmp	r7, #0
 8017736:	4428      	add	r0, r5
 8017738:	bfa8      	it	ge
 801773a:	4625      	movge	r5, r4
 801773c:	b2a3      	uxth	r3, r4
 801773e:	b280      	uxth	r0, r0
 8017740:	bfb8      	it	lt
 8017742:	18ed      	addlt	r5, r5, r3
 8017744:	4403      	add	r3, r0
 8017746:	b29b      	uxth	r3, r3
 8017748:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801774c:	bfb8      	it	lt
 801774e:	b22d      	sxthlt	r5, r5
 8017750:	b219      	sxth	r1, r3
 8017752:	bfbc      	itt	lt
 8017754:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8017758:	2700      	movlt	r7, #0
 801775a:	4291      	cmp	r1, r2
 801775c:	bfc4      	itt	gt
 801775e:	1a9c      	subgt	r4, r3, r2
 8017760:	b224      	sxthgt	r4, r4
 8017762:	42ac      	cmp	r4, r5
 8017764:	bfc4      	itt	gt
 8017766:	b207      	sxthgt	r7, r0
 8017768:	4625      	movgt	r5, r4
 801776a:	e7cf      	b.n	801770c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801776c:	4658      	mov	r0, fp
 801776e:	f8b9 402c 	ldrh.w	r4, [r9, #44]	@ 0x2c
 8017772:	f005 f9d9 	bl	801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017776:	ebaa 0404 	sub.w	r4, sl, r4
 801777a:	b2a4      	uxth	r4, r4
 801777c:	fa0f fa84 	sxth.w	sl, r4
 8017780:	f1ba 0f00 	cmp.w	sl, #0
 8017784:	bfa8      	it	ge
 8017786:	4643      	movge	r3, r8
 8017788:	4420      	add	r0, r4
 801778a:	fa1f f288 	uxth.w	r2, r8
 801778e:	b280      	uxth	r0, r0
 8017790:	bfb8      	it	lt
 8017792:	18a3      	addlt	r3, r4, r2
 8017794:	4402      	add	r2, r0
 8017796:	b292      	uxth	r2, r2
 8017798:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801779c:	bfb8      	it	lt
 801779e:	b21b      	sxthlt	r3, r3
 80177a0:	b214      	sxth	r4, r2
 80177a2:	bfbc      	itt	lt
 80177a4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80177a8:	f04f 0a00 	movlt.w	sl, #0
 80177ac:	428c      	cmp	r4, r1
 80177ae:	bfc4      	itt	gt
 80177b0:	eba2 0801 	subgt.w	r8, r2, r1
 80177b4:	fa0f f888 	sxthgt.w	r8, r8
 80177b8:	4598      	cmp	r8, r3
 80177ba:	bfc4      	itt	gt
 80177bc:	fa0f fa80 	sxthgt.w	sl, r0
 80177c0:	4643      	movgt	r3, r8
 80177c2:	e7aa      	b.n	801771a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

080177c4 <_ZNK8touchgfx5Image17invalidateContentEv>:
 80177c4:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 80177c8:	b12a      	cbz	r2, 80177d6 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80177ca:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80177ce:	b112      	cbz	r2, 80177d6 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80177d0:	6803      	ldr	r3, [r0, #0]
 80177d2:	695b      	ldr	r3, [r3, #20]
 80177d4:	4718      	bx	r3
 80177d6:	4770      	bx	lr

080177d8 <_ZN8touchgfx5ImageD1Ev>:
 80177d8:	4770      	bx	lr

080177da <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80177da:	b570      	push	{r4, r5, r6, lr}
 80177dc:	880b      	ldrh	r3, [r1, #0]
 80177de:	4604      	mov	r4, r0
 80177e0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80177e2:	4608      	mov	r0, r1
 80177e4:	460d      	mov	r5, r1
 80177e6:	f005 f96b 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80177ea:	4606      	mov	r6, r0
 80177ec:	4628      	mov	r0, r5
 80177ee:	f005 f99b 	bl	801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80177f2:	4605      	mov	r5, r0
 80177f4:	6823      	ldr	r3, [r4, #0]
 80177f6:	4631      	mov	r1, r6
 80177f8:	4620      	mov	r0, r4
 80177fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177fc:	4798      	blx	r3
 80177fe:	6823      	ldr	r3, [r4, #0]
 8017800:	4629      	mov	r1, r5
 8017802:	4620      	mov	r0, r4
 8017804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801780a:	4718      	bx	r3

0801780c <_ZN8touchgfx5ImageD0Ev>:
 801780c:	b510      	push	{r4, lr}
 801780e:	4604      	mov	r4, r0
 8017810:	212c      	movs	r1, #44	@ 0x2c
 8017812:	f014 f9a6 	bl	802bb62 <_ZdlPvj>
 8017816:	4620      	mov	r0, r4
 8017818:	bd10      	pop	{r4, pc}

0801781a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801781a:	b510      	push	{r4, lr}
 801781c:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8017820:	4604      	mov	r4, r0
 8017822:	2bff      	cmp	r3, #255	@ 0xff
 8017824:	d006      	beq.n	8017834 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017826:	2300      	movs	r3, #0
 8017828:	8003      	strh	r3, [r0, #0]
 801782a:	8043      	strh	r3, [r0, #2]
 801782c:	8083      	strh	r3, [r0, #4]
 801782e:	80c3      	strh	r3, [r0, #6]
 8017830:	4620      	mov	r0, r4
 8017832:	bd10      	pop	{r4, pc}
 8017834:	3126      	adds	r1, #38	@ 0x26
 8017836:	f005 f9ab 	bl	801cb90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801783a:	e7f9      	b.n	8017830 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801783c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801783c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017840:	4604      	mov	r4, r0
 8017842:	2500      	movs	r5, #0
 8017844:	f854 3b26 	ldr.w	r3, [r4], #38
 8017848:	b088      	sub	sp, #32
 801784a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801784c:	460f      	mov	r7, r1
 801784e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017852:	a904      	add	r1, sp, #16
 8017854:	4606      	mov	r6, r0
 8017856:	4798      	blx	r3
 8017858:	4620      	mov	r0, r4
 801785a:	f005 f931 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801785e:	4680      	mov	r8, r0
 8017860:	4620      	mov	r0, r4
 8017862:	f005 f961 	bl	801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017866:	9506      	str	r5, [sp, #24]
 8017868:	ad06      	add	r5, sp, #24
 801786a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801786e:	4639      	mov	r1, r7
 8017870:	4628      	mov	r0, r5
 8017872:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017876:	f7fc fbc5 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801787a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801787e:	2b00      	cmp	r3, #0
 8017880:	dd19      	ble.n	80178b6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8017882:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017886:	2b00      	cmp	r3, #0
 8017888:	dd15      	ble.n	80178b6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801788a:	4b0c      	ldr	r3, [pc, #48]	@ (80178bc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8017892:	b10a      	cbz	r2, 8017898 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8017894:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8017896:	b900      	cbnz	r0, 801789a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8017898:	6898      	ldr	r0, [r3, #8]
 801789a:	2701      	movs	r7, #1
 801789c:	6801      	ldr	r1, [r0, #0]
 801789e:	9702      	str	r7, [sp, #8]
 80178a0:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80178a4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80178a8:	e9cd 5600 	strd	r5, r6, [sp]
 80178ac:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80178b0:	688d      	ldr	r5, [r1, #8]
 80178b2:	4621      	mov	r1, r4
 80178b4:	47a8      	blx	r5
 80178b6:	b008      	add	sp, #32
 80178b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178bc:	2005ba80 	.word	0x2005ba80

080178c0 <_ZN8touchgfx7OutlineD1Ev>:
 80178c0:	4770      	bx	lr

080178c2 <_ZN8touchgfx7OutlineD0Ev>:
 80178c2:	b510      	push	{r4, lr}
 80178c4:	4604      	mov	r4, r0
 80178c6:	2130      	movs	r1, #48	@ 0x30
 80178c8:	f014 f94b 	bl	802bb62 <_ZdlPvj>
 80178cc:	4620      	mov	r0, r4
 80178ce:	bd10      	pop	{r4, pc}

080178d0 <_ZN8touchgfx7Outline5resetEv>:
 80178d0:	b510      	push	{r4, lr}
 80178d2:	4604      	mov	r4, r0
 80178d4:	f000 fe80 	bl	80185d8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80178d8:	60e0      	str	r0, [r4, #12]
 80178da:	f000 fe83 	bl	80185e4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80178de:	2200      	movs	r2, #0
 80178e0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80178e4:	68e3      	ldr	r3, [r4, #12]
 80178e6:	08c0      	lsrs	r0, r0, #3
 80178e8:	3801      	subs	r0, #1
 80178ea:	6123      	str	r3, [r4, #16]
 80178ec:	6060      	str	r0, [r4, #4]
 80178ee:	60a2      	str	r2, [r4, #8]
 80178f0:	8019      	strh	r1, [r3, #0]
 80178f2:	8059      	strh	r1, [r3, #2]
 80178f4:	809a      	strh	r2, [r3, #4]
 80178f6:	80da      	strh	r2, [r3, #6]
 80178f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80178fa:	f023 0301 	bic.w	r3, r3, #1
 80178fe:	f043 0302 	orr.w	r3, r3, #2
 8017902:	6263      	str	r3, [r4, #36]	@ 0x24
 8017904:	bd10      	pop	{r4, pc}
	...

08017908 <_ZN8touchgfx7OutlineC1Ev>:
 8017908:	4b0a      	ldr	r3, [pc, #40]	@ (8017934 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801790a:	b510      	push	{r4, lr}
 801790c:	6003      	str	r3, [r0, #0]
 801790e:	2300      	movs	r3, #0
 8017910:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8017914:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017918:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801791c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8017920:	6243      	str	r3, [r0, #36]	@ 0x24
 8017922:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017926:	4604      	mov	r4, r0
 8017928:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 801792c:	f7ff ffd0 	bl	80178d0 <_ZN8touchgfx7Outline5resetEv>
 8017930:	4620      	mov	r0, r4
 8017932:	bd10      	pop	{r4, pc}
 8017934:	0802f804 	.word	0x0802f804

08017938 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8017938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801793c:	b093      	sub	sp, #76	@ 0x4c
 801793e:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017940:	9305      	str	r3, [sp, #20]
 8017942:	f004 051f 	and.w	r5, r4, #31
 8017946:	1153      	asrs	r3, r2, #5
 8017948:	9504      	str	r5, [sp, #16]
 801794a:	1156      	asrs	r6, r2, #5
 801794c:	1165      	asrs	r5, r4, #5
 801794e:	9303      	str	r3, [sp, #12]
 8017950:	42ae      	cmp	r6, r5
 8017952:	ea4f 1364 	mov.w	r3, r4, asr #5
 8017956:	9306      	str	r3, [sp, #24]
 8017958:	f002 031f 	and.w	r3, r2, #31
 801795c:	f040 80f8 	bne.w	8017b50 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8017960:	9c04      	ldr	r4, [sp, #16]
 8017962:	9a05      	ldr	r2, [sp, #20]
 8017964:	42a3      	cmp	r3, r4
 8017966:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801796a:	6902      	ldr	r2, [r0, #16]
 801796c:	d125      	bne.n	80179ba <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 801796e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8017972:	459e      	cmp	lr, r3
 8017974:	d103      	bne.n	801797e <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 8017976:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801797a:	429e      	cmp	r6, r3
 801797c:	d035      	beq.n	80179ea <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801797e:	88d1      	ldrh	r1, [r2, #6]
 8017980:	8893      	ldrh	r3, [r2, #4]
 8017982:	430b      	orrs	r3, r1
 8017984:	d010      	beq.n	80179a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8017986:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801798a:	2b00      	cmp	r3, #0
 801798c:	db0c      	blt.n	80179a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801798e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8017990:	428b      	cmp	r3, r1
 8017992:	da09      	bge.n	80179a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8017994:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017998:	428b      	cmp	r3, r1
 801799a:	bf38      	it	cc
 801799c:	3208      	addcc	r2, #8
 801799e:	f103 0301 	add.w	r3, r3, #1
 80179a2:	bf38      	it	cc
 80179a4:	6102      	strcc	r2, [r0, #16]
 80179a6:	6083      	str	r3, [r0, #8]
 80179a8:	6903      	ldr	r3, [r0, #16]
 80179aa:	9a03      	ldr	r2, [sp, #12]
 80179ac:	f8a3 e000 	strh.w	lr, [r3]
 80179b0:	805a      	strh	r2, [r3, #2]
 80179b2:	2200      	movs	r2, #0
 80179b4:	809a      	strh	r2, [r3, #4]
 80179b6:	80da      	strh	r2, [r3, #6]
 80179b8:	e017      	b.n	80179ea <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80179ba:	9c05      	ldr	r4, [sp, #20]
 80179bc:	114e      	asrs	r6, r1, #5
 80179be:	f004 041f 	and.w	r4, r4, #31
 80179c2:	9402      	str	r4, [sp, #8]
 80179c4:	9c04      	ldr	r4, [sp, #16]
 80179c6:	4576      	cmp	r6, lr
 80179c8:	f001 0c1f 	and.w	ip, r1, #31
 80179cc:	eba4 0403 	sub.w	r4, r4, r3
 80179d0:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80179d4:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80179d8:	d10a      	bne.n	80179f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 80179da:	9b02      	ldr	r3, [sp, #8]
 80179dc:	44a0      	add	r8, r4
 80179de:	449c      	add	ip, r3
 80179e0:	fb04 a40c 	mla	r4, r4, ip, sl
 80179e4:	f8a2 8004 	strh.w	r8, [r2, #4]
 80179e8:	80d4      	strh	r4, [r2, #6]
 80179ea:	b013      	add	sp, #76	@ 0x4c
 80179ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179f0:	9d05      	ldr	r5, [sp, #20]
 80179f2:	1a69      	subs	r1, r5, r1
 80179f4:	bf5b      	ittet	pl
 80179f6:	f1cc 0520 	rsbpl	r5, ip, #32
 80179fa:	436c      	mulpl	r4, r5
 80179fc:	2500      	movmi	r5, #0
 80179fe:	2520      	movpl	r5, #32
 8017a00:	bf44      	itt	mi
 8017a02:	fb04 f40c 	mulmi.w	r4, r4, ip
 8017a06:	4249      	negmi	r1, r1
 8017a08:	9501      	str	r5, [sp, #4]
 8017a0a:	fb94 f5f1 	sdiv	r5, r4, r1
 8017a0e:	bf54      	ite	pl
 8017a10:	f04f 0901 	movpl.w	r9, #1
 8017a14:	f04f 39ff 	movmi.w	r9, #4294967295
 8017a18:	fb01 4415 	mls	r4, r1, r5, r4
 8017a1c:	9f01      	ldr	r7, [sp, #4]
 8017a1e:	2c00      	cmp	r4, #0
 8017a20:	bfb8      	it	lt
 8017a22:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8017a26:	44bc      	add	ip, r7
 8017a28:	fb05 ac0c 	mla	ip, r5, ip, sl
 8017a2c:	44a8      	add	r8, r5
 8017a2e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017a32:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017a36:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017a3a:	bfb8      	it	lt
 8017a3c:	1864      	addlt	r4, r4, r1
 8017a3e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017a42:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8017a46:	444e      	add	r6, r9
 8017a48:	ea58 0202 	orrs.w	r2, r8, r2
 8017a4c:	d011      	beq.n	8017a72 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8017a4e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017a52:	f1b8 0f00 	cmp.w	r8, #0
 8017a56:	db0c      	blt.n	8017a72 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8017a58:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8017a5a:	4590      	cmp	r8, r2
 8017a5c:	da09      	bge.n	8017a72 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8017a5e:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8017a62:	4590      	cmp	r8, r2
 8017a64:	bf3c      	itt	cc
 8017a66:	f10c 0208 	addcc.w	r2, ip, #8
 8017a6a:	6102      	strcc	r2, [r0, #16]
 8017a6c:	f108 0201 	add.w	r2, r8, #1
 8017a70:	6082      	str	r2, [r0, #8]
 8017a72:	2700      	movs	r7, #0
 8017a74:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017a78:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017a7c:	45b6      	cmp	lr, r6
 8017a7e:	f8ac 6000 	strh.w	r6, [ip]
 8017a82:	f8ac 2002 	strh.w	r2, [ip, #2]
 8017a86:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017a8a:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017a8e:	442b      	add	r3, r5
 8017a90:	d04d      	beq.n	8017b2e <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 8017a92:	9f04      	ldr	r7, [sp, #16]
 8017a94:	f04f 0a00 	mov.w	sl, #0
 8017a98:	1aff      	subs	r7, r7, r3
 8017a9a:	443d      	add	r5, r7
 8017a9c:	016d      	lsls	r5, r5, #5
 8017a9e:	fb95 f8f1 	sdiv	r8, r5, r1
 8017aa2:	fb01 5518 	mls	r5, r1, r8, r5
 8017aa6:	2d00      	cmp	r5, #0
 8017aa8:	bfb8      	it	lt
 8017aaa:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017aae:	f108 0701 	add.w	r7, r8, #1
 8017ab2:	bfb8      	it	lt
 8017ab4:	186d      	addlt	r5, r5, r1
 8017ab6:	1a64      	subs	r4, r4, r1
 8017ab8:	9703      	str	r7, [sp, #12]
 8017aba:	1964      	adds	r4, r4, r5
 8017abc:	bf48      	it	mi
 8017abe:	4647      	movmi	r7, r8
 8017ac0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017ac4:	bf58      	it	pl
 8017ac6:	9f03      	ldrpl	r7, [sp, #12]
 8017ac8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8017acc:	443b      	add	r3, r7
 8017ace:	44bb      	add	fp, r7
 8017ad0:	f8ac b004 	strh.w	fp, [ip, #4]
 8017ad4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017ad8:	bf58      	it	pl
 8017ada:	1a64      	subpl	r4, r4, r1
 8017adc:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017ae0:	f8ac b006 	strh.w	fp, [ip, #6]
 8017ae4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017ae8:	444e      	add	r6, r9
 8017aea:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017aee:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017af2:	ea5b 0707 	orrs.w	r7, fp, r7
 8017af6:	d011      	beq.n	8017b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8017af8:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8017afc:	f1bb 0f00 	cmp.w	fp, #0
 8017b00:	db0c      	blt.n	8017b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8017b02:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017b04:	45bb      	cmp	fp, r7
 8017b06:	da09      	bge.n	8017b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8017b08:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017b0c:	45bb      	cmp	fp, r7
 8017b0e:	bf3c      	itt	cc
 8017b10:	f10c 0708 	addcc.w	r7, ip, #8
 8017b14:	6107      	strcc	r7, [r0, #16]
 8017b16:	f10b 0701 	add.w	r7, fp, #1
 8017b1a:	6087      	str	r7, [r0, #8]
 8017b1c:	6907      	ldr	r7, [r0, #16]
 8017b1e:	45b6      	cmp	lr, r6
 8017b20:	803e      	strh	r6, [r7, #0]
 8017b22:	807a      	strh	r2, [r7, #2]
 8017b24:	f8a7 a004 	strh.w	sl, [r7, #4]
 8017b28:	f8a7 a006 	strh.w	sl, [r7, #6]
 8017b2c:	d1c5      	bne.n	8017aba <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8017b2e:	9a04      	ldr	r2, [sp, #16]
 8017b30:	1ad3      	subs	r3, r2, r3
 8017b32:	6902      	ldr	r2, [r0, #16]
 8017b34:	8891      	ldrh	r1, [r2, #4]
 8017b36:	88d6      	ldrh	r6, [r2, #6]
 8017b38:	4419      	add	r1, r3
 8017b3a:	8091      	strh	r1, [r2, #4]
 8017b3c:	9902      	ldr	r1, [sp, #8]
 8017b3e:	f101 0c20 	add.w	ip, r1, #32
 8017b42:	9901      	ldr	r1, [sp, #4]
 8017b44:	ebac 0c01 	sub.w	ip, ip, r1
 8017b48:	fb03 630c 	mla	r3, r3, ip, r6
 8017b4c:	80d3      	strh	r3, [r2, #6]
 8017b4e:	e74c      	b.n	80179ea <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017b50:	9d05      	ldr	r5, [sp, #20]
 8017b52:	1aa2      	subs	r2, r4, r2
 8017b54:	eba5 0501 	sub.w	r5, r5, r1
 8017b58:	9508      	str	r5, [sp, #32]
 8017b5a:	9202      	str	r2, [sp, #8]
 8017b5c:	f140 8128 	bpl.w	8017db0 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8017b60:	9a03      	ldr	r2, [sp, #12]
 8017b62:	2a00      	cmp	r2, #0
 8017b64:	f6ff af41 	blt.w	80179ea <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017b68:	f04f 34ff 	mov.w	r4, #4294967295
 8017b6c:	9a02      	ldr	r2, [sp, #8]
 8017b6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017b70:	4252      	negs	r2, r2
 8017b72:	9202      	str	r2, [sp, #8]
 8017b74:	9a06      	ldr	r2, [sp, #24]
 8017b76:	2400      	movs	r4, #0
 8017b78:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8017b7c:	9206      	str	r2, [sp, #24]
 8017b7e:	462a      	mov	r2, r5
 8017b80:	435a      	muls	r2, r3
 8017b82:	9401      	str	r4, [sp, #4]
 8017b84:	9c02      	ldr	r4, [sp, #8]
 8017b86:	9d02      	ldr	r5, [sp, #8]
 8017b88:	fb92 f4f4 	sdiv	r4, r2, r4
 8017b8c:	fb05 2214 	mls	r2, r5, r4, r2
 8017b90:	2a00      	cmp	r2, #0
 8017b92:	9207      	str	r2, [sp, #28]
 8017b94:	bfbc      	itt	lt
 8017b96:	1952      	addlt	r2, r2, r5
 8017b98:	9207      	strlt	r2, [sp, #28]
 8017b9a:	9a01      	ldr	r2, [sp, #4]
 8017b9c:	bfb8      	it	lt
 8017b9e:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8017ba2:	eb04 0901 	add.w	r9, r4, r1
 8017ba6:	429a      	cmp	r2, r3
 8017ba8:	ea4f 1669 	mov.w	r6, r9, asr #5
 8017bac:	6905      	ldr	r5, [r0, #16]
 8017bae:	f040 8112 	bne.w	8017dd6 <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8017bb2:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017bb6:	429e      	cmp	r6, r3
 8017bb8:	d104      	bne.n	8017bc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 8017bba:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017bbe:	9a03      	ldr	r2, [sp, #12]
 8017bc0:	429a      	cmp	r2, r3
 8017bc2:	d01b      	beq.n	8017bfc <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017bc4:	88ea      	ldrh	r2, [r5, #6]
 8017bc6:	88ab      	ldrh	r3, [r5, #4]
 8017bc8:	4313      	orrs	r3, r2
 8017bca:	d010      	beq.n	8017bee <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8017bcc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017bd0:	2a00      	cmp	r2, #0
 8017bd2:	db0c      	blt.n	8017bee <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8017bd4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017bd6:	429a      	cmp	r2, r3
 8017bd8:	da09      	bge.n	8017bee <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8017bda:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8017bde:	429a      	cmp	r2, r3
 8017be0:	bf38      	it	cc
 8017be2:	3508      	addcc	r5, #8
 8017be4:	f102 0201 	add.w	r2, r2, #1
 8017be8:	bf38      	it	cc
 8017bea:	6105      	strcc	r5, [r0, #16]
 8017bec:	6082      	str	r2, [r0, #8]
 8017bee:	6903      	ldr	r3, [r0, #16]
 8017bf0:	9a03      	ldr	r2, [sp, #12]
 8017bf2:	801e      	strh	r6, [r3, #0]
 8017bf4:	805a      	strh	r2, [r3, #2]
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	809a      	strh	r2, [r3, #4]
 8017bfa:	80da      	strh	r2, [r3, #6]
 8017bfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017bfe:	9a03      	ldr	r2, [sp, #12]
 8017c00:	6901      	ldr	r1, [r0, #16]
 8017c02:	441a      	add	r2, r3
 8017c04:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017c08:	42b3      	cmp	r3, r6
 8017c0a:	d103      	bne.n	8017c14 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8017c0c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d01a      	beq.n	8017c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8017c14:	88cc      	ldrh	r4, [r1, #6]
 8017c16:	888b      	ldrh	r3, [r1, #4]
 8017c18:	4323      	orrs	r3, r4
 8017c1a:	d010      	beq.n	8017c3e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8017c1c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017c20:	2c00      	cmp	r4, #0
 8017c22:	db0c      	blt.n	8017c3e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8017c24:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017c26:	429c      	cmp	r4, r3
 8017c28:	da09      	bge.n	8017c3e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8017c2a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017c2e:	429c      	cmp	r4, r3
 8017c30:	bf38      	it	cc
 8017c32:	3108      	addcc	r1, #8
 8017c34:	f104 0401 	add.w	r4, r4, #1
 8017c38:	bf38      	it	cc
 8017c3a:	6101      	strcc	r1, [r0, #16]
 8017c3c:	6084      	str	r4, [r0, #8]
 8017c3e:	2100      	movs	r1, #0
 8017c40:	6903      	ldr	r3, [r0, #16]
 8017c42:	801e      	strh	r6, [r3, #0]
 8017c44:	805a      	strh	r2, [r3, #2]
 8017c46:	8099      	strh	r1, [r3, #4]
 8017c48:	80d9      	strh	r1, [r3, #6]
 8017c4a:	9b06      	ldr	r3, [sp, #24]
 8017c4c:	4293      	cmp	r3, r2
 8017c4e:	f000 8082 	beq.w	8017d56 <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 8017c52:	9b08      	ldr	r3, [sp, #32]
 8017c54:	9902      	ldr	r1, [sp, #8]
 8017c56:	015b      	lsls	r3, r3, #5
 8017c58:	fb93 f1f1 	sdiv	r1, r3, r1
 8017c5c:	9c02      	ldr	r4, [sp, #8]
 8017c5e:	9103      	str	r1, [sp, #12]
 8017c60:	fb04 3311 	mls	r3, r4, r1, r3
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	9308      	str	r3, [sp, #32]
 8017c68:	da04      	bge.n	8017c74 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 8017c6a:	1e4b      	subs	r3, r1, #1
 8017c6c:	9303      	str	r3, [sp, #12]
 8017c6e:	9b08      	ldr	r3, [sp, #32]
 8017c70:	4423      	add	r3, r4
 8017c72:	9308      	str	r3, [sp, #32]
 8017c74:	464f      	mov	r7, r9
 8017c76:	2600      	movs	r6, #0
 8017c78:	9b07      	ldr	r3, [sp, #28]
 8017c7a:	9902      	ldr	r1, [sp, #8]
 8017c7c:	1a5b      	subs	r3, r3, r1
 8017c7e:	9307      	str	r3, [sp, #28]
 8017c80:	9b01      	ldr	r3, [sp, #4]
 8017c82:	f1c3 0320 	rsb	r3, r3, #32
 8017c86:	930e      	str	r3, [sp, #56]	@ 0x38
 8017c88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017c8a:	9b01      	ldr	r3, [sp, #4]
 8017c8c:	1a5b      	subs	r3, r3, r1
 8017c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017c90:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8017c94:	185b      	adds	r3, r3, r1
 8017c96:	bf58      	it	pl
 8017c98:	9902      	ldrpl	r1, [sp, #8]
 8017c9a:	9307      	str	r3, [sp, #28]
 8017c9c:	bf5d      	ittte	pl
 8017c9e:	1a5b      	subpl	r3, r3, r1
 8017ca0:	9307      	strpl	r3, [sp, #28]
 8017ca2:	9b03      	ldrpl	r3, [sp, #12]
 8017ca4:	9903      	ldrmi	r1, [sp, #12]
 8017ca6:	bf58      	it	pl
 8017ca8:	1c59      	addpl	r1, r3, #1
 8017caa:	4489      	add	r9, r1
 8017cac:	2a00      	cmp	r2, #0
 8017cae:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8017cb2:	db2e      	blt.n	8017d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017cb4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017cb6:	4293      	cmp	r3, r2
 8017cb8:	dd2b      	ble.n	8017d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017cba:	9c01      	ldr	r4, [sp, #4]
 8017cbc:	6905      	ldr	r5, [r0, #16]
 8017cbe:	46a0      	mov	r8, r4
 8017cc0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8017cc2:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8017cc6:	45a0      	cmp	r8, r4
 8017cc8:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8017ccc:	f040 8150 	bne.w	8017f70 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 8017cd0:	f9b5 1000 	ldrsh.w	r1, [r5]
 8017cd4:	4551      	cmp	r1, sl
 8017cd6:	d103      	bne.n	8017ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 8017cd8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8017cdc:	4291      	cmp	r1, r2
 8017cde:	d018      	beq.n	8017d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017ce0:	ea5c 010e 	orrs.w	r1, ip, lr
 8017ce4:	d00f      	beq.n	8017d06 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017ce6:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8017cea:	2900      	cmp	r1, #0
 8017cec:	db0b      	blt.n	8017d06 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017cee:	428b      	cmp	r3, r1
 8017cf0:	dd09      	ble.n	8017d06 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017cf2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8017cf6:	4299      	cmp	r1, r3
 8017cf8:	bf38      	it	cc
 8017cfa:	3508      	addcc	r5, #8
 8017cfc:	f101 0101 	add.w	r1, r1, #1
 8017d00:	bf38      	it	cc
 8017d02:	6105      	strcc	r5, [r0, #16]
 8017d04:	6081      	str	r1, [r0, #8]
 8017d06:	6903      	ldr	r3, [r0, #16]
 8017d08:	f8a3 a000 	strh.w	sl, [r3]
 8017d0c:	805a      	strh	r2, [r3, #2]
 8017d0e:	809e      	strh	r6, [r3, #4]
 8017d10:	80de      	strh	r6, [r3, #6]
 8017d12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017d14:	6901      	ldr	r1, [r0, #16]
 8017d16:	441a      	add	r2, r3
 8017d18:	88cc      	ldrh	r4, [r1, #6]
 8017d1a:	888b      	ldrh	r3, [r1, #4]
 8017d1c:	4323      	orrs	r3, r4
 8017d1e:	d010      	beq.n	8017d42 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017d20:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017d24:	2c00      	cmp	r4, #0
 8017d26:	db0c      	blt.n	8017d42 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017d28:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017d2a:	429c      	cmp	r4, r3
 8017d2c:	da09      	bge.n	8017d42 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017d2e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017d32:	429c      	cmp	r4, r3
 8017d34:	bf38      	it	cc
 8017d36:	3108      	addcc	r1, #8
 8017d38:	f104 0401 	add.w	r4, r4, #1
 8017d3c:	bf38      	it	cc
 8017d3e:	6101      	strcc	r1, [r0, #16]
 8017d40:	6084      	str	r4, [r0, #8]
 8017d42:	6903      	ldr	r3, [r0, #16]
 8017d44:	464f      	mov	r7, r9
 8017d46:	f8a3 a000 	strh.w	sl, [r3]
 8017d4a:	805a      	strh	r2, [r3, #2]
 8017d4c:	809e      	strh	r6, [r3, #4]
 8017d4e:	80de      	strh	r6, [r3, #6]
 8017d50:	9b06      	ldr	r3, [sp, #24]
 8017d52:	4293      	cmp	r3, r2
 8017d54:	d19c      	bne.n	8017c90 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 8017d56:	9b01      	ldr	r3, [sp, #4]
 8017d58:	6907      	ldr	r7, [r0, #16]
 8017d5a:	f1c3 0620 	rsb	r6, r3, #32
 8017d5e:	9b05      	ldr	r3, [sp, #20]
 8017d60:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8017d64:	9b04      	ldr	r3, [sp, #16]
 8017d66:	429e      	cmp	r6, r3
 8017d68:	f040 81cc 	bne.w	8018104 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8017d6c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017d70:	459e      	cmp	lr, r3
 8017d72:	d104      	bne.n	8017d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8017d74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017d78:	429a      	cmp	r2, r3
 8017d7a:	f43f ae36 	beq.w	80179ea <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017d7e:	88f9      	ldrh	r1, [r7, #6]
 8017d80:	88bb      	ldrh	r3, [r7, #4]
 8017d82:	430b      	orrs	r3, r1
 8017d84:	d010      	beq.n	8017da8 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017d86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	db0c      	blt.n	8017da8 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017d8e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8017d90:	428b      	cmp	r3, r1
 8017d92:	da09      	bge.n	8017da8 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017d94:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017d98:	428b      	cmp	r3, r1
 8017d9a:	bf38      	it	cc
 8017d9c:	3708      	addcc	r7, #8
 8017d9e:	f103 0301 	add.w	r3, r3, #1
 8017da2:	bf38      	it	cc
 8017da4:	6107      	strcc	r7, [r0, #16]
 8017da6:	6083      	str	r3, [r0, #8]
 8017da8:	6903      	ldr	r3, [r0, #16]
 8017daa:	f8a3 e000 	strh.w	lr, [r3]
 8017dae:	e5ff      	b.n	80179b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8017db0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8017db2:	9c03      	ldr	r4, [sp, #12]
 8017db4:	42a2      	cmp	r2, r4
 8017db6:	f6ff ae18 	blt.w	80179ea <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017dba:	9c06      	ldr	r4, [sp, #24]
 8017dbc:	42a2      	cmp	r2, r4
 8017dbe:	bfb8      	it	lt
 8017dc0:	3201      	addlt	r2, #1
 8017dc2:	9c08      	ldr	r4, [sp, #32]
 8017dc4:	bfb8      	it	lt
 8017dc6:	9206      	strlt	r2, [sp, #24]
 8017dc8:	f1c3 0220 	rsb	r2, r3, #32
 8017dcc:	4362      	muls	r2, r4
 8017dce:	2401      	movs	r4, #1
 8017dd0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017dd2:	2420      	movs	r4, #32
 8017dd4:	e6d5      	b.n	8017b82 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 8017dd6:	f009 021f 	and.w	r2, r9, #31
 8017dda:	ea4f 1861 	mov.w	r8, r1, asr #5
 8017dde:	920c      	str	r2, [sp, #48]	@ 0x30
 8017de0:	9a01      	ldr	r2, [sp, #4]
 8017de2:	45b0      	cmp	r8, r6
 8017de4:	f001 011f 	and.w	r1, r1, #31
 8017de8:	eba2 0203 	sub.w	r2, r2, r3
 8017dec:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8017df0:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8017df4:	d108      	bne.n	8017e08 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 8017df6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017df8:	4496      	add	lr, r2
 8017dfa:	4419      	add	r1, r3
 8017dfc:	fb02 a101 	mla	r1, r2, r1, sl
 8017e00:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017e04:	80e9      	strh	r1, [r5, #6]
 8017e06:	e6f9      	b.n	8017bfc <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017e08:	2c00      	cmp	r4, #0
 8017e0a:	f2c0 80aa 	blt.w	8017f62 <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 8017e0e:	2701      	movs	r7, #1
 8017e10:	970a      	str	r7, [sp, #40]	@ 0x28
 8017e12:	2720      	movs	r7, #32
 8017e14:	f1c1 0c20 	rsb	ip, r1, #32
 8017e18:	fb02 f20c 	mul.w	r2, r2, ip
 8017e1c:	fb92 fcf4 	sdiv	ip, r2, r4
 8017e20:	fb04 221c 	mls	r2, r4, ip, r2
 8017e24:	9709      	str	r7, [sp, #36]	@ 0x24
 8017e26:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8017e28:	2a00      	cmp	r2, #0
 8017e2a:	bfb8      	it	lt
 8017e2c:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8017e30:	4439      	add	r1, r7
 8017e32:	fb0c a101 	mla	r1, ip, r1, sl
 8017e36:	44e6      	add	lr, ip
 8017e38:	80e9      	strh	r1, [r5, #6]
 8017e3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e3c:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017e40:	eb08 0501 	add.w	r5, r8, r1
 8017e44:	6901      	ldr	r1, [r0, #16]
 8017e46:	bfb8      	it	lt
 8017e48:	1912      	addlt	r2, r2, r4
 8017e4a:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8017e4e:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8017e52:	ea58 070e 	orrs.w	r7, r8, lr
 8017e56:	d010      	beq.n	8017e7a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017e58:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8017e5c:	f1be 0f00 	cmp.w	lr, #0
 8017e60:	db0b      	blt.n	8017e7a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017e62:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017e64:	45be      	cmp	lr, r7
 8017e66:	da08      	bge.n	8017e7a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017e68:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8017e6c:	45be      	cmp	lr, r7
 8017e6e:	bf3c      	itt	cc
 8017e70:	3108      	addcc	r1, #8
 8017e72:	6101      	strcc	r1, [r0, #16]
 8017e74:	f10e 0101 	add.w	r1, lr, #1
 8017e78:	6081      	str	r1, [r0, #8]
 8017e7a:	f04f 0e00 	mov.w	lr, #0
 8017e7e:	6901      	ldr	r1, [r0, #16]
 8017e80:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017e84:	42ae      	cmp	r6, r5
 8017e86:	800d      	strh	r5, [r1, #0]
 8017e88:	f8a1 8002 	strh.w	r8, [r1, #2]
 8017e8c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8017e90:	f8a1 e006 	strh.w	lr, [r1, #6]
 8017e94:	4463      	add	r3, ip
 8017e96:	d055      	beq.n	8017f44 <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 8017e98:	9901      	ldr	r1, [sp, #4]
 8017e9a:	1b12      	subs	r2, r2, r4
 8017e9c:	1ac9      	subs	r1, r1, r3
 8017e9e:	4461      	add	r1, ip
 8017ea0:	0149      	lsls	r1, r1, #5
 8017ea2:	fb91 fef4 	sdiv	lr, r1, r4
 8017ea6:	fb04 111e 	mls	r1, r4, lr, r1
 8017eaa:	2900      	cmp	r1, #0
 8017eac:	bfb8      	it	lt
 8017eae:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8017eb2:	f10e 0701 	add.w	r7, lr, #1
 8017eb6:	bfb8      	it	lt
 8017eb8:	1909      	addlt	r1, r1, r4
 8017eba:	970d      	str	r7, [sp, #52]	@ 0x34
 8017ebc:	1852      	adds	r2, r2, r1
 8017ebe:	bf48      	it	mi
 8017ec0:	46f4      	movmi	ip, lr
 8017ec2:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8017ec6:	bf58      	it	pl
 8017ec8:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8017ecc:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8017ed0:	4463      	add	r3, ip
 8017ed2:	44e3      	add	fp, ip
 8017ed4:	f8aa b004 	strh.w	fp, [sl, #4]
 8017ed8:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8017edc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8017ede:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8017ee2:	f8aa b006 	strh.w	fp, [sl, #6]
 8017ee6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017eea:	bf58      	it	pl
 8017eec:	1b12      	subpl	r2, r2, r4
 8017eee:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017ef2:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8017ef6:	443d      	add	r5, r7
 8017ef8:	ea5b 070a 	orrs.w	r7, fp, sl
 8017efc:	d014      	beq.n	8017f28 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8017efe:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8017f02:	f1ba 0f00 	cmp.w	sl, #0
 8017f06:	db0f      	blt.n	8017f28 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8017f08:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017f0a:	45ba      	cmp	sl, r7
 8017f0c:	da0c      	bge.n	8017f28 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8017f0e:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8017f12:	45ba      	cmp	sl, r7
 8017f14:	bf38      	it	cc
 8017f16:	f10c 0c08 	addcc.w	ip, ip, #8
 8017f1a:	f10a 0a01 	add.w	sl, sl, #1
 8017f1e:	bf38      	it	cc
 8017f20:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8017f24:	f8c0 a008 	str.w	sl, [r0, #8]
 8017f28:	f04f 0700 	mov.w	r7, #0
 8017f2c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017f30:	42ae      	cmp	r6, r5
 8017f32:	f8ac 5000 	strh.w	r5, [ip]
 8017f36:	f8ac 8002 	strh.w	r8, [ip, #2]
 8017f3a:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017f3e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017f42:	d1bb      	bne.n	8017ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 8017f44:	6904      	ldr	r4, [r0, #16]
 8017f46:	9a01      	ldr	r2, [sp, #4]
 8017f48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017f4a:	1ad3      	subs	r3, r2, r3
 8017f4c:	88a2      	ldrh	r2, [r4, #4]
 8017f4e:	3120      	adds	r1, #32
 8017f50:	441a      	add	r2, r3
 8017f52:	80a2      	strh	r2, [r4, #4]
 8017f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f56:	1a89      	subs	r1, r1, r2
 8017f58:	88e2      	ldrh	r2, [r4, #6]
 8017f5a:	fb03 2301 	mla	r3, r3, r1, r2
 8017f5e:	80e3      	strh	r3, [r4, #6]
 8017f60:	e64c      	b.n	8017bfc <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017f62:	f04f 37ff 	mov.w	r7, #4294967295
 8017f66:	434a      	muls	r2, r1
 8017f68:	970a      	str	r7, [sp, #40]	@ 0x28
 8017f6a:	4264      	negs	r4, r4
 8017f6c:	2700      	movs	r7, #0
 8017f6e:	e755      	b.n	8017e1c <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8017f70:	ea4f 1867 	mov.w	r8, r7, asr #5
 8017f74:	f009 031f 	and.w	r3, r9, #31
 8017f78:	45d0      	cmp	r8, sl
 8017f7a:	f007 071f 	and.w	r7, r7, #31
 8017f7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017f80:	fa1f fc8c 	uxth.w	ip, ip
 8017f84:	fa1f fe8e 	uxth.w	lr, lr
 8017f88:	d10a      	bne.n	8017fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 8017f8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017f8c:	449c      	add	ip, r3
 8017f8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f90:	f8a5 c004 	strh.w	ip, [r5, #4]
 8017f94:	441f      	add	r7, r3
 8017f96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017f98:	fb03 e707 	mla	r7, r3, r7, lr
 8017f9c:	80ef      	strh	r7, [r5, #6]
 8017f9e:	e6b8      	b.n	8017d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017fa0:	2900      	cmp	r1, #0
 8017fa2:	f2c0 80a7 	blt.w	80180f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 8017fa6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017fa8:	f1c7 0320 	rsb	r3, r7, #32
 8017fac:	4363      	muls	r3, r4
 8017fae:	2401      	movs	r4, #1
 8017fb0:	940d      	str	r4, [sp, #52]	@ 0x34
 8017fb2:	2420      	movs	r4, #32
 8017fb4:	940c      	str	r4, [sp, #48]	@ 0x30
 8017fb6:	fb93 f4f1 	sdiv	r4, r3, r1
 8017fba:	fb01 3b14 	mls	fp, r1, r4, r3
 8017fbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017fc0:	f1bb 0f00 	cmp.w	fp, #0
 8017fc4:	bfb8      	it	lt
 8017fc6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8017fca:	441f      	add	r7, r3
 8017fcc:	fb04 e707 	mla	r7, r4, r7, lr
 8017fd0:	44a4      	add	ip, r4
 8017fd2:	f8a5 c004 	strh.w	ip, [r5, #4]
 8017fd6:	80ef      	strh	r7, [r5, #6]
 8017fd8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017fdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017fde:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8017fe2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017fe6:	bfb8      	it	lt
 8017fe8:	448b      	addlt	fp, r1
 8017fea:	eb08 0503 	add.w	r5, r8, r3
 8017fee:	ea5e 0307 	orrs.w	r3, lr, r7
 8017ff2:	d011      	beq.n	8018018 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8017ff4:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8017ff8:	f1be 0f00 	cmp.w	lr, #0
 8017ffc:	db0c      	blt.n	8018018 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8017ffe:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018000:	45be      	cmp	lr, r7
 8018002:	da09      	bge.n	8018018 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8018004:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018008:	45be      	cmp	lr, r7
 801800a:	bf3c      	itt	cc
 801800c:	f10c 0708 	addcc.w	r7, ip, #8
 8018010:	6107      	strcc	r7, [r0, #16]
 8018012:	f10e 0701 	add.w	r7, lr, #1
 8018016:	6087      	str	r7, [r0, #8]
 8018018:	6907      	ldr	r7, [r0, #16]
 801801a:	b213      	sxth	r3, r2
 801801c:	9310      	str	r3, [sp, #64]	@ 0x40
 801801e:	807b      	strh	r3, [r7, #2]
 8018020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018022:	4555      	cmp	r5, sl
 8018024:	803d      	strh	r5, [r7, #0]
 8018026:	80be      	strh	r6, [r7, #4]
 8018028:	80fe      	strh	r6, [r7, #6]
 801802a:	eb04 0c03 	add.w	ip, r4, r3
 801802e:	d050      	beq.n	80180d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8018030:	9b01      	ldr	r3, [sp, #4]
 8018032:	eba3 070c 	sub.w	r7, r3, ip
 8018036:	443c      	add	r4, r7
 8018038:	0164      	lsls	r4, r4, #5
 801803a:	fb94 f8f1 	sdiv	r8, r4, r1
 801803e:	fb01 4418 	mls	r4, r1, r8, r4
 8018042:	2c00      	cmp	r4, #0
 8018044:	bfb8      	it	lt
 8018046:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801804a:	ebab 0301 	sub.w	r3, fp, r1
 801804e:	f108 0701 	add.w	r7, r8, #1
 8018052:	bfb8      	it	lt
 8018054:	1864      	addlt	r4, r4, r1
 8018056:	9309      	str	r3, [sp, #36]	@ 0x24
 8018058:	9711      	str	r7, [sp, #68]	@ 0x44
 801805a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801805c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018060:	191b      	adds	r3, r3, r4
 8018062:	bf4c      	ite	mi
 8018064:	4647      	movmi	r7, r8
 8018066:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8018068:	f8be b004 	ldrh.w	fp, [lr, #4]
 801806c:	44bc      	add	ip, r7
 801806e:	44bb      	add	fp, r7
 8018070:	f8ae b004 	strh.w	fp, [lr, #4]
 8018074:	f8be b006 	ldrh.w	fp, [lr, #6]
 8018078:	9309      	str	r3, [sp, #36]	@ 0x24
 801807a:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801807e:	f8ae b006 	strh.w	fp, [lr, #6]
 8018082:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018084:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018088:	443d      	add	r5, r7
 801808a:	f8be b006 	ldrh.w	fp, [lr, #6]
 801808e:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8018092:	bf5c      	itt	pl
 8018094:	1a5b      	subpl	r3, r3, r1
 8018096:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8018098:	ea5b 0307 	orrs.w	r3, fp, r7
 801809c:	d011      	beq.n	80180c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801809e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80180a2:	f1bb 0f00 	cmp.w	fp, #0
 80180a6:	db0c      	blt.n	80180c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80180a8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80180aa:	45bb      	cmp	fp, r7
 80180ac:	da09      	bge.n	80180c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80180ae:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80180b2:	45bb      	cmp	fp, r7
 80180b4:	bf3c      	itt	cc
 80180b6:	f10e 0708 	addcc.w	r7, lr, #8
 80180ba:	6107      	strcc	r7, [r0, #16]
 80180bc:	f10b 0701 	add.w	r7, fp, #1
 80180c0:	6087      	str	r7, [r0, #8]
 80180c2:	6907      	ldr	r7, [r0, #16]
 80180c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80180c6:	4555      	cmp	r5, sl
 80180c8:	803d      	strh	r5, [r7, #0]
 80180ca:	807b      	strh	r3, [r7, #2]
 80180cc:	80be      	strh	r6, [r7, #4]
 80180ce:	80fe      	strh	r6, [r7, #6]
 80180d0:	d1c3      	bne.n	801805a <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 80180d2:	9b01      	ldr	r3, [sp, #4]
 80180d4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80180d6:	eba3 0c0c 	sub.w	ip, r3, ip
 80180da:	6903      	ldr	r3, [r0, #16]
 80180dc:	3720      	adds	r7, #32
 80180de:	8899      	ldrh	r1, [r3, #4]
 80180e0:	4461      	add	r1, ip
 80180e2:	8099      	strh	r1, [r3, #4]
 80180e4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80180e6:	1a7f      	subs	r7, r7, r1
 80180e8:	88d9      	ldrh	r1, [r3, #6]
 80180ea:	fb0c 1c07 	mla	ip, ip, r7, r1
 80180ee:	f8a3 c006 	strh.w	ip, [r3, #6]
 80180f2:	e60e      	b.n	8017d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80180f4:	f04f 34ff 	mov.w	r4, #4294967295
 80180f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80180fa:	940d      	str	r4, [sp, #52]	@ 0x34
 80180fc:	437b      	muls	r3, r7
 80180fe:	4249      	negs	r1, r1
 8018100:	2400      	movs	r4, #0
 8018102:	e757      	b.n	8017fb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8018104:	9905      	ldr	r1, [sp, #20]
 8018106:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801810a:	f001 011f 	and.w	r1, r1, #31
 801810e:	9102      	str	r1, [sp, #8]
 8018110:	9904      	ldr	r1, [sp, #16]
 8018112:	45f3      	cmp	fp, lr
 8018114:	f009 0c1f 	and.w	ip, r9, #31
 8018118:	eba1 0406 	sub.w	r4, r1, r6
 801811c:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8018120:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8018124:	d108      	bne.n	8018138 <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 8018126:	9b02      	ldr	r3, [sp, #8]
 8018128:	44a0      	add	r8, r4
 801812a:	449c      	add	ip, r3
 801812c:	fb04 a40c 	mla	r4, r4, ip, sl
 8018130:	f8a7 8004 	strh.w	r8, [r7, #4]
 8018134:	80fc      	strh	r4, [r7, #6]
 8018136:	e458      	b.n	80179ea <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8018138:	9905      	ldr	r1, [sp, #20]
 801813a:	ebb1 0109 	subs.w	r1, r1, r9
 801813e:	bf5b      	ittet	pl
 8018140:	f1cc 0520 	rsbpl	r5, ip, #32
 8018144:	436c      	mulpl	r4, r5
 8018146:	2500      	movmi	r5, #0
 8018148:	2520      	movpl	r5, #32
 801814a:	bf44      	itt	mi
 801814c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8018150:	4249      	negmi	r1, r1
 8018152:	9501      	str	r5, [sp, #4]
 8018154:	fb94 f5f1 	sdiv	r5, r4, r1
 8018158:	bf54      	ite	pl
 801815a:	f04f 0901 	movpl.w	r9, #1
 801815e:	f04f 39ff 	movmi.w	r9, #4294967295
 8018162:	fb01 4415 	mls	r4, r1, r5, r4
 8018166:	9b01      	ldr	r3, [sp, #4]
 8018168:	2c00      	cmp	r4, #0
 801816a:	bfb8      	it	lt
 801816c:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8018170:	449c      	add	ip, r3
 8018172:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018176:	44a8      	add	r8, r5
 8018178:	f8a7 8004 	strh.w	r8, [r7, #4]
 801817c:	f8a7 c006 	strh.w	ip, [r7, #6]
 8018180:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018184:	bfb8      	it	lt
 8018186:	1864      	addlt	r4, r4, r1
 8018188:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801818c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018190:	eb0b 0309 	add.w	r3, fp, r9
 8018194:	ea58 0707 	orrs.w	r7, r8, r7
 8018198:	d011      	beq.n	80181be <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801819a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801819e:	f1b8 0f00 	cmp.w	r8, #0
 80181a2:	db0c      	blt.n	80181be <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80181a4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80181a6:	45b8      	cmp	r8, r7
 80181a8:	da09      	bge.n	80181be <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80181aa:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80181ae:	45b8      	cmp	r8, r7
 80181b0:	bf3c      	itt	cc
 80181b2:	f10c 0708 	addcc.w	r7, ip, #8
 80181b6:	6107      	strcc	r7, [r0, #16]
 80181b8:	f108 0701 	add.w	r7, r8, #1
 80181bc:	6087      	str	r7, [r0, #8]
 80181be:	f04f 0c00 	mov.w	ip, #0
 80181c2:	6907      	ldr	r7, [r0, #16]
 80181c4:	b212      	sxth	r2, r2
 80181c6:	459e      	cmp	lr, r3
 80181c8:	803b      	strh	r3, [r7, #0]
 80181ca:	807a      	strh	r2, [r7, #2]
 80181cc:	f8a7 c004 	strh.w	ip, [r7, #4]
 80181d0:	f8a7 c006 	strh.w	ip, [r7, #6]
 80181d4:	442e      	add	r6, r5
 80181d6:	d04d      	beq.n	8018274 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 80181d8:	9f04      	ldr	r7, [sp, #16]
 80181da:	f04f 0a00 	mov.w	sl, #0
 80181de:	1bbf      	subs	r7, r7, r6
 80181e0:	443d      	add	r5, r7
 80181e2:	016d      	lsls	r5, r5, #5
 80181e4:	fb95 f8f1 	sdiv	r8, r5, r1
 80181e8:	fb01 5518 	mls	r5, r1, r8, r5
 80181ec:	4565      	cmp	r5, ip
 80181ee:	bfb8      	it	lt
 80181f0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80181f4:	f108 0701 	add.w	r7, r8, #1
 80181f8:	bfb8      	it	lt
 80181fa:	186d      	addlt	r5, r5, r1
 80181fc:	1a64      	subs	r4, r4, r1
 80181fe:	9703      	str	r7, [sp, #12]
 8018200:	1964      	adds	r4, r4, r5
 8018202:	bf48      	it	mi
 8018204:	4647      	movmi	r7, r8
 8018206:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801820a:	bf58      	it	pl
 801820c:	9f03      	ldrpl	r7, [sp, #12]
 801820e:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018212:	443e      	add	r6, r7
 8018214:	44bb      	add	fp, r7
 8018216:	f8ac b004 	strh.w	fp, [ip, #4]
 801821a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801821e:	bf58      	it	pl
 8018220:	1a64      	subpl	r4, r4, r1
 8018222:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018226:	f8ac b006 	strh.w	fp, [ip, #6]
 801822a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801822e:	444b      	add	r3, r9
 8018230:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018234:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018238:	ea5b 0707 	orrs.w	r7, fp, r7
 801823c:	d011      	beq.n	8018262 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801823e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018242:	f1bb 0f00 	cmp.w	fp, #0
 8018246:	db0c      	blt.n	8018262 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8018248:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801824a:	45bb      	cmp	fp, r7
 801824c:	da09      	bge.n	8018262 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801824e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018252:	45bb      	cmp	fp, r7
 8018254:	bf3c      	itt	cc
 8018256:	f10c 0708 	addcc.w	r7, ip, #8
 801825a:	6107      	strcc	r7, [r0, #16]
 801825c:	f10b 0701 	add.w	r7, fp, #1
 8018260:	6087      	str	r7, [r0, #8]
 8018262:	6907      	ldr	r7, [r0, #16]
 8018264:	459e      	cmp	lr, r3
 8018266:	803b      	strh	r3, [r7, #0]
 8018268:	807a      	strh	r2, [r7, #2]
 801826a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801826e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018272:	d1c5      	bne.n	8018200 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 8018274:	9b04      	ldr	r3, [sp, #16]
 8018276:	1b9e      	subs	r6, r3, r6
 8018278:	6903      	ldr	r3, [r0, #16]
 801827a:	889a      	ldrh	r2, [r3, #4]
 801827c:	4432      	add	r2, r6
 801827e:	809a      	strh	r2, [r3, #4]
 8018280:	9a02      	ldr	r2, [sp, #8]
 8018282:	f102 0c20 	add.w	ip, r2, #32
 8018286:	9a01      	ldr	r2, [sp, #4]
 8018288:	ebac 0c02 	sub.w	ip, ip, r2
 801828c:	88da      	ldrh	r2, [r3, #6]
 801828e:	fb06 260c 	mla	r6, r6, ip, r2
 8018292:	80de      	strh	r6, [r3, #6]
 8018294:	f7ff bba9 	b.w	80179ea <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

08018298 <_ZN8touchgfx7Outline6lineToEii>:
 8018298:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801829a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801829c:	079b      	lsls	r3, r3, #30
 801829e:	460e      	mov	r6, r1
 80182a0:	4615      	mov	r5, r2
 80182a2:	d511      	bpl.n	80182c8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80182a4:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80182a8:	ea86 0701 	eor.w	r7, r6, r1
 80182ac:	ea85 0302 	eor.w	r3, r5, r2
 80182b0:	433b      	orrs	r3, r7
 80182b2:	d009      	beq.n	80182c8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80182b4:	4633      	mov	r3, r6
 80182b6:	9500      	str	r5, [sp, #0]
 80182b8:	f7ff fb3e 	bl	8017938 <_ZN8touchgfx7Outline10renderLineEiiii>
 80182bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80182be:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80182c2:	f043 0301 	orr.w	r3, r3, #1
 80182c6:	6243      	str	r3, [r0, #36]	@ 0x24
 80182c8:	b003      	add	sp, #12
 80182ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080182cc <_ZN8touchgfx7Outline6moveToEii>:
 80182cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182ce:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80182d0:	4615      	mov	r5, r2
 80182d2:	079a      	lsls	r2, r3, #30
 80182d4:	4604      	mov	r4, r0
 80182d6:	460e      	mov	r6, r1
 80182d8:	d401      	bmi.n	80182de <_ZN8touchgfx7Outline6moveToEii+0x12>
 80182da:	f7ff faf9 	bl	80178d0 <_ZN8touchgfx7Outline5resetEv>
 80182de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80182e0:	07db      	lsls	r3, r3, #31
 80182e2:	d504      	bpl.n	80182ee <_ZN8touchgfx7Outline6moveToEii+0x22>
 80182e4:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80182e8:	4620      	mov	r0, r4
 80182ea:	f7ff ffd5 	bl	8018298 <_ZN8touchgfx7Outline6lineToEii>
 80182ee:	6923      	ldr	r3, [r4, #16]
 80182f0:	1170      	asrs	r0, r6, #5
 80182f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80182f6:	1169      	asrs	r1, r5, #5
 80182f8:	4290      	cmp	r0, r2
 80182fa:	d103      	bne.n	8018304 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80182fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018300:	4291      	cmp	r1, r2
 8018302:	d01a      	beq.n	801833a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8018304:	88df      	ldrh	r7, [r3, #6]
 8018306:	889a      	ldrh	r2, [r3, #4]
 8018308:	433a      	orrs	r2, r7
 801830a:	d010      	beq.n	801832e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801830c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018310:	2a00      	cmp	r2, #0
 8018312:	db0c      	blt.n	801832e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018314:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8018316:	42ba      	cmp	r2, r7
 8018318:	da09      	bge.n	801832e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801831a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801831e:	42ba      	cmp	r2, r7
 8018320:	bf38      	it	cc
 8018322:	3308      	addcc	r3, #8
 8018324:	f102 0201 	add.w	r2, r2, #1
 8018328:	bf38      	it	cc
 801832a:	6123      	strcc	r3, [r4, #16]
 801832c:	60a2      	str	r2, [r4, #8]
 801832e:	2200      	movs	r2, #0
 8018330:	6923      	ldr	r3, [r4, #16]
 8018332:	8018      	strh	r0, [r3, #0]
 8018334:	8059      	strh	r1, [r3, #2]
 8018336:	809a      	strh	r2, [r3, #4]
 8018338:	80da      	strh	r2, [r3, #6]
 801833a:	6166      	str	r6, [r4, #20]
 801833c:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018340:	6225      	str	r5, [r4, #32]
 8018342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018344 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8018344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018348:	b0d0      	sub	sp, #320	@ 0x140
 801834a:	466c      	mov	r4, sp
 801834c:	4627      	mov	r7, r4
 801834e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8018352:	1a0d      	subs	r5, r1, r0
 8018354:	2d48      	cmp	r5, #72	@ 0x48
 8018356:	f100 0308 	add.w	r3, r0, #8
 801835a:	f340 80d5 	ble.w	8018508 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801835e:	112d      	asrs	r5, r5, #4
 8018360:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8018364:	6816      	ldr	r6, [r2, #0]
 8018366:	f9b0 9000 	ldrsh.w	r9, [r0]
 801836a:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801836e:	6006      	str	r6, [r0, #0]
 8018370:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8018374:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018378:	6856      	ldr	r6, [r2, #4]
 801837a:	6046      	str	r6, [r0, #4]
 801837c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018380:	f8a2 8002 	strh.w	r8, [r2, #2]
 8018384:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018388:	f8a2 c006 	strh.w	ip, [r2, #6]
 801838c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018390:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8018394:	f1a1 0208 	sub.w	r2, r1, #8
 8018398:	4565      	cmp	r5, ip
 801839a:	db06      	blt.n	80183aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801839c:	d119      	bne.n	80183d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801839e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80183a2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80183a6:	42ae      	cmp	r6, r5
 80183a8:	dd13      	ble.n	80183d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80183aa:	460e      	mov	r6, r1
 80183ac:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80183b0:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80183b4:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80183b8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80183bc:	601d      	str	r5, [r3, #0]
 80183be:	6875      	ldr	r5, [r6, #4]
 80183c0:	605d      	str	r5, [r3, #4]
 80183c2:	f821 9c08 	strh.w	r9, [r1, #-8]
 80183c6:	f821 cc06 	strh.w	ip, [r1, #-6]
 80183ca:	f821 8c04 	strh.w	r8, [r1, #-4]
 80183ce:	f821 ec02 	strh.w	lr, [r1, #-2]
 80183d2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80183d6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80183da:	42ae      	cmp	r6, r5
 80183dc:	db06      	blt.n	80183ec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80183de:	d116      	bne.n	801840e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80183e0:	f9b0 c000 	ldrsh.w	ip, [r0]
 80183e4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80183e8:	45ac      	cmp	ip, r5
 80183ea:	da10      	bge.n	801840e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80183ec:	681d      	ldr	r5, [r3, #0]
 80183ee:	f9b0 8000 	ldrsh.w	r8, [r0]
 80183f2:	6005      	str	r5, [r0, #0]
 80183f4:	685d      	ldr	r5, [r3, #4]
 80183f6:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80183fa:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80183fe:	f8a0 8008 	strh.w	r8, [r0, #8]
 8018402:	6045      	str	r5, [r0, #4]
 8018404:	8146      	strh	r6, [r0, #10]
 8018406:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801840a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801840e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018412:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018416:	4565      	cmp	r5, ip
 8018418:	db06      	blt.n	8018428 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801841a:	d119      	bne.n	8018450 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801841c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8018420:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018424:	42ae      	cmp	r6, r5
 8018426:	da13      	bge.n	8018450 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018428:	460e      	mov	r6, r1
 801842a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801842e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018432:	6005      	str	r5, [r0, #0]
 8018434:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8018438:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801843c:	6875      	ldr	r5, [r6, #4]
 801843e:	6045      	str	r5, [r0, #4]
 8018440:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018444:	f821 cc06 	strh.w	ip, [r1, #-6]
 8018448:	f821 8c04 	strh.w	r8, [r1, #-4]
 801844c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018450:	3308      	adds	r3, #8
 8018452:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8018456:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801845a:	45e6      	cmp	lr, ip
 801845c:	dbf8      	blt.n	8018450 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801845e:	d105      	bne.n	801846c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018460:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018464:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018468:	42ae      	cmp	r6, r5
 801846a:	dbf1      	blt.n	8018450 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801846c:	4615      	mov	r5, r2
 801846e:	3a08      	subs	r2, #8
 8018470:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8018474:	45b4      	cmp	ip, r6
 8018476:	dbf9      	blt.n	801846c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018478:	d105      	bne.n	8018486 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801847a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801847e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8018482:	45b0      	cmp	r8, r6
 8018484:	dbf2      	blt.n	801846c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018486:	4293      	cmp	r3, r2
 8018488:	f1a5 0608 	sub.w	r6, r5, #8
 801848c:	d816      	bhi.n	80184bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801848e:	f8d6 c000 	ldr.w	ip, [r6]
 8018492:	f9b3 a000 	ldrsh.w	sl, [r3]
 8018496:	f8c3 c000 	str.w	ip, [r3]
 801849a:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801849e:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80184a2:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80184a6:	f8c3 c004 	str.w	ip, [r3, #4]
 80184aa:	f825 ac08 	strh.w	sl, [r5, #-8]
 80184ae:	f825 ec06 	strh.w	lr, [r5, #-6]
 80184b2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80184b6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80184ba:	e7c9      	b.n	8018450 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80184bc:	f8d6 e000 	ldr.w	lr, [r6]
 80184c0:	f9b0 a000 	ldrsh.w	sl, [r0]
 80184c4:	f8c0 e000 	str.w	lr, [r0]
 80184c8:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80184cc:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80184d0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80184d4:	1a16      	subs	r6, r2, r0
 80184d6:	f8c0 e004 	str.w	lr, [r0, #4]
 80184da:	f825 ac08 	strh.w	sl, [r5, #-8]
 80184de:	f825 cc06 	strh.w	ip, [r5, #-6]
 80184e2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80184e6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80184ea:	1acd      	subs	r5, r1, r3
 80184ec:	10ed      	asrs	r5, r5, #3
 80184ee:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80184f2:	bfb5      	itete	lt
 80184f4:	e9c4 0200 	strdlt	r0, r2, [r4]
 80184f8:	e9c4 3100 	strdge	r3, r1, [r4]
 80184fc:	460a      	movlt	r2, r1
 80184fe:	4603      	movge	r3, r0
 8018500:	3408      	adds	r4, #8
 8018502:	4618      	mov	r0, r3
 8018504:	4611      	mov	r1, r2
 8018506:	e724      	b.n	8018352 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018508:	4299      	cmp	r1, r3
 801850a:	d928      	bls.n	801855e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 801850c:	f1a3 0210 	sub.w	r2, r3, #16
 8018510:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8018514:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8018518:	45ac      	cmp	ip, r5
 801851a:	db06      	blt.n	801852a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801851c:	d11d      	bne.n	801855a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801851e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8018522:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8018526:	42ae      	cmp	r6, r5
 8018528:	da17      	bge.n	801855a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801852a:	4615      	mov	r5, r2
 801852c:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8018530:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8018534:	6116      	str	r6, [r2, #16]
 8018536:	686e      	ldr	r6, [r5, #4]
 8018538:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801853c:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8018540:	42a8      	cmp	r0, r5
 8018542:	6156      	str	r6, [r2, #20]
 8018544:	f8a2 9008 	strh.w	r9, [r2, #8]
 8018548:	f8a2 c00a 	strh.w	ip, [r2, #10]
 801854c:	f8a2 800c 	strh.w	r8, [r2, #12]
 8018550:	f8a2 e00e 	strh.w	lr, [r2, #14]
 8018554:	f1a2 0208 	sub.w	r2, r2, #8
 8018558:	d1da      	bne.n	8018510 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801855a:	3308      	adds	r3, #8
 801855c:	e7d4      	b.n	8018508 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801855e:	42bc      	cmp	r4, r7
 8018560:	d903      	bls.n	801856a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 8018562:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8018566:	3c08      	subs	r4, #8
 8018568:	e6f3      	b.n	8018352 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801856a:	b050      	add	sp, #320	@ 0x140
 801856c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018570 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8018570:	b510      	push	{r4, lr}
 8018572:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018574:	4604      	mov	r4, r0
 8018576:	07da      	lsls	r2, r3, #31
 8018578:	d507      	bpl.n	801858a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801857a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801857e:	f7ff fe8b 	bl	8018298 <_ZN8touchgfx7Outline6lineToEii>
 8018582:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018584:	f023 0301 	bic.w	r3, r3, #1
 8018588:	6243      	str	r3, [r0, #36]	@ 0x24
 801858a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801858c:	079b      	lsls	r3, r3, #30
 801858e:	d521      	bpl.n	80185d4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8018590:	6923      	ldr	r3, [r4, #16]
 8018592:	88d9      	ldrh	r1, [r3, #6]
 8018594:	889a      	ldrh	r2, [r3, #4]
 8018596:	430a      	orrs	r2, r1
 8018598:	d010      	beq.n	80185bc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801859a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801859e:	2a00      	cmp	r2, #0
 80185a0:	db0c      	blt.n	80185bc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80185a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80185a4:	428a      	cmp	r2, r1
 80185a6:	da09      	bge.n	80185bc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80185a8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80185ac:	4291      	cmp	r1, r2
 80185ae:	bf88      	it	hi
 80185b0:	3308      	addhi	r3, #8
 80185b2:	f102 0201 	add.w	r2, r2, #1
 80185b6:	bf88      	it	hi
 80185b8:	6123      	strhi	r3, [r4, #16]
 80185ba:	60a2      	str	r2, [r4, #8]
 80185bc:	68a1      	ldr	r1, [r4, #8]
 80185be:	b129      	cbz	r1, 80185cc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80185c0:	6863      	ldr	r3, [r4, #4]
 80185c2:	4299      	cmp	r1, r3
 80185c4:	d802      	bhi.n	80185cc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80185c6:	68e0      	ldr	r0, [r4, #12]
 80185c8:	f7ff febc 	bl	8018344 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80185cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80185ce:	f023 0302 	bic.w	r3, r3, #2
 80185d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80185d4:	68e0      	ldr	r0, [r4, #12]
 80185d6:	bd10      	pop	{r4, pc}

080185d8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80185d8:	4b01      	ldr	r3, [pc, #4]	@ (80185e0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80185da:	6818      	ldr	r0, [r3, #0]
 80185dc:	4770      	bx	lr
 80185de:	bf00      	nop
 80185e0:	2005ba88 	.word	0x2005ba88

080185e4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80185e4:	4b01      	ldr	r3, [pc, #4]	@ (80185ec <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80185e6:	6818      	ldr	r0, [r3, #0]
 80185e8:	4770      	bx	lr
 80185ea:	bf00      	nop
 80185ec:	2005ba8c 	.word	0x2005ba8c

080185f0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80185f0:	b510      	push	{r4, lr}
 80185f2:	6803      	ldr	r3, [r0, #0]
 80185f4:	460c      	mov	r4, r1
 80185f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185f8:	4798      	blx	r3
 80185fa:	1b03      	subs	r3, r0, r4
 80185fc:	4258      	negs	r0, r3
 80185fe:	4158      	adcs	r0, r3
 8018600:	bd10      	pop	{r4, pc}
	...

08018604 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8018604:	4b01      	ldr	r3, [pc, #4]	@ (801860c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8018606:	6019      	str	r1, [r3, #0]
 8018608:	4770      	bx	lr
 801860a:	bf00      	nop
 801860c:	2005ba90 	.word	0x2005ba90

08018610 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018614:	4696      	mov	lr, r2
 8018616:	4614      	mov	r4, r2
 8018618:	4605      	mov	r5, r0
 801861a:	460e      	mov	r6, r1
 801861c:	461f      	mov	r7, r3
 801861e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018622:	b097      	sub	sp, #92	@ 0x5c
 8018624:	f10d 0c1c 	add.w	ip, sp, #28
 8018628:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801862c:	f8de 3000 	ldr.w	r3, [lr]
 8018630:	f104 0e14 	add.w	lr, r4, #20
 8018634:	f8cc 3000 	str.w	r3, [ip]
 8018638:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801863c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018640:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018644:	f8de 3000 	ldr.w	r3, [lr]
 8018648:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801864c:	f8cc 3000 	str.w	r3, [ip]
 8018650:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8018654:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018658:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801865c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8018660:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8018664:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8018668:	f8de 3000 	ldr.w	r3, [lr]
 801866c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801866e:	f8cc 3000 	str.w	r3, [ip]
 8018672:	9201      	str	r2, [sp, #4]
 8018674:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018678:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801867a:	682b      	ldr	r3, [r5, #0]
 801867c:	9200      	str	r2, [sp, #0]
 801867e:	f8cd 8008 	str.w	r8, [sp, #8]
 8018682:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8018686:	aa07      	add	r2, sp, #28
 8018688:	463b      	mov	r3, r7
 801868a:	4631      	mov	r1, r6
 801868c:	4628      	mov	r0, r5
 801868e:	47d8      	blx	fp
 8018690:	46a6      	mov	lr, r4
 8018692:	f10d 0c1c 	add.w	ip, sp, #28
 8018696:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801869a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801869e:	f8de 3000 	ldr.w	r3, [lr]
 80186a2:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80186a6:	f8cc 3000 	str.w	r3, [ip]
 80186aa:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80186ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80186b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80186b6:	f8de 3000 	ldr.w	r3, [lr]
 80186ba:	343c      	adds	r4, #60	@ 0x3c
 80186bc:	f8cc 3000 	str.w	r3, [ip]
 80186c0:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80186c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80186ca:	6823      	ldr	r3, [r4, #0]
 80186cc:	4631      	mov	r1, r6
 80186ce:	f8cc 3000 	str.w	r3, [ip]
 80186d2:	682b      	ldr	r3, [r5, #0]
 80186d4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80186d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80186da:	f8cd 8008 	str.w	r8, [sp, #8]
 80186de:	9201      	str	r2, [sp, #4]
 80186e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80186e2:	4628      	mov	r0, r5
 80186e4:	9200      	str	r2, [sp, #0]
 80186e6:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80186e8:	aa07      	add	r2, sp, #28
 80186ea:	463b      	mov	r3, r7
 80186ec:	47a0      	blx	r4
 80186ee:	b017      	add	sp, #92	@ 0x5c
 80186f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186f4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80186f4:	2000      	movs	r0, #0
 80186f6:	4770      	bx	lr

080186f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80186f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186fc:	b08d      	sub	sp, #52	@ 0x34
 80186fe:	4688      	mov	r8, r1
 8018700:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8018702:	f8d3 c000 	ldr.w	ip, [r3]
 8018706:	680f      	ldr	r7, [r1, #0]
 8018708:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801870c:	eba7 070c 	sub.w	r7, r7, ip
 8018710:	42bc      	cmp	r4, r7
 8018712:	bfa8      	it	ge
 8018714:	463c      	movge	r4, r7
 8018716:	ee07 4a90 	vmov	s15, r4
 801871a:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801871e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018722:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8018726:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801872a:	edd3 6a07 	vldr	s13, [r3, #28]
 801872e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018732:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018736:	ee25 5a27 	vmul.f32	s10, s10, s15
 801873a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801873e:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8018742:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8018746:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801874a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801874c:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8018750:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018754:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018758:	eb09 0e0c 	add.w	lr, r9, ip
 801875c:	4571      	cmp	r1, lr
 801875e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018762:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018766:	ee36 0a84 	vadd.f32	s0, s13, s8
 801876a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801876e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018772:	f340 808c 	ble.w	801888e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8018776:	eba1 060e 	sub.w	r6, r1, lr
 801877a:	fb96 f5f4 	sdiv	r5, r6, r4
 801877e:	ee07 5a10 	vmov	s14, r5
 8018782:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018786:	2d00      	cmp	r5, #0
 8018788:	fb04 6615 	mls	r6, r4, r5, r6
 801878c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018790:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018794:	eea7 1a05 	vfma.f32	s2, s14, s10
 8018798:	dd12      	ble.n	80187c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801879a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801879e:	eef5 6a40 	vcmp.f32	s13, #0.0
 80187a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187a6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80187aa:	bf14      	ite	ne
 80187ac:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80187b0:	eeb0 7a67 	vmoveq.f32	s14, s15
 80187b4:	ee31 2a45 	vsub.f32	s4, s2, s10
 80187b8:	ee61 1a87 	vmul.f32	s3, s3, s14
 80187bc:	ee22 2a07 	vmul.f32	s4, s4, s14
 80187c0:	fb05 f204 	mul.w	r2, r5, r4
 80187c4:	1abf      	subs	r7, r7, r2
 80187c6:	4494      	add	ip, r2
 80187c8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80187cc:	4411      	add	r1, r2
 80187ce:	eb09 020c 	add.w	r2, r9, ip
 80187d2:	443a      	add	r2, r7
 80187d4:	b209      	sxth	r1, r1
 80187d6:	428a      	cmp	r2, r1
 80187d8:	bfc4      	itt	gt
 80187da:	eba1 0209 	subgt.w	r2, r1, r9
 80187de:	eba2 070c 	subgt.w	r7, r2, ip
 80187e2:	2f00      	cmp	r7, #0
 80187e4:	dd50      	ble.n	8018888 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80187e6:	fb97 f1f4 	sdiv	r1, r7, r4
 80187ea:	fb04 7211 	mls	r2, r4, r1, r7
 80187ee:	b90a      	cbnz	r2, 80187f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80187f0:	4622      	mov	r2, r4
 80187f2:	3901      	subs	r1, #1
 80187f4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80187f8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80187fc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018800:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018804:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018808:	ee17 7a90 	vmov	r7, s15
 801880c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018810:	eef0 6a42 	vmov.f32	s13, s4
 8018814:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018818:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801881c:	ee17 ca90 	vmov	ip, s15
 8018820:	eeb0 7a61 	vmov.f32	s14, s3
 8018824:	6840      	ldr	r0, [r0, #4]
 8018826:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801882a:	f8d0 a000 	ldr.w	sl, [r0]
 801882e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018830:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8018832:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8018836:	9008      	str	r0, [sp, #32]
 8018838:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801883a:	695b      	ldr	r3, [r3, #20]
 801883c:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018840:	fb9c fcf4 	sdiv	ip, ip, r4
 8018844:	445b      	add	r3, fp
 8018846:	9307      	str	r3, [sp, #28]
 8018848:	ee16 3a90 	vmov	r3, s13
 801884c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018850:	fb0c 3306 	mla	r3, ip, r6, r3
 8018854:	fb97 f7f4 	sdiv	r7, r7, r4
 8018858:	9302      	str	r3, [sp, #8]
 801885a:	ee17 3a10 	vmov	r3, s14
 801885e:	2900      	cmp	r1, #0
 8018860:	bfcc      	ite	gt
 8018862:	46a1      	movgt	r9, r4
 8018864:	4691      	movle	r9, r2
 8018866:	44b6      	add	lr, r6
 8018868:	fb04 e505 	mla	r5, r4, r5, lr
 801886c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8018870:	fb07 3706 	mla	r7, r7, r6, r3
 8018874:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018878:	e9cd 4700 	strd	r4, r7, [sp]
 801887c:	eba9 0306 	sub.w	r3, r9, r6
 8018880:	f8da 4008 	ldr.w	r4, [sl, #8]
 8018884:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8018886:	47a0      	blx	r4
 8018888:	b00d      	add	sp, #52	@ 0x34
 801888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801888e:	2500      	movs	r5, #0
 8018890:	462e      	mov	r6, r5
 8018892:	e799      	b.n	80187c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018894 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018898:	461d      	mov	r5, r3
 801889a:	b0db      	sub	sp, #364	@ 0x16c
 801889c:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 80188a0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80188a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80188a4:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 80188a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80188aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80188ac:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 80188b0:	4614      	mov	r4, r2
 80188b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80188b4:	6803      	ldr	r3, [r0, #0]
 80188b6:	4629      	mov	r1, r5
 80188b8:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80188ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80188be:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 80188c2:	47b8      	blx	r7
 80188c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188c6:	6058      	str	r0, [r3, #4]
 80188c8:	2800      	cmp	r0, #0
 80188ca:	f000 83a1 	beq.w	8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188ce:	ed94 7a02 	vldr	s14, [r4, #8]
 80188d2:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80188d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188da:	682b      	ldr	r3, [r5, #0]
 80188dc:	9314      	str	r3, [sp, #80]	@ 0x50
 80188de:	686b      	ldr	r3, [r5, #4]
 80188e0:	9315      	str	r3, [sp, #84]	@ 0x54
 80188e2:	4bc1      	ldr	r3, [pc, #772]	@ (8018be8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80188e4:	7819      	ldrb	r1, [r3, #0]
 80188e6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80188ea:	2900      	cmp	r1, #0
 80188ec:	bf16      	itet	ne
 80188ee:	4619      	movne	r1, r3
 80188f0:	4611      	moveq	r1, r2
 80188f2:	4613      	movne	r3, r2
 80188f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188f8:	9116      	str	r1, [sp, #88]	@ 0x58
 80188fa:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80188fe:	f240 8387 	bls.w	8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018902:	ed94 7a07 	vldr	s14, [r4, #28]
 8018906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801890a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801890e:	f240 837f 	bls.w	8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018912:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8018916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801891a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801891e:	f240 8377 	bls.w	8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018922:	6822      	ldr	r2, [r4, #0]
 8018924:	4bb1      	ldr	r3, [pc, #708]	@ (8018bec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8018926:	429a      	cmp	r2, r3
 8018928:	f2c0 8372 	blt.w	8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801892c:	49b0      	ldr	r1, [pc, #704]	@ (8018bf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801892e:	6963      	ldr	r3, [r4, #20]
 8018930:	428a      	cmp	r2, r1
 8018932:	f300 836d 	bgt.w	8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018936:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801893a:	48ae      	ldr	r0, [pc, #696]	@ (8018bf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801893c:	33ff      	adds	r3, #255	@ 0xff
 801893e:	4283      	cmp	r3, r0
 8018940:	f200 8366 	bhi.w	8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018944:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8018946:	4dac      	ldr	r5, [pc, #688]	@ (8018bf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8018948:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801894c:	33ff      	adds	r3, #255	@ 0xff
 801894e:	42ab      	cmp	r3, r5
 8018950:	f200 835e 	bhi.w	8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018954:	6862      	ldr	r2, [r4, #4]
 8018956:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801895a:	33ff      	adds	r3, #255	@ 0xff
 801895c:	4283      	cmp	r3, r0
 801895e:	f200 8357 	bhi.w	8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018962:	69a1      	ldr	r1, [r4, #24]
 8018964:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8018968:	33ff      	adds	r3, #255	@ 0xff
 801896a:	4283      	cmp	r3, r0
 801896c:	f200 8350 	bhi.w	8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018970:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8018972:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8018976:	30ff      	adds	r0, #255	@ 0xff
 8018978:	42a8      	cmp	r0, r5
 801897a:	f200 8349 	bhi.w	8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801897e:	428a      	cmp	r2, r1
 8018980:	f280 8110 	bge.w	8018ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018984:	429a      	cmp	r2, r3
 8018986:	f300 8119 	bgt.w	8018bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801898a:	4299      	cmp	r1, r3
 801898c:	f280 811d 	bge.w	8018bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018990:	2502      	movs	r5, #2
 8018992:	2701      	movs	r7, #1
 8018994:	46a9      	mov	r9, r5
 8018996:	46b8      	mov	r8, r7
 8018998:	f04f 0a00 	mov.w	sl, #0
 801899c:	4621      	mov	r1, r4
 801899e:	a849      	add	r0, sp, #292	@ 0x124
 80189a0:	f003 fdc4 	bl	801c52c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80189a4:	4622      	mov	r2, r4
 80189a6:	4653      	mov	r3, sl
 80189a8:	a949      	add	r1, sp, #292	@ 0x124
 80189aa:	f8cd 9000 	str.w	r9, [sp]
 80189ae:	a819      	add	r0, sp, #100	@ 0x64
 80189b0:	f003 feee 	bl	801c790 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80189b4:	4622      	mov	r2, r4
 80189b6:	4653      	mov	r3, sl
 80189b8:	a949      	add	r1, sp, #292	@ 0x124
 80189ba:	f8cd 8000 	str.w	r8, [sp]
 80189be:	a829      	add	r0, sp, #164	@ 0xa4
 80189c0:	f003 fee6 	bl	801c790 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80189c4:	4643      	mov	r3, r8
 80189c6:	4622      	mov	r2, r4
 80189c8:	a949      	add	r1, sp, #292	@ 0x124
 80189ca:	f8cd 9000 	str.w	r9, [sp]
 80189ce:	a839      	add	r0, sp, #228	@ 0xe4
 80189d0:	f003 fede 	bl	801c790 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80189d4:	42af      	cmp	r7, r5
 80189d6:	bfb5      	itete	lt
 80189d8:	2300      	movlt	r3, #0
 80189da:	2301      	movge	r3, #1
 80189dc:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80189de:	930e      	strge	r3, [sp, #56]	@ 0x38
 80189e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80189e2:	af12      	add	r7, sp, #72	@ 0x48
 80189e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80189e8:	bfb9      	ittee	lt
 80189ea:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80189ec:	ac19      	addlt	r4, sp, #100	@ 0x64
 80189ee:	ad19      	addge	r5, sp, #100	@ 0x64
 80189f0:	ac29      	addge	r4, sp, #164	@ 0xa4
 80189f2:	e887 0003 	stmia.w	r7, {r0, r1}
 80189f6:	b928      	cbnz	r0, 8018a04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80189f8:	4b80      	ldr	r3, [pc, #512]	@ (8018bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80189fa:	6818      	ldr	r0, [r3, #0]
 80189fc:	6803      	ldr	r3, [r0, #0]
 80189fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a00:	4798      	blx	r3
 8018a02:	6038      	str	r0, [r7, #0]
 8018a04:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018a06:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018a0e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8018a10:	930c      	str	r3, [sp, #48]	@ 0x30
 8018a12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018a14:	6963      	ldr	r3, [r4, #20]
 8018a16:	440b      	add	r3, r1
 8018a18:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018a1c:	4408      	add	r0, r1
 8018a1e:	b200      	sxth	r0, r0
 8018a20:	4283      	cmp	r3, r0
 8018a22:	900d      	str	r0, [sp, #52]	@ 0x34
 8018a24:	f280 80dd 	bge.w	8018be2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8018a28:	428b      	cmp	r3, r1
 8018a2a:	da08      	bge.n	8018a3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018a2c:	2a00      	cmp	r2, #0
 8018a2e:	dd06      	ble.n	8018a3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018a30:	1acb      	subs	r3, r1, r3
 8018a32:	429a      	cmp	r2, r3
 8018a34:	f2c0 80e4 	blt.w	8018c00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	f300 80e2 	bgt.w	8018c02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018a3e:	6967      	ldr	r7, [r4, #20]
 8018a40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a42:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8018a46:	443b      	add	r3, r7
 8018a48:	461f      	mov	r7, r3
 8018a4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018a4c:	1bdf      	subs	r7, r3, r7
 8018a4e:	4297      	cmp	r7, r2
 8018a50:	bfa8      	it	ge
 8018a52:	4617      	movge	r7, r2
 8018a54:	2f00      	cmp	r7, #0
 8018a56:	f340 8166 	ble.w	8018d26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018a5a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018a5c:	6829      	ldr	r1, [r5, #0]
 8018a5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a62:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018a66:	4411      	add	r1, r2
 8018a68:	4299      	cmp	r1, r3
 8018a6a:	6820      	ldr	r0, [r4, #0]
 8018a6c:	dd1a      	ble.n	8018aa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018a6e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018a72:	4402      	add	r2, r0
 8018a74:	440b      	add	r3, r1
 8018a76:	b21b      	sxth	r3, r3
 8018a78:	429a      	cmp	r2, r3
 8018a7a:	dc13      	bgt.n	8018aa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018a7c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a80:	a912      	add	r1, sp, #72	@ 0x48
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	9206      	str	r2, [sp, #24]
 8018a86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018a88:	9500      	str	r5, [sp, #0]
 8018a8a:	9205      	str	r2, [sp, #20]
 8018a8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018a90:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018a94:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8018a96:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018a9a:	aa49      	add	r2, sp, #292	@ 0x124
 8018a9c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8018aa0:	4623      	mov	r3, r4
 8018aa2:	47c8      	blx	r9
 8018aa4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018aa8:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8018aac:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8018ab0:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8018ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018ab8:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8018abc:	ed94 6a08 	vldr	s12, [r4, #32]
 8018ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018ac4:	edd4 6a07 	vldr	s13, [r4, #28]
 8018ac8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018acc:	441a      	add	r2, r3
 8018ace:	6963      	ldr	r3, [r4, #20]
 8018ad0:	68a1      	ldr	r1, [r4, #8]
 8018ad2:	3301      	adds	r3, #1
 8018ad4:	6163      	str	r3, [r4, #20]
 8018ad6:	69a3      	ldr	r3, [r4, #24]
 8018ad8:	6022      	str	r2, [r4, #0]
 8018ada:	3b01      	subs	r3, #1
 8018adc:	61a3      	str	r3, [r4, #24]
 8018ade:	6923      	ldr	r3, [r4, #16]
 8018ae0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018ae4:	440b      	add	r3, r1
 8018ae6:	68e1      	ldr	r1, [r4, #12]
 8018ae8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018aec:	428b      	cmp	r3, r1
 8018aee:	edc4 6a07 	vstr	s13, [r4, #28]
 8018af2:	6123      	str	r3, [r4, #16]
 8018af4:	db15      	blt.n	8018b22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018af6:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8018afa:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018afe:	edc4 6a07 	vstr	s13, [r4, #28]
 8018b02:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8018b06:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018b0a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018b0e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8018b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b16:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018b1a:	3201      	adds	r2, #1
 8018b1c:	1a5b      	subs	r3, r3, r1
 8018b1e:	6022      	str	r2, [r4, #0]
 8018b20:	6123      	str	r3, [r4, #16]
 8018b22:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018b26:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018b2a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8018b2e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8018b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b36:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8018b3a:	ed95 6a08 	vldr	s12, [r5, #32]
 8018b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b42:	edd5 6a07 	vldr	s13, [r5, #28]
 8018b46:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018b4a:	441a      	add	r2, r3
 8018b4c:	696b      	ldr	r3, [r5, #20]
 8018b4e:	68a9      	ldr	r1, [r5, #8]
 8018b50:	3301      	adds	r3, #1
 8018b52:	616b      	str	r3, [r5, #20]
 8018b54:	69ab      	ldr	r3, [r5, #24]
 8018b56:	602a      	str	r2, [r5, #0]
 8018b58:	3b01      	subs	r3, #1
 8018b5a:	61ab      	str	r3, [r5, #24]
 8018b5c:	692b      	ldr	r3, [r5, #16]
 8018b5e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018b62:	440b      	add	r3, r1
 8018b64:	68e9      	ldr	r1, [r5, #12]
 8018b66:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018b6a:	428b      	cmp	r3, r1
 8018b6c:	edc5 6a07 	vstr	s13, [r5, #28]
 8018b70:	612b      	str	r3, [r5, #16]
 8018b72:	db15      	blt.n	8018ba0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018b74:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8018b78:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018b7c:	edc5 6a07 	vstr	s13, [r5, #28]
 8018b80:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8018b84:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018b88:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018b8c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8018b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b94:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018b98:	3201      	adds	r2, #1
 8018b9a:	1a5b      	subs	r3, r3, r1
 8018b9c:	602a      	str	r2, [r5, #0]
 8018b9e:	612b      	str	r3, [r5, #16]
 8018ba0:	3f01      	subs	r7, #1
 8018ba2:	e757      	b.n	8018a54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018ba4:	4299      	cmp	r1, r3
 8018ba6:	dc13      	bgt.n	8018bd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018ba8:	429a      	cmp	r2, r3
 8018baa:	da14      	bge.n	8018bd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018bac:	2502      	movs	r5, #2
 8018bae:	2703      	movs	r7, #3
 8018bb0:	46a9      	mov	r9, r5
 8018bb2:	f04f 0800 	mov.w	r8, #0
 8018bb6:	f04f 0a01 	mov.w	sl, #1
 8018bba:	e6ef      	b.n	801899c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018bbc:	2501      	movs	r5, #1
 8018bbe:	2700      	movs	r7, #0
 8018bc0:	46a9      	mov	r9, r5
 8018bc2:	46b8      	mov	r8, r7
 8018bc4:	f04f 0a02 	mov.w	sl, #2
 8018bc8:	e6e8      	b.n	801899c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018bca:	2501      	movs	r5, #1
 8018bcc:	2702      	movs	r7, #2
 8018bce:	e6e1      	b.n	8018994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018bd0:	2500      	movs	r5, #0
 8018bd2:	2701      	movs	r7, #1
 8018bd4:	e7f4      	b.n	8018bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018bd6:	2702      	movs	r7, #2
 8018bd8:	2503      	movs	r5, #3
 8018bda:	f04f 0900 	mov.w	r9, #0
 8018bde:	46b8      	mov	r8, r7
 8018be0:	e7e9      	b.n	8018bb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018be2:	4613      	mov	r3, r2
 8018be4:	e728      	b.n	8018a38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018be6:	bf00      	nop
 8018be8:	2005ba78 	.word	0x2005ba78
 8018bec:	fffd8f01 	.word	0xfffd8f01
 8018bf0:	00027100 	.word	0x00027100
 8018bf4:	0004e1ff 	.word	0x0004e1ff
 8018bf8:	0004e1fe 	.word	0x0004e1fe
 8018bfc:	2005ba80 	.word	0x2005ba80
 8018c00:	4613      	mov	r3, r2
 8018c02:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8018c06:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8018c0a:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8018c0e:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8018c12:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8018c16:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8018c1a:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8018c1e:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8018c22:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8018c26:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8018c2a:	469e      	mov	lr, r3
 8018c2c:	469c      	mov	ip, r3
 8018c2e:	f04f 0900 	mov.w	r9, #0
 8018c32:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8018c34:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8018c36:	9111      	str	r1, [sp, #68]	@ 0x44
 8018c38:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8018c3c:	f1bc 0f00 	cmp.w	ip, #0
 8018c40:	d147      	bne.n	8018cd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018c42:	eb03 0c07 	add.w	ip, r3, r7
 8018c46:	1ad7      	subs	r7, r2, r3
 8018c48:	f1b9 0f00 	cmp.w	r9, #0
 8018c4c:	d009      	beq.n	8018c62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018c4e:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8018c52:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8018c56:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8018c5a:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8018c5e:	9029      	str	r0, [sp, #164]	@ 0xa4
 8018c60:	912d      	str	r1, [sp, #180]	@ 0xb4
 8018c62:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8018c66:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8018c6a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8018c6e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8018c72:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8018c76:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8018c7a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8018c7e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8018c82:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8018c86:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8018c8a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8018c8e:	f04f 0800 	mov.w	r8, #0
 8018c92:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018c94:	9111      	str	r1, [sp, #68]	@ 0x44
 8018c96:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8018c9a:	f1be 0f00 	cmp.w	lr, #0
 8018c9e:	d031      	beq.n	8018d04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018ca0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018ca2:	4450      	add	r0, sl
 8018ca4:	4431      	add	r1, r6
 8018ca6:	4549      	cmp	r1, r9
 8018ca8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018cac:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018cb0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018cb4:	db08      	blt.n	8018cc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8018cb6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018cba:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018cbe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018cc2:	3001      	adds	r0, #1
 8018cc4:	eba1 0109 	sub.w	r1, r1, r9
 8018cc8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018ccc:	f04f 0801 	mov.w	r8, #1
 8018cd0:	e7e3      	b.n	8018c9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8018cd2:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018cd4:	4450      	add	r0, sl
 8018cd6:	4431      	add	r1, r6
 8018cd8:	4541      	cmp	r1, r8
 8018cda:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018cde:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018ce2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018ce6:	db08      	blt.n	8018cfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8018ce8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018cec:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018cf0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018cf4:	3001      	adds	r0, #1
 8018cf6:	eba1 0108 	sub.w	r1, r1, r8
 8018cfa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018cfe:	f04f 0901 	mov.w	r9, #1
 8018d02:	e79b      	b.n	8018c3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018d04:	449c      	add	ip, r3
 8018d06:	1aff      	subs	r7, r7, r3
 8018d08:	f1b8 0f00 	cmp.w	r8, #0
 8018d0c:	d009      	beq.n	8018d22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018d0e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8018d12:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8018d16:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8018d1a:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8018d1e:	9019      	str	r0, [sp, #100]	@ 0x64
 8018d20:	911d      	str	r1, [sp, #116]	@ 0x74
 8018d22:	1ad2      	subs	r2, r2, r3
 8018d24:	e68b      	b.n	8018a3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018d26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d28:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	f000 80d1 	beq.w	8018ed2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018d30:	ad19      	add	r5, sp, #100	@ 0x64
 8018d32:	ac39      	add	r4, sp, #228	@ 0xe4
 8018d34:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018d36:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018d3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8018d40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018d42:	6963      	ldr	r3, [r4, #20]
 8018d44:	440b      	add	r3, r1
 8018d46:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018d4a:	4408      	add	r0, r1
 8018d4c:	b200      	sxth	r0, r0
 8018d4e:	4283      	cmp	r3, r0
 8018d50:	900d      	str	r0, [sp, #52]	@ 0x34
 8018d52:	f280 80c1 	bge.w	8018ed8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8018d56:	428b      	cmp	r3, r1
 8018d58:	da08      	bge.n	8018d6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018d5a:	2a00      	cmp	r2, #0
 8018d5c:	dd06      	ble.n	8018d6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018d5e:	1acb      	subs	r3, r1, r3
 8018d60:	429a      	cmp	r2, r3
 8018d62:	f2c0 80bb 	blt.w	8018edc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	f300 80b9 	bgt.w	8018ede <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018d6c:	6967      	ldr	r7, [r4, #20]
 8018d6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018d70:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8018d74:	443b      	add	r3, r7
 8018d76:	461f      	mov	r7, r3
 8018d78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018d7a:	1bdf      	subs	r7, r3, r7
 8018d7c:	4297      	cmp	r7, r2
 8018d7e:	bfa8      	it	ge
 8018d80:	4617      	movge	r7, r2
 8018d82:	2f00      	cmp	r7, #0
 8018d84:	f340 813c 	ble.w	8019000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8018d88:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018d8a:	6829      	ldr	r1, [r5, #0]
 8018d8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d90:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018d94:	4411      	add	r1, r2
 8018d96:	4299      	cmp	r1, r3
 8018d98:	6820      	ldr	r0, [r4, #0]
 8018d9a:	dd1a      	ble.n	8018dd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018d9c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018da0:	4402      	add	r2, r0
 8018da2:	440b      	add	r3, r1
 8018da4:	b21b      	sxth	r3, r3
 8018da6:	429a      	cmp	r2, r3
 8018da8:	dc13      	bgt.n	8018dd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018daa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018dae:	a912      	add	r1, sp, #72	@ 0x48
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	9206      	str	r2, [sp, #24]
 8018db4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018db6:	9500      	str	r5, [sp, #0]
 8018db8:	9205      	str	r2, [sp, #20]
 8018dba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018dbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018dbe:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018dc2:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8018dc4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018dc8:	aa49      	add	r2, sp, #292	@ 0x124
 8018dca:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8018dce:	4623      	mov	r3, r4
 8018dd0:	47c8      	blx	r9
 8018dd2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018dd6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8018dda:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8018dde:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8018de2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018de6:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8018dea:	ed94 6a08 	vldr	s12, [r4, #32]
 8018dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018df2:	edd4 6a07 	vldr	s13, [r4, #28]
 8018df6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018dfa:	441a      	add	r2, r3
 8018dfc:	6963      	ldr	r3, [r4, #20]
 8018dfe:	68a1      	ldr	r1, [r4, #8]
 8018e00:	3301      	adds	r3, #1
 8018e02:	6163      	str	r3, [r4, #20]
 8018e04:	69a3      	ldr	r3, [r4, #24]
 8018e06:	6022      	str	r2, [r4, #0]
 8018e08:	3b01      	subs	r3, #1
 8018e0a:	61a3      	str	r3, [r4, #24]
 8018e0c:	6923      	ldr	r3, [r4, #16]
 8018e0e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018e12:	440b      	add	r3, r1
 8018e14:	68e1      	ldr	r1, [r4, #12]
 8018e16:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018e1a:	428b      	cmp	r3, r1
 8018e1c:	edc4 6a07 	vstr	s13, [r4, #28]
 8018e20:	6123      	str	r3, [r4, #16]
 8018e22:	db15      	blt.n	8018e50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018e24:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8018e28:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018e2c:	edc4 6a07 	vstr	s13, [r4, #28]
 8018e30:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8018e34:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018e38:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018e3c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8018e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e44:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018e48:	3201      	adds	r2, #1
 8018e4a:	1a5b      	subs	r3, r3, r1
 8018e4c:	6022      	str	r2, [r4, #0]
 8018e4e:	6123      	str	r3, [r4, #16]
 8018e50:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018e54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018e58:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8018e5c:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8018e60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018e64:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8018e68:	ed95 6a08 	vldr	s12, [r5, #32]
 8018e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e70:	edd5 6a07 	vldr	s13, [r5, #28]
 8018e74:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018e78:	441a      	add	r2, r3
 8018e7a:	696b      	ldr	r3, [r5, #20]
 8018e7c:	68a9      	ldr	r1, [r5, #8]
 8018e7e:	3301      	adds	r3, #1
 8018e80:	616b      	str	r3, [r5, #20]
 8018e82:	69ab      	ldr	r3, [r5, #24]
 8018e84:	602a      	str	r2, [r5, #0]
 8018e86:	3b01      	subs	r3, #1
 8018e88:	61ab      	str	r3, [r5, #24]
 8018e8a:	692b      	ldr	r3, [r5, #16]
 8018e8c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018e90:	440b      	add	r3, r1
 8018e92:	68e9      	ldr	r1, [r5, #12]
 8018e94:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018e98:	428b      	cmp	r3, r1
 8018e9a:	edc5 6a07 	vstr	s13, [r5, #28]
 8018e9e:	612b      	str	r3, [r5, #16]
 8018ea0:	db15      	blt.n	8018ece <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018ea2:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8018ea6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018eaa:	edc5 6a07 	vstr	s13, [r5, #28]
 8018eae:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8018eb2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018eb6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018eba:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8018ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018ec2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018ec6:	3201      	adds	r2, #1
 8018ec8:	1a5b      	subs	r3, r3, r1
 8018eca:	602a      	str	r2, [r5, #0]
 8018ecc:	612b      	str	r3, [r5, #16]
 8018ece:	3f01      	subs	r7, #1
 8018ed0:	e757      	b.n	8018d82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018ed2:	ad39      	add	r5, sp, #228	@ 0xe4
 8018ed4:	ac19      	add	r4, sp, #100	@ 0x64
 8018ed6:	e72d      	b.n	8018d34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8018ed8:	4613      	mov	r3, r2
 8018eda:	e744      	b.n	8018d66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018edc:	4613      	mov	r3, r2
 8018ede:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8018ee2:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8018ee6:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8018eea:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8018eee:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8018ef2:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8018ef6:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8018efa:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8018efe:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8018f02:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8018f06:	469e      	mov	lr, r3
 8018f08:	461f      	mov	r7, r3
 8018f0a:	f04f 0900 	mov.w	r9, #0
 8018f0e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8018f10:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8018f14:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8018f16:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8018f1a:	960e      	str	r6, [sp, #56]	@ 0x38
 8018f1c:	2f00      	cmp	r7, #0
 8018f1e:	d146      	bne.n	8018fae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018f20:	449c      	add	ip, r3
 8018f22:	1ad7      	subs	r7, r2, r3
 8018f24:	f1b9 0f00 	cmp.w	r9, #0
 8018f28:	d009      	beq.n	8018f3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8018f2a:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8018f2e:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8018f32:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8018f36:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8018f3a:	9039      	str	r0, [sp, #228]	@ 0xe4
 8018f3c:	913d      	str	r1, [sp, #244]	@ 0xf4
 8018f3e:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8018f42:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8018f46:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8018f4a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8018f4e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8018f52:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8018f56:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8018f5a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8018f5e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8018f62:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8018f66:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8018f6a:	f04f 0800 	mov.w	r8, #0
 8018f6e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018f70:	910e      	str	r1, [sp, #56]	@ 0x38
 8018f72:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8018f76:	f1be 0f00 	cmp.w	lr, #0
 8018f7a:	d030      	beq.n	8018fde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018f7c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018f7e:	4450      	add	r0, sl
 8018f80:	4431      	add	r1, r6
 8018f82:	4549      	cmp	r1, r9
 8018f84:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018f88:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018f8c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018f90:	db08      	blt.n	8018fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018f92:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018f96:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018f9a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018f9e:	3001      	adds	r0, #1
 8018fa0:	eba1 0109 	sub.w	r1, r1, r9
 8018fa4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018fa8:	f04f 0801 	mov.w	r8, #1
 8018fac:	e7e3      	b.n	8018f76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018fae:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018fb0:	4450      	add	r0, sl
 8018fb2:	4431      	add	r1, r6
 8018fb4:	4541      	cmp	r1, r8
 8018fb6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018fba:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018fbe:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018fc2:	db08      	blt.n	8018fd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8018fc4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018fc8:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018fcc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018fd0:	3001      	adds	r0, #1
 8018fd2:	eba1 0108 	sub.w	r1, r1, r8
 8018fd6:	3f01      	subs	r7, #1
 8018fd8:	f04f 0901 	mov.w	r9, #1
 8018fdc:	e79e      	b.n	8018f1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8018fde:	449c      	add	ip, r3
 8018fe0:	1aff      	subs	r7, r7, r3
 8018fe2:	f1b8 0f00 	cmp.w	r8, #0
 8018fe6:	d009      	beq.n	8018ffc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8018fe8:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8018fec:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8018ff0:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8018ff4:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8018ff8:	9019      	str	r0, [sp, #100]	@ 0x64
 8018ffa:	911d      	str	r1, [sp, #116]	@ 0x74
 8018ffc:	1ad2      	subs	r2, r2, r3
 8018ffe:	e6b5      	b.n	8018d6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	b923      	cbnz	r3, 8019010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019006:	4b04      	ldr	r3, [pc, #16]	@ (8019018 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019008:	6818      	ldr	r0, [r3, #0]
 801900a:	6803      	ldr	r3, [r0, #0]
 801900c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801900e:	4798      	blx	r3
 8019010:	b05b      	add	sp, #364	@ 0x16c
 8019012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019016:	bf00      	nop
 8019018:	2005ba80 	.word	0x2005ba80

0801901c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801901c:	2b03      	cmp	r3, #3
 801901e:	d818      	bhi.n	8019052 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8019020:	e8df f003 	tbb	[pc, r3]
 8019024:	130d0602 	.word	0x130d0602
 8019028:	f9b0 2000 	ldrsh.w	r2, [r0]
 801902c:	1850      	adds	r0, r2, r1
 801902e:	4770      	bx	lr
 8019030:	8803      	ldrh	r3, [r0, #0]
 8019032:	8880      	ldrh	r0, [r0, #4]
 8019034:	4418      	add	r0, r3
 8019036:	b200      	sxth	r0, r0
 8019038:	1a80      	subs	r0, r0, r2
 801903a:	3801      	subs	r0, #1
 801903c:	4770      	bx	lr
 801903e:	8803      	ldrh	r3, [r0, #0]
 8019040:	8880      	ldrh	r0, [r0, #4]
 8019042:	4418      	add	r0, r3
 8019044:	b200      	sxth	r0, r0
 8019046:	1a40      	subs	r0, r0, r1
 8019048:	e7f7      	b.n	801903a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801904a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801904e:	4410      	add	r0, r2
 8019050:	4770      	bx	lr
 8019052:	2000      	movs	r0, #0
 8019054:	4770      	bx	lr

08019056 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019056:	2b03      	cmp	r3, #3
 8019058:	d817      	bhi.n	801908a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801905a:	e8df f003 	tbb	[pc, r3]
 801905e:	0602      	.short	0x0602
 8019060:	1009      	.short	0x1009
 8019062:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019066:	1850      	adds	r0, r2, r1
 8019068:	4770      	bx	lr
 801906a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801906e:	e7fa      	b.n	8019066 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8019070:	8843      	ldrh	r3, [r0, #2]
 8019072:	88c0      	ldrh	r0, [r0, #6]
 8019074:	4418      	add	r0, r3
 8019076:	b200      	sxth	r0, r0
 8019078:	1a80      	subs	r0, r0, r2
 801907a:	3801      	subs	r0, #1
 801907c:	4770      	bx	lr
 801907e:	8843      	ldrh	r3, [r0, #2]
 8019080:	88c0      	ldrh	r0, [r0, #6]
 8019082:	4418      	add	r0, r3
 8019084:	b200      	sxth	r0, r0
 8019086:	1a40      	subs	r0, r0, r1
 8019088:	e7f7      	b.n	801907a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801908a:	2000      	movs	r0, #0
 801908c:	4770      	bx	lr
	...

08019090 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8019090:	2200      	movs	r2, #0
 8019092:	4b01      	ldr	r3, [pc, #4]	@ (8019098 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8019094:	601a      	str	r2, [r3, #0]
 8019096:	4770      	bx	lr
 8019098:	2005ba90 	.word	0x2005ba90

0801909c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801909c:	4603      	mov	r3, r0
 801909e:	b1c8      	cbz	r0, 80190d4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80190a0:	0c02      	lsrs	r2, r0, #16
 80190a2:	0412      	lsls	r2, r2, #16
 80190a4:	b9a2      	cbnz	r2, 80190d0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80190a6:	0403      	lsls	r3, r0, #16
 80190a8:	2010      	movs	r0, #16
 80190aa:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80190ae:	bf04      	itt	eq
 80190b0:	021b      	lsleq	r3, r3, #8
 80190b2:	3008      	addeq	r0, #8
 80190b4:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80190b8:	bf04      	itt	eq
 80190ba:	011b      	lsleq	r3, r3, #4
 80190bc:	3004      	addeq	r0, #4
 80190be:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80190c2:	bf04      	itt	eq
 80190c4:	009b      	lsleq	r3, r3, #2
 80190c6:	3002      	addeq	r0, #2
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	db04      	blt.n	80190d6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80190cc:	3001      	adds	r0, #1
 80190ce:	4770      	bx	lr
 80190d0:	2000      	movs	r0, #0
 80190d2:	e7ea      	b.n	80190aa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80190d4:	2020      	movs	r0, #32
 80190d6:	4770      	bx	lr

080190d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80190d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190dc:	b087      	sub	sp, #28
 80190de:	460d      	mov	r5, r1
 80190e0:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 80190e4:	4616      	mov	r6, r2
 80190e6:	4698      	mov	r8, r3
 80190e8:	4601      	mov	r1, r0
 80190ea:	b120      	cbz	r0, 80190f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80190ec:	b11a      	cbz	r2, 80190f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80190ee:	2d1f      	cmp	r5, #31
 80190f0:	d801      	bhi.n	80190f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80190f2:	2b1f      	cmp	r3, #31
 80190f4:	d904      	bls.n	8019100 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80190f6:	2000      	movs	r0, #0
 80190f8:	6038      	str	r0, [r7, #0]
 80190fa:	b007      	add	sp, #28
 80190fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019100:	b97d      	cbnz	r5, 8019122 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8019102:	b143      	cbz	r3, 8019116 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8019104:	4602      	mov	r2, r0
 8019106:	e9cd 4700 	strd	r4, r7, [sp]
 801910a:	462b      	mov	r3, r5
 801910c:	4641      	mov	r1, r8
 801910e:	4630      	mov	r0, r6
 8019110:	f7ff ffe2 	bl	80190d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019114:	e7f1      	b.n	80190fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8019116:	f04f 33ff 	mov.w	r3, #4294967295
 801911a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801911e:	603b      	str	r3, [r7, #0]
 8019120:	e7eb      	b.n	80190fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8019122:	fa32 fa05 	lsrs.w	sl, r2, r5
 8019126:	d106      	bne.n	8019136 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8019128:	4346      	muls	r6, r0
 801912a:	fbb6 f0f4 	udiv	r0, r6, r4
 801912e:	fb04 6610 	mls	r6, r4, r0, r6
 8019132:	603e      	str	r6, [r7, #0]
 8019134:	e7e1      	b.n	80190fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8019136:	fa00 fb05 	lsl.w	fp, r0, r5
 801913a:	fbbb f9f4 	udiv	r9, fp, r4
 801913e:	2201      	movs	r2, #1
 8019140:	fb0a f309 	mul.w	r3, sl, r9
 8019144:	40aa      	lsls	r2, r5
 8019146:	3a01      	subs	r2, #1
 8019148:	4016      	ands	r6, r2
 801914a:	4630      	mov	r0, r6
 801914c:	9303      	str	r3, [sp, #12]
 801914e:	f7ff ffa5 	bl	801909c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019152:	462b      	mov	r3, r5
 8019154:	460a      	mov	r2, r1
 8019156:	e9cd 4700 	strd	r4, r7, [sp]
 801915a:	4601      	mov	r1, r0
 801915c:	4630      	mov	r0, r6
 801915e:	f7ff ffbb 	bl	80190d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019162:	fb04 b919 	mls	r9, r4, r9, fp
 8019166:	4606      	mov	r6, r0
 8019168:	4648      	mov	r0, r9
 801916a:	eb05 0108 	add.w	r1, r5, r8
 801916e:	f7ff ff95 	bl	801909c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019172:	ab05      	add	r3, sp, #20
 8019174:	e9cd 4300 	strd	r4, r3, [sp]
 8019178:	464a      	mov	r2, r9
 801917a:	4603      	mov	r3, r0
 801917c:	4650      	mov	r0, sl
 801917e:	f7ff ffab 	bl	80190d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019182:	6839      	ldr	r1, [r7, #0]
 8019184:	9a05      	ldr	r2, [sp, #20]
 8019186:	9b03      	ldr	r3, [sp, #12]
 8019188:	4411      	add	r1, r2
 801918a:	fbb1 f2f4 	udiv	r2, r1, r4
 801918e:	fb04 1412 	mls	r4, r4, r2, r1
 8019192:	18d3      	adds	r3, r2, r3
 8019194:	441e      	add	r6, r3
 8019196:	4430      	add	r0, r6
 8019198:	603c      	str	r4, [r7, #0]
 801919a:	e7ae      	b.n	80190fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801919c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801919c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191a0:	b085      	sub	sp, #20
 80191a2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80191a4:	f1b0 0900 	subs.w	r9, r0, #0
 80191a8:	461d      	mov	r5, r3
 80191aa:	bfbf      	itttt	lt
 80191ac:	6823      	ldrlt	r3, [r4, #0]
 80191ae:	f1c9 0900 	rsblt	r9, r9, #0
 80191b2:	425b      	neglt	r3, r3
 80191b4:	6023      	strlt	r3, [r4, #0]
 80191b6:	bfb4      	ite	lt
 80191b8:	f04f 36ff 	movlt.w	r6, #4294967295
 80191bc:	2601      	movge	r6, #1
 80191be:	2a00      	cmp	r2, #0
 80191c0:	4617      	mov	r7, r2
 80191c2:	da04      	bge.n	80191ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80191c4:	6823      	ldr	r3, [r4, #0]
 80191c6:	4257      	negs	r7, r2
 80191c8:	425b      	negs	r3, r3
 80191ca:	4276      	negs	r6, r6
 80191cc:	6023      	str	r3, [r4, #0]
 80191ce:	2d00      	cmp	r5, #0
 80191d0:	4638      	mov	r0, r7
 80191d2:	bfba      	itte	lt
 80191d4:	426d      	neglt	r5, r5
 80191d6:	f04f 38ff 	movlt.w	r8, #4294967295
 80191da:	f04f 0801 	movge.w	r8, #1
 80191de:	f7ff ff5d 	bl	801909c <_ZN8touchgfx16TouchCalibration4clzuEm>
 80191e2:	ab03      	add	r3, sp, #12
 80191e4:	e9cd 5300 	strd	r5, r3, [sp]
 80191e8:	463a      	mov	r2, r7
 80191ea:	4603      	mov	r3, r0
 80191ec:	4648      	mov	r0, r9
 80191ee:	f7ff ff73 	bl	80190d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80191f2:	6823      	ldr	r3, [r4, #0]
 80191f4:	9a03      	ldr	r2, [sp, #12]
 80191f6:	4546      	cmp	r6, r8
 80191f8:	441a      	add	r2, r3
 80191fa:	fb92 f3f5 	sdiv	r3, r2, r5
 80191fe:	4418      	add	r0, r3
 8019200:	fb05 2313 	mls	r3, r5, r3, r2
 8019204:	bf18      	it	ne
 8019206:	4240      	negne	r0, r0
 8019208:	1c72      	adds	r2, r6, #1
 801920a:	6023      	str	r3, [r4, #0]
 801920c:	d105      	bne.n	801921a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801920e:	2b00      	cmp	r3, #0
 8019210:	f1c3 0200 	rsb	r2, r3, #0
 8019214:	db0b      	blt.n	801922e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8019216:	6022      	str	r2, [r4, #0]
 8019218:	e006      	b.n	8019228 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801921a:	2e01      	cmp	r6, #1
 801921c:	d104      	bne.n	8019228 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801921e:	2b00      	cmp	r3, #0
 8019220:	da02      	bge.n	8019228 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019222:	442b      	add	r3, r5
 8019224:	3801      	subs	r0, #1
 8019226:	6023      	str	r3, [r4, #0]
 8019228:	b005      	add	sp, #20
 801922a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801922e:	3801      	subs	r0, #1
 8019230:	1b52      	subs	r2, r2, r5
 8019232:	e7f0      	b.n	8019216 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08019234 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019234:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019238:	4c1c      	ldr	r4, [pc, #112]	@ (80192ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801923a:	4605      	mov	r5, r0
 801923c:	69a3      	ldr	r3, [r4, #24]
 801923e:	6807      	ldr	r7, [r0, #0]
 8019240:	b92b      	cbnz	r3, 801924e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8019242:	6840      	ldr	r0, [r0, #4]
 8019244:	e9c5 7000 	strd	r7, r0, [r5]
 8019248:	b004      	add	sp, #16
 801924a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801924e:	f04f 0802 	mov.w	r8, #2
 8019252:	fb93 f1f8 	sdiv	r1, r3, r8
 8019256:	68a2      	ldr	r2, [r4, #8]
 8019258:	ae04      	add	r6, sp, #16
 801925a:	440a      	add	r2, r1
 801925c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019260:	69e1      	ldr	r1, [r4, #28]
 8019262:	463a      	mov	r2, r7
 8019264:	9600      	str	r6, [sp, #0]
 8019266:	6820      	ldr	r0, [r4, #0]
 8019268:	f7ff ff98 	bl	801919c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801926c:	69a3      	ldr	r3, [r4, #24]
 801926e:	4607      	mov	r7, r0
 8019270:	686a      	ldr	r2, [r5, #4]
 8019272:	6a21      	ldr	r1, [r4, #32]
 8019274:	9600      	str	r6, [sp, #0]
 8019276:	6860      	ldr	r0, [r4, #4]
 8019278:	f7ff ff90 	bl	801919c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801927c:	69a3      	ldr	r3, [r4, #24]
 801927e:	6962      	ldr	r2, [r4, #20]
 8019280:	fb93 f8f8 	sdiv	r8, r3, r8
 8019284:	4442      	add	r2, r8
 8019286:	9203      	str	r2, [sp, #12]
 8019288:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801928a:	682a      	ldr	r2, [r5, #0]
 801928c:	4407      	add	r7, r0
 801928e:	9600      	str	r6, [sp, #0]
 8019290:	68e0      	ldr	r0, [r4, #12]
 8019292:	f7ff ff83 	bl	801919c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019296:	9600      	str	r6, [sp, #0]
 8019298:	4680      	mov	r8, r0
 801929a:	69a3      	ldr	r3, [r4, #24]
 801929c:	686a      	ldr	r2, [r5, #4]
 801929e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80192a0:	6920      	ldr	r0, [r4, #16]
 80192a2:	f7ff ff7b 	bl	801919c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80192a6:	4440      	add	r0, r8
 80192a8:	e7cc      	b.n	8019244 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80192aa:	bf00      	nop
 80192ac:	2005ba94 	.word	0x2005ba94

080192b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80192b0:	4b07      	ldr	r3, [pc, #28]	@ (80192d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80192b2:	781b      	ldrb	r3, [r3, #0]
 80192b4:	2b01      	cmp	r3, #1
 80192b6:	d109      	bne.n	80192cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80192b8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80192bc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80192c0:	8003      	strh	r3, [r0, #0]
 80192c2:	4b04      	ldr	r3, [pc, #16]	@ (80192d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80192c4:	881b      	ldrh	r3, [r3, #0]
 80192c6:	3b01      	subs	r3, #1
 80192c8:	1a9b      	subs	r3, r3, r2
 80192ca:	800b      	strh	r3, [r1, #0]
 80192cc:	4770      	bx	lr
 80192ce:	bf00      	nop
 80192d0:	2005ba78 	.word	0x2005ba78
 80192d4:	2005ba74 	.word	0x2005ba74

080192d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80192d8:	b510      	push	{r4, lr}
 80192da:	4b07      	ldr	r3, [pc, #28]	@ (80192f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80192dc:	781b      	ldrb	r3, [r3, #0]
 80192de:	2b01      	cmp	r3, #1
 80192e0:	d108      	bne.n	80192f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80192e2:	4b06      	ldr	r3, [pc, #24]	@ (80192fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80192e4:	880c      	ldrh	r4, [r1, #0]
 80192e6:	881b      	ldrh	r3, [r3, #0]
 80192e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80192ec:	3b01      	subs	r3, #1
 80192ee:	1b1b      	subs	r3, r3, r4
 80192f0:	8003      	strh	r3, [r0, #0]
 80192f2:	800a      	strh	r2, [r1, #0]
 80192f4:	bd10      	pop	{r4, pc}
 80192f6:	bf00      	nop
 80192f8:	2005ba78 	.word	0x2005ba78
 80192fc:	2005ba74 	.word	0x2005ba74

08019300 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019300:	b510      	push	{r4, lr}
 8019302:	4b0a      	ldr	r3, [pc, #40]	@ (801932c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019304:	781b      	ldrb	r3, [r3, #0]
 8019306:	2b01      	cmp	r3, #1
 8019308:	d10e      	bne.n	8019328 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801930a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801930e:	8843      	ldrh	r3, [r0, #2]
 8019310:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019314:	18ca      	adds	r2, r1, r3
 8019316:	4b06      	ldr	r3, [pc, #24]	@ (8019330 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019318:	8044      	strh	r4, [r0, #2]
 801931a:	881b      	ldrh	r3, [r3, #0]
 801931c:	1a9b      	subs	r3, r3, r2
 801931e:	8003      	strh	r3, [r0, #0]
 8019320:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019324:	8081      	strh	r1, [r0, #4]
 8019326:	80c3      	strh	r3, [r0, #6]
 8019328:	bd10      	pop	{r4, pc}
 801932a:	bf00      	nop
 801932c:	2005ba78 	.word	0x2005ba78
 8019330:	2005ba74 	.word	0x2005ba74

08019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019334:	4b08      	ldr	r3, [pc, #32]	@ (8019358 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8019336:	781b      	ldrb	r3, [r3, #0]
 8019338:	2b01      	cmp	r3, #1
 801933a:	d10c      	bne.n	8019356 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801933c:	8803      	ldrh	r3, [r0, #0]
 801933e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8019342:	8842      	ldrh	r2, [r0, #2]
 8019344:	8002      	strh	r2, [r0, #0]
 8019346:	185a      	adds	r2, r3, r1
 8019348:	4b04      	ldr	r3, [pc, #16]	@ (801935c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801934a:	881b      	ldrh	r3, [r3, #0]
 801934c:	1a9b      	subs	r3, r3, r2
 801934e:	8043      	strh	r3, [r0, #2]
 8019350:	88c3      	ldrh	r3, [r0, #6]
 8019352:	80c1      	strh	r1, [r0, #6]
 8019354:	8083      	strh	r3, [r0, #4]
 8019356:	4770      	bx	lr
 8019358:	2005ba78 	.word	0x2005ba78
 801935c:	2005ba74 	.word	0x2005ba74

08019360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019360:	b510      	push	{r4, lr}
 8019362:	4b07      	ldr	r3, [pc, #28]	@ (8019380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019364:	781b      	ldrb	r3, [r3, #0]
 8019366:	2b01      	cmp	r3, #1
 8019368:	d108      	bne.n	801937c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801936a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801936e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019372:	8003      	strh	r3, [r0, #0]
 8019374:	8893      	ldrh	r3, [r2, #4]
 8019376:	3b01      	subs	r3, #1
 8019378:	1b1b      	subs	r3, r3, r4
 801937a:	800b      	strh	r3, [r1, #0]
 801937c:	bd10      	pop	{r4, pc}
 801937e:	bf00      	nop
 8019380:	2005ba78 	.word	0x2005ba78

08019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019384:	b510      	push	{r4, lr}
 8019386:	4b0a      	ldr	r3, [pc, #40]	@ (80193b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019388:	460a      	mov	r2, r1
 801938a:	781b      	ldrb	r3, [r3, #0]
 801938c:	2b01      	cmp	r3, #1
 801938e:	d10d      	bne.n	80193ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019390:	8881      	ldrh	r1, [r0, #4]
 8019392:	8803      	ldrh	r3, [r0, #0]
 8019394:	440b      	add	r3, r1
 8019396:	4601      	mov	r1, r0
 8019398:	3b01      	subs	r3, #1
 801939a:	f821 3b02 	strh.w	r3, [r1], #2
 801939e:	f7ff ffdf 	bl	8019360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80193a2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80193a6:	88c2      	ldrh	r2, [r0, #6]
 80193a8:	80c3      	strh	r3, [r0, #6]
 80193aa:	8082      	strh	r2, [r0, #4]
 80193ac:	bd10      	pop	{r4, pc}
 80193ae:	bf00      	nop
 80193b0:	2005ba78 	.word	0x2005ba78

080193b4 <_ZN8touchgfx11Application13requestRedrawEv>:
 80193b4:	2100      	movs	r1, #0
 80193b6:	4b06      	ldr	r3, [pc, #24]	@ (80193d0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80193b8:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80193bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80193c0:	4b04      	ldr	r3, [pc, #16]	@ (80193d4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80193c2:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80193c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193ca:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80193ce:	4770      	bx	lr
 80193d0:	2005ba74 	.word	0x2005ba74
 80193d4:	2005ba76 	.word	0x2005ba76

080193d8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80193d8:	4b03      	ldr	r3, [pc, #12]	@ (80193e8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80193da:	6818      	ldr	r0, [r3, #0]
 80193dc:	b110      	cbz	r0, 80193e4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80193de:	6803      	ldr	r3, [r0, #0]
 80193e0:	699b      	ldr	r3, [r3, #24]
 80193e2:	4718      	bx	r3
 80193e4:	4770      	bx	lr
 80193e6:	bf00      	nop
 80193e8:	2005bac4 	.word	0x2005bac4

080193ec <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80193ec:	4770      	bx	lr
	...

080193f0 <_ZN8touchgfx11Application4drawEv>:
 80193f0:	b507      	push	{r0, r1, r2, lr}
 80193f2:	2100      	movs	r1, #0
 80193f4:	4b08      	ldr	r3, [pc, #32]	@ (8019418 <_ZN8touchgfx11Application4drawEv+0x28>)
 80193f6:	9100      	str	r1, [sp, #0]
 80193f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80193fc:	4b07      	ldr	r3, [pc, #28]	@ (801941c <_ZN8touchgfx11Application4drawEv+0x2c>)
 80193fe:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019406:	4669      	mov	r1, sp
 8019408:	f8ad 3006 	strh.w	r3, [sp, #6]
 801940c:	6803      	ldr	r3, [r0, #0]
 801940e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019410:	4798      	blx	r3
 8019412:	b003      	add	sp, #12
 8019414:	f85d fb04 	ldr.w	pc, [sp], #4
 8019418:	2005ba74 	.word	0x2005ba74
 801941c:	2005ba76 	.word	0x2005ba76

08019420 <_ZN8touchgfx11Application10invalidateEv>:
 8019420:	2100      	movs	r1, #0
 8019422:	4b09      	ldr	r3, [pc, #36]	@ (8019448 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8019424:	b082      	sub	sp, #8
 8019426:	f9b3 2000 	ldrsh.w	r2, [r3]
 801942a:	4b08      	ldr	r3, [pc, #32]	@ (801944c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801942c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019434:	9100      	str	r1, [sp, #0]
 8019436:	f8ad 3006 	strh.w	r3, [sp, #6]
 801943a:	6803      	ldr	r3, [r0, #0]
 801943c:	aa02      	add	r2, sp, #8
 801943e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019440:	e912 0006 	ldmdb	r2, {r1, r2}
 8019444:	b002      	add	sp, #8
 8019446:	4718      	bx	r3
 8019448:	2005ba74 	.word	0x2005ba74
 801944c:	2005ba76 	.word	0x2005ba76

08019450 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019450:	4b03      	ldr	r3, [pc, #12]	@ (8019460 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019452:	6818      	ldr	r0, [r3, #0]
 8019454:	b110      	cbz	r0, 801945c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019456:	6803      	ldr	r3, [r0, #0]
 8019458:	69db      	ldr	r3, [r3, #28]
 801945a:	4718      	bx	r3
 801945c:	4770      	bx	lr
 801945e:	bf00      	nop
 8019460:	2005bac4 	.word	0x2005bac4

08019464 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019464:	4b03      	ldr	r3, [pc, #12]	@ (8019474 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8019466:	6818      	ldr	r0, [r3, #0]
 8019468:	b110      	cbz	r0, 8019470 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801946a:	6803      	ldr	r3, [r0, #0]
 801946c:	6a1b      	ldr	r3, [r3, #32]
 801946e:	4718      	bx	r3
 8019470:	4770      	bx	lr
 8019472:	bf00      	nop
 8019474:	2005bac4 	.word	0x2005bac4

08019478 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8019478:	2300      	movs	r3, #0
 801947a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801947e:	4770      	bx	lr

08019480 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019480:	4b03      	ldr	r3, [pc, #12]	@ (8019490 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019482:	6818      	ldr	r0, [r3, #0]
 8019484:	b110      	cbz	r0, 801948c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019486:	6803      	ldr	r3, [r0, #0]
 8019488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801948a:	4718      	bx	r3
 801948c:	4770      	bx	lr
 801948e:	bf00      	nop
 8019490:	2005bac4 	.word	0x2005bac4

08019494 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019494:	b510      	push	{r4, lr}
 8019496:	f9b1 4000 	ldrsh.w	r4, [r1]
 801949a:	888a      	ldrh	r2, [r1, #4]
 801949c:	f9b0 3000 	ldrsh.w	r3, [r0]
 80194a0:	4422      	add	r2, r4
 80194a2:	b212      	sxth	r2, r2
 80194a4:	4293      	cmp	r3, r2
 80194a6:	da15      	bge.n	80194d4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80194a8:	8882      	ldrh	r2, [r0, #4]
 80194aa:	4413      	add	r3, r2
 80194ac:	b21b      	sxth	r3, r3
 80194ae:	429c      	cmp	r4, r3
 80194b0:	da10      	bge.n	80194d4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80194b2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80194b6:	88c9      	ldrh	r1, [r1, #6]
 80194b8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80194bc:	4419      	add	r1, r3
 80194be:	b209      	sxth	r1, r1
 80194c0:	428a      	cmp	r2, r1
 80194c2:	da07      	bge.n	80194d4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80194c4:	88c0      	ldrh	r0, [r0, #6]
 80194c6:	4410      	add	r0, r2
 80194c8:	b200      	sxth	r0, r0
 80194ca:	4283      	cmp	r3, r0
 80194cc:	bfac      	ite	ge
 80194ce:	2000      	movge	r0, #0
 80194d0:	2001      	movlt	r0, #1
 80194d2:	bd10      	pop	{r4, pc}
 80194d4:	2000      	movs	r0, #0
 80194d6:	e7fc      	b.n	80194d2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080194d8 <_ZN8touchgfx4Rect10restrictToEss>:
 80194d8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80194dc:	b510      	push	{r4, lr}
 80194de:	2b00      	cmp	r3, #0
 80194e0:	da04      	bge.n	80194ec <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80194e2:	8884      	ldrh	r4, [r0, #4]
 80194e4:	4423      	add	r3, r4
 80194e6:	8083      	strh	r3, [r0, #4]
 80194e8:	2300      	movs	r3, #0
 80194ea:	8003      	strh	r3, [r0, #0]
 80194ec:	f9b0 4000 	ldrsh.w	r4, [r0]
 80194f0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80194f4:	1b09      	subs	r1, r1, r4
 80194f6:	428b      	cmp	r3, r1
 80194f8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80194fc:	bfc8      	it	gt
 80194fe:	8081      	strhgt	r1, [r0, #4]
 8019500:	2b00      	cmp	r3, #0
 8019502:	da04      	bge.n	801950e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8019504:	88c1      	ldrh	r1, [r0, #6]
 8019506:	440b      	add	r3, r1
 8019508:	80c3      	strh	r3, [r0, #6]
 801950a:	2300      	movs	r3, #0
 801950c:	8043      	strh	r3, [r0, #2]
 801950e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019512:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019516:	1a52      	subs	r2, r2, r1
 8019518:	4293      	cmp	r3, r2
 801951a:	bfc8      	it	gt
 801951c:	80c2      	strhgt	r2, [r0, #6]
 801951e:	bd10      	pop	{r4, pc}

08019520 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019520:	b510      	push	{r4, lr}
 8019522:	460c      	mov	r4, r1
 8019524:	4b0f      	ldr	r3, [pc, #60]	@ (8019564 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8019526:	4620      	mov	r0, r4
 8019528:	f9b3 2000 	ldrsh.w	r2, [r3]
 801952c:	4b0e      	ldr	r3, [pc, #56]	@ (8019568 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801952e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019532:	f7ff ffd1 	bl	80194d8 <_ZN8touchgfx4Rect10restrictToEss>
 8019536:	4b0d      	ldr	r3, [pc, #52]	@ (801956c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8019538:	6818      	ldr	r0, [r3, #0]
 801953a:	b190      	cbz	r0, 8019562 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801953c:	6803      	ldr	r3, [r0, #0]
 801953e:	4621      	mov	r1, r4
 8019540:	689b      	ldr	r3, [r3, #8]
 8019542:	4798      	blx	r3
 8019544:	4b0a      	ldr	r3, [pc, #40]	@ (8019570 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8019546:	6818      	ldr	r0, [r3, #0]
 8019548:	b118      	cbz	r0, 8019552 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801954a:	6803      	ldr	r3, [r0, #0]
 801954c:	4621      	mov	r1, r4
 801954e:	689b      	ldr	r3, [r3, #8]
 8019550:	4798      	blx	r3
 8019552:	4b08      	ldr	r3, [pc, #32]	@ (8019574 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8019554:	4621      	mov	r1, r4
 8019556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801955a:	6818      	ldr	r0, [r3, #0]
 801955c:	6803      	ldr	r3, [r0, #0]
 801955e:	69db      	ldr	r3, [r3, #28]
 8019560:	4718      	bx	r3
 8019562:	bd10      	pop	{r4, pc}
 8019564:	2005ba76 	.word	0x2005ba76
 8019568:	2005ba74 	.word	0x2005ba74
 801956c:	2005bac4 	.word	0x2005bac4
 8019570:	2005bac0 	.word	0x2005bac0
 8019574:	2005ba80 	.word	0x2005ba80

08019578 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801957a:	4606      	mov	r6, r0
 801957c:	4608      	mov	r0, r1
 801957e:	460f      	mov	r7, r1
 8019580:	f7fa fd83 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019584:	b9e8      	cbnz	r0, 80195c2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019586:	f9b7 5000 	ldrsh.w	r5, [r7]
 801958a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801958e:	42a5      	cmp	r5, r4
 8019590:	db17      	blt.n	80195c2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019592:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8019596:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801959a:	429a      	cmp	r2, r3
 801959c:	db11      	blt.n	80195c2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801959e:	88b9      	ldrh	r1, [r7, #4]
 80195a0:	440d      	add	r5, r1
 80195a2:	88b1      	ldrh	r1, [r6, #4]
 80195a4:	b22d      	sxth	r5, r5
 80195a6:	440c      	add	r4, r1
 80195a8:	b224      	sxth	r4, r4
 80195aa:	42a5      	cmp	r5, r4
 80195ac:	dc09      	bgt.n	80195c2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80195ae:	88f8      	ldrh	r0, [r7, #6]
 80195b0:	4410      	add	r0, r2
 80195b2:	88f2      	ldrh	r2, [r6, #6]
 80195b4:	b200      	sxth	r0, r0
 80195b6:	4413      	add	r3, r2
 80195b8:	b21b      	sxth	r3, r3
 80195ba:	4298      	cmp	r0, r3
 80195bc:	bfcc      	ite	gt
 80195be:	2000      	movgt	r0, #0
 80195c0:	2001      	movle	r0, #1
 80195c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080195c4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80195c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195c6:	4604      	mov	r4, r0
 80195c8:	4608      	mov	r0, r1
 80195ca:	460d      	mov	r5, r1
 80195cc:	f7fa fd5d 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 80195d0:	b978      	cbnz	r0, 80195f2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80195d2:	4620      	mov	r0, r4
 80195d4:	f7fa fd59 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 80195d8:	f9b5 6000 	ldrsh.w	r6, [r5]
 80195dc:	b150      	cbz	r0, 80195f4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80195de:	8026      	strh	r6, [r4, #0]
 80195e0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80195e4:	8063      	strh	r3, [r4, #2]
 80195e6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80195ea:	80a3      	strh	r3, [r4, #4]
 80195ec:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80195f0:	80e3      	strh	r3, [r4, #6]
 80195f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195f4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80195f8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80195fc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019600:	42b1      	cmp	r1, r6
 8019602:	460f      	mov	r7, r1
 8019604:	bfa8      	it	ge
 8019606:	4637      	movge	r7, r6
 8019608:	4293      	cmp	r3, r2
 801960a:	4618      	mov	r0, r3
 801960c:	bfa8      	it	ge
 801960e:	4610      	movge	r0, r2
 8019610:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8019614:	88ed      	ldrh	r5, [r5, #6]
 8019616:	4466      	add	r6, ip
 8019618:	442a      	add	r2, r5
 801961a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801961e:	88e5      	ldrh	r5, [r4, #6]
 8019620:	4461      	add	r1, ip
 8019622:	442b      	add	r3, r5
 8019624:	b236      	sxth	r6, r6
 8019626:	b209      	sxth	r1, r1
 8019628:	b212      	sxth	r2, r2
 801962a:	b21b      	sxth	r3, r3
 801962c:	428e      	cmp	r6, r1
 801962e:	bfac      	ite	ge
 8019630:	ebc7 0106 	rsbge	r1, r7, r6
 8019634:	ebc7 0101 	rsblt	r1, r7, r1
 8019638:	429a      	cmp	r2, r3
 801963a:	bfac      	ite	ge
 801963c:	ebc0 0202 	rsbge	r2, r0, r2
 8019640:	ebc0 0203 	rsblt	r2, r0, r3
 8019644:	8027      	strh	r7, [r4, #0]
 8019646:	8060      	strh	r0, [r4, #2]
 8019648:	80a1      	strh	r1, [r4, #4]
 801964a:	80e2      	strh	r2, [r4, #6]
 801964c:	e7d1      	b.n	80195f2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08019650 <_ZN8touchgfx11Application11getInstanceEv>:
 8019650:	4b01      	ldr	r3, [pc, #4]	@ (8019658 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019652:	6818      	ldr	r0, [r3, #0]
 8019654:	4770      	bx	lr
 8019656:	bf00      	nop
 8019658:	2005bad4 	.word	0x2005bad4

0801965c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801965c:	2300      	movs	r3, #0
 801965e:	b510      	push	{r4, lr}
 8019660:	4604      	mov	r4, r0
 8019662:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8019666:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801966a:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801966e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8019672:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8019676:	429a      	cmp	r2, r3
 8019678:	d90e      	bls.n	8019698 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801967a:	18e2      	adds	r2, r4, r3
 801967c:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8019680:	b122      	cbz	r2, 801968c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8019682:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8019686:	6803      	ldr	r3, [r0, #0]
 8019688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801968a:	4798      	blx	r3
 801968c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8019690:	3301      	adds	r3, #1
 8019692:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8019696:	e7ea      	b.n	801966e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8019698:	bd10      	pop	{r4, pc}

0801969a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801969a:	2200      	movs	r2, #0
 801969c:	b530      	push	{r4, r5, lr}
 801969e:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 80196a2:	b293      	uxth	r3, r2
 80196a4:	429d      	cmp	r5, r3
 80196a6:	d90e      	bls.n	80196c6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80196a8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80196ac:	428b      	cmp	r3, r1
 80196ae:	d10b      	bne.n	80196c8 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80196b0:	1884      	adds	r4, r0, r2
 80196b2:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 80196b6:	b13b      	cbz	r3, 80196c8 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80196b8:	3b01      	subs	r3, #1
 80196ba:	b2db      	uxtb	r3, r3
 80196bc:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 80196c0:	b90b      	cbnz	r3, 80196c6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80196c2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80196c6:	bd30      	pop	{r4, r5, pc}
 80196c8:	3201      	adds	r2, #1
 80196ca:	e7ea      	b.n	80196a2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

080196cc <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80196cc:	2300      	movs	r3, #0
 80196ce:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80196d2:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80196d6:	30a4      	adds	r0, #164	@ 0xa4
 80196d8:	f802 3b01 	strb.w	r3, [r2], #1
 80196dc:	4282      	cmp	r2, r0
 80196de:	d1fb      	bne.n	80196d8 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80196e0:	4770      	bx	lr
	...

080196e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80196e4:	b570      	push	{r4, r5, r6, lr}
 80196e6:	4c0b      	ldr	r4, [pc, #44]	@ (8019714 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80196e8:	4605      	mov	r5, r0
 80196ea:	6820      	ldr	r0, [r4, #0]
 80196ec:	460e      	mov	r6, r1
 80196ee:	b110      	cbz	r0, 80196f6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80196f0:	6803      	ldr	r3, [r0, #0]
 80196f2:	695b      	ldr	r3, [r3, #20]
 80196f4:	4798      	blx	r3
 80196f6:	1d28      	adds	r0, r5, #4
 80196f8:	f7ff ffe8 	bl	80196cc <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80196fc:	6026      	str	r6, [r4, #0]
 80196fe:	6833      	ldr	r3, [r6, #0]
 8019700:	4630      	mov	r0, r6
 8019702:	68db      	ldr	r3, [r3, #12]
 8019704:	4798      	blx	r3
 8019706:	682b      	ldr	r3, [r5, #0]
 8019708:	4628      	mov	r0, r5
 801970a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801970e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019710:	4718      	bx	r3
 8019712:	bf00      	nop
 8019714:	2005bac4 	.word	0x2005bac4

08019718 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8019718:	2300      	movs	r3, #0
 801971a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801971c:	461a      	mov	r2, r3
 801971e:	461c      	mov	r4, r3
 8019720:	461d      	mov	r5, r3
 8019722:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8019726:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801972a:	459c      	cmp	ip, r3
 801972c:	dd1a      	ble.n	8019764 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801972e:	18c6      	adds	r6, r0, r3
 8019730:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8019734:	b16e      	cbz	r6, 8019752 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8019736:	429a      	cmp	r2, r3
 8019738:	d008      	beq.n	801974c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801973a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801973e:	fa1f fe82 	uxth.w	lr, r2
 8019742:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8019746:	1887      	adds	r7, r0, r2
 8019748:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801974c:	3201      	adds	r2, #1
 801974e:	3301      	adds	r3, #1
 8019750:	e7eb      	b.n	801972a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8019752:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8019756:	4299      	cmp	r1, r3
 8019758:	bfa8      	it	ge
 801975a:	3501      	addge	r5, #1
 801975c:	429e      	cmp	r6, r3
 801975e:	bfc8      	it	gt
 8019760:	3401      	addgt	r4, #1
 8019762:	e7f4      	b.n	801974e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8019764:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8019768:	1b49      	subs	r1, r1, r5
 801976a:	1b1b      	subs	r3, r3, r4
 801976c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8019770:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8019774:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8019778:	4293      	cmp	r3, r2
 801977a:	dd03      	ble.n	8019784 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801977c:	3b01      	subs	r3, #1
 801977e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8019782:	e7f7      	b.n	8019774 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8019784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08019788 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019788:	b570      	push	{r4, r5, r6, lr}
 801978a:	4d16      	ldr	r5, [pc, #88]	@ (80197e4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801978c:	4604      	mov	r4, r0
 801978e:	6828      	ldr	r0, [r5, #0]
 8019790:	b140      	cbz	r0, 80197a4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019792:	7a03      	ldrb	r3, [r0, #8]
 8019794:	b933      	cbnz	r3, 80197a4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019796:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801979a:	6803      	ldr	r3, [r0, #0]
 801979c:	689b      	ldr	r3, [r3, #8]
 801979e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197a2:	4718      	bx	r3
 80197a4:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 80197a8:	4e0f      	ldr	r6, [pc, #60]	@ (80197e8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80197aa:	b973      	cbnz	r3, 80197ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80197ac:	b168      	cbz	r0, 80197ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80197ae:	7a03      	ldrb	r3, [r0, #8]
 80197b0:	b15b      	cbz	r3, 80197ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80197b2:	6830      	ldr	r0, [r6, #0]
 80197b4:	b110      	cbz	r0, 80197bc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80197b6:	6803      	ldr	r3, [r0, #0]
 80197b8:	691b      	ldr	r3, [r3, #16]
 80197ba:	4798      	blx	r3
 80197bc:	6828      	ldr	r0, [r5, #0]
 80197be:	6803      	ldr	r3, [r0, #0]
 80197c0:	68db      	ldr	r3, [r3, #12]
 80197c2:	4798      	blx	r3
 80197c4:	2301      	movs	r3, #1
 80197c6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80197ca:	3404      	adds	r4, #4
 80197cc:	4620      	mov	r0, r4
 80197ce:	f7ff ff45 	bl	801965c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80197d2:	4620      	mov	r0, r4
 80197d4:	f7ff ffa0 	bl	8019718 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80197d8:	6830      	ldr	r0, [r6, #0]
 80197da:	b110      	cbz	r0, 80197e2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80197dc:	6803      	ldr	r3, [r0, #0]
 80197de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197e0:	e7dd      	b.n	801979e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80197e2:	bd70      	pop	{r4, r5, r6, pc}
 80197e4:	2005bac8 	.word	0x2005bac8
 80197e8:	2005bac4 	.word	0x2005bac4

080197ec <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 80197ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197ee:	2300      	movs	r3, #0
 80197f0:	4604      	mov	r4, r0
 80197f2:	460d      	mov	r5, r1
 80197f4:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 80197f8:	4618      	mov	r0, r3
 80197fa:	b29a      	uxth	r2, r3
 80197fc:	4291      	cmp	r1, r2
 80197fe:	d911      	bls.n	8019824 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x38>
 8019800:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8019804:	18e6      	adds	r6, r4, r3
 8019806:	42af      	cmp	r7, r5
 8019808:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 801980c:	d105      	bne.n	801981a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801980e:	2aff      	cmp	r2, #255	@ 0xff
 8019810:	d002      	beq.n	8019818 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8019812:	3201      	adds	r2, #1
 8019814:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 8019818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801981a:	2a00      	cmp	r2, #0
 801981c:	bf08      	it	eq
 801981e:	2001      	moveq	r0, #1
 8019820:	3301      	adds	r3, #1
 8019822:	e7ea      	b.n	80197fa <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 8019824:	b120      	cbz	r0, 8019830 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 8019826:	2920      	cmp	r1, #32
 8019828:	d102      	bne.n	8019830 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 801982a:	4620      	mov	r0, r4
 801982c:	f7ff ff74 	bl	8019718 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8019830:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 8019834:	2b1f      	cmp	r3, #31
 8019836:	d8ef      	bhi.n	8019818 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8019838:	2101      	movs	r1, #1
 801983a:	18e2      	adds	r2, r4, r3
 801983c:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8019840:	185a      	adds	r2, r3, r1
 8019842:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 8019846:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801984a:	e7e5      	b.n	8019818 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801984c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801984c:	4603      	mov	r3, r0
 801984e:	2200      	movs	r2, #0
 8019850:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8019854:	801a      	strh	r2, [r3, #0]
 8019856:	805a      	strh	r2, [r3, #2]
 8019858:	809a      	strh	r2, [r3, #4]
 801985a:	80da      	strh	r2, [r3, #6]
 801985c:	3308      	adds	r3, #8
 801985e:	428b      	cmp	r3, r1
 8019860:	d1f8      	bne.n	8019854 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019862:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8019866:	4770      	bx	lr

08019868 <_ZN8touchgfx11ApplicationC1Ev>:
 8019868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801986a:	4606      	mov	r6, r0
 801986c:	4604      	mov	r4, r0
 801986e:	2500      	movs	r5, #0
 8019870:	4b1b      	ldr	r3, [pc, #108]	@ (80198e0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8019872:	22a8      	movs	r2, #168	@ 0xa8
 8019874:	f846 3b04 	str.w	r3, [r6], #4
 8019878:	2100      	movs	r1, #0
 801987a:	4630      	mov	r0, r6
 801987c:	f013 fb72 	bl	802cf64 <memset>
 8019880:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8019884:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8019888:	f7ff ffe0 	bl	801984c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801988c:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8019890:	f7ff ffdc 	bl	801984c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019894:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8019898:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801989c:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80198a0:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80198a4:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80198a8:	490e      	ldr	r1, [pc, #56]	@ (80198e4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80198aa:	480f      	ldr	r0, [pc, #60]	@ (80198e8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80198ac:	f011 fae8 	bl	802ae80 <CRC_Lock>
 80198b0:	4f0e      	ldr	r7, [pc, #56]	@ (80198ec <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80198b2:	4b0f      	ldr	r3, [pc, #60]	@ (80198f0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80198b4:	b158      	cbz	r0, 80198ce <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80198b6:	801d      	strh	r5, [r3, #0]
 80198b8:	2300      	movs	r3, #0
 80198ba:	4a0e      	ldr	r2, [pc, #56]	@ (80198f4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80198bc:	4630      	mov	r0, r6
 80198be:	6013      	str	r3, [r2, #0]
 80198c0:	4a0d      	ldr	r2, [pc, #52]	@ (80198f8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80198c2:	603b      	str	r3, [r7, #0]
 80198c4:	6013      	str	r3, [r2, #0]
 80198c6:	f7ff ff01 	bl	80196cc <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80198ca:	4620      	mov	r0, r4
 80198cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80198d2:	2002      	movs	r0, #2
 80198d4:	801a      	strh	r2, [r3, #0]
 80198d6:	6038      	str	r0, [r7, #0]
 80198d8:	f001 ff30 	bl	801b73c <_ZN8touchgfx6Screen4drawEv>
 80198dc:	e7ec      	b.n	80198b8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80198de:	bf00      	nop
 80198e0:	0802f86c 	.word	0x0802f86c
 80198e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80198e8:	f407a5c2 	.word	0xf407a5c2
 80198ec:	2005bac4 	.word	0x2005bac4
 80198f0:	2000001c 	.word	0x2000001c
 80198f4:	2005bad4 	.word	0x2005bad4
 80198f8:	2005bac8 	.word	0x2005bac8

080198fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80198fc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8019900:	b510      	push	{r4, lr}
 8019902:	3b01      	subs	r3, #1
 8019904:	b29b      	uxth	r3, r3
 8019906:	428b      	cmp	r3, r1
 8019908:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801990c:	d908      	bls.n	8019920 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801990e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8019912:	681a      	ldr	r2, [r3, #0]
 8019914:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8019918:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801991c:	685a      	ldr	r2, [r3, #4]
 801991e:	6062      	str	r2, [r4, #4]
 8019920:	bd10      	pop	{r4, pc}
	...

08019924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019928:	4b92      	ldr	r3, [pc, #584]	@ (8019b74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 801992a:	b08f      	sub	sp, #60	@ 0x3c
 801992c:	ac0a      	add	r4, sp, #40	@ 0x28
 801992e:	e884 0006 	stmia.w	r4, {r1, r2}
 8019932:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019936:	4b90      	ldr	r3, [pc, #576]	@ (8019b78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 8019938:	4683      	mov	fp, r0
 801993a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801993e:	4620      	mov	r0, r4
 8019940:	f7ff fdca 	bl	80194d8 <_ZN8touchgfx4Rect10restrictToEss>
 8019944:	4620      	mov	r0, r4
 8019946:	f7fa fba0 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 801994a:	2800      	cmp	r0, #0
 801994c:	d170      	bne.n	8019a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801994e:	4b8b      	ldr	r3, [pc, #556]	@ (8019b7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8019956:	2b02      	cmp	r3, #2
 8019958:	d06a      	beq.n	8019a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801995a:	9403      	str	r4, [sp, #12]
 801995c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8019960:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8019964:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8019968:	35a4      	adds	r5, #164	@ 0xa4
 801996a:	9301      	str	r3, [sp, #4]
 801996c:	b15c      	cbz	r4, 8019986 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801996e:	4629      	mov	r1, r5
 8019970:	9803      	ldr	r0, [sp, #12]
 8019972:	f7ff fe01 	bl	8019578 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019976:	3c01      	subs	r4, #1
 8019978:	b118      	cbz	r0, 8019982 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801997a:	b2a1      	uxth	r1, r4
 801997c:	9801      	ldr	r0, [sp, #4]
 801997e:	f7ff ffbd 	bl	80198fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019982:	3d08      	subs	r5, #8
 8019984:	e7f2      	b.n	801996c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8019986:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801998a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801998e:	9302      	str	r3, [sp, #8]
 8019990:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019994:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8019998:	f8cd a010 	str.w	sl, [sp, #16]
 801999c:	9306      	str	r3, [sp, #24]
 801999e:	445c      	add	r4, fp
 80199a0:	2500      	movs	r5, #0
 80199a2:	4626      	mov	r6, r4
 80199a4:	462f      	mov	r7, r5
 80199a6:	f8cd a014 	str.w	sl, [sp, #20]
 80199aa:	9b05      	ldr	r3, [sp, #20]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d073      	beq.n	8019a98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 80199b0:	9903      	ldr	r1, [sp, #12]
 80199b2:	4630      	mov	r0, r6
 80199b4:	f7ff fd6e 	bl	8019494 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80199b8:	b350      	cbz	r0, 8019a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 80199ba:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80199be:	f9b6 c000 	ldrsh.w	ip, [r6]
 80199c2:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 80199c6:	45e6      	cmp	lr, ip
 80199c8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80199cc:	db33      	blt.n	8019a36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 80199ce:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80199d2:	88b3      	ldrh	r3, [r6, #4]
 80199d4:	4472      	add	r2, lr
 80199d6:	4463      	add	r3, ip
 80199d8:	b212      	sxth	r2, r2
 80199da:	b21b      	sxth	r3, r3
 80199dc:	429a      	cmp	r2, r3
 80199de:	dc2a      	bgt.n	8019a36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 80199e0:	88f3      	ldrh	r3, [r6, #6]
 80199e2:	fa1f f289 	uxth.w	r2, r9
 80199e6:	4413      	add	r3, r2
 80199e8:	b29b      	uxth	r3, r3
 80199ea:	45c8      	cmp	r8, r9
 80199ec:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80199f0:	fa1f fc88 	uxth.w	ip, r8
 80199f4:	fa0f fe83 	sxth.w	lr, r3
 80199f8:	db0f      	blt.n	8019a1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 80199fa:	eba3 030c 	sub.w	r3, r3, ip
 80199fe:	1ac9      	subs	r1, r1, r3
 8019a00:	b209      	sxth	r1, r1
 8019a02:	2900      	cmp	r1, #0
 8019a04:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019a08:	dd12      	ble.n	8019a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8019a0a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8019a0e:	4605      	mov	r5, r0
 8019a10:	9b05      	ldr	r3, [sp, #20]
 8019a12:	3e08      	subs	r6, #8
 8019a14:	3b01      	subs	r3, #1
 8019a16:	9305      	str	r3, [sp, #20]
 8019a18:	e7c7      	b.n	80199aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 8019a1a:	4461      	add	r1, ip
 8019a1c:	b209      	sxth	r1, r1
 8019a1e:	4571      	cmp	r1, lr
 8019a20:	dc38      	bgt.n	8019a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019a22:	eba2 020c 	sub.w	r2, r2, ip
 8019a26:	b212      	sxth	r2, r2
 8019a28:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8019a2c:	2a00      	cmp	r2, #0
 8019a2e:	dcee      	bgt.n	8019a0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019a30:	b00f      	add	sp, #60	@ 0x3c
 8019a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a36:	45c8      	cmp	r8, r9
 8019a38:	db2c      	blt.n	8019a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019a3a:	88f3      	ldrh	r3, [r6, #6]
 8019a3c:	4499      	add	r9, r3
 8019a3e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8019a42:	fa0f f989 	sxth.w	r9, r9
 8019a46:	4498      	add	r8, r3
 8019a48:	fa0f f888 	sxth.w	r8, r8
 8019a4c:	45c1      	cmp	r9, r8
 8019a4e:	db21      	blt.n	8019a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019a50:	88b3      	ldrh	r3, [r6, #4]
 8019a52:	fa1f f28c 	uxth.w	r2, ip
 8019a56:	4413      	add	r3, r2
 8019a58:	b29b      	uxth	r3, r3
 8019a5a:	45e6      	cmp	lr, ip
 8019a5c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019a60:	fa1f f88e 	uxth.w	r8, lr
 8019a64:	fa0f f983 	sxth.w	r9, r3
 8019a68:	db0a      	blt.n	8019a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 8019a6a:	eba3 0308 	sub.w	r3, r3, r8
 8019a6e:	1ac9      	subs	r1, r1, r3
 8019a70:	b209      	sxth	r1, r1
 8019a72:	2900      	cmp	r1, #0
 8019a74:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8019a78:	ddda      	ble.n	8019a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8019a7a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8019a7e:	e7c6      	b.n	8019a0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019a80:	4441      	add	r1, r8
 8019a82:	b209      	sxth	r1, r1
 8019a84:	4549      	cmp	r1, r9
 8019a86:	dc05      	bgt.n	8019a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019a88:	eba2 0208 	sub.w	r2, r2, r8
 8019a8c:	b212      	sxth	r2, r2
 8019a8e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8019a92:	e7cb      	b.n	8019a2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8019a94:	4607      	mov	r7, r0
 8019a96:	e7bb      	b.n	8019a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8019a98:	2d00      	cmp	r5, #0
 8019a9a:	d181      	bne.n	80199a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8019a9c:	2f00      	cmp	r7, #0
 8019a9e:	f000 81e0 	beq.w	8019e62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8019aa2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8019aa6:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8019aaa:	b2b3      	uxth	r3, r6
 8019aac:	9305      	str	r3, [sp, #20]
 8019aae:	9a05      	ldr	r2, [sp, #20]
 8019ab0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8019ab4:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8019ab8:	4413      	add	r3, r2
 8019aba:	b2ba      	uxth	r2, r7
 8019abc:	4492      	add	sl, r2
 8019abe:	b29b      	uxth	r3, r3
 8019ac0:	fa1f fa8a 	uxth.w	sl, sl
 8019ac4:	fa0f f883 	sxth.w	r8, r3
 8019ac8:	fa0f f98a 	sxth.w	r9, sl
 8019acc:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8019ad0:	9b04      	ldr	r3, [sp, #16]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d054      	beq.n	8019b80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 8019ad6:	9903      	ldr	r1, [sp, #12]
 8019ad8:	4620      	mov	r0, r4
 8019ada:	f7ff fcdb 	bl	8019494 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019ade:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019ae2:	b1c0      	cbz	r0, 8019b16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019ae4:	f9b4 e000 	ldrsh.w	lr, [r4]
 8019ae8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019aec:	4576      	cmp	r6, lr
 8019aee:	dc22      	bgt.n	8019b36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8019af0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019af4:	44f4      	add	ip, lr
 8019af6:	fa0f fc8c 	sxth.w	ip, ip
 8019afa:	45e0      	cmp	r8, ip
 8019afc:	db1b      	blt.n	8019b36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8019afe:	428f      	cmp	r7, r1
 8019b00:	fa1f fc81 	uxth.w	ip, r1
 8019b04:	88e1      	ldrh	r1, [r4, #6]
 8019b06:	dc0d      	bgt.n	8019b24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8019b08:	ebaa 0c0c 	sub.w	ip, sl, ip
 8019b0c:	eba1 010c 	sub.w	r1, r1, ip
 8019b10:	f8a4 9002 	strh.w	r9, [r4, #2]
 8019b14:	80e1      	strh	r1, [r4, #6]
 8019b16:	4628      	mov	r0, r5
 8019b18:	9904      	ldr	r1, [sp, #16]
 8019b1a:	3c08      	subs	r4, #8
 8019b1c:	3901      	subs	r1, #1
 8019b1e:	9104      	str	r1, [sp, #16]
 8019b20:	4605      	mov	r5, r0
 8019b22:	e7d3      	b.n	8019acc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 8019b24:	4461      	add	r1, ip
 8019b26:	b209      	sxth	r1, r1
 8019b28:	4549      	cmp	r1, r9
 8019b2a:	dcf5      	bgt.n	8019b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019b2c:	eba2 0c0c 	sub.w	ip, r2, ip
 8019b30:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019b34:	e7ef      	b.n	8019b16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019b36:	428f      	cmp	r7, r1
 8019b38:	dcee      	bgt.n	8019b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019b3a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8019b3e:	4461      	add	r1, ip
 8019b40:	b209      	sxth	r1, r1
 8019b42:	4589      	cmp	r9, r1
 8019b44:	dbe8      	blt.n	8019b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019b46:	4576      	cmp	r6, lr
 8019b48:	fa1f fc8e 	uxth.w	ip, lr
 8019b4c:	88a1      	ldrh	r1, [r4, #4]
 8019b4e:	dc07      	bgt.n	8019b60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 8019b50:	eba3 0c0c 	sub.w	ip, r3, ip
 8019b54:	eba1 010c 	sub.w	r1, r1, ip
 8019b58:	f8a4 8000 	strh.w	r8, [r4]
 8019b5c:	80a1      	strh	r1, [r4, #4]
 8019b5e:	e7da      	b.n	8019b16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019b60:	4461      	add	r1, ip
 8019b62:	b209      	sxth	r1, r1
 8019b64:	4588      	cmp	r8, r1
 8019b66:	dbd7      	blt.n	8019b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019b68:	9905      	ldr	r1, [sp, #20]
 8019b6a:	eba1 0c0c 	sub.w	ip, r1, ip
 8019b6e:	f8a4 c004 	strh.w	ip, [r4, #4]
 8019b72:	e7d0      	b.n	8019b16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019b74:	2005ba76 	.word	0x2005ba76
 8019b78:	2005ba74 	.word	0x2005ba74
 8019b7c:	2005ba80 	.word	0x2005ba80
 8019b80:	2d00      	cmp	r5, #0
 8019b82:	f000 816e 	beq.w	8019e62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8019b86:	9b06      	ldr	r3, [sp, #24]
 8019b88:	445b      	add	r3, fp
 8019b8a:	461c      	mov	r4, r3
 8019b8c:	9b02      	ldr	r3, [sp, #8]
 8019b8e:	3301      	adds	r3, #1
 8019b90:	f000 8167 	beq.w	8019e62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8019b94:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8019b98:	4629      	mov	r1, r5
 8019b9a:	9803      	ldr	r0, [sp, #12]
 8019b9c:	f7ff fcec 	bl	8019578 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019ba0:	b120      	cbz	r0, 8019bac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 8019ba2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019ba6:	9801      	ldr	r0, [sp, #4]
 8019ba8:	f7ff fea8 	bl	80198fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019bac:	9903      	ldr	r1, [sp, #12]
 8019bae:	4628      	mov	r0, r5
 8019bb0:	f7ff fc70 	bl	8019494 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019bb4:	2800      	cmp	r0, #0
 8019bb6:	f000 809c 	beq.w	8019cf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8019bba:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8019bbe:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019bc2:	fa1f f189 	uxth.w	r1, r9
 8019bc6:	eb01 0c03 	add.w	ip, r1, r3
 8019bca:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8019bce:	fa1f fa8c 	uxth.w	sl, ip
 8019bd2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8019bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8019bd8:	b283      	uxth	r3, r0
 8019bda:	eb03 050c 	add.w	r5, r3, ip
 8019bde:	b2ad      	uxth	r5, r5
 8019be0:	9505      	str	r5, [sp, #20]
 8019be2:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8019be6:	4548      	cmp	r0, r9
 8019be8:	9504      	str	r5, [sp, #16]
 8019bea:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8019bee:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8019bf2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8019bf6:	f340 8099 	ble.w	8019d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 8019bfa:	1a5b      	subs	r3, r3, r1
 8019bfc:	b29b      	uxth	r3, r3
 8019bfe:	4596      	cmp	lr, r2
 8019c00:	fa0f f08a 	sxth.w	r0, sl
 8019c04:	b21e      	sxth	r6, r3
 8019c06:	dd2e      	ble.n	8019c66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8019c08:	9f02      	ldr	r7, [sp, #8]
 8019c0a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8019c0e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8019c12:	9f04      	ldr	r7, [sp, #16]
 8019c14:	fa1f fe8e 	uxth.w	lr, lr
 8019c18:	1a3f      	subs	r7, r7, r0
 8019c1a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8019c1e:	b292      	uxth	r2, r2
 8019c20:	ebae 0102 	sub.w	r1, lr, r2
 8019c24:	44a6      	add	lr, r4
 8019c26:	4402      	add	r2, r0
 8019c28:	b289      	uxth	r1, r1
 8019c2a:	fa0f fe8e 	sxth.w	lr, lr
 8019c2e:	b212      	sxth	r2, r2
 8019c30:	b20d      	sxth	r5, r1
 8019c32:	ebae 0202 	sub.w	r2, lr, r2
 8019c36:	436f      	muls	r7, r5
 8019c38:	4372      	muls	r2, r6
 8019c3a:	4297      	cmp	r7, r2
 8019c3c:	db09      	blt.n	8019c52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 8019c3e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8019c42:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8019c46:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8019c4a:	449c      	add	ip, r3
 8019c4c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8019c50:	e684      	b.n	801995c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019c52:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8019c56:	4421      	add	r1, r4
 8019c58:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8019c5c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019c60:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019c64:	e67a      	b.n	801995c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019c66:	9f04      	ldr	r7, [sp, #16]
 8019c68:	42b8      	cmp	r0, r7
 8019c6a:	da27      	bge.n	8019cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 8019c6c:	9902      	ldr	r1, [sp, #8]
 8019c6e:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8019c72:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8019c76:	eb05 010e 	add.w	r1, r5, lr
 8019c7a:	fa1f f881 	uxth.w	r8, r1
 8019c7e:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8019c82:	fa0f f988 	sxth.w	r9, r8
 8019c86:	4411      	add	r1, r2
 8019c88:	eba1 0108 	sub.w	r1, r1, r8
 8019c8c:	b289      	uxth	r1, r1
 8019c8e:	fa0f f881 	sxth.w	r8, r1
 8019c92:	eba2 020e 	sub.w	r2, r2, lr
 8019c96:	1a3f      	subs	r7, r7, r0
 8019c98:	4372      	muls	r2, r6
 8019c9a:	fb08 f707 	mul.w	r7, r8, r7
 8019c9e:	42ba      	cmp	r2, r7
 8019ca0:	dc06      	bgt.n	8019cb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 8019ca2:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8019ca6:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8019caa:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8019cae:	e7ca      	b.n	8019c46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8019cb0:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8019cb4:	4429      	add	r1, r5
 8019cb6:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019cba:	e64f      	b.n	801995c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019cbc:	9805      	ldr	r0, [sp, #20]
 8019cbe:	2d06      	cmp	r5, #6
 8019cc0:	ebaa 0000 	sub.w	r0, sl, r0
 8019cc4:	b280      	uxth	r0, r0
 8019cc6:	fa0f fe80 	sxth.w	lr, r0
 8019cca:	d817      	bhi.n	8019cfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 8019ccc:	9b04      	ldr	r3, [sp, #16]
 8019cce:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8019cd2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8019cd6:	1c6b      	adds	r3, r5, #1
 8019cd8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8019cdc:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8019ce0:	9b01      	ldr	r3, [sp, #4]
 8019ce2:	9801      	ldr	r0, [sp, #4]
 8019ce4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019ce8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019cec:	805a      	strh	r2, [r3, #2]
 8019cee:	809e      	strh	r6, [r3, #4]
 8019cf0:	80d9      	strh	r1, [r3, #6]
 8019cf2:	9b02      	ldr	r3, [sp, #8]
 8019cf4:	3c08      	subs	r4, #8
 8019cf6:	3b01      	subs	r3, #1
 8019cf8:	9302      	str	r3, [sp, #8]
 8019cfa:	e747      	b.n	8019b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 8019cfc:	9a02      	ldr	r2, [sp, #8]
 8019cfe:	45b6      	cmp	lr, r6
 8019d00:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019d04:	db0d      	blt.n	8019d22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8019d06:	449c      	add	ip, r3
 8019d08:	fa1f fc8c 	uxth.w	ip, ip
 8019d0c:	445a      	add	r2, fp
 8019d0e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8019d12:	448c      	add	ip, r1
 8019d14:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8019d18:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8019d1c:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8019d20:	e61c      	b.n	801995c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019d22:	445a      	add	r2, fp
 8019d24:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8019d28:	4484      	add	ip, r0
 8019d2a:	e78f      	b.n	8019c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8019d2c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8019d30:	fa1f f18e 	uxth.w	r1, lr
 8019d34:	eb01 0806 	add.w	r8, r1, r6
 8019d38:	b293      	uxth	r3, r2
 8019d3a:	fa1f f888 	uxth.w	r8, r8
 8019d3e:	9306      	str	r3, [sp, #24]
 8019d40:	fa0f f388 	sxth.w	r3, r8
 8019d44:	9307      	str	r3, [sp, #28]
 8019d46:	9f06      	ldr	r7, [sp, #24]
 8019d48:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8019d4c:	4596      	cmp	lr, r2
 8019d4e:	443b      	add	r3, r7
 8019d50:	b29b      	uxth	r3, r3
 8019d52:	9308      	str	r3, [sp, #32]
 8019d54:	da24      	bge.n	8019da0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8019d56:	9905      	ldr	r1, [sp, #20]
 8019d58:	eba3 0308 	sub.w	r3, r3, r8
 8019d5c:	ebaa 0401 	sub.w	r4, sl, r1
 8019d60:	b2a4      	uxth	r4, r4
 8019d62:	b29b      	uxth	r3, r3
 8019d64:	b225      	sxth	r5, r4
 8019d66:	b219      	sxth	r1, r3
 8019d68:	eba2 020e 	sub.w	r2, r2, lr
 8019d6c:	eba9 0000 	sub.w	r0, r9, r0
 8019d70:	436a      	muls	r2, r5
 8019d72:	4348      	muls	r0, r1
 8019d74:	4282      	cmp	r2, r0
 8019d76:	9a02      	ldr	r2, [sp, #8]
 8019d78:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019d7c:	445a      	add	r2, fp
 8019d7e:	dc06      	bgt.n	8019d8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8019d80:	9b07      	ldr	r3, [sp, #28]
 8019d82:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8019d86:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8019d8a:	44a4      	add	ip, r4
 8019d8c:	e75e      	b.n	8019c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8019d8e:	9904      	ldr	r1, [sp, #16]
 8019d90:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8019d94:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8019d98:	4433      	add	r3, r6
 8019d9a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019d9e:	e5dd      	b.n	801995c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019da0:	9f06      	ldr	r7, [sp, #24]
 8019da2:	9b04      	ldr	r3, [sp, #16]
 8019da4:	1bc9      	subs	r1, r1, r7
 8019da6:	fa0f f78a 	sxth.w	r7, sl
 8019daa:	b289      	uxth	r1, r1
 8019dac:	429f      	cmp	r7, r3
 8019dae:	fa0f fe81 	sxth.w	lr, r1
 8019db2:	dd24      	ble.n	8019dfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4da>
 8019db4:	9a05      	ldr	r2, [sp, #20]
 8019db6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019dba:	ebaa 0202 	sub.w	r2, sl, r2
 8019dbe:	9d07      	ldr	r5, [sp, #28]
 8019dc0:	b292      	uxth	r2, r2
 8019dc2:	eba5 0a03 	sub.w	sl, r5, r3
 8019dc6:	b214      	sxth	r4, r2
 8019dc8:	eba9 0000 	sub.w	r0, r9, r0
 8019dcc:	fb0e f000 	mul.w	r0, lr, r0
 8019dd0:	fb04 fa0a 	mul.w	sl, r4, sl
 8019dd4:	9b02      	ldr	r3, [sp, #8]
 8019dd6:	4550      	cmp	r0, sl
 8019dd8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019ddc:	445b      	add	r3, fp
 8019dde:	db03      	blt.n	8019de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8019de0:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8019de4:	4494      	add	ip, r2
 8019de6:	e731      	b.n	8019c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8019de8:	9a04      	ldr	r2, [sp, #16]
 8019dea:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8019dee:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8019df2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8019df6:	4431      	add	r1, r6
 8019df8:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019dfc:	e75b      	b.n	8019cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 8019dfe:	9b08      	ldr	r3, [sp, #32]
 8019e00:	2d06      	cmp	r5, #6
 8019e02:	eba3 0308 	sub.w	r3, r3, r8
 8019e06:	b29b      	uxth	r3, r3
 8019e08:	b218      	sxth	r0, r3
 8019e0a:	d813      	bhi.n	8019e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x510>
 8019e0c:	9b07      	ldr	r3, [sp, #28]
 8019e0e:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8019e12:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8019e16:	1c6b      	adds	r3, r5, #1
 8019e18:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8019e1c:	9b01      	ldr	r3, [sp, #4]
 8019e1e:	9901      	ldr	r1, [sp, #4]
 8019e20:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019e24:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8019e28:	805a      	strh	r2, [r3, #2]
 8019e2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e2c:	f8a3 e006 	strh.w	lr, [r3, #6]
 8019e30:	809a      	strh	r2, [r3, #4]
 8019e32:	e75e      	b.n	8019cf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8019e34:	9c02      	ldr	r4, [sp, #8]
 8019e36:	4570      	cmp	r0, lr
 8019e38:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8019e3c:	db0d      	blt.n	8019e5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 8019e3e:	4431      	add	r1, r6
 8019e40:	9b06      	ldr	r3, [sp, #24]
 8019e42:	b289      	uxth	r1, r1
 8019e44:	445c      	add	r4, fp
 8019e46:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019e4a:	4419      	add	r1, r3
 8019e4c:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8019e50:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8019e54:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8019e58:	e580      	b.n	801995c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019e5a:	445c      	add	r4, fp
 8019e5c:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8019e60:	e79a      	b.n	8019d98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8019e62:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8019e66:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8019e6a:	1e65      	subs	r5, r4, #1
 8019e6c:	b2ad      	uxth	r5, r5
 8019e6e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8019e72:	42b5      	cmp	r5, r6
 8019e74:	d044      	beq.n	8019f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8019e76:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8019e7a:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8019e7e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8019e82:	4282      	cmp	r2, r0
 8019e84:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8019e88:	d11f      	bne.n	8019eca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a6>
 8019e8a:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8019e8e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8019e92:	459c      	cmp	ip, r3
 8019e94:	d119      	bne.n	8019eca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a6>
 8019e96:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8019e9a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8019e9e:	19d8      	adds	r0, r3, r7
 8019ea0:	b200      	sxth	r0, r0
 8019ea2:	4288      	cmp	r0, r1
 8019ea4:	d109      	bne.n	8019eba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 8019ea6:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8019eaa:	4413      	add	r3, r2
 8019eac:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8019eb0:	4629      	mov	r1, r5
 8019eb2:	9801      	ldr	r0, [sp, #4]
 8019eb4:	f7ff fd22 	bl	80198fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019eb8:	e003      	b.n	8019ec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 8019eba:	4411      	add	r1, r2
 8019ebc:	b209      	sxth	r1, r1
 8019ebe:	42b9      	cmp	r1, r7
 8019ec0:	d0f3      	beq.n	8019eaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8019ec2:	3d01      	subs	r5, #1
 8019ec4:	b2ad      	uxth	r5, r5
 8019ec6:	3c08      	subs	r4, #8
 8019ec8:	e7d3      	b.n	8019e72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 8019eca:	42b9      	cmp	r1, r7
 8019ecc:	d1f9      	bne.n	8019ec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 8019ece:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8019ed2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019ed6:	4299      	cmp	r1, r3
 8019ed8:	d1f3      	bne.n	8019ec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 8019eda:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8019ede:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019ee2:	181f      	adds	r7, r3, r0
 8019ee4:	b23f      	sxth	r7, r7
 8019ee6:	42ba      	cmp	r2, r7
 8019ee8:	d105      	bne.n	8019ef6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d2>
 8019eea:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8019eee:	440b      	add	r3, r1
 8019ef0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019ef4:	e7dc      	b.n	8019eb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019ef6:	440a      	add	r2, r1
 8019ef8:	b212      	sxth	r2, r2
 8019efa:	4290      	cmp	r0, r2
 8019efc:	d1e1      	bne.n	8019ec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 8019efe:	e7f6      	b.n	8019eee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8019f00:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8019f04:	2e07      	cmp	r6, #7
 8019f06:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8019f0a:	d812      	bhi.n	8019f32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60e>
 8019f0c:	1c75      	adds	r5, r6, #1
 8019f0e:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8019f12:	9d01      	ldr	r5, [sp, #4]
 8019f14:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8019f18:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8019f1c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8019f20:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8019f24:	442c      	add	r4, r5
 8019f26:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8019f2a:	8061      	strh	r1, [r4, #2]
 8019f2c:	80a2      	strh	r2, [r4, #4]
 8019f2e:	80e3      	strh	r3, [r4, #6]
 8019f30:	e57e      	b.n	8019a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8019f32:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8019f36:	f04f 37ff 	mov.w	r7, #4294967295
 8019f3a:	2500      	movs	r5, #0
 8019f3c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8019f40:	3e01      	subs	r6, #1
 8019f42:	445c      	add	r4, fp
 8019f44:	9305      	str	r3, [sp, #20]
 8019f46:	1e72      	subs	r2, r6, #1
 8019f48:	4691      	mov	r9, r2
 8019f4a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019f4e:	9302      	str	r3, [sp, #8]
 8019f50:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8019f54:	9304      	str	r3, [sp, #16]
 8019f56:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8019f5a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8019f5e:	bf16      	itet	ne
 8019f60:	9905      	ldrne	r1, [sp, #20]
 8019f62:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8019f66:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8019f6a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019f6e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8019f72:	6818      	ldr	r0, [r3, #0]
 8019f74:	fb18 f801 	smulbb	r8, r8, r1
 8019f78:	6859      	ldr	r1, [r3, #4]
 8019f7a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019f7e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019f82:	4671      	mov	r1, lr
 8019f84:	a80c      	add	r0, sp, #48	@ 0x30
 8019f86:	9207      	str	r2, [sp, #28]
 8019f88:	9306      	str	r3, [sp, #24]
 8019f8a:	f7ff fb1b 	bl	80195c4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019f8e:	f04f 0c08 	mov.w	ip, #8
 8019f92:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8019f96:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8019f9a:	9b04      	ldr	r3, [sp, #16]
 8019f9c:	9a02      	ldr	r2, [sp, #8]
 8019f9e:	fb10 f001 	smulbb	r0, r0, r1
 8019fa2:	fb02 8803 	mla	r8, r2, r3, r8
 8019fa6:	eba0 0108 	sub.w	r1, r0, r8
 8019faa:	fb90 f0fc 	sdiv	r0, r0, ip
 8019fae:	4288      	cmp	r0, r1
 8019fb0:	dc20      	bgt.n	8019ff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 8019fb2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8019fb6:	4551      	cmp	r1, sl
 8019fb8:	da03      	bge.n	8019fc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69e>
 8019fba:	b1d9      	cbz	r1, 8019ff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 8019fbc:	468a      	mov	sl, r1
 8019fbe:	464f      	mov	r7, r9
 8019fc0:	4635      	mov	r5, r6
 8019fc2:	f109 39ff 	add.w	r9, r9, #4294967295
 8019fc6:	f119 0f02 	cmn.w	r9, #2
 8019fca:	d1c6      	bne.n	8019f5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 8019fcc:	4616      	mov	r6, r2
 8019fce:	3201      	adds	r2, #1
 8019fd0:	f1a4 0408 	sub.w	r4, r4, #8
 8019fd4:	d1b7      	bne.n	8019f46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8019fd6:	9b01      	ldr	r3, [sp, #4]
 8019fd8:	b2ac      	uxth	r4, r5
 8019fda:	00ed      	lsls	r5, r5, #3
 8019fdc:	1958      	adds	r0, r3, r5
 8019fde:	1c7b      	adds	r3, r7, #1
 8019fe0:	d10b      	bne.n	8019ffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d6>
 8019fe2:	4601      	mov	r1, r0
 8019fe4:	9803      	ldr	r0, [sp, #12]
 8019fe6:	f7ff faed 	bl	80195c4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019fea:	4621      	mov	r1, r4
 8019fec:	9801      	ldr	r0, [sp, #4]
 8019fee:	f7ff fc85 	bl	80198fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019ff2:	e4b3      	b.n	801995c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019ff4:	464f      	mov	r7, r9
 8019ff6:	4635      	mov	r5, r6
 8019ff8:	e7ed      	b.n	8019fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b2>
 8019ffa:	9b01      	ldr	r3, [sp, #4]
 8019ffc:	00ff      	lsls	r7, r7, #3
 8019ffe:	19d9      	adds	r1, r3, r7
 801a000:	f7ff fae0 	bl	80195c4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a004:	9b03      	ldr	r3, [sp, #12]
 801a006:	445f      	add	r7, fp
 801a008:	cb03      	ldmia	r3!, {r0, r1}
 801a00a:	445d      	add	r5, fp
 801a00c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801a010:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801a014:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801a018:	9b03      	ldr	r3, [sp, #12]
 801a01a:	6869      	ldr	r1, [r5, #4]
 801a01c:	c303      	stmia	r3!, {r0, r1}
 801a01e:	e7e4      	b.n	8019fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>

0801a020 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a024:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801a028:	b0a1      	sub	sp, #132	@ 0x84
 801a02a:	4604      	mov	r4, r0
 801a02c:	4630      	mov	r0, r6
 801a02e:	f7fa f82c 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a032:	4605      	mov	r5, r0
 801a034:	b948      	cbnz	r0, 801a04a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801a036:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a03a:	6823      	ldr	r3, [r4, #0]
 801a03c:	4620      	mov	r0, r4
 801a03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a040:	4798      	blx	r3
 801a042:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801a046:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801a04a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d149      	bne.n	801a0e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 801a052:	4bb2      	ldr	r3, [pc, #712]	@ (801a31c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 801a05a:	1ebb      	subs	r3, r7, #2
 801a05c:	425f      	negs	r7, r3
 801a05e:	415f      	adcs	r7, r3
 801a060:	4baf      	ldr	r3, [pc, #700]	@ (801a320 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	2b00      	cmp	r3, #0
 801a066:	d040      	beq.n	801a0ea <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801a068:	4dae      	ldr	r5, [pc, #696]	@ (801a324 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 801a06a:	4628      	mov	r0, r5
 801a06c:	f7fa f80d 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a070:	4606      	mov	r6, r0
 801a072:	2800      	cmp	r0, #0
 801a074:	d139      	bne.n	801a0ea <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801a076:	4628      	mov	r0, r5
 801a078:	f7ff f942 	bl	8019300 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a07c:	6823      	ldr	r3, [r4, #0]
 801a07e:	6829      	ldr	r1, [r5, #0]
 801a080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a082:	686a      	ldr	r2, [r5, #4]
 801a084:	4620      	mov	r0, r4
 801a086:	4798      	blx	r3
 801a088:	802e      	strh	r6, [r5, #0]
 801a08a:	806e      	strh	r6, [r5, #2]
 801a08c:	80ae      	strh	r6, [r5, #4]
 801a08e:	80ee      	strh	r6, [r5, #6]
 801a090:	af0f      	add	r7, sp, #60	@ 0x3c
 801a092:	4ea5      	ldr	r6, [pc, #660]	@ (801a328 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 801a094:	4638      	mov	r0, r7
 801a096:	f7ff fbd9 	bl	801984c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a09a:	8835      	ldrh	r5, [r6, #0]
 801a09c:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 801a0a0:	462b      	mov	r3, r5
 801a0a2:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801a0a6:	4563      	cmp	r3, ip
 801a0a8:	d224      	bcs.n	801a0f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 801a0aa:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 801a0ae:	2907      	cmp	r1, #7
 801a0b0:	d816      	bhi.n	801a0e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801a0b2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a0b6:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801a0ba:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 801a0be:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 801a0c2:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801a0c6:	1c4a      	adds	r2, r1, #1
 801a0c8:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 801a0cc:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 801a0d0:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 801a0d4:	f8a2 a002 	strh.w	sl, [r2, #2]
 801a0d8:	f8a2 8004 	strh.w	r8, [r2, #4]
 801a0dc:	f8a2 e006 	strh.w	lr, [r2, #6]
 801a0e0:	3301      	adds	r3, #1
 801a0e2:	b29b      	uxth	r3, r3
 801a0e4:	e7df      	b.n	801a0a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 801a0e6:	2701      	movs	r7, #1
 801a0e8:	e7ba      	b.n	801a060 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 801a0ea:	2f00      	cmp	r7, #0
 801a0ec:	d1d0      	bne.n	801a090 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 801a0ee:	b021      	add	sp, #132	@ 0x84
 801a0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0f4:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801a0f8:	42ab      	cmp	r3, r5
 801a0fa:	d90c      	bls.n	801a116 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 801a0fc:	6822      	ldr	r2, [r4, #0]
 801a0fe:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a102:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801a104:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801a108:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801a10c:	4620      	mov	r0, r4
 801a10e:	3501      	adds	r5, #1
 801a110:	47b8      	blx	r7
 801a112:	b2ad      	uxth	r5, r5
 801a114:	e7ee      	b.n	801a0f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 801a116:	4d81      	ldr	r5, [pc, #516]	@ (801a31c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 801a118:	6828      	ldr	r0, [r5, #0]
 801a11a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801a11e:	2b01      	cmp	r3, #1
 801a120:	f040 813d 	bne.w	801a39e <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 801a124:	4a81      	ldr	r2, [pc, #516]	@ (801a32c <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 801a126:	8833      	ldrh	r3, [r6, #0]
 801a128:	7812      	ldrb	r2, [r2, #0]
 801a12a:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 801a12e:	2a01      	cmp	r2, #1
 801a130:	d014      	beq.n	801a15c <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801a132:	f04f 0900 	mov.w	r9, #0
 801a136:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801a13a:	32ae      	adds	r2, #174	@ 0xae
 801a13c:	4283      	cmp	r3, r0
 801a13e:	f102 0208 	add.w	r2, r2, #8
 801a142:	f280 8083 	bge.w	801a24c <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801a146:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 801a14a:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 801a14e:	3301      	adds	r3, #1
 801a150:	4439      	add	r1, r7
 801a152:	b209      	sxth	r1, r1
 801a154:	4589      	cmp	r9, r1
 801a156:	bfb8      	it	lt
 801a158:	4689      	movlt	r9, r1
 801a15a:	e7ef      	b.n	801a13c <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 801a15c:	4f74      	ldr	r7, [pc, #464]	@ (801a330 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 801a15e:	883a      	ldrh	r2, [r7, #0]
 801a160:	4693      	mov	fp, r2
 801a162:	4283      	cmp	r3, r0
 801a164:	da08      	bge.n	801a178 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 801a166:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801a16a:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 801a16e:	3301      	adds	r3, #1
 801a170:	458b      	cmp	fp, r1
 801a172:	bfa8      	it	ge
 801a174:	468b      	movge	fp, r1
 801a176:	e7f4      	b.n	801a162 <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 801a178:	2300      	movs	r3, #0
 801a17a:	2a0f      	cmp	r2, #15
 801a17c:	bf98      	it	ls
 801a17e:	f04f 0801 	movls.w	r8, #1
 801a182:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 801a334 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 801a186:	bf88      	it	hi
 801a188:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 801a18c:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801a190:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a194:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801a198:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a19c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801a1a0:	6828      	ldr	r0, [r5, #0]
 801a1a2:	455b      	cmp	r3, fp
 801a1a4:	f340 80c8 	ble.w	801a338 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a1a8:	6803      	ldr	r3, [r0, #0]
 801a1aa:	f8b7 a000 	ldrh.w	sl, [r7]
 801a1ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a1b2:	4798      	blx	r3
 801a1b4:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801a1b8:	ebaa 0000 	sub.w	r0, sl, r0
 801a1bc:	682b      	ldr	r3, [r5, #0]
 801a1be:	b280      	uxth	r0, r0
 801a1c0:	ebac 0e08 	sub.w	lr, ip, r8
 801a1c4:	4570      	cmp	r0, lr
 801a1c6:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 801a1ca:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 801a1ce:	dd05      	ble.n	801a1dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 801a1d0:	4558      	cmp	r0, fp
 801a1d2:	dd03      	ble.n	801a1dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 801a1d4:	b901      	cbnz	r1, 801a1d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801a1d6:	b392      	cbz	r2, 801a23e <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 801a1d8:	4658      	mov	r0, fp
 801a1da:	e006      	b.n	801a1ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 801a1dc:	2900      	cmp	r1, #0
 801a1de:	d1fb      	bne.n	801a1d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801a1e0:	2a00      	cmp	r2, #0
 801a1e2:	d1f9      	bne.n	801a1d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801a1e4:	4558      	cmp	r0, fp
 801a1e6:	bfb8      	it	lt
 801a1e8:	4658      	movlt	r0, fp
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	f9b9 3000 	ldrsh.w	r3, [r9]
 801a1f0:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 801a1f4:	f8b6 a000 	ldrh.w	sl, [r6]
 801a1f8:	ebac 0000 	sub.w	r0, ip, r0
 801a1fc:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801a200:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a204:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a208:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a20c:	4553      	cmp	r3, sl
 801a20e:	ddc5      	ble.n	801a19c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801a210:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a214:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a218:	ab0d      	add	r3, sp, #52	@ 0x34
 801a21a:	6851      	ldr	r1, [r2, #4]
 801a21c:	c303      	stmia	r3!, {r0, r1}
 801a21e:	a80d      	add	r0, sp, #52	@ 0x34
 801a220:	a90b      	add	r1, sp, #44	@ 0x2c
 801a222:	f7f9 feef 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801a226:	a80d      	add	r0, sp, #52	@ 0x34
 801a228:	f7f9 ff2f 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a22c:	b920      	cbnz	r0, 801a238 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 801a22e:	6823      	ldr	r3, [r4, #0]
 801a230:	a90d      	add	r1, sp, #52	@ 0x34
 801a232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a234:	4620      	mov	r0, r4
 801a236:	4798      	blx	r3
 801a238:	f10a 0a01 	add.w	sl, sl, #1
 801a23c:	e7e4      	b.n	801a208 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 801a23e:	681a      	ldr	r2, [r3, #0]
 801a240:	2101      	movs	r1, #1
 801a242:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 801a246:	4618      	mov	r0, r3
 801a248:	4790      	blx	r2
 801a24a:	e7a7      	b.n	801a19c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801a24c:	4b39      	ldr	r3, [pc, #228]	@ (801a334 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 801a24e:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 801a330 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 801a252:	881f      	ldrh	r7, [r3, #0]
 801a254:	2300      	movs	r3, #0
 801a256:	2f0f      	cmp	r7, #15
 801a258:	bf98      	it	ls
 801a25a:	2701      	movls	r7, #1
 801a25c:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 801a260:	bf88      	it	hi
 801a262:	08ff      	lsrhi	r7, r7, #3
 801a264:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a268:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 801a26c:	6828      	ldr	r0, [r5, #0]
 801a26e:	4413      	add	r3, r2
 801a270:	b21b      	sxth	r3, r3
 801a272:	454b      	cmp	r3, r9
 801a274:	da60      	bge.n	801a338 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a276:	6803      	ldr	r3, [r0, #0]
 801a278:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a27c:	4798      	blx	r3
 801a27e:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 801a282:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a286:	682a      	ldr	r2, [r5, #0]
 801a288:	4473      	add	r3, lr
 801a28a:	b21b      	sxth	r3, r3
 801a28c:	eb03 0e07 	add.w	lr, r3, r7
 801a290:	4570      	cmp	r0, lr
 801a292:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 801a296:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 801a29a:	da0d      	bge.n	801a2b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x298>
 801a29c:	4548      	cmp	r0, r9
 801a29e:	da0b      	bge.n	801a2b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x298>
 801a2a0:	f1bc 0f00 	cmp.w	ip, #0
 801a2a4:	d138      	bne.n	801a318 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a2a6:	2900      	cmp	r1, #0
 801a2a8:	d136      	bne.n	801a318 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a2aa:	6813      	ldr	r3, [r2, #0]
 801a2ac:	2101      	movs	r1, #1
 801a2ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801a2b2:	4610      	mov	r0, r2
 801a2b4:	4798      	blx	r3
 801a2b6:	e7d5      	b.n	801a264 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801a2b8:	f1bc 0f00 	cmp.w	ip, #0
 801a2bc:	d12c      	bne.n	801a318 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a2be:	bb59      	cbnz	r1, 801a318 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a2c0:	4548      	cmp	r0, r9
 801a2c2:	bfa8      	it	ge
 801a2c4:	4648      	movge	r0, r9
 801a2c6:	2100      	movs	r1, #0
 801a2c8:	f9b8 2000 	ldrsh.w	r2, [r8]
 801a2cc:	1ac0      	subs	r0, r0, r3
 801a2ce:	f8b6 a000 	ldrh.w	sl, [r6]
 801a2d2:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801a2d6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a2da:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801a2de:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801a2e2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a2e6:	4553      	cmp	r3, sl
 801a2e8:	ddbc      	ble.n	801a264 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801a2ea:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a2ee:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a2f2:	ab0d      	add	r3, sp, #52	@ 0x34
 801a2f4:	6851      	ldr	r1, [r2, #4]
 801a2f6:	c303      	stmia	r3!, {r0, r1}
 801a2f8:	a80d      	add	r0, sp, #52	@ 0x34
 801a2fa:	a90b      	add	r1, sp, #44	@ 0x2c
 801a2fc:	f7f9 fe82 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801a300:	a80d      	add	r0, sp, #52	@ 0x34
 801a302:	f7f9 fec2 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a306:	b920      	cbnz	r0, 801a312 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801a308:	6823      	ldr	r3, [r4, #0]
 801a30a:	a90d      	add	r1, sp, #52	@ 0x34
 801a30c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a30e:	4620      	mov	r0, r4
 801a310:	4798      	blx	r3
 801a312:	f10a 0a01 	add.w	sl, sl, #1
 801a316:	e7e4      	b.n	801a2e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c2>
 801a318:	4648      	mov	r0, r9
 801a31a:	e7d4      	b.n	801a2c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a6>
 801a31c:	2005ba80 	.word	0x2005ba80
 801a320:	2005bac0 	.word	0x2005bac0
 801a324:	2005bacc 	.word	0x2005bacc
 801a328:	2000001c 	.word	0x2000001c
 801a32c:	2005ba78 	.word	0x2005ba78
 801a330:	2005ba74 	.word	0x2005ba74
 801a334:	2005ba76 	.word	0x2005ba76
 801a338:	6828      	ldr	r0, [r5, #0]
 801a33a:	6803      	ldr	r3, [r0, #0]
 801a33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a33e:	4798      	blx	r3
 801a340:	4ba4      	ldr	r3, [pc, #656]	@ (801a5d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 801a342:	781b      	ldrb	r3, [r3, #0]
 801a344:	2b00      	cmp	r3, #0
 801a346:	f43f aed2 	beq.w	801a0ee <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 801a34a:	2300      	movs	r3, #0
 801a34c:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801a350:	4ba1      	ldr	r3, [pc, #644]	@ (801a5d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 801a352:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 801a356:	881b      	ldrh	r3, [r3, #0]
 801a358:	a80f      	add	r0, sp, #60	@ 0x3c
 801a35a:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 801a35e:	42b3      	cmp	r3, r6
 801a360:	f4bf aec5 	bcs.w	801a0ee <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 801a364:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801a368:	2907      	cmp	r1, #7
 801a36a:	d815      	bhi.n	801a398 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 801a36c:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a370:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801a374:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801a378:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801a37c:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801a380:	1c4a      	adds	r2, r1, #1
 801a382:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801a386:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 801a38a:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 801a38e:	f8a2 e002 	strh.w	lr, [r2, #2]
 801a392:	f8a2 c004 	strh.w	ip, [r2, #4]
 801a396:	80d7      	strh	r7, [r2, #6]
 801a398:	3301      	adds	r3, #1
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	e7df      	b.n	801a35e <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 801a39e:	2b02      	cmp	r3, #2
 801a3a0:	f040 80cf 	bne.w	801a542 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 801a3a4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801a3a8:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 801a3ac:	9308      	str	r3, [sp, #32]
 801a3ae:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 801a3b2:	f10b 37ff 	add.w	r7, fp, #4294967295
 801a3b6:	9307      	str	r3, [sp, #28]
 801a3b8:	6803      	ldr	r3, [r0, #0]
 801a3ba:	b2bf      	uxth	r7, r7
 801a3bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a3c0:	4798      	blx	r3
 801a3c2:	4b86      	ldr	r3, [pc, #536]	@ (801a5dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 801a3c4:	4682      	mov	sl, r0
 801a3c6:	881b      	ldrh	r3, [r3, #0]
 801a3c8:	2000      	movs	r0, #0
 801a3ca:	9302      	str	r3, [sp, #8]
 801a3cc:	4b84      	ldr	r3, [pc, #528]	@ (801a5e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 801a3ce:	fa0f f887 	sxth.w	r8, r7
 801a3d2:	881e      	ldrh	r6, [r3, #0]
 801a3d4:	4b83      	ldr	r3, [pc, #524]	@ (801a5e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801a3d6:	781b      	ldrb	r3, [r3, #0]
 801a3d8:	2b01      	cmp	r3, #1
 801a3da:	bf1e      	ittt	ne
 801a3dc:	9b02      	ldrne	r3, [sp, #8]
 801a3de:	9602      	strne	r6, [sp, #8]
 801a3e0:	461e      	movne	r6, r3
 801a3e2:	f7f7 f89f 	bl	8011524 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a3e6:	fb96 fbfb 	sdiv	fp, r6, fp
 801a3ea:	fb0b f808 	mul.w	r8, fp, r8
 801a3ee:	45c2      	cmp	sl, r8
 801a3f0:	da0c      	bge.n	801a40c <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 801a3f2:	6828      	ldr	r0, [r5, #0]
 801a3f4:	210a      	movs	r1, #10
 801a3f6:	6803      	ldr	r3, [r0, #0]
 801a3f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801a3fc:	4798      	blx	r3
 801a3fe:	6828      	ldr	r0, [r5, #0]
 801a400:	6803      	ldr	r3, [r0, #0]
 801a402:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a406:	4798      	blx	r3
 801a408:	4682      	mov	sl, r0
 801a40a:	e7f0      	b.n	801a3ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 801a40c:	f04f 0800 	mov.w	r8, #0
 801a410:	4645      	mov	r5, r8
 801a412:	2000      	movs	r0, #0
 801a414:	f7f7 f8a2 	bl	801155c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a418:	fa1f f38b 	uxth.w	r3, fp
 801a41c:	fb17 f703 	smulbb	r7, r7, r3
 801a420:	9304      	str	r3, [sp, #16]
 801a422:	b2bb      	uxth	r3, r7
 801a424:	9305      	str	r3, [sp, #20]
 801a426:	4f70      	ldr	r7, [pc, #448]	@ (801a5e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 801a428:	0973      	lsrs	r3, r6, #5
 801a42a:	9306      	str	r3, [sp, #24]
 801a42c:	42b5      	cmp	r5, r6
 801a42e:	d087      	beq.n	801a340 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a430:	6838      	ldr	r0, [r7, #0]
 801a432:	6803      	ldr	r3, [r0, #0]
 801a434:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a438:	4798      	blx	r3
 801a43a:	4582      	cmp	sl, r0
 801a43c:	4681      	mov	r9, r0
 801a43e:	d907      	bls.n	801a450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 801a440:	f1b8 0f00 	cmp.w	r8, #0
 801a444:	d007      	beq.n	801a456 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 801a446:	6838      	ldr	r0, [r7, #0]
 801a448:	6803      	ldr	r3, [r0, #0]
 801a44a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a44e:	e776      	b.n	801a33e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801a450:	f1b8 0f00 	cmp.w	r8, #0
 801a454:	d003      	beq.n	801a45e <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 801a456:	454d      	cmp	r5, r9
 801a458:	d3f5      	bcc.n	801a446 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 801a45a:	f04f 0801 	mov.w	r8, #1
 801a45e:	fb95 f3fb 	sdiv	r3, r5, fp
 801a462:	9a04      	ldr	r2, [sp, #16]
 801a464:	9303      	str	r3, [sp, #12]
 801a466:	3301      	adds	r3, #1
 801a468:	fb13 f302 	smulbb	r3, r3, r2
 801a46c:	b299      	uxth	r1, r3
 801a46e:	f1b8 0f00 	cmp.w	r8, #0
 801a472:	d04e      	beq.n	801a512 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f2>
 801a474:	eb09 030b 	add.w	r3, r9, fp
 801a478:	42b3      	cmp	r3, r6
 801a47a:	bfa8      	it	ge
 801a47c:	4633      	movge	r3, r6
 801a47e:	b29b      	uxth	r3, r3
 801a480:	428b      	cmp	r3, r1
 801a482:	bf94      	ite	ls
 801a484:	ebc5 0203 	rsbls	r2, r5, r3
 801a488:	ebc5 0201 	rsbhi	r2, r5, r1
 801a48c:	9807      	ldr	r0, [sp, #28]
 801a48e:	4282      	cmp	r2, r0
 801a490:	bfa8      	it	ge
 801a492:	4602      	movge	r2, r0
 801a494:	9808      	ldr	r0, [sp, #32]
 801a496:	fa1f fa82 	uxth.w	sl, r2
 801a49a:	4582      	cmp	sl, r0
 801a49c:	d205      	bcs.n	801a4aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801a49e:	fa15 f082 	uxtah	r0, r5, r2
 801a4a2:	4286      	cmp	r6, r0
 801a4a4:	d001      	beq.n	801a4aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801a4a6:	4299      	cmp	r1, r3
 801a4a8:	d240      	bcs.n	801a52c <_ZN8touchgfx11Application15drawCachedAreasEv+0x50c>
 801a4aa:	2001      	movs	r0, #1
 801a4ac:	9209      	str	r2, [sp, #36]	@ 0x24
 801a4ae:	f7f7 f839 	bl	8011524 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a4b2:	6838      	ldr	r0, [r7, #0]
 801a4b4:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 801a4b8:	6803      	ldr	r3, [r0, #0]
 801a4ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801a4be:	4798      	blx	r3
 801a4c0:	4b48      	ldr	r3, [pc, #288]	@ (801a5e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801a4c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a4c4:	781b      	ldrb	r3, [r3, #0]
 801a4c6:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801a4ca:	2b01      	cmp	r3, #1
 801a4cc:	b212      	sxth	r2, r2
 801a4ce:	f04f 0000 	mov.w	r0, #0
 801a4d2:	d122      	bne.n	801a51a <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fa>
 801a4d4:	1b73      	subs	r3, r6, r5
 801a4d6:	eba3 030a 	sub.w	r3, r3, sl
 801a4da:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801a4de:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 801a4e2:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801a4e6:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 801a4ea:	6823      	ldr	r3, [r4, #0]
 801a4ec:	a90d      	add	r1, sp, #52	@ 0x34
 801a4ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a4f0:	4620      	mov	r0, r4
 801a4f2:	4798      	blx	r3
 801a4f4:	6838      	ldr	r0, [r7, #0]
 801a4f6:	9b03      	ldr	r3, [sp, #12]
 801a4f8:	4455      	add	r5, sl
 801a4fa:	4259      	negs	r1, r3
 801a4fc:	6803      	ldr	r3, [r0, #0]
 801a4fe:	b209      	sxth	r1, r1
 801a500:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801a504:	4798      	blx	r3
 801a506:	2001      	movs	r0, #1
 801a508:	b2ad      	uxth	r5, r5
 801a50a:	f7f7 f827 	bl	801155c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a50e:	46ca      	mov	sl, r9
 801a510:	e78c      	b.n	801a42c <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 801a512:	9b05      	ldr	r3, [sp, #20]
 801a514:	eba9 0303 	sub.w	r3, r9, r3
 801a518:	e7b1      	b.n	801a47e <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801a51a:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 801a51e:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 801a522:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 801a526:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 801a52a:	e7de      	b.n	801a4ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ca>
 801a52c:	6838      	ldr	r0, [r7, #0]
 801a52e:	6803      	ldr	r3, [r0, #0]
 801a530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a532:	4798      	blx	r3
 801a534:	6838      	ldr	r0, [r7, #0]
 801a536:	9906      	ldr	r1, [sp, #24]
 801a538:	6803      	ldr	r3, [r0, #0]
 801a53a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801a53e:	4798      	blx	r3
 801a540:	e7e5      	b.n	801a50e <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ee>
 801a542:	2b03      	cmp	r3, #3
 801a544:	f040 8130 	bne.w	801a7a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x788>
 801a548:	4b26      	ldr	r3, [pc, #152]	@ (801a5e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801a54a:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 801a54e:	781b      	ldrb	r3, [r3, #0]
 801a550:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801a554:	2b01      	cmp	r3, #1
 801a556:	f000 8093 	beq.w	801a680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801a55a:	8832      	ldrh	r2, [r6, #0]
 801a55c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801a560:	3201      	adds	r2, #1
 801a562:	b292      	uxth	r2, r2
 801a564:	2900      	cmp	r1, #0
 801a566:	f43f aeeb 	beq.w	801a340 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a56a:	4694      	mov	ip, r2
 801a56c:	f04f 0800 	mov.w	r8, #0
 801a570:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 801a574:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 801a578:	441d      	add	r5, r3
 801a57a:	b22d      	sxth	r5, r5
 801a57c:	fa1f f38c 	uxth.w	r3, ip
 801a580:	4299      	cmp	r1, r3
 801a582:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801a586:	f240 80ba 	bls.w	801a6fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x6de>
 801a58a:	4427      	add	r7, r4
 801a58c:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801a590:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801a594:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801a598:	4283      	cmp	r3, r0
 801a59a:	f340 809c 	ble.w	801a6d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b6>
 801a59e:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 801a5a2:	46e0      	mov	r8, ip
 801a5a4:	4405      	add	r5, r0
 801a5a6:	b22d      	sxth	r5, r5
 801a5a8:	429d      	cmp	r5, r3
 801a5aa:	bfa8      	it	ge
 801a5ac:	461d      	movge	r5, r3
 801a5ae:	f10c 0c01 	add.w	ip, ip, #1
 801a5b2:	e7e3      	b.n	801a57c <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>
 801a5b4:	d10a      	bne.n	801a5cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5ac>
 801a5b6:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 801a5ba:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801a5be:	4562      	cmp	r2, ip
 801a5c0:	bfb8      	it	lt
 801a5c2:	4662      	movlt	r2, ip
 801a5c4:	4288      	cmp	r0, r1
 801a5c6:	bfb8      	it	lt
 801a5c8:	4698      	movlt	r8, r3
 801a5ca:	e082      	b.n	801a6d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 801a5cc:	428a      	cmp	r2, r1
 801a5ce:	bfb8      	it	lt
 801a5d0:	460a      	movlt	r2, r1
 801a5d2:	e07e      	b.n	801a6d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 801a5d4:	2005ba7e 	.word	0x2005ba7e
 801a5d8:	2000001c 	.word	0x2000001c
 801a5dc:	2005ba76 	.word	0x2005ba76
 801a5e0:	2005ba74 	.word	0x2005ba74
 801a5e4:	2005ba78 	.word	0x2005ba78
 801a5e8:	2005ba80 	.word	0x2005ba80
 801a5ec:	19e1      	adds	r1, r4, r7
 801a5ee:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801a5f2:	ab0d      	add	r3, sp, #52	@ 0x34
 801a5f4:	6849      	ldr	r1, [r1, #4]
 801a5f6:	c303      	stmia	r3!, {r0, r1}
 801a5f8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 801a5fc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a600:	454b      	cmp	r3, r9
 801a602:	bfb8      	it	lt
 801a604:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 801a608:	440b      	add	r3, r1
 801a60a:	1a9b      	subs	r3, r3, r2
 801a60c:	a80d      	add	r0, sp, #52	@ 0x34
 801a60e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801a612:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801a616:	f7fe fe8d 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a61a:	a80d      	add	r0, sp, #52	@ 0x34
 801a61c:	f7f9 fd35 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a620:	bb70      	cbnz	r0, 801a680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801a622:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 801a626:	6828      	ldr	r0, [r5, #0]
 801a628:	45cc      	cmp	ip, r9
 801a62a:	f8d0 e000 	ldr.w	lr, [r0]
 801a62e:	bfd4      	ite	le
 801a630:	fa1f fc8c 	uxthle.w	ip, ip
 801a634:	fa1f fc89 	uxthgt.w	ip, r9
 801a638:	f8cd c000 	str.w	ip, [sp]
 801a63c:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 801a640:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a644:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801a648:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a64c:	47d8      	blx	fp
 801a64e:	4683      	mov	fp, r0
 801a650:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801a654:	a80d      	add	r0, sp, #52	@ 0x34
 801a656:	f7fe fe53 	bl	8019300 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a65a:	6823      	ldr	r3, [r4, #0]
 801a65c:	4620      	mov	r0, r4
 801a65e:	4427      	add	r7, r4
 801a660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a662:	a90d      	add	r1, sp, #52	@ 0x34
 801a664:	4798      	blx	r3
 801a666:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 801a66a:	eba0 000b 	sub.w	r0, r0, fp
 801a66e:	b200      	sxth	r0, r0
 801a670:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 801a674:	b920      	cbnz	r0, 801a680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801a676:	fa1f f188 	uxth.w	r1, r8
 801a67a:	4650      	mov	r0, sl
 801a67c:	f7ff f93e 	bl	80198fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a680:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801a684:	f1bb 0f00 	cmp.w	fp, #0
 801a688:	f43f ae5a 	beq.w	801a340 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a68c:	f04f 0800 	mov.w	r8, #0
 801a690:	8833      	ldrh	r3, [r6, #0]
 801a692:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801a696:	3301      	adds	r3, #1
 801a698:	b29b      	uxth	r3, r3
 801a69a:	b299      	uxth	r1, r3
 801a69c:	458b      	cmp	fp, r1
 801a69e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801a6a2:	d9a3      	bls.n	801a5ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 801a6a4:	4427      	add	r7, r4
 801a6a6:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 801a6aa:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 801a6ae:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801a6b2:	4408      	add	r0, r1
 801a6b4:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801a6b8:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801a6bc:	b200      	sxth	r0, r0
 801a6be:	4461      	add	r1, ip
 801a6c0:	b209      	sxth	r1, r1
 801a6c2:	4288      	cmp	r0, r1
 801a6c4:	f6bf af76 	bge.w	801a5b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x594>
 801a6c8:	4584      	cmp	ip, r0
 801a6ca:	4662      	mov	r2, ip
 801a6cc:	4698      	mov	r8, r3
 801a6ce:	bfb8      	it	lt
 801a6d0:	4602      	movlt	r2, r0
 801a6d2:	3301      	adds	r3, #1
 801a6d4:	e7e1      	b.n	801a69a <_ZN8touchgfx11Application15drawCachedAreasEv+0x67a>
 801a6d6:	d10e      	bne.n	801a6f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d6>
 801a6d8:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801a6dc:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801a6e0:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801a6e4:	4473      	add	r3, lr
 801a6e6:	b21b      	sxth	r3, r3
 801a6e8:	429d      	cmp	r5, r3
 801a6ea:	bfa8      	it	ge
 801a6ec:	461d      	movge	r5, r3
 801a6ee:	4287      	cmp	r7, r0
 801a6f0:	bfb8      	it	lt
 801a6f2:	46e0      	movlt	r8, ip
 801a6f4:	e75b      	b.n	801a5ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 801a6f6:	4285      	cmp	r5, r0
 801a6f8:	bfa8      	it	ge
 801a6fa:	4605      	movge	r5, r0
 801a6fc:	e757      	b.n	801a5ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 801a6fe:	eb0a 0007 	add.w	r0, sl, r7
 801a702:	4427      	add	r7, r4
 801a704:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801a708:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a70c:	45cb      	cmp	fp, r9
 801a70e:	bfbe      	ittt	lt
 801a710:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 801a714:	445d      	addlt	r5, fp
 801a716:	b22d      	sxthlt	r5, r5
 801a718:	f7f9 fcb7 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a71c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a720:	2800      	cmp	r0, #0
 801a722:	f47f af1f 	bne.w	801a564 <_ZN8touchgfx11Application15drawCachedAreasEv+0x544>
 801a726:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801a72a:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801a72e:	1aad      	subs	r5, r5, r2
 801a730:	454d      	cmp	r5, r9
 801a732:	bfa8      	it	ge
 801a734:	464d      	movge	r5, r9
 801a736:	4829      	ldr	r0, [pc, #164]	@ (801a7dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x7bc>)
 801a738:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801a73c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801a740:	6800      	ldr	r0, [r0, #0]
 801a742:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 801a746:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801a74a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801a74e:	f8d0 c000 	ldr.w	ip, [r0]
 801a752:	b2ad      	uxth	r5, r5
 801a754:	fa1f fb8b 	uxth.w	fp, fp
 801a758:	455d      	cmp	r5, fp
 801a75a:	bf94      	ite	ls
 801a75c:	9500      	strls	r5, [sp, #0]
 801a75e:	f8cd b000 	strhi.w	fp, [sp]
 801a762:	b292      	uxth	r2, r2
 801a764:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 801a768:	b29b      	uxth	r3, r3
 801a76a:	b289      	uxth	r1, r1
 801a76c:	47a8      	blx	r5
 801a76e:	6823      	ldr	r3, [r4, #0]
 801a770:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801a774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a776:	a90d      	add	r1, sp, #52	@ 0x34
 801a778:	4620      	mov	r0, r4
 801a77a:	4798      	blx	r3
 801a77c:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 801a780:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a784:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801a788:	1a5b      	subs	r3, r3, r1
 801a78a:	440a      	add	r2, r1
 801a78c:	b21b      	sxth	r3, r3
 801a78e:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801a792:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801a796:	2b00      	cmp	r3, #0
 801a798:	f47f aedf 	bne.w	801a55a <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 801a79c:	fa1f f188 	uxth.w	r1, r8
 801a7a0:	4650      	mov	r0, sl
 801a7a2:	f7ff f8ab 	bl	80198fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a7a6:	e6d8      	b.n	801a55a <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 801a7a8:	8835      	ldrh	r5, [r6, #0]
 801a7aa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a7ae:	42ab      	cmp	r3, r5
 801a7b0:	f67f adc6 	bls.w	801a340 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a7b4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801a7b8:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a7bc:	ab0d      	add	r3, sp, #52	@ 0x34
 801a7be:	6851      	ldr	r1, [r2, #4]
 801a7c0:	c303      	stmia	r3!, {r0, r1}
 801a7c2:	a80d      	add	r0, sp, #52	@ 0x34
 801a7c4:	f7f9 fc61 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a7c8:	b920      	cbnz	r0, 801a7d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b4>
 801a7ca:	6823      	ldr	r3, [r4, #0]
 801a7cc:	a90d      	add	r1, sp, #52	@ 0x34
 801a7ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a7d0:	4620      	mov	r0, r4
 801a7d2:	4798      	blx	r3
 801a7d4:	3501      	adds	r5, #1
 801a7d6:	b2ad      	uxth	r5, r5
 801a7d8:	e7e7      	b.n	801a7aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x78a>
 801a7da:	bf00      	nop
 801a7dc:	2005ba80 	.word	0x2005ba80

0801a7e0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	4b03      	ldr	r3, [pc, #12]	@ (801a7f0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801a7e4:	801a      	strh	r2, [r3, #0]
 801a7e6:	805a      	strh	r2, [r3, #2]
 801a7e8:	809a      	strh	r2, [r3, #4]
 801a7ea:	80da      	strh	r2, [r3, #6]
 801a7ec:	4770      	bx	lr
 801a7ee:	bf00      	nop
 801a7f0:	2005bacc 	.word	0x2005bacc

0801a7f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7f8:	4606      	mov	r6, r0
 801a7fa:	b09d      	sub	sp, #116	@ 0x74
 801a7fc:	a803      	add	r0, sp, #12
 801a7fe:	4614      	mov	r4, r2
 801a800:	468a      	mov	sl, r1
 801a802:	461d      	mov	r5, r3
 801a804:	f001 f985 	bl	801bb12 <_ZN8touchgfx12TextProviderC1Ev>
 801a808:	6833      	ldr	r3, [r6, #0]
 801a80a:	4630      	mov	r0, r6
 801a80c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a80e:	4798      	blx	r3
 801a810:	6833      	ldr	r3, [r6, #0]
 801a812:	4607      	mov	r7, r0
 801a814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a816:	4630      	mov	r0, r6
 801a818:	4798      	blx	r3
 801a81a:	462a      	mov	r2, r5
 801a81c:	2500      	movs	r5, #0
 801a81e:	9000      	str	r0, [sp, #0]
 801a820:	4621      	mov	r1, r4
 801a822:	463b      	mov	r3, r7
 801a824:	a803      	add	r0, sp, #12
 801a826:	f001 f9c7 	bl	801bbb8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a82a:	462c      	mov	r4, r5
 801a82c:	46a9      	mov	r9, r5
 801a82e:	46a8      	mov	r8, r5
 801a830:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801a834:	2300      	movs	r3, #0
 801a836:	9302      	str	r3, [sp, #8]
 801a838:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a83c:	429c      	cmp	r4, r3
 801a83e:	d002      	beq.n	801a846 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a840:	455c      	cmp	r4, fp
 801a842:	bf18      	it	ne
 801a844:	4625      	movne	r5, r4
 801a846:	ab02      	add	r3, sp, #8
 801a848:	4632      	mov	r2, r6
 801a84a:	4651      	mov	r1, sl
 801a84c:	a803      	add	r0, sp, #12
 801a84e:	f001 fccf 	bl	801c1f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a852:	4604      	mov	r4, r0
 801a854:	b108      	cbz	r0, 801a85a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801a856:	280a      	cmp	r0, #10
 801a858:	d10a      	bne.n	801a870 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801a85a:	45c1      	cmp	r9, r8
 801a85c:	bf38      	it	cc
 801a85e:	46c1      	movcc	r9, r8
 801a860:	f04f 0800 	mov.w	r8, #0
 801a864:	2c00      	cmp	r4, #0
 801a866:	d1e5      	bne.n	801a834 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a868:	4648      	mov	r0, r9
 801a86a:	b01d      	add	sp, #116	@ 0x74
 801a86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a870:	9a02      	ldr	r2, [sp, #8]
 801a872:	2a00      	cmp	r2, #0
 801a874:	d0de      	beq.n	801a834 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a876:	7b57      	ldrb	r7, [r2, #13]
 801a878:	6833      	ldr	r3, [r6, #0]
 801a87a:	007f      	lsls	r7, r7, #1
 801a87c:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801a880:	7a97      	ldrb	r7, [r2, #10]
 801a882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a884:	4307      	orrs	r7, r0
 801a886:	4629      	mov	r1, r5
 801a888:	4630      	mov	r0, r6
 801a88a:	8894      	ldrh	r4, [r2, #4]
 801a88c:	4798      	blx	r3
 801a88e:	4438      	add	r0, r7
 801a890:	4480      	add	r8, r0
 801a892:	fa1f f888 	uxth.w	r8, r8
 801a896:	e7e5      	b.n	801a864 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801a898 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a898:	b508      	push	{r3, lr}
 801a89a:	6803      	ldr	r3, [r0, #0]
 801a89c:	68db      	ldr	r3, [r3, #12]
 801a89e:	4798      	blx	r3
 801a8a0:	b128      	cbz	r0, 801a8ae <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801a8a2:	7b43      	ldrb	r3, [r0, #13]
 801a8a4:	7a80      	ldrb	r0, [r0, #10]
 801a8a6:	005b      	lsls	r3, r3, #1
 801a8a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a8ac:	4318      	orrs	r0, r3
 801a8ae:	bd08      	pop	{r3, pc}

0801a8b0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a8b0:	b40e      	push	{r1, r2, r3}
 801a8b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8b4:	4605      	mov	r5, r0
 801a8b6:	b09e      	sub	sp, #120	@ 0x78
 801a8b8:	ab23      	add	r3, sp, #140	@ 0x8c
 801a8ba:	f853 4b04 	ldr.w	r4, [r3], #4
 801a8be:	a805      	add	r0, sp, #20
 801a8c0:	9303      	str	r3, [sp, #12]
 801a8c2:	f001 f926 	bl	801bb12 <_ZN8touchgfx12TextProviderC1Ev>
 801a8c6:	682b      	ldr	r3, [r5, #0]
 801a8c8:	4628      	mov	r0, r5
 801a8ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a8cc:	4798      	blx	r3
 801a8ce:	682b      	ldr	r3, [r5, #0]
 801a8d0:	4606      	mov	r6, r0
 801a8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a8d4:	4628      	mov	r0, r5
 801a8d6:	4798      	blx	r3
 801a8d8:	4621      	mov	r1, r4
 801a8da:	2400      	movs	r4, #0
 801a8dc:	4633      	mov	r3, r6
 801a8de:	9000      	str	r0, [sp, #0]
 801a8e0:	9a03      	ldr	r2, [sp, #12]
 801a8e2:	ae1e      	add	r6, sp, #120	@ 0x78
 801a8e4:	a805      	add	r0, sp, #20
 801a8e6:	f001 f967 	bl	801bbb8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a8ea:	f846 4d68 	str.w	r4, [r6, #-104]!
 801a8ee:	4633      	mov	r3, r6
 801a8f0:	462a      	mov	r2, r5
 801a8f2:	4621      	mov	r1, r4
 801a8f4:	a805      	add	r0, sp, #20
 801a8f6:	f001 fc7b 	bl	801c1f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a8fa:	b1f0      	cbz	r0, 801a93a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801a8fc:	280a      	cmp	r0, #10
 801a8fe:	d018      	beq.n	801a932 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801a900:	9f04      	ldr	r7, [sp, #16]
 801a902:	b1b7      	cbz	r7, 801a932 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801a904:	7b78      	ldrb	r0, [r7, #13]
 801a906:	7a3b      	ldrb	r3, [r7, #8]
 801a908:	00c1      	lsls	r1, r0, #3
 801a90a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801a90e:	4319      	orrs	r1, r3
 801a910:	0643      	lsls	r3, r0, #25
 801a912:	bf44      	itt	mi
 801a914:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801a918:	b219      	sxthmi	r1, r3
 801a91a:	0100      	lsls	r0, r0, #4
 801a91c:	79fb      	ldrb	r3, [r7, #7]
 801a91e:	88ea      	ldrh	r2, [r5, #6]
 801a920:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801a924:	4303      	orrs	r3, r0
 801a926:	4413      	add	r3, r2
 801a928:	1a5b      	subs	r3, r3, r1
 801a92a:	b21b      	sxth	r3, r3
 801a92c:	429c      	cmp	r4, r3
 801a92e:	bfb8      	it	lt
 801a930:	461c      	movlt	r4, r3
 801a932:	4633      	mov	r3, r6
 801a934:	462a      	mov	r2, r5
 801a936:	2100      	movs	r1, #0
 801a938:	e7dc      	b.n	801a8f4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801a93a:	b2a0      	uxth	r0, r4
 801a93c:	b01e      	add	sp, #120	@ 0x78
 801a93e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a942:	b003      	add	sp, #12
 801a944:	4770      	bx	lr

0801a946 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801a946:	7a43      	ldrb	r3, [r0, #9]
 801a948:	8880      	ldrh	r0, [r0, #4]
 801a94a:	4418      	add	r0, r3
 801a94c:	b280      	uxth	r0, r0
 801a94e:	4770      	bx	lr

0801a950 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801a950:	6803      	ldr	r3, [r0, #0]
 801a952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a954:	4718      	bx	r3

0801a956 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a956:	b40e      	push	{r1, r2, r3}
 801a958:	b570      	push	{r4, r5, r6, lr}
 801a95a:	4604      	mov	r4, r0
 801a95c:	b09d      	sub	sp, #116	@ 0x74
 801a95e:	ab21      	add	r3, sp, #132	@ 0x84
 801a960:	f853 5b04 	ldr.w	r5, [r3], #4
 801a964:	a803      	add	r0, sp, #12
 801a966:	9302      	str	r3, [sp, #8]
 801a968:	f001 f8d3 	bl	801bb12 <_ZN8touchgfx12TextProviderC1Ev>
 801a96c:	6823      	ldr	r3, [r4, #0]
 801a96e:	4620      	mov	r0, r4
 801a970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a972:	4798      	blx	r3
 801a974:	6823      	ldr	r3, [r4, #0]
 801a976:	4606      	mov	r6, r0
 801a978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a97a:	4620      	mov	r0, r4
 801a97c:	4798      	blx	r3
 801a97e:	4633      	mov	r3, r6
 801a980:	9000      	str	r0, [sp, #0]
 801a982:	9a02      	ldr	r2, [sp, #8]
 801a984:	4629      	mov	r1, r5
 801a986:	a803      	add	r0, sp, #12
 801a988:	f001 f916 	bl	801bbb8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a98c:	a803      	add	r0, sp, #12
 801a98e:	f001 fcb1 	bl	801c2f4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a992:	2401      	movs	r4, #1
 801a994:	b2a3      	uxth	r3, r4
 801a996:	b140      	cbz	r0, 801a9aa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801a998:	280a      	cmp	r0, #10
 801a99a:	bf08      	it	eq
 801a99c:	3301      	addeq	r3, #1
 801a99e:	a803      	add	r0, sp, #12
 801a9a0:	bf08      	it	eq
 801a9a2:	b21c      	sxtheq	r4, r3
 801a9a4:	f001 fca6 	bl	801c2f4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a9a8:	e7f4      	b.n	801a994 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	b01d      	add	sp, #116	@ 0x74
 801a9ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a9b2:	b003      	add	sp, #12
 801a9b4:	4770      	bx	lr

0801a9b6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801a9b6:	b40e      	push	{r1, r2, r3}
 801a9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9ba:	4604      	mov	r4, r0
 801a9bc:	b09e      	sub	sp, #120	@ 0x78
 801a9be:	ab23      	add	r3, sp, #140	@ 0x8c
 801a9c0:	f853 5b04 	ldr.w	r5, [r3], #4
 801a9c4:	a805      	add	r0, sp, #20
 801a9c6:	9303      	str	r3, [sp, #12]
 801a9c8:	f001 f8a3 	bl	801bb12 <_ZN8touchgfx12TextProviderC1Ev>
 801a9cc:	6823      	ldr	r3, [r4, #0]
 801a9ce:	4620      	mov	r0, r4
 801a9d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a9d2:	4798      	blx	r3
 801a9d4:	6823      	ldr	r3, [r4, #0]
 801a9d6:	4606      	mov	r6, r0
 801a9d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a9da:	4620      	mov	r0, r4
 801a9dc:	4798      	blx	r3
 801a9de:	4633      	mov	r3, r6
 801a9e0:	4629      	mov	r1, r5
 801a9e2:	9000      	str	r0, [sp, #0]
 801a9e4:	9a03      	ldr	r2, [sp, #12]
 801a9e6:	a805      	add	r0, sp, #20
 801a9e8:	f001 f8e6 	bl	801bbb8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a9ec:	2100      	movs	r1, #0
 801a9ee:	ad1e      	add	r5, sp, #120	@ 0x78
 801a9f0:	f845 1d68 	str.w	r1, [r5, #-104]!
 801a9f4:	462b      	mov	r3, r5
 801a9f6:	4622      	mov	r2, r4
 801a9f8:	a805      	add	r0, sp, #20
 801a9fa:	f001 fbf9 	bl	801c1f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a9fe:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801aa02:	b1d8      	cbz	r0, 801aa3c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801aa04:	280a      	cmp	r0, #10
 801aa06:	d012      	beq.n	801aa2e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801aa08:	9804      	ldr	r0, [sp, #16]
 801aa0a:	b180      	cbz	r0, 801aa2e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801aa0c:	7b47      	ldrb	r7, [r0, #13]
 801aa0e:	88e2      	ldrh	r2, [r4, #6]
 801aa10:	00fb      	lsls	r3, r7, #3
 801aa12:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801aa16:	7a03      	ldrb	r3, [r0, #8]
 801aa18:	430b      	orrs	r3, r1
 801aa1a:	0679      	lsls	r1, r7, #25
 801aa1c:	bf44      	itt	mi
 801aa1e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801aa22:	b21b      	sxthmi	r3, r3
 801aa24:	1ad3      	subs	r3, r2, r3
 801aa26:	b21b      	sxth	r3, r3
 801aa28:	429e      	cmp	r6, r3
 801aa2a:	bfa8      	it	ge
 801aa2c:	461e      	movge	r6, r3
 801aa2e:	462b      	mov	r3, r5
 801aa30:	4622      	mov	r2, r4
 801aa32:	2100      	movs	r1, #0
 801aa34:	a805      	add	r0, sp, #20
 801aa36:	f001 fbdb 	bl	801c1f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aa3a:	e7e2      	b.n	801aa02 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801aa3c:	4630      	mov	r0, r6
 801aa3e:	b01e      	add	sp, #120	@ 0x78
 801aa40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aa44:	b003      	add	sp, #12
 801aa46:	4770      	bx	lr

0801aa48 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801aa48:	b513      	push	{r0, r1, r4, lr}
 801aa4a:	2400      	movs	r4, #0
 801aa4c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801aa50:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801aa54:	6803      	ldr	r3, [r0, #0]
 801aa56:	f8ad 1004 	strh.w	r1, [sp, #4]
 801aa5a:	9400      	str	r4, [sp, #0]
 801aa5c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801aa60:	691b      	ldr	r3, [r3, #16]
 801aa62:	4669      	mov	r1, sp
 801aa64:	4798      	blx	r3
 801aa66:	b002      	add	sp, #8
 801aa68:	bd10      	pop	{r4, pc}

0801aa6a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801aa6a:	b538      	push	{r3, r4, r5, lr}
 801aa6c:	460c      	mov	r4, r1
 801aa6e:	4605      	mov	r5, r0
 801aa70:	680b      	ldr	r3, [r1, #0]
 801aa72:	68db      	ldr	r3, [r3, #12]
 801aa74:	4798      	blx	r3
 801aa76:	6823      	ldr	r3, [r4, #0]
 801aa78:	4620      	mov	r0, r4
 801aa7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aa7c:	4629      	mov	r1, r5
 801aa7e:	4798      	blx	r3
 801aa80:	4628      	mov	r0, r5
 801aa82:	bd38      	pop	{r3, r4, r5, pc}

0801aa84 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801aa84:	b410      	push	{r4}
 801aa86:	880a      	ldrh	r2, [r1, #0]
 801aa88:	8884      	ldrh	r4, [r0, #4]
 801aa8a:	4422      	add	r2, r4
 801aa8c:	800a      	strh	r2, [r1, #0]
 801aa8e:	88c4      	ldrh	r4, [r0, #6]
 801aa90:	884a      	ldrh	r2, [r1, #2]
 801aa92:	4422      	add	r2, r4
 801aa94:	804a      	strh	r2, [r1, #2]
 801aa96:	6940      	ldr	r0, [r0, #20]
 801aa98:	b120      	cbz	r0, 801aaa4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801aa9a:	6803      	ldr	r3, [r0, #0]
 801aa9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aaa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aaa2:	4718      	bx	r3
 801aaa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aaa8:	4770      	bx	lr

0801aaaa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801aaaa:	b570      	push	{r4, r5, r6, lr}
 801aaac:	460c      	mov	r4, r1
 801aaae:	8882      	ldrh	r2, [r0, #4]
 801aab0:	880b      	ldrh	r3, [r1, #0]
 801aab2:	4605      	mov	r5, r0
 801aab4:	4413      	add	r3, r2
 801aab6:	800b      	strh	r3, [r1, #0]
 801aab8:	88c2      	ldrh	r2, [r0, #6]
 801aaba:	884b      	ldrh	r3, [r1, #2]
 801aabc:	4413      	add	r3, r2
 801aabe:	804b      	strh	r3, [r1, #2]
 801aac0:	1d01      	adds	r1, r0, #4
 801aac2:	4620      	mov	r0, r4
 801aac4:	f7f9 fa9e 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801aac8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	dd0b      	ble.n	801aae8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801aad0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	dd07      	ble.n	801aae8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801aad8:	6968      	ldr	r0, [r5, #20]
 801aada:	b128      	cbz	r0, 801aae8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801aadc:	6803      	ldr	r3, [r0, #0]
 801aade:	4621      	mov	r1, r4
 801aae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aae6:	4718      	bx	r3
 801aae8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801aaec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801aaec:	b570      	push	{r4, r5, r6, lr}
 801aaee:	460c      	mov	r4, r1
 801aaf0:	8882      	ldrh	r2, [r0, #4]
 801aaf2:	880b      	ldrh	r3, [r1, #0]
 801aaf4:	4605      	mov	r5, r0
 801aaf6:	4413      	add	r3, r2
 801aaf8:	800b      	strh	r3, [r1, #0]
 801aafa:	88c2      	ldrh	r2, [r0, #6]
 801aafc:	884b      	ldrh	r3, [r1, #2]
 801aafe:	4413      	add	r3, r2
 801ab00:	804b      	strh	r3, [r1, #2]
 801ab02:	1d01      	adds	r1, r0, #4
 801ab04:	4620      	mov	r0, r4
 801ab06:	f7f9 fa7d 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801ab0a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	dd19      	ble.n	801ab46 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ab12:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	dd15      	ble.n	801ab46 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ab1a:	6968      	ldr	r0, [r5, #20]
 801ab1c:	b128      	cbz	r0, 801ab2a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801ab1e:	6803      	ldr	r3, [r0, #0]
 801ab20:	4621      	mov	r1, r4
 801ab22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab26:	691b      	ldr	r3, [r3, #16]
 801ab28:	4718      	bx	r3
 801ab2a:	4b07      	ldr	r3, [pc, #28]	@ (801ab48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	3304      	adds	r3, #4
 801ab30:	429d      	cmp	r5, r3
 801ab32:	d108      	bne.n	801ab46 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ab34:	f7fe fd8c 	bl	8019650 <_ZN8touchgfx11Application11getInstanceEv>
 801ab38:	6803      	ldr	r3, [r0, #0]
 801ab3a:	6821      	ldr	r1, [r4, #0]
 801ab3c:	6862      	ldr	r2, [r4, #4]
 801ab3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ab40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab44:	4718      	bx	r3
 801ab46:	bd70      	pop	{r4, r5, r6, pc}
 801ab48:	2005bac4 	.word	0x2005bac4

0801ab4c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ab4c:	b570      	push	{r4, r5, r6, lr}
 801ab4e:	4604      	mov	r4, r0
 801ab50:	4616      	mov	r6, r2
 801ab52:	460d      	mov	r5, r1
 801ab54:	b901      	cbnz	r1, 801ab58 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ab56:	b192      	cbz	r2, 801ab7e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801ab58:	6823      	ldr	r3, [r4, #0]
 801ab5a:	4620      	mov	r0, r4
 801ab5c:	699b      	ldr	r3, [r3, #24]
 801ab5e:	4798      	blx	r3
 801ab60:	88e2      	ldrh	r2, [r4, #6]
 801ab62:	88a1      	ldrh	r1, [r4, #4]
 801ab64:	4432      	add	r2, r6
 801ab66:	4429      	add	r1, r5
 801ab68:	4620      	mov	r0, r4
 801ab6a:	b212      	sxth	r2, r2
 801ab6c:	b209      	sxth	r1, r1
 801ab6e:	f7f5 fc60 	bl	8010432 <_ZN8touchgfx8Drawable5setXYEss>
 801ab72:	6823      	ldr	r3, [r4, #0]
 801ab74:	4620      	mov	r0, r4
 801ab76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab7a:	699b      	ldr	r3, [r3, #24]
 801ab7c:	4718      	bx	r3
 801ab7e:	bd70      	pop	{r4, r5, r6, pc}

0801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801ab80:	b510      	push	{r4, lr}
 801ab82:	2300      	movs	r3, #0
 801ab84:	4604      	mov	r4, r0
 801ab86:	4608      	mov	r0, r1
 801ab88:	8023      	strh	r3, [r4, #0]
 801ab8a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ab8e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801ab92:	8063      	strh	r3, [r4, #2]
 801ab94:	6803      	ldr	r3, [r0, #0]
 801ab96:	80a1      	strh	r1, [r4, #4]
 801ab98:	80e2      	strh	r2, [r4, #6]
 801ab9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab9c:	4621      	mov	r1, r4
 801ab9e:	4798      	blx	r3
 801aba0:	4620      	mov	r0, r4
 801aba2:	bd10      	pop	{r4, pc}

0801aba4 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801aba4:	4a04      	ldr	r2, [pc, #16]	@ (801abb8 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801aba6:	6002      	str	r2, [r0, #0]
 801aba8:	2200      	movs	r2, #0
 801abaa:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801abae:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801abb2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801abb6:	4770      	bx	lr
 801abb8:	0802f928 	.word	0x0802f928

0801abbc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801abbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abc0:	4604      	mov	r4, r0
 801abc2:	b087      	sub	sp, #28
 801abc4:	8b45      	ldrh	r5, [r0, #26]
 801abc6:	f8b2 c000 	ldrh.w	ip, [r2]
 801abca:	9105      	str	r1, [sp, #20]
 801abcc:	68e1      	ldr	r1, [r4, #12]
 801abce:	1c68      	adds	r0, r5, #1
 801abd0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801abd4:	f01c 0501 	ands.w	r5, ip, #1
 801abd8:	9203      	str	r2, [sp, #12]
 801abda:	b280      	uxth	r0, r0
 801abdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801abe0:	9502      	str	r5, [sp, #8]
 801abe2:	d07d      	beq.n	801ace0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 801abe4:	ee07 2a90 	vmov	s15, r2
 801abe8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801abec:	8360      	strh	r0, [r4, #26]
 801abee:	edc1 6a00 	vstr	s13, [r1]
 801abf2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801abf6:	f04f 0e00 	mov.w	lr, #0
 801abfa:	ee07 2a10 	vmov	s14, r2
 801abfe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ac02:	8b61      	ldrh	r1, [r4, #26]
 801ac04:	68e2      	ldr	r2, [r4, #12]
 801ac06:	1c48      	adds	r0, r1, #1
 801ac08:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ac0c:	8360      	strh	r0, [r4, #26]
 801ac0e:	ee06 ea10 	vmov	s12, lr
 801ac12:	ed82 7a00 	vstr	s14, [r2]
 801ac16:	2501      	movs	r5, #1
 801ac18:	8b21      	ldrh	r1, [r4, #24]
 801ac1a:	68a2      	ldr	r2, [r4, #8]
 801ac1c:	1c48      	adds	r0, r1, #1
 801ac1e:	8320      	strh	r0, [r4, #24]
 801ac20:	5455      	strb	r5, [r2, r1]
 801ac22:	2200      	movs	r2, #0
 801ac24:	3304      	adds	r3, #4
 801ac26:	9300      	str	r3, [sp, #0]
 801ac28:	46aa      	mov	sl, r5
 801ac2a:	ee07 2a90 	vmov	s15, r2
 801ac2e:	4613      	mov	r3, r2
 801ac30:	4611      	mov	r1, r2
 801ac32:	462e      	mov	r6, r5
 801ac34:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801ac38:	9201      	str	r2, [sp, #4]
 801ac3a:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801ac3e:	9805      	ldr	r0, [sp, #20]
 801ac40:	f8d4 b008 	ldr.w	fp, [r4, #8]
 801ac44:	f108 0701 	add.w	r7, r8, #1
 801ac48:	42a8      	cmp	r0, r5
 801ac4a:	b2bf      	uxth	r7, r7
 801ac4c:	eb0b 0908 	add.w	r9, fp, r8
 801ac50:	f340 80db 	ble.w	801ae0a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 801ac54:	fa4c f906 	asr.w	r9, ip, r6
 801ac58:	f009 0901 	and.w	r9, r9, #1
 801ac5c:	fa5f f389 	uxtb.w	r3, r9
 801ac60:	9304      	str	r3, [sp, #16]
 801ac62:	9b00      	ldr	r3, [sp, #0]
 801ac64:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ac68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ac6c:	f1b9 0f00 	cmp.w	r9, #0
 801ac70:	d07d      	beq.n	801ad6e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 801ac72:	ee05 1a10 	vmov	s10, r1
 801ac76:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 801ac7a:	ee05 3a10 	vmov	s10, r3
 801ac7e:	8327      	strh	r7, [r4, #24]
 801ac80:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801ac84:	f1ba 0f00 	cmp.w	sl, #0
 801ac88:	d050      	beq.n	801ad2c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 801ac8a:	f04f 0002 	mov.w	r0, #2
 801ac8e:	f80b 0008 	strb.w	r0, [fp, r8]
 801ac92:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ac96:	68e7      	ldr	r7, [r4, #12]
 801ac98:	f108 0901 	add.w	r9, r8, #1
 801ac9c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801aca0:	f8a4 901a 	strh.w	r9, [r4, #26]
 801aca4:	edc7 4a00 	vstr	s9, [r7]
 801aca8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801acac:	68e7      	ldr	r7, [r4, #12]
 801acae:	f108 0901 	add.w	r9, r8, #1
 801acb2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801acb6:	f8a4 901a 	strh.w	r9, [r4, #26]
 801acba:	ed87 5a00 	vstr	s10, [r7]
 801acbe:	3601      	adds	r6, #1
 801acc0:	2e10      	cmp	r6, #16
 801acc2:	d106      	bne.n	801acd2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 801acc4:	9e01      	ldr	r6, [sp, #4]
 801acc6:	9803      	ldr	r0, [sp, #12]
 801acc8:	3601      	adds	r6, #1
 801acca:	9601      	str	r6, [sp, #4]
 801accc:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 801acd0:	2600      	movs	r6, #0
 801acd2:	9800      	ldr	r0, [sp, #0]
 801acd4:	3501      	adds	r5, #1
 801acd6:	3004      	adds	r0, #4
 801acd8:	9000      	str	r0, [sp, #0]
 801acda:	f8dd a010 	ldr.w	sl, [sp, #16]
 801acde:	e7ac      	b.n	801ac3a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 801ace0:	ee06 2a10 	vmov	s12, r2
 801ace4:	ee16 5a10 	vmov	r5, s12
 801ace8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801acec:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801acf0:	442a      	add	r2, r5
 801acf2:	ee06 2a90 	vmov	s13, r2
 801acf6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801acfa:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801acfe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ad02:	4472      	add	r2, lr
 801ad04:	ee07 2a10 	vmov	s14, r2
 801ad08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ad0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad10:	8360      	strh	r0, [r4, #26]
 801ad12:	edc1 6a00 	vstr	s13, [r1]
 801ad16:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ad1a:	8b61      	ldrh	r1, [r4, #26]
 801ad1c:	68e2      	ldr	r2, [r4, #12]
 801ad1e:	1c48      	adds	r0, r1, #1
 801ad20:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ad24:	8360      	strh	r0, [r4, #26]
 801ad26:	ed82 7a00 	vstr	s14, [r2]
 801ad2a:	e774      	b.n	801ac16 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 801ad2c:	f04f 0005 	mov.w	r0, #5
 801ad30:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 801ad34:	f80b 0008 	strb.w	r0, [fp, r8]
 801ad38:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ad3c:	68e7      	ldr	r7, [r4, #12]
 801ad3e:	f108 0901 	add.w	r9, r8, #1
 801ad42:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ad46:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ad4a:	ed87 4a00 	vstr	s8, [r7]
 801ad4e:	ee04 2a10 	vmov	s8, r2
 801ad52:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801ad56:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ad5a:	68e7      	ldr	r7, [r4, #12]
 801ad5c:	f108 0901 	add.w	r9, r8, #1
 801ad60:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ad64:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ad68:	ed87 4a00 	vstr	s8, [r7]
 801ad6c:	e791      	b.n	801ac92 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 801ad6e:	f1ba 0f00 	cmp.w	sl, #0
 801ad72:	d146      	bne.n	801ae02 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 801ad74:	f04f 0005 	mov.w	r0, #5
 801ad78:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801ad7c:	8327      	strh	r7, [r4, #24]
 801ad7e:	f80b 0008 	strb.w	r0, [fp, r8]
 801ad82:	ee17 0a90 	vmov	r0, s15
 801ad86:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ad8a:	68e7      	ldr	r7, [r4, #12]
 801ad8c:	f108 0901 	add.w	r9, r8, #1
 801ad90:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ad94:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ad98:	ed87 5a00 	vstr	s10, [r7]
 801ad9c:	ee05 2a10 	vmov	s10, r2
 801ada0:	4408      	add	r0, r1
 801ada2:	ee07 0a90 	vmov	s15, r0
 801ada6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801adaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801adae:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801adb2:	68e7      	ldr	r7, [r4, #12]
 801adb4:	f108 0901 	add.w	r9, r8, #1
 801adb8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801adbc:	f8a4 901a 	strh.w	r9, [r4, #26]
 801adc0:	ed87 5a00 	vstr	s10, [r7]
 801adc4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801adc8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801adcc:	68e7      	ldr	r7, [r4, #12]
 801adce:	f108 0901 	add.w	r9, r8, #1
 801add2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801add6:	441a      	add	r2, r3
 801add8:	f8a4 901a 	strh.w	r9, [r4, #26]
 801addc:	edc7 7a00 	vstr	s15, [r7]
 801ade0:	ee07 2a90 	vmov	s15, r2
 801ade4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ade8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801adec:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801adf0:	68e7      	ldr	r7, [r4, #12]
 801adf2:	f108 0901 	add.w	r9, r8, #1
 801adf6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801adfa:	f8a4 901a 	strh.w	r9, [r4, #26]
 801adfe:	edc7 7a00 	vstr	s15, [r7]
 801ae02:	461a      	mov	r2, r3
 801ae04:	ee07 1a90 	vmov	s15, r1
 801ae08:	e759      	b.n	801acbe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801ae0a:	f1ba 0f00 	cmp.w	sl, #0
 801ae0e:	d045      	beq.n	801ae9c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 801ae10:	ee05 1a90 	vmov	s11, r1
 801ae14:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801ae18:	eef4 5a66 	vcmp.f32	s11, s13
 801ae1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae20:	d108      	bne.n	801ae34 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 801ae22:	ee05 3a90 	vmov	s11, r3
 801ae26:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801ae2a:	eef4 5a47 	vcmp.f32	s11, s14
 801ae2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae32:	d033      	beq.n	801ae9c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 801ae34:	9b02      	ldr	r3, [sp, #8]
 801ae36:	8327      	strh	r7, [r4, #24]
 801ae38:	b1b3      	cbz	r3, 801ae68 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 801ae3a:	2302      	movs	r3, #2
 801ae3c:	f889 3000 	strb.w	r3, [r9]
 801ae40:	8b62      	ldrh	r2, [r4, #26]
 801ae42:	68e3      	ldr	r3, [r4, #12]
 801ae44:	1c51      	adds	r1, r2, #1
 801ae46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ae4a:	8361      	strh	r1, [r4, #26]
 801ae4c:	edc3 6a00 	vstr	s13, [r3]
 801ae50:	8b62      	ldrh	r2, [r4, #26]
 801ae52:	68e3      	ldr	r3, [r4, #12]
 801ae54:	1c51      	adds	r1, r2, #1
 801ae56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ae5a:	8361      	strh	r1, [r4, #26]
 801ae5c:	ed83 7a00 	vstr	s14, [r3]
 801ae60:	9800      	ldr	r0, [sp, #0]
 801ae62:	b007      	add	sp, #28
 801ae64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae68:	2305      	movs	r3, #5
 801ae6a:	f889 3000 	strb.w	r3, [r9]
 801ae6e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801ae72:	ee07 ea90 	vmov	s15, lr
 801ae76:	8b62      	ldrh	r2, [r4, #26]
 801ae78:	68e3      	ldr	r3, [r4, #12]
 801ae7a:	1c51      	adds	r1, r2, #1
 801ae7c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ae80:	8361      	strh	r1, [r4, #26]
 801ae82:	ed83 6a00 	vstr	s12, [r3]
 801ae86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae8a:	8b62      	ldrh	r2, [r4, #26]
 801ae8c:	68e3      	ldr	r3, [r4, #12]
 801ae8e:	1c51      	adds	r1, r2, #1
 801ae90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ae94:	8361      	strh	r1, [r4, #26]
 801ae96:	edc3 7a00 	vstr	s15, [r3]
 801ae9a:	e7d1      	b.n	801ae40 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801ae9c:	ee05 2a90 	vmov	s11, r2
 801aea0:	2305      	movs	r3, #5
 801aea2:	9902      	ldr	r1, [sp, #8]
 801aea4:	8327      	strh	r7, [r4, #24]
 801aea6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801aeaa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801aeae:	f889 3000 	strb.w	r3, [r9]
 801aeb2:	b181      	cbz	r1, 801aed6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 801aeb4:	8b62      	ldrh	r2, [r4, #26]
 801aeb6:	68e3      	ldr	r3, [r4, #12]
 801aeb8:	1c51      	adds	r1, r2, #1
 801aeba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801aebe:	8361      	strh	r1, [r4, #26]
 801aec0:	ed83 5a00 	vstr	s10, [r3]
 801aec4:	8b62      	ldrh	r2, [r4, #26]
 801aec6:	68e3      	ldr	r3, [r4, #12]
 801aec8:	1c51      	adds	r1, r2, #1
 801aeca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801aece:	8361      	strh	r1, [r4, #26]
 801aed0:	edc3 5a00 	vstr	s11, [r3]
 801aed4:	e7b4      	b.n	801ae40 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801aed6:	8b65      	ldrh	r5, [r4, #26]
 801aed8:	68e1      	ldr	r1, [r4, #12]
 801aeda:	1c6e      	adds	r6, r5, #1
 801aedc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801aee0:	8366      	strh	r6, [r4, #26]
 801aee2:	ed81 5a00 	vstr	s10, [r1]
 801aee6:	8b65      	ldrh	r5, [r4, #26]
 801aee8:	68e1      	ldr	r1, [r4, #12]
 801aeea:	1c6e      	adds	r6, r5, #1
 801aeec:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801aef0:	8366      	strh	r6, [r4, #26]
 801aef2:	edc1 5a00 	vstr	s11, [r1]
 801aef6:	8b65      	ldrh	r5, [r4, #26]
 801aef8:	68e1      	ldr	r1, [r4, #12]
 801aefa:	1c6e      	adds	r6, r5, #1
 801aefc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801af00:	ee17 0a90 	vmov	r0, s15
 801af04:	ee16 5a10 	vmov	r5, s12
 801af08:	4428      	add	r0, r5
 801af0a:	ee07 0a90 	vmov	s15, r0
 801af0e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801af12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af16:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801af1a:	4472      	add	r2, lr
 801af1c:	8366      	strh	r6, [r4, #26]
 801af1e:	edc1 7a00 	vstr	s15, [r1]
 801af22:	ee07 2a90 	vmov	s15, r2
 801af26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af2a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801af2e:	8b61      	ldrh	r1, [r4, #26]
 801af30:	68e5      	ldr	r5, [r4, #12]
 801af32:	1c4e      	adds	r6, r1, #1
 801af34:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801af38:	8366      	strh	r6, [r4, #26]
 801af3a:	edc1 7a00 	vstr	s15, [r1]
 801af3e:	8b22      	ldrh	r2, [r4, #24]
 801af40:	68a1      	ldr	r1, [r4, #8]
 801af42:	1c55      	adds	r5, r2, #1
 801af44:	8325      	strh	r5, [r4, #24]
 801af46:	548b      	strb	r3, [r1, r2]
 801af48:	e791      	b.n	801ae6e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

0801af4c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801af4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af50:	b08e      	sub	sp, #56	@ 0x38
 801af52:	4604      	mov	r4, r0
 801af54:	4688      	mov	r8, r1
 801af56:	4615      	mov	r5, r2
 801af58:	4699      	mov	r9, r3
 801af5a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801af5c:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801af60:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801af62:	f7f8 fd61 	bl	8013a28 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801af66:	6060      	str	r0, [r4, #4]
 801af68:	f1b9 0f00 	cmp.w	r9, #0
 801af6c:	f000 80e8 	beq.w	801b140 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801af70:	2800      	cmp	r0, #0
 801af72:	f000 80e5 	beq.w	801b140 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801af76:	a805      	add	r0, sp, #20
 801af78:	f000 f8f9 	bl	801b16e <_ZN8touchgfx9Matrix3x3C1Ev>
 801af7c:	6833      	ldr	r3, [r6, #0]
 801af7e:	4630      	mov	r0, r6
 801af80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801af82:	4798      	blx	r3
 801af84:	a805      	add	r0, sp, #20
 801af86:	eef0 0a40 	vmov.f32	s1, s0
 801af8a:	f000 f8f4 	bl	801b176 <_ZN8touchgfx9Matrix3x35scaleEff>
 801af8e:	6860      	ldr	r0, [r4, #4]
 801af90:	f1ba 0f03 	cmp.w	sl, #3
 801af94:	d83b      	bhi.n	801b00e <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801af96:	e8df f00a 	tbb	[pc, sl]
 801af9a:	1002      	.short	0x1002
 801af9c:	9f71      	.short	0x9f71
 801af9e:	6803      	ldr	r3, [r0, #0]
 801afa0:	462a      	mov	r2, r5
 801afa2:	689b      	ldr	r3, [r3, #8]
 801afa4:	4641      	mov	r1, r8
 801afa6:	4798      	blx	r3
 801afa8:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801afac:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801afb0:	ee07 7a90 	vmov	s15, r7
 801afb4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801afb8:	e026      	b.n	801b008 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801afba:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801afbe:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801afc2:	8869      	ldrh	r1, [r5, #2]
 801afc4:	1a9b      	subs	r3, r3, r2
 801afc6:	1a5b      	subs	r3, r3, r1
 801afc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801afcc:	882b      	ldrh	r3, [r5, #0]
 801afce:	f8ad 2010 	strh.w	r2, [sp, #16]
 801afd2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801afd6:	88ab      	ldrh	r3, [r5, #4]
 801afd8:	aa03      	add	r2, sp, #12
 801afda:	f8ad 3012 	strh.w	r3, [sp, #18]
 801afde:	6803      	ldr	r3, [r0, #0]
 801afe0:	4641      	mov	r1, r8
 801afe2:	689b      	ldr	r3, [r3, #8]
 801afe4:	4798      	blx	r3
 801afe6:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801b148 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801afea:	a805      	add	r0, sp, #20
 801afec:	f000 f8e8 	bl	801b1c0 <_ZN8touchgfx9Matrix3x36rotateEf>
 801aff0:	ee07 7a90 	vmov	s15, r7
 801aff4:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801aff8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801affa:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801affe:	1a9b      	subs	r3, r3, r2
 801b000:	ee00 3a10 	vmov	s0, r3
 801b004:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801b008:	a805      	add	r0, sp, #20
 801b00a:	f000 f927 	bl	801b25c <_ZN8touchgfx9Matrix3x39translateEff>
 801b00e:	2500      	movs	r5, #0
 801b010:	6860      	ldr	r0, [r4, #4]
 801b012:	a905      	add	r1, sp, #20
 801b014:	6803      	ldr	r3, [r0, #0]
 801b016:	f109 0602 	add.w	r6, r9, #2
 801b01a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b01c:	4798      	blx	r3
 801b01e:	6860      	ldr	r0, [r4, #4]
 801b020:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b022:	6803      	ldr	r3, [r0, #0]
 801b024:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801b028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b02a:	4798      	blx	r3
 801b02c:	6860      	ldr	r0, [r4, #4]
 801b02e:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801b032:	6803      	ldr	r3, [r0, #0]
 801b034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b036:	4798      	blx	r3
 801b038:	6860      	ldr	r0, [r4, #4]
 801b03a:	2101      	movs	r1, #1
 801b03c:	6803      	ldr	r3, [r0, #0]
 801b03e:	68db      	ldr	r3, [r3, #12]
 801b040:	4798      	blx	r3
 801b042:	f8b9 7000 	ldrh.w	r7, [r9]
 801b046:	f104 0310 	add.w	r3, r4, #16
 801b04a:	61a5      	str	r5, [r4, #24]
 801b04c:	f104 0208 	add.w	r2, r4, #8
 801b050:	f104 0114 	add.w	r1, r4, #20
 801b054:	f104 000c 	add.w	r0, r4, #12
 801b058:	f7f4 fbba 	bl	800f7d0 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801b05c:	42af      	cmp	r7, r5
 801b05e:	dd60      	ble.n	801b122 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801b060:	8831      	ldrh	r1, [r6, #0]
 801b062:	1cb2      	adds	r2, r6, #2
 801b064:	f101 030f 	add.w	r3, r1, #15
 801b068:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801b06c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b070:	4620      	mov	r0, r4
 801b072:	f7ff fda3 	bl	801abbc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801b076:	3501      	adds	r5, #1
 801b078:	4606      	mov	r6, r0
 801b07a:	e7ef      	b.n	801b05c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801b07c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b080:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801b084:	8829      	ldrh	r1, [r5, #0]
 801b086:	1a9b      	subs	r3, r3, r2
 801b088:	1a5b      	subs	r3, r3, r1
 801b08a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b08e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b092:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b096:	886d      	ldrh	r5, [r5, #2]
 801b098:	1a5b      	subs	r3, r3, r1
 801b09a:	1b5b      	subs	r3, r3, r5
 801b09c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b0a0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b0a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b0a8:	6803      	ldr	r3, [r0, #0]
 801b0aa:	aa03      	add	r2, sp, #12
 801b0ac:	689b      	ldr	r3, [r3, #8]
 801b0ae:	4641      	mov	r1, r8
 801b0b0:	4798      	blx	r3
 801b0b2:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801b14c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801b0b6:	a805      	add	r0, sp, #20
 801b0b8:	f000 f882 	bl	801b1c0 <_ZN8touchgfx9Matrix3x36rotateEf>
 801b0bc:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b0c0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b0c2:	1a9b      	subs	r3, r3, r2
 801b0c4:	ee00 3a90 	vmov	s1, r3
 801b0c8:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801b0cc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b0d0:	1bdb      	subs	r3, r3, r7
 801b0d2:	ee00 3a10 	vmov	s0, r3
 801b0d6:	e795      	b.n	801b004 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801b0d8:	886b      	ldrh	r3, [r5, #2]
 801b0da:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b0de:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b0e2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b0e6:	8829      	ldrh	r1, [r5, #0]
 801b0e8:	1a9b      	subs	r3, r3, r2
 801b0ea:	1a5b      	subs	r3, r3, r1
 801b0ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b0f0:	88eb      	ldrh	r3, [r5, #6]
 801b0f2:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b0f6:	f8ad 3010 	strh.w	r3, [sp, #16]
 801b0fa:	6803      	ldr	r3, [r0, #0]
 801b0fc:	aa03      	add	r2, sp, #12
 801b0fe:	689b      	ldr	r3, [r3, #8]
 801b100:	4641      	mov	r1, r8
 801b102:	4798      	blx	r3
 801b104:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801b150 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801b108:	a805      	add	r0, sp, #20
 801b10a:	f000 f859 	bl	801b1c0 <_ZN8touchgfx9Matrix3x36rotateEf>
 801b10e:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b112:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801b116:	1bdb      	subs	r3, r3, r7
 801b118:	ee00 3a90 	vmov	s1, r3
 801b11c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b120:	e748      	b.n	801afb4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801b122:	2100      	movs	r1, #0
 801b124:	6860      	ldr	r0, [r4, #4]
 801b126:	8b22      	ldrh	r2, [r4, #24]
 801b128:	6803      	ldr	r3, [r0, #0]
 801b12a:	9101      	str	r1, [sp, #4]
 801b12c:	8b61      	ldrh	r1, [r4, #26]
 801b12e:	9100      	str	r1, [sp, #0]
 801b130:	6a1d      	ldr	r5, [r3, #32]
 801b132:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801b136:	47a8      	blx	r5
 801b138:	6860      	ldr	r0, [r4, #4]
 801b13a:	6803      	ldr	r3, [r0, #0]
 801b13c:	69db      	ldr	r3, [r3, #28]
 801b13e:	4798      	blx	r3
 801b140:	b00e      	add	sp, #56	@ 0x38
 801b142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b146:	bf00      	nop
 801b148:	42b40000 	.word	0x42b40000
 801b14c:	43340000 	.word	0x43340000
 801b150:	43870000 	.word	0x43870000

0801b154 <_ZN8touchgfx9Matrix3x35resetEv>:
 801b154:	2300      	movs	r3, #0
 801b156:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801b15a:	6043      	str	r3, [r0, #4]
 801b15c:	6002      	str	r2, [r0, #0]
 801b15e:	6083      	str	r3, [r0, #8]
 801b160:	60c3      	str	r3, [r0, #12]
 801b162:	6102      	str	r2, [r0, #16]
 801b164:	6143      	str	r3, [r0, #20]
 801b166:	6183      	str	r3, [r0, #24]
 801b168:	61c3      	str	r3, [r0, #28]
 801b16a:	6202      	str	r2, [r0, #32]
 801b16c:	4770      	bx	lr

0801b16e <_ZN8touchgfx9Matrix3x3C1Ev>:
 801b16e:	b508      	push	{r3, lr}
 801b170:	f7ff fff0 	bl	801b154 <_ZN8touchgfx9Matrix3x35resetEv>
 801b174:	bd08      	pop	{r3, pc}

0801b176 <_ZN8touchgfx9Matrix3x35scaleEff>:
 801b176:	edd0 7a00 	vldr	s15, [r0]
 801b17a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b17e:	edc0 7a00 	vstr	s15, [r0]
 801b182:	edd0 7a01 	vldr	s15, [r0, #4]
 801b186:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b18a:	edc0 7a01 	vstr	s15, [r0, #4]
 801b18e:	edd0 7a02 	vldr	s15, [r0, #8]
 801b192:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b196:	edd0 7a03 	vldr	s15, [r0, #12]
 801b19a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801b19e:	edc0 7a03 	vstr	s15, [r0, #12]
 801b1a2:	edd0 7a04 	vldr	s15, [r0, #16]
 801b1a6:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801b1aa:	edc0 7a04 	vstr	s15, [r0, #16]
 801b1ae:	edd0 7a05 	vldr	s15, [r0, #20]
 801b1b2:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801b1b6:	ed80 0a02 	vstr	s0, [r0, #8]
 801b1ba:	edc0 0a05 	vstr	s1, [r0, #20]
 801b1be:	4770      	bx	lr

0801b1c0 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801b1c0:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801b254 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801b1c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b1c8:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801b258 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801b1cc:	b510      	push	{r4, lr}
 801b1ce:	ed2d 8b02 	vpush	{d8}
 801b1d2:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801b1d6:	eeb0 0a68 	vmov.f32	s0, s17
 801b1da:	4604      	mov	r4, r0
 801b1dc:	f010 fd08 	bl	802bbf0 <cosf>
 801b1e0:	eeb0 8a40 	vmov.f32	s16, s0
 801b1e4:	eeb0 0a68 	vmov.f32	s0, s17
 801b1e8:	f010 fd46 	bl	802bc78 <sinf>
 801b1ec:	edd4 6a03 	vldr	s13, [r4, #12]
 801b1f0:	edd4 4a00 	vldr	s9, [r4]
 801b1f4:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801b1f8:	ed94 7a04 	vldr	s14, [r4, #16]
 801b1fc:	eee8 7a24 	vfma.f32	s15, s16, s9
 801b200:	ed94 5a01 	vldr	s10, [r4, #4]
 801b204:	edc4 7a00 	vstr	s15, [r4]
 801b208:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801b20c:	eee8 7a05 	vfma.f32	s15, s16, s10
 801b210:	edc4 7a01 	vstr	s15, [r4, #4]
 801b214:	edd4 7a05 	vldr	s15, [r4, #20]
 801b218:	edd4 5a02 	vldr	s11, [r4, #8]
 801b21c:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801b220:	ee66 6a88 	vmul.f32	s13, s13, s16
 801b224:	ee27 7a08 	vmul.f32	s14, s14, s16
 801b228:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b22c:	eea8 6a25 	vfma.f32	s12, s16, s11
 801b230:	ecbd 8b02 	vpop	{d8}
 801b234:	eee0 6a24 	vfma.f32	s13, s0, s9
 801b238:	eea0 7a05 	vfma.f32	s14, s0, s10
 801b23c:	eee0 7a25 	vfma.f32	s15, s0, s11
 801b240:	ed84 6a02 	vstr	s12, [r4, #8]
 801b244:	edc4 6a03 	vstr	s13, [r4, #12]
 801b248:	ed84 7a04 	vstr	s14, [r4, #16]
 801b24c:	edc4 7a05 	vstr	s15, [r4, #20]
 801b250:	bd10      	pop	{r4, pc}
 801b252:	bf00      	nop
 801b254:	40490fdb 	.word	0x40490fdb
 801b258:	43340000 	.word	0x43340000

0801b25c <_ZN8touchgfx9Matrix3x39translateEff>:
 801b25c:	ed90 6a06 	vldr	s12, [r0, #24]
 801b260:	edd0 7a00 	vldr	s15, [r0]
 801b264:	eee6 7a00 	vfma.f32	s15, s12, s0
 801b268:	edd0 6a07 	vldr	s13, [r0, #28]
 801b26c:	edc0 7a00 	vstr	s15, [r0]
 801b270:	edd0 7a01 	vldr	s15, [r0, #4]
 801b274:	eee6 7a80 	vfma.f32	s15, s13, s0
 801b278:	ed90 7a08 	vldr	s14, [r0, #32]
 801b27c:	edc0 7a01 	vstr	s15, [r0, #4]
 801b280:	edd0 7a02 	vldr	s15, [r0, #8]
 801b284:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b288:	edc0 7a02 	vstr	s15, [r0, #8]
 801b28c:	edd0 7a03 	vldr	s15, [r0, #12]
 801b290:	eee6 7a20 	vfma.f32	s15, s12, s1
 801b294:	edc0 7a03 	vstr	s15, [r0, #12]
 801b298:	edd0 7a04 	vldr	s15, [r0, #16]
 801b29c:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801b2a0:	edc0 7a04 	vstr	s15, [r0, #16]
 801b2a4:	edd0 7a05 	vldr	s15, [r0, #20]
 801b2a8:	eee7 7a20 	vfma.f32	s15, s14, s1
 801b2ac:	edc0 7a05 	vstr	s15, [r0, #20]
 801b2b0:	4770      	bx	lr

0801b2b2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801b2b2:	edd0 6a01 	vldr	s13, [r0, #4]
 801b2b6:	edd0 7a04 	vldr	s15, [r0, #16]
 801b2ba:	ed90 7a03 	vldr	s14, [r0, #12]
 801b2be:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801b2c2:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801b2c6:	edd0 6a00 	vldr	s13, [r0]
 801b2ca:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b2ce:	eee6 0a80 	vfma.f32	s1, s13, s0
 801b2d2:	ed90 7a05 	vldr	s14, [r0, #20]
 801b2d6:	ed90 0a02 	vldr	s0, [r0, #8]
 801b2da:	ee30 0a80 	vadd.f32	s0, s1, s0
 801b2de:	ee77 0a87 	vadd.f32	s1, s15, s14
 801b2e2:	b084      	sub	sp, #16
 801b2e4:	b004      	add	sp, #16
 801b2e6:	4770      	bx	lr

0801b2e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801b2e8:	b530      	push	{r4, r5, lr}
 801b2ea:	8083      	strh	r3, [r0, #4]
 801b2ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b2f0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801b2f4:	80c3      	strh	r3, [r0, #6]
 801b2f6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801b2fa:	6141      	str	r1, [r0, #20]
 801b2fc:	7203      	strb	r3, [r0, #8]
 801b2fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b302:	8302      	strh	r2, [r0, #24]
 801b304:	7243      	strb	r3, [r0, #9]
 801b306:	7a83      	ldrb	r3, [r0, #10]
 801b308:	f365 0306 	bfi	r3, r5, #0, #7
 801b30c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801b310:	f365 13c7 	bfi	r3, r5, #7, #1
 801b314:	7283      	strb	r3, [r0, #10]
 801b316:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801b31a:	72c3      	strb	r3, [r0, #11]
 801b31c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801b320:	7303      	strb	r3, [r0, #12]
 801b322:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b326:	81c3      	strh	r3, [r0, #14]
 801b328:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b32c:	8203      	strh	r3, [r0, #16]
 801b32e:	4b01      	ldr	r3, [pc, #4]	@ (801b334 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801b330:	6003      	str	r3, [r0, #0]
 801b332:	bd30      	pop	{r4, r5, pc}
 801b334:	0802f93c 	.word	0x0802f93c

0801b338 <_ZNK8touchgfx9ConstFont4findEt>:
 801b338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b33a:	6944      	ldr	r4, [r0, #20]
 801b33c:	b3bc      	cbz	r4, 801b3ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b33e:	88a3      	ldrh	r3, [r4, #4]
 801b340:	8b02      	ldrh	r2, [r0, #24]
 801b342:	1acb      	subs	r3, r1, r3
 801b344:	f102 32ff 	add.w	r2, r2, #4294967295
 801b348:	d431      	bmi.n	801b3ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b34a:	4293      	cmp	r3, r2
 801b34c:	dd0c      	ble.n	801b368 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b34e:	230e      	movs	r3, #14
 801b350:	fb03 4302 	mla	r3, r3, r2, r4
 801b354:	889b      	ldrh	r3, [r3, #4]
 801b356:	1a5b      	subs	r3, r3, r1
 801b358:	1ad3      	subs	r3, r2, r3
 801b35a:	429a      	cmp	r2, r3
 801b35c:	db27      	blt.n	801b3ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b35e:	2b00      	cmp	r3, #0
 801b360:	bfbc      	itt	lt
 801b362:	2302      	movlt	r3, #2
 801b364:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b368:	2500      	movs	r5, #0
 801b36a:	260e      	movs	r6, #14
 801b36c:	4295      	cmp	r5, r2
 801b36e:	dc1e      	bgt.n	801b3ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b370:	fb06 4003 	mla	r0, r6, r3, r4
 801b374:	8887      	ldrh	r7, [r0, #4]
 801b376:	42b9      	cmp	r1, r7
 801b378:	d01a      	beq.n	801b3b0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b37a:	d20d      	bcs.n	801b398 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b37c:	1e5a      	subs	r2, r3, #1
 801b37e:	4295      	cmp	r5, r2
 801b380:	dc15      	bgt.n	801b3ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b382:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b386:	1a5b      	subs	r3, r3, r1
 801b388:	1ad3      	subs	r3, r2, r3
 801b38a:	429a      	cmp	r2, r3
 801b38c:	db0f      	blt.n	801b3ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b38e:	429d      	cmp	r5, r3
 801b390:	ddec      	ble.n	801b36c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b392:	1953      	adds	r3, r2, r5
 801b394:	105b      	asrs	r3, r3, #1
 801b396:	e7e9      	b.n	801b36c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b398:	1c5d      	adds	r5, r3, #1
 801b39a:	42aa      	cmp	r2, r5
 801b39c:	db07      	blt.n	801b3ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b39e:	8a43      	ldrh	r3, [r0, #18]
 801b3a0:	1acb      	subs	r3, r1, r3
 801b3a2:	442b      	add	r3, r5
 801b3a4:	429d      	cmp	r5, r3
 801b3a6:	dc02      	bgt.n	801b3ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b3a8:	429a      	cmp	r2, r3
 801b3aa:	dadf      	bge.n	801b36c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b3ac:	e7f1      	b.n	801b392 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b3ae:	2000      	movs	r0, #0
 801b3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b3b2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3b4:	4604      	mov	r4, r0
 801b3b6:	4617      	mov	r7, r2
 801b3b8:	461e      	mov	r6, r3
 801b3ba:	b911      	cbnz	r1, 801b3c2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b3bc:	2500      	movs	r5, #0
 801b3be:	4628      	mov	r0, r5
 801b3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3c2:	290a      	cmp	r1, #10
 801b3c4:	d0fa      	beq.n	801b3bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b3c6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801b3ca:	4291      	cmp	r1, r2
 801b3cc:	d0f6      	beq.n	801b3bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b3ce:	f242 020b 	movw	r2, #8203	@ 0x200b
 801b3d2:	4291      	cmp	r1, r2
 801b3d4:	d0f2      	beq.n	801b3bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b3d6:	f7ff ffaf 	bl	801b338 <_ZNK8touchgfx9ConstFont4findEt>
 801b3da:	4605      	mov	r5, r0
 801b3dc:	b950      	cbnz	r0, 801b3f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b3de:	6823      	ldr	r3, [r4, #0]
 801b3e0:	4620      	mov	r0, r4
 801b3e2:	691b      	ldr	r3, [r3, #16]
 801b3e4:	4798      	blx	r3
 801b3e6:	4601      	mov	r1, r0
 801b3e8:	4620      	mov	r0, r4
 801b3ea:	f7ff ffa5 	bl	801b338 <_ZNK8touchgfx9ConstFont4findEt>
 801b3ee:	4605      	mov	r5, r0
 801b3f0:	2800      	cmp	r0, #0
 801b3f2:	d0e3      	beq.n	801b3bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b3f4:	6823      	ldr	r3, [r4, #0]
 801b3f6:	4629      	mov	r1, r5
 801b3f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b3fa:	4620      	mov	r0, r4
 801b3fc:	4798      	blx	r3
 801b3fe:	6038      	str	r0, [r7, #0]
 801b400:	6823      	ldr	r3, [r4, #0]
 801b402:	4620      	mov	r0, r4
 801b404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b406:	4798      	blx	r3
 801b408:	7030      	strb	r0, [r6, #0]
 801b40a:	e7d8      	b.n	801b3be <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b40c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801b40c:	2000      	movs	r0, #0
 801b40e:	4770      	bx	lr

0801b410 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801b410:	2001      	movs	r0, #1
 801b412:	4770      	bx	lr

0801b414 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801b414:	2002      	movs	r0, #2
 801b416:	4770      	bx	lr

0801b418 <_ZN8touchgfx12GestureEventD1Ev>:
 801b418:	4770      	bx	lr

0801b41a <_ZN8touchgfx9DragEventD1Ev>:
 801b41a:	4770      	bx	lr

0801b41c <_ZN8touchgfx10ClickEventD1Ev>:
 801b41c:	4770      	bx	lr

0801b41e <_ZN8touchgfx10ClickEventD0Ev>:
 801b41e:	b510      	push	{r4, lr}
 801b420:	4604      	mov	r4, r0
 801b422:	210c      	movs	r1, #12
 801b424:	f010 fb9d 	bl	802bb62 <_ZdlPvj>
 801b428:	4620      	mov	r0, r4
 801b42a:	bd10      	pop	{r4, pc}

0801b42c <_ZN8touchgfx9DragEventD0Ev>:
 801b42c:	b510      	push	{r4, lr}
 801b42e:	4604      	mov	r4, r0
 801b430:	2110      	movs	r1, #16
 801b432:	f010 fb96 	bl	802bb62 <_ZdlPvj>
 801b436:	4620      	mov	r0, r4
 801b438:	bd10      	pop	{r4, pc}

0801b43a <_ZN8touchgfx12GestureEventD0Ev>:
 801b43a:	b510      	push	{r4, lr}
 801b43c:	4604      	mov	r4, r0
 801b43e:	210c      	movs	r1, #12
 801b440:	f010 fb8f 	bl	802bb62 <_ZdlPvj>
 801b444:	4620      	mov	r0, r4
 801b446:	bd10      	pop	{r4, pc}

0801b448 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b448:	b530      	push	{r4, r5, lr}
 801b44a:	460d      	mov	r5, r1
 801b44c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b44e:	b087      	sub	sp, #28
 801b450:	4604      	mov	r4, r0
 801b452:	b301      	cbz	r1, 801b496 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b454:	a801      	add	r0, sp, #4
 801b456:	f7ff fb93 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b45a:	892a      	ldrh	r2, [r5, #8]
 801b45c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b460:	7928      	ldrb	r0, [r5, #4]
 801b462:	1ad2      	subs	r2, r2, r3
 801b464:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801b466:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b46a:	441a      	add	r2, r3
 801b46c:	896b      	ldrh	r3, [r5, #10]
 801b46e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b472:	f88d 0010 	strb.w	r0, [sp, #16]
 801b476:	1b5b      	subs	r3, r3, r5
 801b478:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801b47a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b47c:	442b      	add	r3, r5
 801b47e:	4d07      	ldr	r5, [pc, #28]	@ (801b49c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b480:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b484:	9503      	str	r5, [sp, #12]
 801b486:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b48a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b48e:	6803      	ldr	r3, [r0, #0]
 801b490:	a903      	add	r1, sp, #12
 801b492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b494:	4798      	blx	r3
 801b496:	b007      	add	sp, #28
 801b498:	bd30      	pop	{r4, r5, pc}
 801b49a:	bf00      	nop
 801b49c:	0802f9cc 	.word	0x0802f9cc

0801b4a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b4a6:	b08a      	sub	sp, #40	@ 0x28
 801b4a8:	4604      	mov	r4, r0
 801b4aa:	460d      	mov	r5, r1
 801b4ac:	b113      	cbz	r3, 801b4b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801b4ae:	790b      	ldrb	r3, [r1, #4]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d044      	beq.n	801b53e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b4b4:	f104 0804 	add.w	r8, r4, #4
 801b4b8:	4641      	mov	r1, r8
 801b4ba:	a803      	add	r0, sp, #12
 801b4bc:	f7ff fb60 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4c0:	792b      	ldrb	r3, [r5, #4]
 801b4c2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b4c6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b4ca:	b983      	cbnz	r3, 801b4ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801b4cc:	892a      	ldrh	r2, [r5, #8]
 801b4ce:	88e9      	ldrh	r1, [r5, #6]
 801b4d0:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801b4d4:	1b92      	subs	r2, r2, r6
 801b4d6:	1bc9      	subs	r1, r1, r7
 801b4d8:	9301      	str	r3, [sp, #4]
 801b4da:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801b4de:	9300      	str	r3, [sp, #0]
 801b4e0:	b212      	sxth	r2, r2
 801b4e2:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801b4e6:	b209      	sxth	r1, r1
 801b4e8:	4640      	mov	r0, r8
 801b4ea:	f7f8 fcab 	bl	8013e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801b4ee:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b4f0:	b329      	cbz	r1, 801b53e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b4f2:	a805      	add	r0, sp, #20
 801b4f4:	f7ff fb44 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4f8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b4fc:	792b      	ldrb	r3, [r5, #4]
 801b4fe:	1abf      	subs	r7, r7, r2
 801b500:	88ea      	ldrh	r2, [r5, #6]
 801b502:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b504:	4417      	add	r7, r2
 801b506:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801b508:	f88d 3020 	strb.w	r3, [sp, #32]
 801b50c:	4417      	add	r7, r2
 801b50e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b512:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801b516:	1ab6      	subs	r6, r6, r2
 801b518:	892a      	ldrh	r2, [r5, #8]
 801b51a:	a907      	add	r1, sp, #28
 801b51c:	4416      	add	r6, r2
 801b51e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b520:	4416      	add	r6, r2
 801b522:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801b526:	2600      	movs	r6, #0
 801b528:	4a06      	ldr	r2, [pc, #24]	@ (801b544 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801b52a:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801b52e:	9207      	str	r2, [sp, #28]
 801b530:	6803      	ldr	r3, [r0, #0]
 801b532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b534:	4798      	blx	r3
 801b536:	792b      	ldrb	r3, [r5, #4]
 801b538:	b10b      	cbz	r3, 801b53e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b53a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801b53e:	b00a      	add	sp, #40	@ 0x28
 801b540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b544:	0802f9a4 	.word	0x0802f9a4

0801b548 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b54c:	460c      	mov	r4, r1
 801b54e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b550:	b088      	sub	sp, #32
 801b552:	4605      	mov	r5, r0
 801b554:	2900      	cmp	r1, #0
 801b556:	d06d      	beq.n	801b634 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801b558:	4668      	mov	r0, sp
 801b55a:	f7ff fb11 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b55e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801b560:	88e3      	ldrh	r3, [r4, #6]
 801b562:	f9bd 8000 	ldrsh.w	r8, [sp]
 801b566:	440b      	add	r3, r1
 801b568:	b21b      	sxth	r3, r3
 801b56a:	4543      	cmp	r3, r8
 801b56c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801b570:	db31      	blt.n	801b5d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b572:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801b576:	44c4      	add	ip, r8
 801b578:	fa0f fc8c 	sxth.w	ip, ip
 801b57c:	4563      	cmp	r3, ip
 801b57e:	da2a      	bge.n	801b5d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b580:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801b582:	8926      	ldrh	r6, [r4, #8]
 801b584:	4416      	add	r6, r2
 801b586:	b236      	sxth	r6, r6
 801b588:	42be      	cmp	r6, r7
 801b58a:	db24      	blt.n	801b5d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b58c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b590:	4438      	add	r0, r7
 801b592:	b200      	sxth	r0, r0
 801b594:	4286      	cmp	r6, r0
 801b596:	da1e      	bge.n	801b5d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b598:	8963      	ldrh	r3, [r4, #10]
 801b59a:	4419      	add	r1, r3
 801b59c:	b209      	sxth	r1, r1
 801b59e:	4541      	cmp	r1, r8
 801b5a0:	db08      	blt.n	801b5b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b5a2:	4561      	cmp	r1, ip
 801b5a4:	da06      	bge.n	801b5b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b5a6:	89a3      	ldrh	r3, [r4, #12]
 801b5a8:	441a      	add	r2, r3
 801b5aa:	b212      	sxth	r2, r2
 801b5ac:	42ba      	cmp	r2, r7
 801b5ae:	db01      	blt.n	801b5b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b5b0:	4282      	cmp	r2, r0
 801b5b2:	db10      	blt.n	801b5d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b5b4:	4b21      	ldr	r3, [pc, #132]	@ (801b63c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801b5b6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b5b8:	9304      	str	r3, [sp, #16]
 801b5ba:	2302      	movs	r3, #2
 801b5bc:	f88d 3014 	strb.w	r3, [sp, #20]
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b5c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b5ca:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b5ce:	6803      	ldr	r3, [r0, #0]
 801b5d0:	a904      	add	r1, sp, #16
 801b5d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b5d4:	4798      	blx	r3
 801b5d6:	1d29      	adds	r1, r5, #4
 801b5d8:	a802      	add	r0, sp, #8
 801b5da:	f7ff fad1 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b5de:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b5e2:	88e0      	ldrh	r0, [r4, #6]
 801b5e4:	eba3 0808 	sub.w	r8, r3, r8
 801b5e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b5ec:	7921      	ldrb	r1, [r4, #4]
 801b5ee:	1bdf      	subs	r7, r3, r7
 801b5f0:	b2bb      	uxth	r3, r7
 801b5f2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801b5f6:	fa1f f888 	uxth.w	r8, r8
 801b5fa:	8922      	ldrh	r2, [r4, #8]
 801b5fc:	8967      	ldrh	r7, [r4, #10]
 801b5fe:	89a4      	ldrh	r4, [r4, #12]
 801b600:	4440      	add	r0, r8
 801b602:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801b604:	4460      	add	r0, ip
 801b606:	441a      	add	r2, r3
 801b608:	44b8      	add	r8, r7
 801b60a:	4423      	add	r3, r4
 801b60c:	4c0c      	ldr	r4, [pc, #48]	@ (801b640 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801b60e:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b612:	4433      	add	r3, r6
 801b614:	4432      	add	r2, r6
 801b616:	44e0      	add	r8, ip
 801b618:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b61a:	f88d 1014 	strb.w	r1, [sp, #20]
 801b61e:	9404      	str	r4, [sp, #16]
 801b620:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b624:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b628:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b62c:	6803      	ldr	r3, [r0, #0]
 801b62e:	a904      	add	r1, sp, #16
 801b630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b632:	4798      	blx	r3
 801b634:	b008      	add	sp, #32
 801b636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b63a:	bf00      	nop
 801b63c:	0802f9a4 	.word	0x0802f9a4
 801b640:	0802f9b8 	.word	0x0802f9b8

0801b644 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b646:	4604      	mov	r4, r0
 801b648:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b64c:	3201      	adds	r2, #1
 801b64e:	d112      	bne.n	801b676 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b650:	2500      	movs	r5, #0
 801b652:	9500      	str	r5, [sp, #0]
 801b654:	466d      	mov	r5, sp
 801b656:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b65a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b65e:	6803      	ldr	r3, [r0, #0]
 801b660:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b664:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b668:	4629      	mov	r1, r5
 801b66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b66c:	4798      	blx	r3
 801b66e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b672:	e884 0003 	stmia.w	r4, {r0, r1}
 801b676:	4620      	mov	r0, r4
 801b678:	b003      	add	sp, #12
 801b67a:	bd30      	pop	{r4, r5, pc}

0801b67c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b67c:	b513      	push	{r0, r1, r4, lr}
 801b67e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b682:	4604      	mov	r4, r0
 801b684:	3301      	adds	r3, #1
 801b686:	d109      	bne.n	801b69c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b688:	4601      	mov	r1, r0
 801b68a:	4668      	mov	r0, sp
 801b68c:	f7ff fa78 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b690:	f8bd 3000 	ldrh.w	r3, [sp]
 801b694:	8423      	strh	r3, [r4, #32]
 801b696:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b69a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b69c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b6a0:	b002      	add	sp, #8
 801b6a2:	bd10      	pop	{r4, pc}

0801b6a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b6a4:	b513      	push	{r0, r1, r4, lr}
 801b6a6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801b6aa:	4604      	mov	r4, r0
 801b6ac:	3301      	adds	r3, #1
 801b6ae:	d109      	bne.n	801b6c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b6b0:	4601      	mov	r1, r0
 801b6b2:	4668      	mov	r0, sp
 801b6b4:	f7ff fa64 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b6b8:	f8bd 3000 	ldrh.w	r3, [sp]
 801b6bc:	8423      	strh	r3, [r4, #32]
 801b6be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b6c2:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b6c4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801b6c8:	b002      	add	sp, #8
 801b6ca:	bd10      	pop	{r4, pc}

0801b6cc <_ZN8touchgfx6ScreenC1Ev>:
 801b6cc:	b570      	push	{r4, r5, r6, lr}
 801b6ce:	4605      	mov	r5, r0
 801b6d0:	4b16      	ldr	r3, [pc, #88]	@ (801b72c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b6d2:	2101      	movs	r1, #1
 801b6d4:	f845 3b04 	str.w	r3, [r5], #4
 801b6d8:	2300      	movs	r3, #0
 801b6da:	4604      	mov	r4, r0
 801b6dc:	8103      	strh	r3, [r0, #8]
 801b6de:	8143      	strh	r3, [r0, #10]
 801b6e0:	8183      	strh	r3, [r0, #12]
 801b6e2:	81c3      	strh	r3, [r0, #14]
 801b6e4:	8203      	strh	r3, [r0, #16]
 801b6e6:	8243      	strh	r3, [r0, #18]
 801b6e8:	8283      	strh	r3, [r0, #20]
 801b6ea:	82c3      	strh	r3, [r0, #22]
 801b6ec:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b6f0:	6203      	str	r3, [r0, #32]
 801b6f2:	8483      	strh	r3, [r0, #36]	@ 0x24
 801b6f4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801b6f6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801b6fa:	4a0d      	ldr	r2, [pc, #52]	@ (801b730 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b6fc:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801b700:	6343      	str	r3, [r0, #52]	@ 0x34
 801b702:	4b0c      	ldr	r3, [pc, #48]	@ (801b734 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b704:	6042      	str	r2, [r0, #4]
 801b706:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b70a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801b70c:	4a0a      	ldr	r2, [pc, #40]	@ (801b738 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b70e:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801b712:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801b716:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b71a:	4628      	mov	r0, r5
 801b71c:	4798      	blx	r3
 801b71e:	6863      	ldr	r3, [r4, #4]
 801b720:	4628      	mov	r0, r5
 801b722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b724:	4631      	mov	r1, r6
 801b726:	4798      	blx	r3
 801b728:	4620      	mov	r0, r4
 801b72a:	bd70      	pop	{r4, r5, r6, pc}
 801b72c:	0802f9e0 	.word	0x0802f9e0
 801b730:	0802f194 	.word	0x0802f194
 801b734:	2005ba76 	.word	0x2005ba76
 801b738:	2005ba74 	.word	0x2005ba74

0801b73c <_ZN8touchgfx6Screen4drawEv>:
 801b73c:	b507      	push	{r0, r1, r2, lr}
 801b73e:	2100      	movs	r1, #0
 801b740:	4b08      	ldr	r3, [pc, #32]	@ (801b764 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b742:	9100      	str	r1, [sp, #0]
 801b744:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b748:	4b07      	ldr	r3, [pc, #28]	@ (801b768 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b74a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b74e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b752:	4669      	mov	r1, sp
 801b754:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b758:	6803      	ldr	r3, [r0, #0]
 801b75a:	689b      	ldr	r3, [r3, #8]
 801b75c:	4798      	blx	r3
 801b75e:	b003      	add	sp, #12
 801b760:	f85d fb04 	ldr.w	pc, [sp], #4
 801b764:	2005ba74 	.word	0x2005ba74
 801b768:	2005ba76 	.word	0x2005ba76

0801b76c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b770:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b774:	b089      	sub	sp, #36	@ 0x24
 801b776:	2b00      	cmp	r3, #0
 801b778:	4680      	mov	r8, r0
 801b77a:	460c      	mov	r4, r1
 801b77c:	4615      	mov	r5, r2
 801b77e:	dd0e      	ble.n	801b79e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b780:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b784:	2b00      	cmp	r3, #0
 801b786:	dd0a      	ble.n	801b79e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b788:	4628      	mov	r0, r5
 801b78a:	f7ff ff5b 	bl	801b644 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b78e:	4621      	mov	r1, r4
 801b790:	f7fd fe80 	bl	8019494 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b794:	69eb      	ldr	r3, [r5, #28]
 801b796:	b928      	cbnz	r0, 801b7a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b798:	461d      	mov	r5, r3
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d1f4      	bne.n	801b788 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b79e:	b009      	add	sp, #36	@ 0x24
 801b7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7a4:	ae04      	add	r6, sp, #16
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	f000 80b5 	beq.w	801b916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b7ac:	682b      	ldr	r3, [r5, #0]
 801b7ae:	4629      	mov	r1, r5
 801b7b0:	68db      	ldr	r3, [r3, #12]
 801b7b2:	a802      	add	r0, sp, #8
 801b7b4:	4798      	blx	r3
 801b7b6:	4628      	mov	r0, r5
 801b7b8:	f7ff ff60 	bl	801b67c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b7bc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b7c0:	4407      	add	r7, r0
 801b7c2:	4628      	mov	r0, r5
 801b7c4:	f7ff ff6e 	bl	801b6a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b7c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b7cc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b7d0:	4418      	add	r0, r3
 801b7d2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b7d6:	4621      	mov	r1, r4
 801b7d8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b7dc:	b23f      	sxth	r7, r7
 801b7de:	4630      	mov	r0, r6
 801b7e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b7e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b7e8:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b7ec:	f7f8 fc0a 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801b7f0:	4628      	mov	r0, r5
 801b7f2:	f7ff ff27 	bl	801b644 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b7f6:	4602      	mov	r2, r0
 801b7f8:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b7fc:	ab06      	add	r3, sp, #24
 801b7fe:	e883 0003 	stmia.w	r3, {r0, r1}
 801b802:	4611      	mov	r1, r2
 801b804:	4618      	mov	r0, r3
 801b806:	f7f8 fbfd 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801b80a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b80e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b812:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b816:	4299      	cmp	r1, r3
 801b818:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b81c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b820:	d10b      	bne.n	801b83a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b822:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b826:	4552      	cmp	r2, sl
 801b828:	d107      	bne.n	801b83a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b82a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b82e:	455a      	cmp	r2, fp
 801b830:	d103      	bne.n	801b83a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b832:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b836:	454a      	cmp	r2, r9
 801b838:	d06d      	beq.n	801b916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b83a:	f1bb 0f00 	cmp.w	fp, #0
 801b83e:	dd65      	ble.n	801b90c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b840:	f1b9 0f00 	cmp.w	r9, #0
 801b844:	dd62      	ble.n	801b90c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b846:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b84a:	fa1f f08a 	uxth.w	r0, sl
 801b84e:	4552      	cmp	r2, sl
 801b850:	9000      	str	r0, [sp, #0]
 801b852:	da12      	bge.n	801b87a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b854:	9301      	str	r3, [sp, #4]
 801b856:	9b00      	ldr	r3, [sp, #0]
 801b858:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b85c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b860:	1a9a      	subs	r2, r3, r2
 801b862:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b866:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b86a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b86e:	69ea      	ldr	r2, [r5, #28]
 801b870:	4631      	mov	r1, r6
 801b872:	4640      	mov	r0, r8
 801b874:	f7ff ff7a 	bl	801b76c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b878:	9b01      	ldr	r3, [sp, #4]
 801b87a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b87e:	b29f      	uxth	r7, r3
 801b880:	429a      	cmp	r2, r3
 801b882:	da0d      	bge.n	801b8a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b884:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b888:	1aba      	subs	r2, r7, r2
 801b88a:	f8ad a012 	strh.w	sl, [sp, #18]
 801b88e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b892:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b896:	69ea      	ldr	r2, [r5, #28]
 801b898:	4631      	mov	r1, r6
 801b89a:	4640      	mov	r0, r8
 801b89c:	f7ff ff66 	bl	801b76c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b8a0:	8822      	ldrh	r2, [r4, #0]
 801b8a2:	88a3      	ldrh	r3, [r4, #4]
 801b8a4:	445f      	add	r7, fp
 801b8a6:	4413      	add	r3, r2
 801b8a8:	b29b      	uxth	r3, r3
 801b8aa:	b2bf      	uxth	r7, r7
 801b8ac:	b23a      	sxth	r2, r7
 801b8ae:	b219      	sxth	r1, r3
 801b8b0:	4291      	cmp	r1, r2
 801b8b2:	dd0d      	ble.n	801b8d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b8b4:	1bdb      	subs	r3, r3, r7
 801b8b6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b8ba:	f8ad a012 	strh.w	sl, [sp, #18]
 801b8be:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b8c2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b8c6:	69ea      	ldr	r2, [r5, #28]
 801b8c8:	4631      	mov	r1, r6
 801b8ca:	4640      	mov	r0, r8
 801b8cc:	f7ff ff4e 	bl	801b76c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b8d0:	88e2      	ldrh	r2, [r4, #6]
 801b8d2:	8863      	ldrh	r3, [r4, #2]
 801b8d4:	4413      	add	r3, r2
 801b8d6:	9a00      	ldr	r2, [sp, #0]
 801b8d8:	b29b      	uxth	r3, r3
 801b8da:	444a      	add	r2, r9
 801b8dc:	fa1f f982 	uxth.w	r9, r2
 801b8e0:	fa0f f289 	sxth.w	r2, r9
 801b8e4:	b219      	sxth	r1, r3
 801b8e6:	428a      	cmp	r2, r1
 801b8e8:	da15      	bge.n	801b916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b8ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b8ee:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b8f2:	eba3 0309 	sub.w	r3, r3, r9
 801b8f6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b8fa:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b8fe:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b902:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b906:	69ea      	ldr	r2, [r5, #28]
 801b908:	4631      	mov	r1, r6
 801b90a:	e001      	b.n	801b910 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b90c:	4621      	mov	r1, r4
 801b90e:	69ea      	ldr	r2, [r5, #28]
 801b910:	4640      	mov	r0, r8
 801b912:	f7ff ff2b 	bl	801b76c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b916:	4628      	mov	r0, r5
 801b918:	f7ff fe94 	bl	801b644 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b91c:	4633      	mov	r3, r6
 801b91e:	4602      	mov	r2, r0
 801b920:	6861      	ldr	r1, [r4, #4]
 801b922:	6820      	ldr	r0, [r4, #0]
 801b924:	c303      	stmia	r3!, {r0, r1}
 801b926:	4611      	mov	r1, r2
 801b928:	4630      	mov	r0, r6
 801b92a:	f7f8 fb6b 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801b92e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b932:	2b00      	cmp	r3, #0
 801b934:	f77f af33 	ble.w	801b79e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b938:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	f77f af2e 	ble.w	801b79e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b942:	4628      	mov	r0, r5
 801b944:	f7ff fe9a 	bl	801b67c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b948:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b94c:	1a18      	subs	r0, r3, r0
 801b94e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b952:	4628      	mov	r0, r5
 801b954:	f7ff fea6 	bl	801b6a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b958:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b95c:	4631      	mov	r1, r6
 801b95e:	1a18      	subs	r0, r3, r0
 801b960:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b964:	682b      	ldr	r3, [r5, #0]
 801b966:	4628      	mov	r0, r5
 801b968:	689b      	ldr	r3, [r3, #8]
 801b96a:	4798      	blx	r3
 801b96c:	e717      	b.n	801b79e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b96e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b96e:	b570      	push	{r4, r5, r6, lr}
 801b970:	2300      	movs	r3, #0
 801b972:	460c      	mov	r4, r1
 801b974:	b086      	sub	sp, #24
 801b976:	1d06      	adds	r6, r0, #4
 801b978:	4631      	mov	r1, r6
 801b97a:	4605      	mov	r5, r0
 801b97c:	a802      	add	r0, sp, #8
 801b97e:	9301      	str	r3, [sp, #4]
 801b980:	f7ff f8fe 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b984:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b988:	8822      	ldrh	r2, [r4, #0]
 801b98a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801b98e:	1ad2      	subs	r2, r2, r3
 801b990:	8863      	ldrh	r3, [r4, #2]
 801b992:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b996:	1a5b      	subs	r3, r3, r1
 801b998:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b99c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b9a0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b9a4:	f8ad 1016 	strh.w	r1, [sp, #22]
 801b9a8:	aa01      	add	r2, sp, #4
 801b9aa:	a904      	add	r1, sp, #16
 801b9ac:	4630      	mov	r0, r6
 801b9ae:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b9b2:	f7f8 fbff 	bl	80141b4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b9b6:	9a01      	ldr	r2, [sp, #4]
 801b9b8:	b11a      	cbz	r2, 801b9c2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801b9ba:	4621      	mov	r1, r4
 801b9bc:	4628      	mov	r0, r5
 801b9be:	f7ff fed5 	bl	801b76c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b9c2:	b006      	add	sp, #24
 801b9c4:	bd70      	pop	{r4, r5, r6, pc}

0801b9c6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b9c6:	b530      	push	{r4, r5, lr}
 801b9c8:	4602      	mov	r2, r0
 801b9ca:	b085      	sub	sp, #20
 801b9cc:	460d      	mov	r5, r1
 801b9ce:	466b      	mov	r3, sp
 801b9d0:	4604      	mov	r4, r0
 801b9d2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b9d6:	6851      	ldr	r1, [r2, #4]
 801b9d8:	c303      	stmia	r3!, {r0, r1}
 801b9da:	4629      	mov	r1, r5
 801b9dc:	4668      	mov	r0, sp
 801b9de:	f7f8 fb11 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 801b9e2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801b9e6:	b12b      	cbz	r3, 801b9f4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801b9e8:	4669      	mov	r1, sp
 801b9ea:	4620      	mov	r0, r4
 801b9ec:	f7ff ffbf 	bl	801b96e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b9f0:	b005      	add	sp, #20
 801b9f2:	bd30      	pop	{r4, r5, pc}
 801b9f4:	3404      	adds	r4, #4
 801b9f6:	4621      	mov	r1, r4
 801b9f8:	a802      	add	r0, sp, #8
 801b9fa:	f7ff f8c1 	bl	801ab80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b9fe:	f8bd 3000 	ldrh.w	r3, [sp]
 801ba02:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ba06:	4669      	mov	r1, sp
 801ba08:	1a9b      	subs	r3, r3, r2
 801ba0a:	f8ad 3000 	strh.w	r3, [sp]
 801ba0e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ba12:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ba16:	4620      	mov	r0, r4
 801ba18:	1a9b      	subs	r3, r3, r2
 801ba1a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ba1e:	f7f8 fb90 	bl	8014142 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801ba22:	e7e5      	b.n	801b9f0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801ba24 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ba24:	460b      	mov	r3, r1
 801ba26:	680a      	ldr	r2, [r1, #0]
 801ba28:	1d01      	adds	r1, r0, #4
 801ba2a:	6992      	ldr	r2, [r2, #24]
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	4710      	bx	r2

0801ba30 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 801ba30:	4298      	cmp	r0, r3
 801ba32:	d200      	bcs.n	801ba36 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x6>
 801ba34:	b913      	cbnz	r3, 801ba3c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0xc>
 801ba36:	440a      	add	r2, r1
 801ba38:	b210      	sxth	r0, r2
 801ba3a:	4770      	bx	lr
 801ba3c:	ee07 0a90 	vmov	s15, r0
 801ba40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ba44:	ee07 3a90 	vmov	s15, r3
 801ba48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ba50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ba54:	ee07 2a90 	vmov	s15, r2
 801ba58:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ba5c:	eddf 4a11 	vldr	s9, [pc, #68]	@ 801baa4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x74>
 801ba60:	eddf 5a11 	vldr	s11, [pc, #68]	@ 801baa8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x78>
 801ba64:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801ba68:	ee27 5a07 	vmul.f32	s10, s14, s14
 801ba6c:	eee7 5a24 	vfma.f32	s11, s14, s9
 801ba70:	ee07 1a90 	vmov	s15, r1
 801ba74:	eee5 6a25 	vfma.f32	s13, s10, s11
 801ba78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba7c:	eee6 7a26 	vfma.f32	s15, s12, s13
 801ba80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ba84:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ba88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba8c:	bfcc      	ite	gt
 801ba8e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801ba92:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801ba96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ba9a:	ee17 3a90 	vmov	r3, s15
 801ba9e:	b218      	sxth	r0, r3
 801baa0:	4770      	bx	lr
 801baa2:	bf00      	nop
 801baa4:	402ce6b0 	.word	0x402ce6b0
 801baa8:	3fd9cd60 	.word	0x3fd9cd60

0801baac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801baac:	4298      	cmp	r0, r3
 801baae:	d200      	bcs.n	801bab2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801bab0:	b913      	cbnz	r3, 801bab8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801bab2:	440a      	add	r2, r1
 801bab4:	b210      	sxth	r0, r2
 801bab6:	4770      	bx	lr
 801bab8:	ee07 0a90 	vmov	s15, r0
 801babc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bac0:	ee07 3a90 	vmov	s15, r3
 801bac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bacc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bad0:	ee07 2a90 	vmov	s15, r2
 801bad4:	ee37 7a66 	vsub.f32	s14, s14, s13
 801bad8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801badc:	ee67 5a07 	vmul.f32	s11, s14, s14
 801bae0:	ee07 1a90 	vmov	s15, r1
 801bae4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801bae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801baec:	eee6 7a26 	vfma.f32	s15, s12, s13
 801baf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801baf4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801baf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bafc:	bfcc      	ite	gt
 801bafe:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801bb02:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801bb06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bb0a:	ee17 3a90 	vmov	r3, s15
 801bb0e:	b218      	sxth	r0, r3
 801bb10:	4770      	bx	lr

0801bb12 <_ZN8touchgfx12TextProviderC1Ev>:
 801bb12:	b538      	push	{r3, r4, r5, lr}
 801bb14:	2500      	movs	r5, #0
 801bb16:	2302      	movs	r3, #2
 801bb18:	4604      	mov	r4, r0
 801bb1a:	e9c0 5500 	strd	r5, r5, [r0]
 801bb1e:	7403      	strb	r3, [r0, #16]
 801bb20:	6145      	str	r5, [r0, #20]
 801bb22:	7605      	strb	r5, [r0, #24]
 801bb24:	83c5      	strh	r5, [r0, #30]
 801bb26:	8405      	strh	r5, [r0, #32]
 801bb28:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801bb2a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801bb2c:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801bb2e:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801bb32:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801bb36:	220e      	movs	r2, #14
 801bb38:	4629      	mov	r1, r5
 801bb3a:	304c      	adds	r0, #76	@ 0x4c
 801bb3c:	f011 fa12 	bl	802cf64 <memset>
 801bb40:	2301      	movs	r3, #1
 801bb42:	4620      	mov	r0, r4
 801bb44:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801bb48:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801bb4c:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801bb50:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801bb54:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801bb58:	f7f5 f978 	bl	8010e4c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801bb5c:	4620      	mov	r0, r4
 801bb5e:	bd38      	pop	{r3, r4, r5, pc}

0801bb60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801bb60:	b530      	push	{r4, r5, lr}
 801bb62:	2500      	movs	r5, #0
 801bb64:	2401      	movs	r4, #1
 801bb66:	6843      	ldr	r3, [r0, #4]
 801bb68:	b913      	cbnz	r3, 801bb70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801bb6a:	6803      	ldr	r3, [r0, #0]
 801bb6c:	b313      	cbz	r3, 801bbb4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801bb6e:	6043      	str	r3, [r0, #4]
 801bb70:	7e03      	ldrb	r3, [r0, #24]
 801bb72:	b143      	cbz	r3, 801bb86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801bb74:	6943      	ldr	r3, [r0, #20]
 801bb76:	b12b      	cbz	r3, 801bb84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bb78:	881a      	ldrh	r2, [r3, #0]
 801bb7a:	b11a      	cbz	r2, 801bb84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bb7c:	1c9a      	adds	r2, r3, #2
 801bb7e:	6142      	str	r2, [r0, #20]
 801bb80:	8818      	ldrh	r0, [r3, #0]
 801bb82:	bd30      	pop	{r4, r5, pc}
 801bb84:	7605      	strb	r5, [r0, #24]
 801bb86:	6843      	ldr	r3, [r0, #4]
 801bb88:	8819      	ldrh	r1, [r3, #0]
 801bb8a:	b199      	cbz	r1, 801bbb4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801bb8c:	1c9a      	adds	r2, r3, #2
 801bb8e:	2902      	cmp	r1, #2
 801bb90:	6042      	str	r2, [r0, #4]
 801bb92:	d1f5      	bne.n	801bb80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801bb94:	7c03      	ldrb	r3, [r0, #16]
 801bb96:	2b01      	cmp	r3, #1
 801bb98:	d8e5      	bhi.n	801bb66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bb9a:	1c5a      	adds	r2, r3, #1
 801bb9c:	7402      	strb	r2, [r0, #16]
 801bb9e:	3302      	adds	r3, #2
 801bba0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801bba4:	6143      	str	r3, [r0, #20]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d0dd      	beq.n	801bb66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bbaa:	881b      	ldrh	r3, [r3, #0]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d0da      	beq.n	801bb66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bbb0:	7604      	strb	r4, [r0, #24]
 801bbb2:	e7d8      	b.n	801bb66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bbb4:	2000      	movs	r0, #0
 801bbb6:	e7e4      	b.n	801bb82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801bbb8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801bbb8:	6001      	str	r1, [r0, #0]
 801bbba:	2100      	movs	r1, #0
 801bbbc:	b430      	push	{r4, r5}
 801bbbe:	6041      	str	r1, [r0, #4]
 801bbc0:	6815      	ldr	r5, [r2, #0]
 801bbc2:	6085      	str	r5, [r0, #8]
 801bbc4:	6852      	ldr	r2, [r2, #4]
 801bbc6:	6443      	str	r3, [r0, #68]	@ 0x44
 801bbc8:	9b02      	ldr	r3, [sp, #8]
 801bbca:	60c2      	str	r2, [r0, #12]
 801bbcc:	7401      	strb	r1, [r0, #16]
 801bbce:	6141      	str	r1, [r0, #20]
 801bbd0:	7601      	strb	r1, [r0, #24]
 801bbd2:	8701      	strh	r1, [r0, #56]	@ 0x38
 801bbd4:	8401      	strh	r1, [r0, #32]
 801bbd6:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801bbda:	6483      	str	r3, [r0, #72]	@ 0x48
 801bbdc:	bc30      	pop	{r4, r5}
 801bbde:	f7f5 b935 	b.w	8010e4c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801bbe2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801bbe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbe4:	4605      	mov	r5, r0
 801bbe6:	4608      	mov	r0, r1
 801bbe8:	b1e9      	cbz	r1, 801bc26 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801bbea:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801bbee:	460b      	mov	r3, r1
 801bbf0:	4622      	mov	r2, r4
 801bbf2:	f101 0708 	add.w	r7, r1, #8
 801bbf6:	4626      	mov	r6, r4
 801bbf8:	6818      	ldr	r0, [r3, #0]
 801bbfa:	6859      	ldr	r1, [r3, #4]
 801bbfc:	3308      	adds	r3, #8
 801bbfe:	c603      	stmia	r6!, {r0, r1}
 801bc00:	42bb      	cmp	r3, r7
 801bc02:	4634      	mov	r4, r6
 801bc04:	d1f7      	bne.n	801bbf6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801bc06:	6818      	ldr	r0, [r3, #0]
 801bc08:	6030      	str	r0, [r6, #0]
 801bc0a:	4610      	mov	r0, r2
 801bc0c:	889b      	ldrh	r3, [r3, #4]
 801bc0e:	80b3      	strh	r3, [r6, #4]
 801bc10:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801bc14:	015b      	lsls	r3, r3, #5
 801bc16:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801bc1a:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801bc1e:	430b      	orrs	r3, r1
 801bc20:	425b      	negs	r3, r3
 801bc22:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801bc26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bc28 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bc28:	b538      	push	{r3, r4, r5, lr}
 801bc2a:	460c      	mov	r4, r1
 801bc2c:	6811      	ldr	r1, [r2, #0]
 801bc2e:	4610      	mov	r0, r2
 801bc30:	68cd      	ldr	r5, [r1, #12]
 801bc32:	4619      	mov	r1, r3
 801bc34:	47a8      	blx	r5
 801bc36:	2800      	cmp	r0, #0
 801bc38:	bf08      	it	eq
 801bc3a:	4620      	moveq	r0, r4
 801bc3c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801bc40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801bc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc44:	468c      	mov	ip, r1
 801bc46:	4605      	mov	r5, r0
 801bc48:	4614      	mov	r4, r2
 801bc4a:	b942      	cbnz	r2, 801bc5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801bc4c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801bc50:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801bc54:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801bc58:	4620      	mov	r0, r4
 801bc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc5e:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801bc62:	7b50      	ldrb	r0, [r2, #13]
 801bc64:	8893      	ldrh	r3, [r2, #4]
 801bc66:	0106      	lsls	r6, r0, #4
 801bc68:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801bc6c:	79e6      	ldrb	r6, [r4, #7]
 801bc6e:	4316      	orrs	r6, r2
 801bc70:	185a      	adds	r2, r3, r1
 801bc72:	b291      	uxth	r1, r2
 801bc74:	291d      	cmp	r1, #29
 801bc76:	b2b7      	uxth	r7, r6
 801bc78:	d87d      	bhi.n	801bd76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801bc7a:	2201      	movs	r2, #1
 801bc7c:	408a      	lsls	r2, r1
 801bc7e:	498a      	ldr	r1, [pc, #552]	@ (801bea8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 801bc80:	10f6      	asrs	r6, r6, #3
 801bc82:	420a      	tst	r2, r1
 801bc84:	d12d      	bne.n	801bce2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801bc86:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801bc8a:	d074      	beq.n	801bd76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801bc8c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801bc90:	4623      	mov	r3, r4
 801bc92:	f104 0e08 	add.w	lr, r4, #8
 801bc96:	4614      	mov	r4, r2
 801bc98:	4694      	mov	ip, r2
 801bc9a:	6818      	ldr	r0, [r3, #0]
 801bc9c:	6859      	ldr	r1, [r3, #4]
 801bc9e:	3308      	adds	r3, #8
 801bca0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bca4:	4573      	cmp	r3, lr
 801bca6:	4662      	mov	r2, ip
 801bca8:	d1f6      	bne.n	801bc98 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801bcaa:	6818      	ldr	r0, [r3, #0]
 801bcac:	f8cc 0000 	str.w	r0, [ip]
 801bcb0:	889b      	ldrh	r3, [r3, #4]
 801bcb2:	f8ac 3004 	strh.w	r3, [ip, #4]
 801bcb6:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801bcba:	b2b3      	uxth	r3, r6
 801bcbc:	1aca      	subs	r2, r1, r3
 801bcbe:	b292      	uxth	r2, r2
 801bcc0:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801bcc4:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801bcc8:	10d2      	asrs	r2, r2, #3
 801bcca:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801bcce:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801bcd2:	4302      	orrs	r2, r0
 801bcd4:	1bcf      	subs	r7, r1, r7
 801bcd6:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 801bcda:	1afb      	subs	r3, r7, r3
 801bcdc:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 801bce0:	e7ba      	b.n	801bc58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801bce2:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801bce6:	4623      	mov	r3, r4
 801bce8:	f104 0808 	add.w	r8, r4, #8
 801bcec:	4614      	mov	r4, r2
 801bcee:	4696      	mov	lr, r2
 801bcf0:	6818      	ldr	r0, [r3, #0]
 801bcf2:	6859      	ldr	r1, [r3, #4]
 801bcf4:	3308      	adds	r3, #8
 801bcf6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801bcfa:	4543      	cmp	r3, r8
 801bcfc:	4672      	mov	r2, lr
 801bcfe:	d1f6      	bne.n	801bcee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xae>
 801bd00:	6818      	ldr	r0, [r3, #0]
 801bd02:	f8ce 0000 	str.w	r0, [lr]
 801bd06:	889b      	ldrh	r3, [r3, #4]
 801bd08:	f8ae 3004 	strh.w	r3, [lr, #4]
 801bd0c:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 801bd0e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801bd12:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801bd14:	f640 6333 	movw	r3, #3635	@ 0xe33
 801bd18:	4299      	cmp	r1, r3
 801bd1a:	d111      	bne.n	801bd40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x100>
 801bd1c:	f8dc 3000 	ldr.w	r3, [ip]
 801bd20:	4660      	mov	r0, ip
 801bd22:	68db      	ldr	r3, [r3, #12]
 801bd24:	4798      	blx	r3
 801bd26:	7b41      	ldrb	r1, [r0, #13]
 801bd28:	00cb      	lsls	r3, r1, #3
 801bd2a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bd2e:	7a03      	ldrb	r3, [r0, #8]
 801bd30:	4313      	orrs	r3, r2
 801bd32:	064a      	lsls	r2, r1, #25
 801bd34:	bf44      	itt	mi
 801bd36:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bd3a:	b21b      	sxthmi	r3, r3
 801bd3c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801bd40:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801bd44:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801bd48:	443b      	add	r3, r7
 801bd4a:	4433      	add	r3, r6
 801bd4c:	b29b      	uxth	r3, r3
 801bd4e:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801bd52:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801bd56:	10db      	asrs	r3, r3, #3
 801bd58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801bd5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801bd60:	4313      	orrs	r3, r2
 801bd62:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801bd66:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801bd6a:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801bd6e:	1a9b      	subs	r3, r3, r2
 801bd70:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801bd74:	e770      	b.n	801bc58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801bd76:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801bd7a:	f023 0204 	bic.w	r2, r3, #4
 801bd7e:	428a      	cmp	r2, r1
 801bd80:	d003      	beq.n	801bd8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14a>
 801bd82:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801bd86:	4293      	cmp	r3, r2
 801bd88:	d137      	bne.n	801bdfa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801bd8a:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801bd8e:	4622      	mov	r2, r4
 801bd90:	f104 0808 	add.w	r8, r4, #8
 801bd94:	4634      	mov	r4, r6
 801bd96:	46b6      	mov	lr, r6
 801bd98:	6810      	ldr	r0, [r2, #0]
 801bd9a:	6851      	ldr	r1, [r2, #4]
 801bd9c:	3208      	adds	r2, #8
 801bd9e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801bda2:	4542      	cmp	r2, r8
 801bda4:	4676      	mov	r6, lr
 801bda6:	d1f6      	bne.n	801bd96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801bda8:	6810      	ldr	r0, [r2, #0]
 801bdaa:	3b01      	subs	r3, #1
 801bdac:	f8ce 0000 	str.w	r0, [lr]
 801bdb0:	8892      	ldrh	r2, [r2, #4]
 801bdb2:	b29b      	uxth	r3, r3
 801bdb4:	f8ae 2004 	strh.w	r2, [lr, #4]
 801bdb8:	4621      	mov	r1, r4
 801bdba:	4662      	mov	r2, ip
 801bdbc:	4628      	mov	r0, r5
 801bdbe:	f7ff ff33 	bl	801bc28 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bdc2:	7b41      	ldrb	r1, [r0, #13]
 801bdc4:	00cb      	lsls	r3, r1, #3
 801bdc6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bdca:	7a03      	ldrb	r3, [r0, #8]
 801bdcc:	0648      	lsls	r0, r1, #25
 801bdce:	ea43 0302 	orr.w	r3, r3, r2
 801bdd2:	bf44      	itt	mi
 801bdd4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bdd8:	b21b      	sxthmi	r3, r3
 801bdda:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801bdde:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801bde2:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 801bde6:	005b      	lsls	r3, r3, #1
 801bde8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bdec:	4313      	orrs	r3, r2
 801bdee:	115a      	asrs	r2, r3, #5
 801bdf0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bdf4:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801bdf8:	e046      	b.n	801be88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x248>
 801bdfa:	00c2      	lsls	r2, r0, #3
 801bdfc:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801be00:	7a22      	ldrb	r2, [r4, #8]
 801be02:	430a      	orrs	r2, r1
 801be04:	0641      	lsls	r1, r0, #25
 801be06:	f640 6109 	movw	r1, #3593	@ 0xe09
 801be0a:	bf44      	itt	mi
 801be0c:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801be10:	b212      	sxthmi	r2, r2
 801be12:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801be16:	f023 0210 	bic.w	r2, r3, #16
 801be1a:	428a      	cmp	r2, r1
 801be1c:	d003      	beq.n	801be26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e6>
 801be1e:	f640 6213 	movw	r2, #3603	@ 0xe13
 801be22:	4293      	cmp	r3, r2
 801be24:	d13d      	bne.n	801bea2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x262>
 801be26:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801be2a:	4696      	mov	lr, r2
 801be2c:	f104 0808 	add.w	r8, r4, #8
 801be30:	4616      	mov	r6, r2
 801be32:	6820      	ldr	r0, [r4, #0]
 801be34:	6861      	ldr	r1, [r4, #4]
 801be36:	3408      	adds	r4, #8
 801be38:	c603      	stmia	r6!, {r0, r1}
 801be3a:	4544      	cmp	r4, r8
 801be3c:	4632      	mov	r2, r6
 801be3e:	d1f7      	bne.n	801be30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f0>
 801be40:	6820      	ldr	r0, [r4, #0]
 801be42:	6030      	str	r0, [r6, #0]
 801be44:	88a1      	ldrh	r1, [r4, #4]
 801be46:	4628      	mov	r0, r5
 801be48:	80b1      	strh	r1, [r6, #4]
 801be4a:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801be4e:	4671      	mov	r1, lr
 801be50:	0076      	lsls	r6, r6, #1
 801be52:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801be56:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801be5a:	4674      	mov	r4, lr
 801be5c:	4316      	orrs	r6, r2
 801be5e:	f640 6213 	movw	r2, #3603	@ 0xe13
 801be62:	4293      	cmp	r3, r2
 801be64:	bf1a      	itte	ne
 801be66:	f103 33ff 	addne.w	r3, r3, #4294967295
 801be6a:	b29b      	uxthne	r3, r3
 801be6c:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801be70:	4662      	mov	r2, ip
 801be72:	f7ff fed9 	bl	801bc28 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801be76:	7b43      	ldrb	r3, [r0, #13]
 801be78:	7a82      	ldrb	r2, [r0, #10]
 801be7a:	005b      	lsls	r3, r3, #1
 801be7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801be80:	4313      	orrs	r3, r2
 801be82:	1af6      	subs	r6, r6, r3
 801be84:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801be88:	7b61      	ldrb	r1, [r4, #13]
 801be8a:	00cb      	lsls	r3, r1, #3
 801be8c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801be90:	7a23      	ldrb	r3, [r4, #8]
 801be92:	4313      	orrs	r3, r2
 801be94:	064a      	lsls	r2, r1, #25
 801be96:	bf44      	itt	mi
 801be98:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801be9c:	b21b      	sxthmi	r3, r3
 801be9e:	1bdb      	subs	r3, r3, r7
 801bea0:	e71c      	b.n	801bcdc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801bea2:	2300      	movs	r3, #0
 801bea4:	e7a6      	b.n	801bdf4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>
 801bea6:	bf00      	nop
 801bea8:	3fc00079 	.word	0x3fc00079

0801beac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801beac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801beb0:	4604      	mov	r4, r0
 801beb2:	b942      	cbnz	r2, 801bec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801beb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801beb8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801bebc:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801bec0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801bec4:	e047      	b.n	801bf56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bec6:	7b51      	ldrb	r1, [r2, #13]
 801bec8:	8893      	ldrh	r3, [r2, #4]
 801beca:	010d      	lsls	r5, r1, #4
 801becc:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801bed0:	79d5      	ldrb	r5, [r2, #7]
 801bed2:	4305      	orrs	r5, r0
 801bed4:	2d04      	cmp	r5, #4
 801bed6:	bfcc      	ite	gt
 801bed8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801bedc:	f04f 0e01 	movle.w	lr, #1
 801bee0:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801bee4:	f200 80ab 	bhi.w	801c03e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801bee8:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801beec:	4283      	cmp	r3, r0
 801beee:	d216      	bcs.n	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bef0:	f240 605b 	movw	r0, #1627	@ 0x65b
 801bef4:	4283      	cmp	r3, r0
 801bef6:	d859      	bhi.n	801bfac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801bef8:	f240 6057 	movw	r0, #1623	@ 0x657
 801befc:	4283      	cmp	r3, r0
 801befe:	d20e      	bcs.n	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf00:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801bf04:	d24a      	bcs.n	801bf9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801bf06:	f240 604e 	movw	r0, #1614	@ 0x64e
 801bf0a:	4283      	cmp	r3, r0
 801bf0c:	d207      	bcs.n	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf0e:	f240 601a 	movw	r0, #1562	@ 0x61a
 801bf12:	4283      	cmp	r3, r0
 801bf14:	d02a      	beq.n	801bf6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf16:	d821      	bhi.n	801bf5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801bf18:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801bf1c:	d35b      	bcc.n	801bfd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bf1e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801bf22:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801bf26:	f040 80d0 	bne.w	801c0ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bf2a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801bf2e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801bf32:	f040 80ca 	bne.w	801c0ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bf36:	00cb      	lsls	r3, r1, #3
 801bf38:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801bf3c:	7a13      	ldrb	r3, [r2, #8]
 801bf3e:	0649      	lsls	r1, r1, #25
 801bf40:	ea43 0300 	orr.w	r3, r3, r0
 801bf44:	bf44      	itt	mi
 801bf46:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bf4a:	b21b      	sxthmi	r3, r3
 801bf4c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801bf50:	1b5d      	subs	r5, r3, r5
 801bf52:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801bf56:	4610      	mov	r0, r2
 801bf58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf5c:	f240 604b 	movw	r0, #1611	@ 0x64b
 801bf60:	4283      	cmp	r3, r0
 801bf62:	d338      	bcc.n	801bfd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bf64:	f240 604c 	movw	r0, #1612	@ 0x64c
 801bf68:	4283      	cmp	r3, r0
 801bf6a:	d9d8      	bls.n	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf6c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801bf70:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801bf74:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801bf78:	f040 80f2 	bne.w	801c160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801bf7c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801bf80:	f040 80ee 	bne.w	801c160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801bf84:	00cb      	lsls	r3, r1, #3
 801bf86:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801bf8a:	7a13      	ldrb	r3, [r2, #8]
 801bf8c:	064e      	lsls	r6, r1, #25
 801bf8e:	ea43 0300 	orr.w	r3, r3, r0
 801bf92:	bf44      	itt	mi
 801bf94:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bf98:	b21b      	sxthmi	r3, r3
 801bf9a:	e7d9      	b.n	801bf50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801bf9c:	f240 6054 	movw	r0, #1620	@ 0x654
 801bfa0:	4283      	cmp	r3, r0
 801bfa2:	d8e3      	bhi.n	801bf6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bfa4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801bfa8:	d9e0      	bls.n	801bf6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bfaa:	e7b8      	b.n	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bfac:	f240 6074 	movw	r0, #1652	@ 0x674
 801bfb0:	4283      	cmp	r3, r0
 801bfb2:	d0b4      	beq.n	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bfb4:	d82d      	bhi.n	801c012 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801bfb6:	f240 605e 	movw	r0, #1630	@ 0x65e
 801bfba:	4283      	cmp	r3, r0
 801bfbc:	d804      	bhi.n	801bfc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801bfbe:	f240 605d 	movw	r0, #1629	@ 0x65d
 801bfc2:	4283      	cmp	r3, r0
 801bfc4:	d3d2      	bcc.n	801bf6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bfc6:	e7aa      	b.n	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bfc8:	f240 605f 	movw	r0, #1631	@ 0x65f
 801bfcc:	4283      	cmp	r3, r0
 801bfce:	d0cd      	beq.n	801bf6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bfd0:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801bfd4:	d0a3      	beq.n	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bfd6:	00cb      	lsls	r3, r1, #3
 801bfd8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801bfdc:	7a13      	ldrb	r3, [r2, #8]
 801bfde:	0649      	lsls	r1, r1, #25
 801bfe0:	ea43 0300 	orr.w	r3, r3, r0
 801bfe4:	bf44      	itt	mi
 801bfe6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bfea:	b21b      	sxthmi	r3, r3
 801bfec:	1b5d      	subs	r5, r3, r5
 801bfee:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801bff2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801bff6:	7b53      	ldrb	r3, [r2, #13]
 801bff8:	015b      	lsls	r3, r3, #5
 801bffa:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801bffe:	7993      	ldrb	r3, [r2, #6]
 801c000:	430b      	orrs	r3, r1
 801c002:	2105      	movs	r1, #5
 801c004:	005b      	lsls	r3, r3, #1
 801c006:	fb93 f3f1 	sdiv	r3, r3, r1
 801c00a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c00e:	440b      	add	r3, r1
 801c010:	e756      	b.n	801bec0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c012:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801c016:	4283      	cmp	r3, r0
 801c018:	d809      	bhi.n	801c02e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801c01a:	f240 60df 	movw	r0, #1759	@ 0x6df
 801c01e:	4283      	cmp	r3, r0
 801c020:	f4bf af7d 	bcs.w	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c024:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801c028:	2b05      	cmp	r3, #5
 801c02a:	d8d4      	bhi.n	801bfd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c02c:	e777      	b.n	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c02e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801c032:	4283      	cmp	r3, r0
 801c034:	d09a      	beq.n	801bf6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c036:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801c03a:	4283      	cmp	r3, r0
 801c03c:	e7ca      	b.n	801bfd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c03e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801c042:	d22b      	bcs.n	801c09c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801c044:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801c048:	4283      	cmp	r3, r0
 801c04a:	d28f      	bcs.n	801bf6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c04c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801c050:	4283      	cmp	r3, r0
 801c052:	d816      	bhi.n	801c082 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801c054:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801c058:	4283      	cmp	r3, r0
 801c05a:	f4bf af60 	bcs.w	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c05e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801c062:	4283      	cmp	r3, r0
 801c064:	d80a      	bhi.n	801c07c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801c066:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801c06a:	4283      	cmp	r3, r0
 801c06c:	f4bf af57 	bcs.w	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c070:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801c074:	4283      	cmp	r3, r0
 801c076:	f43f af79 	beq.w	801bf6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c07a:	e7ac      	b.n	801bfd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c07c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801c080:	e7f8      	b.n	801c074 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801c082:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801c086:	4283      	cmp	r3, r0
 801c088:	d802      	bhi.n	801c090 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801c08a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801c08e:	e798      	b.n	801bfc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801c090:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801c094:	4283      	cmp	r3, r0
 801c096:	f47f af42 	bne.w	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c09a:	e767      	b.n	801bf6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c09c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801c0a0:	4283      	cmp	r3, r0
 801c0a2:	f43f af63 	beq.w	801bf6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0a6:	d802      	bhi.n	801c0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801c0a8:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801c0ac:	e7f2      	b.n	801c094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801c0ae:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801c0b2:	4283      	cmp	r3, r0
 801c0b4:	d805      	bhi.n	801c0c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801c0b6:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801c0ba:	4283      	cmp	r3, r0
 801c0bc:	f4ff af2f 	bcc.w	801bf1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0c0:	e754      	b.n	801bf6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0c2:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801c0c6:	4283      	cmp	r3, r0
 801c0c8:	e7af      	b.n	801c02a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801c0ca:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801c0ce:	4617      	mov	r7, r2
 801c0d0:	4666      	mov	r6, ip
 801c0d2:	f102 0808 	add.w	r8, r2, #8
 801c0d6:	46e6      	mov	lr, ip
 801c0d8:	6838      	ldr	r0, [r7, #0]
 801c0da:	6879      	ldr	r1, [r7, #4]
 801c0dc:	3708      	adds	r7, #8
 801c0de:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c0e2:	4547      	cmp	r7, r8
 801c0e4:	46f4      	mov	ip, lr
 801c0e6:	d1f6      	bne.n	801c0d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801c0e8:	6838      	ldr	r0, [r7, #0]
 801c0ea:	f8ce 0000 	str.w	r0, [lr]
 801c0ee:	88b9      	ldrh	r1, [r7, #4]
 801c0f0:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c0f4:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801c0f8:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c0fc:	d009      	beq.n	801c112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801c0fe:	7b51      	ldrb	r1, [r2, #13]
 801c100:	7992      	ldrb	r2, [r2, #6]
 801c102:	0149      	lsls	r1, r1, #5
 801c104:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c108:	4311      	orrs	r1, r2
 801c10a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c10e:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801c112:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c116:	b2ad      	uxth	r5, r5
 801c118:	d00d      	beq.n	801c136 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801c11a:	442b      	add	r3, r5
 801c11c:	b29b      	uxth	r3, r3
 801c11e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801c122:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801c126:	10db      	asrs	r3, r3, #3
 801c128:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801c12c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801c130:	4313      	orrs	r3, r2
 801c132:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801c136:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801c13a:	00cb      	lsls	r3, r1, #3
 801c13c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c140:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801c144:	064f      	lsls	r7, r1, #25
 801c146:	ea43 0302 	orr.w	r3, r3, r2
 801c14a:	bf44      	itt	mi
 801c14c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c150:	b21b      	sxthmi	r3, r3
 801c152:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c156:	1b5b      	subs	r3, r3, r5
 801c158:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801c15c:	4632      	mov	r2, r6
 801c15e:	e6fa      	b.n	801bf56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801c160:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801c164:	4617      	mov	r7, r2
 801c166:	4666      	mov	r6, ip
 801c168:	f102 0908 	add.w	r9, r2, #8
 801c16c:	46e0      	mov	r8, ip
 801c16e:	6838      	ldr	r0, [r7, #0]
 801c170:	6879      	ldr	r1, [r7, #4]
 801c172:	3708      	adds	r7, #8
 801c174:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c178:	454f      	cmp	r7, r9
 801c17a:	46c4      	mov	ip, r8
 801c17c:	d1f6      	bne.n	801c16c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801c17e:	6838      	ldr	r0, [r7, #0]
 801c180:	f8c8 0000 	str.w	r0, [r8]
 801c184:	88b9      	ldrh	r1, [r7, #4]
 801c186:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c18a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801c18e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c192:	d009      	beq.n	801c1a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801c194:	7b51      	ldrb	r1, [r2, #13]
 801c196:	7992      	ldrb	r2, [r2, #6]
 801c198:	0149      	lsls	r1, r1, #5
 801c19a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c19e:	4311      	orrs	r1, r2
 801c1a0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c1a4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801c1a8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c1ac:	d00e      	beq.n	801c1cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801c1ae:	eba3 030e 	sub.w	r3, r3, lr
 801c1b2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801c1b6:	b29b      	uxth	r3, r3
 801c1b8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801c1bc:	10db      	asrs	r3, r3, #3
 801c1be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801c1c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801c1c6:	4313      	orrs	r3, r2
 801c1c8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801c1cc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801c1d0:	00cb      	lsls	r3, r1, #3
 801c1d2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c1d6:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801c1da:	0648      	lsls	r0, r1, #25
 801c1dc:	ea43 0302 	orr.w	r3, r3, r2
 801c1e0:	bf44      	itt	mi
 801c1e2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c1e6:	b21b      	sxthmi	r3, r3
 801c1e8:	1b5d      	subs	r5, r3, r5
 801c1ea:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c1ee:	e7b5      	b.n	801c15c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801c1f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1f4:	461e      	mov	r6, r3
 801c1f6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c1f8:	4604      	mov	r4, r0
 801c1fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c1fe:	4617      	mov	r7, r2
 801c200:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c204:	f7f4 fd7c 	bl	8010d00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c208:	4605      	mov	r5, r0
 801c20a:	b918      	cbnz	r0, 801c214 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801c20c:	6030      	str	r0, [r6, #0]
 801c20e:	4628      	mov	r0, r5
 801c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c214:	683b      	ldr	r3, [r7, #0]
 801c216:	4601      	mov	r1, r0
 801c218:	68db      	ldr	r3, [r3, #12]
 801c21a:	4638      	mov	r0, r7
 801c21c:	4798      	blx	r3
 801c21e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801c222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c226:	4602      	mov	r2, r0
 801c228:	6030      	str	r0, [r6, #0]
 801c22a:	d213      	bcs.n	801c254 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801c22c:	4643      	mov	r3, r8
 801c22e:	4639      	mov	r1, r7
 801c230:	4620      	mov	r0, r4
 801c232:	f7ff fe3b 	bl	801beac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c236:	6030      	str	r0, [r6, #0]
 801c238:	6833      	ldr	r3, [r6, #0]
 801c23a:	b143      	cbz	r3, 801c24e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801c23c:	7b5a      	ldrb	r2, [r3, #13]
 801c23e:	7a9b      	ldrb	r3, [r3, #10]
 801c240:	0052      	lsls	r2, r2, #1
 801c242:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801c246:	4313      	orrs	r3, r2
 801c248:	bf0c      	ite	eq
 801c24a:	2301      	moveq	r3, #1
 801c24c:	2300      	movne	r3, #0
 801c24e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801c252:	e7dc      	b.n	801c20e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801c254:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801c258:	b29b      	uxth	r3, r3
 801c25a:	2b7f      	cmp	r3, #127	@ 0x7f
 801c25c:	d804      	bhi.n	801c268 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801c25e:	4639      	mov	r1, r7
 801c260:	4620      	mov	r0, r4
 801c262:	f7ff fced 	bl	801bc40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c266:	e7e6      	b.n	801c236 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801c268:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d0e3      	beq.n	801c238 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c270:	f640 1302 	movw	r3, #2306	@ 0x902
 801c274:	429d      	cmp	r5, r3
 801c276:	d1df      	bne.n	801c238 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c278:	4601      	mov	r1, r0
 801c27a:	4620      	mov	r0, r4
 801c27c:	f7ff fcb1 	bl	801bbe2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c280:	e7d9      	b.n	801c236 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801c282 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c282:	b510      	push	{r4, lr}
 801c284:	4604      	mov	r4, r0
 801c286:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801c28a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c28c:	b1f1      	cbz	r1, 801c2cc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801c28e:	2b0a      	cmp	r3, #10
 801c290:	d02f      	beq.n	801c2f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801c292:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801c294:	3901      	subs	r1, #1
 801c296:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c29a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801c29c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801c2a0:	1c51      	adds	r1, r2, #1
 801c2a2:	b289      	uxth	r1, r1
 801c2a4:	2901      	cmp	r1, #1
 801c2a6:	bf84      	itt	hi
 801c2a8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c2ac:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801c2ae:	f103 0201 	add.w	r2, r3, #1
 801c2b2:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c2b4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c2b6:	bf98      	it	ls
 801c2b8:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801c2ba:	4413      	add	r3, r2
 801c2bc:	b29b      	uxth	r3, r3
 801c2be:	2b09      	cmp	r3, #9
 801c2c0:	bf88      	it	hi
 801c2c2:	3b0a      	subhi	r3, #10
 801c2c4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c2c8:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c2ca:	e7dc      	b.n	801c286 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c2cc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c2ce:	2b0a      	cmp	r3, #10
 801c2d0:	d00f      	beq.n	801c2f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801c2d2:	4620      	mov	r0, r4
 801c2d4:	f7ff fc44 	bl	801bb60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c2d8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c2da:	1c5a      	adds	r2, r3, #1
 801c2dc:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c2de:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c2e0:	4413      	add	r3, r2
 801c2e2:	b29b      	uxth	r3, r3
 801c2e4:	2b09      	cmp	r3, #9
 801c2e6:	bf88      	it	hi
 801c2e8:	3b0a      	subhi	r3, #10
 801c2ea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c2ee:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c2f0:	e7ec      	b.n	801c2cc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801c2f2:	bd10      	pop	{r4, pc}

0801c2f4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c2f4:	b538      	push	{r3, r4, r5, lr}
 801c2f6:	4604      	mov	r4, r0
 801c2f8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c2fa:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801c2fe:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801c300:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801c302:	3a01      	subs	r2, #1
 801c304:	8702      	strh	r2, [r0, #56]	@ 0x38
 801c306:	1c5a      	adds	r2, r3, #1
 801c308:	b292      	uxth	r2, r2
 801c30a:	2a09      	cmp	r2, #9
 801c30c:	bf86      	itte	hi
 801c30e:	3b09      	subhi	r3, #9
 801c310:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801c312:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801c314:	f7ff ffb5 	bl	801c282 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c318:	8c23      	ldrh	r3, [r4, #32]
 801c31a:	2b01      	cmp	r3, #1
 801c31c:	bf9c      	itt	ls
 801c31e:	3301      	addls	r3, #1
 801c320:	8423      	strhls	r3, [r4, #32]
 801c322:	8be3      	ldrh	r3, [r4, #30]
 801c324:	b90b      	cbnz	r3, 801c32a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801c326:	2302      	movs	r3, #2
 801c328:	83e3      	strh	r3, [r4, #30]
 801c32a:	8be3      	ldrh	r3, [r4, #30]
 801c32c:	4628      	mov	r0, r5
 801c32e:	3b01      	subs	r3, #1
 801c330:	b29b      	uxth	r3, r3
 801c332:	83e3      	strh	r3, [r4, #30]
 801c334:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c338:	8365      	strh	r5, [r4, #26]
 801c33a:	bd38      	pop	{r3, r4, r5, pc}

0801c33c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c33c:	428a      	cmp	r2, r1
 801c33e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c342:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801c344:	d931      	bls.n	801c3aa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801c346:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801c348:	1a54      	subs	r4, r2, r1
 801c34a:	19ee      	adds	r6, r5, r7
 801c34c:	3e01      	subs	r6, #1
 801c34e:	fa1f fe84 	uxth.w	lr, r4
 801c352:	b2b4      	uxth	r4, r6
 801c354:	eba4 090e 	sub.w	r9, r4, lr
 801c358:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801c35c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801c360:	fa1f f989 	uxth.w	r9, r9
 801c364:	2c09      	cmp	r4, #9
 801c366:	4626      	mov	r6, r4
 801c368:	bf88      	it	hi
 801c36a:	f1a4 060a 	subhi.w	r6, r4, #10
 801c36e:	f1bc 0f00 	cmp.w	ip, #0
 801c372:	bf08      	it	eq
 801c374:	f04f 0c02 	moveq.w	ip, #2
 801c378:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c37c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c380:	3c01      	subs	r4, #1
 801c382:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801c386:	fa1f fc8c 	uxth.w	ip, ip
 801c38a:	b2a4      	uxth	r4, r4
 801c38c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801c390:	454c      	cmp	r4, r9
 801c392:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801c396:	d1e5      	bne.n	801c364 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801c398:	eba5 050e 	sub.w	r5, r5, lr
 801c39c:	eb0e 0408 	add.w	r4, lr, r8
 801c3a0:	8705      	strh	r5, [r0, #56]	@ 0x38
 801c3a2:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801c3a6:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801c3aa:	250a      	movs	r5, #10
 801c3ac:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801c3ae:	1a64      	subs	r4, r4, r1
 801c3b0:	4439      	add	r1, r7
 801c3b2:	b289      	uxth	r1, r1
 801c3b4:	2909      	cmp	r1, #9
 801c3b6:	bf88      	it	hi
 801c3b8:	390a      	subhi	r1, #10
 801c3ba:	8704      	strh	r4, [r0, #56]	@ 0x38
 801c3bc:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c3be:	b18a      	cbz	r2, 801c3e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801c3c0:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801c3c2:	3a01      	subs	r2, #1
 801c3c4:	3101      	adds	r1, #1
 801c3c6:	b292      	uxth	r2, r2
 801c3c8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c3cc:	8701      	strh	r1, [r0, #56]	@ 0x38
 801c3ce:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c3d0:	b901      	cbnz	r1, 801c3d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801c3d2:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801c3d4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c3d6:	3901      	subs	r1, #1
 801c3d8:	b289      	uxth	r1, r1
 801c3da:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c3dc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c3e0:	844c      	strh	r4, [r1, #34]	@ 0x22
 801c3e2:	e7ec      	b.n	801c3be <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801c3e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c3e8:	f7ff bf4b 	b.w	801c282 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801c3ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c3ec:	b570      	push	{r4, r5, r6, lr}
 801c3ee:	2500      	movs	r5, #0
 801c3f0:	4295      	cmp	r5, r2
 801c3f2:	d011      	beq.n	801c418 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801c3f4:	8bc4      	ldrh	r4, [r0, #30]
 801c3f6:	f831 6b02 	ldrh.w	r6, [r1], #2
 801c3fa:	4414      	add	r4, r2
 801c3fc:	3c01      	subs	r4, #1
 801c3fe:	1b64      	subs	r4, r4, r5
 801c400:	b2a4      	uxth	r4, r4
 801c402:	2c01      	cmp	r4, #1
 801c404:	bf88      	it	hi
 801c406:	3c02      	subhi	r4, #2
 801c408:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c40c:	8b64      	ldrh	r4, [r4, #26]
 801c40e:	42b4      	cmp	r4, r6
 801c410:	d117      	bne.n	801c442 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801c412:	3501      	adds	r5, #1
 801c414:	b2ad      	uxth	r5, r5
 801c416:	e7eb      	b.n	801c3f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801c418:	2400      	movs	r4, #0
 801c41a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c41e:	4413      	add	r3, r2
 801c420:	b2a2      	uxth	r2, r4
 801c422:	429a      	cmp	r2, r3
 801c424:	da0f      	bge.n	801c446 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801c426:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801c428:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c42c:	4432      	add	r2, r6
 801c42e:	b292      	uxth	r2, r2
 801c430:	2a09      	cmp	r2, #9
 801c432:	bf88      	it	hi
 801c434:	3a0a      	subhi	r2, #10
 801c436:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c43a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801c43c:	3401      	adds	r4, #1
 801c43e:	42aa      	cmp	r2, r5
 801c440:	d0ee      	beq.n	801c420 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801c442:	2000      	movs	r0, #0
 801c444:	bd70      	pop	{r4, r5, r6, pc}
 801c446:	2001      	movs	r0, #1
 801c448:	e7fc      	b.n	801c444 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801c44a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c44a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c44e:	4605      	mov	r5, r0
 801c450:	4616      	mov	r6, r2
 801c452:	1c8c      	adds	r4, r1, #2
 801c454:	8809      	ldrh	r1, [r1, #0]
 801c456:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c45a:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c45e:	42b3      	cmp	r3, r6
 801c460:	d124      	bne.n	801c4ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c462:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c466:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c46a:	f001 070f 	and.w	r7, r1, #15
 801c46e:	f8cd 8000 	str.w	r8, [sp]
 801c472:	464b      	mov	r3, r9
 801c474:	4652      	mov	r2, sl
 801c476:	4621      	mov	r1, r4
 801c478:	4628      	mov	r0, r5
 801c47a:	f7ff ffb7 	bl	801c3ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c47e:	4683      	mov	fp, r0
 801c480:	b168      	cbz	r0, 801c49e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c482:	eb0a 0109 	add.w	r1, sl, r9
 801c486:	4441      	add	r1, r8
 801c488:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c48c:	463a      	mov	r2, r7
 801c48e:	4649      	mov	r1, r9
 801c490:	4628      	mov	r0, r5
 801c492:	f7ff ff53 	bl	801c33c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c496:	4658      	mov	r0, fp
 801c498:	b003      	add	sp, #12
 801c49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c49e:	eb07 010a 	add.w	r1, r7, sl
 801c4a2:	4449      	add	r1, r9
 801c4a4:	4441      	add	r1, r8
 801c4a6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c4aa:	e7d2      	b.n	801c452 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c4ac:	f04f 0b00 	mov.w	fp, #0
 801c4b0:	e7f1      	b.n	801c496 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c4b2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c4b2:	b570      	push	{r4, r5, r6, lr}
 801c4b4:	8810      	ldrh	r0, [r2, #0]
 801c4b6:	4298      	cmp	r0, r3
 801c4b8:	d817      	bhi.n	801c4ea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c4ba:	1e48      	subs	r0, r1, #1
 801c4bc:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c4c0:	4298      	cmp	r0, r3
 801c4c2:	d312      	bcc.n	801c4ea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c4c4:	2400      	movs	r4, #0
 801c4c6:	428c      	cmp	r4, r1
 801c4c8:	d20f      	bcs.n	801c4ea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c4ca:	1860      	adds	r0, r4, r1
 801c4cc:	1040      	asrs	r0, r0, #1
 801c4ce:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c4d2:	0085      	lsls	r5, r0, #2
 801c4d4:	42b3      	cmp	r3, r6
 801c4d6:	d902      	bls.n	801c4de <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c4d8:	3001      	adds	r0, #1
 801c4da:	b284      	uxth	r4, r0
 801c4dc:	e7f3      	b.n	801c4c6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c4de:	d201      	bcs.n	801c4e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c4e0:	b281      	uxth	r1, r0
 801c4e2:	e7f0      	b.n	801c4c6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c4e4:	442a      	add	r2, r5
 801c4e6:	8850      	ldrh	r0, [r2, #2]
 801c4e8:	bd70      	pop	{r4, r5, r6, pc}
 801c4ea:	2000      	movs	r0, #0
 801c4ec:	e7fc      	b.n	801c4e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c4ee <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4f2:	4604      	mov	r4, r0
 801c4f4:	260b      	movs	r6, #11
 801c4f6:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801c4f8:	886f      	ldrh	r7, [r5, #2]
 801c4fa:	087f      	lsrs	r7, r7, #1
 801c4fc:	3e01      	subs	r6, #1
 801c4fe:	d013      	beq.n	801c528 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c500:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801c502:	462a      	mov	r2, r5
 801c504:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c508:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c50c:	4639      	mov	r1, r7
 801c50e:	4643      	mov	r3, r8
 801c510:	4620      	mov	r0, r4
 801c512:	f7ff ffce 	bl	801c4b2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c516:	b138      	cbz	r0, 801c528 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c518:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c51c:	4642      	mov	r2, r8
 801c51e:	4620      	mov	r0, r4
 801c520:	f7ff ff93 	bl	801c44a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c524:	2800      	cmp	r0, #0
 801c526:	d1e9      	bne.n	801c4fc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c52c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c52c:	b570      	push	{r4, r5, r6, lr}
 801c52e:	694a      	ldr	r2, [r1, #20]
 801c530:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801c532:	684b      	ldr	r3, [r1, #4]
 801c534:	1b54      	subs	r4, r2, r5
 801c536:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801c538:	f000 8107 	beq.w	801c74a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801c53c:	1b9b      	subs	r3, r3, r6
 801c53e:	d003      	beq.n	801c548 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c540:	2210      	movs	r2, #16
 801c542:	4363      	muls	r3, r4
 801c544:	fb93 f3f2 	sdiv	r3, r3, r2
 801c548:	680c      	ldr	r4, [r1, #0]
 801c54a:	698a      	ldr	r2, [r1, #24]
 801c54c:	1b65      	subs	r5, r4, r5
 801c54e:	f000 80fe 	beq.w	801c74e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801c552:	1b92      	subs	r2, r2, r6
 801c554:	d003      	beq.n	801c55e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c556:	2410      	movs	r4, #16
 801c558:	436a      	muls	r2, r5
 801c55a:	fb92 f2f4 	sdiv	r2, r2, r4
 801c55e:	1a9b      	subs	r3, r3, r2
 801c560:	ee07 3a90 	vmov	s15, r3
 801c564:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801c78c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 801c568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c56c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c570:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c574:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c578:	460a      	mov	r2, r1
 801c57a:	eeb1 6a43 	vneg.f32	s12, s6
 801c57e:	4603      	mov	r3, r0
 801c580:	f100 040c 	add.w	r4, r0, #12
 801c584:	edd2 7a02 	vldr	s15, [r2, #8]
 801c588:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c58c:	ece3 6a01 	vstmia	r3!, {s13}
 801c590:	edd2 7a03 	vldr	s15, [r2, #12]
 801c594:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c598:	edc3 7a02 	vstr	s15, [r3, #8]
 801c59c:	edd2 7a04 	vldr	s15, [r2, #16]
 801c5a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c5a4:	429c      	cmp	r4, r3
 801c5a6:	edc3 7a05 	vstr	s15, [r3, #20]
 801c5aa:	f102 0214 	add.w	r2, r2, #20
 801c5ae:	d1e9      	bne.n	801c584 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c5b0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c5b2:	698b      	ldr	r3, [r1, #24]
 801c5b4:	edd0 4a02 	vldr	s9, [r0, #8]
 801c5b8:	1a9b      	subs	r3, r3, r2
 801c5ba:	ee07 3a90 	vmov	s15, r3
 801c5be:	684b      	ldr	r3, [r1, #4]
 801c5c0:	edd0 3a00 	vldr	s7, [r0]
 801c5c4:	1a9b      	subs	r3, r3, r2
 801c5c6:	edd0 6a01 	vldr	s13, [r0, #4]
 801c5ca:	ee07 3a10 	vmov	s14, r3
 801c5ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c5d2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c5d6:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c5da:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c5de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5e2:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c5e6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c5ee:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c5f2:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801c5f6:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c5f8:	694a      	ldr	r2, [r1, #20]
 801c5fa:	ed90 5a05 	vldr	s10, [r0, #20]
 801c5fe:	1b13      	subs	r3, r2, r4
 801c600:	ee07 3a10 	vmov	s14, r3
 801c604:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c608:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c60c:	680b      	ldr	r3, [r1, #0]
 801c60e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c612:	1b1b      	subs	r3, r3, r4
 801c614:	ee07 3a10 	vmov	s14, r3
 801c618:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c61c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c620:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c624:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c628:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801c62c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c62e:	698b      	ldr	r3, [r1, #24]
 801c630:	ed90 2a03 	vldr	s4, [r0, #12]
 801c634:	1a9b      	subs	r3, r3, r2
 801c636:	ee06 3a90 	vmov	s13, r3
 801c63a:	684b      	ldr	r3, [r1, #4]
 801c63c:	edd0 5a04 	vldr	s11, [r0, #16]
 801c640:	1a9b      	subs	r3, r3, r2
 801c642:	ee07 3a10 	vmov	s14, r3
 801c646:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c64a:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c64e:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c652:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c656:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c65a:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c65e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c662:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c666:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c66a:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801c66e:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c670:	694a      	ldr	r2, [r1, #20]
 801c672:	ed90 1a07 	vldr	s2, [r0, #28]
 801c676:	1b13      	subs	r3, r2, r4
 801c678:	ee07 3a10 	vmov	s14, r3
 801c67c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c680:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c684:	680b      	ldr	r3, [r1, #0]
 801c686:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c68a:	1b1b      	subs	r3, r3, r4
 801c68c:	ee07 3a10 	vmov	s14, r3
 801c690:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c694:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c698:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c69c:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c6a0:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801c6a4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c6a6:	698b      	ldr	r3, [r1, #24]
 801c6a8:	edd0 5a08 	vldr	s11, [r0, #32]
 801c6ac:	1a9b      	subs	r3, r3, r2
 801c6ae:	ee07 3a10 	vmov	s14, r3
 801c6b2:	684b      	ldr	r3, [r1, #4]
 801c6b4:	edd0 2a06 	vldr	s5, [r0, #24]
 801c6b8:	1a9b      	subs	r3, r3, r2
 801c6ba:	ee01 3a90 	vmov	s3, r3
 801c6be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c6c2:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c6c6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c6ca:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c6ce:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c6d2:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c6d6:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c6da:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c6de:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c6e2:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801c6e6:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c6e8:	694a      	ldr	r2, [r1, #20]
 801c6ea:	1b13      	subs	r3, r2, r4
 801c6ec:	ee03 3a10 	vmov	s6, r3
 801c6f0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c6f4:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c6f8:	680b      	ldr	r3, [r1, #0]
 801c6fa:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c6fe:	1b1b      	subs	r3, r3, r4
 801c700:	ee03 3a10 	vmov	s6, r3
 801c704:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c708:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c70c:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c710:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c714:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c718:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c71c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c724:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801c728:	dd13      	ble.n	801c752 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c72a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c72e:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c732:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c73e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801c740:	dd15      	ble.n	801c76e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c746:	6403      	str	r3, [r0, #64]	@ 0x40
 801c748:	bd70      	pop	{r4, r5, r6, pc}
 801c74a:	4623      	mov	r3, r4
 801c74c:	e6fc      	b.n	801c548 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c74e:	462a      	mov	r2, r5
 801c750:	e705      	b.n	801c55e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c752:	d502      	bpl.n	801c75a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801c754:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c758:	e7e9      	b.n	801c72e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801c75a:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c75e:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c762:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c76a:	dade      	bge.n	801c72a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801c76c:	e7f2      	b.n	801c754 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801c76e:	d502      	bpl.n	801c776 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801c770:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c774:	e7e7      	b.n	801c746 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801c776:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c77a:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c77e:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c786:	dadc      	bge.n	801c742 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 801c788:	e7f2      	b.n	801c770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801c78a:	bf00      	nop
 801c78c:	3d800000 	.word	0x3d800000

0801c790 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c794:	2714      	movs	r7, #20
 801c796:	435f      	muls	r7, r3
 801c798:	eb02 0c07 	add.w	ip, r2, r7
 801c79c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c7a0:	f115 0e0f 	adds.w	lr, r5, #15
 801c7a4:	f100 80a2 	bmi.w	801c8ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c7a8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c7ac:	2614      	movs	r6, #20
 801c7ae:	9c08      	ldr	r4, [sp, #32]
 801c7b0:	f8c0 e014 	str.w	lr, [r0, #20]
 801c7b4:	4366      	muls	r6, r4
 801c7b6:	eb02 0806 	add.w	r8, r2, r6
 801c7ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c7be:	f115 040f 	adds.w	r4, r5, #15
 801c7c2:	f100 809f 	bmi.w	801c904 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801c7c6:	1124      	asrs	r4, r4, #4
 801c7c8:	eba4 040e 	sub.w	r4, r4, lr
 801c7cc:	6184      	str	r4, [r0, #24]
 801c7ce:	2c00      	cmp	r4, #0
 801c7d0:	f000 808a 	beq.w	801c8e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801c7d4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c7d8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c7dc:	5995      	ldr	r5, [r2, r6]
 801c7de:	eba4 0809 	sub.w	r8, r4, r9
 801c7e2:	59d4      	ldr	r4, [r2, r7]
 801c7e4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c7e8:	eba5 0a04 	sub.w	sl, r5, r4
 801c7ec:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c7f0:	fb0e fe05 	mul.w	lr, lr, r5
 801c7f4:	fb0a ee19 	mls	lr, sl, r9, lr
 801c7f8:	fb08 e404 	mla	r4, r8, r4, lr
 801c7fc:	3c01      	subs	r4, #1
 801c7fe:	19a4      	adds	r4, r4, r6
 801c800:	f100 808c 	bmi.w	801c91c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801c804:	fb94 fef6 	sdiv	lr, r4, r6
 801c808:	fb06 441e 	mls	r4, r6, lr, r4
 801c80c:	f8c0 e000 	str.w	lr, [r0]
 801c810:	6104      	str	r4, [r0, #16]
 801c812:	2d00      	cmp	r5, #0
 801c814:	f2c0 8095 	blt.w	801c942 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801c818:	fb95 f4f6 	sdiv	r4, r5, r6
 801c81c:	fb06 5514 	mls	r5, r6, r4, r5
 801c820:	6044      	str	r4, [r0, #4]
 801c822:	6085      	str	r5, [r0, #8]
 801c824:	60c6      	str	r6, [r0, #12]
 801c826:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c82a:	6945      	ldr	r5, [r0, #20]
 801c82c:	59d2      	ldr	r2, [r2, r7]
 801c82e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c832:	ee07 4a10 	vmov	s14, r4
 801c836:	6804      	ldr	r4, [r0, #0]
 801c838:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 801c964 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801c83c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c840:	ee07 2a90 	vmov	s15, r2
 801c844:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c84c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c850:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c854:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c858:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c85c:	edd3 6a00 	vldr	s13, [r3]
 801c860:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c864:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801c868:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c86c:	edc0 6a07 	vstr	s13, [r0, #28]
 801c870:	edd0 6a01 	vldr	s13, [r0, #4]
 801c874:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801c878:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c87c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c880:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c884:	ed80 6a08 	vstr	s12, [r0, #32]
 801c888:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801c88a:	6242      	str	r2, [r0, #36]	@ 0x24
 801c88c:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801c890:	ed93 6a03 	vldr	s12, [r3, #12]
 801c894:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c898:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801c89c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c8a0:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801c8a4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801c8a8:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801c8ac:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c8b0:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801c8b4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c8b6:	6302      	str	r2, [r0, #48]	@ 0x30
 801c8b8:	ed93 6a06 	vldr	s12, [r3, #24]
 801c8bc:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801c8c0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c8c4:	eeb0 7a46 	vmov.f32	s14, s12
 801c8c8:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801c8cc:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c8d0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801c8d4:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801c8d8:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801c8dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c8e0:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801c8e4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801c8e6:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801c8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8ec:	2410      	movs	r4, #16
 801c8ee:	f1c5 0501 	rsb	r5, r5, #1
 801c8f2:	f015 050f 	ands.w	r5, r5, #15
 801c8f6:	fb9e fef4 	sdiv	lr, lr, r4
 801c8fa:	bf18      	it	ne
 801c8fc:	2501      	movne	r5, #1
 801c8fe:	ebae 0e05 	sub.w	lr, lr, r5
 801c902:	e753      	b.n	801c7ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801c904:	f04f 0910 	mov.w	r9, #16
 801c908:	f1c5 0501 	rsb	r5, r5, #1
 801c90c:	f015 050f 	ands.w	r5, r5, #15
 801c910:	fb94 f4f9 	sdiv	r4, r4, r9
 801c914:	bf18      	it	ne
 801c916:	2501      	movne	r5, #1
 801c918:	1b64      	subs	r4, r4, r5
 801c91a:	e755      	b.n	801c7c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801c91c:	4264      	negs	r4, r4
 801c91e:	fb94 fef6 	sdiv	lr, r4, r6
 801c922:	fb06 441e 	mls	r4, r6, lr, r4
 801c926:	f1ce 0800 	rsb	r8, lr, #0
 801c92a:	f8c0 8000 	str.w	r8, [r0]
 801c92e:	6104      	str	r4, [r0, #16]
 801c930:	2c00      	cmp	r4, #0
 801c932:	f43f af6e 	beq.w	801c812 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801c936:	ea6f 0e0e 	mvn.w	lr, lr
 801c93a:	1b34      	subs	r4, r6, r4
 801c93c:	f8c0 e000 	str.w	lr, [r0]
 801c940:	e766      	b.n	801c810 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801c942:	426d      	negs	r5, r5
 801c944:	fb95 f4f6 	sdiv	r4, r5, r6
 801c948:	fb06 5514 	mls	r5, r6, r4, r5
 801c94c:	f1c4 0e00 	rsb	lr, r4, #0
 801c950:	f8c0 e004 	str.w	lr, [r0, #4]
 801c954:	6085      	str	r5, [r0, #8]
 801c956:	2d00      	cmp	r5, #0
 801c958:	f43f af64 	beq.w	801c824 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801c95c:	43e4      	mvns	r4, r4
 801c95e:	1b75      	subs	r5, r6, r5
 801c960:	6044      	str	r4, [r0, #4]
 801c962:	e75e      	b.n	801c822 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801c964:	3d800000 	.word	0x3d800000

0801c968 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c968:	4b01      	ldr	r3, [pc, #4]	@ (801c970 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c96a:	6018      	str	r0, [r3, #0]
 801c96c:	4770      	bx	lr
 801c96e:	bf00      	nop
 801c970:	2005bae8 	.word	0x2005bae8

0801c974 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c974:	4b06      	ldr	r3, [pc, #24]	@ (801c990 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c976:	881a      	ldrh	r2, [r3, #0]
 801c978:	4282      	cmp	r2, r0
 801c97a:	d807      	bhi.n	801c98c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c97c:	4b05      	ldr	r3, [pc, #20]	@ (801c994 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c97e:	881b      	ldrh	r3, [r3, #0]
 801c980:	4413      	add	r3, r2
 801c982:	4298      	cmp	r0, r3
 801c984:	bfac      	ite	ge
 801c986:	2000      	movge	r0, #0
 801c988:	2001      	movlt	r0, #1
 801c98a:	4770      	bx	lr
 801c98c:	2000      	movs	r0, #0
 801c98e:	4770      	bx	lr
 801c990:	2005bb08 	.word	0x2005bb08
 801c994:	2005bb0c 	.word	0x2005bb0c

0801c998 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c998:	b508      	push	{r3, lr}
 801c99a:	4601      	mov	r1, r0
 801c99c:	f7ff ffea 	bl	801c974 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c9a0:	b118      	cbz	r0, 801c9aa <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c9a2:	4b02      	ldr	r3, [pc, #8]	@ (801c9ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c9aa:	bd08      	pop	{r3, pc}
 801c9ac:	2005baec 	.word	0x2005baec

0801c9b0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9b2:	4c24      	ldr	r4, [pc, #144]	@ (801ca44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801c9b4:	6823      	ldr	r3, [r4, #0]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d042      	beq.n	801ca40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801c9ba:	4a23      	ldr	r2, [pc, #140]	@ (801ca48 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801c9bc:	4d23      	ldr	r5, [pc, #140]	@ (801ca4c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801c9be:	8811      	ldrh	r1, [r2, #0]
 801c9c0:	f8b5 c000 	ldrh.w	ip, [r5]
 801c9c4:	4822      	ldr	r0, [pc, #136]	@ (801ca50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801c9c6:	4461      	add	r1, ip
 801c9c8:	1c4a      	adds	r2, r1, #1
 801c9ca:	f022 0201 	bic.w	r2, r2, #1
 801c9ce:	008f      	lsls	r7, r1, #2
 801c9d0:	0412      	lsls	r2, r2, #16
 801c9d2:	19de      	adds	r6, r3, r7
 801c9d4:	0c12      	lsrs	r2, r2, #16
 801c9d6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801c9da:	6006      	str	r6, [r0, #0]
 801c9dc:	4e1d      	ldr	r6, [pc, #116]	@ (801ca54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801c9de:	19da      	adds	r2, r3, r7
 801c9e0:	6032      	str	r2, [r6, #0]
 801c9e2:	220e      	movs	r2, #14
 801c9e4:	fb02 f20c 	mul.w	r2, r2, ip
 801c9e8:	3203      	adds	r2, #3
 801c9ea:	f022 0203 	bic.w	r2, r2, #3
 801c9ee:	443a      	add	r2, r7
 801c9f0:	4f19      	ldr	r7, [pc, #100]	@ (801ca58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c9f2:	4413      	add	r3, r2
 801c9f4:	603b      	str	r3, [r7, #0]
 801c9f6:	2300      	movs	r3, #0
 801c9f8:	4f18      	ldr	r7, [pc, #96]	@ (801ca5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c9fa:	469c      	mov	ip, r3
 801c9fc:	803b      	strh	r3, [r7, #0]
 801c9fe:	4f18      	ldr	r7, [pc, #96]	@ (801ca60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ca00:	683f      	ldr	r7, [r7, #0]
 801ca02:	1aba      	subs	r2, r7, r2
 801ca04:	4f17      	ldr	r7, [pc, #92]	@ (801ca64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ca06:	603a      	str	r2, [r7, #0]
 801ca08:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801ca0c:	4a16      	ldr	r2, [pc, #88]	@ (801ca68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ca0e:	8013      	strh	r3, [r2, #0]
 801ca10:	428b      	cmp	r3, r1
 801ca12:	d10d      	bne.n	801ca30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801ca14:	2300      	movs	r3, #0
 801ca16:	240e      	movs	r4, #14
 801ca18:	882d      	ldrh	r5, [r5, #0]
 801ca1a:	6830      	ldr	r0, [r6, #0]
 801ca1c:	429d      	cmp	r5, r3
 801ca1e:	d90f      	bls.n	801ca40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ca20:	fb04 0203 	mla	r2, r4, r3, r0
 801ca24:	7b11      	ldrb	r1, [r2, #12]
 801ca26:	3301      	adds	r3, #1
 801ca28:	f36f 1145 	bfc	r1, #5, #1
 801ca2c:	7311      	strb	r1, [r2, #12]
 801ca2e:	e7f5      	b.n	801ca1c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801ca30:	6822      	ldr	r2, [r4, #0]
 801ca32:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ca36:	6802      	ldr	r2, [r0, #0]
 801ca38:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801ca3c:	3301      	adds	r3, #1
 801ca3e:	e7e7      	b.n	801ca10 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801ca40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca42:	bf00      	nop
 801ca44:	2005baec 	.word	0x2005baec
 801ca48:	2005bb08 	.word	0x2005bb08
 801ca4c:	2005bb0c 	.word	0x2005bb0c
 801ca50:	2005bb00 	.word	0x2005bb00
 801ca54:	2005baf0 	.word	0x2005baf0
 801ca58:	2005baf8 	.word	0x2005baf8
 801ca5c:	2005bb0a 	.word	0x2005bb0a
 801ca60:	2005baf4 	.word	0x2005baf4
 801ca64:	2005bb04 	.word	0x2005bb04
 801ca68:	2005bafc 	.word	0x2005bafc

0801ca6c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ca6c:	4b06      	ldr	r3, [pc, #24]	@ (801ca88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	b943      	cbnz	r3, 801ca84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ca72:	b139      	cbz	r1, 801ca84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ca74:	4b05      	ldr	r3, [pc, #20]	@ (801ca8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801ca76:	801a      	strh	r2, [r3, #0]
 801ca78:	4b05      	ldr	r3, [pc, #20]	@ (801ca90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801ca7a:	6019      	str	r1, [r3, #0]
 801ca7c:	4b05      	ldr	r3, [pc, #20]	@ (801ca94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801ca7e:	6018      	str	r0, [r3, #0]
 801ca80:	f7ff bf96 	b.w	801c9b0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ca84:	4770      	bx	lr
 801ca86:	bf00      	nop
 801ca88:	2005baf8 	.word	0x2005baf8
 801ca8c:	2005bb0c 	.word	0x2005bb0c
 801ca90:	2005baf4 	.word	0x2005baf4
 801ca94:	2005baec 	.word	0x2005baec

0801ca98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ca98:	b470      	push	{r4, r5, r6}
 801ca9a:	4c07      	ldr	r4, [pc, #28]	@ (801cab8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ca9c:	4605      	mov	r5, r0
 801ca9e:	6826      	ldr	r6, [r4, #0]
 801caa0:	4610      	mov	r0, r2
 801caa2:	9a03      	ldr	r2, [sp, #12]
 801caa4:	b936      	cbnz	r6, 801cab4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801caa6:	6025      	str	r5, [r4, #0]
 801caa8:	4c04      	ldr	r4, [pc, #16]	@ (801cabc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801caaa:	8021      	strh	r1, [r4, #0]
 801caac:	bc70      	pop	{r4, r5, r6}
 801caae:	4619      	mov	r1, r3
 801cab0:	f7ff bfdc 	b.w	801ca6c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801cab4:	bc70      	pop	{r4, r5, r6}
 801cab6:	4770      	bx	lr
 801cab8:	2005bb10 	.word	0x2005bb10
 801cabc:	2005bb08 	.word	0x2005bb08

0801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801cac0:	4a12      	ldr	r2, [pc, #72]	@ (801cb0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801cac2:	8803      	ldrh	r3, [r0, #0]
 801cac4:	8812      	ldrh	r2, [r2, #0]
 801cac6:	4293      	cmp	r3, r2
 801cac8:	d207      	bcs.n	801cada <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801caca:	2114      	movs	r1, #20
 801cacc:	4a10      	ldr	r2, [pc, #64]	@ (801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801cace:	6812      	ldr	r2, [r2, #0]
 801cad0:	fb01 2303 	mla	r3, r1, r3, r2
 801cad4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801cad8:	4770      	bx	lr
 801cada:	490e      	ldr	r1, [pc, #56]	@ (801cb14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801cadc:	8809      	ldrh	r1, [r1, #0]
 801cade:	4411      	add	r1, r2
 801cae0:	428b      	cmp	r3, r1
 801cae2:	da04      	bge.n	801caee <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801cae4:	1a9b      	subs	r3, r3, r2
 801cae6:	4a0c      	ldr	r2, [pc, #48]	@ (801cb18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801cae8:	210e      	movs	r1, #14
 801caea:	6812      	ldr	r2, [r2, #0]
 801caec:	e7f0      	b.n	801cad0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801caee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801caf2:	4293      	cmp	r3, r2
 801caf4:	d108      	bne.n	801cb08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801caf6:	4b09      	ldr	r3, [pc, #36]	@ (801cb1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801caf8:	781b      	ldrb	r3, [r3, #0]
 801cafa:	b91b      	cbnz	r3, 801cb04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801cafc:	4b08      	ldr	r3, [pc, #32]	@ (801cb20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801cafe:	f9b3 0000 	ldrsh.w	r0, [r3]
 801cb02:	4770      	bx	lr
 801cb04:	4b07      	ldr	r3, [pc, #28]	@ (801cb24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801cb06:	e7fa      	b.n	801cafe <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801cb08:	2000      	movs	r0, #0
 801cb0a:	4770      	bx	lr
 801cb0c:	2005bb08 	.word	0x2005bb08
 801cb10:	2005bb10 	.word	0x2005bb10
 801cb14:	2005bb0c 	.word	0x2005bb0c
 801cb18:	2005baf0 	.word	0x2005baf0
 801cb1c:	2005ba78 	.word	0x2005ba78
 801cb20:	2005ba7a 	.word	0x2005ba7a
 801cb24:	2005ba7c 	.word	0x2005ba7c

0801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801cb28:	4a12      	ldr	r2, [pc, #72]	@ (801cb74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801cb2a:	8803      	ldrh	r3, [r0, #0]
 801cb2c:	8812      	ldrh	r2, [r2, #0]
 801cb2e:	4293      	cmp	r3, r2
 801cb30:	d207      	bcs.n	801cb42 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801cb32:	2114      	movs	r1, #20
 801cb34:	4a10      	ldr	r2, [pc, #64]	@ (801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801cb36:	6812      	ldr	r2, [r2, #0]
 801cb38:	fb01 2303 	mla	r3, r1, r3, r2
 801cb3c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801cb40:	4770      	bx	lr
 801cb42:	490e      	ldr	r1, [pc, #56]	@ (801cb7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801cb44:	8809      	ldrh	r1, [r1, #0]
 801cb46:	4411      	add	r1, r2
 801cb48:	428b      	cmp	r3, r1
 801cb4a:	da04      	bge.n	801cb56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801cb4c:	1a9b      	subs	r3, r3, r2
 801cb4e:	4a0c      	ldr	r2, [pc, #48]	@ (801cb80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801cb50:	210e      	movs	r1, #14
 801cb52:	6812      	ldr	r2, [r2, #0]
 801cb54:	e7f0      	b.n	801cb38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801cb56:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cb5a:	4293      	cmp	r3, r2
 801cb5c:	d108      	bne.n	801cb70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801cb5e:	4b09      	ldr	r3, [pc, #36]	@ (801cb84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801cb60:	781b      	ldrb	r3, [r3, #0]
 801cb62:	b91b      	cbnz	r3, 801cb6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801cb64:	4b08      	ldr	r3, [pc, #32]	@ (801cb88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801cb66:	f9b3 0000 	ldrsh.w	r0, [r3]
 801cb6a:	4770      	bx	lr
 801cb6c:	4b07      	ldr	r3, [pc, #28]	@ (801cb8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801cb6e:	e7fa      	b.n	801cb66 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801cb70:	2000      	movs	r0, #0
 801cb72:	4770      	bx	lr
 801cb74:	2005bb08 	.word	0x2005bb08
 801cb78:	2005bb10 	.word	0x2005bb10
 801cb7c:	2005bb0c 	.word	0x2005bb0c
 801cb80:	2005baf0 	.word	0x2005baf0
 801cb84:	2005ba78 	.word	0x2005ba78
 801cb88:	2005ba7c 	.word	0x2005ba7c
 801cb8c:	2005ba7a 	.word	0x2005ba7a

0801cb90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801cb90:	b530      	push	{r4, r5, lr}
 801cb92:	4a22      	ldr	r2, [pc, #136]	@ (801cc1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801cb94:	880b      	ldrh	r3, [r1, #0]
 801cb96:	8812      	ldrh	r2, [r2, #0]
 801cb98:	4293      	cmp	r3, r2
 801cb9a:	d213      	bcs.n	801cbc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801cb9c:	2114      	movs	r1, #20
 801cb9e:	4a20      	ldr	r2, [pc, #128]	@ (801cc20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801cba0:	6812      	ldr	r2, [r2, #0]
 801cba2:	fb01 2303 	mla	r3, r1, r3, r2
 801cba6:	8a1a      	ldrh	r2, [r3, #16]
 801cba8:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801cbac:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801cbb0:	8a5b      	ldrh	r3, [r3, #18]
 801cbb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cbb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cbba:	8004      	strh	r4, [r0, #0]
 801cbbc:	8041      	strh	r1, [r0, #2]
 801cbbe:	8082      	strh	r2, [r0, #4]
 801cbc0:	80c3      	strh	r3, [r0, #6]
 801cbc2:	e024      	b.n	801cc0e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801cbc4:	4917      	ldr	r1, [pc, #92]	@ (801cc24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801cbc6:	8809      	ldrh	r1, [r1, #0]
 801cbc8:	4411      	add	r1, r2
 801cbca:	428b      	cmp	r3, r1
 801cbcc:	da10      	bge.n	801cbf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801cbce:	1a9b      	subs	r3, r3, r2
 801cbd0:	220e      	movs	r2, #14
 801cbd2:	4353      	muls	r3, r2
 801cbd4:	4a14      	ldr	r2, [pc, #80]	@ (801cc28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801cbd6:	6811      	ldr	r1, [r2, #0]
 801cbd8:	18ca      	adds	r2, r1, r3
 801cbda:	5ecd      	ldrsh	r5, [r1, r3]
 801cbdc:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801cbe0:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801cbe4:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801cbe8:	8005      	strh	r5, [r0, #0]
 801cbea:	8044      	strh	r4, [r0, #2]
 801cbec:	8081      	strh	r1, [r0, #4]
 801cbee:	e7e7      	b.n	801cbc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801cbf0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cbf4:	4293      	cmp	r3, r2
 801cbf6:	d10b      	bne.n	801cc10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801cbf8:	4b0c      	ldr	r3, [pc, #48]	@ (801cc2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801cbfa:	f9b3 1000 	ldrsh.w	r1, [r3]
 801cbfe:	4b0c      	ldr	r3, [pc, #48]	@ (801cc30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801cc00:	8081      	strh	r1, [r0, #4]
 801cc02:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cc06:	2300      	movs	r3, #0
 801cc08:	80c2      	strh	r2, [r0, #6]
 801cc0a:	8003      	strh	r3, [r0, #0]
 801cc0c:	8043      	strh	r3, [r0, #2]
 801cc0e:	bd30      	pop	{r4, r5, pc}
 801cc10:	2300      	movs	r3, #0
 801cc12:	8003      	strh	r3, [r0, #0]
 801cc14:	8043      	strh	r3, [r0, #2]
 801cc16:	8083      	strh	r3, [r0, #4]
 801cc18:	e7d2      	b.n	801cbc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801cc1a:	bf00      	nop
 801cc1c:	2005bb08 	.word	0x2005bb08
 801cc20:	2005bb10 	.word	0x2005bb10
 801cc24:	2005bb0c 	.word	0x2005bb0c
 801cc28:	2005baf0 	.word	0x2005baf0
 801cc2c:	2005ba74 	.word	0x2005ba74
 801cc30:	2005ba76 	.word	0x2005ba76

0801cc34 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801cc34:	4a17      	ldr	r2, [pc, #92]	@ (801cc94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801cc36:	8803      	ldrh	r3, [r0, #0]
 801cc38:	8812      	ldrh	r2, [r2, #0]
 801cc3a:	4293      	cmp	r3, r2
 801cc3c:	d213      	bcs.n	801cc66 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801cc3e:	2114      	movs	r1, #20
 801cc40:	4a15      	ldr	r2, [pc, #84]	@ (801cc98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801cc42:	6812      	ldr	r2, [r2, #0]
 801cc44:	fb01 2303 	mla	r3, r1, r3, r2
 801cc48:	8a1a      	ldrh	r2, [r3, #16]
 801cc4a:	8919      	ldrh	r1, [r3, #8]
 801cc4c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cc50:	428a      	cmp	r2, r1
 801cc52:	db1d      	blt.n	801cc90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801cc54:	8a58      	ldrh	r0, [r3, #18]
 801cc56:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801cc5a:	895b      	ldrh	r3, [r3, #10]
 801cc5c:	4298      	cmp	r0, r3
 801cc5e:	bfac      	ite	ge
 801cc60:	2000      	movge	r0, #0
 801cc62:	2001      	movlt	r0, #1
 801cc64:	4770      	bx	lr
 801cc66:	490d      	ldr	r1, [pc, #52]	@ (801cc9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801cc68:	8809      	ldrh	r1, [r1, #0]
 801cc6a:	4411      	add	r1, r2
 801cc6c:	428b      	cmp	r3, r1
 801cc6e:	da0d      	bge.n	801cc8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801cc70:	210e      	movs	r1, #14
 801cc72:	1a9b      	subs	r3, r3, r2
 801cc74:	4a0a      	ldr	r2, [pc, #40]	@ (801cca0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801cc76:	6812      	ldr	r2, [r2, #0]
 801cc78:	fb01 2303 	mla	r3, r1, r3, r2
 801cc7c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801cc80:	891a      	ldrh	r2, [r3, #8]
 801cc82:	4291      	cmp	r1, r2
 801cc84:	db04      	blt.n	801cc90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801cc86:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801cc8a:	e7e6      	b.n	801cc5a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801cc8c:	2000      	movs	r0, #0
 801cc8e:	4770      	bx	lr
 801cc90:	2001      	movs	r0, #1
 801cc92:	4770      	bx	lr
 801cc94:	2005bb08 	.word	0x2005bb08
 801cc98:	2005bb10 	.word	0x2005bb10
 801cc9c:	2005bb0c 	.word	0x2005bb0c
 801cca0:	2005baf0 	.word	0x2005baf0

0801cca4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801cca4:	4a12      	ldr	r2, [pc, #72]	@ (801ccf0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801cca6:	8803      	ldrh	r3, [r0, #0]
 801cca8:	8811      	ldrh	r1, [r2, #0]
 801ccaa:	428b      	cmp	r3, r1
 801ccac:	d20b      	bcs.n	801ccc6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801ccae:	4a11      	ldr	r2, [pc, #68]	@ (801ccf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ccb0:	6812      	ldr	r2, [r2, #0]
 801ccb2:	b112      	cbz	r2, 801ccba <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ccb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ccb8:	b9c0      	cbnz	r0, 801ccec <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801ccba:	4a0f      	ldr	r2, [pc, #60]	@ (801ccf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ccbc:	6811      	ldr	r1, [r2, #0]
 801ccbe:	2214      	movs	r2, #20
 801ccc0:	4353      	muls	r3, r2
 801ccc2:	58c8      	ldr	r0, [r1, r3]
 801ccc4:	4770      	bx	lr
 801ccc6:	4a0d      	ldr	r2, [pc, #52]	@ (801ccfc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ccc8:	8812      	ldrh	r2, [r2, #0]
 801ccca:	440a      	add	r2, r1
 801cccc:	4293      	cmp	r3, r2
 801ccce:	da04      	bge.n	801ccda <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801ccd0:	4a08      	ldr	r2, [pc, #32]	@ (801ccf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ccd2:	6812      	ldr	r2, [r2, #0]
 801ccd4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ccd8:	4770      	bx	lr
 801ccda:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ccde:	4293      	cmp	r3, r2
 801cce0:	d103      	bne.n	801ccea <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801cce2:	4b07      	ldr	r3, [pc, #28]	@ (801cd00 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801cce8:	4770      	bx	lr
 801ccea:	2000      	movs	r0, #0
 801ccec:	4770      	bx	lr
 801ccee:	bf00      	nop
 801ccf0:	2005bb08 	.word	0x2005bb08
 801ccf4:	2005baec 	.word	0x2005baec
 801ccf8:	2005bb10 	.word	0x2005bb10
 801ccfc:	2005bb0c 	.word	0x2005bb0c
 801cd00:	2005ba80 	.word	0x2005ba80

0801cd04 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801cd04:	4b24      	ldr	r3, [pc, #144]	@ (801cd98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801cd06:	8802      	ldrh	r2, [r0, #0]
 801cd08:	8818      	ldrh	r0, [r3, #0]
 801cd0a:	4282      	cmp	r2, r0
 801cd0c:	d221      	bcs.n	801cd52 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801cd0e:	4b23      	ldr	r3, [pc, #140]	@ (801cd9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801cd10:	6819      	ldr	r1, [r3, #0]
 801cd12:	2314      	movs	r3, #20
 801cd14:	fb03 1302 	mla	r3, r3, r2, r1
 801cd18:	6858      	ldr	r0, [r3, #4]
 801cd1a:	2800      	cmp	r0, #0
 801cd1c:	d03a      	beq.n	801cd94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cd1e:	4920      	ldr	r1, [pc, #128]	@ (801cda0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cd20:	6809      	ldr	r1, [r1, #0]
 801cd22:	2900      	cmp	r1, #0
 801cd24:	d036      	beq.n	801cd94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cd26:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cd2a:	2900      	cmp	r1, #0
 801cd2c:	d032      	beq.n	801cd94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cd2e:	891a      	ldrh	r2, [r3, #8]
 801cd30:	8958      	ldrh	r0, [r3, #10]
 801cd32:	4350      	muls	r0, r2
 801cd34:	7c5a      	ldrb	r2, [r3, #17]
 801cd36:	7cdb      	ldrb	r3, [r3, #19]
 801cd38:	0952      	lsrs	r2, r2, #5
 801cd3a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801cd3e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801cd42:	2b0b      	cmp	r3, #11
 801cd44:	bf18      	it	ne
 801cd46:	0040      	lslne	r0, r0, #1
 801cd48:	3003      	adds	r0, #3
 801cd4a:	f020 0003 	bic.w	r0, r0, #3
 801cd4e:	4408      	add	r0, r1
 801cd50:	4770      	bx	lr
 801cd52:	4b14      	ldr	r3, [pc, #80]	@ (801cda4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801cd54:	881b      	ldrh	r3, [r3, #0]
 801cd56:	4403      	add	r3, r0
 801cd58:	429a      	cmp	r2, r3
 801cd5a:	da1a      	bge.n	801cd92 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cd5c:	210e      	movs	r1, #14
 801cd5e:	4b12      	ldr	r3, [pc, #72]	@ (801cda8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cd60:	1a10      	subs	r0, r2, r0
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	fb01 3000 	mla	r0, r1, r0, r3
 801cd68:	7b03      	ldrb	r3, [r0, #12]
 801cd6a:	f003 031f 	and.w	r3, r3, #31
 801cd6e:	2b0b      	cmp	r3, #11
 801cd70:	d10b      	bne.n	801cd8a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801cd72:	8903      	ldrh	r3, [r0, #8]
 801cd74:	8940      	ldrh	r0, [r0, #10]
 801cd76:	4358      	muls	r0, r3
 801cd78:	4b09      	ldr	r3, [pc, #36]	@ (801cda0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cd7a:	3003      	adds	r0, #3
 801cd7c:	6819      	ldr	r1, [r3, #0]
 801cd7e:	f020 0303 	bic.w	r3, r0, #3
 801cd82:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801cd86:	4418      	add	r0, r3
 801cd88:	4770      	bx	lr
 801cd8a:	2b0d      	cmp	r3, #13
 801cd8c:	d101      	bne.n	801cd92 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cd8e:	300d      	adds	r0, #13
 801cd90:	4770      	bx	lr
 801cd92:	2000      	movs	r0, #0
 801cd94:	4770      	bx	lr
 801cd96:	bf00      	nop
 801cd98:	2005bb08 	.word	0x2005bb08
 801cd9c:	2005bb10 	.word	0x2005bb10
 801cda0:	2005baec 	.word	0x2005baec
 801cda4:	2005bb0c 	.word	0x2005bb0c
 801cda8:	2005baf0 	.word	0x2005baf0

0801cdac <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801cdac:	b510      	push	{r4, lr}
 801cdae:	4b1f      	ldr	r3, [pc, #124]	@ (801ce2c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801cdb0:	8802      	ldrh	r2, [r0, #0]
 801cdb2:	881b      	ldrh	r3, [r3, #0]
 801cdb4:	429a      	cmp	r2, r3
 801cdb6:	d21a      	bcs.n	801cdee <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801cdb8:	2114      	movs	r1, #20
 801cdba:	4b1d      	ldr	r3, [pc, #116]	@ (801ce30 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	fb01 3102 	mla	r1, r1, r2, r3
 801cdc2:	7c4b      	ldrb	r3, [r1, #17]
 801cdc4:	0958      	lsrs	r0, r3, #5
 801cdc6:	7ccb      	ldrb	r3, [r1, #19]
 801cdc8:	491a      	ldr	r1, [pc, #104]	@ (801ce34 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801cdca:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801cdce:	6809      	ldr	r1, [r1, #0]
 801cdd0:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801cdd4:	b2d8      	uxtb	r0, r3
 801cdd6:	b149      	cbz	r1, 801cdec <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801cdd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801cddc:	b132      	cbz	r2, 801cdec <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801cdde:	2b0e      	cmp	r3, #14
 801cde0:	d021      	beq.n	801ce26 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801cde2:	280f      	cmp	r0, #15
 801cde4:	d01d      	beq.n	801ce22 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801cde6:	2810      	cmp	r0, #16
 801cde8:	bf08      	it	eq
 801cdea:	2002      	moveq	r0, #2
 801cdec:	bd10      	pop	{r4, pc}
 801cdee:	4912      	ldr	r1, [pc, #72]	@ (801ce38 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801cdf0:	8809      	ldrh	r1, [r1, #0]
 801cdf2:	4419      	add	r1, r3
 801cdf4:	428a      	cmp	r2, r1
 801cdf6:	da09      	bge.n	801ce0c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801cdf8:	210e      	movs	r1, #14
 801cdfa:	1ad3      	subs	r3, r2, r3
 801cdfc:	4a0f      	ldr	r2, [pc, #60]	@ (801ce3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801cdfe:	6812      	ldr	r2, [r2, #0]
 801ce00:	fb01 2303 	mla	r3, r1, r3, r2
 801ce04:	7b18      	ldrb	r0, [r3, #12]
 801ce06:	f000 001f 	and.w	r0, r0, #31
 801ce0a:	e7ef      	b.n	801cdec <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ce0c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801ce10:	429a      	cmp	r2, r3
 801ce12:	d108      	bne.n	801ce26 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801ce14:	f7f2 fdb8 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 801ce18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce1c:	6803      	ldr	r3, [r0, #0]
 801ce1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce20:	4718      	bx	r3
 801ce22:	2001      	movs	r0, #1
 801ce24:	e7e2      	b.n	801cdec <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ce26:	2000      	movs	r0, #0
 801ce28:	e7e0      	b.n	801cdec <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ce2a:	bf00      	nop
 801ce2c:	2005bb08 	.word	0x2005bb08
 801ce30:	2005bb10 	.word	0x2005bb10
 801ce34:	2005baec 	.word	0x2005baec
 801ce38:	2005bb0c 	.word	0x2005bb0c
 801ce3c:	2005baf0 	.word	0x2005baf0

0801ce40 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801ce40:	2010      	movs	r0, #16
 801ce42:	4770      	bx	lr

0801ce44 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801ce44:	2000      	movs	r0, #0
 801ce46:	4770      	bx	lr

0801ce48 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801ce48:	4b02      	ldr	r3, [pc, #8]	@ (801ce54 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801ce4a:	8818      	ldrh	r0, [r3, #0]
 801ce4c:	0040      	lsls	r0, r0, #1
 801ce4e:	b280      	uxth	r0, r0
 801ce50:	4770      	bx	lr
 801ce52:	bf00      	nop
 801ce54:	2005ba7a 	.word	0x2005ba7a

0801ce58 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ce58:	2bff      	cmp	r3, #255	@ 0xff
 801ce5a:	d05e      	beq.n	801cf1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 801ce5c:	2a0b      	cmp	r2, #11
 801ce5e:	d058      	beq.n	801cf12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801ce60:	d80e      	bhi.n	801ce80 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ce62:	2a03      	cmp	r2, #3
 801ce64:	d04d      	beq.n	801cf02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801ce66:	d804      	bhi.n	801ce72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce68:	2a01      	cmp	r2, #1
 801ce6a:	d04c      	beq.n	801cf06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 801ce6c:	d94d      	bls.n	801cf0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 801ce6e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801ce70:	e031      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ce72:	2a09      	cmp	r2, #9
 801ce74:	d04d      	beq.n	801cf12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801ce76:	d84a      	bhi.n	801cf0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801ce78:	2a08      	cmp	r2, #8
 801ce7a:	d048      	beq.n	801cf0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801ce7c:	2300      	movs	r3, #0
 801ce7e:	e02a      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ce80:	2a2f      	cmp	r2, #47	@ 0x2f
 801ce82:	d02c      	beq.n	801cede <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801ce84:	d811      	bhi.n	801ceaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801ce86:	2a2d      	cmp	r2, #45	@ 0x2d
 801ce88:	d018      	beq.n	801cebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 801ce8a:	d831      	bhi.n	801cef0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 801ce8c:	2a2c      	cmp	r2, #44	@ 0x2c
 801ce8e:	d1f5      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce90:	684a      	ldr	r2, [r1, #4]
 801ce92:	7813      	ldrb	r3, [r2, #0]
 801ce94:	7852      	ldrb	r2, [r2, #1]
 801ce96:	2a00      	cmp	r2, #0
 801ce98:	d1f0      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce9a:	2b01      	cmp	r3, #1
 801ce9c:	d01d      	beq.n	801ceda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d02d      	beq.n	801cefe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801cea2:	2b02      	cmp	r3, #2
 801cea4:	d1ea      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cea6:	68c3      	ldr	r3, [r0, #12]
 801cea8:	e015      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ceaa:	2a31      	cmp	r2, #49	@ 0x31
 801ceac:	d004      	beq.n	801ceb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801ceae:	d332      	bcc.n	801cf16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801ceb0:	2a32      	cmp	r2, #50	@ 0x32
 801ceb2:	d030      	beq.n	801cf16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801ceb4:	2a33      	cmp	r2, #51	@ 0x33
 801ceb6:	d1e1      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ceb8:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801ceba:	e00c      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cebc:	684a      	ldr	r2, [r1, #4]
 801cebe:	7813      	ldrb	r3, [r2, #0]
 801cec0:	7852      	ldrb	r2, [r2, #1]
 801cec2:	2a00      	cmp	r2, #0
 801cec4:	d1da      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cec6:	2b01      	cmp	r3, #1
 801cec8:	d004      	beq.n	801ced4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 801ceca:	d30f      	bcc.n	801ceec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 801cecc:	2b02      	cmp	r3, #2
 801cece:	d1d5      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ced0:	6943      	ldr	r3, [r0, #20]
 801ced2:	e000      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ced4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ced6:	4618      	mov	r0, r3
 801ced8:	4770      	bx	lr
 801ceda:	69c3      	ldr	r3, [r0, #28]
 801cedc:	e7fb      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cede:	684b      	ldr	r3, [r1, #4]
 801cee0:	781a      	ldrb	r2, [r3, #0]
 801cee2:	785b      	ldrb	r3, [r3, #1]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d1c9      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cee8:	2a00      	cmp	r2, #0
 801ceea:	d1f4      	bne.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ceec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801ceee:	e7f2      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cef0:	684b      	ldr	r3, [r1, #4]
 801cef2:	781a      	ldrb	r2, [r3, #0]
 801cef4:	785b      	ldrb	r3, [r3, #1]
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d1c0      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cefa:	2a00      	cmp	r2, #0
 801cefc:	d1eb      	bne.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cefe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801cf00:	e7e9      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf02:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801cf04:	e7e7      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf06:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801cf08:	e7e5      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf0a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801cf0c:	e7e3      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf0e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801cf10:	e7e1      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf12:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801cf14:	e7df      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf16:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801cf18:	e7dd      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf1a:	2a0b      	cmp	r2, #11
 801cf1c:	d059      	beq.n	801cfd2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801cf1e:	d80e      	bhi.n	801cf3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 801cf20:	2a03      	cmp	r2, #3
 801cf22:	d050      	beq.n	801cfc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801cf24:	d804      	bhi.n	801cf30 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801cf26:	2a01      	cmp	r2, #1
 801cf28:	d04f      	beq.n	801cfca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801cf2a:	d950      	bls.n	801cfce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801cf2c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801cf2e:	e7d2      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf30:	2a09      	cmp	r2, #9
 801cf32:	d04e      	beq.n	801cfd2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801cf34:	d801      	bhi.n	801cf3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801cf36:	2a08      	cmp	r2, #8
 801cf38:	d1a0      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf3a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801cf3c:	e7cb      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf3e:	2a2f      	cmp	r2, #47	@ 0x2f
 801cf40:	d02d      	beq.n	801cf9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801cf42:	d811      	bhi.n	801cf68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801cf44:	2a2d      	cmp	r2, #45	@ 0x2d
 801cf46:	d018      	beq.n	801cf7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801cf48:	d833      	bhi.n	801cfb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 801cf4a:	2a2c      	cmp	r2, #44	@ 0x2c
 801cf4c:	d196      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf4e:	684a      	ldr	r2, [r1, #4]
 801cf50:	7813      	ldrb	r3, [r2, #0]
 801cf52:	7852      	ldrb	r2, [r2, #1]
 801cf54:	2a00      	cmp	r2, #0
 801cf56:	d191      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf58:	2b01      	cmp	r3, #1
 801cf5a:	d01e      	beq.n	801cf9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d030      	beq.n	801cfc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 801cf60:	2b02      	cmp	r3, #2
 801cf62:	d18b      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf64:	6903      	ldr	r3, [r0, #16]
 801cf66:	e7b6      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf68:	2a31      	cmp	r2, #49	@ 0x31
 801cf6a:	d004      	beq.n	801cf76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 801cf6c:	d333      	bcc.n	801cfd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801cf6e:	2a32      	cmp	r2, #50	@ 0x32
 801cf70:	d031      	beq.n	801cfd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801cf72:	2a33      	cmp	r2, #51	@ 0x33
 801cf74:	d182      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf76:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801cf78:	e7ad      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf7a:	684a      	ldr	r2, [r1, #4]
 801cf7c:	7813      	ldrb	r3, [r2, #0]
 801cf7e:	7852      	ldrb	r2, [r2, #1]
 801cf80:	2a00      	cmp	r2, #0
 801cf82:	f47f af7b 	bne.w	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf86:	2b01      	cmp	r3, #1
 801cf88:	d005      	beq.n	801cf96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cf8a:	d310      	bcc.n	801cfae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 801cf8c:	2b02      	cmp	r3, #2
 801cf8e:	f47f af75 	bne.w	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf92:	6983      	ldr	r3, [r0, #24]
 801cf94:	e79f      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf96:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801cf98:	e79d      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf9a:	6a03      	ldr	r3, [r0, #32]
 801cf9c:	e79b      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf9e:	684b      	ldr	r3, [r1, #4]
 801cfa0:	781a      	ldrb	r2, [r3, #0]
 801cfa2:	785b      	ldrb	r3, [r3, #1]
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	f47f af69 	bne.w	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfaa:	2a00      	cmp	r2, #0
 801cfac:	d193      	bne.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfae:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801cfb0:	e791      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfb2:	684b      	ldr	r3, [r1, #4]
 801cfb4:	781a      	ldrb	r2, [r3, #0]
 801cfb6:	785b      	ldrb	r3, [r3, #1]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	f47f af5f 	bne.w	801ce7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfbe:	2a00      	cmp	r2, #0
 801cfc0:	d189      	bne.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfc2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cfc4:	e787      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfc6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801cfc8:	e785      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfca:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801cfcc:	e783      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfce:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801cfd0:	e781      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfd2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801cfd4:	e77f      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfd6:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801cfd8:	e77d      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801cfda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfde:	b087      	sub	sp, #28
 801cfe0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801cfe2:	9101      	str	r1, [sp, #4]
 801cfe4:	9205      	str	r2, [sp, #20]
 801cfe6:	6841      	ldr	r1, [r0, #4]
 801cfe8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801cfec:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801cff0:	9202      	str	r2, [sp, #8]
 801cff2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801cff6:	fb01 2404 	mla	r4, r1, r4, r2
 801cffa:	6802      	ldr	r2, [r0, #0]
 801cffc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d000:	f8de 2000 	ldr.w	r2, [lr]
 801d004:	9203      	str	r2, [sp, #12]
 801d006:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d00a:	3204      	adds	r2, #4
 801d00c:	9204      	str	r2, [sp, #16]
 801d00e:	9a02      	ldr	r2, [sp, #8]
 801d010:	43d6      	mvns	r6, r2
 801d012:	b2f6      	uxtb	r6, r6
 801d014:	9a01      	ldr	r2, [sp, #4]
 801d016:	2a00      	cmp	r2, #0
 801d018:	dc03      	bgt.n	801d022 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d01a:	9a05      	ldr	r2, [sp, #20]
 801d01c:	2a00      	cmp	r2, #0
 801d01e:	f340 8129 	ble.w	801d274 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d022:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d024:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801d028:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d02c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d02e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801d032:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d036:	2b00      	cmp	r3, #0
 801d038:	dd0e      	ble.n	801d058 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d03a:	1408      	asrs	r0, r1, #16
 801d03c:	d405      	bmi.n	801d04a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d03e:	4560      	cmp	r0, ip
 801d040:	da03      	bge.n	801d04a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d042:	1410      	asrs	r0, r2, #16
 801d044:	d401      	bmi.n	801d04a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d046:	42b8      	cmp	r0, r7
 801d048:	db07      	blt.n	801d05a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d04a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d04c:	3b01      	subs	r3, #1
 801d04e:	4401      	add	r1, r0
 801d050:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d052:	3402      	adds	r4, #2
 801d054:	4402      	add	r2, r0
 801d056:	e7ee      	b.n	801d036 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d058:	d071      	beq.n	801d13e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d05a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d05c:	1e58      	subs	r0, r3, #1
 801d05e:	fb05 1500 	mla	r5, r5, r0, r1
 801d062:	142d      	asrs	r5, r5, #16
 801d064:	d45f      	bmi.n	801d126 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d066:	4565      	cmp	r5, ip
 801d068:	da5d      	bge.n	801d126 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d06a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d06c:	fb05 2000 	mla	r0, r5, r0, r2
 801d070:	1400      	asrs	r0, r0, #16
 801d072:	d458      	bmi.n	801d126 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d074:	42b8      	cmp	r0, r7
 801d076:	da56      	bge.n	801d126 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d078:	4699      	mov	r9, r3
 801d07a:	46a2      	mov	sl, r4
 801d07c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801d080:	f1b9 0f00 	cmp.w	r9, #0
 801d084:	dd57      	ble.n	801d136 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d086:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d08a:	9803      	ldr	r0, [sp, #12]
 801d08c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d090:	fb07 000c 	mla	r0, r7, ip, r0
 801d094:	140d      	asrs	r5, r1, #16
 801d096:	5d40      	ldrb	r0, [r0, r5]
 801d098:	9d04      	ldr	r5, [sp, #16]
 801d09a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d09e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d0a2:	f8ba 5000 	ldrh.w	r5, [sl]
 801d0a6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d0aa:	122f      	asrs	r7, r5, #8
 801d0ac:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d0b0:	fb17 f706 	smulbb	r7, r7, r6
 801d0b4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d0b8:	00ed      	lsls	r5, r5, #3
 801d0ba:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801d0be:	b2ed      	uxtb	r5, r5
 801d0c0:	fb18 f806 	smulbb	r8, r8, r6
 801d0c4:	fb15 f506 	smulbb	r5, r5, r6
 801d0c8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d0cc:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d0d0:	10c7      	asrs	r7, r0, #3
 801d0d2:	00c0      	lsls	r0, r0, #3
 801d0d4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d0d8:	b2c0      	uxtb	r0, r0
 801d0da:	fb07 870b 	mla	r7, r7, fp, r8
 801d0de:	fb00 500b 	mla	r0, r0, fp, r5
 801d0e2:	fa1f fc8c 	uxth.w	ip, ip
 801d0e6:	b280      	uxth	r0, r0
 801d0e8:	b2bf      	uxth	r7, r7
 801d0ea:	f10c 0501 	add.w	r5, ip, #1
 801d0ee:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d0f2:	f107 0801 	add.w	r8, r7, #1
 801d0f6:	1c45      	adds	r5, r0, #1
 801d0f8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d0fc:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d100:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d102:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d106:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d10a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d10e:	ea45 0c0c 	orr.w	ip, r5, ip
 801d112:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801d116:	4401      	add	r1, r0
 801d118:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d11a:	ea4c 0c08 	orr.w	ip, ip, r8
 801d11e:	f82a cb02 	strh.w	ip, [sl], #2
 801d122:	4402      	add	r2, r0
 801d124:	e7ac      	b.n	801d080 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d126:	f04f 0800 	mov.w	r8, #0
 801d12a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801d12e:	eb03 0008 	add.w	r0, r3, r8
 801d132:	2800      	cmp	r0, #0
 801d134:	dc41      	bgt.n	801d1ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d136:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d13a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d13e:	9b01      	ldr	r3, [sp, #4]
 801d140:	2b00      	cmp	r3, #0
 801d142:	f340 8097 	ble.w	801d274 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d146:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d14a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d14e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d152:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d156:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d15a:	eef0 6a62 	vmov.f32	s13, s5
 801d15e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d162:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d166:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d16a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d16e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d172:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801d176:	eef0 6a43 	vmov.f32	s13, s6
 801d17a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d17e:	ee12 2a90 	vmov	r2, s5
 801d182:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d186:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d188:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d18c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d190:	ee13 2a10 	vmov	r2, s6
 801d194:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d196:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d198:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801d19c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1a0:	9314      	str	r3, [sp, #80]	@ 0x50
 801d1a2:	9b01      	ldr	r3, [sp, #4]
 801d1a4:	9a05      	ldr	r2, [sp, #20]
 801d1a6:	3b01      	subs	r3, #1
 801d1a8:	9301      	str	r3, [sp, #4]
 801d1aa:	eeb0 3a67 	vmov.f32	s6, s15
 801d1ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d1b0:	eef0 2a47 	vmov.f32	s5, s14
 801d1b4:	bf08      	it	eq
 801d1b6:	4613      	moveq	r3, r2
 801d1b8:	e72c      	b.n	801d014 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d1ba:	140f      	asrs	r7, r1, #16
 801d1bc:	d453      	bmi.n	801d266 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d1be:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d1c2:	42bd      	cmp	r5, r7
 801d1c4:	dd4f      	ble.n	801d266 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d1c6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d1ca:	d44c      	bmi.n	801d266 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d1cc:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d1d0:	4560      	cmp	r0, ip
 801d1d2:	dd48      	ble.n	801d266 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d1d4:	9803      	ldr	r0, [sp, #12]
 801d1d6:	b22d      	sxth	r5, r5
 801d1d8:	fb0c 0505 	mla	r5, ip, r5, r0
 801d1dc:	5de8      	ldrb	r0, [r5, r7]
 801d1de:	9d04      	ldr	r5, [sp, #16]
 801d1e0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d1e4:	f06f 0501 	mvn.w	r5, #1
 801d1e8:	fb05 fb08 	mul.w	fp, r5, r8
 801d1ec:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d1f0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d1f4:	122f      	asrs	r7, r5, #8
 801d1f6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d1fa:	fb17 f706 	smulbb	r7, r7, r6
 801d1fe:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d202:	00ed      	lsls	r5, r5, #3
 801d204:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801d208:	b2ed      	uxtb	r5, r5
 801d20a:	fb19 f906 	smulbb	r9, r9, r6
 801d20e:	fb15 f506 	smulbb	r5, r5, r6
 801d212:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d216:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d21a:	10c7      	asrs	r7, r0, #3
 801d21c:	00c0      	lsls	r0, r0, #3
 801d21e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d222:	b2c0      	uxtb	r0, r0
 801d224:	fb07 970a 	mla	r7, r7, sl, r9
 801d228:	fb00 500a 	mla	r0, r0, sl, r5
 801d22c:	fa1f fc8c 	uxth.w	ip, ip
 801d230:	b2bf      	uxth	r7, r7
 801d232:	b280      	uxth	r0, r0
 801d234:	f10c 0501 	add.w	r5, ip, #1
 801d238:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d23c:	f107 0901 	add.w	r9, r7, #1
 801d240:	1c45      	adds	r5, r0, #1
 801d242:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d246:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d24a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d24e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d252:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d256:	ea45 0c0c 	orr.w	ip, r5, ip
 801d25a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801d25e:	ea4c 0c09 	orr.w	ip, ip, r9
 801d262:	f824 c00b 	strh.w	ip, [r4, fp]
 801d266:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d268:	f108 38ff 	add.w	r8, r8, #4294967295
 801d26c:	4401      	add	r1, r0
 801d26e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d270:	4402      	add	r2, r0
 801d272:	e75c      	b.n	801d12e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d274:	b007      	add	sp, #28
 801d276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d27a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d27a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d27e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d282:	b085      	sub	sp, #20
 801d284:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d286:	4693      	mov	fp, r2
 801d288:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d28c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801d290:	6870      	ldr	r0, [r6, #4]
 801d292:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801d294:	fb00 2404 	mla	r4, r0, r4, r2
 801d298:	6832      	ldr	r2, [r6, #0]
 801d29a:	9100      	str	r1, [sp, #0]
 801d29c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d2a0:	682a      	ldr	r2, [r5, #0]
 801d2a2:	9201      	str	r2, [sp, #4]
 801d2a4:	686a      	ldr	r2, [r5, #4]
 801d2a6:	3204      	adds	r2, #4
 801d2a8:	9202      	str	r2, [sp, #8]
 801d2aa:	9a00      	ldr	r2, [sp, #0]
 801d2ac:	2a00      	cmp	r2, #0
 801d2ae:	dc03      	bgt.n	801d2b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d2b0:	f1bb 0f00 	cmp.w	fp, #0
 801d2b4:	f340 80a0 	ble.w	801d3f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d2b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d2ba:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d2be:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d2c2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d2c4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d2c8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d2cc:	2b00      	cmp	r3, #0
 801d2ce:	dd0c      	ble.n	801d2ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d2d0:	1406      	asrs	r6, r0, #16
 801d2d2:	d405      	bmi.n	801d2e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d2d4:	454e      	cmp	r6, r9
 801d2d6:	da03      	bge.n	801d2e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d2d8:	1416      	asrs	r6, r2, #16
 801d2da:	d401      	bmi.n	801d2e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d2dc:	4546      	cmp	r6, r8
 801d2de:	db05      	blt.n	801d2ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d2e0:	4470      	add	r0, lr
 801d2e2:	4462      	add	r2, ip
 801d2e4:	3b01      	subs	r3, #1
 801d2e6:	3402      	adds	r4, #2
 801d2e8:	e7f0      	b.n	801d2cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d2ea:	d00f      	beq.n	801d30c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d2ec:	1e5e      	subs	r6, r3, #1
 801d2ee:	fb0e 0706 	mla	r7, lr, r6, r0
 801d2f2:	143f      	asrs	r7, r7, #16
 801d2f4:	d541      	bpl.n	801d37a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801d2f6:	4698      	mov	r8, r3
 801d2f8:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d2fc:	9603      	str	r6, [sp, #12]
 801d2fe:	f1b8 0f00 	cmp.w	r8, #0
 801d302:	dc59      	bgt.n	801d3b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d304:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d308:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d30c:	9b00      	ldr	r3, [sp, #0]
 801d30e:	2b00      	cmp	r3, #0
 801d310:	dd72      	ble.n	801d3f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d312:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d316:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d31a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d31e:	eeb0 6a62 	vmov.f32	s12, s5
 801d322:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d326:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d32a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d32e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d332:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d336:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d33a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d33e:	eeb0 6a43 	vmov.f32	s12, s6
 801d342:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d346:	ee12 2a90 	vmov	r2, s5
 801d34a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d34e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d350:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d354:	fb92 fef3 	sdiv	lr, r2, r3
 801d358:	ee13 2a10 	vmov	r2, s6
 801d35c:	fb92 fcf3 	sdiv	ip, r2, r3
 801d360:	9b00      	ldr	r3, [sp, #0]
 801d362:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d366:	3b01      	subs	r3, #1
 801d368:	9300      	str	r3, [sp, #0]
 801d36a:	eeb0 3a67 	vmov.f32	s6, s15
 801d36e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d370:	eef0 2a47 	vmov.f32	s5, s14
 801d374:	bf08      	it	eq
 801d376:	465b      	moveq	r3, fp
 801d378:	e797      	b.n	801d2aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d37a:	454f      	cmp	r7, r9
 801d37c:	dabb      	bge.n	801d2f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d37e:	fb0c 2606 	mla	r6, ip, r6, r2
 801d382:	1436      	asrs	r6, r6, #16
 801d384:	d4b7      	bmi.n	801d2f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d386:	4546      	cmp	r6, r8
 801d388:	dab5      	bge.n	801d2f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d38a:	461e      	mov	r6, r3
 801d38c:	46a0      	mov	r8, r4
 801d38e:	2e00      	cmp	r6, #0
 801d390:	ddb8      	ble.n	801d304 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d392:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d396:	9901      	ldr	r1, [sp, #4]
 801d398:	1417      	asrs	r7, r2, #16
 801d39a:	fb0a 1707 	mla	r7, sl, r7, r1
 801d39e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d3a2:	f817 7009 	ldrb.w	r7, [r7, r9]
 801d3a6:	9902      	ldr	r1, [sp, #8]
 801d3a8:	4470      	add	r0, lr
 801d3aa:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d3ae:	4462      	add	r2, ip
 801d3b0:	f828 7b02 	strh.w	r7, [r8], #2
 801d3b4:	3e01      	subs	r6, #1
 801d3b6:	e7ea      	b.n	801d38e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d3b8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d3bc:	d417      	bmi.n	801d3ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d3be:	68ae      	ldr	r6, [r5, #8]
 801d3c0:	454e      	cmp	r6, r9
 801d3c2:	dd14      	ble.n	801d3ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d3c4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d3c8:	d411      	bmi.n	801d3ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d3ca:	68ef      	ldr	r7, [r5, #12]
 801d3cc:	4557      	cmp	r7, sl
 801d3ce:	dd0e      	ble.n	801d3ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d3d0:	f06f 0101 	mvn.w	r1, #1
 801d3d4:	9f01      	ldr	r7, [sp, #4]
 801d3d6:	b236      	sxth	r6, r6
 801d3d8:	fb0a 7606 	mla	r6, sl, r6, r7
 801d3dc:	9f02      	ldr	r7, [sp, #8]
 801d3de:	f816 6009 	ldrb.w	r6, [r6, r9]
 801d3e2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d3e6:	fb01 f608 	mul.w	r6, r1, r8
 801d3ea:	9903      	ldr	r1, [sp, #12]
 801d3ec:	538f      	strh	r7, [r1, r6]
 801d3ee:	4470      	add	r0, lr
 801d3f0:	4462      	add	r2, ip
 801d3f2:	f108 38ff 	add.w	r8, r8, #4294967295
 801d3f6:	e782      	b.n	801d2fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d3f8:	b005      	add	sp, #20
 801d3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d3fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d3fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d402:	b087      	sub	sp, #28
 801d404:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d406:	9102      	str	r1, [sp, #8]
 801d408:	9205      	str	r2, [sp, #20]
 801d40a:	6861      	ldr	r1, [r4, #4]
 801d40c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d410:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801d414:	9203      	str	r2, [sp, #12]
 801d416:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801d41a:	fb01 2000 	mla	r0, r1, r0, r2
 801d41e:	6822      	ldr	r2, [r4, #0]
 801d420:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801d424:	9200      	str	r2, [sp, #0]
 801d426:	f8dc 2000 	ldr.w	r2, [ip]
 801d42a:	9204      	str	r2, [sp, #16]
 801d42c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d430:	3204      	adds	r2, #4
 801d432:	9201      	str	r2, [sp, #4]
 801d434:	9a03      	ldr	r2, [sp, #12]
 801d436:	43d5      	mvns	r5, r2
 801d438:	b2ed      	uxtb	r5, r5
 801d43a:	9a02      	ldr	r2, [sp, #8]
 801d43c:	2a00      	cmp	r2, #0
 801d43e:	dc03      	bgt.n	801d448 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d440:	9a05      	ldr	r2, [sp, #20]
 801d442:	2a00      	cmp	r2, #0
 801d444:	f340 812c 	ble.w	801d6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d448:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d44a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d44e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d452:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d454:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d458:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	dd10      	ble.n	801d482 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d460:	140c      	asrs	r4, r1, #16
 801d462:	d405      	bmi.n	801d470 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d464:	4574      	cmp	r4, lr
 801d466:	da03      	bge.n	801d470 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d468:	1414      	asrs	r4, r2, #16
 801d46a:	d401      	bmi.n	801d470 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d46c:	42bc      	cmp	r4, r7
 801d46e:	db09      	blt.n	801d484 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d470:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d472:	9800      	ldr	r0, [sp, #0]
 801d474:	4421      	add	r1, r4
 801d476:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d478:	3002      	adds	r0, #2
 801d47a:	4422      	add	r2, r4
 801d47c:	3b01      	subs	r3, #1
 801d47e:	9000      	str	r0, [sp, #0]
 801d480:	e7ec      	b.n	801d45c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d482:	d071      	beq.n	801d568 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801d484:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d486:	1e5c      	subs	r4, r3, #1
 801d488:	fb06 1604 	mla	r6, r6, r4, r1
 801d48c:	1436      	asrs	r6, r6, #16
 801d48e:	d45d      	bmi.n	801d54c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d490:	4576      	cmp	r6, lr
 801d492:	da5b      	bge.n	801d54c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d494:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d496:	fb06 2404 	mla	r4, r6, r4, r2
 801d49a:	1424      	asrs	r4, r4, #16
 801d49c:	d456      	bmi.n	801d54c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d49e:	42bc      	cmp	r4, r7
 801d4a0:	da54      	bge.n	801d54c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d4a2:	4698      	mov	r8, r3
 801d4a4:	f8dd 9000 	ldr.w	r9, [sp]
 801d4a8:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801d4ac:	f1b8 0f00 	cmp.w	r8, #0
 801d4b0:	dd54      	ble.n	801d55c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d4b2:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d4b6:	9804      	ldr	r0, [sp, #16]
 801d4b8:	1414      	asrs	r4, r2, #16
 801d4ba:	fb07 0404 	mla	r4, r7, r4, r0
 801d4be:	140e      	asrs	r6, r1, #16
 801d4c0:	f814 e006 	ldrb.w	lr, [r4, r6]
 801d4c4:	9801      	ldr	r0, [sp, #4]
 801d4c6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d4ca:	eb00 0b0e 	add.w	fp, r0, lr
 801d4ce:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d4d2:	f8b9 4000 	ldrh.w	r4, [r9]
 801d4d6:	fb16 f60a 	smulbb	r6, r6, sl
 801d4da:	1227      	asrs	r7, r4, #8
 801d4dc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d4e0:	fb07 6705 	mla	r7, r7, r5, r6
 801d4e4:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d4e8:	10e6      	asrs	r6, r4, #3
 801d4ea:	00e4      	lsls	r4, r4, #3
 801d4ec:	b2e4      	uxtb	r4, r4
 801d4ee:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4f2:	fb14 f405 	smulbb	r4, r4, r5
 801d4f6:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801d4fa:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d4fe:	fb06 b605 	mla	r6, r6, r5, fp
 801d502:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801d506:	b2bf      	uxth	r7, r7
 801d508:	b2b6      	uxth	r6, r6
 801d50a:	fa1f fe8e 	uxth.w	lr, lr
 801d50e:	1c7c      	adds	r4, r7, #1
 801d510:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d514:	f106 0b01 	add.w	fp, r6, #1
 801d518:	f10e 0401 	add.w	r4, lr, #1
 801d51c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d51e:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801d522:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d526:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d52a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d52e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d532:	4327      	orrs	r7, r4
 801d534:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801d538:	4401      	add	r1, r0
 801d53a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d53c:	ea47 070b 	orr.w	r7, r7, fp
 801d540:	f829 7b02 	strh.w	r7, [r9], #2
 801d544:	4402      	add	r2, r0
 801d546:	f108 38ff 	add.w	r8, r8, #4294967295
 801d54a:	e7af      	b.n	801d4ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d54c:	f04f 0e00 	mov.w	lr, #0
 801d550:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801d554:	eb03 040e 	add.w	r4, r3, lr
 801d558:	2c00      	cmp	r4, #0
 801d55a:	dc43      	bgt.n	801d5e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d55c:	9a00      	ldr	r2, [sp, #0]
 801d55e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d562:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d566:	9300      	str	r3, [sp, #0]
 801d568:	9b02      	ldr	r3, [sp, #8]
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	f340 8098 	ble.w	801d6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d570:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d574:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d578:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d57c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d580:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d584:	eef0 6a62 	vmov.f32	s13, s5
 801d588:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d58c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d590:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d594:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d598:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d59c:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801d5a0:	eef0 6a43 	vmov.f32	s13, s6
 801d5a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d5a8:	ee12 2a90 	vmov	r2, s5
 801d5ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d5b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d5b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d5b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5ba:	ee13 2a10 	vmov	r2, s6
 801d5be:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d5c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d5c2:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801d5c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5ca:	9314      	str	r3, [sp, #80]	@ 0x50
 801d5cc:	9b02      	ldr	r3, [sp, #8]
 801d5ce:	9a05      	ldr	r2, [sp, #20]
 801d5d0:	3b01      	subs	r3, #1
 801d5d2:	9302      	str	r3, [sp, #8]
 801d5d4:	eeb0 3a67 	vmov.f32	s6, s15
 801d5d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d5da:	eef0 2a47 	vmov.f32	s5, s14
 801d5de:	bf08      	it	eq
 801d5e0:	4613      	moveq	r3, r2
 801d5e2:	e72a      	b.n	801d43a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d5e4:	140f      	asrs	r7, r1, #16
 801d5e6:	d454      	bmi.n	801d692 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d5e8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d5ec:	42be      	cmp	r6, r7
 801d5ee:	dd50      	ble.n	801d692 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d5f0:	ea5f 4822 	movs.w	r8, r2, asr #16
 801d5f4:	d44d      	bmi.n	801d692 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d5f6:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801d5fa:	4544      	cmp	r4, r8
 801d5fc:	dd49      	ble.n	801d692 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d5fe:	f06f 0001 	mvn.w	r0, #1
 801d602:	9c04      	ldr	r4, [sp, #16]
 801d604:	b236      	sxth	r6, r6
 801d606:	fb08 4606 	mla	r6, r8, r6, r4
 801d60a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801d60e:	9c01      	ldr	r4, [sp, #4]
 801d610:	fb00 fa0e 	mul.w	sl, r0, lr
 801d614:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d618:	eb04 0b08 	add.w	fp, r4, r8
 801d61c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d620:	9800      	ldr	r0, [sp, #0]
 801d622:	fb16 f609 	smulbb	r6, r6, r9
 801d626:	f830 400a 	ldrh.w	r4, [r0, sl]
 801d62a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d62e:	1227      	asrs	r7, r4, #8
 801d630:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d634:	fb07 6705 	mla	r7, r7, r5, r6
 801d638:	10e6      	asrs	r6, r4, #3
 801d63a:	00e4      	lsls	r4, r4, #3
 801d63c:	b2e4      	uxtb	r4, r4
 801d63e:	fb1b fb09 	smulbb	fp, fp, r9
 801d642:	9801      	ldr	r0, [sp, #4]
 801d644:	fb14 f405 	smulbb	r4, r4, r5
 801d648:	f810 8008 	ldrb.w	r8, [r0, r8]
 801d64c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d650:	fb06 b605 	mla	r6, r6, r5, fp
 801d654:	fb08 4809 	mla	r8, r8, r9, r4
 801d658:	b2bf      	uxth	r7, r7
 801d65a:	b2b6      	uxth	r6, r6
 801d65c:	fa1f f888 	uxth.w	r8, r8
 801d660:	1c7c      	adds	r4, r7, #1
 801d662:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d666:	f106 0b01 	add.w	fp, r6, #1
 801d66a:	f108 0401 	add.w	r4, r8, #1
 801d66e:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801d672:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d676:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d67a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d67e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d682:	4327      	orrs	r7, r4
 801d684:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801d688:	9800      	ldr	r0, [sp, #0]
 801d68a:	ea47 070b 	orr.w	r7, r7, fp
 801d68e:	f820 700a 	strh.w	r7, [r0, sl]
 801d692:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d694:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d698:	4401      	add	r1, r0
 801d69a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d69c:	4402      	add	r2, r0
 801d69e:	e759      	b.n	801d554 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d6a0:	b007      	add	sp, #28
 801d6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d6a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d6a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6b0:	b085      	sub	sp, #20
 801d6b2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d6b4:	9203      	str	r2, [sp, #12]
 801d6b6:	6870      	ldr	r0, [r6, #4]
 801d6b8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d6bc:	fb00 2404 	mla	r4, r0, r4, r2
 801d6c0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801d6c2:	6832      	ldr	r2, [r6, #0]
 801d6c4:	686f      	ldr	r7, [r5, #4]
 801d6c6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d6ca:	682a      	ldr	r2, [r5, #0]
 801d6cc:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801d6d0:	9101      	str	r1, [sp, #4]
 801d6d2:	9202      	str	r2, [sp, #8]
 801d6d4:	3704      	adds	r7, #4
 801d6d6:	9a01      	ldr	r2, [sp, #4]
 801d6d8:	2a00      	cmp	r2, #0
 801d6da:	dc03      	bgt.n	801d6e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d6dc:	9a03      	ldr	r2, [sp, #12]
 801d6de:	2a00      	cmp	r2, #0
 801d6e0:	f340 80cc 	ble.w	801d87c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d6e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d6e6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d6ea:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d6ee:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d6f0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d6f4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	dd0d      	ble.n	801d718 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d6fc:	1406      	asrs	r6, r0, #16
 801d6fe:	d405      	bmi.n	801d70c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d700:	454e      	cmp	r6, r9
 801d702:	da03      	bge.n	801d70c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d704:	1416      	asrs	r6, r2, #16
 801d706:	d401      	bmi.n	801d70c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d708:	4546      	cmp	r6, r8
 801d70a:	db06      	blt.n	801d71a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d70c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801d70e:	4460      	add	r0, ip
 801d710:	4432      	add	r2, r6
 801d712:	3b01      	subs	r3, #1
 801d714:	3402      	adds	r4, #2
 801d716:	e7ef      	b.n	801d6f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d718:	d00f      	beq.n	801d73a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d71a:	1e5e      	subs	r6, r3, #1
 801d71c:	fb0c 0e06 	mla	lr, ip, r6, r0
 801d720:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d724:	d543      	bpl.n	801d7ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801d726:	4698      	mov	r8, r3
 801d728:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801d72c:	f1b8 0f00 	cmp.w	r8, #0
 801d730:	dc71      	bgt.n	801d816 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d732:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d736:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d73a:	9b01      	ldr	r3, [sp, #4]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	f340 809d 	ble.w	801d87c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d742:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d746:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d74a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d74e:	eeb0 6a62 	vmov.f32	s12, s5
 801d752:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d756:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d75a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d75e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d762:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d766:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d76a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d76e:	eeb0 6a43 	vmov.f32	s12, s6
 801d772:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d776:	ee12 2a90 	vmov	r2, s5
 801d77a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d77e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d780:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d784:	fb92 fcf3 	sdiv	ip, r2, r3
 801d788:	ee13 2a10 	vmov	r2, s6
 801d78c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d790:	9312      	str	r3, [sp, #72]	@ 0x48
 801d792:	9b01      	ldr	r3, [sp, #4]
 801d794:	9a03      	ldr	r2, [sp, #12]
 801d796:	3b01      	subs	r3, #1
 801d798:	9301      	str	r3, [sp, #4]
 801d79a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d79e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7a0:	eeb0 3a67 	vmov.f32	s6, s15
 801d7a4:	bf08      	it	eq
 801d7a6:	4613      	moveq	r3, r2
 801d7a8:	eef0 2a47 	vmov.f32	s5, s14
 801d7ac:	e793      	b.n	801d6d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d7ae:	45ce      	cmp	lr, r9
 801d7b0:	dab9      	bge.n	801d726 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d7b2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d7b4:	fb01 2606 	mla	r6, r1, r6, r2
 801d7b8:	1436      	asrs	r6, r6, #16
 801d7ba:	d4b4      	bmi.n	801d726 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d7bc:	4546      	cmp	r6, r8
 801d7be:	dab2      	bge.n	801d726 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d7c0:	4698      	mov	r8, r3
 801d7c2:	46a2      	mov	sl, r4
 801d7c4:	f1b8 0f00 	cmp.w	r8, #0
 801d7c8:	ddb3      	ble.n	801d732 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d7ca:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d7ce:	9902      	ldr	r1, [sp, #8]
 801d7d0:	1416      	asrs	r6, r2, #16
 801d7d2:	fb09 1606 	mla	r6, r9, r6, r1
 801d7d6:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801d7da:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801d7de:	4929      	ldr	r1, [pc, #164]	@ (801d884 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801d7e0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d7e4:	eb07 0b0e 	add.w	fp, r7, lr
 801d7e8:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801d7ec:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d7f0:	00f6      	lsls	r6, r6, #3
 801d7f2:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801d7f6:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801d7fa:	ea49 0606 	orr.w	r6, r9, r6
 801d7fe:	f817 900e 	ldrb.w	r9, [r7, lr]
 801d802:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d804:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801d808:	f82a 6b02 	strh.w	r6, [sl], #2
 801d80c:	4460      	add	r0, ip
 801d80e:	440a      	add	r2, r1
 801d810:	f108 38ff 	add.w	r8, r8, #4294967295
 801d814:	e7d6      	b.n	801d7c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d816:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d81a:	d429      	bmi.n	801d870 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d81c:	68ae      	ldr	r6, [r5, #8]
 801d81e:	454e      	cmp	r6, r9
 801d820:	dd26      	ble.n	801d870 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d822:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801d826:	d423      	bmi.n	801d870 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d828:	68e9      	ldr	r1, [r5, #12]
 801d82a:	4559      	cmp	r1, fp
 801d82c:	dd20      	ble.n	801d870 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d82e:	9902      	ldr	r1, [sp, #8]
 801d830:	fa0f fe86 	sxth.w	lr, r6
 801d834:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801d838:	f06f 0101 	mvn.w	r1, #1
 801d83c:	f81e e009 	ldrb.w	lr, [lr, r9]
 801d840:	fb01 f908 	mul.w	r9, r1, r8
 801d844:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d848:	eb07 060e 	add.w	r6, r7, lr
 801d84c:	f896 b002 	ldrb.w	fp, [r6, #2]
 801d850:	7876      	ldrb	r6, [r6, #1]
 801d852:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801d856:	00f6      	lsls	r6, r6, #3
 801d858:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801d85c:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801d860:	ea4b 0606 	orr.w	r6, fp, r6
 801d864:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801d868:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801d86c:	f82a 6009 	strh.w	r6, [sl, r9]
 801d870:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d872:	4460      	add	r0, ip
 801d874:	440a      	add	r2, r1
 801d876:	f108 38ff 	add.w	r8, r8, #4294967295
 801d87a:	e757      	b.n	801d72c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d87c:	b005      	add	sp, #20
 801d87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d882:	bf00      	nop
 801d884:	fffff800 	.word	0xfffff800

0801d888 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d890:	b087      	sub	sp, #28
 801d892:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d894:	468b      	mov	fp, r1
 801d896:	9204      	str	r2, [sp, #16]
 801d898:	6841      	ldr	r1, [r0, #4]
 801d89a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d89e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801d8a2:	9205      	str	r2, [sp, #20]
 801d8a4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801d8a8:	fb01 2404 	mla	r4, r1, r4, r2
 801d8ac:	6802      	ldr	r2, [r0, #0]
 801d8ae:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d8b2:	f8dc 2000 	ldr.w	r2, [ip]
 801d8b6:	9201      	str	r2, [sp, #4]
 801d8b8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d8bc:	3204      	adds	r2, #4
 801d8be:	9202      	str	r2, [sp, #8]
 801d8c0:	f1bb 0f00 	cmp.w	fp, #0
 801d8c4:	dc03      	bgt.n	801d8ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d8c6:	9a04      	ldr	r2, [sp, #16]
 801d8c8:	2a00      	cmp	r2, #0
 801d8ca:	f340 8138 	ble.w	801db3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d8ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d8d0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d8d4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d8d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d8da:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801d8de:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	dd0e      	ble.n	801d904 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d8e6:	1402      	asrs	r2, r0, #16
 801d8e8:	d405      	bmi.n	801d8f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d8ea:	42ba      	cmp	r2, r7
 801d8ec:	da03      	bge.n	801d8f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d8ee:	140a      	asrs	r2, r1, #16
 801d8f0:	d401      	bmi.n	801d8f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d8f2:	42b2      	cmp	r2, r6
 801d8f4:	db07      	blt.n	801d906 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d8f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d8f8:	3b01      	subs	r3, #1
 801d8fa:	4410      	add	r0, r2
 801d8fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d8fe:	3402      	adds	r4, #2
 801d900:	4411      	add	r1, r2
 801d902:	e7ee      	b.n	801d8e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d904:	d019      	beq.n	801d93a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d906:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d908:	1e5a      	subs	r2, r3, #1
 801d90a:	fb05 0502 	mla	r5, r5, r2, r0
 801d90e:	142d      	asrs	r5, r5, #16
 801d910:	d409      	bmi.n	801d926 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d912:	42bd      	cmp	r5, r7
 801d914:	da07      	bge.n	801d926 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d916:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d918:	fb05 1202 	mla	r2, r5, r2, r1
 801d91c:	1412      	asrs	r2, r2, #16
 801d91e:	d402      	bmi.n	801d926 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d920:	42b2      	cmp	r2, r6
 801d922:	f2c0 80ac 	blt.w	801da7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801d926:	f04f 0e00 	mov.w	lr, #0
 801d92a:	eb03 020e 	add.w	r2, r3, lr
 801d92e:	2a00      	cmp	r2, #0
 801d930:	dc3e      	bgt.n	801d9b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d932:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d936:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d93a:	f1bb 0f00 	cmp.w	fp, #0
 801d93e:	f340 80fe 	ble.w	801db3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d942:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d946:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d94a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d94e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d952:	eeb0 6a62 	vmov.f32	s12, s5
 801d956:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d95a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d95e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d962:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d966:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d96a:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801d96e:	eeb0 6a43 	vmov.f32	s12, s6
 801d972:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d976:	ee12 2a90 	vmov	r2, s5
 801d97a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d97e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d980:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d984:	fb92 f3f3 	sdiv	r3, r2, r3
 801d988:	ee13 2a10 	vmov	r2, s6
 801d98c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d98e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d990:	f1bb 0b01 	subs.w	fp, fp, #1
 801d994:	fb92 f3f3 	sdiv	r3, r2, r3
 801d998:	9a04      	ldr	r2, [sp, #16]
 801d99a:	9314      	str	r3, [sp, #80]	@ 0x50
 801d99c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801d9a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d9a2:	eeb0 3a67 	vmov.f32	s6, s15
 801d9a6:	bf08      	it	eq
 801d9a8:	4613      	moveq	r3, r2
 801d9aa:	eef0 2a47 	vmov.f32	s5, s14
 801d9ae:	e787      	b.n	801d8c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d9b0:	1406      	asrs	r6, r0, #16
 801d9b2:	d45d      	bmi.n	801da70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d9b4:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801d9b8:	42b5      	cmp	r5, r6
 801d9ba:	dd59      	ble.n	801da70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d9bc:	140f      	asrs	r7, r1, #16
 801d9be:	d457      	bmi.n	801da70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d9c0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d9c4:	42ba      	cmp	r2, r7
 801d9c6:	dd53      	ble.n	801da70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d9c8:	9a01      	ldr	r2, [sp, #4]
 801d9ca:	b22d      	sxth	r5, r5
 801d9cc:	fb07 2505 	mla	r5, r7, r5, r2
 801d9d0:	5daa      	ldrb	r2, [r5, r6]
 801d9d2:	9d02      	ldr	r5, [sp, #8]
 801d9d4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d9d8:	0e2e      	lsrs	r6, r5, #24
 801d9da:	d049      	beq.n	801da70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d9dc:	f06f 0201 	mvn.w	r2, #1
 801d9e0:	fb02 f20e 	mul.w	r2, r2, lr
 801d9e4:	f834 8002 	ldrh.w	r8, [r4, r2]
 801d9e8:	9203      	str	r2, [sp, #12]
 801d9ea:	9a05      	ldr	r2, [sp, #20]
 801d9ec:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d9f0:	4356      	muls	r6, r2
 801d9f2:	1c72      	adds	r2, r6, #1
 801d9f4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d9f8:	1212      	asrs	r2, r2, #8
 801d9fa:	fa1f f982 	uxth.w	r9, r2
 801d9fe:	43d2      	mvns	r2, r2
 801da00:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801da04:	fb16 f609 	smulbb	r6, r6, r9
 801da08:	b2ed      	uxtb	r5, r5
 801da0a:	ea4f 2728 	mov.w	r7, r8, asr #8
 801da0e:	fb15 f509 	smulbb	r5, r5, r9
 801da12:	b2d2      	uxtb	r2, r2
 801da14:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801da18:	fb07 6702 	mla	r7, r7, r2, r6
 801da1c:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801da20:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801da24:	fb1a fa09 	smulbb	sl, sl, r9
 801da28:	fa5f f888 	uxtb.w	r8, r8
 801da2c:	fb08 5502 	mla	r5, r8, r2, r5
 801da30:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801da34:	fb06 a602 	mla	r6, r6, r2, sl
 801da38:	b2bf      	uxth	r7, r7
 801da3a:	b2ad      	uxth	r5, r5
 801da3c:	1c7a      	adds	r2, r7, #1
 801da3e:	f105 0a01 	add.w	sl, r5, #1
 801da42:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801da46:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801da4a:	b2b6      	uxth	r6, r6
 801da4c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801da50:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801da54:	ea4a 0707 	orr.w	r7, sl, r7
 801da58:	f106 0a01 	add.w	sl, r6, #1
 801da5c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801da60:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801da64:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801da68:	9a03      	ldr	r2, [sp, #12]
 801da6a:	ea47 070a 	orr.w	r7, r7, sl
 801da6e:	52a7      	strh	r7, [r4, r2]
 801da70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801da72:	f10e 3eff 	add.w	lr, lr, #4294967295
 801da76:	4410      	add	r0, r2
 801da78:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801da7a:	4411      	add	r1, r2
 801da7c:	e755      	b.n	801d92a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801da7e:	f04f 0800 	mov.w	r8, #0
 801da82:	eba3 0208 	sub.w	r2, r3, r8
 801da86:	2a00      	cmp	r2, #0
 801da88:	f77f af53 	ble.w	801d932 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801da8c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801da90:	9f01      	ldr	r7, [sp, #4]
 801da92:	140a      	asrs	r2, r1, #16
 801da94:	fb06 7202 	mla	r2, r6, r2, r7
 801da98:	1405      	asrs	r5, r0, #16
 801da9a:	5d52      	ldrb	r2, [r2, r5]
 801da9c:	9d02      	ldr	r5, [sp, #8]
 801da9e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801daa2:	0e2e      	lsrs	r6, r5, #24
 801daa4:	d044      	beq.n	801db30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801daa6:	9a05      	ldr	r2, [sp, #20]
 801daa8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801daac:	4356      	muls	r6, r2
 801daae:	1c72      	adds	r2, r6, #1
 801dab0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801dab4:	1212      	asrs	r2, r2, #8
 801dab6:	fa1f f982 	uxth.w	r9, r2
 801daba:	43d2      	mvns	r2, r2
 801dabc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801dac0:	fb16 f609 	smulbb	r6, r6, r9
 801dac4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801dac8:	b2ed      	uxtb	r5, r5
 801daca:	ea4f 272e 	mov.w	r7, lr, asr #8
 801dace:	fb15 f509 	smulbb	r5, r5, r9
 801dad2:	b2d2      	uxtb	r2, r2
 801dad4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801dad8:	fb07 6702 	mla	r7, r7, r2, r6
 801dadc:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801dae0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801dae4:	fb1a fa09 	smulbb	sl, sl, r9
 801dae8:	fa5f fe8e 	uxtb.w	lr, lr
 801daec:	fb0e 5502 	mla	r5, lr, r2, r5
 801daf0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801daf4:	fb06 a602 	mla	r6, r6, r2, sl
 801daf8:	b2bf      	uxth	r7, r7
 801dafa:	b2ad      	uxth	r5, r5
 801dafc:	1c7a      	adds	r2, r7, #1
 801dafe:	f105 0a01 	add.w	sl, r5, #1
 801db02:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801db06:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801db0a:	b2b6      	uxth	r6, r6
 801db0c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801db10:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801db14:	ea4a 0707 	orr.w	r7, sl, r7
 801db18:	f106 0a01 	add.w	sl, r6, #1
 801db1c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801db20:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801db24:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801db28:	ea47 070a 	orr.w	r7, r7, sl
 801db2c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801db30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801db32:	f108 0801 	add.w	r8, r8, #1
 801db36:	4410      	add	r0, r2
 801db38:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801db3a:	4411      	add	r1, r2
 801db3c:	e7a1      	b.n	801da82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801db3e:	b007      	add	sp, #28
 801db40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801db44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801db48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db4c:	b085      	sub	sp, #20
 801db4e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801db50:	468b      	mov	fp, r1
 801db52:	6841      	ldr	r1, [r0, #4]
 801db54:	9203      	str	r2, [sp, #12]
 801db56:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801db5a:	fb01 2404 	mla	r4, r1, r4, r2
 801db5e:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801db62:	6802      	ldr	r2, [r0, #0]
 801db64:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801db68:	f8de 2000 	ldr.w	r2, [lr]
 801db6c:	9200      	str	r2, [sp, #0]
 801db6e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801db72:	3204      	adds	r2, #4
 801db74:	9201      	str	r2, [sp, #4]
 801db76:	f1bb 0f00 	cmp.w	fp, #0
 801db7a:	dc03      	bgt.n	801db84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801db7c:	9a03      	ldr	r2, [sp, #12]
 801db7e:	2a00      	cmp	r2, #0
 801db80:	f340 8153 	ble.w	801de2a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801db84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801db86:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801db8a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801db8e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801db90:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801db94:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801db98:	2b00      	cmp	r3, #0
 801db9a:	dd0e      	ble.n	801dbba <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801db9c:	1408      	asrs	r0, r1, #16
 801db9e:	d405      	bmi.n	801dbac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dba0:	42b8      	cmp	r0, r7
 801dba2:	da03      	bge.n	801dbac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dba4:	1410      	asrs	r0, r2, #16
 801dba6:	d401      	bmi.n	801dbac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dba8:	42b0      	cmp	r0, r6
 801dbaa:	db07      	blt.n	801dbbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dbac:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dbae:	3b01      	subs	r3, #1
 801dbb0:	4401      	add	r1, r0
 801dbb2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dbb4:	3402      	adds	r4, #2
 801dbb6:	4402      	add	r2, r0
 801dbb8:	e7ee      	b.n	801db98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801dbba:	d017      	beq.n	801dbec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801dbbc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801dbbe:	1e58      	subs	r0, r3, #1
 801dbc0:	fb05 1500 	mla	r5, r5, r0, r1
 801dbc4:	142d      	asrs	r5, r5, #16
 801dbc6:	d409      	bmi.n	801dbdc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dbc8:	42bd      	cmp	r5, r7
 801dbca:	da07      	bge.n	801dbdc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dbcc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801dbce:	fb05 2000 	mla	r0, r5, r0, r2
 801dbd2:	1400      	asrs	r0, r0, #16
 801dbd4:	d402      	bmi.n	801dbdc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dbd6:	42b0      	cmp	r0, r6
 801dbd8:	f2c0 80bc 	blt.w	801dd54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801dbdc:	2600      	movs	r6, #0
 801dbde:	1998      	adds	r0, r3, r6
 801dbe0:	2800      	cmp	r0, #0
 801dbe2:	dc3e      	bgt.n	801dc62 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801dbe4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dbe8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dbec:	f1bb 0f00 	cmp.w	fp, #0
 801dbf0:	f340 811b 	ble.w	801de2a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801dbf4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dbf8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dbfc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dc00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dc04:	eeb0 6a62 	vmov.f32	s12, s5
 801dc08:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dc0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dc10:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dc14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc1c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801dc20:	eeb0 6a43 	vmov.f32	s12, s6
 801dc24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc28:	ee12 2a90 	vmov	r2, s5
 801dc2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc36:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc3a:	ee13 2a10 	vmov	r2, s6
 801dc3e:	9311      	str	r3, [sp, #68]	@ 0x44
 801dc40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc42:	f1bb 0b01 	subs.w	fp, fp, #1
 801dc46:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc4a:	9a03      	ldr	r2, [sp, #12]
 801dc4c:	9312      	str	r3, [sp, #72]	@ 0x48
 801dc4e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801dc52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc54:	eeb0 3a67 	vmov.f32	s6, s15
 801dc58:	bf08      	it	eq
 801dc5a:	4613      	moveq	r3, r2
 801dc5c:	eef0 2a47 	vmov.f32	s5, s14
 801dc60:	e789      	b.n	801db76 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801dc62:	140f      	asrs	r7, r1, #16
 801dc64:	d426      	bmi.n	801dcb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dc66:	f8de 5008 	ldr.w	r5, [lr, #8]
 801dc6a:	42bd      	cmp	r5, r7
 801dc6c:	dd22      	ble.n	801dcb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dc6e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801dc72:	d41f      	bmi.n	801dcb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dc74:	f8de 000c 	ldr.w	r0, [lr, #12]
 801dc78:	4560      	cmp	r0, ip
 801dc7a:	dd1b      	ble.n	801dcb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dc7c:	9800      	ldr	r0, [sp, #0]
 801dc7e:	b22d      	sxth	r5, r5
 801dc80:	fb0c 0505 	mla	r5, ip, r5, r0
 801dc84:	5de8      	ldrb	r0, [r5, r7]
 801dc86:	9d01      	ldr	r5, [sp, #4]
 801dc88:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801dc8c:	0e07      	lsrs	r7, r0, #24
 801dc8e:	2fff      	cmp	r7, #255	@ 0xff
 801dc90:	d116      	bne.n	801dcc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801dc92:	f06f 0501 	mvn.w	r5, #1
 801dc96:	fb05 f706 	mul.w	r7, r5, r6
 801dc9a:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801dc9e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801dca2:	0945      	lsrs	r5, r0, #5
 801dca4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801dca8:	ea4c 0505 	orr.w	r5, ip, r5
 801dcac:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801dcb0:	4305      	orrs	r5, r0
 801dcb2:	53e5      	strh	r5, [r4, r7]
 801dcb4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dcb6:	3e01      	subs	r6, #1
 801dcb8:	4401      	add	r1, r0
 801dcba:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dcbc:	4402      	add	r2, r0
 801dcbe:	e78e      	b.n	801dbde <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801dcc0:	b2fd      	uxtb	r5, r7
 801dcc2:	2f00      	cmp	r7, #0
 801dcc4:	d0f6      	beq.n	801dcb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dcc6:	f06f 0701 	mvn.w	r7, #1
 801dcca:	fa1f f985 	uxth.w	r9, r5
 801dcce:	43ed      	mvns	r5, r5
 801dcd0:	4377      	muls	r7, r6
 801dcd2:	f834 8007 	ldrh.w	r8, [r4, r7]
 801dcd6:	9702      	str	r7, [sp, #8]
 801dcd8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801dcdc:	fb17 f709 	smulbb	r7, r7, r9
 801dce0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801dce4:	b2c0      	uxtb	r0, r0
 801dce6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801dcea:	fb10 f009 	smulbb	r0, r0, r9
 801dcee:	b2ed      	uxtb	r5, r5
 801dcf0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801dcf4:	fb0c 7c05 	mla	ip, ip, r5, r7
 801dcf8:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801dcfc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801dd00:	fb1a fa09 	smulbb	sl, sl, r9
 801dd04:	fa5f f888 	uxtb.w	r8, r8
 801dd08:	fb08 0005 	mla	r0, r8, r5, r0
 801dd0c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801dd10:	fb07 a705 	mla	r7, r7, r5, sl
 801dd14:	b280      	uxth	r0, r0
 801dd16:	fa1f fc8c 	uxth.w	ip, ip
 801dd1a:	f100 0a01 	add.w	sl, r0, #1
 801dd1e:	f10c 0501 	add.w	r5, ip, #1
 801dd22:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801dd26:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801dd2a:	b2bf      	uxth	r7, r7
 801dd2c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dd30:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801dd34:	ea4a 0c0c 	orr.w	ip, sl, ip
 801dd38:	f107 0a01 	add.w	sl, r7, #1
 801dd3c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801dd40:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dd44:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801dd48:	9802      	ldr	r0, [sp, #8]
 801dd4a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801dd4e:	f824 c000 	strh.w	ip, [r4, r0]
 801dd52:	e7af      	b.n	801dcb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dd54:	f04f 0800 	mov.w	r8, #0
 801dd58:	eba3 0008 	sub.w	r0, r3, r8
 801dd5c:	2800      	cmp	r0, #0
 801dd5e:	f77f af41 	ble.w	801dbe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dd62:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801dd66:	9f00      	ldr	r7, [sp, #0]
 801dd68:	1410      	asrs	r0, r2, #16
 801dd6a:	fb06 7000 	mla	r0, r6, r0, r7
 801dd6e:	140d      	asrs	r5, r1, #16
 801dd70:	5d40      	ldrb	r0, [r0, r5]
 801dd72:	9d01      	ldr	r5, [sp, #4]
 801dd74:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801dd78:	0e2e      	lsrs	r6, r5, #24
 801dd7a:	2eff      	cmp	r6, #255	@ 0xff
 801dd7c:	d112      	bne.n	801dda4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801dd7e:	482c      	ldr	r0, [pc, #176]	@ (801de30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801dd80:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801dd84:	0968      	lsrs	r0, r5, #5
 801dd86:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801dd8a:	4330      	orrs	r0, r6
 801dd8c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801dd90:	4328      	orrs	r0, r5
 801dd92:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801dd96:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dd98:	f108 0801 	add.w	r8, r8, #1
 801dd9c:	4401      	add	r1, r0
 801dd9e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dda0:	4402      	add	r2, r0
 801dda2:	e7d9      	b.n	801dd58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801dda4:	b2f0      	uxtb	r0, r6
 801dda6:	2e00      	cmp	r6, #0
 801dda8:	d0f5      	beq.n	801dd96 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ddaa:	fa1f f980 	uxth.w	r9, r0
 801ddae:	43c0      	mvns	r0, r0
 801ddb0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ddb4:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801ddb8:	fb16 f609 	smulbb	r6, r6, r9
 801ddbc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ddc0:	b2ed      	uxtb	r5, r5
 801ddc2:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ddc6:	fb15 f509 	smulbb	r5, r5, r9
 801ddca:	b2c0      	uxtb	r0, r0
 801ddcc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ddd0:	fb07 6700 	mla	r7, r7, r0, r6
 801ddd4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ddd8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801dddc:	fb1a fa09 	smulbb	sl, sl, r9
 801dde0:	fa5f fc8c 	uxtb.w	ip, ip
 801dde4:	fb0c 5500 	mla	r5, ip, r0, r5
 801dde8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ddec:	fb06 a600 	mla	r6, r6, r0, sl
 801ddf0:	b2bf      	uxth	r7, r7
 801ddf2:	b2ad      	uxth	r5, r5
 801ddf4:	1c78      	adds	r0, r7, #1
 801ddf6:	f105 0a01 	add.w	sl, r5, #1
 801ddfa:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ddfe:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801de02:	b2b6      	uxth	r6, r6
 801de04:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801de08:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801de0c:	ea4a 0707 	orr.w	r7, sl, r7
 801de10:	f106 0a01 	add.w	sl, r6, #1
 801de14:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801de18:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801de1c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801de20:	ea47 070a 	orr.w	r7, r7, sl
 801de24:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801de28:	e7b5      	b.n	801dd96 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801de2a:	b005      	add	sp, #20
 801de2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de30:	fffff800 	.word	0xfffff800

0801de34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de3c:	b087      	sub	sp, #28
 801de3e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801de40:	468b      	mov	fp, r1
 801de42:	9204      	str	r2, [sp, #16]
 801de44:	6861      	ldr	r1, [r4, #4]
 801de46:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801de4a:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801de4e:	9205      	str	r2, [sp, #20]
 801de50:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801de54:	fb01 2000 	mla	r0, r1, r0, r2
 801de58:	6822      	ldr	r2, [r4, #0]
 801de5a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801de5e:	f8de 2000 	ldr.w	r2, [lr]
 801de62:	9201      	str	r2, [sp, #4]
 801de64:	f8de 2004 	ldr.w	r2, [lr, #4]
 801de68:	9202      	str	r2, [sp, #8]
 801de6a:	f1bb 0f00 	cmp.w	fp, #0
 801de6e:	dc03      	bgt.n	801de78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801de70:	9a04      	ldr	r2, [sp, #16]
 801de72:	2a00      	cmp	r2, #0
 801de74:	f340 8142 	ble.w	801e0fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801de78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801de7a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801de7e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801de82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801de84:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801de88:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801de8c:	2b00      	cmp	r3, #0
 801de8e:	dd0e      	ble.n	801deae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801de90:	140c      	asrs	r4, r1, #16
 801de92:	d405      	bmi.n	801dea0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801de94:	42bc      	cmp	r4, r7
 801de96:	da03      	bge.n	801dea0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801de98:	1414      	asrs	r4, r2, #16
 801de9a:	d401      	bmi.n	801dea0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801de9c:	42b4      	cmp	r4, r6
 801de9e:	db07      	blt.n	801deb0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dea0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dea2:	3b01      	subs	r3, #1
 801dea4:	4421      	add	r1, r4
 801dea6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801dea8:	3002      	adds	r0, #2
 801deaa:	4422      	add	r2, r4
 801deac:	e7ee      	b.n	801de8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801deae:	d019      	beq.n	801dee4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801deb0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801deb2:	1e5c      	subs	r4, r3, #1
 801deb4:	fb05 1504 	mla	r5, r5, r4, r1
 801deb8:	142d      	asrs	r5, r5, #16
 801deba:	d409      	bmi.n	801ded0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801debc:	42bd      	cmp	r5, r7
 801debe:	da07      	bge.n	801ded0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801dec0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801dec2:	fb05 2404 	mla	r4, r5, r4, r2
 801dec6:	1424      	asrs	r4, r4, #16
 801dec8:	d402      	bmi.n	801ded0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801deca:	42b4      	cmp	r4, r6
 801decc:	f2c0 80b1 	blt.w	801e032 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801ded0:	f04f 0800 	mov.w	r8, #0
 801ded4:	eb03 0408 	add.w	r4, r3, r8
 801ded8:	2c00      	cmp	r4, #0
 801deda:	dc3e      	bgt.n	801df5a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801dedc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dee0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dee4:	f1bb 0f00 	cmp.w	fp, #0
 801dee8:	f340 8108 	ble.w	801e0fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801deec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801def0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801def4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801def8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801defc:	eeb0 6a62 	vmov.f32	s12, s5
 801df00:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df04:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df08:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df10:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df14:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801df18:	eeb0 6a43 	vmov.f32	s12, s6
 801df1c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df20:	ee12 2a90 	vmov	r2, s5
 801df24:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df2e:	fb92 f3f3 	sdiv	r3, r2, r3
 801df32:	ee13 2a10 	vmov	r2, s6
 801df36:	9313      	str	r3, [sp, #76]	@ 0x4c
 801df38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df3a:	f1bb 0b01 	subs.w	fp, fp, #1
 801df3e:	fb92 f3f3 	sdiv	r3, r2, r3
 801df42:	9a04      	ldr	r2, [sp, #16]
 801df44:	9314      	str	r3, [sp, #80]	@ 0x50
 801df46:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801df4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df4c:	eeb0 3a67 	vmov.f32	s6, s15
 801df50:	bf08      	it	eq
 801df52:	4613      	moveq	r3, r2
 801df54:	eef0 2a47 	vmov.f32	s5, s14
 801df58:	e787      	b.n	801de6a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801df5a:	140e      	asrs	r6, r1, #16
 801df5c:	d462      	bmi.n	801e024 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801df5e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801df62:	42b5      	cmp	r5, r6
 801df64:	dd5e      	ble.n	801e024 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801df66:	1417      	asrs	r7, r2, #16
 801df68:	d45c      	bmi.n	801e024 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801df6a:	f8de 400c 	ldr.w	r4, [lr, #12]
 801df6e:	42bc      	cmp	r4, r7
 801df70:	dd58      	ble.n	801e024 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801df72:	b22d      	sxth	r5, r5
 801df74:	fb07 6505 	mla	r5, r7, r5, r6
 801df78:	9c02      	ldr	r4, [sp, #8]
 801df7a:	5d66      	ldrb	r6, [r4, r5]
 801df7c:	2e00      	cmp	r6, #0
 801df7e:	d051      	beq.n	801e024 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801df80:	9c01      	ldr	r4, [sp, #4]
 801df82:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801df86:	f06f 0401 	mvn.w	r4, #1
 801df8a:	fb04 f408 	mul.w	r4, r4, r8
 801df8e:	5b05      	ldrh	r5, [r0, r4]
 801df90:	9403      	str	r4, [sp, #12]
 801df92:	9c05      	ldr	r4, [sp, #20]
 801df94:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801df98:	4366      	muls	r6, r4
 801df9a:	1c74      	adds	r4, r6, #1
 801df9c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801dfa0:	1224      	asrs	r4, r4, #8
 801dfa2:	b2a7      	uxth	r7, r4
 801dfa4:	43e4      	mvns	r4, r4
 801dfa6:	122e      	asrs	r6, r5, #8
 801dfa8:	b2e4      	uxtb	r4, r4
 801dfaa:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801dfae:	fb16 f604 	smulbb	r6, r6, r4
 801dfb2:	00ed      	lsls	r5, r5, #3
 801dfb4:	b2ed      	uxtb	r5, r5
 801dfb6:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801dfba:	fb15 f504 	smulbb	r5, r5, r4
 801dfbe:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801dfc2:	fb0c 6c07 	mla	ip, ip, r7, r6
 801dfc6:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801dfca:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801dfce:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801dfd2:	fb1a fa04 	smulbb	sl, sl, r4
 801dfd6:	fa5f f989 	uxtb.w	r9, r9
 801dfda:	fb09 5507 	mla	r5, r9, r7, r5
 801dfde:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801dfe2:	fb06 a607 	mla	r6, r6, r7, sl
 801dfe6:	fa1f fc8c 	uxth.w	ip, ip
 801dfea:	b2ad      	uxth	r5, r5
 801dfec:	f10c 0401 	add.w	r4, ip, #1
 801dff0:	f105 0a01 	add.w	sl, r5, #1
 801dff4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801dff8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801dffc:	b2b6      	uxth	r6, r6
 801dffe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e002:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e006:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e00a:	f106 0a01 	add.w	sl, r6, #1
 801e00e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e012:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e016:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e01a:	9c03      	ldr	r4, [sp, #12]
 801e01c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e020:	f820 c004 	strh.w	ip, [r0, r4]
 801e024:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e026:	f108 38ff 	add.w	r8, r8, #4294967295
 801e02a:	4421      	add	r1, r4
 801e02c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e02e:	4422      	add	r2, r4
 801e030:	e750      	b.n	801ded4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e032:	f04f 0900 	mov.w	r9, #0
 801e036:	eba3 0409 	sub.w	r4, r3, r9
 801e03a:	2c00      	cmp	r4, #0
 801e03c:	f77f af4e 	ble.w	801dedc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e040:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801e044:	140d      	asrs	r5, r1, #16
 801e046:	1414      	asrs	r4, r2, #16
 801e048:	fb06 5404 	mla	r4, r6, r4, r5
 801e04c:	9d02      	ldr	r5, [sp, #8]
 801e04e:	5d2e      	ldrb	r6, [r5, r4]
 801e050:	2e00      	cmp	r6, #0
 801e052:	d04c      	beq.n	801e0ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e054:	9d01      	ldr	r5, [sp, #4]
 801e056:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801e05a:	9c05      	ldr	r4, [sp, #20]
 801e05c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e060:	4366      	muls	r6, r4
 801e062:	1c74      	adds	r4, r6, #1
 801e064:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801e068:	1224      	asrs	r4, r4, #8
 801e06a:	b2a7      	uxth	r7, r4
 801e06c:	43e4      	mvns	r4, r4
 801e06e:	122e      	asrs	r6, r5, #8
 801e070:	b2e4      	uxtb	r4, r4
 801e072:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e076:	fb16 f604 	smulbb	r6, r6, r4
 801e07a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e07e:	00ed      	lsls	r5, r5, #3
 801e080:	b2ed      	uxtb	r5, r5
 801e082:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801e086:	fb15 f504 	smulbb	r5, r5, r4
 801e08a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e08e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e092:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e096:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e09a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e09e:	fb1a fa04 	smulbb	sl, sl, r4
 801e0a2:	fa5f f888 	uxtb.w	r8, r8
 801e0a6:	fb08 5507 	mla	r5, r8, r7, r5
 801e0aa:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e0ae:	fb06 a607 	mla	r6, r6, r7, sl
 801e0b2:	fa1f fc8c 	uxth.w	ip, ip
 801e0b6:	b2ad      	uxth	r5, r5
 801e0b8:	f10c 0401 	add.w	r4, ip, #1
 801e0bc:	f105 0a01 	add.w	sl, r5, #1
 801e0c0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e0c4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e0c8:	b2b6      	uxth	r6, r6
 801e0ca:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e0ce:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e0d2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e0d6:	f106 0a01 	add.w	sl, r6, #1
 801e0da:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e0de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e0e2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e0e6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e0ea:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e0ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e0f0:	f109 0901 	add.w	r9, r9, #1
 801e0f4:	4421      	add	r1, r4
 801e0f6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e0f8:	4422      	add	r2, r4
 801e0fa:	e79c      	b.n	801e036 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801e0fc:	b007      	add	sp, #28
 801e0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e102 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e10a:	b085      	sub	sp, #20
 801e10c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e10e:	468b      	mov	fp, r1
 801e110:	6861      	ldr	r1, [r4, #4]
 801e112:	9203      	str	r2, [sp, #12]
 801e114:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801e118:	fb01 2000 	mla	r0, r1, r0, r2
 801e11c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801e120:	6822      	ldr	r2, [r4, #0]
 801e122:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e126:	f8d8 2000 	ldr.w	r2, [r8]
 801e12a:	9200      	str	r2, [sp, #0]
 801e12c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e130:	9201      	str	r2, [sp, #4]
 801e132:	f1bb 0f00 	cmp.w	fp, #0
 801e136:	dc03      	bgt.n	801e140 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e138:	9a03      	ldr	r2, [sp, #12]
 801e13a:	2a00      	cmp	r2, #0
 801e13c:	f340 8146 	ble.w	801e3cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e140:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e142:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e146:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e14a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e14c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e150:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e154:	2b00      	cmp	r3, #0
 801e156:	dd0e      	ble.n	801e176 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e158:	140c      	asrs	r4, r1, #16
 801e15a:	d405      	bmi.n	801e168 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e15c:	42bc      	cmp	r4, r7
 801e15e:	da03      	bge.n	801e168 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e160:	1414      	asrs	r4, r2, #16
 801e162:	d401      	bmi.n	801e168 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e164:	42b4      	cmp	r4, r6
 801e166:	db07      	blt.n	801e178 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e168:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e16a:	3b01      	subs	r3, #1
 801e16c:	4421      	add	r1, r4
 801e16e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e170:	3002      	adds	r0, #2
 801e172:	4422      	add	r2, r4
 801e174:	e7ee      	b.n	801e154 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e176:	d017      	beq.n	801e1a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e178:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e17a:	1e5c      	subs	r4, r3, #1
 801e17c:	fb05 1504 	mla	r5, r5, r4, r1
 801e180:	142d      	asrs	r5, r5, #16
 801e182:	d409      	bmi.n	801e198 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e184:	42bd      	cmp	r5, r7
 801e186:	da07      	bge.n	801e198 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e188:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e18a:	fb05 2404 	mla	r4, r5, r4, r2
 801e18e:	1424      	asrs	r4, r4, #16
 801e190:	d402      	bmi.n	801e198 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e192:	42b4      	cmp	r4, r6
 801e194:	f2c0 80b3 	blt.w	801e2fe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e198:	2600      	movs	r6, #0
 801e19a:	199c      	adds	r4, r3, r6
 801e19c:	2c00      	cmp	r4, #0
 801e19e:	dc3e      	bgt.n	801e21e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e1a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e1a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e1a8:	f1bb 0f00 	cmp.w	fp, #0
 801e1ac:	f340 810e 	ble.w	801e3cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e1b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e1b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e1b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e1bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e1c0:	eeb0 6a62 	vmov.f32	s12, s5
 801e1c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e1c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e1cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e1d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e1d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e1d8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e1dc:	eeb0 6a43 	vmov.f32	s12, s6
 801e1e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e1e4:	ee12 2a90 	vmov	r2, s5
 801e1e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e1ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e1ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e1f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e1f6:	ee13 2a10 	vmov	r2, s6
 801e1fa:	9311      	str	r3, [sp, #68]	@ 0x44
 801e1fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e1fe:	f1bb 0b01 	subs.w	fp, fp, #1
 801e202:	fb92 f3f3 	sdiv	r3, r2, r3
 801e206:	9a03      	ldr	r2, [sp, #12]
 801e208:	9312      	str	r3, [sp, #72]	@ 0x48
 801e20a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e20e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e210:	eeb0 3a67 	vmov.f32	s6, s15
 801e214:	bf08      	it	eq
 801e216:	4613      	moveq	r3, r2
 801e218:	eef0 2a47 	vmov.f32	s5, s14
 801e21c:	e789      	b.n	801e132 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e21e:	140f      	asrs	r7, r1, #16
 801e220:	d418      	bmi.n	801e254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e222:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e226:	42bd      	cmp	r5, r7
 801e228:	dd14      	ble.n	801e254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e22a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e22e:	d411      	bmi.n	801e254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e230:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801e234:	4564      	cmp	r4, ip
 801e236:	dd0d      	ble.n	801e254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e238:	b22d      	sxth	r5, r5
 801e23a:	fb0c 7505 	mla	r5, ip, r5, r7
 801e23e:	9c01      	ldr	r4, [sp, #4]
 801e240:	5d64      	ldrb	r4, [r4, r5]
 801e242:	2cff      	cmp	r4, #255	@ 0xff
 801e244:	d10c      	bne.n	801e260 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e246:	9c00      	ldr	r4, [sp, #0]
 801e248:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801e24c:	f06f 0401 	mvn.w	r4, #1
 801e250:	4374      	muls	r4, r6
 801e252:	5305      	strh	r5, [r0, r4]
 801e254:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e256:	3e01      	subs	r6, #1
 801e258:	4421      	add	r1, r4
 801e25a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e25c:	4422      	add	r2, r4
 801e25e:	e79c      	b.n	801e19a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e260:	2c00      	cmp	r4, #0
 801e262:	d0f7      	beq.n	801e254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e264:	9f00      	ldr	r7, [sp, #0]
 801e266:	fa1f fc84 	uxth.w	ip, r4
 801e26a:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801e26e:	f06f 0501 	mvn.w	r5, #1
 801e272:	43e4      	mvns	r4, r4
 801e274:	4375      	muls	r5, r6
 801e276:	9502      	str	r5, [sp, #8]
 801e278:	5b45      	ldrh	r5, [r0, r5]
 801e27a:	b2e4      	uxtb	r4, r4
 801e27c:	122f      	asrs	r7, r5, #8
 801e27e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e282:	fb17 f704 	smulbb	r7, r7, r4
 801e286:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e28a:	00ed      	lsls	r5, r5, #3
 801e28c:	b2ed      	uxtb	r5, r5
 801e28e:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801e292:	fb15 f504 	smulbb	r5, r5, r4
 801e296:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801e29a:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801e29e:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e2a2:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801e2a6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e2aa:	fb1a fa04 	smulbb	sl, sl, r4
 801e2ae:	fa5f f989 	uxtb.w	r9, r9
 801e2b2:	fb09 550c 	mla	r5, r9, ip, r5
 801e2b6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e2ba:	fb07 a70c 	mla	r7, r7, ip, sl
 801e2be:	fa1f fe8e 	uxth.w	lr, lr
 801e2c2:	b2ad      	uxth	r5, r5
 801e2c4:	f10e 0401 	add.w	r4, lr, #1
 801e2c8:	f105 0a01 	add.w	sl, r5, #1
 801e2cc:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801e2d0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e2d4:	b2bf      	uxth	r7, r7
 801e2d6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e2da:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801e2de:	ea4a 0e0e 	orr.w	lr, sl, lr
 801e2e2:	f107 0a01 	add.w	sl, r7, #1
 801e2e6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e2ea:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e2ee:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e2f2:	9c02      	ldr	r4, [sp, #8]
 801e2f4:	ea4e 0e0a 	orr.w	lr, lr, sl
 801e2f8:	f820 e004 	strh.w	lr, [r0, r4]
 801e2fc:	e7aa      	b.n	801e254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e2fe:	f04f 0900 	mov.w	r9, #0
 801e302:	eba3 0409 	sub.w	r4, r3, r9
 801e306:	2c00      	cmp	r4, #0
 801e308:	f77f af4a 	ble.w	801e1a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e30c:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801e310:	1414      	asrs	r4, r2, #16
 801e312:	140d      	asrs	r5, r1, #16
 801e314:	fb06 5504 	mla	r5, r6, r4, r5
 801e318:	9c01      	ldr	r4, [sp, #4]
 801e31a:	5d64      	ldrb	r4, [r4, r5]
 801e31c:	2cff      	cmp	r4, #255	@ 0xff
 801e31e:	d10b      	bne.n	801e338 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e320:	9c00      	ldr	r4, [sp, #0]
 801e322:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801e326:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801e32a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e32c:	f109 0901 	add.w	r9, r9, #1
 801e330:	4421      	add	r1, r4
 801e332:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e334:	4422      	add	r2, r4
 801e336:	e7e4      	b.n	801e302 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e338:	2c00      	cmp	r4, #0
 801e33a:	d0f6      	beq.n	801e32a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e33c:	b2a7      	uxth	r7, r4
 801e33e:	43e4      	mvns	r4, r4
 801e340:	9e00      	ldr	r6, [sp, #0]
 801e342:	b2e4      	uxtb	r4, r4
 801e344:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801e348:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e34c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e350:	122e      	asrs	r6, r5, #8
 801e352:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e356:	fb16 f604 	smulbb	r6, r6, r4
 801e35a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e35e:	00ed      	lsls	r5, r5, #3
 801e360:	b2ed      	uxtb	r5, r5
 801e362:	fb15 f504 	smulbb	r5, r5, r4
 801e366:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e36a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e36e:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e372:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e376:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e37a:	fb1a fa04 	smulbb	sl, sl, r4
 801e37e:	fa5f fe8e 	uxtb.w	lr, lr
 801e382:	fb0e 5507 	mla	r5, lr, r7, r5
 801e386:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e38a:	fb06 a607 	mla	r6, r6, r7, sl
 801e38e:	fa1f fc8c 	uxth.w	ip, ip
 801e392:	b2ad      	uxth	r5, r5
 801e394:	f10c 0401 	add.w	r4, ip, #1
 801e398:	f105 0a01 	add.w	sl, r5, #1
 801e39c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e3a0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e3a4:	b2b6      	uxth	r6, r6
 801e3a6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e3aa:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e3ae:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e3b2:	f106 0a01 	add.w	sl, r6, #1
 801e3b6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e3ba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e3be:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e3c2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e3c6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e3ca:	e7ae      	b.n	801e32a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e3cc:	b005      	add	sp, #20
 801e3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3d6:	b085      	sub	sp, #20
 801e3d8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e3da:	9100      	str	r1, [sp, #0]
 801e3dc:	9203      	str	r2, [sp, #12]
 801e3de:	6841      	ldr	r1, [r0, #4]
 801e3e0:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801e3e4:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801e3e8:	9201      	str	r2, [sp, #4]
 801e3ea:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e3ee:	fb01 2404 	mla	r4, r1, r4, r2
 801e3f2:	6802      	ldr	r2, [r0, #0]
 801e3f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e3f8:	f8de 2000 	ldr.w	r2, [lr]
 801e3fc:	9202      	str	r2, [sp, #8]
 801e3fe:	9a01      	ldr	r2, [sp, #4]
 801e400:	43d6      	mvns	r6, r2
 801e402:	b2f6      	uxtb	r6, r6
 801e404:	9a00      	ldr	r2, [sp, #0]
 801e406:	2a00      	cmp	r2, #0
 801e408:	dc03      	bgt.n	801e412 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e40a:	9a03      	ldr	r2, [sp, #12]
 801e40c:	2a00      	cmp	r2, #0
 801e40e:	f340 8124 	ble.w	801e65a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e412:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e414:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e418:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e41c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e41e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e422:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e426:	2b00      	cmp	r3, #0
 801e428:	dd0e      	ble.n	801e448 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e42a:	1408      	asrs	r0, r1, #16
 801e42c:	d405      	bmi.n	801e43a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e42e:	4560      	cmp	r0, ip
 801e430:	da03      	bge.n	801e43a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e432:	1410      	asrs	r0, r2, #16
 801e434:	d401      	bmi.n	801e43a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e436:	42b8      	cmp	r0, r7
 801e438:	db07      	blt.n	801e44a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e43a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e43c:	3b01      	subs	r3, #1
 801e43e:	4401      	add	r1, r0
 801e440:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e442:	3402      	adds	r4, #2
 801e444:	4402      	add	r2, r0
 801e446:	e7ee      	b.n	801e426 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e448:	d06e      	beq.n	801e528 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e44a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e44c:	1e58      	subs	r0, r3, #1
 801e44e:	fb05 1500 	mla	r5, r5, r0, r1
 801e452:	142d      	asrs	r5, r5, #16
 801e454:	d45c      	bmi.n	801e510 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e456:	4565      	cmp	r5, ip
 801e458:	da5a      	bge.n	801e510 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e45a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e45c:	fb05 2000 	mla	r0, r5, r0, r2
 801e460:	1400      	asrs	r0, r0, #16
 801e462:	d455      	bmi.n	801e510 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e464:	42b8      	cmp	r0, r7
 801e466:	da53      	bge.n	801e510 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e468:	4699      	mov	r9, r3
 801e46a:	46a2      	mov	sl, r4
 801e46c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801e470:	f1b9 0f00 	cmp.w	r9, #0
 801e474:	dd54      	ble.n	801e520 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e476:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e47a:	140d      	asrs	r5, r1, #16
 801e47c:	1410      	asrs	r0, r2, #16
 801e47e:	fb07 5000 	mla	r0, r7, r0, r5
 801e482:	9d02      	ldr	r5, [sp, #8]
 801e484:	f109 39ff 	add.w	r9, r9, #4294967295
 801e488:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e48c:	f8ba 5000 	ldrh.w	r5, [sl]
 801e490:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e494:	122f      	asrs	r7, r5, #8
 801e496:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e49a:	fb17 f706 	smulbb	r7, r7, r6
 801e49e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e4a2:	00ed      	lsls	r5, r5, #3
 801e4a4:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801e4a8:	b2ed      	uxtb	r5, r5
 801e4aa:	fb18 f806 	smulbb	r8, r8, r6
 801e4ae:	fb15 f506 	smulbb	r5, r5, r6
 801e4b2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e4b6:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e4ba:	10c7      	asrs	r7, r0, #3
 801e4bc:	00c0      	lsls	r0, r0, #3
 801e4be:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e4c2:	b2c0      	uxtb	r0, r0
 801e4c4:	fb07 870b 	mla	r7, r7, fp, r8
 801e4c8:	fb00 500b 	mla	r0, r0, fp, r5
 801e4cc:	fa1f fc8c 	uxth.w	ip, ip
 801e4d0:	b280      	uxth	r0, r0
 801e4d2:	b2bf      	uxth	r7, r7
 801e4d4:	f10c 0501 	add.w	r5, ip, #1
 801e4d8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e4dc:	f107 0801 	add.w	r8, r7, #1
 801e4e0:	1c45      	adds	r5, r0, #1
 801e4e2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e4e6:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e4ea:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e4ec:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e4f0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e4f4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e4f8:	ea45 0c0c 	orr.w	ip, r5, ip
 801e4fc:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801e500:	4401      	add	r1, r0
 801e502:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e504:	ea4c 0c08 	orr.w	ip, ip, r8
 801e508:	f82a cb02 	strh.w	ip, [sl], #2
 801e50c:	4402      	add	r2, r0
 801e50e:	e7af      	b.n	801e470 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e510:	f04f 0800 	mov.w	r8, #0
 801e514:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801e518:	eb03 0008 	add.w	r0, r3, r8
 801e51c:	2800      	cmp	r0, #0
 801e51e:	dc41      	bgt.n	801e5a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e520:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e524:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e528:	9b00      	ldr	r3, [sp, #0]
 801e52a:	2b00      	cmp	r3, #0
 801e52c:	f340 8095 	ble.w	801e65a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e534:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e538:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e53c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e540:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e544:	eef0 6a62 	vmov.f32	s13, s5
 801e548:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e54c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e550:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e554:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e558:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e55c:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801e560:	eef0 6a43 	vmov.f32	s13, s6
 801e564:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e568:	ee12 2a90 	vmov	r2, s5
 801e56c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e570:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e572:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e576:	fb92 f3f3 	sdiv	r3, r2, r3
 801e57a:	ee13 2a10 	vmov	r2, s6
 801e57e:	9311      	str	r3, [sp, #68]	@ 0x44
 801e580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e582:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801e586:	fb92 f3f3 	sdiv	r3, r2, r3
 801e58a:	9312      	str	r3, [sp, #72]	@ 0x48
 801e58c:	9b00      	ldr	r3, [sp, #0]
 801e58e:	9a03      	ldr	r2, [sp, #12]
 801e590:	3b01      	subs	r3, #1
 801e592:	9300      	str	r3, [sp, #0]
 801e594:	eeb0 3a67 	vmov.f32	s6, s15
 801e598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e59a:	eef0 2a47 	vmov.f32	s5, s14
 801e59e:	bf08      	it	eq
 801e5a0:	4613      	moveq	r3, r2
 801e5a2:	e72f      	b.n	801e404 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e5a4:	140f      	asrs	r7, r1, #16
 801e5a6:	d451      	bmi.n	801e64c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e5a8:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e5ac:	42bd      	cmp	r5, r7
 801e5ae:	dd4d      	ble.n	801e64c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e5b0:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e5b4:	d44a      	bmi.n	801e64c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e5b6:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e5ba:	4560      	cmp	r0, ip
 801e5bc:	dd46      	ble.n	801e64c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e5be:	b22d      	sxth	r5, r5
 801e5c0:	fb0c 7505 	mla	r5, ip, r5, r7
 801e5c4:	9802      	ldr	r0, [sp, #8]
 801e5c6:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801e5ca:	f06f 0501 	mvn.w	r5, #1
 801e5ce:	fb05 fb08 	mul.w	fp, r5, r8
 801e5d2:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e5d6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e5da:	122f      	asrs	r7, r5, #8
 801e5dc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e5e0:	fb17 f706 	smulbb	r7, r7, r6
 801e5e4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e5e8:	00ed      	lsls	r5, r5, #3
 801e5ea:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801e5ee:	b2ed      	uxtb	r5, r5
 801e5f0:	fb19 f906 	smulbb	r9, r9, r6
 801e5f4:	fb15 f506 	smulbb	r5, r5, r6
 801e5f8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e5fc:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e600:	10c7      	asrs	r7, r0, #3
 801e602:	00c0      	lsls	r0, r0, #3
 801e604:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e608:	b2c0      	uxtb	r0, r0
 801e60a:	fb07 970a 	mla	r7, r7, sl, r9
 801e60e:	fb00 500a 	mla	r0, r0, sl, r5
 801e612:	fa1f fc8c 	uxth.w	ip, ip
 801e616:	b2bf      	uxth	r7, r7
 801e618:	b280      	uxth	r0, r0
 801e61a:	f10c 0501 	add.w	r5, ip, #1
 801e61e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e622:	f107 0901 	add.w	r9, r7, #1
 801e626:	1c45      	adds	r5, r0, #1
 801e628:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e62c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e630:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e634:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e638:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e63c:	ea45 0c0c 	orr.w	ip, r5, ip
 801e640:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801e644:	ea4c 0c09 	orr.w	ip, ip, r9
 801e648:	f824 c00b 	strh.w	ip, [r4, fp]
 801e64c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e64e:	f108 38ff 	add.w	r8, r8, #4294967295
 801e652:	4401      	add	r1, r0
 801e654:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e656:	4402      	add	r2, r0
 801e658:	e75e      	b.n	801e518 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e65a:	b005      	add	sp, #20
 801e65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e660 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e660:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e668:	b085      	sub	sp, #20
 801e66a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e66c:	4693      	mov	fp, r2
 801e66e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e672:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801e676:	6870      	ldr	r0, [r6, #4]
 801e678:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801e67a:	fb00 2404 	mla	r4, r0, r4, r2
 801e67e:	6832      	ldr	r2, [r6, #0]
 801e680:	9101      	str	r1, [sp, #4]
 801e682:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e686:	682a      	ldr	r2, [r5, #0]
 801e688:	9202      	str	r2, [sp, #8]
 801e68a:	9a01      	ldr	r2, [sp, #4]
 801e68c:	2a00      	cmp	r2, #0
 801e68e:	dc03      	bgt.n	801e698 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e690:	f1bb 0f00 	cmp.w	fp, #0
 801e694:	f340 809a 	ble.w	801e7cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e698:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e69a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e69e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e6a2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e6a4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e6a8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	dd0c      	ble.n	801e6ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e6b0:	1406      	asrs	r6, r0, #16
 801e6b2:	d405      	bmi.n	801e6c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e6b4:	454e      	cmp	r6, r9
 801e6b6:	da03      	bge.n	801e6c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e6b8:	1416      	asrs	r6, r2, #16
 801e6ba:	d401      	bmi.n	801e6c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e6bc:	4546      	cmp	r6, r8
 801e6be:	db05      	blt.n	801e6cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e6c0:	4470      	add	r0, lr
 801e6c2:	4462      	add	r2, ip
 801e6c4:	3b01      	subs	r3, #1
 801e6c6:	3402      	adds	r4, #2
 801e6c8:	e7f0      	b.n	801e6ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e6ca:	d00f      	beq.n	801e6ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e6cc:	1e5e      	subs	r6, r3, #1
 801e6ce:	fb0e 0706 	mla	r7, lr, r6, r0
 801e6d2:	143f      	asrs	r7, r7, #16
 801e6d4:	d541      	bpl.n	801e75a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e6d6:	4698      	mov	r8, r3
 801e6d8:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e6dc:	9603      	str	r6, [sp, #12]
 801e6de:	f1b8 0f00 	cmp.w	r8, #0
 801e6e2:	dc56      	bgt.n	801e792 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801e6e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e6e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e6ec:	9b01      	ldr	r3, [sp, #4]
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	dd6c      	ble.n	801e7cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e6f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e6f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e6fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e6fe:	eeb0 6a62 	vmov.f32	s12, s5
 801e702:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e706:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e70a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e70e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e712:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e716:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e71a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e71e:	eeb0 6a43 	vmov.f32	s12, s6
 801e722:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e726:	ee12 2a90 	vmov	r2, s5
 801e72a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e72e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e730:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e734:	fb92 fef3 	sdiv	lr, r2, r3
 801e738:	ee13 2a10 	vmov	r2, s6
 801e73c:	fb92 fcf3 	sdiv	ip, r2, r3
 801e740:	9b01      	ldr	r3, [sp, #4]
 801e742:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e746:	3b01      	subs	r3, #1
 801e748:	9301      	str	r3, [sp, #4]
 801e74a:	eeb0 3a67 	vmov.f32	s6, s15
 801e74e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e750:	eef0 2a47 	vmov.f32	s5, s14
 801e754:	bf08      	it	eq
 801e756:	465b      	moveq	r3, fp
 801e758:	e797      	b.n	801e68a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e75a:	454f      	cmp	r7, r9
 801e75c:	dabb      	bge.n	801e6d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e75e:	fb0c 2606 	mla	r6, ip, r6, r2
 801e762:	1436      	asrs	r6, r6, #16
 801e764:	d4b7      	bmi.n	801e6d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e766:	4546      	cmp	r6, r8
 801e768:	dab5      	bge.n	801e6d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e76a:	461e      	mov	r6, r3
 801e76c:	46a0      	mov	r8, r4
 801e76e:	2e00      	cmp	r6, #0
 801e770:	ddb8      	ble.n	801e6e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e772:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e776:	1417      	asrs	r7, r2, #16
 801e778:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e77c:	fb0a 9707 	mla	r7, sl, r7, r9
 801e780:	9902      	ldr	r1, [sp, #8]
 801e782:	4470      	add	r0, lr
 801e784:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e788:	4462      	add	r2, ip
 801e78a:	f828 7b02 	strh.w	r7, [r8], #2
 801e78e:	3e01      	subs	r6, #1
 801e790:	e7ed      	b.n	801e76e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801e792:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e796:	d414      	bmi.n	801e7c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e798:	68ae      	ldr	r6, [r5, #8]
 801e79a:	454e      	cmp	r6, r9
 801e79c:	dd11      	ble.n	801e7c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e79e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e7a2:	d40e      	bmi.n	801e7c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e7a4:	68ef      	ldr	r7, [r5, #12]
 801e7a6:	4557      	cmp	r7, sl
 801e7a8:	dd0b      	ble.n	801e7c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e7aa:	f06f 0101 	mvn.w	r1, #1
 801e7ae:	b236      	sxth	r6, r6
 801e7b0:	fb0a 9606 	mla	r6, sl, r6, r9
 801e7b4:	9f02      	ldr	r7, [sp, #8]
 801e7b6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e7ba:	fb01 f608 	mul.w	r6, r1, r8
 801e7be:	9903      	ldr	r1, [sp, #12]
 801e7c0:	538f      	strh	r7, [r1, r6]
 801e7c2:	4470      	add	r0, lr
 801e7c4:	4462      	add	r2, ip
 801e7c6:	f108 38ff 	add.w	r8, r8, #4294967295
 801e7ca:	e788      	b.n	801e6de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e7cc:	b005      	add	sp, #20
 801e7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e7d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e7d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e7d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7da:	b087      	sub	sp, #28
 801e7dc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e7de:	468b      	mov	fp, r1
 801e7e0:	9203      	str	r2, [sp, #12]
 801e7e2:	6841      	ldr	r1, [r0, #4]
 801e7e4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e7e8:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801e7ec:	9204      	str	r2, [sp, #16]
 801e7ee:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801e7f2:	fb01 2505 	mla	r5, r1, r5, r2
 801e7f6:	6802      	ldr	r2, [r0, #0]
 801e7f8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801e7fc:	f8d9 2000 	ldr.w	r2, [r9]
 801e800:	9201      	str	r2, [sp, #4]
 801e802:	f1bb 0f00 	cmp.w	fp, #0
 801e806:	dc03      	bgt.n	801e810 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e808:	9a03      	ldr	r2, [sp, #12]
 801e80a:	2a00      	cmp	r2, #0
 801e80c:	f340 8159 	ble.w	801eac2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e810:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e812:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801e816:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e81a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e81c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801e820:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e824:	2b00      	cmp	r3, #0
 801e826:	dd0e      	ble.n	801e846 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e828:	1402      	asrs	r2, r0, #16
 801e82a:	d405      	bmi.n	801e838 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e82c:	42ba      	cmp	r2, r7
 801e82e:	da03      	bge.n	801e838 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e830:	140a      	asrs	r2, r1, #16
 801e832:	d401      	bmi.n	801e838 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e834:	42b2      	cmp	r2, r6
 801e836:	db07      	blt.n	801e848 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e838:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e83a:	3b01      	subs	r3, #1
 801e83c:	4410      	add	r0, r2
 801e83e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e840:	3502      	adds	r5, #2
 801e842:	4411      	add	r1, r2
 801e844:	e7ee      	b.n	801e824 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e846:	d017      	beq.n	801e878 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e848:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e84a:	1e5a      	subs	r2, r3, #1
 801e84c:	fb04 0402 	mla	r4, r4, r2, r0
 801e850:	1424      	asrs	r4, r4, #16
 801e852:	d409      	bmi.n	801e868 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e854:	42bc      	cmp	r4, r7
 801e856:	da07      	bge.n	801e868 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e858:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e85a:	fb04 1202 	mla	r2, r4, r2, r1
 801e85e:	1412      	asrs	r2, r2, #16
 801e860:	d402      	bmi.n	801e868 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e862:	42b2      	cmp	r2, r6
 801e864:	f2c0 80bf 	blt.w	801e9e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e868:	2700      	movs	r7, #0
 801e86a:	19da      	adds	r2, r3, r7
 801e86c:	2a00      	cmp	r2, #0
 801e86e:	dc3e      	bgt.n	801e8ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e870:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e874:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801e878:	f1bb 0f00 	cmp.w	fp, #0
 801e87c:	f340 8121 	ble.w	801eac2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e880:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e884:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e888:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e88c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e890:	eeb0 6a62 	vmov.f32	s12, s5
 801e894:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e898:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e89c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e8a8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801e8ac:	eeb0 6a43 	vmov.f32	s12, s6
 801e8b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e8b4:	ee12 2a90 	vmov	r2, s5
 801e8b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e8bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8c6:	ee13 2a10 	vmov	r2, s6
 801e8ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e8cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8ce:	f1bb 0b01 	subs.w	fp, fp, #1
 801e8d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8d6:	9a03      	ldr	r2, [sp, #12]
 801e8d8:	9314      	str	r3, [sp, #80]	@ 0x50
 801e8da:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801e8de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8e0:	eeb0 3a67 	vmov.f32	s6, s15
 801e8e4:	bf08      	it	eq
 801e8e6:	4613      	moveq	r3, r2
 801e8e8:	eef0 2a47 	vmov.f32	s5, s14
 801e8ec:	e789      	b.n	801e802 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e8ee:	1406      	asrs	r6, r0, #16
 801e8f0:	d42d      	bmi.n	801e94e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e8f2:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801e8f6:	42b4      	cmp	r4, r6
 801e8f8:	dd29      	ble.n	801e94e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e8fa:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801e8fe:	d426      	bmi.n	801e94e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e900:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e904:	4562      	cmp	r2, ip
 801e906:	dd22      	ble.n	801e94e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e908:	b224      	sxth	r4, r4
 801e90a:	fb0c 6404 	mla	r4, ip, r4, r6
 801e90e:	9a01      	ldr	r2, [sp, #4]
 801e910:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801e914:	0e22      	lsrs	r2, r4, #24
 801e916:	d01a      	beq.n	801e94e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e918:	9e04      	ldr	r6, [sp, #16]
 801e91a:	4372      	muls	r2, r6
 801e91c:	1c56      	adds	r6, r2, #1
 801e91e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e922:	1212      	asrs	r2, r2, #8
 801e924:	0a26      	lsrs	r6, r4, #8
 801e926:	2aff      	cmp	r2, #255	@ 0xff
 801e928:	9605      	str	r6, [sp, #20]
 801e92a:	d116      	bne.n	801e95a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801e92c:	f06f 0201 	mvn.w	r2, #1
 801e930:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801e934:	fb02 fc07 	mul.w	ip, r2, r7
 801e938:	0962      	lsrs	r2, r4, #5
 801e93a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e93e:	f026 0607 	bic.w	r6, r6, #7
 801e942:	4316      	orrs	r6, r2
 801e944:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801e948:	4326      	orrs	r6, r4
 801e94a:	f825 600c 	strh.w	r6, [r5, ip]
 801e94e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e950:	3f01      	subs	r7, #1
 801e952:	4410      	add	r0, r2
 801e954:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e956:	4411      	add	r1, r2
 801e958:	e787      	b.n	801e86a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e95a:	f06f 0601 	mvn.w	r6, #1
 801e95e:	fa1f fa82 	uxth.w	sl, r2
 801e962:	43d2      	mvns	r2, r2
 801e964:	437e      	muls	r6, r7
 801e966:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801e96a:	f835 8006 	ldrh.w	r8, [r5, r6]
 801e96e:	fb1c fc0a 	smulbb	ip, ip, sl
 801e972:	b2e4      	uxtb	r4, r4
 801e974:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801e978:	fb14 f40a 	smulbb	r4, r4, sl
 801e97c:	b2d2      	uxtb	r2, r2
 801e97e:	9602      	str	r6, [sp, #8]
 801e980:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801e984:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801e988:	fb0e ce02 	mla	lr, lr, r2, ip
 801e98c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801e990:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e994:	fb16 f60a 	smulbb	r6, r6, sl
 801e998:	fa5f f888 	uxtb.w	r8, r8
 801e99c:	fb08 4402 	mla	r4, r8, r2, r4
 801e9a0:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801e9a4:	fb0c 6c02 	mla	ip, ip, r2, r6
 801e9a8:	fa1f fe8e 	uxth.w	lr, lr
 801e9ac:	b2a4      	uxth	r4, r4
 801e9ae:	f10e 0201 	add.w	r2, lr, #1
 801e9b2:	1c66      	adds	r6, r4, #1
 801e9b4:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801e9b8:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801e9bc:	fa1f fc8c 	uxth.w	ip, ip
 801e9c0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e9c4:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801e9c8:	ea46 0e0e 	orr.w	lr, r6, lr
 801e9cc:	f10c 0601 	add.w	r6, ip, #1
 801e9d0:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801e9d4:	0976      	lsrs	r6, r6, #5
 801e9d6:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801e9da:	9a02      	ldr	r2, [sp, #8]
 801e9dc:	ea4e 0e06 	orr.w	lr, lr, r6
 801e9e0:	f825 e002 	strh.w	lr, [r5, r2]
 801e9e4:	e7b3      	b.n	801e94e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e9e6:	f04f 0800 	mov.w	r8, #0
 801e9ea:	eba3 0208 	sub.w	r2, r3, r8
 801e9ee:	2a00      	cmp	r2, #0
 801e9f0:	f77f af3e 	ble.w	801e870 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e9f4:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801e9f8:	1404      	asrs	r4, r0, #16
 801e9fa:	140a      	asrs	r2, r1, #16
 801e9fc:	fb06 4202 	mla	r2, r6, r2, r4
 801ea00:	9c01      	ldr	r4, [sp, #4]
 801ea02:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801ea06:	0e22      	lsrs	r2, r4, #24
 801ea08:	d016      	beq.n	801ea38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801ea0a:	9e04      	ldr	r6, [sp, #16]
 801ea0c:	4372      	muls	r2, r6
 801ea0e:	1c56      	adds	r6, r2, #1
 801ea10:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ea14:	1212      	asrs	r2, r2, #8
 801ea16:	2aff      	cmp	r2, #255	@ 0xff
 801ea18:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801ea1c:	d113      	bne.n	801ea46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801ea1e:	0962      	lsrs	r2, r4, #5
 801ea20:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801ea24:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ea28:	f026 0607 	bic.w	r6, r6, #7
 801ea2c:	4316      	orrs	r6, r2
 801ea2e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ea32:	4326      	orrs	r6, r4
 801ea34:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801ea38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ea3a:	f108 0801 	add.w	r8, r8, #1
 801ea3e:	4410      	add	r0, r2
 801ea40:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ea42:	4411      	add	r1, r2
 801ea44:	e7d1      	b.n	801e9ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801ea46:	fa1f fa82 	uxth.w	sl, r2
 801ea4a:	43d2      	mvns	r2, r2
 801ea4c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801ea50:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801ea54:	fb17 f70a 	smulbb	r7, r7, sl
 801ea58:	b2e4      	uxtb	r4, r4
 801ea5a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ea5e:	fb14 f40a 	smulbb	r4, r4, sl
 801ea62:	b2d2      	uxtb	r2, r2
 801ea64:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ea68:	fb0c 7c02 	mla	ip, ip, r2, r7
 801ea6c:	b2f6      	uxtb	r6, r6
 801ea6e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801ea72:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ea76:	fb16 f60a 	smulbb	r6, r6, sl
 801ea7a:	fa5f fe8e 	uxtb.w	lr, lr
 801ea7e:	fb0e 4402 	mla	r4, lr, r2, r4
 801ea82:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ea86:	fb07 6702 	mla	r7, r7, r2, r6
 801ea8a:	fa1f fc8c 	uxth.w	ip, ip
 801ea8e:	b2a4      	uxth	r4, r4
 801ea90:	f10c 0201 	add.w	r2, ip, #1
 801ea94:	1c66      	adds	r6, r4, #1
 801ea96:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801ea9a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ea9e:	b2bf      	uxth	r7, r7
 801eaa0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801eaa4:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801eaa8:	ea46 0c0c 	orr.w	ip, r6, ip
 801eaac:	1c7e      	adds	r6, r7, #1
 801eaae:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801eab2:	0976      	lsrs	r6, r6, #5
 801eab4:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801eab8:	ea4c 0c06 	orr.w	ip, ip, r6
 801eabc:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801eac0:	e7ba      	b.n	801ea38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801eac2:	b007      	add	sp, #28
 801eac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eac8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eac8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ead0:	b085      	sub	sp, #20
 801ead2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ead4:	468b      	mov	fp, r1
 801ead6:	6841      	ldr	r1, [r0, #4]
 801ead8:	9203      	str	r2, [sp, #12]
 801eada:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801eade:	fb01 2404 	mla	r4, r1, r4, r2
 801eae2:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801eae6:	6802      	ldr	r2, [r0, #0]
 801eae8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eaec:	f8d8 2000 	ldr.w	r2, [r8]
 801eaf0:	9201      	str	r2, [sp, #4]
 801eaf2:	f1bb 0f00 	cmp.w	fp, #0
 801eaf6:	dc03      	bgt.n	801eb00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801eaf8:	9a03      	ldr	r2, [sp, #12]
 801eafa:	2a00      	cmp	r2, #0
 801eafc:	f340 814f 	ble.w	801ed9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801eb00:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801eb02:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801eb06:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801eb0a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801eb0c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801eb10:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	dd0e      	ble.n	801eb36 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb18:	1408      	asrs	r0, r1, #16
 801eb1a:	d405      	bmi.n	801eb28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801eb1c:	42b8      	cmp	r0, r7
 801eb1e:	da03      	bge.n	801eb28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801eb20:	1410      	asrs	r0, r2, #16
 801eb22:	d401      	bmi.n	801eb28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801eb24:	42b0      	cmp	r0, r6
 801eb26:	db07      	blt.n	801eb38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801eb28:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801eb2a:	3b01      	subs	r3, #1
 801eb2c:	4401      	add	r1, r0
 801eb2e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801eb30:	3402      	adds	r4, #2
 801eb32:	4402      	add	r2, r0
 801eb34:	e7ee      	b.n	801eb14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801eb36:	d017      	beq.n	801eb68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801eb38:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801eb3a:	1e58      	subs	r0, r3, #1
 801eb3c:	fb05 1500 	mla	r5, r5, r0, r1
 801eb40:	142d      	asrs	r5, r5, #16
 801eb42:	d409      	bmi.n	801eb58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eb44:	42bd      	cmp	r5, r7
 801eb46:	da07      	bge.n	801eb58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eb48:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801eb4a:	fb05 2000 	mla	r0, r5, r0, r2
 801eb4e:	1400      	asrs	r0, r0, #16
 801eb50:	d402      	bmi.n	801eb58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eb52:	42b0      	cmp	r0, r6
 801eb54:	f2c0 80ba 	blt.w	801eccc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801eb58:	2600      	movs	r6, #0
 801eb5a:	1998      	adds	r0, r3, r6
 801eb5c:	2800      	cmp	r0, #0
 801eb5e:	dc3e      	bgt.n	801ebde <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801eb60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb64:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eb68:	f1bb 0f00 	cmp.w	fp, #0
 801eb6c:	f340 8117 	ble.w	801ed9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801eb70:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb74:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb78:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb80:	eeb0 6a62 	vmov.f32	s12, s5
 801eb84:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb88:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb90:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb98:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801eb9c:	eeb0 6a43 	vmov.f32	s12, s6
 801eba0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eba4:	ee12 2a90 	vmov	r2, s5
 801eba8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ebac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ebae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebb6:	ee13 2a10 	vmov	r2, s6
 801ebba:	9311      	str	r3, [sp, #68]	@ 0x44
 801ebbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ebbe:	f1bb 0b01 	subs.w	fp, fp, #1
 801ebc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebc6:	9a03      	ldr	r2, [sp, #12]
 801ebc8:	9312      	str	r3, [sp, #72]	@ 0x48
 801ebca:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ebce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ebd0:	eeb0 3a67 	vmov.f32	s6, s15
 801ebd4:	bf08      	it	eq
 801ebd6:	4613      	moveq	r3, r2
 801ebd8:	eef0 2a47 	vmov.f32	s5, s14
 801ebdc:	e789      	b.n	801eaf2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ebde:	140f      	asrs	r7, r1, #16
 801ebe0:	d424      	bmi.n	801ec2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ebe2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ebe6:	42bd      	cmp	r5, r7
 801ebe8:	dd20      	ble.n	801ec2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ebea:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ebee:	d41d      	bmi.n	801ec2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ebf0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801ebf4:	4560      	cmp	r0, ip
 801ebf6:	dd19      	ble.n	801ec2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ebf8:	b22d      	sxth	r5, r5
 801ebfa:	fb0c 7505 	mla	r5, ip, r5, r7
 801ebfe:	9801      	ldr	r0, [sp, #4]
 801ec00:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ec04:	0e07      	lsrs	r7, r0, #24
 801ec06:	2fff      	cmp	r7, #255	@ 0xff
 801ec08:	d116      	bne.n	801ec38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ec0a:	f06f 0501 	mvn.w	r5, #1
 801ec0e:	fb05 f706 	mul.w	r7, r5, r6
 801ec12:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801ec16:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ec1a:	0945      	lsrs	r5, r0, #5
 801ec1c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ec20:	ea4c 0505 	orr.w	r5, ip, r5
 801ec24:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ec28:	4305      	orrs	r5, r0
 801ec2a:	53e5      	strh	r5, [r4, r7]
 801ec2c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ec2e:	3e01      	subs	r6, #1
 801ec30:	4401      	add	r1, r0
 801ec32:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ec34:	4402      	add	r2, r0
 801ec36:	e790      	b.n	801eb5a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ec38:	b2fd      	uxtb	r5, r7
 801ec3a:	2f00      	cmp	r7, #0
 801ec3c:	d0f6      	beq.n	801ec2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ec3e:	f06f 0701 	mvn.w	r7, #1
 801ec42:	fa1f f985 	uxth.w	r9, r5
 801ec46:	43ed      	mvns	r5, r5
 801ec48:	4377      	muls	r7, r6
 801ec4a:	f834 e007 	ldrh.w	lr, [r4, r7]
 801ec4e:	9702      	str	r7, [sp, #8]
 801ec50:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ec54:	fb17 f709 	smulbb	r7, r7, r9
 801ec58:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ec5c:	b2c0      	uxtb	r0, r0
 801ec5e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ec62:	fb10 f009 	smulbb	r0, r0, r9
 801ec66:	b2ed      	uxtb	r5, r5
 801ec68:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ec6c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ec70:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801ec74:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ec78:	fb1a fa09 	smulbb	sl, sl, r9
 801ec7c:	fa5f fe8e 	uxtb.w	lr, lr
 801ec80:	fb0e 0005 	mla	r0, lr, r5, r0
 801ec84:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ec88:	fb07 a705 	mla	r7, r7, r5, sl
 801ec8c:	b280      	uxth	r0, r0
 801ec8e:	fa1f fc8c 	uxth.w	ip, ip
 801ec92:	f100 0a01 	add.w	sl, r0, #1
 801ec96:	f10c 0501 	add.w	r5, ip, #1
 801ec9a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ec9e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801eca2:	b2bf      	uxth	r7, r7
 801eca4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eca8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801ecac:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ecb0:	f107 0a01 	add.w	sl, r7, #1
 801ecb4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ecb8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ecbc:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ecc0:	9802      	ldr	r0, [sp, #8]
 801ecc2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ecc6:	f824 c000 	strh.w	ip, [r4, r0]
 801ecca:	e7af      	b.n	801ec2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801eccc:	f04f 0e00 	mov.w	lr, #0
 801ecd0:	eba3 000e 	sub.w	r0, r3, lr
 801ecd4:	2800      	cmp	r0, #0
 801ecd6:	f77f af43 	ble.w	801eb60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ecda:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ecde:	140d      	asrs	r5, r1, #16
 801ece0:	1410      	asrs	r0, r2, #16
 801ece2:	fb06 5000 	mla	r0, r6, r0, r5
 801ece6:	9d01      	ldr	r5, [sp, #4]
 801ece8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ecec:	0e2e      	lsrs	r6, r5, #24
 801ecee:	2eff      	cmp	r6, #255	@ 0xff
 801ecf0:	d112      	bne.n	801ed18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ecf2:	482c      	ldr	r0, [pc, #176]	@ (801eda4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801ecf4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ecf8:	0968      	lsrs	r0, r5, #5
 801ecfa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ecfe:	4330      	orrs	r0, r6
 801ed00:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ed04:	4328      	orrs	r0, r5
 801ed06:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801ed0a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ed0c:	f10e 0e01 	add.w	lr, lr, #1
 801ed10:	4401      	add	r1, r0
 801ed12:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ed14:	4402      	add	r2, r0
 801ed16:	e7db      	b.n	801ecd0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ed18:	b2f0      	uxtb	r0, r6
 801ed1a:	2e00      	cmp	r6, #0
 801ed1c:	d0f5      	beq.n	801ed0a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ed1e:	fa1f f980 	uxth.w	r9, r0
 801ed22:	43c0      	mvns	r0, r0
 801ed24:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ed28:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ed2c:	fb16 f609 	smulbb	r6, r6, r9
 801ed30:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ed34:	b2ed      	uxtb	r5, r5
 801ed36:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ed3a:	fb15 f509 	smulbb	r5, r5, r9
 801ed3e:	b2c0      	uxtb	r0, r0
 801ed40:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ed44:	fb07 6700 	mla	r7, r7, r0, r6
 801ed48:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ed4c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ed50:	fb1a fa09 	smulbb	sl, sl, r9
 801ed54:	fa5f fc8c 	uxtb.w	ip, ip
 801ed58:	fb0c 5500 	mla	r5, ip, r0, r5
 801ed5c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ed60:	fb06 a600 	mla	r6, r6, r0, sl
 801ed64:	b2bf      	uxth	r7, r7
 801ed66:	b2ad      	uxth	r5, r5
 801ed68:	1c78      	adds	r0, r7, #1
 801ed6a:	f105 0a01 	add.w	sl, r5, #1
 801ed6e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ed72:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ed76:	b2b6      	uxth	r6, r6
 801ed78:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ed7c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801ed80:	ea4a 0707 	orr.w	r7, sl, r7
 801ed84:	f106 0a01 	add.w	sl, r6, #1
 801ed88:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ed8c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ed90:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ed94:	ea47 070a 	orr.w	r7, r7, sl
 801ed98:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801ed9c:	e7b5      	b.n	801ed0a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ed9e:	b005      	add	sp, #20
 801eda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eda4:	fffff800 	.word	0xfffff800

0801eda8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eda8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801edac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edb0:	b087      	sub	sp, #28
 801edb2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801edb4:	468b      	mov	fp, r1
 801edb6:	9203      	str	r2, [sp, #12]
 801edb8:	6841      	ldr	r1, [r0, #4]
 801edba:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801edbe:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801edc2:	9204      	str	r2, [sp, #16]
 801edc4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801edc8:	fb01 2404 	mla	r4, r1, r4, r2
 801edcc:	6802      	ldr	r2, [r0, #0]
 801edce:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801edd2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801edd6:	3201      	adds	r2, #1
 801edd8:	f022 0201 	bic.w	r2, r2, #1
 801eddc:	9200      	str	r2, [sp, #0]
 801edde:	f8d9 2000 	ldr.w	r2, [r9]
 801ede2:	9201      	str	r2, [sp, #4]
 801ede4:	f1bb 0f00 	cmp.w	fp, #0
 801ede8:	dc03      	bgt.n	801edf2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801edea:	9a03      	ldr	r2, [sp, #12]
 801edec:	2a00      	cmp	r2, #0
 801edee:	f340 816a 	ble.w	801f0c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801edf2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801edf4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801edf8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801edfc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801edfe:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ee02:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ee06:	2b00      	cmp	r3, #0
 801ee08:	dd0e      	ble.n	801ee28 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ee0a:	1402      	asrs	r2, r0, #16
 801ee0c:	d405      	bmi.n	801ee1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ee0e:	42ba      	cmp	r2, r7
 801ee10:	da03      	bge.n	801ee1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ee12:	140a      	asrs	r2, r1, #16
 801ee14:	d401      	bmi.n	801ee1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ee16:	42b2      	cmp	r2, r6
 801ee18:	db07      	blt.n	801ee2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ee1a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ee1c:	3b01      	subs	r3, #1
 801ee1e:	4410      	add	r0, r2
 801ee20:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ee22:	3402      	adds	r4, #2
 801ee24:	4411      	add	r1, r2
 801ee26:	e7ee      	b.n	801ee06 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ee28:	d017      	beq.n	801ee5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ee2a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ee2c:	1e5a      	subs	r2, r3, #1
 801ee2e:	fb05 0502 	mla	r5, r5, r2, r0
 801ee32:	142d      	asrs	r5, r5, #16
 801ee34:	d409      	bmi.n	801ee4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ee36:	42bd      	cmp	r5, r7
 801ee38:	da07      	bge.n	801ee4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ee3a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ee3c:	fb05 1202 	mla	r2, r5, r2, r1
 801ee40:	1412      	asrs	r2, r2, #16
 801ee42:	d402      	bmi.n	801ee4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ee44:	42b2      	cmp	r2, r6
 801ee46:	f2c0 80c8 	blt.w	801efda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801ee4a:	2700      	movs	r7, #0
 801ee4c:	19da      	adds	r2, r3, r7
 801ee4e:	2a00      	cmp	r2, #0
 801ee50:	dc3e      	bgt.n	801eed0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ee52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee56:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ee5a:	f1bb 0f00 	cmp.w	fp, #0
 801ee5e:	f340 8132 	ble.w	801f0c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ee62:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee6a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ee6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee72:	eeb0 6a62 	vmov.f32	s12, s5
 801ee76:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee8a:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801ee8e:	eeb0 6a43 	vmov.f32	s12, s6
 801ee92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee96:	ee12 2a90 	vmov	r2, s5
 801ee9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eea0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eea4:	fb92 f3f3 	sdiv	r3, r2, r3
 801eea8:	ee13 2a10 	vmov	r2, s6
 801eeac:	9313      	str	r3, [sp, #76]	@ 0x4c
 801eeae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eeb0:	f1bb 0b01 	subs.w	fp, fp, #1
 801eeb4:	fb92 f3f3 	sdiv	r3, r2, r3
 801eeb8:	9a03      	ldr	r2, [sp, #12]
 801eeba:	9314      	str	r3, [sp, #80]	@ 0x50
 801eebc:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801eec0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eec2:	eeb0 3a67 	vmov.f32	s6, s15
 801eec6:	bf08      	it	eq
 801eec8:	4613      	moveq	r3, r2
 801eeca:	eef0 2a47 	vmov.f32	s5, s14
 801eece:	e789      	b.n	801ede4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801eed0:	1405      	asrs	r5, r0, #16
 801eed2:	d436      	bmi.n	801ef42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801eed4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801eed8:	42aa      	cmp	r2, r5
 801eeda:	dd32      	ble.n	801ef42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801eedc:	140e      	asrs	r6, r1, #16
 801eede:	d430      	bmi.n	801ef42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801eee0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801eee4:	42b2      	cmp	r2, r6
 801eee6:	dd2c      	ble.n	801ef42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801eee8:	9a00      	ldr	r2, [sp, #0]
 801eeea:	fb06 5502 	mla	r5, r6, r2, r5
 801eeee:	9e01      	ldr	r6, [sp, #4]
 801eef0:	086a      	lsrs	r2, r5, #1
 801eef2:	5cb2      	ldrb	r2, [r6, r2]
 801eef4:	07ee      	lsls	r6, r5, #31
 801eef6:	bf54      	ite	pl
 801eef8:	f002 020f 	andpl.w	r2, r2, #15
 801eefc:	1112      	asrmi	r2, r2, #4
 801eefe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ef02:	b2d2      	uxtb	r2, r2
 801ef04:	b1ea      	cbz	r2, 801ef42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ef06:	9d04      	ldr	r5, [sp, #16]
 801ef08:	436a      	muls	r2, r5
 801ef0a:	1c55      	adds	r5, r2, #1
 801ef0c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ef10:	4d6e      	ldr	r5, [pc, #440]	@ (801f0cc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ef12:	1212      	asrs	r2, r2, #8
 801ef14:	682d      	ldr	r5, [r5, #0]
 801ef16:	2aff      	cmp	r2, #255	@ 0xff
 801ef18:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ef1c:	9605      	str	r6, [sp, #20]
 801ef1e:	d116      	bne.n	801ef4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ef20:	f06f 0201 	mvn.w	r2, #1
 801ef24:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801ef28:	fb02 fc07 	mul.w	ip, r2, r7
 801ef2c:	096a      	lsrs	r2, r5, #5
 801ef2e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ef32:	f026 0607 	bic.w	r6, r6, #7
 801ef36:	4316      	orrs	r6, r2
 801ef38:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ef3c:	432e      	orrs	r6, r5
 801ef3e:	f824 600c 	strh.w	r6, [r4, ip]
 801ef42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ef44:	3f01      	subs	r7, #1
 801ef46:	4410      	add	r0, r2
 801ef48:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ef4a:	4411      	add	r1, r2
 801ef4c:	e77e      	b.n	801ee4c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ef4e:	f06f 0601 	mvn.w	r6, #1
 801ef52:	fa1f fa82 	uxth.w	sl, r2
 801ef56:	43d2      	mvns	r2, r2
 801ef58:	437e      	muls	r6, r7
 801ef5a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801ef5e:	f834 8006 	ldrh.w	r8, [r4, r6]
 801ef62:	fb1c fc0a 	smulbb	ip, ip, sl
 801ef66:	b2ed      	uxtb	r5, r5
 801ef68:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801ef6c:	fb15 f50a 	smulbb	r5, r5, sl
 801ef70:	b2d2      	uxtb	r2, r2
 801ef72:	9602      	str	r6, [sp, #8]
 801ef74:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801ef78:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801ef7c:	fb0e ce02 	mla	lr, lr, r2, ip
 801ef80:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801ef84:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ef88:	fb16 f60a 	smulbb	r6, r6, sl
 801ef8c:	fa5f f888 	uxtb.w	r8, r8
 801ef90:	fb08 5502 	mla	r5, r8, r2, r5
 801ef94:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801ef98:	fb0c 6c02 	mla	ip, ip, r2, r6
 801ef9c:	fa1f fe8e 	uxth.w	lr, lr
 801efa0:	b2ad      	uxth	r5, r5
 801efa2:	f10e 0201 	add.w	r2, lr, #1
 801efa6:	1c6e      	adds	r6, r5, #1
 801efa8:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801efac:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801efb0:	fa1f fc8c 	uxth.w	ip, ip
 801efb4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801efb8:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801efbc:	ea46 0e0e 	orr.w	lr, r6, lr
 801efc0:	f10c 0601 	add.w	r6, ip, #1
 801efc4:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801efc8:	0976      	lsrs	r6, r6, #5
 801efca:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801efce:	9a02      	ldr	r2, [sp, #8]
 801efd0:	ea4e 0e06 	orr.w	lr, lr, r6
 801efd4:	f824 e002 	strh.w	lr, [r4, r2]
 801efd8:	e7b3      	b.n	801ef42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801efda:	f04f 0800 	mov.w	r8, #0
 801efde:	eba3 0208 	sub.w	r2, r3, r8
 801efe2:	2a00      	cmp	r2, #0
 801efe4:	f77f af35 	ble.w	801ee52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801efe8:	9e00      	ldr	r6, [sp, #0]
 801efea:	1402      	asrs	r2, r0, #16
 801efec:	140d      	asrs	r5, r1, #16
 801efee:	fb06 2505 	mla	r5, r6, r5, r2
 801eff2:	9e01      	ldr	r6, [sp, #4]
 801eff4:	086a      	lsrs	r2, r5, #1
 801eff6:	5cb2      	ldrb	r2, [r6, r2]
 801eff8:	07ed      	lsls	r5, r5, #31
 801effa:	bf54      	ite	pl
 801effc:	f002 020f 	andpl.w	r2, r2, #15
 801f000:	1112      	asrmi	r2, r2, #4
 801f002:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f006:	b2d2      	uxtb	r2, r2
 801f008:	b1c2      	cbz	r2, 801f03c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f00a:	9d04      	ldr	r5, [sp, #16]
 801f00c:	436a      	muls	r2, r5
 801f00e:	1c55      	adds	r5, r2, #1
 801f010:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801f014:	4d2d      	ldr	r5, [pc, #180]	@ (801f0cc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801f016:	1212      	asrs	r2, r2, #8
 801f018:	682e      	ldr	r6, [r5, #0]
 801f01a:	2aff      	cmp	r2, #255	@ 0xff
 801f01c:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801f020:	d113      	bne.n	801f04a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f022:	0972      	lsrs	r2, r6, #5
 801f024:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801f028:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f02c:	f025 0507 	bic.w	r5, r5, #7
 801f030:	4315      	orrs	r5, r2
 801f032:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801f036:	4335      	orrs	r5, r6
 801f038:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801f03c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f03e:	f108 0801 	add.w	r8, r8, #1
 801f042:	4410      	add	r0, r2
 801f044:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f046:	4411      	add	r1, r2
 801f048:	e7c9      	b.n	801efde <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f04a:	fa1f fa82 	uxth.w	sl, r2
 801f04e:	43d2      	mvns	r2, r2
 801f050:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801f054:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801f058:	fb17 f70a 	smulbb	r7, r7, sl
 801f05c:	b2f6      	uxtb	r6, r6
 801f05e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f062:	fb16 f60a 	smulbb	r6, r6, sl
 801f066:	b2d2      	uxtb	r2, r2
 801f068:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f06c:	fb0c 7c02 	mla	ip, ip, r2, r7
 801f070:	b2ed      	uxtb	r5, r5
 801f072:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801f076:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f07a:	fb15 f50a 	smulbb	r5, r5, sl
 801f07e:	fa5f fe8e 	uxtb.w	lr, lr
 801f082:	fb0e 6602 	mla	r6, lr, r2, r6
 801f086:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f08a:	fb07 5702 	mla	r7, r7, r2, r5
 801f08e:	fa1f fc8c 	uxth.w	ip, ip
 801f092:	b2b6      	uxth	r6, r6
 801f094:	f10c 0201 	add.w	r2, ip, #1
 801f098:	1c75      	adds	r5, r6, #1
 801f09a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801f09e:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801f0a2:	b2bf      	uxth	r7, r7
 801f0a4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f0a8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f0ac:	ea45 0c0c 	orr.w	ip, r5, ip
 801f0b0:	1c7d      	adds	r5, r7, #1
 801f0b2:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801f0b6:	096d      	lsrs	r5, r5, #5
 801f0b8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f0bc:	ea4c 0c05 	orr.w	ip, ip, r5
 801f0c0:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801f0c4:	e7ba      	b.n	801f03c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f0c6:	b007      	add	sp, #28
 801f0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0cc:	2005ba90 	.word	0x2005ba90

0801f0d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f0d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0d8:	b087      	sub	sp, #28
 801f0da:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f0dc:	9101      	str	r1, [sp, #4]
 801f0de:	6841      	ldr	r1, [r0, #4]
 801f0e0:	9205      	str	r2, [sp, #20]
 801f0e2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801f0e6:	fb01 2404 	mla	r4, r1, r4, r2
 801f0ea:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801f0ee:	6802      	ldr	r2, [r0, #0]
 801f0f0:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 801f3e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801f0f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f0f8:	f8db 2008 	ldr.w	r2, [fp, #8]
 801f0fc:	3201      	adds	r2, #1
 801f0fe:	f022 0201 	bic.w	r2, r2, #1
 801f102:	9202      	str	r2, [sp, #8]
 801f104:	f8db 2000 	ldr.w	r2, [fp]
 801f108:	9203      	str	r2, [sp, #12]
 801f10a:	9a01      	ldr	r2, [sp, #4]
 801f10c:	2a00      	cmp	r2, #0
 801f10e:	dc03      	bgt.n	801f118 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f110:	9a05      	ldr	r2, [sp, #20]
 801f112:	2a00      	cmp	r2, #0
 801f114:	f340 8162 	ble.w	801f3dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f118:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f11a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f11e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f122:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f124:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801f128:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	dd0e      	ble.n	801f14e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f130:	1402      	asrs	r2, r0, #16
 801f132:	d405      	bmi.n	801f140 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f134:	42ba      	cmp	r2, r7
 801f136:	da03      	bge.n	801f140 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f138:	140a      	asrs	r2, r1, #16
 801f13a:	d401      	bmi.n	801f140 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f13c:	42b2      	cmp	r2, r6
 801f13e:	db07      	blt.n	801f150 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f140:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f142:	3b01      	subs	r3, #1
 801f144:	4410      	add	r0, r2
 801f146:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f148:	3402      	adds	r4, #2
 801f14a:	4411      	add	r1, r2
 801f14c:	e7ee      	b.n	801f12c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f14e:	d017      	beq.n	801f180 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f150:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f152:	1e5a      	subs	r2, r3, #1
 801f154:	fb05 0502 	mla	r5, r5, r2, r0
 801f158:	142d      	asrs	r5, r5, #16
 801f15a:	d409      	bmi.n	801f170 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f15c:	42bd      	cmp	r5, r7
 801f15e:	da07      	bge.n	801f170 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f160:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f162:	fb05 1202 	mla	r2, r5, r2, r1
 801f166:	1412      	asrs	r2, r2, #16
 801f168:	d402      	bmi.n	801f170 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f16a:	42b2      	cmp	r2, r6
 801f16c:	f2c0 80c3 	blt.w	801f2f6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801f170:	2500      	movs	r5, #0
 801f172:	195a      	adds	r2, r3, r5
 801f174:	2a00      	cmp	r2, #0
 801f176:	dc3f      	bgt.n	801f1f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f178:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f17c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f180:	9b01      	ldr	r3, [sp, #4]
 801f182:	2b00      	cmp	r3, #0
 801f184:	f340 812a 	ble.w	801f3dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f188:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f18c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f190:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f194:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f198:	eeb0 6a62 	vmov.f32	s12, s5
 801f19c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f1a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f1a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f1a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f1ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f1b0:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801f1b4:	eeb0 6a43 	vmov.f32	s12, s6
 801f1b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f1bc:	ee12 2a90 	vmov	r2, s5
 801f1c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f1c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f1c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f1ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1ce:	ee13 2a10 	vmov	r2, s6
 801f1d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f1d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f1d6:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801f1da:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1de:	9314      	str	r3, [sp, #80]	@ 0x50
 801f1e0:	9b01      	ldr	r3, [sp, #4]
 801f1e2:	9a05      	ldr	r2, [sp, #20]
 801f1e4:	3b01      	subs	r3, #1
 801f1e6:	9301      	str	r3, [sp, #4]
 801f1e8:	eeb0 3a67 	vmov.f32	s6, s15
 801f1ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f1ee:	eef0 2a47 	vmov.f32	s5, s14
 801f1f2:	bf08      	it	eq
 801f1f4:	4613      	moveq	r3, r2
 801f1f6:	e788      	b.n	801f10a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f1f8:	1406      	asrs	r6, r0, #16
 801f1fa:	d42c      	bmi.n	801f256 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f1fc:	f8db 2008 	ldr.w	r2, [fp, #8]
 801f200:	42b2      	cmp	r2, r6
 801f202:	dd28      	ble.n	801f256 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f204:	140f      	asrs	r7, r1, #16
 801f206:	d426      	bmi.n	801f256 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f208:	f8db 200c 	ldr.w	r2, [fp, #12]
 801f20c:	42ba      	cmp	r2, r7
 801f20e:	dd22      	ble.n	801f256 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f210:	9a02      	ldr	r2, [sp, #8]
 801f212:	fb07 6602 	mla	r6, r7, r2, r6
 801f216:	9f03      	ldr	r7, [sp, #12]
 801f218:	0872      	lsrs	r2, r6, #1
 801f21a:	5cba      	ldrb	r2, [r7, r2]
 801f21c:	07f6      	lsls	r6, r6, #31
 801f21e:	bf54      	ite	pl
 801f220:	f002 020f 	andpl.w	r2, r2, #15
 801f224:	1112      	asrmi	r2, r2, #4
 801f226:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f22a:	b2d2      	uxtb	r2, r2
 801f22c:	2aff      	cmp	r2, #255	@ 0xff
 801f22e:	d118      	bne.n	801f262 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801f230:	f06f 0601 	mvn.w	r6, #1
 801f234:	f8d8 2000 	ldr.w	r2, [r8]
 801f238:	fb06 f705 	mul.w	r7, r6, r5
 801f23c:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801f240:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801f244:	0956      	lsrs	r6, r2, #5
 801f246:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f24a:	ea4c 0606 	orr.w	r6, ip, r6
 801f24e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f252:	4316      	orrs	r6, r2
 801f254:	53e6      	strh	r6, [r4, r7]
 801f256:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f258:	3d01      	subs	r5, #1
 801f25a:	4410      	add	r0, r2
 801f25c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f25e:	4411      	add	r1, r2
 801f260:	e787      	b.n	801f172 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f262:	2a00      	cmp	r2, #0
 801f264:	d0f7      	beq.n	801f256 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f266:	f06f 0601 	mvn.w	r6, #1
 801f26a:	fa1f f982 	uxth.w	r9, r2
 801f26e:	43d2      	mvns	r2, r2
 801f270:	436e      	muls	r6, r5
 801f272:	f8d8 c000 	ldr.w	ip, [r8]
 801f276:	f834 e006 	ldrh.w	lr, [r4, r6]
 801f27a:	9604      	str	r6, [sp, #16]
 801f27c:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801f280:	fb16 f609 	smulbb	r6, r6, r9
 801f284:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801f288:	fa5f fc8c 	uxtb.w	ip, ip
 801f28c:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f290:	fb1c fc09 	smulbb	ip, ip, r9
 801f294:	b2d2      	uxtb	r2, r2
 801f296:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f29a:	fb07 6702 	mla	r7, r7, r2, r6
 801f29e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f2a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f2a6:	fb1a fa09 	smulbb	sl, sl, r9
 801f2aa:	fa5f fe8e 	uxtb.w	lr, lr
 801f2ae:	fb0e cc02 	mla	ip, lr, r2, ip
 801f2b2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f2b6:	fb06 a602 	mla	r6, r6, r2, sl
 801f2ba:	b2bf      	uxth	r7, r7
 801f2bc:	fa1f fc8c 	uxth.w	ip, ip
 801f2c0:	1c7a      	adds	r2, r7, #1
 801f2c2:	f10c 0a01 	add.w	sl, ip, #1
 801f2c6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f2ca:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f2ce:	b2b6      	uxth	r6, r6
 801f2d0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f2d4:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f2d8:	ea4a 0707 	orr.w	r7, sl, r7
 801f2dc:	f106 0a01 	add.w	sl, r6, #1
 801f2e0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f2e4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f2e8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f2ec:	9a04      	ldr	r2, [sp, #16]
 801f2ee:	ea47 070a 	orr.w	r7, r7, sl
 801f2f2:	52a7      	strh	r7, [r4, r2]
 801f2f4:	e7af      	b.n	801f256 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f2f6:	f04f 0e00 	mov.w	lr, #0
 801f2fa:	eba3 020e 	sub.w	r2, r3, lr
 801f2fe:	2a00      	cmp	r2, #0
 801f300:	f77f af3a 	ble.w	801f178 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f304:	9e02      	ldr	r6, [sp, #8]
 801f306:	1402      	asrs	r2, r0, #16
 801f308:	140d      	asrs	r5, r1, #16
 801f30a:	fb06 2505 	mla	r5, r6, r5, r2
 801f30e:	9e03      	ldr	r6, [sp, #12]
 801f310:	086a      	lsrs	r2, r5, #1
 801f312:	5cb2      	ldrb	r2, [r6, r2]
 801f314:	07ed      	lsls	r5, r5, #31
 801f316:	bf54      	ite	pl
 801f318:	f002 020f 	andpl.w	r2, r2, #15
 801f31c:	1112      	asrmi	r2, r2, #4
 801f31e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f322:	b2d2      	uxtb	r2, r2
 801f324:	2aff      	cmp	r2, #255	@ 0xff
 801f326:	d115      	bne.n	801f354 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f328:	f8d8 5000 	ldr.w	r5, [r8]
 801f32c:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 801f330:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801f334:	096a      	lsrs	r2, r5, #5
 801f336:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f33a:	4332      	orrs	r2, r6
 801f33c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f340:	432a      	orrs	r2, r5
 801f342:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801f346:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f348:	f10e 0e01 	add.w	lr, lr, #1
 801f34c:	4410      	add	r0, r2
 801f34e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f350:	4411      	add	r1, r2
 801f352:	e7d2      	b.n	801f2fa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801f354:	2a00      	cmp	r2, #0
 801f356:	d0f6      	beq.n	801f346 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f358:	fa1f f982 	uxth.w	r9, r2
 801f35c:	43d2      	mvns	r2, r2
 801f35e:	f8d8 7000 	ldr.w	r7, [r8]
 801f362:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f366:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801f36a:	fb15 f509 	smulbb	r5, r5, r9
 801f36e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801f372:	b2ff      	uxtb	r7, r7
 801f374:	ea4f 262c 	mov.w	r6, ip, asr #8
 801f378:	fb17 f709 	smulbb	r7, r7, r9
 801f37c:	b2d2      	uxtb	r2, r2
 801f37e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f382:	fb06 5602 	mla	r6, r6, r2, r5
 801f386:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f38a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f38e:	fb1a fa09 	smulbb	sl, sl, r9
 801f392:	fa5f fc8c 	uxtb.w	ip, ip
 801f396:	fb0c 7702 	mla	r7, ip, r2, r7
 801f39a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f39e:	fb05 a502 	mla	r5, r5, r2, sl
 801f3a2:	b2b6      	uxth	r6, r6
 801f3a4:	b2bf      	uxth	r7, r7
 801f3a6:	1c72      	adds	r2, r6, #1
 801f3a8:	f107 0a01 	add.w	sl, r7, #1
 801f3ac:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f3b0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f3b4:	b2ad      	uxth	r5, r5
 801f3b6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f3ba:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801f3be:	ea4a 0606 	orr.w	r6, sl, r6
 801f3c2:	f105 0a01 	add.w	sl, r5, #1
 801f3c6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f3ca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f3ce:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f3d2:	ea46 060a 	orr.w	r6, r6, sl
 801f3d6:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801f3da:	e7b4      	b.n	801f346 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f3dc:	b007      	add	sp, #28
 801f3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3e2:	bf00      	nop
 801f3e4:	2005ba90 	.word	0x2005ba90

0801f3e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 801f3e8:	4770      	bx	lr

0801f3ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801f3ea:	4770      	bx	lr

0801f3ec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801f3ec:	4770      	bx	lr

0801f3ee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801f3ee:	4770      	bx	lr

0801f3f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f3f0:	4770      	bx	lr

0801f3f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f3f2:	4770      	bx	lr

0801f3f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f3f4:	4770      	bx	lr

0801f3f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f3f6:	4770      	bx	lr

0801f3f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f3f8:	4770      	bx	lr

0801f3fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f3fa:	4770      	bx	lr

0801f3fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f3fc:	4770      	bx	lr

0801f3fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f3fe:	4770      	bx	lr

0801f400 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f400:	4770      	bx	lr

0801f402 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f402:	4770      	bx	lr

0801f404 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f404:	4770      	bx	lr

0801f406 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f406:	4770      	bx	lr

0801f408 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f408:	4770      	bx	lr

0801f40a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f40a:	4770      	bx	lr

0801f40c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f40c:	4770      	bx	lr

0801f40e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f40e:	4770      	bx	lr

0801f410 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f410:	4770      	bx	lr

0801f412 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f412:	4770      	bx	lr

0801f414 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f414:	4770      	bx	lr

0801f416 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f416:	4770      	bx	lr

0801f418 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f418:	4770      	bx	lr

0801f41a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f41a:	4770      	bx	lr

0801f41c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f41c:	4770      	bx	lr

0801f41e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f41e:	4770      	bx	lr

0801f420 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f420:	4770      	bx	lr

0801f422 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f422:	4770      	bx	lr

0801f424 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f424:	4770      	bx	lr

0801f426 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f426:	4770      	bx	lr

0801f428 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f42c:	b088      	sub	sp, #32
 801f42e:	ac08      	add	r4, sp, #32
 801f430:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801f434:	4606      	mov	r6, r0
 801f436:	4620      	mov	r0, r4
 801f438:	4688      	mov	r8, r1
 801f43a:	4691      	mov	r9, r2
 801f43c:	f7fd fc32 	bl	801cca4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f440:	6833      	ldr	r3, [r6, #0]
 801f442:	4605      	mov	r5, r0
 801f444:	4620      	mov	r0, r4
 801f446:	699f      	ldr	r7, [r3, #24]
 801f448:	f7fd fb3a 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f44c:	4682      	mov	sl, r0
 801f44e:	4620      	mov	r0, r4
 801f450:	f7fd fb6a 	bl	801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f454:	9500      	str	r5, [sp, #0]
 801f456:	e9cd a001 	strd	sl, r0, [sp, #4]
 801f45a:	464b      	mov	r3, r9
 801f45c:	a806      	add	r0, sp, #24
 801f45e:	4642      	mov	r2, r8
 801f460:	4631      	mov	r1, r6
 801f462:	47b8      	blx	r7
 801f464:	4628      	mov	r0, r5
 801f466:	b008      	add	sp, #32
 801f468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801f46c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f470:	2300      	movs	r3, #0
 801f472:	9300      	str	r3, [sp, #0]
 801f474:	4b3d      	ldr	r3, [pc, #244]	@ (801f56c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801f476:	781b      	ldrb	r3, [r3, #0]
 801f478:	2b00      	cmp	r3, #0
 801f47a:	d137      	bne.n	801f4ec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801f47c:	4a3c      	ldr	r2, [pc, #240]	@ (801f570 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f47e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f482:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f486:	2b00      	cmp	r3, #0
 801f488:	d132      	bne.n	801f4f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801f48a:	4b3a      	ldr	r3, [pc, #232]	@ (801f574 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f48c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f490:	6808      	ldr	r0, [r1, #0]
 801f492:	6849      	ldr	r1, [r1, #4]
 801f494:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f498:	ac02      	add	r4, sp, #8
 801f49a:	ab02      	add	r3, sp, #8
 801f49c:	c303      	stmia	r3!, {r0, r1}
 801f49e:	4669      	mov	r1, sp
 801f4a0:	4620      	mov	r0, r4
 801f4a2:	f7f9 ff6f 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f4a6:	4668      	mov	r0, sp
 801f4a8:	f7f9 ff44 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f4ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f4b0:	f8bd 2000 	ldrh.w	r2, [sp]
 801f4b4:	4d30      	ldr	r5, [pc, #192]	@ (801f578 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801f4b6:	4413      	add	r3, r2
 801f4b8:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f4bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f4c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f4c4:	6828      	ldr	r0, [r5, #0]
 801f4c6:	4413      	add	r3, r2
 801f4c8:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f4cc:	6803      	ldr	r3, [r0, #0]
 801f4ce:	462f      	mov	r7, r5
 801f4d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f4d2:	4798      	blx	r3
 801f4d4:	f010 0f01 	tst.w	r0, #1
 801f4d8:	d00c      	beq.n	801f4f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801f4da:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f4de:	6828      	ldr	r0, [r5, #0]
 801f4e0:	6803      	ldr	r3, [r0, #0]
 801f4e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f4e4:	4798      	blx	r3
 801f4e6:	b004      	add	sp, #16
 801f4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f4ec:	4a21      	ldr	r2, [pc, #132]	@ (801f574 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f4ee:	e7c6      	b.n	801f47e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f4f0:	4b1f      	ldr	r3, [pc, #124]	@ (801f570 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f4f2:	e7cb      	b.n	801f48c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f4f4:	6838      	ldr	r0, [r7, #0]
 801f4f6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801f4fa:	6803      	ldr	r3, [r0, #0]
 801f4fc:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801f500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f502:	4798      	blx	r3
 801f504:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f508:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f50c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801f510:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801f514:	fb16 3602 	smlabb	r6, r6, r2, r3
 801f518:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801f51c:	6838      	ldr	r0, [r7, #0]
 801f51e:	6803      	ldr	r3, [r0, #0]
 801f520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f522:	4798      	blx	r3
 801f524:	4a12      	ldr	r2, [pc, #72]	@ (801f570 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f526:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801f52a:	4691      	mov	r9, r2
 801f52c:	8813      	ldrh	r3, [r2, #0]
 801f52e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801f532:	435d      	muls	r5, r3
 801f534:	fb03 1404 	mla	r4, r3, r4, r1
 801f538:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f53c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f540:	6838      	ldr	r0, [r7, #0]
 801f542:	42ac      	cmp	r4, r5
 801f544:	6803      	ldr	r3, [r0, #0]
 801f546:	d20e      	bcs.n	801f566 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801f548:	f8d3 a038 	ldr.w	sl, [r3, #56]	@ 0x38
 801f54c:	4632      	mov	r2, r6
 801f54e:	4643      	mov	r3, r8
 801f550:	4621      	mov	r1, r4
 801f552:	47d0      	blx	sl
 801f554:	f8b9 3000 	ldrh.w	r3, [r9]
 801f558:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f55c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f560:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f564:	e7ec      	b.n	801f540 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801f566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f568:	4798      	blx	r3
 801f56a:	e7bc      	b.n	801f4e6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801f56c:	2005ba78 	.word	0x2005ba78
 801f570:	2005ba7a 	.word	0x2005ba7a
 801f574:	2005ba7c 	.word	0x2005ba7c
 801f578:	2005ba80 	.word	0x2005ba80

0801f57c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f580:	b08b      	sub	sp, #44	@ 0x2c
 801f582:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801f586:	460f      	mov	r7, r1
 801f588:	4616      	mov	r6, r2
 801f58a:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801f58e:	f1bb 0f00 	cmp.w	fp, #0
 801f592:	d04a      	beq.n	801f62a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801f594:	6810      	ldr	r0, [r2, #0]
 801f596:	6851      	ldr	r1, [r2, #4]
 801f598:	ad06      	add	r5, sp, #24
 801f59a:	c503      	stmia	r5!, {r0, r1}
 801f59c:	6818      	ldr	r0, [r3, #0]
 801f59e:	6859      	ldr	r1, [r3, #4]
 801f5a0:	ad08      	add	r5, sp, #32
 801f5a2:	c503      	stmia	r5!, {r0, r1}
 801f5a4:	a806      	add	r0, sp, #24
 801f5a6:	f7f9 fec5 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f5aa:	4631      	mov	r1, r6
 801f5ac:	a808      	add	r0, sp, #32
 801f5ae:	f7f9 fee9 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f5b2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f5b6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801f5ba:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f5be:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801f5c2:	fb16 2103 	smlabb	r1, r6, r3, r2
 801f5c6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801f5ca:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f5ce:	4f60      	ldr	r7, [pc, #384]	@ (801f750 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f5d0:	440a      	add	r2, r1
 801f5d2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f5d6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f5da:	6838      	ldr	r0, [r7, #0]
 801f5dc:	4413      	add	r3, r2
 801f5de:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801f5e2:	6803      	ldr	r3, [r0, #0]
 801f5e4:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801f5e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f5ea:	4798      	blx	r3
 801f5ec:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f5f0:	46b9      	mov	r9, r7
 801f5f2:	d11d      	bne.n	801f630 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801f5f4:	b9fc      	cbnz	r4, 801f636 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f5f6:	f010 0f01 	tst.w	r0, #1
 801f5fa:	d01c      	beq.n	801f636 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f5fc:	2700      	movs	r7, #0
 801f5fe:	f8d9 0000 	ldr.w	r0, [r9]
 801f602:	b2ad      	uxth	r5, r5
 801f604:	6801      	ldr	r1, [r0, #0]
 801f606:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801f60a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f60e:	f8cd b00c 	str.w	fp, [sp, #12]
 801f612:	9402      	str	r4, [sp, #8]
 801f614:	fa1f f488 	uxth.w	r4, r8
 801f618:	9501      	str	r5, [sp, #4]
 801f61a:	9400      	str	r4, [sp, #0]
 801f61c:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 801f61e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801f622:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f626:	4631      	mov	r1, r6
 801f628:	47a0      	blx	r4
 801f62a:	b00b      	add	sp, #44	@ 0x2c
 801f62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f630:	f010 0f04 	tst.w	r0, #4
 801f634:	e7e1      	b.n	801f5fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801f636:	f8d9 0000 	ldr.w	r0, [r9]
 801f63a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801f63e:	6803      	ldr	r3, [r0, #0]
 801f640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f642:	4798      	blx	r3
 801f644:	4b43      	ldr	r3, [pc, #268]	@ (801f754 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801f646:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801f64a:	881a      	ldrh	r2, [r3, #0]
 801f64c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f650:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f654:	fb02 1404 	mla	r4, r2, r4, r1
 801f658:	469a      	mov	sl, r3
 801f65a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f65e:	fb05 f502 	mul.w	r5, r5, r2
 801f662:	d059      	beq.n	801f718 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801f664:	469e      	mov	lr, r3
 801f666:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801f66a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f66e:	fa1f f28b 	uxth.w	r2, fp
 801f672:	fa1f f989 	uxth.w	r9, r9
 801f676:	42ac      	cmp	r4, r5
 801f678:	d264      	bcs.n	801f744 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f67a:	eb04 0a07 	add.w	sl, r4, r7
 801f67e:	4554      	cmp	r4, sl
 801f680:	d23d      	bcs.n	801f6fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801f682:	8821      	ldrh	r1, [r4, #0]
 801f684:	f836 3b02 	ldrh.w	r3, [r6], #2
 801f688:	1208      	asrs	r0, r1, #8
 801f68a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801f68e:	fb10 f009 	smulbb	r0, r0, r9
 801f692:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801f696:	00c9      	lsls	r1, r1, #3
 801f698:	b2c9      	uxtb	r1, r1
 801f69a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f69e:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801f6a2:	fb11 f109 	smulbb	r1, r1, r9
 801f6a6:	fb1b fb09 	smulbb	fp, fp, r9
 801f6aa:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f6ae:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f6b2:	10d8      	asrs	r0, r3, #3
 801f6b4:	00db      	lsls	r3, r3, #3
 801f6b6:	b2db      	uxtb	r3, r3
 801f6b8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801f6bc:	fb03 1302 	mla	r3, r3, r2, r1
 801f6c0:	fb00 b002 	mla	r0, r0, r2, fp
 801f6c4:	fa1f fc8c 	uxth.w	ip, ip
 801f6c8:	f10c 0b01 	add.w	fp, ip, #1
 801f6cc:	b29b      	uxth	r3, r3
 801f6ce:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f6d2:	b280      	uxth	r0, r0
 801f6d4:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801f6d8:	f103 0c01 	add.w	ip, r3, #1
 801f6dc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f6e0:	1c43      	adds	r3, r0, #1
 801f6e2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f6e6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f6ea:	0940      	lsrs	r0, r0, #5
 801f6ec:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f6f0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f6f4:	ea4c 0c00 	orr.w	ip, ip, r0
 801f6f8:	f824 cb02 	strh.w	ip, [r4], #2
 801f6fc:	e7bf      	b.n	801f67e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801f6fe:	f8be 3000 	ldrh.w	r3, [lr]
 801f702:	eba3 0308 	sub.w	r3, r3, r8
 801f706:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f70a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f70e:	eba3 0308 	sub.w	r3, r3, r8
 801f712:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f716:	e7ae      	b.n	801f676 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801f718:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f71c:	f8d9 0000 	ldr.w	r0, [r9]
 801f720:	42ac      	cmp	r4, r5
 801f722:	6803      	ldr	r3, [r0, #0]
 801f724:	d20e      	bcs.n	801f744 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f726:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 801f72a:	4632      	mov	r2, r6
 801f72c:	463b      	mov	r3, r7
 801f72e:	4621      	mov	r1, r4
 801f730:	47c0      	blx	r8
 801f732:	f8ba 3000 	ldrh.w	r3, [sl]
 801f736:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f73a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f73e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f742:	e7eb      	b.n	801f71c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801f744:	4b02      	ldr	r3, [pc, #8]	@ (801f750 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f746:	6818      	ldr	r0, [r3, #0]
 801f748:	6803      	ldr	r3, [r0, #0]
 801f74a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f74c:	4798      	blx	r3
 801f74e:	e76c      	b.n	801f62a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801f750:	2005ba80 	.word	0x2005ba80
 801f754:	2005ba7a 	.word	0x2005ba7a

0801f758 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801f758:	b510      	push	{r4, lr}
 801f75a:	4604      	mov	r4, r0
 801f75c:	2104      	movs	r1, #4
 801f75e:	f00c fa00 	bl	802bb62 <_ZdlPvj>
 801f762:	4620      	mov	r0, r4
 801f764:	bd10      	pop	{r4, pc}

0801f766 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801f766:	b510      	push	{r4, lr}
 801f768:	4604      	mov	r4, r0
 801f76a:	2104      	movs	r1, #4
 801f76c:	f00c f9f9 	bl	802bb62 <_ZdlPvj>
 801f770:	4620      	mov	r0, r4
 801f772:	bd10      	pop	{r4, pc}

0801f774 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801f774:	b510      	push	{r4, lr}
 801f776:	4604      	mov	r4, r0
 801f778:	f640 0144 	movw	r1, #2116	@ 0x844
 801f77c:	f00c f9f1 	bl	802bb62 <_ZdlPvj>
 801f780:	4620      	mov	r0, r4
 801f782:	bd10      	pop	{r4, pc}

0801f784 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 801f784:	b510      	push	{r4, lr}
 801f786:	4604      	mov	r4, r0
 801f788:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801f78c:	f00c f9e9 	bl	802bb62 <_ZdlPvj>
 801f790:	4620      	mov	r0, r4
 801f792:	bd10      	pop	{r4, pc}

0801f794 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f794:	b510      	push	{r4, lr}
 801f796:	4604      	mov	r4, r0
 801f798:	2104      	movs	r1, #4
 801f79a:	f00c f9e2 	bl	802bb62 <_ZdlPvj>
 801f79e:	4620      	mov	r0, r4
 801f7a0:	bd10      	pop	{r4, pc}

0801f7a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f7a2:	b510      	push	{r4, lr}
 801f7a4:	4604      	mov	r4, r0
 801f7a6:	2104      	movs	r1, #4
 801f7a8:	f00c f9db 	bl	802bb62 <_ZdlPvj>
 801f7ac:	4620      	mov	r0, r4
 801f7ae:	bd10      	pop	{r4, pc}

0801f7b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f7b0:	b510      	push	{r4, lr}
 801f7b2:	4604      	mov	r4, r0
 801f7b4:	2104      	movs	r1, #4
 801f7b6:	f00c f9d4 	bl	802bb62 <_ZdlPvj>
 801f7ba:	4620      	mov	r0, r4
 801f7bc:	bd10      	pop	{r4, pc}

0801f7be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f7be:	b510      	push	{r4, lr}
 801f7c0:	4604      	mov	r4, r0
 801f7c2:	2104      	movs	r1, #4
 801f7c4:	f00c f9cd 	bl	802bb62 <_ZdlPvj>
 801f7c8:	4620      	mov	r0, r4
 801f7ca:	bd10      	pop	{r4, pc}

0801f7cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f7cc:	b510      	push	{r4, lr}
 801f7ce:	4604      	mov	r4, r0
 801f7d0:	2104      	movs	r1, #4
 801f7d2:	f00c f9c6 	bl	802bb62 <_ZdlPvj>
 801f7d6:	4620      	mov	r0, r4
 801f7d8:	bd10      	pop	{r4, pc}

0801f7da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f7da:	b510      	push	{r4, lr}
 801f7dc:	4604      	mov	r4, r0
 801f7de:	2104      	movs	r1, #4
 801f7e0:	f00c f9bf 	bl	802bb62 <_ZdlPvj>
 801f7e4:	4620      	mov	r0, r4
 801f7e6:	bd10      	pop	{r4, pc}

0801f7e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f7e8:	b510      	push	{r4, lr}
 801f7ea:	4604      	mov	r4, r0
 801f7ec:	2104      	movs	r1, #4
 801f7ee:	f00c f9b8 	bl	802bb62 <_ZdlPvj>
 801f7f2:	4620      	mov	r0, r4
 801f7f4:	bd10      	pop	{r4, pc}

0801f7f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f7f6:	b510      	push	{r4, lr}
 801f7f8:	4604      	mov	r4, r0
 801f7fa:	2104      	movs	r1, #4
 801f7fc:	f00c f9b1 	bl	802bb62 <_ZdlPvj>
 801f800:	4620      	mov	r0, r4
 801f802:	bd10      	pop	{r4, pc}

0801f804 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f804:	b510      	push	{r4, lr}
 801f806:	4604      	mov	r4, r0
 801f808:	2104      	movs	r1, #4
 801f80a:	f00c f9aa 	bl	802bb62 <_ZdlPvj>
 801f80e:	4620      	mov	r0, r4
 801f810:	bd10      	pop	{r4, pc}

0801f812 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f812:	b510      	push	{r4, lr}
 801f814:	4604      	mov	r4, r0
 801f816:	2104      	movs	r1, #4
 801f818:	f00c f9a3 	bl	802bb62 <_ZdlPvj>
 801f81c:	4620      	mov	r0, r4
 801f81e:	bd10      	pop	{r4, pc}

0801f820 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f820:	b510      	push	{r4, lr}
 801f822:	4604      	mov	r4, r0
 801f824:	2104      	movs	r1, #4
 801f826:	f00c f99c 	bl	802bb62 <_ZdlPvj>
 801f82a:	4620      	mov	r0, r4
 801f82c:	bd10      	pop	{r4, pc}

0801f82e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f82e:	b510      	push	{r4, lr}
 801f830:	4604      	mov	r4, r0
 801f832:	2104      	movs	r1, #4
 801f834:	f00c f995 	bl	802bb62 <_ZdlPvj>
 801f838:	4620      	mov	r0, r4
 801f83a:	bd10      	pop	{r4, pc}

0801f83c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f83c:	b510      	push	{r4, lr}
 801f83e:	4604      	mov	r4, r0
 801f840:	2104      	movs	r1, #4
 801f842:	f00c f98e 	bl	802bb62 <_ZdlPvj>
 801f846:	4620      	mov	r0, r4
 801f848:	bd10      	pop	{r4, pc}

0801f84a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f84a:	b510      	push	{r4, lr}
 801f84c:	4604      	mov	r4, r0
 801f84e:	2104      	movs	r1, #4
 801f850:	f00c f987 	bl	802bb62 <_ZdlPvj>
 801f854:	4620      	mov	r0, r4
 801f856:	bd10      	pop	{r4, pc}

0801f858 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f858:	b510      	push	{r4, lr}
 801f85a:	4604      	mov	r4, r0
 801f85c:	2104      	movs	r1, #4
 801f85e:	f00c f980 	bl	802bb62 <_ZdlPvj>
 801f862:	4620      	mov	r0, r4
 801f864:	bd10      	pop	{r4, pc}

0801f866 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f866:	b510      	push	{r4, lr}
 801f868:	4604      	mov	r4, r0
 801f86a:	2104      	movs	r1, #4
 801f86c:	f00c f979 	bl	802bb62 <_ZdlPvj>
 801f870:	4620      	mov	r0, r4
 801f872:	bd10      	pop	{r4, pc}

0801f874 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f874:	b510      	push	{r4, lr}
 801f876:	4604      	mov	r4, r0
 801f878:	2104      	movs	r1, #4
 801f87a:	f00c f972 	bl	802bb62 <_ZdlPvj>
 801f87e:	4620      	mov	r0, r4
 801f880:	bd10      	pop	{r4, pc}

0801f882 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f882:	b510      	push	{r4, lr}
 801f884:	4604      	mov	r4, r0
 801f886:	2104      	movs	r1, #4
 801f888:	f00c f96b 	bl	802bb62 <_ZdlPvj>
 801f88c:	4620      	mov	r0, r4
 801f88e:	bd10      	pop	{r4, pc}

0801f890 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f890:	b510      	push	{r4, lr}
 801f892:	4604      	mov	r4, r0
 801f894:	2104      	movs	r1, #4
 801f896:	f00c f964 	bl	802bb62 <_ZdlPvj>
 801f89a:	4620      	mov	r0, r4
 801f89c:	bd10      	pop	{r4, pc}

0801f89e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f89e:	b510      	push	{r4, lr}
 801f8a0:	4604      	mov	r4, r0
 801f8a2:	2104      	movs	r1, #4
 801f8a4:	f00c f95d 	bl	802bb62 <_ZdlPvj>
 801f8a8:	4620      	mov	r0, r4
 801f8aa:	bd10      	pop	{r4, pc}

0801f8ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f8ac:	b510      	push	{r4, lr}
 801f8ae:	4604      	mov	r4, r0
 801f8b0:	2104      	movs	r1, #4
 801f8b2:	f00c f956 	bl	802bb62 <_ZdlPvj>
 801f8b6:	4620      	mov	r0, r4
 801f8b8:	bd10      	pop	{r4, pc}

0801f8ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f8ba:	b510      	push	{r4, lr}
 801f8bc:	4604      	mov	r4, r0
 801f8be:	2104      	movs	r1, #4
 801f8c0:	f00c f94f 	bl	802bb62 <_ZdlPvj>
 801f8c4:	4620      	mov	r0, r4
 801f8c6:	bd10      	pop	{r4, pc}

0801f8c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f8c8:	b510      	push	{r4, lr}
 801f8ca:	4604      	mov	r4, r0
 801f8cc:	2104      	movs	r1, #4
 801f8ce:	f00c f948 	bl	802bb62 <_ZdlPvj>
 801f8d2:	4620      	mov	r0, r4
 801f8d4:	bd10      	pop	{r4, pc}

0801f8d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f8d6:	b510      	push	{r4, lr}
 801f8d8:	4604      	mov	r4, r0
 801f8da:	2104      	movs	r1, #4
 801f8dc:	f00c f941 	bl	802bb62 <_ZdlPvj>
 801f8e0:	4620      	mov	r0, r4
 801f8e2:	bd10      	pop	{r4, pc}

0801f8e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f8e4:	b510      	push	{r4, lr}
 801f8e6:	4604      	mov	r4, r0
 801f8e8:	2104      	movs	r1, #4
 801f8ea:	f00c f93a 	bl	802bb62 <_ZdlPvj>
 801f8ee:	4620      	mov	r0, r4
 801f8f0:	bd10      	pop	{r4, pc}

0801f8f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f8f2:	b510      	push	{r4, lr}
 801f8f4:	4604      	mov	r4, r0
 801f8f6:	2104      	movs	r1, #4
 801f8f8:	f00c f933 	bl	802bb62 <_ZdlPvj>
 801f8fc:	4620      	mov	r0, r4
 801f8fe:	bd10      	pop	{r4, pc}

0801f900 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801f900:	b510      	push	{r4, lr}
 801f902:	4604      	mov	r4, r0
 801f904:	2104      	movs	r1, #4
 801f906:	f00c f92c 	bl	802bb62 <_ZdlPvj>
 801f90a:	4620      	mov	r0, r4
 801f90c:	bd10      	pop	{r4, pc}

0801f90e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801f90e:	b510      	push	{r4, lr}
 801f910:	4604      	mov	r4, r0
 801f912:	2104      	movs	r1, #4
 801f914:	f00c f925 	bl	802bb62 <_ZdlPvj>
 801f918:	4620      	mov	r0, r4
 801f91a:	bd10      	pop	{r4, pc}

0801f91c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801f91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f920:	b08f      	sub	sp, #60	@ 0x3c
 801f922:	4616      	mov	r6, r2
 801f924:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801f928:	4682      	mov	sl, r0
 801f92a:	460d      	mov	r5, r1
 801f92c:	9205      	str	r2, [sp, #20]
 801f92e:	2a00      	cmp	r2, #0
 801f930:	f000 82b7 	beq.w	801fea2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 801f934:	6830      	ldr	r0, [r6, #0]
 801f936:	6871      	ldr	r1, [r6, #4]
 801f938:	ac0a      	add	r4, sp, #40	@ 0x28
 801f93a:	c403      	stmia	r4!, {r0, r1}
 801f93c:	6818      	ldr	r0, [r3, #0]
 801f93e:	6859      	ldr	r1, [r3, #4]
 801f940:	ac0c      	add	r4, sp, #48	@ 0x30
 801f942:	c403      	stmia	r4!, {r0, r1}
 801f944:	a80a      	add	r0, sp, #40	@ 0x28
 801f946:	f7f9 fcf5 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f94a:	4631      	mov	r1, r6
 801f94c:	a80c      	add	r0, sp, #48	@ 0x30
 801f94e:	f7f9 fd19 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f952:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801f956:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801f95a:	bfdd      	ittte	le
 801f95c:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801f960:	b293      	uxthle	r3, r2
 801f962:	fb91 f3f3 	sdivle	r3, r1, r3
 801f966:	2301      	movgt	r3, #1
 801f968:	9300      	str	r3, [sp, #0]
 801f96a:	f105 0308 	add.w	r3, r5, #8
 801f96e:	9900      	ldr	r1, [sp, #0]
 801f970:	9306      	str	r3, [sp, #24]
 801f972:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801f976:	440b      	add	r3, r1
 801f978:	3b01      	subs	r3, #1
 801f97a:	fb93 f3f1 	sdiv	r3, r3, r1
 801f97e:	9906      	ldr	r1, [sp, #24]
 801f980:	3b01      	subs	r3, #1
 801f982:	b29b      	uxth	r3, r3
 801f984:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f988:	9307      	str	r3, [sp, #28]
 801f98a:	9900      	ldr	r1, [sp, #0]
 801f98c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801f990:	fb93 f0f1 	sdiv	r0, r3, r1
 801f994:	b284      	uxth	r4, r0
 801f996:	9402      	str	r4, [sp, #8]
 801f998:	9d02      	ldr	r5, [sp, #8]
 801f99a:	9c00      	ldr	r4, [sp, #0]
 801f99c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801f9a0:	fb05 3414 	mls	r4, r5, r4, r3
 801f9a4:	fb14 f402 	smulbb	r4, r4, r2
 801f9a8:	440c      	add	r4, r1
 801f9aa:	b2a4      	uxth	r4, r4
 801f9ac:	2d00      	cmp	r5, #0
 801f9ae:	d06c      	beq.n	801fa8a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 801f9b0:	9806      	ldr	r0, [sp, #24]
 801f9b2:	1e6a      	subs	r2, r5, #1
 801f9b4:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 801f9b8:	9a07      	ldr	r2, [sp, #28]
 801f9ba:	ba36      	rev	r6, r6
 801f9bc:	4416      	add	r6, r2
 801f9be:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801f9c2:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 801f9c6:	4411      	add	r1, r2
 801f9c8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801f9cc:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801f9d0:	4413      	add	r3, r2
 801f9d2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801f9d6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801f9da:	f8df 9320 	ldr.w	r9, [pc, #800]	@ 801fcfc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 801f9de:	9301      	str	r3, [sp, #4]
 801f9e0:	4bc4      	ldr	r3, [pc, #784]	@ (801fcf4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 801f9e2:	6818      	ldr	r0, [r3, #0]
 801f9e4:	6803      	ldr	r3, [r0, #0]
 801f9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9e8:	4798      	blx	r3
 801f9ea:	4bc3      	ldr	r3, [pc, #780]	@ (801fcf8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 801f9ec:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801f9f0:	881b      	ldrh	r3, [r3, #0]
 801f9f2:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 801f9f6:	fb03 2808 	mla	r8, r3, r8, r2
 801f9fa:	436b      	muls	r3, r5
 801f9fc:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 801fa00:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801fa04:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa06:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801fa0a:	2500      	movs	r5, #0
 801fa0c:	fb94 f3f3 	sdiv	r3, r4, r3
 801fa10:	9304      	str	r3, [sp, #16]
 801fa12:	f10a 0304 	add.w	r3, sl, #4
 801fa16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801fa1a:	4629      	mov	r1, r5
 801fa1c:	4618      	mov	r0, r3
 801fa1e:	9308      	str	r3, [sp, #32]
 801fa20:	f00d faa0 	bl	802cf64 <memset>
 801fa24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa26:	4543      	cmp	r3, r8
 801fa28:	f240 8236 	bls.w	801fe98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 801fa2c:	2203      	movs	r2, #3
 801fa2e:	2107      	movs	r1, #7
 801fa30:	200b      	movs	r0, #11
 801fa32:	2c00      	cmp	r4, #0
 801fa34:	f000 8131 	beq.w	801fc9a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 801fa38:	7833      	ldrb	r3, [r6, #0]
 801fa3a:	b2db      	uxtb	r3, r3
 801fa3c:	2bfe      	cmp	r3, #254	@ 0xfe
 801fa3e:	d126      	bne.n	801fa8e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 801fa40:	f896 e001 	ldrb.w	lr, [r6, #1]
 801fa44:	f896 c002 	ldrb.w	ip, [r6, #2]
 801fa48:	fa5f fe8e 	uxtb.w	lr, lr
 801fa4c:	f896 b003 	ldrb.w	fp, [r6, #3]
 801fa50:	fa5f fc8c 	uxtb.w	ip, ip
 801fa54:	f36e 0507 	bfi	r5, lr, #0, #8
 801fa58:	f36c 250f 	bfi	r5, ip, #8, #8
 801fa5c:	fa5f fb8b 	uxtb.w	fp, fp
 801fa60:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801fa64:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 801fa68:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801fa6c:	f36b 4517 	bfi	r5, fp, #16, #8
 801fa70:	0e2b      	lsrs	r3, r5, #24
 801fa72:	fb10 c303 	smlabb	r3, r0, r3, ip
 801fa76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fa7a:	3c01      	subs	r4, #1
 801fa7c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fa80:	1d37      	adds	r7, r6, #4
 801fa82:	b2a4      	uxth	r4, r4
 801fa84:	605d      	str	r5, [r3, #4]
 801fa86:	463e      	mov	r6, r7
 801fa88:	e7d3      	b.n	801fa32 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 801fa8a:	9e07      	ldr	r6, [sp, #28]
 801fa8c:	e797      	b.n	801f9be <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 801fa8e:	2bff      	cmp	r3, #255	@ 0xff
 801fa90:	d127      	bne.n	801fae2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 801fa92:	f896 c001 	ldrb.w	ip, [r6, #1]
 801fa96:	78b3      	ldrb	r3, [r6, #2]
 801fa98:	fa5f fc8c 	uxtb.w	ip, ip
 801fa9c:	f896 e003 	ldrb.w	lr, [r6, #3]
 801faa0:	b2db      	uxtb	r3, r3
 801faa2:	f36c 0507 	bfi	r5, ip, #0, #8
 801faa6:	f363 250f 	bfi	r5, r3, #8, #8
 801faaa:	fa5f fe8e 	uxtb.w	lr, lr
 801faae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801fab2:	fb12 330e 	smlabb	r3, r2, lr, r3
 801fab6:	fb11 330c 	smlabb	r3, r1, ip, r3
 801faba:	f896 b004 	ldrb.w	fp, [r6, #4]
 801fabe:	f36e 4517 	bfi	r5, lr, #16, #8
 801fac2:	fa5f fb8b 	uxtb.w	fp, fp
 801fac6:	f36b 651f 	bfi	r5, fp, #24, #8
 801faca:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 801face:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 801fad2:	3c01      	subs	r4, #1
 801fad4:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 801fad8:	1d77      	adds	r7, r6, #5
 801fada:	b2a4      	uxth	r4, r4
 801fadc:	f8cb 5004 	str.w	r5, [fp, #4]
 801fae0:	e7d1      	b.n	801fa86 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801fae2:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 801fae6:	f106 0701 	add.w	r7, r6, #1
 801faea:	d107      	bne.n	801fafc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 801faec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801faf0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801faf4:	685d      	ldr	r5, [r3, #4]
 801faf6:	3c01      	subs	r4, #1
 801faf8:	b2a4      	uxth	r4, r4
 801fafa:	e7c4      	b.n	801fa86 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801fafc:	f1bc 0f01 	cmp.w	ip, #1
 801fb00:	d12c      	bne.n	801fb5c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 801fb02:	f003 0e03 	and.w	lr, r3, #3
 801fb06:	f1ae 0e02 	sub.w	lr, lr, #2
 801fb0a:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 801fb0e:	fa5f fe8e 	uxtb.w	lr, lr
 801fb12:	f003 0c0c 	and.w	ip, r3, #12
 801fb16:	f36e 0507 	bfi	r5, lr, #0, #8
 801fb1a:	f1ac 0c08 	sub.w	ip, ip, #8
 801fb1e:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801fb22:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801fb26:	f36c 250f 	bfi	r5, ip, #8, #8
 801fb2a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801fb2e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fb32:	3b02      	subs	r3, #2
 801fb34:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801fb38:	b2db      	uxtb	r3, r3
 801fb3a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801fb3e:	fb12 cc03 	smlabb	ip, r2, r3, ip
 801fb42:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801fb46:	f363 4517 	bfi	r5, r3, #16, #8
 801fb4a:	0e2e      	lsrs	r6, r5, #24
 801fb4c:	fb10 c606 	smlabb	r6, r0, r6, ip
 801fb50:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 801fb54:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 801fb58:	6075      	str	r5, [r6, #4]
 801fb5a:	e7cc      	b.n	801faf6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 801fb5c:	f1bc 0f02 	cmp.w	ip, #2
 801fb60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fb64:	d12a      	bne.n	801fbbc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 801fb66:	1cb7      	adds	r7, r6, #2
 801fb68:	7876      	ldrb	r6, [r6, #1]
 801fb6a:	3b20      	subs	r3, #32
 801fb6c:	b2f6      	uxtb	r6, r6
 801fb6e:	f006 0c0f 	and.w	ip, r6, #15
 801fb72:	f1ac 0c08 	sub.w	ip, ip, #8
 801fb76:	449c      	add	ip, r3
 801fb78:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801fb7c:	fa5f fc8c 	uxtb.w	ip, ip
 801fb80:	f36c 0507 	bfi	r5, ip, #0, #8
 801fb84:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801fb88:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 801fb8c:	fa5f fe8e 	uxtb.w	lr, lr
 801fb90:	1136      	asrs	r6, r6, #4
 801fb92:	f36e 250f 	bfi	r5, lr, #8, #8
 801fb96:	3e08      	subs	r6, #8
 801fb98:	4433      	add	r3, r6
 801fb9a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fb9e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801fba2:	b2db      	uxtb	r3, r3
 801fba4:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 801fba8:	fb12 ee03 	smlabb	lr, r2, r3, lr
 801fbac:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 801fbb0:	f363 4517 	bfi	r5, r3, #16, #8
 801fbb4:	0e2e      	lsrs	r6, r5, #24
 801fbb6:	fb10 e606 	smlabb	r6, r0, r6, lr
 801fbba:	e7c9      	b.n	801fb50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 801fbbc:	1c5e      	adds	r6, r3, #1
 801fbbe:	42a6      	cmp	r6, r4
 801fbc0:	dd4e      	ble.n	801fc60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 801fbc2:	1b36      	subs	r6, r6, r4
 801fbc4:	2e00      	cmp	r6, #0
 801fbc6:	dc4e      	bgt.n	801fc66 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 801fbc8:	2400      	movs	r4, #0
 801fbca:	f8dd b004 	ldr.w	fp, [sp, #4]
 801fbce:	f1bb 0f00 	cmp.w	fp, #0
 801fbd2:	f340 8122 	ble.w	801fe1a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 801fbd6:	1c7b      	adds	r3, r7, #1
 801fbd8:	9303      	str	r3, [sp, #12]
 801fbda:	783b      	ldrb	r3, [r7, #0]
 801fbdc:	b2db      	uxtb	r3, r3
 801fbde:	2bfe      	cmp	r3, #254	@ 0xfe
 801fbe0:	d160      	bne.n	801fca4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 801fbe2:	1d3b      	adds	r3, r7, #4
 801fbe4:	9303      	str	r3, [sp, #12]
 801fbe6:	2303      	movs	r3, #3
 801fbe8:	7879      	ldrb	r1, [r7, #1]
 801fbea:	78ba      	ldrb	r2, [r7, #2]
 801fbec:	b2c9      	uxtb	r1, r1
 801fbee:	78f8      	ldrb	r0, [r7, #3]
 801fbf0:	f361 0507 	bfi	r5, r1, #0, #8
 801fbf4:	b2d2      	uxtb	r2, r2
 801fbf6:	f362 250f 	bfi	r5, r2, #8, #8
 801fbfa:	b2c0      	uxtb	r0, r0
 801fbfc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fc00:	fb13 2200 	smlabb	r2, r3, r0, r2
 801fc04:	2307      	movs	r3, #7
 801fc06:	fb13 2101 	smlabb	r1, r3, r1, r2
 801fc0a:	230b      	movs	r3, #11
 801fc0c:	f360 4517 	bfi	r5, r0, #16, #8
 801fc10:	0e2e      	lsrs	r6, r5, #24
 801fc12:	fb13 1306 	smlabb	r3, r3, r6, r1
 801fc16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fc1a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fc1e:	605d      	str	r5, [r3, #4]
 801fc20:	2601      	movs	r6, #1
 801fc22:	4637      	mov	r7, r6
 801fc24:	0e2b      	lsrs	r3, r5, #24
 801fc26:	ebab 0b07 	sub.w	fp, fp, r7
 801fc2a:	eba6 0607 	sub.w	r6, r6, r7
 801fc2e:	f040 80d3 	bne.w	801fdd8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 801fc32:	b18c      	cbz	r4, 801fc58 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 801fc34:	4648      	mov	r0, r9
 801fc36:	00a1      	lsls	r1, r4, #2
 801fc38:	f7f2 fca8 	bl	801258c <_ZN8touchgfx5paint9flushLineEPmi>
 801fc3c:	9b05      	ldr	r3, [sp, #20]
 801fc3e:	4622      	mov	r2, r4
 801fc40:	4649      	mov	r1, r9
 801fc42:	4640      	mov	r0, r8
 801fc44:	f7f2 fd4c 	bl	80126e0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801fc48:	4b2c      	ldr	r3, [pc, #176]	@ (801fcfc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 801fc4a:	4a2d      	ldr	r2, [pc, #180]	@ (801fd00 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 801fc4c:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801fc50:	4599      	cmp	r9, r3
 801fc52:	bf08      	it	eq
 801fc54:	4613      	moveq	r3, r2
 801fc56:	4699      	mov	r9, r3
 801fc58:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 801fc5c:	2400      	movs	r4, #0
 801fc5e:	e0da      	b.n	801fe16 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 801fc60:	1ba6      	subs	r6, r4, r6
 801fc62:	b2b4      	uxth	r4, r6
 801fc64:	e70f      	b.n	801fa86 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801fc66:	9b01      	ldr	r3, [sp, #4]
 801fc68:	9a01      	ldr	r2, [sp, #4]
 801fc6a:	42b3      	cmp	r3, r6
 801fc6c:	bfa8      	it	ge
 801fc6e:	4633      	movge	r3, r6
 801fc70:	0e2c      	lsrs	r4, r5, #24
 801fc72:	eba2 0b03 	sub.w	fp, r2, r3
 801fc76:	eba6 0603 	sub.w	r6, r6, r3
 801fc7a:	d00b      	beq.n	801fc94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 801fc7c:	461a      	mov	r2, r3
 801fc7e:	f1a9 0104 	sub.w	r1, r9, #4
 801fc82:	2a00      	cmp	r2, #0
 801fc84:	dc02      	bgt.n	801fc8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 801fc86:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fc8a:	e7a0      	b.n	801fbce <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801fc8c:	f841 5f04 	str.w	r5, [r1, #4]!
 801fc90:	3a01      	subs	r2, #1
 801fc92:	e7f6      	b.n	801fc82 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 801fc94:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801fc98:	e799      	b.n	801fbce <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801fc9a:	4637      	mov	r7, r6
 801fc9c:	f8dd b004 	ldr.w	fp, [sp, #4]
 801fca0:	4626      	mov	r6, r4
 801fca2:	e794      	b.n	801fbce <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801fca4:	2bff      	cmp	r3, #255	@ 0xff
 801fca6:	d11d      	bne.n	801fce4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 801fca8:	1d7b      	adds	r3, r7, #5
 801fcaa:	7878      	ldrb	r0, [r7, #1]
 801fcac:	9303      	str	r3, [sp, #12]
 801fcae:	78ba      	ldrb	r2, [r7, #2]
 801fcb0:	78fe      	ldrb	r6, [r7, #3]
 801fcb2:	793b      	ldrb	r3, [r7, #4]
 801fcb4:	b2c0      	uxtb	r0, r0
 801fcb6:	b2d9      	uxtb	r1, r3
 801fcb8:	2303      	movs	r3, #3
 801fcba:	f360 0507 	bfi	r5, r0, #0, #8
 801fcbe:	b2d2      	uxtb	r2, r2
 801fcc0:	f362 250f 	bfi	r5, r2, #8, #8
 801fcc4:	b2f6      	uxtb	r6, r6
 801fcc6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fcca:	fb13 2206 	smlabb	r2, r3, r6, r2
 801fcce:	2307      	movs	r3, #7
 801fcd0:	fb13 2000 	smlabb	r0, r3, r0, r2
 801fcd4:	230b      	movs	r3, #11
 801fcd6:	f366 4517 	bfi	r5, r6, #16, #8
 801fcda:	f361 651f 	bfi	r5, r1, #24, #8
 801fcde:	fb13 0301 	smlabb	r3, r3, r1, r0
 801fce2:	e798      	b.n	801fc16 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 801fce4:	119e      	asrs	r6, r3, #6
 801fce6:	d10d      	bne.n	801fd04 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801fce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fcec:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fcf0:	685d      	ldr	r5, [r3, #4]
 801fcf2:	e795      	b.n	801fc20 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801fcf4:	2005ba80 	.word	0x2005ba80
 801fcf8:	2005ba7a 	.word	0x2005ba7a
 801fcfc:	20045700 	.word	0x20045700
 801fd00:	20045800 	.word	0x20045800
 801fd04:	2e01      	cmp	r6, #1
 801fd06:	ea4f 6115 	mov.w	r1, r5, lsr #24
 801fd0a:	d12b      	bne.n	801fd64 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 801fd0c:	f003 0003 	and.w	r0, r3, #3
 801fd10:	3802      	subs	r0, #2
 801fd12:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 801fd16:	b2c0      	uxtb	r0, r0
 801fd18:	f003 020c 	and.w	r2, r3, #12
 801fd1c:	f360 0507 	bfi	r5, r0, #0, #8
 801fd20:	3a08      	subs	r2, #8
 801fd22:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801fd26:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801fd2a:	f362 250f 	bfi	r5, r2, #8, #8
 801fd2e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801fd32:	1e9f      	subs	r7, r3, #2
 801fd34:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801fd38:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801fd3c:	2703      	movs	r7, #3
 801fd3e:	b2db      	uxtb	r3, r3
 801fd40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fd44:	fb17 2203 	smlabb	r2, r7, r3, r2
 801fd48:	2707      	movs	r7, #7
 801fd4a:	f363 4517 	bfi	r5, r3, #16, #8
 801fd4e:	230b      	movs	r3, #11
 801fd50:	fb17 2000 	smlabb	r0, r7, r0, r2
 801fd54:	fb13 0101 	smlabb	r1, r3, r1, r0
 801fd58:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801fd5c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801fd60:	604d      	str	r5, [r1, #4]
 801fd62:	e75e      	b.n	801fc22 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801fd64:	2e02      	cmp	r6, #2
 801fd66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fd6a:	d12f      	bne.n	801fdcc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 801fd6c:	7878      	ldrb	r0, [r7, #1]
 801fd6e:	1cba      	adds	r2, r7, #2
 801fd70:	b2c0      	uxtb	r0, r0
 801fd72:	9203      	str	r2, [sp, #12]
 801fd74:	f000 020f 	and.w	r2, r0, #15
 801fd78:	3b20      	subs	r3, #32
 801fd7a:	3a08      	subs	r2, #8
 801fd7c:	441a      	add	r2, r3
 801fd7e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801fd82:	b2d2      	uxtb	r2, r2
 801fd84:	f362 0507 	bfi	r5, r2, #0, #8
 801fd88:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801fd8c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801fd90:	b2f6      	uxtb	r6, r6
 801fd92:	1100      	asrs	r0, r0, #4
 801fd94:	f366 250f 	bfi	r5, r6, #8, #8
 801fd98:	3808      	subs	r0, #8
 801fd9a:	4403      	add	r3, r0
 801fd9c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801fda0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801fda4:	2003      	movs	r0, #3
 801fda6:	b2db      	uxtb	r3, r3
 801fda8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801fdac:	fb10 6603 	smlabb	r6, r0, r3, r6
 801fdb0:	2007      	movs	r0, #7
 801fdb2:	f363 4517 	bfi	r5, r3, #16, #8
 801fdb6:	230b      	movs	r3, #11
 801fdb8:	fb10 6202 	smlabb	r2, r0, r2, r6
 801fdbc:	fb13 2101 	smlabb	r1, r3, r1, r2
 801fdc0:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801fdc4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801fdc8:	604d      	str	r5, [r1, #4]
 801fdca:	e729      	b.n	801fc20 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801fdcc:	1c5e      	adds	r6, r3, #1
 801fdce:	45b3      	cmp	fp, r6
 801fdd0:	465f      	mov	r7, fp
 801fdd2:	bfa8      	it	ge
 801fdd4:	4637      	movge	r7, r6
 801fdd6:	e725      	b.n	801fc24 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 801fdd8:	193b      	adds	r3, r7, r4
 801fdda:	2b40      	cmp	r3, #64	@ 0x40
 801fddc:	dd13      	ble.n	801fe06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 801fdde:	4648      	mov	r0, r9
 801fde0:	00a1      	lsls	r1, r4, #2
 801fde2:	f7f2 fbd3 	bl	801258c <_ZN8touchgfx5paint9flushLineEPmi>
 801fde6:	4622      	mov	r2, r4
 801fde8:	4640      	mov	r0, r8
 801fdea:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801fdee:	2400      	movs	r4, #0
 801fdf0:	4649      	mov	r1, r9
 801fdf2:	9b05      	ldr	r3, [sp, #20]
 801fdf4:	f7f2 fc74 	bl	80126e0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801fdf8:	4b2b      	ldr	r3, [pc, #172]	@ (801fea8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 801fdfa:	4599      	cmp	r9, r3
 801fdfc:	bf0c      	ite	eq
 801fdfe:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 801feb4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 801fe02:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 801fea8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 801fe06:	463b      	mov	r3, r7
 801fe08:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 801fe0c:	3b01      	subs	r3, #1
 801fe0e:	f842 5b04 	str.w	r5, [r2], #4
 801fe12:	d1fb      	bne.n	801fe0c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 801fe14:	443c      	add	r4, r7
 801fe16:	9f03      	ldr	r7, [sp, #12]
 801fe18:	e6d9      	b.n	801fbce <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801fe1a:	b15c      	cbz	r4, 801fe34 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 801fe1c:	00a1      	lsls	r1, r4, #2
 801fe1e:	4648      	mov	r0, r9
 801fe20:	f7f2 fbb4 	bl	801258c <_ZN8touchgfx5paint9flushLineEPmi>
 801fe24:	4640      	mov	r0, r8
 801fe26:	9b05      	ldr	r3, [sp, #20]
 801fe28:	4622      	mov	r2, r4
 801fe2a:	4649      	mov	r1, r9
 801fe2c:	f7f2 fc58 	bl	80126e0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801fe30:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801fe34:	4b1d      	ldr	r3, [pc, #116]	@ (801feac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 801fe36:	9a01      	ldr	r2, [sp, #4]
 801fe38:	881b      	ldrh	r3, [r3, #0]
 801fe3a:	1a9b      	subs	r3, r3, r2
 801fe3c:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801fe40:	9b04      	ldr	r3, [sp, #16]
 801fe42:	3301      	adds	r3, #1
 801fe44:	9304      	str	r3, [sp, #16]
 801fe46:	9a04      	ldr	r2, [sp, #16]
 801fe48:	9b00      	ldr	r3, [sp, #0]
 801fe4a:	4293      	cmp	r3, r2
 801fe4c:	d11d      	bne.n	801fe8a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 801fe4e:	2500      	movs	r5, #0
 801fe50:	9b02      	ldr	r3, [sp, #8]
 801fe52:	9a02      	ldr	r2, [sp, #8]
 801fe54:	f103 0b01 	add.w	fp, r3, #1
 801fe58:	9b06      	ldr	r3, [sp, #24]
 801fe5a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 801fe5e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801fe62:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 801fe66:	9b07      	ldr	r3, [sp, #28]
 801fe68:	ba3f      	rev	r7, r7
 801fe6a:	1ba4      	subs	r4, r4, r6
 801fe6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801fe70:	4629      	mov	r1, r5
 801fe72:	9808      	ldr	r0, [sp, #32]
 801fe74:	441f      	add	r7, r3
 801fe76:	b2a4      	uxth	r4, r4
 801fe78:	f00d f874 	bl	802cf64 <memset>
 801fe7c:	f8cd b008 	str.w	fp, [sp, #8]
 801fe80:	9504      	str	r5, [sp, #16]
 801fe82:	f7f2 fb6b 	bl	801255c <_ZN8touchgfx5paint8tearDownEv>
 801fe86:	463e      	mov	r6, r7
 801fe88:	e5cc      	b.n	801fa24 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 801fe8a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801fe8e:	9b01      	ldr	r3, [sp, #4]
 801fe90:	1ae4      	subs	r4, r4, r3
 801fe92:	1ba4      	subs	r4, r4, r6
 801fe94:	b2a4      	uxth	r4, r4
 801fe96:	e7f4      	b.n	801fe82 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 801fe98:	4b05      	ldr	r3, [pc, #20]	@ (801feb0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 801fe9a:	6818      	ldr	r0, [r3, #0]
 801fe9c:	6803      	ldr	r3, [r0, #0]
 801fe9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fea0:	4798      	blx	r3
 801fea2:	b00f      	add	sp, #60	@ 0x3c
 801fea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fea8:	20045700 	.word	0x20045700
 801feac:	2005ba7a 	.word	0x2005ba7a
 801feb0:	2005ba80 	.word	0x2005ba80
 801feb4:	20045800 	.word	0x20045800

0801feb8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801feb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801febc:	b08f      	sub	sp, #60	@ 0x3c
 801febe:	9205      	str	r2, [sp, #20]
 801fec0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801fec4:	461c      	mov	r4, r3
 801fec6:	9100      	str	r1, [sp, #0]
 801fec8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801feca:	9201      	str	r2, [sp, #4]
 801fecc:	2a00      	cmp	r2, #0
 801fece:	f000 8116 	beq.w	80200fe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801fed2:	6820      	ldr	r0, [r4, #0]
 801fed4:	6861      	ldr	r1, [r4, #4]
 801fed6:	aa0a      	add	r2, sp, #40	@ 0x28
 801fed8:	c203      	stmia	r2!, {r0, r1}
 801feda:	6818      	ldr	r0, [r3, #0]
 801fedc:	6859      	ldr	r1, [r3, #4]
 801fede:	aa0c      	add	r2, sp, #48	@ 0x30
 801fee0:	c203      	stmia	r2!, {r0, r1}
 801fee2:	a80a      	add	r0, sp, #40	@ 0x28
 801fee4:	f7f9 fa26 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fee8:	4621      	mov	r1, r4
 801feea:	a80c      	add	r0, sp, #48	@ 0x30
 801feec:	f7f9 fa4a 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fef0:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801fef4:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801fef8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801fefc:	bfdd      	ittte	le
 801fefe:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801ff02:	b2b3      	uxthle	r3, r6
 801ff04:	fb92 f3f3 	sdivle	r3, r2, r3
 801ff08:	2301      	movgt	r3, #1
 801ff0a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ff0e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801ff12:	fb92 f1f3 	sdiv	r1, r2, r3
 801ff16:	fa1f fc81 	uxth.w	ip, r1
 801ff1a:	4661      	mov	r1, ip
 801ff1c:	fb0c 2413 	mls	r4, ip, r3, r2
 801ff20:	fb14 f406 	smulbb	r4, r4, r6
 801ff24:	441d      	add	r5, r3
 801ff26:	3d01      	subs	r5, #1
 801ff28:	4404      	add	r4, r0
 801ff2a:	fb95 f5f3 	sdiv	r5, r5, r3
 801ff2e:	b2a4      	uxth	r4, r4
 801ff30:	b131      	cbz	r1, 801ff40 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801ff32:	9b05      	ldr	r3, [sp, #20]
 801ff34:	9900      	ldr	r1, [sp, #0]
 801ff36:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ff3a:	ba1b      	rev	r3, r3
 801ff3c:	4419      	add	r1, r3
 801ff3e:	9100      	str	r1, [sp, #0]
 801ff40:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ff44:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801ff48:	4418      	add	r0, r3
 801ff4a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801ff4e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801ff52:	441a      	add	r2, r3
 801ff54:	4b6b      	ldr	r3, [pc, #428]	@ (8020104 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801ff56:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801ff5a:	6818      	ldr	r0, [r3, #0]
 801ff5c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801ff60:	6803      	ldr	r3, [r0, #0]
 801ff62:	b2ad      	uxth	r5, r5
 801ff64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ff66:	4798      	blx	r3
 801ff68:	4967      	ldr	r1, [pc, #412]	@ (8020108 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801ff6a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ff6e:	880b      	ldrh	r3, [r1, #0]
 801ff70:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801ff74:	00ad      	lsls	r5, r5, #2
 801ff76:	fb03 c202 	mla	r2, r3, r2, ip
 801ff7a:	4373      	muls	r3, r6
 801ff7c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ff80:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ff84:	9306      	str	r3, [sp, #24]
 801ff86:	1d2b      	adds	r3, r5, #4
 801ff88:	9307      	str	r3, [sp, #28]
 801ff8a:	9b01      	ldr	r3, [sp, #4]
 801ff8c:	2c00      	cmp	r4, #0
 801ff8e:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 801ff92:	bf0c      	ite	eq
 801ff94:	46c6      	moveq	lr, r8
 801ff96:	f04f 0e00 	movne.w	lr, #0
 801ff9a:	2300      	movs	r3, #0
 801ff9c:	9109      	str	r1, [sp, #36]	@ 0x24
 801ff9e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801ffa2:	b292      	uxth	r2, r2
 801ffa4:	fa1f fe8e 	uxth.w	lr, lr
 801ffa8:	9302      	str	r3, [sp, #8]
 801ffaa:	9103      	str	r1, [sp, #12]
 801ffac:	9204      	str	r2, [sp, #16]
 801ffae:	9a06      	ldr	r2, [sp, #24]
 801ffb0:	4282      	cmp	r2, r0
 801ffb2:	f240 809f 	bls.w	80200f4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 801ffb6:	b963      	cbnz	r3, 801ffd2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801ffb8:	9b00      	ldr	r3, [sp, #0]
 801ffba:	781a      	ldrb	r2, [r3, #0]
 801ffbc:	0993      	lsrs	r3, r2, #6
 801ffbe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ffc2:	9202      	str	r2, [sp, #8]
 801ffc4:	1e5a      	subs	r2, r3, #1
 801ffc6:	2a02      	cmp	r2, #2
 801ffc8:	d815      	bhi.n	801fff6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801ffca:	9a00      	ldr	r2, [sp, #0]
 801ffcc:	b29b      	uxth	r3, r3
 801ffce:	3201      	adds	r2, #1
 801ffd0:	9200      	str	r2, [sp, #0]
 801ffd2:	b1b4      	cbz	r4, 8020002 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801ffd4:	429c      	cmp	r4, r3
 801ffd6:	bf99      	ittee	ls
 801ffd8:	1b1c      	subls	r4, r3, r4
 801ffda:	fa1f fa84 	uxthls.w	sl, r4
 801ffde:	4671      	movhi	r1, lr
 801ffe0:	f04f 0a00 	movhi.w	sl, #0
 801ffe4:	bf93      	iteet	ls
 801ffe6:	2400      	movls	r4, #0
 801ffe8:	1ae4      	subhi	r4, r4, r3
 801ffea:	b2a4      	uxthhi	r4, r4
 801ffec:	fa1f f188 	uxthls.w	r1, r8
 801fff0:	4653      	mov	r3, sl
 801fff2:	468e      	mov	lr, r1
 801fff4:	e7db      	b.n	801ffae <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 801fff6:	9a00      	ldr	r2, [sp, #0]
 801fff8:	9b00      	ldr	r3, [sp, #0]
 801fffa:	3202      	adds	r2, #2
 801fffc:	785b      	ldrb	r3, [r3, #1]
 801fffe:	9200      	str	r2, [sp, #0]
 8020000:	e7e7      	b.n	801ffd2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8020002:	2202      	movs	r2, #2
 8020004:	4615      	mov	r5, r2
 8020006:	4573      	cmp	r3, lr
 8020008:	bf2c      	ite	cs
 802000a:	46f1      	movcs	r9, lr
 802000c:	4699      	movcc	r9, r3
 802000e:	9907      	ldr	r1, [sp, #28]
 8020010:	9a02      	ldr	r2, [sp, #8]
 8020012:	bf28      	it	cs
 8020014:	eba3 0a0e 	subcs.w	sl, r3, lr
 8020018:	fb15 1202 	smlabb	r2, r5, r2, r1
 802001c:	9905      	ldr	r1, [sp, #20]
 802001e:	bf28      	it	cs
 8020020:	fa1f fa8a 	uxthcs.w	sl, sl
 8020024:	f831 c002 	ldrh.w	ip, [r1, r2]
 8020028:	9a01      	ldr	r2, [sp, #4]
 802002a:	bf37      	itett	cc
 802002c:	ebae 0103 	subcc.w	r1, lr, r3
 8020030:	4621      	movcs	r1, r4
 8020032:	b289      	uxthcc	r1, r1
 8020034:	46a2      	movcc	sl, r4
 8020036:	2aff      	cmp	r2, #255	@ 0xff
 8020038:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802003c:	d105      	bne.n	802004a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 802003e:	4481      	add	r9, r0
 8020040:	4581      	cmp	r9, r0
 8020042:	d045      	beq.n	80200d0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8020044:	f820 cb02 	strh.w	ip, [r0], #2
 8020048:	e7fa      	b.n	8020040 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 802004a:	9d03      	ldr	r5, [sp, #12]
 802004c:	ea4f 222c 	mov.w	r2, ip, asr #8
 8020050:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8020054:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8020058:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802005c:	436a      	muls	r2, r5
 802005e:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8020062:	fa5f fc8c 	uxtb.w	ip, ip
 8020066:	fb0b fb05 	mul.w	fp, fp, r5
 802006a:	fb0c fc05 	mul.w	ip, ip, r5
 802006e:	9208      	str	r2, [sp, #32]
 8020070:	4481      	add	r9, r0
 8020072:	4581      	cmp	r9, r0
 8020074:	d02c      	beq.n	80200d0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8020076:	8802      	ldrh	r2, [r0, #0]
 8020078:	9d04      	ldr	r5, [sp, #16]
 802007a:	1216      	asrs	r6, r2, #8
 802007c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8020080:	fb16 f605 	smulbb	r6, r6, r5
 8020084:	9d08      	ldr	r5, [sp, #32]
 8020086:	9f04      	ldr	r7, [sp, #16]
 8020088:	442e      	add	r6, r5
 802008a:	10d5      	asrs	r5, r2, #3
 802008c:	00d2      	lsls	r2, r2, #3
 802008e:	b2d2      	uxtb	r2, r2
 8020090:	fb12 f207 	smulbb	r2, r2, r7
 8020094:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020098:	fb15 f507 	smulbb	r5, r5, r7
 802009c:	b2b6      	uxth	r6, r6
 802009e:	4462      	add	r2, ip
 80200a0:	b292      	uxth	r2, r2
 80200a2:	1c77      	adds	r7, r6, #1
 80200a4:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80200a8:	1c57      	adds	r7, r2, #1
 80200aa:	445d      	add	r5, fp
 80200ac:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 80200b0:	b2ad      	uxth	r5, r5
 80200b2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80200b6:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80200ba:	4316      	orrs	r6, r2
 80200bc:	1c6a      	adds	r2, r5, #1
 80200be:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80200c2:	096d      	lsrs	r5, r5, #5
 80200c4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80200c8:	432e      	orrs	r6, r5
 80200ca:	f820 6b02 	strh.w	r6, [r0], #2
 80200ce:	e7d0      	b.n	8020072 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 80200d0:	4573      	cmp	r3, lr
 80200d2:	d38d      	bcc.n	801fff0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 80200d4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80200d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80200da:	fa1f f188 	uxth.w	r1, r8
 80200de:	1a64      	subs	r4, r4, r1
 80200e0:	881b      	ldrh	r3, [r3, #0]
 80200e2:	b2a4      	uxth	r4, r4
 80200e4:	2c00      	cmp	r4, #0
 80200e6:	eba3 0308 	sub.w	r3, r3, r8
 80200ea:	bf18      	it	ne
 80200ec:	2100      	movne	r1, #0
 80200ee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80200f2:	e77d      	b.n	801fff0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 80200f4:	4b03      	ldr	r3, [pc, #12]	@ (8020104 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 80200f6:	6818      	ldr	r0, [r3, #0]
 80200f8:	6803      	ldr	r3, [r0, #0]
 80200fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80200fc:	4798      	blx	r3
 80200fe:	b00f      	add	sp, #60	@ 0x3c
 8020100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020104:	2005ba80 	.word	0x2005ba80
 8020108:	2005ba7a 	.word	0x2005ba7a

0802010c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802010c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020110:	b09f      	sub	sp, #124	@ 0x7c
 8020112:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 8020116:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 802011a:	461d      	mov	r5, r3
 802011c:	4604      	mov	r4, r0
 802011e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020120:	9209      	str	r2, [sp, #36]	@ 0x24
 8020122:	2a00      	cmp	r2, #0
 8020124:	f000 81e9 	beq.w	80204fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ee>
 8020128:	6828      	ldr	r0, [r5, #0]
 802012a:	6869      	ldr	r1, [r5, #4]
 802012c:	aa1a      	add	r2, sp, #104	@ 0x68
 802012e:	c203      	stmia	r2!, {r0, r1}
 8020130:	6818      	ldr	r0, [r3, #0]
 8020132:	6859      	ldr	r1, [r3, #4]
 8020134:	aa1c      	add	r2, sp, #112	@ 0x70
 8020136:	c203      	stmia	r2!, {r0, r1}
 8020138:	a81a      	add	r0, sp, #104	@ 0x68
 802013a:	f7f9 f8fb 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802013e:	4629      	mov	r1, r5
 8020140:	a81c      	add	r0, sp, #112	@ 0x70
 8020142:	f7f9 f91f 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020146:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 802014a:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 802014e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020152:	bfdd      	ittte	le
 8020154:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020158:	b29a      	uxthle	r2, r3
 802015a:	fb91 f2f2 	sdivle	r2, r1, r2
 802015e:	2201      	movgt	r2, #1
 8020160:	9202      	str	r2, [sp, #8]
 8020162:	9802      	ldr	r0, [sp, #8]
 8020164:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8020168:	9902      	ldr	r1, [sp, #8]
 802016a:	fb92 f0f0 	sdiv	r0, r2, r0
 802016e:	b280      	uxth	r0, r0
 8020170:	9010      	str	r0, [sp, #64]	@ 0x40
 8020172:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8020174:	9802      	ldr	r0, [sp, #8]
 8020176:	4488      	add	r8, r1
 8020178:	fb05 2510 	mls	r5, r5, r0, r2
 802017c:	fb15 f503 	smulbb	r5, r5, r3
 8020180:	f108 38ff 	add.w	r8, r8, #4294967295
 8020184:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8020188:	fb98 f8f1 	sdiv	r8, r8, r1
 802018c:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 8020190:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 8020194:	440d      	add	r5, r1
 8020196:	4419      	add	r1, r3
 8020198:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 802019c:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 80201a0:	441a      	add	r2, r3
 80201a2:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 80201a6:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 80201aa:	9304      	str	r3, [sp, #16]
 80201ac:	4b93      	ldr	r3, [pc, #588]	@ (80203fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f0>)
 80201ae:	f108 0801 	add.w	r8, r8, #1
 80201b2:	6818      	ldr	r0, [r3, #0]
 80201b4:	fa1f f888 	uxth.w	r8, r8
 80201b8:	6803      	ldr	r3, [r0, #0]
 80201ba:	b2ad      	uxth	r5, r5
 80201bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201be:	4798      	blx	r3
 80201c0:	4b8f      	ldr	r3, [pc, #572]	@ (8020400 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 80201c2:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 80201c6:	881a      	ldrh	r2, [r3, #0]
 80201c8:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80201cc:	4356      	muls	r6, r2
 80201ce:	fb02 7101 	mla	r1, r2, r1, r7
 80201d2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80201d6:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 80201da:	920a      	str	r2, [sp, #40]	@ 0x28
 80201dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80201de:	2d00      	cmp	r5, #0
 80201e0:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 80201e4:	f108 0204 	add.w	r2, r8, #4
 80201e8:	9211      	str	r2, [sp, #68]	@ 0x44
 80201ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80201ec:	f04f 0100 	mov.w	r1, #0
 80201f0:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 80201f4:	9215      	str	r2, [sp, #84]	@ 0x54
 80201f6:	9a04      	ldr	r2, [sp, #16]
 80201f8:	bf18      	it	ne
 80201fa:	2200      	movne	r2, #0
 80201fc:	9318      	str	r3, [sp, #96]	@ 0x60
 80201fe:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8020202:	b292      	uxth	r2, r2
 8020204:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020206:	4b7f      	ldr	r3, [pc, #508]	@ (8020404 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8020208:	910d      	str	r1, [sp, #52]	@ 0x34
 802020a:	1b1b      	subs	r3, r3, r4
 802020c:	9319      	str	r3, [sp, #100]	@ 0x64
 802020e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020210:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020212:	fa11 f383 	uxtah	r3, r1, r3
 8020216:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8020218:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802021c:	3304      	adds	r3, #4
 802021e:	9306      	str	r3, [sp, #24]
 8020220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020222:	4283      	cmp	r3, r0
 8020224:	f240 8164 	bls.w	80204f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e4>
 8020228:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 802022c:	f04f 0a01 	mov.w	sl, #1
 8020230:	fbb5 f3f3 	udiv	r3, r5, r3
 8020234:	9902      	ldr	r1, [sp, #8]
 8020236:	9e06      	ldr	r6, [sp, #24]
 8020238:	1acb      	subs	r3, r1, r3
 802023a:	b29b      	uxth	r3, r3
 802023c:	9316      	str	r3, [sp, #88]	@ 0x58
 802023e:	9b06      	ldr	r3, [sp, #24]
 8020240:	7836      	ldrb	r6, [r6, #0]
 8020242:	7859      	ldrb	r1, [r3, #1]
 8020244:	789b      	ldrb	r3, [r3, #2]
 8020246:	9612      	str	r6, [sp, #72]	@ 0x48
 8020248:	021b      	lsls	r3, r3, #8
 802024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802024e:	9906      	ldr	r1, [sp, #24]
 8020250:	3601      	adds	r6, #1
 8020252:	78c9      	ldrb	r1, [r1, #3]
 8020254:	9605      	str	r6, [sp, #20]
 8020256:	430b      	orrs	r3, r1
 8020258:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802025a:	46d3      	mov	fp, sl
 802025c:	4419      	add	r1, r3
 802025e:	1c4e      	adds	r6, r1, #1
 8020260:	9603      	str	r6, [sp, #12]
 8020262:	7849      	ldrb	r1, [r1, #1]
 8020264:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8020266:	0209      	lsls	r1, r1, #8
 8020268:	5cf3      	ldrb	r3, [r6, r3]
 802026a:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 802026e:	4319      	orrs	r1, r3
 8020270:	b28b      	uxth	r3, r1
 8020272:	930c      	str	r3, [sp, #48]	@ 0x30
 8020274:	2300      	movs	r3, #0
 8020276:	4657      	mov	r7, sl
 8020278:	9307      	str	r3, [sp, #28]
 802027a:	469c      	mov	ip, r3
 802027c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8020280:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8020284:	930e      	str	r3, [sp, #56]	@ 0x38
 8020286:	2d00      	cmp	r5, #0
 8020288:	d07e      	beq.n	8020388 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 802028a:	42af      	cmp	r7, r5
 802028c:	d26e      	bcs.n	802036c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 802028e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020290:	1bed      	subs	r5, r5, r7
 8020292:	4283      	cmp	r3, r0
 8020294:	b2ad      	uxth	r5, r5
 8020296:	9201      	str	r2, [sp, #4]
 8020298:	d802      	bhi.n	80202a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 802029a:	e073      	b.n	8020384 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 802029c:	2b00      	cmp	r3, #0
 802029e:	d15f      	bne.n	8020360 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 80202a0:	9b03      	ldr	r3, [sp, #12]
 80202a2:	f1cb 0207 	rsb	r2, fp, #7
 80202a6:	785b      	ldrb	r3, [r3, #1]
 80202a8:	4093      	lsls	r3, r2
 80202aa:	005b      	lsls	r3, r3, #1
 80202ac:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80202b0:	9b03      	ldr	r3, [sp, #12]
 80202b2:	781b      	ldrb	r3, [r3, #0]
 80202b4:	fa43 f30b 	asr.w	r3, r3, fp
 80202b8:	b2db      	uxtb	r3, r3
 80202ba:	4313      	orrs	r3, r2
 80202bc:	f10b 0201 	add.w	r2, fp, #1
 80202c0:	fa5f fb82 	uxtb.w	fp, r2
 80202c4:	9a03      	ldr	r2, [sp, #12]
 80202c6:	f1bb 0f08 	cmp.w	fp, #8
 80202ca:	bf15      	itete	ne
 80202cc:	3201      	addne	r2, #1
 80202ce:	3202      	addeq	r2, #2
 80202d0:	9203      	strne	r2, [sp, #12]
 80202d2:	9203      	streq	r2, [sp, #12]
 80202d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80202d6:	b29f      	uxth	r7, r3
 80202d8:	bf08      	it	eq
 80202da:	f04f 0b00 	moveq.w	fp, #0
 80202de:	42ba      	cmp	r2, r7
 80202e0:	d309      	bcc.n	80202f6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 80202e2:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 80202e6:	2301      	movs	r3, #1
 80202e8:	9a05      	ldr	r2, [sp, #20]
 80202ea:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80202ee:	d30e      	bcc.n	802030e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 80202f0:	469a      	mov	sl, r3
 80202f2:	2600      	movs	r6, #0
 80202f4:	e035      	b.n	8020362 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 80202f6:	9b05      	ldr	r3, [sp, #20]
 80202f8:	429f      	cmp	r7, r3
 80202fa:	d318      	bcc.n	802032e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 80202fc:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8020300:	eb04 030a 	add.w	r3, r4, sl
 8020304:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8020308:	f10a 0301 	add.w	r3, sl, #1
 802030c:	b29b      	uxth	r3, r3
 802030e:	9a05      	ldr	r2, [sp, #20]
 8020310:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8020314:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020318:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802031a:	7116      	strb	r6, [r2, #4]
 802031c:	f10a 0601 	add.w	r6, sl, #1
 8020320:	80d1      	strh	r1, [r2, #6]
 8020322:	7156      	strb	r6, [r2, #5]
 8020324:	9a05      	ldr	r2, [sp, #20]
 8020326:	3201      	adds	r2, #1
 8020328:	b292      	uxth	r2, r2
 802032a:	9205      	str	r2, [sp, #20]
 802032c:	e7e0      	b.n	80202f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 802032e:	463a      	mov	r2, r7
 8020330:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8020334:	795b      	ldrb	r3, [r3, #5]
 8020336:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 802033a:	4426      	add	r6, r4
 802033c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 802033e:	eb01 0c06 	add.w	ip, r1, r6
 8020342:	f1bc 0f00 	cmp.w	ip, #0
 8020346:	dd07      	ble.n	8020358 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 8020348:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802034c:	f892 c004 	ldrb.w	ip, [r2, #4]
 8020350:	f806 cd01 	strb.w	ip, [r6, #-1]!
 8020354:	88d2      	ldrh	r2, [r2, #6]
 8020356:	e7f1      	b.n	802033c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 8020358:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 802035c:	b29b      	uxth	r3, r3
 802035e:	e7c3      	b.n	80202e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 8020360:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020362:	970c      	str	r7, [sp, #48]	@ 0x30
 8020364:	9a01      	ldr	r2, [sp, #4]
 8020366:	46b4      	mov	ip, r6
 8020368:	461f      	mov	r7, r3
 802036a:	e78c      	b.n	8020286 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 802036c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020370:	1b7b      	subs	r3, r7, r5
 8020372:	eb0c 0605 	add.w	r6, ip, r5
 8020376:	b29b      	uxth	r3, r3
 8020378:	9201      	str	r2, [sp, #4]
 802037a:	b2b6      	uxth	r6, r6
 802037c:	2500      	movs	r5, #0
 802037e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020380:	4282      	cmp	r2, r0
 8020382:	d88b      	bhi.n	802029c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 8020384:	9a01      	ldr	r2, [sp, #4]
 8020386:	e74b      	b.n	8020220 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 8020388:	4297      	cmp	r7, r2
 802038a:	d331      	bcc.n	80203f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e4>
 802038c:	1abb      	subs	r3, r7, r2
 802038e:	b29b      	uxth	r3, r3
 8020390:	9208      	str	r2, [sp, #32]
 8020392:	9501      	str	r5, [sp, #4]
 8020394:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020396:	29ff      	cmp	r1, #255	@ 0xff
 8020398:	9908      	ldr	r1, [sp, #32]
 802039a:	eb0c 0601 	add.w	r6, ip, r1
 802039e:	d133      	bne.n	8020408 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>
 80203a0:	f1a0 0e02 	sub.w	lr, r0, #2
 80203a4:	b2b6      	uxth	r6, r6
 80203a6:	45b4      	cmp	ip, r6
 80203a8:	f040 808a 	bne.w	80204c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b4>
 80203ac:	9908      	ldr	r1, [sp, #32]
 80203ae:	4297      	cmp	r7, r2
 80203b0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80203b4:	d3e2      	bcc.n	802037c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 80203b6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80203b8:	9904      	ldr	r1, [sp, #16]
 80203ba:	8812      	ldrh	r2, [r2, #0]
 80203bc:	1a52      	subs	r2, r2, r1
 80203be:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80203c2:	9a07      	ldr	r2, [sp, #28]
 80203c4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80203c6:	3201      	adds	r2, #1
 80203c8:	428a      	cmp	r2, r1
 80203ca:	9207      	str	r2, [sp, #28]
 80203cc:	f040 8085 	bne.w	80204da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ce>
 80203d0:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 80203d4:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 80203d8:	9b04      	ldr	r3, [sp, #16]
 80203da:	1bed      	subs	r5, r5, r7
 80203dc:	b2ad      	uxth	r5, r5
 80203de:	2d00      	cmp	r5, #0
 80203e0:	bf0c      	ite	eq
 80203e2:	461a      	moveq	r2, r3
 80203e4:	2200      	movne	r2, #0
 80203e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80203e8:	b292      	uxth	r2, r2
 80203ea:	3301      	adds	r3, #1
 80203ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80203ee:	e70e      	b.n	802020e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 80203f0:	1bd1      	subs	r1, r2, r7
 80203f2:	b28b      	uxth	r3, r1
 80203f4:	9301      	str	r3, [sp, #4]
 80203f6:	9708      	str	r7, [sp, #32]
 80203f8:	462b      	mov	r3, r5
 80203fa:	e7cb      	b.n	8020394 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 80203fc:	2005ba80 	.word	0x2005ba80
 8020400:	2005ba7a 	.word	0x2005ba7a
 8020404:	fffff7fb 	.word	0xfffff7fb
 8020408:	b2b6      	uxth	r6, r6
 802040a:	900b      	str	r0, [sp, #44]	@ 0x2c
 802040c:	45b4      	cmp	ip, r6
 802040e:	d0cd      	beq.n	80203ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 8020410:	f10c 0101 	add.w	r1, ip, #1
 8020414:	44a4      	add	ip, r4
 8020416:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 802041a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802041c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802041e:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8020422:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020424:	ea4f 2825 	mov.w	r8, r5, asr #8
 8020428:	f8b1 c000 	ldrh.w	ip, [r1]
 802042c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802042e:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 8020432:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8020436:	fb1e fe01 	smulbb	lr, lr, r1
 802043a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802043c:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8020440:	fb08 e801 	mla	r8, r8, r1, lr
 8020444:	ea4f 09ec 	mov.w	r9, ip, asr #3
 8020448:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802044a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 802044e:	fb19 f901 	smulbb	r9, r9, r1
 8020452:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 8020456:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020458:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 802045c:	fb0e 9e01 	mla	lr, lr, r1, r9
 8020460:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020464:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020466:	fa5f fc8c 	uxtb.w	ip, ip
 802046a:	fb1c fc01 	smulbb	ip, ip, r1
 802046e:	00ed      	lsls	r5, r5, #3
 8020470:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020472:	b2ed      	uxtb	r5, r5
 8020474:	fb05 c501 	mla	r5, r5, r1, ip
 8020478:	fa1f f888 	uxth.w	r8, r8
 802047c:	fa1f fe8e 	uxth.w	lr, lr
 8020480:	b2ad      	uxth	r5, r5
 8020482:	f108 0c01 	add.w	ip, r8, #1
 8020486:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802048a:	f10e 0901 	add.w	r9, lr, #1
 802048e:	f105 0c01 	add.w	ip, r5, #1
 8020492:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8020496:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 802049a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802049e:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 80204a2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80204a6:	ea4c 0808 	orr.w	r8, ip, r8
 80204aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80204ac:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80204b0:	ea48 0809 	orr.w	r8, r8, r9
 80204b4:	f821 8b02 	strh.w	r8, [r1], #2
 80204b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80204ba:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 80204be:	e7a5      	b.n	802040c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 80204c0:	f10c 0801 	add.w	r8, ip, #1
 80204c4:	44a4      	add	ip, r4
 80204c6:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 80204ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80204cc:	fa1f fc88 	uxth.w	ip, r8
 80204d0:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 80204d4:	f82e 5f02 	strh.w	r5, [lr, #2]!
 80204d8:	e765      	b.n	80203a6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 80204da:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80204de:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 80204e2:	1aad      	subs	r5, r5, r2
 80204e4:	b2ad      	uxth	r5, r5
 80204e6:	2d00      	cmp	r5, #0
 80204e8:	bf18      	it	ne
 80204ea:	2200      	movne	r2, #0
 80204ec:	9201      	str	r2, [sp, #4]
 80204ee:	e746      	b.n	802037e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 80204f0:	4b03      	ldr	r3, [pc, #12]	@ (8020500 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f4>)
 80204f2:	6818      	ldr	r0, [r3, #0]
 80204f4:	6803      	ldr	r3, [r0, #0]
 80204f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80204f8:	4798      	blx	r3
 80204fa:	b01f      	add	sp, #124	@ 0x7c
 80204fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020500:	2005ba80 	.word	0x2005ba80

08020504 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 8020504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020508:	b093      	sub	sp, #76	@ 0x4c
 802050a:	4616      	mov	r6, r2
 802050c:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8020510:	9003      	str	r0, [sp, #12]
 8020512:	460d      	mov	r5, r1
 8020514:	9201      	str	r2, [sp, #4]
 8020516:	2a00      	cmp	r2, #0
 8020518:	f000 8304 	beq.w	8020b24 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x620>
 802051c:	6830      	ldr	r0, [r6, #0]
 802051e:	6871      	ldr	r1, [r6, #4]
 8020520:	ac0e      	add	r4, sp, #56	@ 0x38
 8020522:	c403      	stmia	r4!, {r0, r1}
 8020524:	6818      	ldr	r0, [r3, #0]
 8020526:	6859      	ldr	r1, [r3, #4]
 8020528:	ac10      	add	r4, sp, #64	@ 0x40
 802052a:	c403      	stmia	r4!, {r0, r1}
 802052c:	a80e      	add	r0, sp, #56	@ 0x38
 802052e:	f7f8 ff01 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020532:	4631      	mov	r1, r6
 8020534:	a810      	add	r0, sp, #64	@ 0x40
 8020536:	f7f8 ff25 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802053a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 802053e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8020542:	bfdd      	ittte	le
 8020544:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020548:	b293      	uxthle	r3, r2
 802054a:	fb91 f3f3 	sdivle	r3, r1, r3
 802054e:	2301      	movgt	r3, #1
 8020550:	9304      	str	r3, [sp, #16]
 8020552:	f105 0308 	add.w	r3, r5, #8
 8020556:	9904      	ldr	r1, [sp, #16]
 8020558:	9308      	str	r3, [sp, #32]
 802055a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 802055e:	440b      	add	r3, r1
 8020560:	3b01      	subs	r3, #1
 8020562:	fb93 f3f1 	sdiv	r3, r3, r1
 8020566:	9908      	ldr	r1, [sp, #32]
 8020568:	3b01      	subs	r3, #1
 802056a:	b29b      	uxth	r3, r3
 802056c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020570:	9309      	str	r3, [sp, #36]	@ 0x24
 8020572:	9904      	ldr	r1, [sp, #16]
 8020574:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8020578:	fb93 f0f1 	sdiv	r0, r3, r1
 802057c:	b284      	uxth	r4, r0
 802057e:	9405      	str	r4, [sp, #20]
 8020580:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8020584:	fb05 3914 	mls	r9, r5, r4, r3
 8020588:	fb19 f902 	smulbb	r9, r9, r2
 802058c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8020590:	4489      	add	r9, r1
 8020592:	fa1f f989 	uxth.w	r9, r9
 8020596:	2d00      	cmp	r5, #0
 8020598:	d05d      	beq.n	8020656 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 802059a:	9808      	ldr	r0, [sp, #32]
 802059c:	1e6a      	subs	r2, r5, #1
 802059e:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 80205a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80205a4:	fa9a fa8a 	rev.w	sl, sl
 80205a8:	4492      	add	sl, r2
 80205aa:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80205ae:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80205b2:	4411      	add	r1, r2
 80205b4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80205b8:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80205bc:	4413      	add	r3, r2
 80205be:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80205c2:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80205c6:	f04f 0600 	mov.w	r6, #0
 80205ca:	9302      	str	r3, [sp, #8]
 80205cc:	4bca      	ldr	r3, [pc, #808]	@ (80208f8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 80205ce:	6818      	ldr	r0, [r3, #0]
 80205d0:	6803      	ldr	r3, [r0, #0]
 80205d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80205d4:	4798      	blx	r3
 80205d6:	4bc9      	ldr	r3, [pc, #804]	@ (80208fc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 80205d8:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80205dc:	881b      	ldrh	r3, [r3, #0]
 80205de:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 80205e2:	2100      	movs	r1, #0
 80205e4:	fb03 2404 	mla	r4, r3, r4, r2
 80205e8:	436b      	muls	r3, r5
 80205ea:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80205ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80205f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80205f4:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80205f8:	2280      	movs	r2, #128	@ 0x80
 80205fa:	fb99 f3f3 	sdiv	r3, r9, r3
 80205fe:	9306      	str	r3, [sp, #24]
 8020600:	9b01      	ldr	r3, [sp, #4]
 8020602:	43db      	mvns	r3, r3
 8020604:	b2db      	uxtb	r3, r3
 8020606:	930a      	str	r3, [sp, #40]	@ 0x28
 8020608:	9b03      	ldr	r3, [sp, #12]
 802060a:	3304      	adds	r3, #4
 802060c:	4618      	mov	r0, r3
 802060e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020610:	f00c fca8 	bl	802cf64 <memset>
 8020614:	4bba      	ldr	r3, [pc, #744]	@ (8020900 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 8020616:	9300      	str	r3, [sp, #0]
 8020618:	2300      	movs	r3, #0
 802061a:	9307      	str	r3, [sp, #28]
 802061c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802061e:	42a3      	cmp	r3, r4
 8020620:	f240 827b 	bls.w	8020b1a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x616>
 8020624:	f04f 0e07 	mov.w	lr, #7
 8020628:	f1b9 0f00 	cmp.w	r9, #0
 802062c:	f000 8159 	beq.w	80208e2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 8020630:	f89a 5000 	ldrb.w	r5, [sl]
 8020634:	f10a 0701 	add.w	r7, sl, #1
 8020638:	b2ed      	uxtb	r5, r5
 802063a:	11aa      	asrs	r2, r5, #6
 802063c:	d10e      	bne.n	802065c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 802063e:	9b03      	ldr	r3, [sp, #12]
 8020640:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8020644:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020648:	88ae      	ldrh	r6, [r5, #4]
 802064a:	f109 39ff 	add.w	r9, r9, #4294967295
 802064e:	fa1f f989 	uxth.w	r9, r9
 8020652:	46ba      	mov	sl, r7
 8020654:	e7e8      	b.n	8020628 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 8020656:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 802065a:	e7a6      	b.n	80205aa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 802065c:	2a01      	cmp	r2, #1
 802065e:	d129      	bne.n	80206b4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 8020660:	2103      	movs	r1, #3
 8020662:	f3c6 0304 	ubfx	r3, r6, #0, #5
 8020666:	f005 0203 	and.w	r2, r5, #3
 802066a:	3b02      	subs	r3, #2
 802066c:	4413      	add	r3, r2
 802066e:	f003 031f 	and.w	r3, r3, #31
 8020672:	f3c5 0281 	ubfx	r2, r5, #2, #2
 8020676:	f363 0604 	bfi	r6, r3, #0, #5
 802067a:	3a02      	subs	r2, #2
 802067c:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 8020680:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020684:	f3c5 1501 	ubfx	r5, r5, #4, #2
 8020688:	f362 164a 	bfi	r6, r2, #5, #6
 802068c:	3d02      	subs	r5, #2
 802068e:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 8020692:	f005 051f 	and.w	r5, r5, #31
 8020696:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802069a:	fb11 2205 	smlabb	r2, r1, r5, r2
 802069e:	fb1e 2303 	smlabb	r3, lr, r3, r2
 80206a2:	9a03      	ldr	r2, [sp, #12]
 80206a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80206a8:	f365 26cf 	bfi	r6, r5, #11, #5
 80206ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80206b0:	809e      	strh	r6, [r3, #4]
 80206b2:	e7ca      	b.n	802064a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 80206b4:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 80206b8:	2a02      	cmp	r2, #2
 80206ba:	b2ab      	uxth	r3, r5
 80206bc:	d136      	bne.n	802072c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 80206be:	2101      	movs	r1, #1
 80206c0:	fb12 1205 	smlabb	r2, r2, r5, r1
 80206c4:	4492      	add	sl, r2
 80206c6:	463a      	mov	r2, r7
 80206c8:	4552      	cmp	r2, sl
 80206ca:	d01c      	beq.n	8020706 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 80206cc:	4694      	mov	ip, r2
 80206ce:	f04f 0b03 	mov.w	fp, #3
 80206d2:	f81c 1b02 	ldrb.w	r1, [ip], #2
 80206d6:	7852      	ldrb	r2, [r2, #1]
 80206d8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80206dc:	f3c1 1045 	ubfx	r0, r1, #5, #6
 80206e0:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 80206e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80206e8:	fb1b 0008 	smlabb	r0, fp, r8, r0
 80206ec:	f001 021f 	and.w	r2, r1, #31
 80206f0:	fb1e 0002 	smlabb	r0, lr, r2, r0
 80206f4:	9a03      	ldr	r2, [sp, #12]
 80206f6:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 80206fa:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80206fe:	460e      	mov	r6, r1
 8020700:	8081      	strh	r1, [r0, #4]
 8020702:	4662      	mov	r2, ip
 8020704:	e7e0      	b.n	80206c8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 8020706:	4599      	cmp	r9, r3
 8020708:	d20b      	bcs.n	8020722 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 802070a:	eba5 0509 	sub.w	r5, r5, r9
 802070e:	2d00      	cmp	r5, #0
 8020710:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 8020714:	f300 8209 	bgt.w	8020b2a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x626>
 8020718:	2301      	movs	r3, #1
 802071a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802071e:	9307      	str	r3, [sp, #28]
 8020720:	e00c      	b.n	802073c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8020722:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8020726:	eba9 0903 	sub.w	r9, r9, r3
 802072a:	e790      	b.n	802064e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 802072c:	4599      	cmp	r9, r3
 802072e:	d2fa      	bcs.n	8020726 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 8020730:	eba5 0509 	sub.w	r5, r5, r9
 8020734:	2d00      	cmp	r5, #0
 8020736:	dc1d      	bgt.n	8020774 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 8020738:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802073c:	f04f 0b00 	mov.w	fp, #0
 8020740:	f1b8 0f00 	cmp.w	r8, #0
 8020744:	f340 81a1 	ble.w	8020a8a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x586>
 8020748:	783b      	ldrb	r3, [r7, #0]
 802074a:	f107 0a01 	add.w	sl, r7, #1
 802074e:	b2db      	uxtb	r3, r3
 8020750:	119a      	asrs	r2, r3, #6
 8020752:	f040 80d7 	bne.w	8020904 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 8020756:	9a03      	ldr	r2, [sp, #12]
 8020758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802075c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020760:	889e      	ldrh	r6, [r3, #4]
 8020762:	9b01      	ldr	r3, [sp, #4]
 8020764:	2bff      	cmp	r3, #255	@ 0xff
 8020766:	f040 81e9 	bne.w	8020b3c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x638>
 802076a:	8026      	strh	r6, [r4, #0]
 802076c:	f108 38ff 	add.w	r8, r8, #4294967295
 8020770:	3402      	adds	r4, #2
 8020772:	e0be      	b.n	80208f2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8020774:	9b02      	ldr	r3, [sp, #8]
 8020776:	9a02      	ldr	r2, [sp, #8]
 8020778:	42ab      	cmp	r3, r5
 802077a:	bfa8      	it	ge
 802077c:	462b      	movge	r3, r5
 802077e:	eba2 0803 	sub.w	r8, r2, r3
 8020782:	9a07      	ldr	r2, [sp, #28]
 8020784:	1aed      	subs	r5, r5, r3
 8020786:	2a00      	cmp	r2, #0
 8020788:	d05a      	beq.n	8020840 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 802078a:	9a01      	ldr	r2, [sp, #4]
 802078c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020790:	2aff      	cmp	r2, #255	@ 0xff
 8020792:	d049      	beq.n	8020828 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8020794:	f8bd e004 	ldrh.w	lr, [sp, #4]
 8020798:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 802079c:	42a3      	cmp	r3, r4
 802079e:	f240 80a5 	bls.w	80208ec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 80207a2:	46bc      	mov	ip, r7
 80207a4:	8820      	ldrh	r0, [r4, #0]
 80207a6:	f81c 2b02 	ldrb.w	r2, [ip], #2
 80207aa:	7879      	ldrb	r1, [r7, #1]
 80207ac:	ea4f 2a20 	mov.w	sl, r0, asr #8
 80207b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80207b4:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 80207b8:	b212      	sxth	r2, r2
 80207ba:	fb1a fa09 	smulbb	sl, sl, r9
 80207be:	b291      	uxth	r1, r2
 80207c0:	120f      	asrs	r7, r1, #8
 80207c2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80207c6:	fb07 a70e 	mla	r7, r7, lr, sl
 80207ca:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 80207ce:	00c0      	lsls	r0, r0, #3
 80207d0:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80207d4:	b2c0      	uxtb	r0, r0
 80207d6:	fb1a fa09 	smulbb	sl, sl, r9
 80207da:	fb10 f009 	smulbb	r0, r0, r9
 80207de:	10c9      	asrs	r1, r1, #3
 80207e0:	00d2      	lsls	r2, r2, #3
 80207e2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80207e6:	b2d2      	uxtb	r2, r2
 80207e8:	fb01 a10e 	mla	r1, r1, lr, sl
 80207ec:	fb02 020e 	mla	r2, r2, lr, r0
 80207f0:	b2bf      	uxth	r7, r7
 80207f2:	b289      	uxth	r1, r1
 80207f4:	b292      	uxth	r2, r2
 80207f6:	1c78      	adds	r0, r7, #1
 80207f8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80207fc:	f101 0a01 	add.w	sl, r1, #1
 8020800:	1c50      	adds	r0, r2, #1
 8020802:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020806:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 802080a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 802080e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8020812:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020816:	4307      	orrs	r7, r0
 8020818:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802081c:	ea47 070a 	orr.w	r7, r7, sl
 8020820:	f824 7b02 	strh.w	r7, [r4], #2
 8020824:	4667      	mov	r7, ip
 8020826:	e7b9      	b.n	802079c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 8020828:	42a3      	cmp	r3, r4
 802082a:	d95f      	bls.n	80208ec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 802082c:	463a      	mov	r2, r7
 802082e:	f812 1b02 	ldrb.w	r1, [r2], #2
 8020832:	7878      	ldrb	r0, [r7, #1]
 8020834:	4617      	mov	r7, r2
 8020836:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 802083a:	f824 1b02 	strh.w	r1, [r4], #2
 802083e:	e7f3      	b.n	8020828 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8020840:	9901      	ldr	r1, [sp, #4]
 8020842:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020846:	29ff      	cmp	r1, #255	@ 0xff
 8020848:	b2b2      	uxth	r2, r6
 802084a:	d044      	beq.n	80208d6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 802084c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8020850:	ea4f 2922 	mov.w	r9, r2, asr #8
 8020854:	4608      	mov	r0, r1
 8020856:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802085a:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 802085e:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8020862:	fb09 f901 	mul.w	r9, r9, r1
 8020866:	fb0e fe01 	mul.w	lr, lr, r1
 802086a:	00d1      	lsls	r1, r2, #3
 802086c:	b2c9      	uxtb	r1, r1
 802086e:	4341      	muls	r1, r0
 8020870:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 8020874:	429c      	cmp	r4, r3
 8020876:	f4bf af61 	bcs.w	802073c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 802087a:	8822      	ldrh	r2, [r4, #0]
 802087c:	1210      	asrs	r0, r2, #8
 802087e:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8020882:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8020886:	00d2      	lsls	r2, r2, #3
 8020888:	fb00 900a 	mla	r0, r0, sl, r9
 802088c:	b2d2      	uxtb	r2, r2
 802088e:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8020892:	fb02 120a 	mla	r2, r2, sl, r1
 8020896:	fb0c ec0a 	mla	ip, ip, sl, lr
 802089a:	b280      	uxth	r0, r0
 802089c:	b292      	uxth	r2, r2
 802089e:	f100 0b01 	add.w	fp, r0, #1
 80208a2:	fa1f fc8c 	uxth.w	ip, ip
 80208a6:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80208aa:	1c50      	adds	r0, r2, #1
 80208ac:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80208b0:	f10c 0201 	add.w	r2, ip, #1
 80208b4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80208b8:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 80208bc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80208c0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80208c4:	ea40 0b0b 	orr.w	fp, r0, fp
 80208c8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80208cc:	ea4b 0b0c 	orr.w	fp, fp, ip
 80208d0:	f824 bb02 	strh.w	fp, [r4], #2
 80208d4:	e7ce      	b.n	8020874 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 80208d6:	429c      	cmp	r4, r3
 80208d8:	f4bf af30 	bcs.w	802073c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 80208dc:	f824 2b02 	strh.w	r2, [r4], #2
 80208e0:	e7f9      	b.n	80208d6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 80208e2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80208e6:	4657      	mov	r7, sl
 80208e8:	464d      	mov	r5, r9
 80208ea:	e727      	b.n	802073c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 80208ec:	2300      	movs	r3, #0
 80208ee:	e716      	b.n	802071e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 80208f0:	44bb      	add	fp, r7
 80208f2:	4657      	mov	r7, sl
 80208f4:	e724      	b.n	8020740 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 80208f6:	bf00      	nop
 80208f8:	2005ba80 	.word	0x2005ba80
 80208fc:	2005ba7a 	.word	0x2005ba7a
 8020900:	20045700 	.word	0x20045700
 8020904:	2a01      	cmp	r2, #1
 8020906:	d12a      	bne.n	802095e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 8020908:	f3c6 0104 	ubfx	r1, r6, #0, #5
 802090c:	f003 0203 	and.w	r2, r3, #3
 8020910:	3902      	subs	r1, #2
 8020912:	4411      	add	r1, r2
 8020914:	f001 011f 	and.w	r1, r1, #31
 8020918:	f3c3 0081 	ubfx	r0, r3, #2, #2
 802091c:	f361 0604 	bfi	r6, r1, #0, #5
 8020920:	3802      	subs	r0, #2
 8020922:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 8020926:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 802092a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 802092e:	f360 164a 	bfi	r6, r0, #5, #6
 8020932:	3b02      	subs	r3, #2
 8020934:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 8020938:	f002 031f 	and.w	r3, r2, #31
 802093c:	2203      	movs	r2, #3
 802093e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020942:	f363 26cf 	bfi	r6, r3, #11, #5
 8020946:	fb12 0303 	smlabb	r3, r2, r3, r0
 802094a:	2207      	movs	r2, #7
 802094c:	fb12 3301 	smlabb	r3, r2, r1, r3
 8020950:	9a03      	ldr	r2, [sp, #12]
 8020952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020956:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802095a:	809e      	strh	r6, [r3, #4]
 802095c:	e701      	b.n	8020762 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 802095e:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8020962:	45a8      	cmp	r8, r5
 8020964:	4647      	mov	r7, r8
 8020966:	bfa8      	it	ge
 8020968:	462f      	movge	r7, r5
 802096a:	2a02      	cmp	r2, #2
 802096c:	d154      	bne.n	8020a18 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 802096e:	9b01      	ldr	r3, [sp, #4]
 8020970:	2bff      	cmp	r3, #255	@ 0xff
 8020972:	d01a      	beq.n	80209aa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 8020974:	eb0b 0307 	add.w	r3, fp, r7
 8020978:	2b40      	cmp	r3, #64	@ 0x40
 802097a:	dd16      	ble.n	80209aa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 802097c:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8020980:	4649      	mov	r1, r9
 8020982:	9800      	ldr	r0, [sp, #0]
 8020984:	f7f1 fe02 	bl	801258c <_ZN8touchgfx5paint9flushLineEPmi>
 8020988:	465a      	mov	r2, fp
 802098a:	9b01      	ldr	r3, [sp, #4]
 802098c:	4620      	mov	r0, r4
 802098e:	9900      	ldr	r1, [sp, #0]
 8020990:	f7f1 fe5a 	bl	8012648 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8020994:	9b00      	ldr	r3, [sp, #0]
 8020996:	f04f 0b00 	mov.w	fp, #0
 802099a:	461a      	mov	r2, r3
 802099c:	4b6b      	ldr	r3, [pc, #428]	@ (8020b4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 802099e:	444c      	add	r4, r9
 80209a0:	429a      	cmp	r2, r3
 80209a2:	bf0c      	ite	eq
 80209a4:	4b6a      	ldreq	r3, [pc, #424]	@ (8020b50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 80209a6:	4b69      	ldrne	r3, [pc, #420]	@ (8020b4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 80209a8:	9300      	str	r3, [sp, #0]
 80209aa:	4652      	mov	r2, sl
 80209ac:	2100      	movs	r1, #0
 80209ae:	42a9      	cmp	r1, r5
 80209b0:	da2c      	bge.n	8020a0c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 80209b2:	4694      	mov	ip, r2
 80209b4:	f04f 0903 	mov.w	r9, #3
 80209b8:	f81c 3b02 	ldrb.w	r3, [ip], #2
 80209bc:	7852      	ldrb	r2, [r2, #1]
 80209be:	42b9      	cmp	r1, r7
 80209c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80209c4:	f3c3 1045 	ubfx	r0, r3, #5, #6
 80209c8:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 80209cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80209d0:	fb19 000e 	smlabb	r0, r9, lr, r0
 80209d4:	f04f 0e07 	mov.w	lr, #7
 80209d8:	f003 021f 	and.w	r2, r3, #31
 80209dc:	fb1e 0002 	smlabb	r0, lr, r2, r0
 80209e0:	9a03      	ldr	r2, [sp, #12]
 80209e2:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 80209e6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80209ea:	461e      	mov	r6, r3
 80209ec:	8083      	strh	r3, [r0, #4]
 80209ee:	da0a      	bge.n	8020a06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 80209f0:	9a01      	ldr	r2, [sp, #4]
 80209f2:	2aff      	cmp	r2, #255	@ 0xff
 80209f4:	bf15      	itete	ne
 80209f6:	9a00      	ldrne	r2, [sp, #0]
 80209f8:	8023      	strheq	r3, [r4, #0]
 80209fa:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 80209fe:	3402      	addeq	r4, #2
 8020a00:	bf18      	it	ne
 8020a02:	f10b 0b01 	addne.w	fp, fp, #1
 8020a06:	3101      	adds	r1, #1
 8020a08:	4662      	mov	r2, ip
 8020a0a:	e7d0      	b.n	80209ae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 8020a0c:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8020a10:	eba8 0807 	sub.w	r8, r8, r7
 8020a14:	1bed      	subs	r5, r5, r7
 8020a16:	e76c      	b.n	80208f2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8020a18:	9b01      	ldr	r3, [sp, #4]
 8020a1a:	eba8 0807 	sub.w	r8, r8, r7
 8020a1e:	2bff      	cmp	r3, #255	@ 0xff
 8020a20:	eba5 0507 	sub.w	r5, r5, r7
 8020a24:	fa1f f986 	uxth.w	r9, r6
 8020a28:	d027      	beq.n	8020a7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x576>
 8020a2a:	eb0b 0307 	add.w	r3, fp, r7
 8020a2e:	2b40      	cmp	r3, #64	@ 0x40
 8020a30:	dd18      	ble.n	8020a64 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x560>
 8020a32:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8020a36:	4619      	mov	r1, r3
 8020a38:	9800      	ldr	r0, [sp, #0]
 8020a3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8020a3c:	f7f1 fda6 	bl	801258c <_ZN8touchgfx5paint9flushLineEPmi>
 8020a40:	465a      	mov	r2, fp
 8020a42:	9b01      	ldr	r3, [sp, #4]
 8020a44:	4620      	mov	r0, r4
 8020a46:	9900      	ldr	r1, [sp, #0]
 8020a48:	f7f1 fdfe 	bl	8012648 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8020a4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020a4e:	f04f 0b00 	mov.w	fp, #0
 8020a52:	441c      	add	r4, r3
 8020a54:	9b00      	ldr	r3, [sp, #0]
 8020a56:	461a      	mov	r2, r3
 8020a58:	4b3c      	ldr	r3, [pc, #240]	@ (8020b4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020a5a:	429a      	cmp	r2, r3
 8020a5c:	bf0c      	ite	eq
 8020a5e:	4b3c      	ldreq	r3, [pc, #240]	@ (8020b50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8020a60:	4b3a      	ldrne	r3, [pc, #232]	@ (8020b4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020a62:	9300      	str	r3, [sp, #0]
 8020a64:	9b00      	ldr	r3, [sp, #0]
 8020a66:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 8020a6a:	463b      	mov	r3, r7
 8020a6c:	2b00      	cmp	r3, #0
 8020a6e:	f43f af3f 	beq.w	80208f0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 8020a72:	f822 9b02 	strh.w	r9, [r2], #2
 8020a76:	3b01      	subs	r3, #1
 8020a78:	e7f8      	b.n	8020a6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x568>
 8020a7a:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8020a7e:	42a7      	cmp	r7, r4
 8020a80:	f67f af37 	bls.w	80208f2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8020a84:	f824 9b02 	strh.w	r9, [r4], #2
 8020a88:	e7f9      	b.n	8020a7e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x57a>
 8020a8a:	f1bb 0f00 	cmp.w	fp, #0
 8020a8e:	d00c      	beq.n	8020aaa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a6>
 8020a90:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8020a94:	4641      	mov	r1, r8
 8020a96:	9800      	ldr	r0, [sp, #0]
 8020a98:	f7f1 fd78 	bl	801258c <_ZN8touchgfx5paint9flushLineEPmi>
 8020a9c:	4620      	mov	r0, r4
 8020a9e:	9b01      	ldr	r3, [sp, #4]
 8020aa0:	465a      	mov	r2, fp
 8020aa2:	9900      	ldr	r1, [sp, #0]
 8020aa4:	f7f1 fdd0 	bl	8012648 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8020aa8:	4444      	add	r4, r8
 8020aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8020b54 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 8020aac:	9a02      	ldr	r2, [sp, #8]
 8020aae:	881b      	ldrh	r3, [r3, #0]
 8020ab0:	1a9b      	subs	r3, r3, r2
 8020ab2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020ab6:	9b06      	ldr	r3, [sp, #24]
 8020ab8:	3301      	adds	r3, #1
 8020aba:	9306      	str	r3, [sp, #24]
 8020abc:	9a06      	ldr	r2, [sp, #24]
 8020abe:	9b04      	ldr	r3, [sp, #16]
 8020ac0:	4293      	cmp	r3, r2
 8020ac2:	d120      	bne.n	8020b06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x602>
 8020ac4:	9b05      	ldr	r3, [sp, #20]
 8020ac6:	9a05      	ldr	r2, [sp, #20]
 8020ac8:	f103 0801 	add.w	r8, r3, #1
 8020acc:	9b08      	ldr	r3, [sp, #32]
 8020ace:	2100      	movs	r1, #0
 8020ad0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8020ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ad6:	ba3f      	rev	r7, r7
 8020ad8:	2280      	movs	r2, #128	@ 0x80
 8020ada:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020adc:	441f      	add	r7, r3
 8020ade:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 8020ae2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8020ae6:	f00c fa3d 	bl	802cf64 <memset>
 8020aea:	2300      	movs	r3, #0
 8020aec:	f04f 0600 	mov.w	r6, #0
 8020af0:	eba9 0905 	sub.w	r9, r9, r5
 8020af4:	fa1f f989 	uxth.w	r9, r9
 8020af8:	f8cd 8014 	str.w	r8, [sp, #20]
 8020afc:	9306      	str	r3, [sp, #24]
 8020afe:	f7f1 fd2d 	bl	801255c <_ZN8touchgfx5paint8tearDownEv>
 8020b02:	46ba      	mov	sl, r7
 8020b04:	e58a      	b.n	802061c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 8020b06:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8020b0a:	9b02      	ldr	r3, [sp, #8]
 8020b0c:	eba9 0903 	sub.w	r9, r9, r3
 8020b10:	eba9 0505 	sub.w	r5, r9, r5
 8020b14:	fa1f f985 	uxth.w	r9, r5
 8020b18:	e7f1      	b.n	8020afe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5fa>
 8020b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8020b58 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x654>)
 8020b1c:	6818      	ldr	r0, [r3, #0]
 8020b1e:	6803      	ldr	r3, [r0, #0]
 8020b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020b22:	4798      	blx	r3
 8020b24:	b013      	add	sp, #76	@ 0x4c
 8020b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b2a:	9b02      	ldr	r3, [sp, #8]
 8020b2c:	9a02      	ldr	r2, [sp, #8]
 8020b2e:	42ab      	cmp	r3, r5
 8020b30:	bfa8      	it	ge
 8020b32:	462b      	movge	r3, r5
 8020b34:	eba2 0803 	sub.w	r8, r2, r3
 8020b38:	1aed      	subs	r5, r5, r3
 8020b3a:	e626      	b.n	802078a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 8020b3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8020b40:	fa1f f986 	uxth.w	r9, r6
 8020b44:	2500      	movs	r5, #0
 8020b46:	2701      	movs	r7, #1
 8020b48:	e76f      	b.n	8020a2a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x526>
 8020b4a:	bf00      	nop
 8020b4c:	20045700 	.word	0x20045700
 8020b50:	20045800 	.word	0x20045800
 8020b54:	2005ba7a 	.word	0x2005ba7a
 8020b58:	2005ba80 	.word	0x2005ba80

08020b5c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b60:	b08f      	sub	sp, #60	@ 0x3c
 8020b62:	9203      	str	r2, [sp, #12]
 8020b64:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020b68:	461c      	mov	r4, r3
 8020b6a:	460f      	mov	r7, r1
 8020b6c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020b6e:	9202      	str	r2, [sp, #8]
 8020b70:	2a00      	cmp	r2, #0
 8020b72:	f000 812a 	beq.w	8020dca <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26e>
 8020b76:	6820      	ldr	r0, [r4, #0]
 8020b78:	6861      	ldr	r1, [r4, #4]
 8020b7a:	aa0a      	add	r2, sp, #40	@ 0x28
 8020b7c:	c203      	stmia	r2!, {r0, r1}
 8020b7e:	6818      	ldr	r0, [r3, #0]
 8020b80:	6859      	ldr	r1, [r3, #4]
 8020b82:	aa0c      	add	r2, sp, #48	@ 0x30
 8020b84:	c203      	stmia	r2!, {r0, r1}
 8020b86:	a80a      	add	r0, sp, #40	@ 0x28
 8020b88:	f7f8 fbd4 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b8c:	4621      	mov	r1, r4
 8020b8e:	a80c      	add	r0, sp, #48	@ 0x30
 8020b90:	f7f8 fbf8 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b94:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8020b98:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8020b9c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020ba0:	bfdd      	ittte	le
 8020ba2:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020ba6:	b2b3      	uxthle	r3, r6
 8020ba8:	fb92 f3f3 	sdivle	r3, r2, r3
 8020bac:	2301      	movgt	r3, #1
 8020bae:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020bb2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8020bb6:	fb92 f1f3 	sdiv	r1, r2, r3
 8020bba:	fa1f fc81 	uxth.w	ip, r1
 8020bbe:	4661      	mov	r1, ip
 8020bc0:	fb0c 2413 	mls	r4, ip, r3, r2
 8020bc4:	fb14 f406 	smulbb	r4, r4, r6
 8020bc8:	441d      	add	r5, r3
 8020bca:	3d01      	subs	r5, #1
 8020bcc:	4404      	add	r4, r0
 8020bce:	fb95 f5f3 	sdiv	r5, r5, r3
 8020bd2:	b2a4      	uxth	r4, r4
 8020bd4:	b121      	cbz	r1, 8020be0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 8020bd6:	9b03      	ldr	r3, [sp, #12]
 8020bd8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020bdc:	ba1b      	rev	r3, r3
 8020bde:	441f      	add	r7, r3
 8020be0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020be4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8020be8:	4418      	add	r0, r3
 8020bea:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020bee:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8020bf2:	441a      	add	r2, r3
 8020bf4:	4b76      	ldr	r3, [pc, #472]	@ (8020dd0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8020bf6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8020bfa:	6818      	ldr	r0, [r3, #0]
 8020bfc:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8020c00:	6803      	ldr	r3, [r0, #0]
 8020c02:	b2ad      	uxth	r5, r5
 8020c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020c06:	4798      	blx	r3
 8020c08:	4a72      	ldr	r2, [pc, #456]	@ (8020dd4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x278>)
 8020c0a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8020c0e:	8813      	ldrh	r3, [r2, #0]
 8020c10:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8020c14:	00ad      	lsls	r5, r5, #2
 8020c16:	fb03 c101 	mla	r1, r3, r1, ip
 8020c1a:	4373      	muls	r3, r6
 8020c1c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020c20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020c24:	2c00      	cmp	r4, #0
 8020c26:	9304      	str	r3, [sp, #16]
 8020c28:	f105 0304 	add.w	r3, r5, #4
 8020c2c:	9305      	str	r3, [sp, #20]
 8020c2e:	bf0c      	ite	eq
 8020c30:	46c8      	moveq	r8, r9
 8020c32:	f04f 0800 	movne.w	r8, #0
 8020c36:	2300      	movs	r3, #0
 8020c38:	fa1f f888 	uxth.w	r8, r8
 8020c3c:	9301      	str	r3, [sp, #4]
 8020c3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8020c40:	9a04      	ldr	r2, [sp, #16]
 8020c42:	4282      	cmp	r2, r0
 8020c44:	f240 80bc 	bls.w	8020dc0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x264>
 8020c48:	b95b      	cbnz	r3, 8020c62 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x106>
 8020c4a:	783a      	ldrb	r2, [r7, #0]
 8020c4c:	0993      	lsrs	r3, r2, #6
 8020c4e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020c52:	9201      	str	r2, [sp, #4]
 8020c54:	1e5a      	subs	r2, r3, #1
 8020c56:	2a02      	cmp	r2, #2
 8020c58:	bf8d      	iteet	hi
 8020c5a:	787b      	ldrbhi	r3, [r7, #1]
 8020c5c:	3701      	addls	r7, #1
 8020c5e:	b29b      	uxthls	r3, r3
 8020c60:	3702      	addhi	r7, #2
 8020c62:	b184      	cbz	r4, 8020c86 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8020c64:	429c      	cmp	r4, r3
 8020c66:	bf99      	ittee	ls
 8020c68:	1b1c      	subls	r4, r3, r4
 8020c6a:	fa1f fa84 	uxthls.w	sl, r4
 8020c6e:	46c4      	movhi	ip, r8
 8020c70:	f04f 0a00 	movhi.w	sl, #0
 8020c74:	bf93      	iteet	ls
 8020c76:	2400      	movls	r4, #0
 8020c78:	1ae4      	subhi	r4, r4, r3
 8020c7a:	b2a4      	uxthhi	r4, r4
 8020c7c:	fa1f fc89 	uxthls.w	ip, r9
 8020c80:	4653      	mov	r3, sl
 8020c82:	46e0      	mov	r8, ip
 8020c84:	e7dc      	b.n	8020c40 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe4>
 8020c86:	2204      	movs	r2, #4
 8020c88:	4615      	mov	r5, r2
 8020c8a:	4543      	cmp	r3, r8
 8020c8c:	bf2c      	ite	cs
 8020c8e:	46c6      	movcs	lr, r8
 8020c90:	469e      	movcc	lr, r3
 8020c92:	9905      	ldr	r1, [sp, #20]
 8020c94:	9a01      	ldr	r2, [sp, #4]
 8020c96:	bf28      	it	cs
 8020c98:	eba3 0a08 	subcs.w	sl, r3, r8
 8020c9c:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020ca0:	9903      	ldr	r1, [sp, #12]
 8020ca2:	bf38      	it	cc
 8020ca4:	eba8 0c03 	subcc.w	ip, r8, r3
 8020ca8:	588a      	ldr	r2, [r1, r2]
 8020caa:	bf28      	it	cs
 8020cac:	fa1f fa8a 	uxthcs.w	sl, sl
 8020cb0:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8020cb4:	bf2e      	itee	cs
 8020cb6:	46a4      	movcs	ip, r4
 8020cb8:	fa1f fc8c 	uxthcc.w	ip, ip
 8020cbc:	46a2      	movcc	sl, r4
 8020cbe:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8020cc2:	2900      	cmp	r1, #0
 8020cc4:	d066      	beq.n	8020d94 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8020cc6:	29ff      	cmp	r1, #255	@ 0xff
 8020cc8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8020ccc:	d114      	bne.n	8020cf8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8020cce:	9d02      	ldr	r5, [sp, #8]
 8020cd0:	2dff      	cmp	r5, #255	@ 0xff
 8020cd2:	d111      	bne.n	8020cf8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8020cd4:	0951      	lsrs	r1, r2, #5
 8020cd6:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8020cda:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020cde:	f026 0607 	bic.w	r6, r6, #7
 8020ce2:	430e      	orrs	r6, r1
 8020ce4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020ce8:	4316      	orrs	r6, r2
 8020cea:	b2b6      	uxth	r6, r6
 8020cec:	4486      	add	lr, r0
 8020cee:	4586      	cmp	lr, r0
 8020cf0:	d051      	beq.n	8020d96 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8020cf2:	f820 6b02 	strh.w	r6, [r0], #2
 8020cf6:	e7fa      	b.n	8020cee <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x192>
 8020cf8:	9d02      	ldr	r5, [sp, #8]
 8020cfa:	b2f6      	uxtb	r6, r6
 8020cfc:	4369      	muls	r1, r5
 8020cfe:	1c4d      	adds	r5, r1, #1
 8020d00:	eb05 2521 	add.w	r5, r5, r1, asr #8
 8020d04:	122d      	asrs	r5, r5, #8
 8020d06:	ea6f 0b05 	mvn.w	fp, r5
 8020d0a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8020d0e:	b2ad      	uxth	r5, r5
 8020d10:	b2d2      	uxtb	r2, r2
 8020d12:	fb11 f105 	smulbb	r1, r1, r5
 8020d16:	fb16 f605 	smulbb	r6, r6, r5
 8020d1a:	fb12 f205 	smulbb	r2, r2, r5
 8020d1e:	b289      	uxth	r1, r1
 8020d20:	b2b6      	uxth	r6, r6
 8020d22:	b292      	uxth	r2, r2
 8020d24:	9106      	str	r1, [sp, #24]
 8020d26:	9607      	str	r6, [sp, #28]
 8020d28:	9208      	str	r2, [sp, #32]
 8020d2a:	4486      	add	lr, r0
 8020d2c:	fa5f fb8b 	uxtb.w	fp, fp
 8020d30:	4586      	cmp	lr, r0
 8020d32:	d030      	beq.n	8020d96 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8020d34:	8802      	ldrh	r2, [r0, #0]
 8020d36:	9906      	ldr	r1, [sp, #24]
 8020d38:	1216      	asrs	r6, r2, #8
 8020d3a:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8020d3e:	10d5      	asrs	r5, r2, #3
 8020d40:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020d44:	fb06 160b 	mla	r6, r6, fp, r1
 8020d48:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020d4c:	9907      	ldr	r1, [sp, #28]
 8020d4e:	00d2      	lsls	r2, r2, #3
 8020d50:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020d54:	fb05 150b 	mla	r5, r5, fp, r1
 8020d58:	b2d2      	uxtb	r2, r2
 8020d5a:	9908      	ldr	r1, [sp, #32]
 8020d5c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020d60:	fb02 120b 	mla	r2, r2, fp, r1
 8020d64:	b2b6      	uxth	r6, r6
 8020d66:	b292      	uxth	r2, r2
 8020d68:	1c71      	adds	r1, r6, #1
 8020d6a:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8020d6e:	1c51      	adds	r1, r2, #1
 8020d70:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020d74:	b2ad      	uxth	r5, r5
 8020d76:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020d7a:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8020d7e:	4316      	orrs	r6, r2
 8020d80:	1c6a      	adds	r2, r5, #1
 8020d82:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8020d86:	096d      	lsrs	r5, r5, #5
 8020d88:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020d8c:	432e      	orrs	r6, r5
 8020d8e:	f820 6b02 	strh.w	r6, [r0], #2
 8020d92:	e7cd      	b.n	8020d30 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d4>
 8020d94:	4470      	add	r0, lr
 8020d96:	4543      	cmp	r3, r8
 8020d98:	f4ff af72 	bcc.w	8020c80 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8020d9c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8020da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020da2:	fa1f fc89 	uxth.w	ip, r9
 8020da6:	eba4 040c 	sub.w	r4, r4, ip
 8020daa:	881b      	ldrh	r3, [r3, #0]
 8020dac:	b2a4      	uxth	r4, r4
 8020dae:	2c00      	cmp	r4, #0
 8020db0:	eba3 0309 	sub.w	r3, r3, r9
 8020db4:	bf18      	it	ne
 8020db6:	f04f 0c00 	movne.w	ip, #0
 8020dba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020dbe:	e75f      	b.n	8020c80 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8020dc0:	4b03      	ldr	r3, [pc, #12]	@ (8020dd0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8020dc2:	6818      	ldr	r0, [r3, #0]
 8020dc4:	6803      	ldr	r3, [r0, #0]
 8020dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020dc8:	4798      	blx	r3
 8020dca:	b00f      	add	sp, #60	@ 0x3c
 8020dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dd0:	2005ba80 	.word	0x2005ba80
 8020dd4:	2005ba7a 	.word	0x2005ba7a

08020dd8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8020dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ddc:	b093      	sub	sp, #76	@ 0x4c
 8020dde:	9205      	str	r2, [sp, #20]
 8020de0:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8020de4:	461c      	mov	r4, r3
 8020de6:	9101      	str	r1, [sp, #4]
 8020de8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020dea:	9202      	str	r2, [sp, #8]
 8020dec:	2a00      	cmp	r2, #0
 8020dee:	f000 812d 	beq.w	802104c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8020df2:	6820      	ldr	r0, [r4, #0]
 8020df4:	6861      	ldr	r1, [r4, #4]
 8020df6:	aa0e      	add	r2, sp, #56	@ 0x38
 8020df8:	c203      	stmia	r2!, {r0, r1}
 8020dfa:	6818      	ldr	r0, [r3, #0]
 8020dfc:	6859      	ldr	r1, [r3, #4]
 8020dfe:	aa10      	add	r2, sp, #64	@ 0x40
 8020e00:	c203      	stmia	r2!, {r0, r1}
 8020e02:	a80e      	add	r0, sp, #56	@ 0x38
 8020e04:	f7f8 fa96 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e08:	4621      	mov	r1, r4
 8020e0a:	a810      	add	r0, sp, #64	@ 0x40
 8020e0c:	f7f8 faba 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e10:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8020e14:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8020e18:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020e1c:	bfdd      	ittte	le
 8020e1e:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020e22:	b2b3      	uxthle	r3, r6
 8020e24:	fb92 f3f3 	sdivle	r3, r2, r3
 8020e28:	2301      	movgt	r3, #1
 8020e2a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8020e2e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8020e32:	fb92 f1f3 	sdiv	r1, r2, r3
 8020e36:	fa1f fc81 	uxth.w	ip, r1
 8020e3a:	4661      	mov	r1, ip
 8020e3c:	fb0c 2413 	mls	r4, ip, r3, r2
 8020e40:	fb14 f406 	smulbb	r4, r4, r6
 8020e44:	441d      	add	r5, r3
 8020e46:	3d01      	subs	r5, #1
 8020e48:	4404      	add	r4, r0
 8020e4a:	fb95 f5f3 	sdiv	r5, r5, r3
 8020e4e:	b2a4      	uxth	r4, r4
 8020e50:	b131      	cbz	r1, 8020e60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 8020e52:	9b05      	ldr	r3, [sp, #20]
 8020e54:	9901      	ldr	r1, [sp, #4]
 8020e56:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020e5a:	ba1b      	rev	r3, r3
 8020e5c:	4419      	add	r1, r3
 8020e5e:	9101      	str	r1, [sp, #4]
 8020e60:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8020e64:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8020e68:	4418      	add	r0, r3
 8020e6a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8020e6e:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8020e72:	441a      	add	r2, r3
 8020e74:	4b77      	ldr	r3, [pc, #476]	@ (8021054 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8020e76:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 8020e7a:	6818      	ldr	r0, [r3, #0]
 8020e7c:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 8020e80:	6803      	ldr	r3, [r0, #0]
 8020e82:	b2ad      	uxth	r5, r5
 8020e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020e86:	4798      	blx	r3
 8020e88:	4973      	ldr	r1, [pc, #460]	@ (8021058 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 8020e8a:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 8020e8e:	880b      	ldrh	r3, [r1, #0]
 8020e90:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8020e94:	00ad      	lsls	r5, r5, #2
 8020e96:	fb03 c202 	mla	r2, r3, r2, ip
 8020e9a:	4373      	muls	r3, r6
 8020e9c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020ea0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020ea4:	9308      	str	r3, [sp, #32]
 8020ea6:	1d2b      	adds	r3, r5, #4
 8020ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8020eaa:	9b02      	ldr	r3, [sp, #8]
 8020eac:	2c00      	cmp	r4, #0
 8020eae:	ea6f 0203 	mvn.w	r2, r3
 8020eb2:	bf0c      	ite	eq
 8020eb4:	46dc      	moveq	ip, fp
 8020eb6:	f04f 0c00 	movne.w	ip, #0
 8020eba:	2300      	movs	r3, #0
 8020ebc:	910d      	str	r1, [sp, #52]	@ 0x34
 8020ebe:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020ec2:	b2d2      	uxtb	r2, r2
 8020ec4:	fa1f fc8c 	uxth.w	ip, ip
 8020ec8:	9303      	str	r3, [sp, #12]
 8020eca:	9106      	str	r1, [sp, #24]
 8020ecc:	9207      	str	r2, [sp, #28]
 8020ece:	9a08      	ldr	r2, [sp, #32]
 8020ed0:	4282      	cmp	r2, r0
 8020ed2:	f240 80b6 	bls.w	8021042 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8020ed6:	b963      	cbnz	r3, 8020ef2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8020ed8:	9b01      	ldr	r3, [sp, #4]
 8020eda:	781a      	ldrb	r2, [r3, #0]
 8020edc:	0993      	lsrs	r3, r2, #6
 8020ede:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020ee2:	9203      	str	r2, [sp, #12]
 8020ee4:	1e5a      	subs	r2, r3, #1
 8020ee6:	2a02      	cmp	r2, #2
 8020ee8:	d815      	bhi.n	8020f16 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 8020eea:	9a01      	ldr	r2, [sp, #4]
 8020eec:	b29b      	uxth	r3, r3
 8020eee:	3201      	adds	r2, #1
 8020ef0:	9201      	str	r2, [sp, #4]
 8020ef2:	b1b4      	cbz	r4, 8020f22 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 8020ef4:	429c      	cmp	r4, r3
 8020ef6:	bf99      	ittee	ls
 8020ef8:	1b1c      	subls	r4, r3, r4
 8020efa:	fa1f f884 	uxthls.w	r8, r4
 8020efe:	4666      	movhi	r6, ip
 8020f00:	f04f 0800 	movhi.w	r8, #0
 8020f04:	bf93      	iteet	ls
 8020f06:	2400      	movls	r4, #0
 8020f08:	1ae4      	subhi	r4, r4, r3
 8020f0a:	b2a4      	uxthhi	r4, r4
 8020f0c:	fa1f f68b 	uxthls.w	r6, fp
 8020f10:	4643      	mov	r3, r8
 8020f12:	46b4      	mov	ip, r6
 8020f14:	e7db      	b.n	8020ece <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8020f16:	9a01      	ldr	r2, [sp, #4]
 8020f18:	9b01      	ldr	r3, [sp, #4]
 8020f1a:	3202      	adds	r2, #2
 8020f1c:	785b      	ldrb	r3, [r3, #1]
 8020f1e:	9201      	str	r2, [sp, #4]
 8020f20:	e7e7      	b.n	8020ef2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8020f22:	2203      	movs	r2, #3
 8020f24:	4615      	mov	r5, r2
 8020f26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020f28:	9a03      	ldr	r2, [sp, #12]
 8020f2a:	4563      	cmp	r3, ip
 8020f2c:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020f30:	9905      	ldr	r1, [sp, #20]
 8020f32:	bf28      	it	cs
 8020f34:	eba3 080c 	subcs.w	r8, r3, ip
 8020f38:	eb01 0502 	add.w	r5, r1, r2
 8020f3c:	9902      	ldr	r1, [sp, #8]
 8020f3e:	bf31      	iteee	cc
 8020f40:	ebac 0603 	subcc.w	r6, ip, r3
 8020f44:	fa1f f888 	uxthcs.w	r8, r8
 8020f48:	46e1      	movcs	r9, ip
 8020f4a:	4626      	movcs	r6, r4
 8020f4c:	bf3e      	ittt	cc
 8020f4e:	b2b6      	uxthcc	r6, r6
 8020f50:	4699      	movcc	r9, r3
 8020f52:	46a0      	movcc	r8, r4
 8020f54:	29ff      	cmp	r1, #255	@ 0xff
 8020f56:	d04a      	beq.n	8020fee <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x216>
 8020f58:	46ca      	mov	sl, r9
 8020f5a:	9f06      	ldr	r7, [sp, #24]
 8020f5c:	78a9      	ldrb	r1, [r5, #2]
 8020f5e:	9004      	str	r0, [sp, #16]
 8020f60:	4379      	muls	r1, r7
 8020f62:	910a      	str	r1, [sp, #40]	@ 0x28
 8020f64:	7869      	ldrb	r1, [r5, #1]
 8020f66:	4379      	muls	r1, r7
 8020f68:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020f6a:	9905      	ldr	r1, [sp, #20]
 8020f6c:	5c8a      	ldrb	r2, [r1, r2]
 8020f6e:	437a      	muls	r2, r7
 8020f70:	920c      	str	r2, [sp, #48]	@ 0x30
 8020f72:	f1ba 0f00 	cmp.w	sl, #0
 8020f76:	d03d      	beq.n	8020ff4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 8020f78:	9f07      	ldr	r7, [sp, #28]
 8020f7a:	9a04      	ldr	r2, [sp, #16]
 8020f7c:	46be      	mov	lr, r7
 8020f7e:	8812      	ldrh	r2, [r2, #0]
 8020f80:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8020f82:	1215      	asrs	r5, r2, #8
 8020f84:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020f88:	10d1      	asrs	r1, r2, #3
 8020f8a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020f8e:	fb05 750e 	mla	r5, r5, lr, r7
 8020f92:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8020f96:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020f98:	00d2      	lsls	r2, r2, #3
 8020f9a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8020f9e:	fb01 710e 	mla	r1, r1, lr, r7
 8020fa2:	b2d2      	uxtb	r2, r2
 8020fa4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020fa6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020faa:	fb02 720e 	mla	r2, r2, lr, r7
 8020fae:	b2ad      	uxth	r5, r5
 8020fb0:	b292      	uxth	r2, r2
 8020fb2:	f105 0e01 	add.w	lr, r5, #1
 8020fb6:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8020fba:	f102 0e01 	add.w	lr, r2, #1
 8020fbe:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8020fc2:	b289      	uxth	r1, r1
 8020fc4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020fc8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8020fcc:	4315      	orrs	r5, r2
 8020fce:	1c4a      	adds	r2, r1, #1
 8020fd0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020fd4:	0949      	lsrs	r1, r1, #5
 8020fd6:	9a04      	ldr	r2, [sp, #16]
 8020fd8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020fdc:	430d      	orrs	r5, r1
 8020fde:	f822 5b02 	strh.w	r5, [r2], #2
 8020fe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020fe6:	9204      	str	r2, [sp, #16]
 8020fe8:	fa1f fa8a 	uxth.w	sl, sl
 8020fec:	e7c1      	b.n	8020f72 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 8020fee:	4649      	mov	r1, r9
 8020ff0:	4686      	mov	lr, r0
 8020ff2:	b999      	cbnz	r1, 802101c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 8020ff4:	4563      	cmp	r3, ip
 8020ff6:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 8020ffa:	d389      	bcc.n	8020f10 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 8020ffc:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 8021000:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021002:	fa1f f68b 	uxth.w	r6, fp
 8021006:	1ba4      	subs	r4, r4, r6
 8021008:	881b      	ldrh	r3, [r3, #0]
 802100a:	b2a4      	uxth	r4, r4
 802100c:	2c00      	cmp	r4, #0
 802100e:	eba3 030b 	sub.w	r3, r3, fp
 8021012:	bf18      	it	ne
 8021014:	2600      	movne	r6, #0
 8021016:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802101a:	e779      	b.n	8020f10 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 802101c:	78aa      	ldrb	r2, [r5, #2]
 802101e:	4f0f      	ldr	r7, [pc, #60]	@ (802105c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 8021020:	3901      	subs	r1, #1
 8021022:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 8021026:	786a      	ldrb	r2, [r5, #1]
 8021028:	b289      	uxth	r1, r1
 802102a:	00d2      	lsls	r2, r2, #3
 802102c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021030:	ea4a 0202 	orr.w	r2, sl, r2
 8021034:	f895 a000 	ldrb.w	sl, [r5]
 8021038:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 802103c:	f82e 2b02 	strh.w	r2, [lr], #2
 8021040:	e7d7      	b.n	8020ff2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 8021042:	4b04      	ldr	r3, [pc, #16]	@ (8021054 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8021044:	6818      	ldr	r0, [r3, #0]
 8021046:	6803      	ldr	r3, [r0, #0]
 8021048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802104a:	4798      	blx	r3
 802104c:	b013      	add	sp, #76	@ 0x4c
 802104e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021052:	bf00      	nop
 8021054:	2005ba80 	.word	0x2005ba80
 8021058:	2005ba7a 	.word	0x2005ba7a
 802105c:	fffff800 	.word	0xfffff800

08021060 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021064:	b09d      	sub	sp, #116	@ 0x74
 8021066:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 802106a:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 802106e:	461c      	mov	r4, r3
 8021070:	4683      	mov	fp, r0
 8021072:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021074:	920e      	str	r2, [sp, #56]	@ 0x38
 8021076:	2a00      	cmp	r2, #0
 8021078:	f000 81e1 	beq.w	802143e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3de>
 802107c:	6820      	ldr	r0, [r4, #0]
 802107e:	6861      	ldr	r1, [r4, #4]
 8021080:	aa18      	add	r2, sp, #96	@ 0x60
 8021082:	c203      	stmia	r2!, {r0, r1}
 8021084:	6818      	ldr	r0, [r3, #0]
 8021086:	6859      	ldr	r1, [r3, #4]
 8021088:	aa1a      	add	r2, sp, #104	@ 0x68
 802108a:	c203      	stmia	r2!, {r0, r1}
 802108c:	a818      	add	r0, sp, #96	@ 0x60
 802108e:	f7f8 f951 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021092:	4621      	mov	r1, r4
 8021094:	a81a      	add	r0, sp, #104	@ 0x68
 8021096:	f7f8 f975 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802109a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 802109e:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 80210a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80210a6:	bfdd      	ittte	le
 80210a8:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80210ac:	b29a      	uxthle	r2, r3
 80210ae:	fb91 f2f2 	sdivle	r2, r1, r2
 80210b2:	2201      	movgt	r2, #1
 80210b4:	9202      	str	r2, [sp, #8]
 80210b6:	9802      	ldr	r0, [sp, #8]
 80210b8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 80210bc:	9902      	ldr	r1, [sp, #8]
 80210be:	fb92 f0f0 	sdiv	r0, r2, r0
 80210c2:	b280      	uxth	r0, r0
 80210c4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80210c6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80210c8:	9802      	ldr	r0, [sp, #8]
 80210ca:	440c      	add	r4, r1
 80210cc:	fb05 2510 	mls	r5, r5, r0, r2
 80210d0:	fb15 f503 	smulbb	r5, r5, r3
 80210d4:	3c01      	subs	r4, #1
 80210d6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 80210da:	fb94 f4f1 	sdiv	r4, r4, r1
 80210de:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 80210e2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80210e6:	440d      	add	r5, r1
 80210e8:	4419      	add	r1, r3
 80210ea:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 80210ee:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 80210f2:	441a      	add	r2, r3
 80210f4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80210f8:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 80210fc:	9306      	str	r3, [sp, #24]
 80210fe:	4bb3      	ldr	r3, [pc, #716]	@ (80213cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8021100:	3401      	adds	r4, #1
 8021102:	6818      	ldr	r0, [r3, #0]
 8021104:	b2a4      	uxth	r4, r4
 8021106:	6803      	ldr	r3, [r0, #0]
 8021108:	00a4      	lsls	r4, r4, #2
 802110a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802110c:	4798      	blx	r3
 802110e:	4bb0      	ldr	r3, [pc, #704]	@ (80213d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8021110:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8021114:	881a      	ldrh	r2, [r3, #0]
 8021116:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 802111a:	4356      	muls	r6, r2
 802111c:	fb02 7101 	mla	r1, r2, r1, r7
 8021120:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8021124:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 8021128:	920a      	str	r2, [sp, #40]	@ 0x28
 802112a:	1d22      	adds	r2, r4, #4
 802112c:	b2ad      	uxth	r5, r5
 802112e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021130:	9a06      	ldr	r2, [sp, #24]
 8021132:	2d00      	cmp	r5, #0
 8021134:	bf0c      	ite	eq
 8021136:	4611      	moveq	r1, r2
 8021138:	2100      	movne	r1, #0
 802113a:	2200      	movs	r2, #0
 802113c:	9316      	str	r3, [sp, #88]	@ 0x58
 802113e:	4ba5      	ldr	r3, [pc, #660]	@ (80213d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 8021140:	b289      	uxth	r1, r1
 8021142:	eba3 030b 	sub.w	r3, r3, fp
 8021146:	920d      	str	r2, [sp, #52]	@ 0x34
 8021148:	9317      	str	r3, [sp, #92]	@ 0x5c
 802114a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802114c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802114e:	fa12 f383 	uxtah	r3, r2, r3
 8021152:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021154:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021158:	3304      	adds	r3, #4
 802115a:	9308      	str	r3, [sp, #32]
 802115c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802115e:	4543      	cmp	r3, r8
 8021160:	f240 8168 	bls.w	8021434 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d4>
 8021164:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8021168:	9a02      	ldr	r2, [sp, #8]
 802116a:	fbb5 f3f3 	udiv	r3, r5, r3
 802116e:	1ad3      	subs	r3, r2, r3
 8021170:	b29b      	uxth	r3, r3
 8021172:	9314      	str	r3, [sp, #80]	@ 0x50
 8021174:	9b08      	ldr	r3, [sp, #32]
 8021176:	9808      	ldr	r0, [sp, #32]
 8021178:	785a      	ldrb	r2, [r3, #1]
 802117a:	789b      	ldrb	r3, [r3, #2]
 802117c:	7800      	ldrb	r0, [r0, #0]
 802117e:	021b      	lsls	r3, r3, #8
 8021180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021184:	9a08      	ldr	r2, [sp, #32]
 8021186:	9010      	str	r0, [sp, #64]	@ 0x40
 8021188:	78d2      	ldrb	r2, [r2, #3]
 802118a:	3001      	adds	r0, #1
 802118c:	4313      	orrs	r3, r2
 802118e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021190:	9007      	str	r0, [sp, #28]
 8021192:	441a      	add	r2, r3
 8021194:	1c50      	adds	r0, r2, #1
 8021196:	9005      	str	r0, [sp, #20]
 8021198:	7852      	ldrb	r2, [r2, #1]
 802119a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802119c:	0212      	lsls	r2, r2, #8
 802119e:	5cc3      	ldrb	r3, [r0, r3]
 80211a0:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80211a4:	431a      	orrs	r2, r3
 80211a6:	b293      	uxth	r3, r2
 80211a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80211aa:	2300      	movs	r3, #0
 80211ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80211ae:	2301      	movs	r3, #1
 80211b0:	9301      	str	r3, [sp, #4]
 80211b2:	9304      	str	r3, [sp, #16]
 80211b4:	2300      	movs	r3, #0
 80211b6:	f04f 0e01 	mov.w	lr, #1
 80211ba:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 80211be:	9303      	str	r3, [sp, #12]
 80211c0:	2d00      	cmp	r5, #0
 80211c2:	d07c      	beq.n	80212be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 80211c4:	45ae      	cmp	lr, r5
 80211c6:	d26b      	bcs.n	80212a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 80211c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80211ca:	eba5 050e 	sub.w	r5, r5, lr
 80211ce:	4543      	cmp	r3, r8
 80211d0:	b2ad      	uxth	r5, r5
 80211d2:	460c      	mov	r4, r1
 80211d4:	d802      	bhi.n	80211dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 80211d6:	e070      	b.n	80212ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 80211d8:	2b00      	cmp	r3, #0
 80211da:	d15c      	bne.n	8021296 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 80211dc:	9b05      	ldr	r3, [sp, #20]
 80211de:	9a04      	ldr	r2, [sp, #16]
 80211e0:	785b      	ldrb	r3, [r3, #1]
 80211e2:	f1c2 0207 	rsb	r2, r2, #7
 80211e6:	4093      	lsls	r3, r2
 80211e8:	005b      	lsls	r3, r3, #1
 80211ea:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80211ee:	9b05      	ldr	r3, [sp, #20]
 80211f0:	9904      	ldr	r1, [sp, #16]
 80211f2:	781b      	ldrb	r3, [r3, #0]
 80211f4:	410b      	asrs	r3, r1
 80211f6:	3101      	adds	r1, #1
 80211f8:	b2c9      	uxtb	r1, r1
 80211fa:	2908      	cmp	r1, #8
 80211fc:	9104      	str	r1, [sp, #16]
 80211fe:	9905      	ldr	r1, [sp, #20]
 8021200:	b2db      	uxtb	r3, r3
 8021202:	bf03      	ittte	eq
 8021204:	3102      	addeq	r1, #2
 8021206:	9105      	streq	r1, [sp, #20]
 8021208:	2100      	moveq	r1, #0
 802120a:	3101      	addne	r1, #1
 802120c:	bf14      	ite	ne
 802120e:	9105      	strne	r1, [sp, #20]
 8021210:	9104      	streq	r1, [sp, #16]
 8021212:	4313      	orrs	r3, r2
 8021214:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021216:	b29a      	uxth	r2, r3
 8021218:	4291      	cmp	r1, r2
 802121a:	d30a      	bcc.n	8021232 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 802121c:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 8021220:	2301      	movs	r3, #1
 8021222:	9907      	ldr	r1, [sp, #28]
 8021224:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021228:	d30f      	bcc.n	802124a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 802122a:	2100      	movs	r1, #0
 802122c:	9301      	str	r3, [sp, #4]
 802122e:	9103      	str	r1, [sp, #12]
 8021230:	e032      	b.n	8021298 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8021232:	9b07      	ldr	r3, [sp, #28]
 8021234:	429a      	cmp	r2, r3
 8021236:	d318      	bcc.n	802126a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8021238:	9b01      	ldr	r3, [sp, #4]
 802123a:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 802123e:	445b      	add	r3, fp
 8021240:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8021244:	9b01      	ldr	r3, [sp, #4]
 8021246:	3301      	adds	r3, #1
 8021248:	b29b      	uxth	r3, r3
 802124a:	9907      	ldr	r1, [sp, #28]
 802124c:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 8021250:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8021254:	7108      	strb	r0, [r1, #4]
 8021256:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021258:	80c8      	strh	r0, [r1, #6]
 802125a:	9801      	ldr	r0, [sp, #4]
 802125c:	3001      	adds	r0, #1
 802125e:	7148      	strb	r0, [r1, #5]
 8021260:	9907      	ldr	r1, [sp, #28]
 8021262:	3101      	adds	r1, #1
 8021264:	b289      	uxth	r1, r1
 8021266:	9107      	str	r1, [sp, #28]
 8021268:	e7df      	b.n	802122a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 802126a:	4611      	mov	r1, r2
 802126c:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 8021270:	795b      	ldrb	r3, [r3, #5]
 8021272:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 8021276:	4458      	add	r0, fp
 8021278:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 802127a:	4406      	add	r6, r0
 802127c:	2e00      	cmp	r6, #0
 802127e:	dd06      	ble.n	802128e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 8021280:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8021284:	790e      	ldrb	r6, [r1, #4]
 8021286:	f800 6d01 	strb.w	r6, [r0, #-1]!
 802128a:	88c9      	ldrh	r1, [r1, #6]
 802128c:	e7f4      	b.n	8021278 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 802128e:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 8021292:	b29b      	uxth	r3, r3
 8021294:	e7c5      	b.n	8021222 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 8021296:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021298:	4621      	mov	r1, r4
 802129a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802129c:	469e      	mov	lr, r3
 802129e:	e78f      	b.n	80211c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 80212a0:	9a03      	ldr	r2, [sp, #12]
 80212a2:	ebae 0305 	sub.w	r3, lr, r5
 80212a6:	442a      	add	r2, r5
 80212a8:	b292      	uxth	r2, r2
 80212aa:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80212ae:	b29b      	uxth	r3, r3
 80212b0:	9203      	str	r2, [sp, #12]
 80212b2:	2500      	movs	r5, #0
 80212b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80212b6:	4542      	cmp	r2, r8
 80212b8:	d88e      	bhi.n	80211d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 80212ba:	4621      	mov	r1, r4
 80212bc:	e74e      	b.n	802115c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80212be:	458e      	cmp	lr, r1
 80212c0:	bf2c      	ite	cs
 80212c2:	462c      	movcs	r4, r5
 80212c4:	462b      	movcc	r3, r5
 80212c6:	f04f 0900 	mov.w	r9, #0
 80212ca:	bf29      	itett	cs
 80212cc:	ebae 0301 	subcs.w	r3, lr, r1
 80212d0:	eba1 040e 	subcc.w	r4, r1, lr
 80212d4:	b29b      	uxthcs	r3, r3
 80212d6:	910c      	strcs	r1, [sp, #48]	@ 0x30
 80212d8:	bf3c      	itt	cc
 80212da:	b2a4      	uxthcc	r4, r4
 80212dc:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 80212e0:	9a03      	ldr	r2, [sp, #12]
 80212e2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80212e4:	444a      	add	r2, r9
 80212e6:	4548      	cmp	r0, r9
 80212e8:	b292      	uxth	r2, r2
 80212ea:	d075      	beq.n	80213d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>
 80212ec:	2004      	movs	r0, #4
 80212ee:	4605      	mov	r5, r0
 80212f0:	445a      	add	r2, fp
 80212f2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80212f4:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 80212f8:	fb15 0202 	smlabb	r2, r5, r2, r0
 80212fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80212fe:	5880      	ldr	r0, [r0, r2]
 8021300:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8021304:	d014      	beq.n	8021330 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 8021306:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802130a:	ea4f 2510 	mov.w	r5, r0, lsr #8
 802130e:	d112      	bne.n	8021336 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8021310:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021312:	2aff      	cmp	r2, #255	@ 0xff
 8021314:	d10f      	bne.n	8021336 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8021316:	0942      	lsrs	r2, r0, #5
 8021318:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 802131c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021320:	f025 0507 	bic.w	r5, r5, #7
 8021324:	4315      	orrs	r5, r2
 8021326:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802132a:	4305      	orrs	r5, r0
 802132c:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 8021330:	f109 0901 	add.w	r9, r9, #1
 8021334:	e7d4      	b.n	80212e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 8021336:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 802133a:	b2ed      	uxtb	r5, r5
 802133c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021340:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 8021344:	9215      	str	r2, [sp, #84]	@ 0x54
 8021346:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021348:	f3c0 4607 	ubfx	r6, r0, #16, #8
 802134c:	fb02 fa0a 	mul.w	sl, r2, sl
 8021350:	f10a 0201 	add.w	r2, sl, #1
 8021354:	eb02 222a 	add.w	r2, r2, sl, asr #8
 8021358:	1212      	asrs	r2, r2, #8
 802135a:	fa1f fa82 	uxth.w	sl, r2
 802135e:	43d2      	mvns	r2, r2
 8021360:	b2c0      	uxtb	r0, r0
 8021362:	fb16 f60a 	smulbb	r6, r6, sl
 8021366:	fb10 f00a 	smulbb	r0, r0, sl
 802136a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802136e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021372:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8021376:	fa5f fc8c 	uxtb.w	ip, ip
 802137a:	b2d2      	uxtb	r2, r2
 802137c:	fb15 f50a 	smulbb	r5, r5, sl
 8021380:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021384:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8021388:	fb07 6702 	mla	r7, r7, r2, r6
 802138c:	fb0c 0002 	mla	r0, ip, r2, r0
 8021390:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8021392:	b2bf      	uxth	r7, r7
 8021394:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021398:	fb06 5602 	mla	r6, r6, r2, r5
 802139c:	b280      	uxth	r0, r0
 802139e:	1c7a      	adds	r2, r7, #1
 80213a0:	1c45      	adds	r5, r0, #1
 80213a2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80213a6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80213aa:	b2b6      	uxth	r6, r6
 80213ac:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80213b0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80213b4:	432f      	orrs	r7, r5
 80213b6:	1c75      	adds	r5, r6, #1
 80213b8:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80213bc:	096d      	lsrs	r5, r5, #5
 80213be:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80213c2:	432f      	orrs	r7, r5
 80213c4:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 80213c8:	e7b2      	b.n	8021330 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 80213ca:	bf00      	nop
 80213cc:	2005ba80 	.word	0x2005ba80
 80213d0:	2005ba7a 	.word	0x2005ba7a
 80213d4:	fffff7fb 	.word	0xfffff7fb
 80213d8:	9203      	str	r2, [sp, #12]
 80213da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80213dc:	458e      	cmp	lr, r1
 80213de:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 80213e2:	f4ff af66 	bcc.w	80212b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 80213e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80213e8:	9906      	ldr	r1, [sp, #24]
 80213ea:	8812      	ldrh	r2, [r2, #0]
 80213ec:	1a52      	subs	r2, r2, r1
 80213ee:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 80213f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80213f4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80213f6:	3201      	adds	r2, #1
 80213f8:	428a      	cmp	r2, r1
 80213fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80213fc:	d110      	bne.n	8021420 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 80213fe:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8021402:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 8021406:	9b06      	ldr	r3, [sp, #24]
 8021408:	eba5 0509 	sub.w	r5, r5, r9
 802140c:	b2ad      	uxth	r5, r5
 802140e:	2d00      	cmp	r5, #0
 8021410:	bf0c      	ite	eq
 8021412:	4619      	moveq	r1, r3
 8021414:	2100      	movne	r1, #0
 8021416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021418:	b289      	uxth	r1, r1
 802141a:	3301      	adds	r3, #1
 802141c:	930d      	str	r3, [sp, #52]	@ 0x34
 802141e:	e694      	b.n	802114a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8021420:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8021424:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8021428:	1b2d      	subs	r5, r5, r4
 802142a:	b2ad      	uxth	r5, r5
 802142c:	2d00      	cmp	r5, #0
 802142e:	bf18      	it	ne
 8021430:	2400      	movne	r4, #0
 8021432:	e73f      	b.n	80212b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 8021434:	4b03      	ldr	r3, [pc, #12]	@ (8021444 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 8021436:	6818      	ldr	r0, [r3, #0]
 8021438:	6803      	ldr	r3, [r0, #0]
 802143a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802143c:	4798      	blx	r3
 802143e:	b01d      	add	sp, #116	@ 0x74
 8021440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021444:	2005ba80 	.word	0x2005ba80

08021448 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802144c:	b09f      	sub	sp, #124	@ 0x7c
 802144e:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 8021452:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 8021456:	461d      	mov	r5, r3
 8021458:	4604      	mov	r4, r0
 802145a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802145c:	920a      	str	r2, [sp, #40]	@ 0x28
 802145e:	2a00      	cmp	r2, #0
 8021460:	f000 81fc 	beq.w	802185c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x414>
 8021464:	6828      	ldr	r0, [r5, #0]
 8021466:	6869      	ldr	r1, [r5, #4]
 8021468:	aa1a      	add	r2, sp, #104	@ 0x68
 802146a:	c203      	stmia	r2!, {r0, r1}
 802146c:	6818      	ldr	r0, [r3, #0]
 802146e:	6859      	ldr	r1, [r3, #4]
 8021470:	aa1c      	add	r2, sp, #112	@ 0x70
 8021472:	c203      	stmia	r2!, {r0, r1}
 8021474:	a81a      	add	r0, sp, #104	@ 0x68
 8021476:	f7f7 ff5d 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802147a:	4629      	mov	r1, r5
 802147c:	a81c      	add	r0, sp, #112	@ 0x70
 802147e:	f7f7 ff81 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021482:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8021486:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 802148a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802148e:	bfdd      	ittte	le
 8021490:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8021494:	b29a      	uxthle	r2, r3
 8021496:	fb91 f2f2 	sdivle	r2, r1, r2
 802149a:	2201      	movgt	r2, #1
 802149c:	9201      	str	r2, [sp, #4]
 802149e:	9801      	ldr	r0, [sp, #4]
 80214a0:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 80214a4:	9901      	ldr	r1, [sp, #4]
 80214a6:	fb92 f0f0 	sdiv	r0, r2, r0
 80214aa:	b280      	uxth	r0, r0
 80214ac:	9010      	str	r0, [sp, #64]	@ 0x40
 80214ae:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80214b0:	9801      	ldr	r0, [sp, #4]
 80214b2:	440e      	add	r6, r1
 80214b4:	fb05 2510 	mls	r5, r5, r0, r2
 80214b8:	fb15 f503 	smulbb	r5, r5, r3
 80214bc:	3e01      	subs	r6, #1
 80214be:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80214c2:	fb96 f6f1 	sdiv	r6, r6, r1
 80214c6:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80214ca:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 80214ce:	440d      	add	r5, r1
 80214d0:	4419      	add	r1, r3
 80214d2:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 80214d6:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 80214da:	441a      	add	r2, r3
 80214dc:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 80214e0:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 80214e4:	9304      	str	r3, [sp, #16]
 80214e6:	4b96      	ldr	r3, [pc, #600]	@ (8021740 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 80214e8:	3601      	adds	r6, #1
 80214ea:	6818      	ldr	r0, [r3, #0]
 80214ec:	b2b6      	uxth	r6, r6
 80214ee:	6803      	ldr	r3, [r0, #0]
 80214f0:	b2ad      	uxth	r5, r5
 80214f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80214f4:	4798      	blx	r3
 80214f6:	4b93      	ldr	r3, [pc, #588]	@ (8021744 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 80214f8:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 80214fc:	881a      	ldrh	r2, [r3, #0]
 80214fe:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 8021502:	4357      	muls	r7, r2
 8021504:	fb02 c101 	mla	r1, r2, r1, ip
 8021508:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 802150c:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8021510:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021512:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021514:	2d00      	cmp	r5, #0
 8021516:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802151a:	f106 0204 	add.w	r2, r6, #4
 802151e:	9206      	str	r2, [sp, #24]
 8021520:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021522:	bf18      	it	ne
 8021524:	2100      	movne	r1, #0
 8021526:	ea6f 0202 	mvn.w	r2, r2
 802152a:	b2d2      	uxtb	r2, r2
 802152c:	9215      	str	r2, [sp, #84]	@ 0x54
 802152e:	9a04      	ldr	r2, [sp, #16]
 8021530:	9318      	str	r3, [sp, #96]	@ 0x60
 8021532:	bf08      	it	eq
 8021534:	4611      	moveq	r1, r2
 8021536:	2200      	movs	r2, #0
 8021538:	4b83      	ldr	r3, [pc, #524]	@ (8021748 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 802153a:	b289      	uxth	r1, r1
 802153c:	1b1b      	subs	r3, r3, r4
 802153e:	920d      	str	r2, [sp, #52]	@ 0x34
 8021540:	9319      	str	r3, [sp, #100]	@ 0x64
 8021542:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021544:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021546:	fa12 f383 	uxtah	r3, r2, r3
 802154a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802154c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021550:	3304      	adds	r3, #4
 8021552:	9307      	str	r3, [sp, #28]
 8021554:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021556:	455b      	cmp	r3, fp
 8021558:	f240 817b 	bls.w	8021852 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40a>
 802155c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8021560:	f04f 0801 	mov.w	r8, #1
 8021564:	fbb5 f3f3 	udiv	r3, r5, r3
 8021568:	9a01      	ldr	r2, [sp, #4]
 802156a:	9807      	ldr	r0, [sp, #28]
 802156c:	1ad3      	subs	r3, r2, r3
 802156e:	b29b      	uxth	r3, r3
 8021570:	9316      	str	r3, [sp, #88]	@ 0x58
 8021572:	9b07      	ldr	r3, [sp, #28]
 8021574:	7800      	ldrb	r0, [r0, #0]
 8021576:	785a      	ldrb	r2, [r3, #1]
 8021578:	789b      	ldrb	r3, [r3, #2]
 802157a:	9011      	str	r0, [sp, #68]	@ 0x44
 802157c:	021b      	lsls	r3, r3, #8
 802157e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021582:	9a07      	ldr	r2, [sp, #28]
 8021584:	3001      	adds	r0, #1
 8021586:	78d2      	ldrb	r2, [r2, #3]
 8021588:	9005      	str	r0, [sp, #20]
 802158a:	4313      	orrs	r3, r2
 802158c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802158e:	46c4      	mov	ip, r8
 8021590:	441a      	add	r2, r3
 8021592:	1c50      	adds	r0, r2, #1
 8021594:	9003      	str	r0, [sp, #12]
 8021596:	7852      	ldrb	r2, [r2, #1]
 8021598:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802159a:	0212      	lsls	r2, r2, #8
 802159c:	5cc3      	ldrb	r3, [r0, r3]
 802159e:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80215a2:	431a      	orrs	r2, r3
 80215a4:	b293      	uxth	r3, r2
 80215a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80215a8:	2300      	movs	r3, #0
 80215aa:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80215ae:	9308      	str	r3, [sp, #32]
 80215b0:	461a      	mov	r2, r3
 80215b2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80215b6:	f8cd 8008 	str.w	r8, [sp, #8]
 80215ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80215bc:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80215c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80215c2:	2d00      	cmp	r5, #0
 80215c4:	d07c      	beq.n	80216c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 80215c6:	45ac      	cmp	ip, r5
 80215c8:	d26c      	bcs.n	80216a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 80215ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80215cc:	eba5 050c 	sub.w	r5, r5, ip
 80215d0:	455b      	cmp	r3, fp
 80215d2:	b2ad      	uxth	r5, r5
 80215d4:	4608      	mov	r0, r1
 80215d6:	d802      	bhi.n	80215de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 80215d8:	e070      	b.n	80216bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 80215da:	2b00      	cmp	r3, #0
 80215dc:	d15c      	bne.n	8021698 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 80215de:	9b03      	ldr	r3, [sp, #12]
 80215e0:	9a02      	ldr	r2, [sp, #8]
 80215e2:	785b      	ldrb	r3, [r3, #1]
 80215e4:	f1c2 0207 	rsb	r2, r2, #7
 80215e8:	4093      	lsls	r3, r2
 80215ea:	005b      	lsls	r3, r3, #1
 80215ec:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80215f0:	9b03      	ldr	r3, [sp, #12]
 80215f2:	9902      	ldr	r1, [sp, #8]
 80215f4:	781b      	ldrb	r3, [r3, #0]
 80215f6:	410b      	asrs	r3, r1
 80215f8:	3101      	adds	r1, #1
 80215fa:	b2c9      	uxtb	r1, r1
 80215fc:	2908      	cmp	r1, #8
 80215fe:	9102      	str	r1, [sp, #8]
 8021600:	9903      	ldr	r1, [sp, #12]
 8021602:	b2db      	uxtb	r3, r3
 8021604:	bf03      	ittte	eq
 8021606:	3102      	addeq	r1, #2
 8021608:	9103      	streq	r1, [sp, #12]
 802160a:	2100      	moveq	r1, #0
 802160c:	3101      	addne	r1, #1
 802160e:	bf14      	ite	ne
 8021610:	9103      	strne	r1, [sp, #12]
 8021612:	9102      	streq	r1, [sp, #8]
 8021614:	4313      	orrs	r3, r2
 8021616:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021618:	b29a      	uxth	r2, r3
 802161a:	4291      	cmp	r1, r2
 802161c:	d30a      	bcc.n	8021634 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 802161e:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8021622:	2301      	movs	r3, #1
 8021624:	9905      	ldr	r1, [sp, #20]
 8021626:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802162a:	d30f      	bcc.n	802164c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x204>
 802162c:	2100      	movs	r1, #0
 802162e:	4698      	mov	r8, r3
 8021630:	9100      	str	r1, [sp, #0]
 8021632:	e032      	b.n	802169a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8021634:	9b05      	ldr	r3, [sp, #20]
 8021636:	429a      	cmp	r2, r3
 8021638:	d318      	bcc.n	802166c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x224>
 802163a:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 802163e:	eb04 0308 	add.w	r3, r4, r8
 8021642:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8021646:	f108 0301 	add.w	r3, r8, #1
 802164a:	b29b      	uxth	r3, r3
 802164c:	9905      	ldr	r1, [sp, #20]
 802164e:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8021652:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021656:	710e      	strb	r6, [r1, #4]
 8021658:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802165a:	80ce      	strh	r6, [r1, #6]
 802165c:	f108 0601 	add.w	r6, r8, #1
 8021660:	714e      	strb	r6, [r1, #5]
 8021662:	9905      	ldr	r1, [sp, #20]
 8021664:	3101      	adds	r1, #1
 8021666:	b289      	uxth	r1, r1
 8021668:	9105      	str	r1, [sp, #20]
 802166a:	e7df      	b.n	802162c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 802166c:	4611      	mov	r1, r2
 802166e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021672:	795b      	ldrb	r3, [r3, #5]
 8021674:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8021678:	4426      	add	r6, r4
 802167a:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 802167c:	4437      	add	r7, r6
 802167e:	2f00      	cmp	r7, #0
 8021680:	dd06      	ble.n	8021690 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8021682:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021686:	790f      	ldrb	r7, [r1, #4]
 8021688:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802168c:	88c9      	ldrh	r1, [r1, #6]
 802168e:	e7f4      	b.n	802167a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x232>
 8021690:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8021694:	b29b      	uxth	r3, r3
 8021696:	e7c5      	b.n	8021624 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1dc>
 8021698:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802169a:	920c      	str	r2, [sp, #48]	@ 0x30
 802169c:	4601      	mov	r1, r0
 802169e:	9a00      	ldr	r2, [sp, #0]
 80216a0:	469c      	mov	ip, r3
 80216a2:	e78e      	b.n	80215c2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 80216a4:	1957      	adds	r7, r2, r5
 80216a6:	ebac 0305 	sub.w	r3, ip, r5
 80216aa:	b2ba      	uxth	r2, r7
 80216ac:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80216b0:	b29b      	uxth	r3, r3
 80216b2:	9200      	str	r2, [sp, #0]
 80216b4:	2500      	movs	r5, #0
 80216b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80216b8:	455a      	cmp	r2, fp
 80216ba:	d88e      	bhi.n	80215da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80216bc:	4601      	mov	r1, r0
 80216be:	e749      	b.n	8021554 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 80216c0:	458c      	cmp	ip, r1
 80216c2:	bf2c      	ite	cs
 80216c4:	4628      	movcs	r0, r5
 80216c6:	462b      	movcc	r3, r5
 80216c8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80216ca:	bf27      	ittee	cs
 80216cc:	ebac 0301 	subcs.w	r3, ip, r1
 80216d0:	9109      	strcs	r1, [sp, #36]	@ 0x24
 80216d2:	eba1 000c 	subcc.w	r0, r1, ip
 80216d6:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 80216da:	bf2c      	ite	cs
 80216dc:	b29b      	uxthcs	r3, r3
 80216de:	b280      	uxthcc	r0, r0
 80216e0:	2dff      	cmp	r5, #255	@ 0xff
 80216e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80216e4:	eb02 0705 	add.w	r7, r2, r5
 80216e8:	b2bd      	uxth	r5, r7
 80216ea:	9500      	str	r5, [sp, #0]
 80216ec:	d12e      	bne.n	802174c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>
 80216ee:	465e      	mov	r6, fp
 80216f0:	9d00      	ldr	r5, [sp, #0]
 80216f2:	42aa      	cmp	r2, r5
 80216f4:	f040 8083 	bne.w	80217fe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b6>
 80216f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80216fa:	458c      	cmp	ip, r1
 80216fc:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8021700:	d3d8      	bcc.n	80216b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 8021702:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021704:	9904      	ldr	r1, [sp, #16]
 8021706:	8812      	ldrh	r2, [r2, #0]
 8021708:	1a52      	subs	r2, r2, r1
 802170a:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 802170e:	9a08      	ldr	r2, [sp, #32]
 8021710:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8021712:	3201      	adds	r2, #1
 8021714:	428a      	cmp	r2, r1
 8021716:	9208      	str	r2, [sp, #32]
 8021718:	f040 8091 	bne.w	802183e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f6>
 802171c:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8021720:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 8021724:	9b04      	ldr	r3, [sp, #16]
 8021726:	eba5 050c 	sub.w	r5, r5, ip
 802172a:	b2ad      	uxth	r5, r5
 802172c:	2d00      	cmp	r5, #0
 802172e:	bf0c      	ite	eq
 8021730:	4619      	moveq	r1, r3
 8021732:	2100      	movne	r1, #0
 8021734:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021736:	b289      	uxth	r1, r1
 8021738:	3301      	adds	r3, #1
 802173a:	930d      	str	r3, [sp, #52]	@ 0x34
 802173c:	e701      	b.n	8021542 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfa>
 802173e:	bf00      	nop
 8021740:	2005ba80 	.word	0x2005ba80
 8021744:	2005ba7a 	.word	0x2005ba7a
 8021748:	fffff7fb 	.word	0xfffff7fb
 802174c:	46d9      	mov	r9, fp
 802174e:	9d00      	ldr	r5, [sp, #0]
 8021750:	42aa      	cmp	r2, r5
 8021752:	d0d1      	beq.n	80216f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b0>
 8021754:	1c55      	adds	r5, r2, #1
 8021756:	4422      	add	r2, r4
 8021758:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 802175c:	9a06      	ldr	r2, [sp, #24]
 802175e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021762:	4472      	add	r2, lr
 8021764:	9212      	str	r2, [sp, #72]	@ 0x48
 8021766:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8021768:	f8b9 2000 	ldrh.w	r2, [r9]
 802176c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021770:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8021772:	1216      	asrs	r6, r2, #8
 8021774:	fb1a fa07 	smulbb	sl, sl, r7
 8021778:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 802177c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 802177e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021782:	fb06 a607 	mla	r6, r6, r7, sl
 8021786:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8021788:	9517      	str	r5, [sp, #92]	@ 0x5c
 802178a:	f897 a001 	ldrb.w	sl, [r7, #1]
 802178e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8021790:	10d5      	asrs	r5, r2, #3
 8021792:	fb1a fa07 	smulbb	sl, sl, r7
 8021796:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802179a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 802179c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80217a0:	fb05 a507 	mla	r5, r5, r7, sl
 80217a4:	9f06      	ldr	r7, [sp, #24]
 80217a6:	00d2      	lsls	r2, r2, #3
 80217a8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80217ac:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80217ae:	b2d2      	uxtb	r2, r2
 80217b0:	fb1e fe07 	smulbb	lr, lr, r7
 80217b4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80217b6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80217ba:	fb02 e207 	mla	r2, r2, r7, lr
 80217be:	b2b6      	uxth	r6, r6
 80217c0:	b292      	uxth	r2, r2
 80217c2:	b2ad      	uxth	r5, r5
 80217c4:	f106 0a01 	add.w	sl, r6, #1
 80217c8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80217cc:	f102 0e01 	add.w	lr, r2, #1
 80217d0:	f105 0a01 	add.w	sl, r5, #1
 80217d4:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 80217d8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80217dc:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80217e0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80217e4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80217e8:	ea4e 0606 	orr.w	r6, lr, r6
 80217ec:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80217f0:	ea46 060a 	orr.w	r6, r6, sl
 80217f4:	f829 6b02 	strh.w	r6, [r9], #2
 80217f8:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80217fc:	e7a7      	b.n	802174e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x306>
 80217fe:	f102 0e01 	add.w	lr, r2, #1
 8021802:	4422      	add	r2, r4
 8021804:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 8021808:	9a06      	ldr	r2, [sp, #24]
 802180a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802180e:	eb02 0a05 	add.w	sl, r2, r5
 8021812:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021816:	4a13      	ldr	r2, [pc, #76]	@ (8021864 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 8021818:	9f06      	ldr	r7, [sp, #24]
 802181a:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 802181e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021822:	00d2      	lsls	r2, r2, #3
 8021824:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021828:	ea49 0202 	orr.w	r2, r9, r2
 802182c:	f817 9005 	ldrb.w	r9, [r7, r5]
 8021830:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8021834:	f826 2b02 	strh.w	r2, [r6], #2
 8021838:	fa1f f28e 	uxth.w	r2, lr
 802183c:	e758      	b.n	80216f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>
 802183e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021842:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8021846:	1a2d      	subs	r5, r5, r0
 8021848:	b2ad      	uxth	r5, r5
 802184a:	2d00      	cmp	r5, #0
 802184c:	bf18      	it	ne
 802184e:	2000      	movne	r0, #0
 8021850:	e731      	b.n	80216b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 8021852:	4b05      	ldr	r3, [pc, #20]	@ (8021868 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 8021854:	6818      	ldr	r0, [r3, #0]
 8021856:	6803      	ldr	r3, [r0, #0]
 8021858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802185a:	4798      	blx	r3
 802185c:	b01f      	add	sp, #124	@ 0x7c
 802185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021862:	bf00      	nop
 8021864:	fffff800 	.word	0xfffff800
 8021868:	2005ba80 	.word	0x2005ba80

0802186c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 802186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021870:	469b      	mov	fp, r3
 8021872:	4616      	mov	r6, r2
 8021874:	b091      	sub	sp, #68	@ 0x44
 8021876:	f9b3 2000 	ldrsh.w	r2, [r3]
 802187a:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 802187e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021882:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8021886:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 802188a:	4604      	mov	r4, r0
 802188c:	460d      	mov	r5, r1
 802188e:	4640      	mov	r0, r8
 8021890:	4659      	mov	r1, fp
 8021892:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8021896:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 802189a:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 802189e:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 80218a2:	f7f2 fbaf 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 80218a6:	4631      	mov	r1, r6
 80218a8:	4640      	mov	r0, r8
 80218aa:	f7f2 fbab 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 80218ae:	4b74      	ldr	r3, [pc, #464]	@ (8021a80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 80218b0:	8818      	ldrh	r0, [r3, #0]
 80218b2:	4b74      	ldr	r3, [pc, #464]	@ (8021a84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 80218b4:	b202      	sxth	r2, r0
 80218b6:	8819      	ldrh	r1, [r3, #0]
 80218b8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80218bc:	b20e      	sxth	r6, r1
 80218be:	2b00      	cmp	r3, #0
 80218c0:	da07      	bge.n	80218d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 80218c2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80218c6:	4463      	add	r3, ip
 80218c8:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80218cc:	2300      	movs	r3, #0
 80218ce:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80218d2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80218d6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80218da:	1ad2      	subs	r2, r2, r3
 80218dc:	4594      	cmp	ip, r2
 80218de:	bfc4      	itt	gt
 80218e0:	1ac2      	subgt	r2, r0, r3
 80218e2:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 80218e6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80218ea:	2a00      	cmp	r2, #0
 80218ec:	da07      	bge.n	80218fe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 80218ee:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 80218f2:	4462      	add	r2, ip
 80218f4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80218f8:	2200      	movs	r2, #0
 80218fa:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80218fe:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8021902:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8021906:	eba6 060a 	sub.w	r6, r6, sl
 802190a:	42b2      	cmp	r2, r6
 802190c:	bfc4      	itt	gt
 802190e:	eba1 020a 	subgt.w	r2, r1, sl
 8021912:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8021916:	4a5c      	ldr	r2, [pc, #368]	@ (8021a88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8021918:	7812      	ldrb	r2, [r2, #0]
 802191a:	b9a2      	cbnz	r2, 8021946 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 802191c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8021920:	4286      	cmp	r6, r0
 8021922:	4640      	mov	r0, r8
 8021924:	9303      	str	r3, [sp, #12]
 8021926:	bf14      	ite	ne
 8021928:	2600      	movne	r6, #0
 802192a:	2601      	moveq	r6, #1
 802192c:	f7f2 fbad 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021930:	9b03      	ldr	r3, [sp, #12]
 8021932:	b160      	cbz	r0, 802194e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8021934:	2300      	movs	r3, #0
 8021936:	8023      	strh	r3, [r4, #0]
 8021938:	8063      	strh	r3, [r4, #2]
 802193a:	80a3      	strh	r3, [r4, #4]
 802193c:	4620      	mov	r0, r4
 802193e:	80e3      	strh	r3, [r4, #6]
 8021940:	b011      	add	sp, #68	@ 0x44
 8021942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021946:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 802194a:	428e      	cmp	r6, r1
 802194c:	e7e9      	b.n	8021922 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 802194e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8021952:	a90e      	add	r1, sp, #56	@ 0x38
 8021954:	9205      	str	r2, [sp, #20]
 8021956:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 802195a:	900e      	str	r0, [sp, #56]	@ 0x38
 802195c:	9206      	str	r2, [sp, #24]
 802195e:	f8bb 2000 	ldrh.w	r2, [fp]
 8021962:	a80c      	add	r0, sp, #48	@ 0x30
 8021964:	1a9b      	subs	r3, r3, r2
 8021966:	b21b      	sxth	r3, r3
 8021968:	9303      	str	r3, [sp, #12]
 802196a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802196e:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8021972:	ebaa 0a03 	sub.w	sl, sl, r3
 8021976:	fa0f f38a 	sxth.w	r3, sl
 802197a:	9304      	str	r3, [sp, #16]
 802197c:	9b03      	ldr	r3, [sp, #12]
 802197e:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8021982:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8021986:	9b04      	ldr	r3, [sp, #16]
 8021988:	f8df b104 	ldr.w	fp, [pc, #260]	@ 8021a90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 802198c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021990:	9b05      	ldr	r3, [sp, #20]
 8021992:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8021996:	9b06      	ldr	r3, [sp, #24]
 8021998:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 802199c:	f7f7 fcf2 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219a0:	4640      	mov	r0, r8
 80219a2:	f7f7 fcc7 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219a6:	a80e      	add	r0, sp, #56	@ 0x38
 80219a8:	f7f7 fcc4 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219ac:	4b37      	ldr	r3, [pc, #220]	@ (8021a8c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80219ae:	4628      	mov	r0, r5
 80219b0:	881b      	ldrh	r3, [r3, #0]
 80219b2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 80219b6:	9307      	str	r3, [sp, #28]
 80219b8:	682b      	ldr	r3, [r5, #0]
 80219ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80219bc:	4798      	blx	r3
 80219be:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 80219c2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80219c6:	4681      	mov	r9, r0
 80219c8:	fb1a 3305 	smlabb	r3, sl, r5, r3
 80219cc:	f8db 0000 	ldr.w	r0, [fp]
 80219d0:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80219d2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80219d6:	6803      	ldr	r3, [r0, #0]
 80219d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80219da:	4798      	blx	r3
 80219dc:	4607      	mov	r7, r0
 80219de:	f8db 0000 	ldr.w	r0, [fp]
 80219e2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80219e6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80219ea:	6803      	ldr	r3, [r0, #0]
 80219ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80219ee:	9208      	str	r2, [sp, #32]
 80219f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80219f2:	4798      	blx	r3
 80219f4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80219f8:	f010 0f01 	tst.w	r0, #1
 80219fc:	d012      	beq.n	8021a24 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 80219fe:	f8db 0000 	ldr.w	r0, [fp]
 8021a02:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8021a06:	6803      	ldr	r3, [r0, #0]
 8021a08:	9200      	str	r2, [sp, #0]
 8021a0a:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8021a0c:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021a10:	462b      	mov	r3, r5
 8021a12:	47b0      	blx	r6
 8021a14:	9b03      	ldr	r3, [sp, #12]
 8021a16:	8023      	strh	r3, [r4, #0]
 8021a18:	9b04      	ldr	r3, [sp, #16]
 8021a1a:	8063      	strh	r3, [r4, #2]
 8021a1c:	9b05      	ldr	r3, [sp, #20]
 8021a1e:	80a3      	strh	r3, [r4, #4]
 8021a20:	9b06      	ldr	r3, [sp, #24]
 8021a22:	e78b      	b.n	802193c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8021a24:	fb09 f202 	mul.w	r2, r9, r2
 8021a28:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021a2c:	440f      	add	r7, r1
 8021a2e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8021a32:	b166      	cbz	r6, 8021a4e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021a34:	9a07      	ldr	r2, [sp, #28]
 8021a36:	4592      	cmp	sl, r2
 8021a38:	d109      	bne.n	8021a4e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021a3a:	f8db 0000 	ldr.w	r0, [fp]
 8021a3e:	fb09 f303 	mul.w	r3, r9, r3
 8021a42:	6802      	ldr	r2, [r0, #0]
 8021a44:	4629      	mov	r1, r5
 8021a46:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 8021a48:	463a      	mov	r2, r7
 8021a4a:	47b0      	blx	r6
 8021a4c:	e7e2      	b.n	8021a14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021a4e:	fb0a f303 	mul.w	r3, sl, r3
 8021a52:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8021a90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021a56:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8021a5a:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8021a5e:	4545      	cmp	r5, r8
 8021a60:	d2d8      	bcs.n	8021a14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021a62:	f8db 0000 	ldr.w	r0, [fp]
 8021a66:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8021a6a:	6802      	ldr	r2, [r0, #0]
 8021a6c:	4629      	mov	r1, r5
 8021a6e:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 8021a72:	005b      	lsls	r3, r3, #1
 8021a74:	463a      	mov	r2, r7
 8021a76:	47d0      	blx	sl
 8021a78:	444f      	add	r7, r9
 8021a7a:	4435      	add	r5, r6
 8021a7c:	e7ef      	b.n	8021a5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8021a7e:	bf00      	nop
 8021a80:	2005ba74 	.word	0x2005ba74
 8021a84:	2005ba76 	.word	0x2005ba76
 8021a88:	2005ba78 	.word	0x2005ba78
 8021a8c:	2005ba7a 	.word	0x2005ba7a
 8021a90:	2005ba80 	.word	0x2005ba80

08021a94 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021a96:	4606      	mov	r6, r0
 8021a98:	b087      	sub	sp, #28
 8021a9a:	460c      	mov	r4, r1
 8021a9c:	4617      	mov	r7, r2
 8021a9e:	461d      	mov	r5, r3
 8021aa0:	b333      	cbz	r3, 8021af0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021aa2:	4608      	mov	r0, r1
 8021aa4:	f7f2 faf1 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021aa8:	bb10      	cbnz	r0, 8021af0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021aaa:	6820      	ldr	r0, [r4, #0]
 8021aac:	6861      	ldr	r1, [r4, #4]
 8021aae:	ab04      	add	r3, sp, #16
 8021ab0:	4c1b      	ldr	r4, [pc, #108]	@ (8021b20 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8021ab2:	c303      	stmia	r3!, {r0, r1}
 8021ab4:	a804      	add	r0, sp, #16
 8021ab6:	f7f7 fc3d 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021aba:	6820      	ldr	r0, [r4, #0]
 8021abc:	6803      	ldr	r3, [r0, #0]
 8021abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021ac0:	4798      	blx	r3
 8021ac2:	2dff      	cmp	r5, #255	@ 0xff
 8021ac4:	d016      	beq.n	8021af4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8021ac6:	f010 0f08 	tst.w	r0, #8
 8021aca:	6820      	ldr	r0, [r4, #0]
 8021acc:	d015      	beq.n	8021afa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021ace:	2400      	movs	r4, #0
 8021ad0:	6801      	ldr	r1, [r0, #0]
 8021ad2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8021ad6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021ada:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021ade:	9401      	str	r4, [sp, #4]
 8021ae0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021ae4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021ae8:	9400      	str	r4, [sp, #0]
 8021aea:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 8021aec:	4639      	mov	r1, r7
 8021aee:	47a0      	blx	r4
 8021af0:	b007      	add	sp, #28
 8021af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021af4:	f010 0f02 	tst.w	r0, #2
 8021af8:	e7e7      	b.n	8021aca <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8021afa:	6803      	ldr	r3, [r0, #0]
 8021afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021afe:	4798      	blx	r3
 8021b00:	4b08      	ldr	r3, [pc, #32]	@ (8021b24 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021b02:	4601      	mov	r1, r0
 8021b04:	881a      	ldrh	r2, [r3, #0]
 8021b06:	e9cd 7500 	strd	r7, r5, [sp]
 8021b0a:	6833      	ldr	r3, [r6, #0]
 8021b0c:	4630      	mov	r0, r6
 8021b0e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8021b10:	ab04      	add	r3, sp, #16
 8021b12:	47a8      	blx	r5
 8021b14:	6820      	ldr	r0, [r4, #0]
 8021b16:	6803      	ldr	r3, [r0, #0]
 8021b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021b1a:	4798      	blx	r3
 8021b1c:	e7e8      	b.n	8021af0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021b1e:	bf00      	nop
 8021b20:	2005ba80 	.word	0x2005ba80
 8021b24:	2005ba7a 	.word	0x2005ba7a

08021b28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b2c:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8021b30:	4688      	mov	r8, r1
 8021b32:	4614      	mov	r4, r2
 8021b34:	461d      	mov	r5, r3
 8021b36:	9e08      	ldr	r6, [sp, #32]
 8021b38:	2f00      	cmp	r7, #0
 8021b3a:	f000 80a9 	beq.w	8021c90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021b3e:	4618      	mov	r0, r3
 8021b40:	f7f2 faa3 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021b44:	2800      	cmp	r0, #0
 8021b46:	f040 80a3 	bne.w	8021c90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021b4a:	f9b5 1000 	ldrsh.w	r1, [r5]
 8021b4e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021b52:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8021b56:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8021b5a:	fb04 1303 	mla	r3, r4, r3, r1
 8021b5e:	4365      	muls	r5, r4
 8021b60:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8021b64:	2fff      	cmp	r7, #255	@ 0xff
 8021b66:	eba4 0200 	sub.w	r2, r4, r0
 8021b6a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021b6e:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8021b72:	d04a      	beq.n	8021c0a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8021b74:	b2bc      	uxth	r4, r7
 8021b76:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8021b7a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8021b7e:	fa5f f788 	uxtb.w	r7, r8
 8021b82:	b2f3      	uxtb	r3, r6
 8021b84:	fb0e fe04 	mul.w	lr, lr, r4
 8021b88:	4367      	muls	r7, r4
 8021b8a:	4363      	muls	r3, r4
 8021b8c:	0040      	lsls	r0, r0, #1
 8021b8e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021b92:	fa1f fc8c 	uxth.w	ip, ip
 8021b96:	42a9      	cmp	r1, r5
 8021b98:	d27a      	bcs.n	8021c90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021b9a:	eb01 0900 	add.w	r9, r1, r0
 8021b9e:	4549      	cmp	r1, r9
 8021ba0:	d231      	bcs.n	8021c06 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8021ba2:	880a      	ldrh	r2, [r1, #0]
 8021ba4:	1214      	asrs	r4, r2, #8
 8021ba6:	10d6      	asrs	r6, r2, #3
 8021ba8:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8021bac:	00d2      	lsls	r2, r2, #3
 8021bae:	b2d2      	uxtb	r2, r2
 8021bb0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021bb4:	fb14 f40c 	smulbb	r4, r4, ip
 8021bb8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021bbc:	fb12 f20c 	smulbb	r2, r2, ip
 8021bc0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021bc4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021bc8:	4474      	add	r4, lr
 8021bca:	fb16 f60c 	smulbb	r6, r6, ip
 8021bce:	b2a4      	uxth	r4, r4
 8021bd0:	441a      	add	r2, r3
 8021bd2:	b292      	uxth	r2, r2
 8021bd4:	f104 0a01 	add.w	sl, r4, #1
 8021bd8:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021bdc:	f102 0a01 	add.w	sl, r2, #1
 8021be0:	443e      	add	r6, r7
 8021be2:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8021be6:	b2b6      	uxth	r6, r6
 8021be8:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8021bec:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021bf0:	4322      	orrs	r2, r4
 8021bf2:	1c74      	adds	r4, r6, #1
 8021bf4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021bf8:	0976      	lsrs	r6, r6, #5
 8021bfa:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8021bfe:	4332      	orrs	r2, r6
 8021c00:	f821 2b02 	strh.w	r2, [r1], #2
 8021c04:	e7cb      	b.n	8021b9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8021c06:	4441      	add	r1, r8
 8021c08:	e7c5      	b.n	8021b96 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8021c0a:	4f22      	ldr	r7, [pc, #136]	@ (8021c94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8021c0c:	0973      	lsrs	r3, r6, #5
 8021c0e:	ea08 0707 	and.w	r7, r8, r7
 8021c12:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021c16:	433b      	orrs	r3, r7
 8021c18:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021c1c:	4333      	orrs	r3, r6
 8021c1e:	07e7      	lsls	r7, r4, #31
 8021c20:	b29b      	uxth	r3, r3
 8021c22:	d50b      	bpl.n	8021c3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8021c24:	0040      	lsls	r0, r0, #1
 8021c26:	0052      	lsls	r2, r2, #1
 8021c28:	42a9      	cmp	r1, r5
 8021c2a:	d231      	bcs.n	8021c90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021c2c:	180c      	adds	r4, r1, r0
 8021c2e:	42a1      	cmp	r1, r4
 8021c30:	d202      	bcs.n	8021c38 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8021c32:	f821 3b02 	strh.w	r3, [r1], #2
 8021c36:	e7fa      	b.n	8021c2e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8021c38:	4411      	add	r1, r2
 8021c3a:	e7f5      	b.n	8021c28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8021c3c:	078e      	lsls	r6, r1, #30
 8021c3e:	d008      	beq.n	8021c52 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8021c40:	460a      	mov	r2, r1
 8021c42:	0066      	lsls	r6, r4, #1
 8021c44:	42aa      	cmp	r2, r5
 8021c46:	d202      	bcs.n	8021c4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8021c48:	8013      	strh	r3, [r2, #0]
 8021c4a:	4432      	add	r2, r6
 8021c4c:	e7fa      	b.n	8021c44 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8021c4e:	3102      	adds	r1, #2
 8021c50:	3801      	subs	r0, #1
 8021c52:	07c2      	lsls	r2, r0, #31
 8021c54:	d50b      	bpl.n	8021c6e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8021c56:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8021c5a:	3a01      	subs	r2, #1
 8021c5c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021c60:	0066      	lsls	r6, r4, #1
 8021c62:	42aa      	cmp	r2, r5
 8021c64:	d202      	bcs.n	8021c6c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8021c66:	8013      	strh	r3, [r2, #0]
 8021c68:	4432      	add	r2, r6
 8021c6a:	e7fa      	b.n	8021c62 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8021c6c:	3801      	subs	r0, #1
 8021c6e:	b178      	cbz	r0, 8021c90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021c70:	1040      	asrs	r0, r0, #1
 8021c72:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021c76:	0080      	lsls	r0, r0, #2
 8021c78:	0064      	lsls	r4, r4, #1
 8021c7a:	42a9      	cmp	r1, r5
 8021c7c:	d208      	bcs.n	8021c90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021c7e:	460a      	mov	r2, r1
 8021c80:	180e      	adds	r6, r1, r0
 8021c82:	42b2      	cmp	r2, r6
 8021c84:	d202      	bcs.n	8021c8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8021c86:	f842 3b04 	str.w	r3, [r2], #4
 8021c8a:	e7fa      	b.n	8021c82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8021c8c:	4421      	add	r1, r4
 8021c8e:	e7f4      	b.n	8021c7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8021c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021c94:	00fff800 	.word	0x00fff800

08021c98 <_ZN8touchgfx8LCD16bppC1Ev>:
 8021c98:	2200      	movs	r2, #0
 8021c9a:	4912      	ldr	r1, [pc, #72]	@ (8021ce4 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8021c9c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8021ca0:	6001      	str	r1, [r0, #0]
 8021ca2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8021ca6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8021caa:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8021cae:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8021cb2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8021cb6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8021cba:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8021cbe:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8021cc2:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8021cc6:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8021cca:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8021cce:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8021cd2:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8021cd6:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8021cda:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8021cde:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8021ce2:	4770      	bx	lr
 8021ce4:	0802fcb0 	.word	0x0802fcb0

08021ce8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cec:	460d      	mov	r5, r1
 8021cee:	4604      	mov	r4, r0
 8021cf0:	4699      	mov	r9, r3
 8021cf2:	b08d      	sub	sp, #52	@ 0x34
 8021cf4:	6808      	ldr	r0, [r1, #0]
 8021cf6:	6849      	ldr	r1, [r1, #4]
 8021cf8:	ab08      	add	r3, sp, #32
 8021cfa:	c303      	stmia	r3!, {r0, r1}
 8021cfc:	6810      	ldr	r0, [r2, #0]
 8021cfe:	6851      	ldr	r1, [r2, #4]
 8021d00:	ab0a      	add	r3, sp, #40	@ 0x28
 8021d02:	c303      	stmia	r3!, {r0, r1}
 8021d04:	a808      	add	r0, sp, #32
 8021d06:	f7f7 fb15 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021d0a:	4629      	mov	r1, r5
 8021d0c:	a80a      	add	r0, sp, #40	@ 0x28
 8021d0e:	f7f7 fb39 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021d12:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8021d16:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8021d1a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8021d1e:	4d63      	ldr	r5, [pc, #396]	@ (8021eac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021d20:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021d24:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021d28:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8021d2c:	6828      	ldr	r0, [r5, #0]
 8021d2e:	440a      	add	r2, r1
 8021d30:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8021d34:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8021d38:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8021d3c:	4413      	add	r3, r2
 8021d3e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8021d42:	6803      	ldr	r3, [r0, #0]
 8021d44:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8021d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021d4a:	4798      	blx	r3
 8021d4c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021d50:	d119      	bne.n	8021d86 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8021d52:	f010 0f20 	tst.w	r0, #32
 8021d56:	6828      	ldr	r0, [r5, #0]
 8021d58:	d018      	beq.n	8021d8c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021d5a:	2500      	movs	r5, #0
 8021d5c:	6801      	ldr	r1, [r0, #0]
 8021d5e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8021d62:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8021d66:	b2b6      	uxth	r6, r6
 8021d68:	9502      	str	r5, [sp, #8]
 8021d6a:	fa1f f588 	uxth.w	r5, r8
 8021d6e:	9601      	str	r6, [sp, #4]
 8021d70:	9500      	str	r5, [sp, #0]
 8021d72:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8021d74:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021d78:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8021d7c:	4621      	mov	r1, r4
 8021d7e:	47a8      	blx	r5
 8021d80:	b00d      	add	sp, #52	@ 0x34
 8021d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d86:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021d8a:	e7e4      	b.n	8021d56 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8021d8c:	6803      	ldr	r3, [r0, #0]
 8021d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021d90:	4798      	blx	r3
 8021d92:	4947      	ldr	r1, [pc, #284]	@ (8021eb0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8021d94:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8021d98:	468a      	mov	sl, r1
 8021d9a:	880b      	ldrh	r3, [r1, #0]
 8021d9c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8021da0:	fb03 5202 	mla	r2, r3, r2, r5
 8021da4:	4373      	muls	r3, r6
 8021da6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021daa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021dae:	9307      	str	r3, [sp, #28]
 8021db0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021db4:	9306      	str	r3, [sp, #24]
 8021db6:	9b07      	ldr	r3, [sp, #28]
 8021db8:	4298      	cmp	r0, r3
 8021dba:	d270      	bcs.n	8021e9e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8021dbc:	4621      	mov	r1, r4
 8021dbe:	9b06      	ldr	r3, [sp, #24]
 8021dc0:	eb00 0b03 	add.w	fp, r0, r3
 8021dc4:	4558      	cmp	r0, fp
 8021dc6:	d25d      	bcs.n	8021e84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8021dc8:	f851 4b04 	ldr.w	r4, [r1], #4
 8021dcc:	0e23      	lsrs	r3, r4, #24
 8021dce:	d014      	beq.n	8021dfa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021dd0:	2bff      	cmp	r3, #255	@ 0xff
 8021dd2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8021dd6:	d112      	bne.n	8021dfe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021dd8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021ddc:	d10f      	bne.n	8021dfe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021dde:	0963      	lsrs	r3, r4, #5
 8021de0:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8021de4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021de8:	f02c 0c07 	bic.w	ip, ip, #7
 8021dec:	ea43 0c0c 	orr.w	ip, r3, ip
 8021df0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021df4:	ea4c 0404 	orr.w	r4, ip, r4
 8021df8:	8004      	strh	r4, [r0, #0]
 8021dfa:	3002      	adds	r0, #2
 8021dfc:	e7e2      	b.n	8021dc4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8021dfe:	fb09 f303 	mul.w	r3, r9, r3
 8021e02:	1c5a      	adds	r2, r3, #1
 8021e04:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8021e08:	1212      	asrs	r2, r2, #8
 8021e0a:	b293      	uxth	r3, r2
 8021e0c:	43d2      	mvns	r2, r2
 8021e0e:	8807      	ldrh	r7, [r0, #0]
 8021e10:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8021e14:	fb1e fe03 	smulbb	lr, lr, r3
 8021e18:	123e      	asrs	r6, r7, #8
 8021e1a:	fa5f fc8c 	uxtb.w	ip, ip
 8021e1e:	b2e4      	uxtb	r4, r4
 8021e20:	fb1c fc03 	smulbb	ip, ip, r3
 8021e24:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021e28:	fb14 f403 	smulbb	r4, r4, r3
 8021e2c:	b2d2      	uxtb	r2, r2
 8021e2e:	10fd      	asrs	r5, r7, #3
 8021e30:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021e34:	00ff      	lsls	r7, r7, #3
 8021e36:	fb06 e602 	mla	r6, r6, r2, lr
 8021e3a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021e3e:	b2ff      	uxtb	r7, r7
 8021e40:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021e44:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021e48:	fb05 c502 	mla	r5, r5, r2, ip
 8021e4c:	fb07 4702 	mla	r7, r7, r2, r4
 8021e50:	b2b6      	uxth	r6, r6
 8021e52:	f106 0e01 	add.w	lr, r6, #1
 8021e56:	b2ad      	uxth	r5, r5
 8021e58:	b2bf      	uxth	r7, r7
 8021e5a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021e5e:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8021e62:	f105 0c01 	add.w	ip, r5, #1
 8021e66:	1c7e      	adds	r6, r7, #1
 8021e68:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021e6c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021e70:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021e74:	096d      	lsrs	r5, r5, #5
 8021e76:	ea46 060e 	orr.w	r6, r6, lr
 8021e7a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021e7e:	432e      	orrs	r6, r5
 8021e80:	8006      	strh	r6, [r0, #0]
 8021e82:	e7ba      	b.n	8021dfa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021e84:	f8ba 3000 	ldrh.w	r3, [sl]
 8021e88:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8021e8c:	eba3 0308 	sub.w	r3, r3, r8
 8021e90:	eba4 0408 	sub.w	r4, r4, r8
 8021e94:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021e98:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021e9c:	e78b      	b.n	8021db6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8021e9e:	4b03      	ldr	r3, [pc, #12]	@ (8021eac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021ea0:	6818      	ldr	r0, [r3, #0]
 8021ea2:	6803      	ldr	r3, [r0, #0]
 8021ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021ea6:	4798      	blx	r3
 8021ea8:	e76a      	b.n	8021d80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021eaa:	bf00      	nop
 8021eac:	2005ba80 	.word	0x2005ba80
 8021eb0:	2005ba7a 	.word	0x2005ba7a

08021eb4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8021eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021eb8:	b085      	sub	sp, #20
 8021eba:	466d      	mov	r5, sp
 8021ebc:	4616      	mov	r6, r2
 8021ebe:	460c      	mov	r4, r1
 8021ec0:	6810      	ldr	r0, [r2, #0]
 8021ec2:	6851      	ldr	r1, [r2, #4]
 8021ec4:	c503      	stmia	r5!, {r0, r1}
 8021ec6:	6818      	ldr	r0, [r3, #0]
 8021ec8:	6859      	ldr	r1, [r3, #4]
 8021eca:	c503      	stmia	r5!, {r0, r1}
 8021ecc:	4668      	mov	r0, sp
 8021ece:	f7f7 fa31 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ed2:	4631      	mov	r1, r6
 8021ed4:	a802      	add	r0, sp, #8
 8021ed6:	f7f7 fa55 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021eda:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8021ede:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021ee2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021ee6:	4d28      	ldr	r5, [pc, #160]	@ (8021f88 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8021ee8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021eec:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021ef0:	f8bd 1000 	ldrh.w	r1, [sp]
 8021ef4:	6828      	ldr	r0, [r5, #0]
 8021ef6:	440a      	add	r2, r1
 8021ef8:	f8ad 2008 	strh.w	r2, [sp, #8]
 8021efc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021f00:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8021f04:	4413      	add	r3, r2
 8021f06:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021f0a:	6803      	ldr	r3, [r0, #0]
 8021f0c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8021f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021f12:	4798      	blx	r3
 8021f14:	4e1d      	ldr	r6, [pc, #116]	@ (8021f8c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8021f16:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021f1a:	8833      	ldrh	r3, [r6, #0]
 8021f1c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8021f20:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8021f90 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8021f24:	fb03 1202 	mla	r2, r3, r2, r1
 8021f28:	fb08 f303 	mul.w	r3, r8, r3
 8021f2c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021f30:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021f34:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8021f38:	4298      	cmp	r0, r3
 8021f3a:	d21d      	bcs.n	8021f78 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8021f3c:	eb00 080c 	add.w	r8, r0, ip
 8021f40:	4540      	cmp	r0, r8
 8021f42:	d20f      	bcs.n	8021f64 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8021f44:	f854 1b04 	ldr.w	r1, [r4], #4
 8021f48:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8021f4c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8021f50:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8021f54:	ea42 0209 	orr.w	r2, r2, r9
 8021f58:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021f5c:	430a      	orrs	r2, r1
 8021f5e:	f820 2b02 	strh.w	r2, [r0], #2
 8021f62:	e7ed      	b.n	8021f40 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8021f64:	8832      	ldrh	r2, [r6, #0]
 8021f66:	1bd2      	subs	r2, r2, r7
 8021f68:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021f6c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8021f70:	1bd2      	subs	r2, r2, r7
 8021f72:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8021f76:	e7df      	b.n	8021f38 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8021f78:	6828      	ldr	r0, [r5, #0]
 8021f7a:	6803      	ldr	r3, [r0, #0]
 8021f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021f7e:	4798      	blx	r3
 8021f80:	b005      	add	sp, #20
 8021f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021f86:	bf00      	nop
 8021f88:	2005ba80 	.word	0x2005ba80
 8021f8c:	2005ba7a 	.word	0x2005ba7a
 8021f90:	fffff800 	.word	0xfffff800

08021f94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8021f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f98:	460e      	mov	r6, r1
 8021f9a:	4604      	mov	r4, r0
 8021f9c:	461d      	mov	r5, r3
 8021f9e:	b08e      	sub	sp, #56	@ 0x38
 8021fa0:	6808      	ldr	r0, [r1, #0]
 8021fa2:	6849      	ldr	r1, [r1, #4]
 8021fa4:	ab0a      	add	r3, sp, #40	@ 0x28
 8021fa6:	c303      	stmia	r3!, {r0, r1}
 8021fa8:	6810      	ldr	r0, [r2, #0]
 8021faa:	6851      	ldr	r1, [r2, #4]
 8021fac:	ab0c      	add	r3, sp, #48	@ 0x30
 8021fae:	c303      	stmia	r3!, {r0, r1}
 8021fb0:	a80a      	add	r0, sp, #40	@ 0x28
 8021fb2:	f7f7 f9bf 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021fb6:	4631      	mov	r1, r6
 8021fb8:	a80c      	add	r0, sp, #48	@ 0x30
 8021fba:	f7f7 f9e3 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021fbe:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8021fc2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8021fc6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8021fca:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 802217c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8021fce:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021fd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021fd6:	440c      	add	r4, r1
 8021fd8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8021fdc:	f8d8 0000 	ldr.w	r0, [r8]
 8021fe0:	440a      	add	r2, r1
 8021fe2:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8021fe6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8021fea:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8021fee:	4413      	add	r3, r2
 8021ff0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021ff4:	6803      	ldr	r3, [r0, #0]
 8021ff6:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8021ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021ffc:	4798      	blx	r3
 8021ffe:	2dff      	cmp	r5, #255	@ 0xff
 8022000:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8022180 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8022004:	d124      	bne.n	8022050 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8022006:	f010 0f01 	tst.w	r0, #1
 802200a:	f8d8 0000 	ldr.w	r0, [r8]
 802200e:	d022      	beq.n	8022056 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022010:	2100      	movs	r1, #0
 8022012:	f04f 0e01 	mov.w	lr, #1
 8022016:	f8d0 c000 	ldr.w	ip, [r0]
 802201a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802201e:	f8cd e018 	str.w	lr, [sp, #24]
 8022022:	f8b9 e000 	ldrh.w	lr, [r9]
 8022026:	b2b6      	uxth	r6, r6
 8022028:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 802202c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022030:	b2bf      	uxth	r7, r7
 8022032:	9102      	str	r1, [sp, #8]
 8022034:	9503      	str	r5, [sp, #12]
 8022036:	9601      	str	r6, [sp, #4]
 8022038:	9700      	str	r7, [sp, #0]
 802203a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 802203e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022042:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 8022046:	4621      	mov	r1, r4
 8022048:	47a8      	blx	r5
 802204a:	b00e      	add	sp, #56	@ 0x38
 802204c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022050:	f010 0f04 	tst.w	r0, #4
 8022054:	e7d9      	b.n	802200a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8022056:	6803      	ldr	r3, [r0, #0]
 8022058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802205a:	4798      	blx	r3
 802205c:	f8b9 3000 	ldrh.w	r3, [r9]
 8022060:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8022064:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8022068:	435e      	muls	r6, r3
 802206a:	fb03 1202 	mla	r2, r3, r2, r1
 802206e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8022072:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022076:	ebac 0c07 	sub.w	ip, ip, r7
 802207a:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 802207e:	2dff      	cmp	r5, #255	@ 0xff
 8022080:	eba3 0707 	sub.w	r7, r3, r7
 8022084:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8022088:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802208c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8022090:	d049      	beq.n	8022126 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8022092:	43eb      	mvns	r3, r5
 8022094:	fa1f f985 	uxth.w	r9, r5
 8022098:	b2db      	uxtb	r3, r3
 802209a:	42b0      	cmp	r0, r6
 802209c:	d266      	bcs.n	802216c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802209e:	eb00 0a0e 	add.w	sl, r0, lr
 80220a2:	4550      	cmp	r0, sl
 80220a4:	4621      	mov	r1, r4
 80220a6:	f104 0403 	add.w	r4, r4, #3
 80220aa:	d25b      	bcs.n	8022164 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80220ac:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80220b0:	8802      	ldrh	r2, [r0, #0]
 80220b2:	fb11 f109 	smulbb	r1, r1, r9
 80220b6:	ea4f 2822 	mov.w	r8, r2, asr #8
 80220ba:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80220be:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80220c2:	fb08 1803 	mla	r8, r8, r3, r1
 80220c6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80220ca:	10d5      	asrs	r5, r2, #3
 80220cc:	fb11 f109 	smulbb	r1, r1, r9
 80220d0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80220d4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80220d8:	fb05 1503 	mla	r5, r5, r3, r1
 80220dc:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80220e0:	00d2      	lsls	r2, r2, #3
 80220e2:	fb11 f109 	smulbb	r1, r1, r9
 80220e6:	b2d2      	uxtb	r2, r2
 80220e8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80220ec:	fb02 1203 	mla	r2, r2, r3, r1
 80220f0:	fa1f f888 	uxth.w	r8, r8
 80220f4:	b292      	uxth	r2, r2
 80220f6:	f108 0101 	add.w	r1, r8, #1
 80220fa:	b2ad      	uxth	r5, r5
 80220fc:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022100:	1c51      	adds	r1, r2, #1
 8022102:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022106:	1c69      	adds	r1, r5, #1
 8022108:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802210c:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8022110:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022114:	096d      	lsrs	r5, r5, #5
 8022116:	ea42 0208 	orr.w	r2, r2, r8
 802211a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802211e:	432a      	orrs	r2, r5
 8022120:	f820 2b02 	strh.w	r2, [r0], #2
 8022124:	e7bd      	b.n	80220a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8022126:	4a14      	ldr	r2, [pc, #80]	@ (8022178 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022128:	42b0      	cmp	r0, r6
 802212a:	d21f      	bcs.n	802216c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802212c:	eb00 050e 	add.w	r5, r0, lr
 8022130:	42a8      	cmp	r0, r5
 8022132:	4621      	mov	r1, r4
 8022134:	f104 0403 	add.w	r4, r4, #3
 8022138:	d210      	bcs.n	802215c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802213a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802213e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022142:	00db      	lsls	r3, r3, #3
 8022144:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022148:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802214c:	430b      	orrs	r3, r1
 802214e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022152:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8022156:	f820 3b02 	strh.w	r3, [r0], #2
 802215a:	e7e9      	b.n	8022130 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 802215c:	4438      	add	r0, r7
 802215e:	eb01 040c 	add.w	r4, r1, ip
 8022162:	e7e1      	b.n	8022128 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8022164:	4438      	add	r0, r7
 8022166:	eb01 040c 	add.w	r4, r1, ip
 802216a:	e796      	b.n	802209a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 802216c:	4b03      	ldr	r3, [pc, #12]	@ (802217c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 802216e:	6818      	ldr	r0, [r3, #0]
 8022170:	6803      	ldr	r3, [r0, #0]
 8022172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022174:	4798      	blx	r3
 8022176:	e768      	b.n	802204a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8022178:	fffff800 	.word	0xfffff800
 802217c:	2005ba80 	.word	0x2005ba80
 8022180:	2005ba7a 	.word	0x2005ba7a

08022184 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022184:	b4f0      	push	{r4, r5, r6, r7}
 8022186:	4616      	mov	r6, r2
 8022188:	2e01      	cmp	r6, #1
 802218a:	461c      	mov	r4, r3
 802218c:	460d      	mov	r5, r1
 802218e:	9a04      	ldr	r2, [sp, #16]
 8022190:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022194:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8022198:	d012      	beq.n	80221c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 802219a:	d303      	bcc.n	80221a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 802219c:	2e02      	cmp	r6, #2
 802219e:	d00a      	beq.n	80221b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80221a0:	bcf0      	pop	{r4, r5, r6, r7}
 80221a2:	4770      	bx	lr
 80221a4:	6805      	ldr	r5, [r0, #0]
 80221a6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80221aa:	68ed      	ldr	r5, [r5, #12]
 80221ac:	4613      	mov	r3, r2
 80221ae:	46ac      	mov	ip, r5
 80221b0:	4622      	mov	r2, r4
 80221b2:	bcf0      	pop	{r4, r5, r6, r7}
 80221b4:	4760      	bx	ip
 80221b6:	4621      	mov	r1, r4
 80221b8:	4628      	mov	r0, r5
 80221ba:	bcf0      	pop	{r4, r5, r6, r7}
 80221bc:	f7ff bd94 	b.w	8021ce8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80221c0:	4621      	mov	r1, r4
 80221c2:	4628      	mov	r0, r5
 80221c4:	bcf0      	pop	{r4, r5, r6, r7}
 80221c6:	f7ff bee5 	b.w	8021f94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080221cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80221cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221d0:	4616      	mov	r6, r2
 80221d2:	4681      	mov	r9, r0
 80221d4:	b093      	sub	sp, #76	@ 0x4c
 80221d6:	6810      	ldr	r0, [r2, #0]
 80221d8:	4688      	mov	r8, r1
 80221da:	6851      	ldr	r1, [r2, #4]
 80221dc:	ac0e      	add	r4, sp, #56	@ 0x38
 80221de:	c403      	stmia	r4!, {r0, r1}
 80221e0:	6818      	ldr	r0, [r3, #0]
 80221e2:	6859      	ldr	r1, [r3, #4]
 80221e4:	ac10      	add	r4, sp, #64	@ 0x40
 80221e6:	c403      	stmia	r4!, {r0, r1}
 80221e8:	a80e      	add	r0, sp, #56	@ 0x38
 80221ea:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 80221ee:	f7f7 f8a1 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80221f2:	4631      	mov	r1, r6
 80221f4:	a810      	add	r0, sp, #64	@ 0x40
 80221f6:	f7f7 f8c5 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80221fa:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80221fe:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8022202:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8022206:	4e62      	ldr	r6, [pc, #392]	@ (8022390 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8022208:	fb11 2103 	smlabb	r1, r1, r3, r2
 802220c:	4489      	add	r9, r1
 802220e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8022212:	6830      	ldr	r0, [r6, #0]
 8022214:	440a      	add	r2, r1
 8022216:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 802221a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802221e:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8022222:	4413      	add	r3, r2
 8022224:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8022228:	6803      	ldr	r3, [r0, #0]
 802222a:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 802222e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022230:	4798      	blx	r3
 8022232:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8022236:	4f57      	ldr	r7, [pc, #348]	@ (8022394 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8022238:	6830      	ldr	r0, [r6, #0]
 802223a:	d01d      	beq.n	8022278 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802223c:	2200      	movs	r2, #0
 802223e:	6801      	ldr	r1, [r0, #0]
 8022240:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022244:	220b      	movs	r2, #11
 8022246:	9207      	str	r2, [sp, #28]
 8022248:	883a      	ldrh	r2, [r7, #0]
 802224a:	b2a4      	uxth	r4, r4
 802224c:	9206      	str	r2, [sp, #24]
 802224e:	2201      	movs	r2, #1
 8022250:	e9cd a204 	strd	sl, r2, [sp, #16]
 8022254:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8022258:	b2ad      	uxth	r5, r5
 802225a:	9203      	str	r2, [sp, #12]
 802225c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8022260:	9502      	str	r5, [sp, #8]
 8022262:	9200      	str	r2, [sp, #0]
 8022264:	9401      	str	r4, [sp, #4]
 8022266:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 8022268:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 802226c:	4642      	mov	r2, r8
 802226e:	4649      	mov	r1, r9
 8022270:	47a0      	blx	r4
 8022272:	b013      	add	sp, #76	@ 0x4c
 8022274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022278:	6803      	ldr	r3, [r0, #0]
 802227a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802227c:	4798      	blx	r3
 802227e:	f04f 0e04 	mov.w	lr, #4
 8022282:	883b      	ldrh	r3, [r7, #0]
 8022284:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8022288:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 802228c:	435d      	muls	r5, r3
 802228e:	fb03 1202 	mla	r2, r3, r2, r1
 8022292:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022296:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 802229a:	920c      	str	r2, [sp, #48]	@ 0x30
 802229c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80222a0:	1b12      	subs	r2, r2, r4
 80222a2:	920d      	str	r2, [sp, #52]	@ 0x34
 80222a4:	0062      	lsls	r2, r4, #1
 80222a6:	1b1c      	subs	r4, r3, r4
 80222a8:	0063      	lsls	r3, r4, #1
 80222aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80222ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80222ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80222b0:	4298      	cmp	r0, r3
 80222b2:	d266      	bcs.n	8022382 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80222b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80222b6:	eb00 0b03 	add.w	fp, r0, r3
 80222ba:	4558      	cmp	r0, fp
 80222bc:	d25c      	bcs.n	8022378 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80222be:	f819 3b01 	ldrb.w	r3, [r9], #1
 80222c2:	fb1e e303 	smlabb	r3, lr, r3, lr
 80222c6:	f858 2003 	ldr.w	r2, [r8, r3]
 80222ca:	0e11      	lsrs	r1, r2, #24
 80222cc:	d012      	beq.n	80222f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80222ce:	29ff      	cmp	r1, #255	@ 0xff
 80222d0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80222d4:	d110      	bne.n	80222f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80222d6:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80222da:	d10d      	bne.n	80222f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80222dc:	0953      	lsrs	r3, r2, #5
 80222de:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 80222e2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80222e6:	f027 0707 	bic.w	r7, r7, #7
 80222ea:	431f      	orrs	r7, r3
 80222ec:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80222f0:	433a      	orrs	r2, r7
 80222f2:	8002      	strh	r2, [r0, #0]
 80222f4:	3002      	adds	r0, #2
 80222f6:	e7e0      	b.n	80222ba <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 80222f8:	fb0a f101 	mul.w	r1, sl, r1
 80222fc:	1c4b      	adds	r3, r1, #1
 80222fe:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8022302:	121b      	asrs	r3, r3, #8
 8022304:	b299      	uxth	r1, r3
 8022306:	43db      	mvns	r3, r3
 8022308:	8806      	ldrh	r6, [r0, #0]
 802230a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802230e:	b2d2      	uxtb	r2, r2
 8022310:	fb1c fc01 	smulbb	ip, ip, r1
 8022314:	fb12 f201 	smulbb	r2, r2, r1
 8022318:	1235      	asrs	r5, r6, #8
 802231a:	10f4      	asrs	r4, r6, #3
 802231c:	00f6      	lsls	r6, r6, #3
 802231e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8022322:	b2f6      	uxtb	r6, r6
 8022324:	b2ff      	uxtb	r7, r7
 8022326:	b2db      	uxtb	r3, r3
 8022328:	fb17 f701 	smulbb	r7, r7, r1
 802232c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022330:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022334:	fb05 c503 	mla	r5, r5, r3, ip
 8022338:	fb06 2203 	mla	r2, r6, r3, r2
 802233c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8022340:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022344:	fb04 7403 	mla	r4, r4, r3, r7
 8022348:	b2ad      	uxth	r5, r5
 802234a:	b292      	uxth	r2, r2
 802234c:	f105 0c01 	add.w	ip, r5, #1
 8022350:	1c57      	adds	r7, r2, #1
 8022352:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022356:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802235a:	b2a4      	uxth	r4, r4
 802235c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022360:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8022364:	433d      	orrs	r5, r7
 8022366:	1c67      	adds	r7, r4, #1
 8022368:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802236c:	0964      	lsrs	r4, r4, #5
 802236e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8022372:	4325      	orrs	r5, r4
 8022374:	8005      	strh	r5, [r0, #0]
 8022376:	e7bd      	b.n	80222f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022378:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802237a:	4418      	add	r0, r3
 802237c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802237e:	4499      	add	r9, r3
 8022380:	e795      	b.n	80222ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8022382:	4b03      	ldr	r3, [pc, #12]	@ (8022390 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8022384:	6818      	ldr	r0, [r3, #0]
 8022386:	6803      	ldr	r3, [r0, #0]
 8022388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802238a:	4798      	blx	r3
 802238c:	e771      	b.n	8022272 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 802238e:	bf00      	nop
 8022390:	2005ba80 	.word	0x2005ba80
 8022394:	2005ba7a 	.word	0x2005ba7a

08022398 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8022398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802239c:	b087      	sub	sp, #28
 802239e:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80223a2:	4680      	mov	r8, r0
 80223a4:	460d      	mov	r5, r1
 80223a6:	4614      	mov	r4, r2
 80223a8:	2e00      	cmp	r6, #0
 80223aa:	f000 80b9 	beq.w	8022520 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80223ae:	6810      	ldr	r0, [r2, #0]
 80223b0:	6851      	ldr	r1, [r2, #4]
 80223b2:	af02      	add	r7, sp, #8
 80223b4:	c703      	stmia	r7!, {r0, r1}
 80223b6:	6818      	ldr	r0, [r3, #0]
 80223b8:	6859      	ldr	r1, [r3, #4]
 80223ba:	af04      	add	r7, sp, #16
 80223bc:	c703      	stmia	r7!, {r0, r1}
 80223be:	a802      	add	r0, sp, #8
 80223c0:	f7f6 ffb8 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80223c4:	4621      	mov	r1, r4
 80223c6:	a804      	add	r0, sp, #16
 80223c8:	f7f6 ffdc 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80223cc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80223d0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80223d4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80223d8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80223dc:	fb14 2103 	smlabb	r1, r4, r3, r2
 80223e0:	eb08 0401 	add.w	r4, r8, r1
 80223e4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80223e8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80223ec:	440a      	add	r2, r1
 80223ee:	f8ad 2010 	strh.w	r2, [sp, #16]
 80223f2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80223f6:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80223fa:	4413      	add	r3, r2
 80223fc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022400:	4b49      	ldr	r3, [pc, #292]	@ (8022528 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022402:	6818      	ldr	r0, [r3, #0]
 8022404:	6803      	ldr	r3, [r0, #0]
 8022406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022408:	4798      	blx	r3
 802240a:	4b48      	ldr	r3, [pc, #288]	@ (802252c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 802240c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022410:	881a      	ldrh	r2, [r3, #0]
 8022412:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8022416:	2eff      	cmp	r6, #255	@ 0xff
 8022418:	fb02 c101 	mla	r1, r2, r1, ip
 802241c:	fb02 f207 	mul.w	r2, r2, r7
 8022420:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022424:	f105 0104 	add.w	r1, r5, #4
 8022428:	461d      	mov	r5, r3
 802242a:	d05a      	beq.n	80224e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 802242c:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8022430:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022434:	b2b6      	uxth	r6, r6
 8022436:	fa1f fe8e 	uxth.w	lr, lr
 802243a:	9301      	str	r3, [sp, #4]
 802243c:	4282      	cmp	r2, r0
 802243e:	d96a      	bls.n	8022516 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022440:	eb00 0b0a 	add.w	fp, r0, sl
 8022444:	4583      	cmp	fp, r0
 8022446:	d940      	bls.n	80224ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8022448:	8805      	ldrh	r5, [r0, #0]
 802244a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802244e:	122f      	asrs	r7, r5, #8
 8022450:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8022454:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022458:	fb17 f70e 	smulbb	r7, r7, lr
 802245c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8022460:	00ed      	lsls	r5, r5, #3
 8022462:	b2ed      	uxtb	r5, r5
 8022464:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022468:	fb15 f50e 	smulbb	r5, r5, lr
 802246c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8022470:	fb0c 7c06 	mla	ip, ip, r6, r7
 8022474:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8022478:	10df      	asrs	r7, r3, #3
 802247a:	00db      	lsls	r3, r3, #3
 802247c:	fb19 f90e 	smulbb	r9, r9, lr
 8022480:	b2db      	uxtb	r3, r3
 8022482:	fb03 5306 	mla	r3, r3, r6, r5
 8022486:	fa1f fc8c 	uxth.w	ip, ip
 802248a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802248e:	fb07 9706 	mla	r7, r7, r6, r9
 8022492:	f10c 0901 	add.w	r9, ip, #1
 8022496:	b29b      	uxth	r3, r3
 8022498:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 802249c:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80224a0:	f103 0c01 	add.w	ip, r3, #1
 80224a4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80224a8:	b2bf      	uxth	r7, r7
 80224aa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80224ae:	ea4c 0c09 	orr.w	ip, ip, r9
 80224b2:	f107 0901 	add.w	r9, r7, #1
 80224b6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80224ba:	097f      	lsrs	r7, r7, #5
 80224bc:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80224c0:	ea4c 0c07 	orr.w	ip, ip, r7
 80224c4:	f820 cb02 	strh.w	ip, [r0], #2
 80224c8:	e7bc      	b.n	8022444 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80224ca:	9b01      	ldr	r3, [sp, #4]
 80224cc:	881b      	ldrh	r3, [r3, #0]
 80224ce:	eba3 0308 	sub.w	r3, r3, r8
 80224d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80224d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80224da:	eba3 0308 	sub.w	r3, r3, r8
 80224de:	441c      	add	r4, r3
 80224e0:	e7ac      	b.n	802243c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 80224e2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80224e6:	4282      	cmp	r2, r0
 80224e8:	d915      	bls.n	8022516 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80224ea:	eb00 060a 	add.w	r6, r0, sl
 80224ee:	4286      	cmp	r6, r0
 80224f0:	d906      	bls.n	8022500 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 80224f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80224f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80224fa:	f820 3b02 	strh.w	r3, [r0], #2
 80224fe:	e7f6      	b.n	80224ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8022500:	882b      	ldrh	r3, [r5, #0]
 8022502:	eba3 0308 	sub.w	r3, r3, r8
 8022506:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802250a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802250e:	eba3 0308 	sub.w	r3, r3, r8
 8022512:	441c      	add	r4, r3
 8022514:	e7e7      	b.n	80224e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8022516:	4b04      	ldr	r3, [pc, #16]	@ (8022528 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022518:	6818      	ldr	r0, [r3, #0]
 802251a:	6803      	ldr	r3, [r0, #0]
 802251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802251e:	4798      	blx	r3
 8022520:	b007      	add	sp, #28
 8022522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022526:	bf00      	nop
 8022528:	2005ba80 	.word	0x2005ba80
 802252c:	2005ba7a 	.word	0x2005ba7a

08022530 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022534:	b091      	sub	sp, #68	@ 0x44
 8022536:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 802253a:	4680      	mov	r8, r0
 802253c:	460f      	mov	r7, r1
 802253e:	4614      	mov	r4, r2
 8022540:	2d00      	cmp	r5, #0
 8022542:	d051      	beq.n	80225e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022544:	6810      	ldr	r0, [r2, #0]
 8022546:	6851      	ldr	r1, [r2, #4]
 8022548:	ae0c      	add	r6, sp, #48	@ 0x30
 802254a:	c603      	stmia	r6!, {r0, r1}
 802254c:	6818      	ldr	r0, [r3, #0]
 802254e:	6859      	ldr	r1, [r3, #4]
 8022550:	ae0e      	add	r6, sp, #56	@ 0x38
 8022552:	c603      	stmia	r6!, {r0, r1}
 8022554:	a80c      	add	r0, sp, #48	@ 0x30
 8022556:	f7f6 feed 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802255a:	4621      	mov	r1, r4
 802255c:	a80e      	add	r0, sp, #56	@ 0x38
 802255e:	f7f6 ff11 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022562:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022566:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802256a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 802256e:	f8df 91dc 	ldr.w	r9, [pc, #476]	@ 802274c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8022572:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022576:	eb08 0401 	add.w	r4, r8, r1
 802257a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 802257e:	f8d9 0000 	ldr.w	r0, [r9]
 8022582:	440a      	add	r2, r1
 8022584:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8022588:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802258c:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8022590:	4413      	add	r3, r2
 8022592:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022596:	6803      	ldr	r3, [r0, #0]
 8022598:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 802259c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802259e:	4798      	blx	r3
 80225a0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80225a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8022750 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80225a8:	f8d9 0000 	ldr.w	r0, [r9]
 80225ac:	d01f      	beq.n	80225ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80225ae:	2200      	movs	r2, #0
 80225b0:	6801      	ldr	r1, [r0, #0]
 80225b2:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80225b6:	220b      	movs	r2, #11
 80225b8:	9207      	str	r2, [sp, #28]
 80225ba:	f8b8 2000 	ldrh.w	r2, [r8]
 80225be:	b2b6      	uxth	r6, r6
 80225c0:	9206      	str	r2, [sp, #24]
 80225c2:	2201      	movs	r2, #1
 80225c4:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80225c8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80225cc:	9601      	str	r6, [sp, #4]
 80225ce:	9203      	str	r2, [sp, #12]
 80225d0:	fa1f f28a 	uxth.w	r2, sl
 80225d4:	9202      	str	r2, [sp, #8]
 80225d6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80225da:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80225de:	9200      	str	r2, [sp, #0]
 80225e0:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 80225e2:	463a      	mov	r2, r7
 80225e4:	4621      	mov	r1, r4
 80225e6:	47a8      	blx	r5
 80225e8:	b011      	add	sp, #68	@ 0x44
 80225ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225ee:	6803      	ldr	r3, [r0, #0]
 80225f0:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80225f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80225f6:	4798      	blx	r3
 80225f8:	f8b8 2000 	ldrh.w	r2, [r8]
 80225fc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022600:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8022604:	2dff      	cmp	r5, #255	@ 0xff
 8022606:	fb02 1303 	mla	r3, r2, r3, r1
 802260a:	fb0a fa02 	mul.w	sl, sl, r2
 802260e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022612:	d062      	beq.n	80226da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8022614:	ea6f 0c05 	mvn.w	ip, r5
 8022618:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802261c:	930a      	str	r3, [sp, #40]	@ 0x28
 802261e:	b2ad      	uxth	r5, r5
 8022620:	fa5f fc8c 	uxtb.w	ip, ip
 8022624:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8022628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802262a:	4298      	cmp	r0, r3
 802262c:	f080 8085 	bcs.w	802273a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022630:	eb00 0b09 	add.w	fp, r0, r9
 8022634:	4558      	cmp	r0, fp
 8022636:	d246      	bcs.n	80226c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8022638:	2303      	movs	r3, #3
 802263a:	2204      	movs	r2, #4
 802263c:	f814 eb01 	ldrb.w	lr, [r4], #1
 8022640:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8022644:	eb07 0a0e 	add.w	sl, r7, lr
 8022648:	f89a 8002 	ldrb.w	r8, [sl, #2]
 802264c:	8803      	ldrh	r3, [r0, #0]
 802264e:	fb18 f805 	smulbb	r8, r8, r5
 8022652:	1219      	asrs	r1, r3, #8
 8022654:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022658:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802265c:	fb01 810c 	mla	r1, r1, ip, r8
 8022660:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022664:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022668:	fb1e fe05 	smulbb	lr, lr, r5
 802266c:	fb18 f805 	smulbb	r8, r8, r5
 8022670:	10da      	asrs	r2, r3, #3
 8022672:	00db      	lsls	r3, r3, #3
 8022674:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022678:	b2db      	uxtb	r3, r3
 802267a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802267e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022682:	fb02 820c 	mla	r2, r2, ip, r8
 8022686:	fb03 e30c 	mla	r3, r3, ip, lr
 802268a:	b289      	uxth	r1, r1
 802268c:	b292      	uxth	r2, r2
 802268e:	b29b      	uxth	r3, r3
 8022690:	f101 0801 	add.w	r8, r1, #1
 8022694:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022698:	f103 0e01 	add.w	lr, r3, #1
 802269c:	f102 0801 	add.w	r8, r2, #1
 80226a0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80226a4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80226a8:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80226ac:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80226b0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80226b4:	ea4e 0101 	orr.w	r1, lr, r1
 80226b8:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80226bc:	ea41 0108 	orr.w	r1, r1, r8
 80226c0:	f820 1b02 	strh.w	r1, [r0], #2
 80226c4:	e7b6      	b.n	8022634 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80226c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80226c8:	881b      	ldrh	r3, [r3, #0]
 80226ca:	1b9b      	subs	r3, r3, r6
 80226cc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80226d0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80226d4:	1b9b      	subs	r3, r3, r6
 80226d6:	441c      	add	r4, r3
 80226d8:	e7a6      	b.n	8022628 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80226da:	2203      	movs	r2, #3
 80226dc:	2504      	movs	r5, #4
 80226de:	491a      	ldr	r1, [pc, #104]	@ (8022748 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80226e0:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80226e4:	4550      	cmp	r0, sl
 80226e6:	d228      	bcs.n	802273a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80226e8:	eb00 0c09 	add.w	ip, r0, r9
 80226ec:	4560      	cmp	r0, ip
 80226ee:	4623      	mov	r3, r4
 80226f0:	d219      	bcs.n	8022726 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 80226f2:	f893 e000 	ldrb.w	lr, [r3]
 80226f6:	3401      	adds	r4, #1
 80226f8:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80226fc:	eb07 0b0e 	add.w	fp, r7, lr
 8022700:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022704:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022708:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802270c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022710:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8022714:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8022718:	ea43 030b 	orr.w	r3, r3, fp
 802271c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8022720:	f820 3b02 	strh.w	r3, [r0], #2
 8022724:	e7e2      	b.n	80226ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8022726:	f8b8 3000 	ldrh.w	r3, [r8]
 802272a:	1b9b      	subs	r3, r3, r6
 802272c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022730:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022734:	1b9b      	subs	r3, r3, r6
 8022736:	441c      	add	r4, r3
 8022738:	e7d4      	b.n	80226e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802273a:	4b04      	ldr	r3, [pc, #16]	@ (802274c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 802273c:	6818      	ldr	r0, [r3, #0]
 802273e:	6803      	ldr	r3, [r0, #0]
 8022740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022742:	4798      	blx	r3
 8022744:	e750      	b.n	80225e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022746:	bf00      	nop
 8022748:	fffff800 	.word	0xfffff800
 802274c:	2005ba80 	.word	0x2005ba80
 8022750:	2005ba7a 	.word	0x2005ba7a

08022754 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022754:	b4f0      	push	{r4, r5, r6, r7}
 8022756:	460c      	mov	r4, r1
 8022758:	4611      	mov	r1, r2
 802275a:	780f      	ldrb	r7, [r1, #0]
 802275c:	461a      	mov	r2, r3
 802275e:	2f01      	cmp	r7, #1
 8022760:	9b04      	ldr	r3, [sp, #16]
 8022762:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8022766:	784e      	ldrb	r6, [r1, #1]
 8022768:	d038      	beq.n	80227dc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 802276a:	d31f      	bcc.n	80227ac <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 802276c:	2f02      	cmp	r7, #2
 802276e:	d14d      	bne.n	802280c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022770:	2e03      	cmp	r6, #3
 8022772:	d84b      	bhi.n	802280c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022774:	e8df f006 	tbb	[pc, r6]
 8022778:	17140702 	.word	0x17140702
 802277c:	9504      	str	r5, [sp, #16]
 802277e:	4620      	mov	r0, r4
 8022780:	bcf0      	pop	{r4, r5, r6, r7}
 8022782:	f7ff be09 	b.w	8022398 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8022786:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8022788:	2800      	cmp	r0, #0
 802278a:	d03f      	beq.n	802280c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802278c:	6806      	ldr	r6, [r0, #0]
 802278e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022792:	68b5      	ldr	r5, [r6, #8]
 8022794:	4613      	mov	r3, r2
 8022796:	46ac      	mov	ip, r5
 8022798:	460a      	mov	r2, r1
 802279a:	4621      	mov	r1, r4
 802279c:	bcf0      	pop	{r4, r5, r6, r7}
 802279e:	4760      	bx	ip
 80227a0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80227a4:	e7f0      	b.n	8022788 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80227a6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80227aa:	e7ed      	b.n	8022788 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80227ac:	2e03      	cmp	r6, #3
 80227ae:	d82d      	bhi.n	802280c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80227b0:	e8df f006 	tbb	[pc, r6]
 80227b4:	110e0702 	.word	0x110e0702
 80227b8:	9504      	str	r5, [sp, #16]
 80227ba:	4620      	mov	r0, r4
 80227bc:	bcf0      	pop	{r4, r5, r6, r7}
 80227be:	f7ff bd05 	b.w	80221cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80227c2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80227c4:	b310      	cbz	r0, 802280c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80227c6:	6806      	ldr	r6, [r0, #0]
 80227c8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80227cc:	68f5      	ldr	r5, [r6, #12]
 80227ce:	e7e1      	b.n	8022794 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80227d0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80227d4:	e7f6      	b.n	80227c4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80227d6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80227da:	e7f3      	b.n	80227c4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80227dc:	2e03      	cmp	r6, #3
 80227de:	d815      	bhi.n	802280c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80227e0:	e8df f006 	tbb	[pc, r6]
 80227e4:	110e0702 	.word	0x110e0702
 80227e8:	9504      	str	r5, [sp, #16]
 80227ea:	4620      	mov	r0, r4
 80227ec:	bcf0      	pop	{r4, r5, r6, r7}
 80227ee:	f7ff be9f 	b.w	8022530 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80227f2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80227f4:	b150      	cbz	r0, 802280c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80227f6:	6806      	ldr	r6, [r0, #0]
 80227f8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80227fc:	6935      	ldr	r5, [r6, #16]
 80227fe:	e7c9      	b.n	8022794 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022800:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8022804:	e7f6      	b.n	80227f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8022806:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 802280a:	e7f3      	b.n	80227f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 802280c:	bcf0      	pop	{r4, r5, r6, r7}
 802280e:	4770      	bx	lr

08022810 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022814:	4617      	mov	r7, r2
 8022816:	4604      	mov	r4, r0
 8022818:	460e      	mov	r6, r1
 802281a:	b087      	sub	sp, #28
 802281c:	6810      	ldr	r0, [r2, #0]
 802281e:	6851      	ldr	r1, [r2, #4]
 8022820:	ad02      	add	r5, sp, #8
 8022822:	c503      	stmia	r5!, {r0, r1}
 8022824:	6818      	ldr	r0, [r3, #0]
 8022826:	6859      	ldr	r1, [r3, #4]
 8022828:	ad04      	add	r5, sp, #16
 802282a:	c503      	stmia	r5!, {r0, r1}
 802282c:	a802      	add	r0, sp, #8
 802282e:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8022832:	f7f6 fd7f 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022836:	4639      	mov	r1, r7
 8022838:	a804      	add	r0, sp, #16
 802283a:	f7f6 fda3 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802283e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022842:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022846:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802284a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802284e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022852:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022856:	440e      	add	r6, r1
 8022858:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802285c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8022860:	440a      	add	r2, r1
 8022862:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022866:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802286a:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 8022a58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 802286e:	4413      	add	r3, r2
 8022870:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022874:	4b77      	ldr	r3, [pc, #476]	@ (8022a54 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022876:	6818      	ldr	r0, [r3, #0]
 8022878:	6803      	ldr	r3, [r0, #0]
 802287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802287c:	4798      	blx	r3
 802287e:	f8b9 b000 	ldrh.w	fp, [r9]
 8022882:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022886:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802288a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802288e:	fb0b 2303 	mla	r3, fp, r3, r2
 8022892:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022896:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802289a:	fb05 f50b 	mul.w	r5, r5, fp
 802289e:	9300      	str	r3, [sp, #0]
 80228a0:	d069      	beq.n	8022976 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80228a2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80228a6:	4558      	cmp	r0, fp
 80228a8:	f080 80cc 	bcs.w	8022a44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80228ac:	4631      	mov	r1, r6
 80228ae:	9b00      	ldr	r3, [sp, #0]
 80228b0:	18c3      	adds	r3, r0, r3
 80228b2:	9301      	str	r3, [sp, #4]
 80228b4:	9b01      	ldr	r3, [sp, #4]
 80228b6:	4298      	cmp	r0, r3
 80228b8:	d24f      	bcs.n	802295a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 80228ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80228be:	2a00      	cmp	r2, #0
 80228c0:	d048      	beq.n	8022954 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80228c2:	fb0a f202 	mul.w	r2, sl, r2
 80228c6:	1c53      	adds	r3, r2, #1
 80228c8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80228cc:	121b      	asrs	r3, r3, #8
 80228ce:	d041      	beq.n	8022954 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80228d0:	b29e      	uxth	r6, r3
 80228d2:	43db      	mvns	r3, r3
 80228d4:	8802      	ldrh	r2, [r0, #0]
 80228d6:	b2db      	uxtb	r3, r3
 80228d8:	1215      	asrs	r5, r2, #8
 80228da:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80228de:	f8b4 c000 	ldrh.w	ip, [r4]
 80228e2:	fb15 f503 	smulbb	r5, r5, r3
 80228e6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80228ea:	00d2      	lsls	r2, r2, #3
 80228ec:	b2d2      	uxtb	r2, r2
 80228ee:	ea4f 272c 	mov.w	r7, ip, asr #8
 80228f2:	fb12 f203 	smulbb	r2, r2, r3
 80228f6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80228fa:	fb07 5706 	mla	r7, r7, r6, r5
 80228fe:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8022902:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022906:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802290a:	fb1e fe03 	smulbb	lr, lr, r3
 802290e:	fa5f fc8c 	uxtb.w	ip, ip
 8022912:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022916:	b2bf      	uxth	r7, r7
 8022918:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802291c:	fb05 e506 	mla	r5, r5, r6, lr
 8022920:	f107 0e01 	add.w	lr, r7, #1
 8022924:	fa1f fc8c 	uxth.w	ip, ip
 8022928:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 802292c:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8022930:	f10c 0701 	add.w	r7, ip, #1
 8022934:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022938:	b2ad      	uxth	r5, r5
 802293a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802293e:	ea47 070e 	orr.w	r7, r7, lr
 8022942:	f105 0e01 	add.w	lr, r5, #1
 8022946:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802294a:	096d      	lsrs	r5, r5, #5
 802294c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022950:	432f      	orrs	r7, r5
 8022952:	8007      	strh	r7, [r0, #0]
 8022954:	3002      	adds	r0, #2
 8022956:	3402      	adds	r4, #2
 8022958:	e7ac      	b.n	80228b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 802295a:	f8b9 3000 	ldrh.w	r3, [r9]
 802295e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022962:	eba3 0308 	sub.w	r3, r3, r8
 8022966:	eba6 0608 	sub.w	r6, r6, r8
 802296a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802296e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022972:	440e      	add	r6, r1
 8022974:	e797      	b.n	80228a6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8022976:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802297a:	42a8      	cmp	r0, r5
 802297c:	d262      	bcs.n	8022a44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 802297e:	4631      	mov	r1, r6
 8022980:	9b00      	ldr	r3, [sp, #0]
 8022982:	eb00 0b03 	add.w	fp, r0, r3
 8022986:	4558      	cmp	r0, fp
 8022988:	d24e      	bcs.n	8022a28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 802298a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802298e:	b12b      	cbz	r3, 802299c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022990:	2bff      	cmp	r3, #255	@ 0xff
 8022992:	f8b4 e000 	ldrh.w	lr, [r4]
 8022996:	d104      	bne.n	80229a2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8022998:	f8a0 e000 	strh.w	lr, [r0]
 802299c:	3002      	adds	r0, #2
 802299e:	3402      	adds	r4, #2
 80229a0:	e7f1      	b.n	8022986 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80229a2:	b29f      	uxth	r7, r3
 80229a4:	43db      	mvns	r3, r3
 80229a6:	8802      	ldrh	r2, [r0, #0]
 80229a8:	b2db      	uxtb	r3, r3
 80229aa:	1216      	asrs	r6, r2, #8
 80229ac:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80229b0:	fb16 f603 	smulbb	r6, r6, r3
 80229b4:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80229b8:	00d2      	lsls	r2, r2, #3
 80229ba:	b2d2      	uxtb	r2, r2
 80229bc:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80229c0:	fb1a fa03 	smulbb	sl, sl, r3
 80229c4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80229c8:	fb12 f303 	smulbb	r3, r2, r3
 80229cc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80229d0:	fb0c 6c07 	mla	ip, ip, r7, r6
 80229d4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80229d8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80229dc:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80229e0:	fa5f fe8e 	uxtb.w	lr, lr
 80229e4:	fb06 a607 	mla	r6, r6, r7, sl
 80229e8:	fb0e 3307 	mla	r3, lr, r7, r3
 80229ec:	fa1f fc8c 	uxth.w	ip, ip
 80229f0:	f10c 0201 	add.w	r2, ip, #1
 80229f4:	b2b6      	uxth	r6, r6
 80229f6:	b29b      	uxth	r3, r3
 80229f8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80229fc:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8022a00:	f106 0a01 	add.w	sl, r6, #1
 8022a04:	f103 0c01 	add.w	ip, r3, #1
 8022a08:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022a0c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022a10:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022a14:	0976      	lsrs	r6, r6, #5
 8022a16:	ea4c 0c02 	orr.w	ip, ip, r2
 8022a1a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8022a1e:	ea4c 0c06 	orr.w	ip, ip, r6
 8022a22:	f8a0 c000 	strh.w	ip, [r0]
 8022a26:	e7b9      	b.n	802299c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022a28:	f8b9 3000 	ldrh.w	r3, [r9]
 8022a2c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022a30:	eba3 0308 	sub.w	r3, r3, r8
 8022a34:	eba6 0608 	sub.w	r6, r6, r8
 8022a38:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022a3c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a40:	440e      	add	r6, r1
 8022a42:	e79a      	b.n	802297a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022a44:	4b03      	ldr	r3, [pc, #12]	@ (8022a54 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022a46:	6818      	ldr	r0, [r3, #0]
 8022a48:	6803      	ldr	r3, [r0, #0]
 8022a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a4c:	4798      	blx	r3
 8022a4e:	b007      	add	sp, #28
 8022a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a54:	2005ba80 	.word	0x2005ba80
 8022a58:	2005ba7a 	.word	0x2005ba7a

08022a5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a60:	b089      	sub	sp, #36	@ 0x24
 8022a62:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8022a66:	4607      	mov	r7, r0
 8022a68:	4688      	mov	r8, r1
 8022a6a:	4692      	mov	sl, r2
 8022a6c:	4699      	mov	r9, r3
 8022a6e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022a70:	2e00      	cmp	r6, #0
 8022a72:	d048      	beq.n	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022a74:	4608      	mov	r0, r1
 8022a76:	f7fa f823 	bl	801cac0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022a7a:	4605      	mov	r5, r0
 8022a7c:	4640      	mov	r0, r8
 8022a7e:	f7fa f853 	bl	801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022a82:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022a86:	4640      	mov	r0, r8
 8022a88:	f8ad a008 	strh.w	sl, [sp, #8]
 8022a8c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022a90:	f8ad 900a 	strh.w	r9, [sp, #10]
 8022a94:	f7fa f906 	bl	801cca4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022a98:	4605      	mov	r5, r0
 8022a9a:	4640      	mov	r0, r8
 8022a9c:	f7fa f932 	bl	801cd04 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022aa0:	4682      	mov	sl, r0
 8022aa2:	4640      	mov	r0, r8
 8022aa4:	f7fa f982 	bl	801cdac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022aa8:	2810      	cmp	r0, #16
 8022aaa:	d82c      	bhi.n	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022aac:	e8df f010 	tbh	[pc, r0, lsl #1]
 8022ab0:	00ba00ca 	.word	0x00ba00ca
 8022ab4:	002b0011 	.word	0x002b0011
 8022ab8:	002b002b 	.word	0x002b002b
 8022abc:	002b002b 	.word	0x002b002b
 8022ac0:	002b002b 	.word	0x002b002b
 8022ac4:	00c1002b 	.word	0x00c1002b
 8022ac8:	002b002b 	.word	0x002b002b
 8022acc:	002b0180 	.word	0x002b0180
 8022ad0:	0173      	.short	0x0173
 8022ad2:	4bbc      	ldr	r3, [pc, #752]	@ (8022dc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8022ad4:	6818      	ldr	r0, [r3, #0]
 8022ad6:	6803      	ldr	r3, [r0, #0]
 8022ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022ada:	4798      	blx	r3
 8022adc:	2eff      	cmp	r6, #255	@ 0xff
 8022ade:	d101      	bne.n	8022ae4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8022ae0:	0683      	lsls	r3, r0, #26
 8022ae2:	d506      	bpl.n	8022af2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8022ae4:	4633      	mov	r3, r6
 8022ae6:	4622      	mov	r2, r4
 8022ae8:	a902      	add	r1, sp, #8
 8022aea:	4628      	mov	r0, r5
 8022aec:	f7ff f8fc 	bl	8021ce8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022af0:	e009      	b.n	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022af2:	4640      	mov	r0, r8
 8022af4:	f7fa f89e 	bl	801cc34 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022af8:	b940      	cbnz	r0, 8022b0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8022afa:	4623      	mov	r3, r4
 8022afc:	aa02      	add	r2, sp, #8
 8022afe:	4629      	mov	r1, r5
 8022b00:	4638      	mov	r0, r7
 8022b02:	f7ff f9d7 	bl	8021eb4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022b06:	b009      	add	sp, #36	@ 0x24
 8022b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b0c:	f10d 0918 	add.w	r9, sp, #24
 8022b10:	4641      	mov	r1, r8
 8022b12:	4648      	mov	r0, r9
 8022b14:	f10d 0810 	add.w	r8, sp, #16
 8022b18:	f7fa f83a 	bl	801cb90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022b1c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8022b20:	e888 0003 	stmia.w	r8, {r0, r1}
 8022b24:	4640      	mov	r0, r8
 8022b26:	4621      	mov	r1, r4
 8022b28:	f7f1 fa6c 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 8022b2c:	4640      	mov	r0, r8
 8022b2e:	f7f1 faac 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 8022b32:	2800      	cmp	r0, #0
 8022b34:	d1d6      	bne.n	8022ae4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8022b36:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022b3a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022b3e:	4293      	cmp	r3, r2
 8022b40:	dd12      	ble.n	8022b68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8022b42:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022b46:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022b4a:	1a9b      	subs	r3, r3, r2
 8022b4c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022b50:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022b54:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022b58:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022b5c:	464a      	mov	r2, r9
 8022b5e:	4633      	mov	r3, r6
 8022b60:	a902      	add	r1, sp, #8
 8022b62:	4628      	mov	r0, r5
 8022b64:	f7ff f8c0 	bl	8021ce8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022b68:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022b6c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022b70:	4293      	cmp	r3, r2
 8022b72:	dd12      	ble.n	8022b9a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8022b74:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022b78:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022b7c:	1a9b      	subs	r3, r3, r2
 8022b7e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022b82:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022b86:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022b8a:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022b8e:	23ff      	movs	r3, #255	@ 0xff
 8022b90:	464a      	mov	r2, r9
 8022b92:	a902      	add	r1, sp, #8
 8022b94:	4628      	mov	r0, r5
 8022b96:	f7ff f8a7 	bl	8021ce8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022b9a:	4643      	mov	r3, r8
 8022b9c:	aa02      	add	r2, sp, #8
 8022b9e:	4629      	mov	r1, r5
 8022ba0:	4638      	mov	r0, r7
 8022ba2:	f7ff f987 	bl	8021eb4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022ba6:	88a2      	ldrh	r2, [r4, #4]
 8022ba8:	8823      	ldrh	r3, [r4, #0]
 8022baa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022bae:	4413      	add	r3, r2
 8022bb0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022bb4:	b29b      	uxth	r3, r3
 8022bb6:	440a      	add	r2, r1
 8022bb8:	b292      	uxth	r2, r2
 8022bba:	b211      	sxth	r1, r2
 8022bbc:	b218      	sxth	r0, r3
 8022bbe:	4288      	cmp	r0, r1
 8022bc0:	dd12      	ble.n	8022be8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8022bc2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022bc6:	1a9b      	subs	r3, r3, r2
 8022bc8:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8022bcc:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022bd0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022bd4:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022bd8:	23ff      	movs	r3, #255	@ 0xff
 8022bda:	464a      	mov	r2, r9
 8022bdc:	a902      	add	r1, sp, #8
 8022bde:	4628      	mov	r0, r5
 8022be0:	f8ad 601a 	strh.w	r6, [sp, #26]
 8022be4:	f7ff f880 	bl	8021ce8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022be8:	88e2      	ldrh	r2, [r4, #6]
 8022bea:	8863      	ldrh	r3, [r4, #2]
 8022bec:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022bf0:	4413      	add	r3, r2
 8022bf2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022bf6:	b29b      	uxth	r3, r3
 8022bf8:	440a      	add	r2, r1
 8022bfa:	b292      	uxth	r2, r2
 8022bfc:	b211      	sxth	r1, r2
 8022bfe:	b218      	sxth	r0, r3
 8022c00:	4288      	cmp	r0, r1
 8022c02:	dd80      	ble.n	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022c04:	f9b4 6000 	ldrsh.w	r6, [r4]
 8022c08:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022c0c:	1a9b      	subs	r3, r3, r2
 8022c0e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022c12:	f8ad 6018 	strh.w	r6, [sp, #24]
 8022c16:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022c1a:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022c1e:	23ff      	movs	r3, #255	@ 0xff
 8022c20:	464a      	mov	r2, r9
 8022c22:	e761      	b.n	8022ae8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8022c24:	4633      	mov	r3, r6
 8022c26:	4622      	mov	r2, r4
 8022c28:	a902      	add	r1, sp, #8
 8022c2a:	4628      	mov	r0, r5
 8022c2c:	f7ff f9b2 	bl	8021f94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022c30:	e769      	b.n	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022c32:	e9cd 4600 	strd	r4, r6, [sp]
 8022c36:	ab02      	add	r3, sp, #8
 8022c38:	4652      	mov	r2, sl
 8022c3a:	4629      	mov	r1, r5
 8022c3c:	4638      	mov	r0, r7
 8022c3e:	f7ff fd89 	bl	8022754 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022c42:	e760      	b.n	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022c44:	4640      	mov	r0, r8
 8022c46:	f7f9 fff5 	bl	801cc34 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022c4a:	b948      	cbnz	r0, 8022c60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8022c4c:	683b      	ldr	r3, [r7, #0]
 8022c4e:	e9cd 6000 	strd	r6, r0, [sp]
 8022c52:	aa02      	add	r2, sp, #8
 8022c54:	68de      	ldr	r6, [r3, #12]
 8022c56:	4629      	mov	r1, r5
 8022c58:	4623      	mov	r3, r4
 8022c5a:	4638      	mov	r0, r7
 8022c5c:	47b0      	blx	r6
 8022c5e:	e752      	b.n	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022c60:	f10d 0918 	add.w	r9, sp, #24
 8022c64:	4641      	mov	r1, r8
 8022c66:	4648      	mov	r0, r9
 8022c68:	f10d 0810 	add.w	r8, sp, #16
 8022c6c:	f7f9 ff90 	bl	801cb90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022c70:	e899 0003 	ldmia.w	r9, {r0, r1}
 8022c74:	e888 0003 	stmia.w	r8, {r0, r1}
 8022c78:	4640      	mov	r0, r8
 8022c7a:	4621      	mov	r1, r4
 8022c7c:	f7f1 f9c2 	bl	8014004 <_ZN8touchgfx4RectaNERKS0_>
 8022c80:	4640      	mov	r0, r8
 8022c82:	f7f1 fa02 	bl	801408a <_ZNK8touchgfx4Rect7isEmptyEv>
 8022c86:	b138      	cbz	r0, 8022c98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8022c88:	4623      	mov	r3, r4
 8022c8a:	9600      	str	r6, [sp, #0]
 8022c8c:	aa02      	add	r2, sp, #8
 8022c8e:	4651      	mov	r1, sl
 8022c90:	4628      	mov	r0, r5
 8022c92:	f7ff fdbd 	bl	8022810 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022c96:	e736      	b.n	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022c98:	683b      	ldr	r3, [r7, #0]
 8022c9a:	e9cd 6000 	strd	r6, r0, [sp]
 8022c9e:	aa02      	add	r2, sp, #8
 8022ca0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8022ca4:	4629      	mov	r1, r5
 8022ca6:	4643      	mov	r3, r8
 8022ca8:	4638      	mov	r0, r7
 8022caa:	47d8      	blx	fp
 8022cac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022cb0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022cb4:	4293      	cmp	r3, r2
 8022cb6:	dd13      	ble.n	8022ce0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8022cb8:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022cbc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022cc0:	1a9b      	subs	r3, r3, r2
 8022cc2:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022cc6:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022cca:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022cce:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022cd2:	9600      	str	r6, [sp, #0]
 8022cd4:	464b      	mov	r3, r9
 8022cd6:	aa02      	add	r2, sp, #8
 8022cd8:	4651      	mov	r1, sl
 8022cda:	4628      	mov	r0, r5
 8022cdc:	f7ff fd98 	bl	8022810 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022ce0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022ce4:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022ce8:	4293      	cmp	r3, r2
 8022cea:	dd13      	ble.n	8022d14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8022cec:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022cf0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022cf4:	1a9b      	subs	r3, r3, r2
 8022cf6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022cfa:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022cfe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022d02:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022d06:	9600      	str	r6, [sp, #0]
 8022d08:	464b      	mov	r3, r9
 8022d0a:	aa02      	add	r2, sp, #8
 8022d0c:	4651      	mov	r1, sl
 8022d0e:	4628      	mov	r0, r5
 8022d10:	f7ff fd7e 	bl	8022810 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022d14:	88a2      	ldrh	r2, [r4, #4]
 8022d16:	8823      	ldrh	r3, [r4, #0]
 8022d18:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022d1c:	4413      	add	r3, r2
 8022d1e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022d22:	b29b      	uxth	r3, r3
 8022d24:	440a      	add	r2, r1
 8022d26:	b292      	uxth	r2, r2
 8022d28:	b211      	sxth	r1, r2
 8022d2a:	b218      	sxth	r0, r3
 8022d2c:	4288      	cmp	r0, r1
 8022d2e:	dd13      	ble.n	8022d58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8022d30:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022d34:	1a9b      	subs	r3, r3, r2
 8022d36:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8022d3a:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022d3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022d42:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022d46:	9600      	str	r6, [sp, #0]
 8022d48:	464b      	mov	r3, r9
 8022d4a:	aa02      	add	r2, sp, #8
 8022d4c:	4651      	mov	r1, sl
 8022d4e:	4628      	mov	r0, r5
 8022d50:	f8ad 701a 	strh.w	r7, [sp, #26]
 8022d54:	f7ff fd5c 	bl	8022810 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022d58:	88e2      	ldrh	r2, [r4, #6]
 8022d5a:	8863      	ldrh	r3, [r4, #2]
 8022d5c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022d60:	4413      	add	r3, r2
 8022d62:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022d66:	b29b      	uxth	r3, r3
 8022d68:	440a      	add	r2, r1
 8022d6a:	b292      	uxth	r2, r2
 8022d6c:	b211      	sxth	r1, r2
 8022d6e:	b218      	sxth	r0, r3
 8022d70:	4288      	cmp	r0, r1
 8022d72:	f77f aec8 	ble.w	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022d76:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022d7a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022d7e:	1a9b      	subs	r3, r3, r2
 8022d80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022d84:	f8ad 7018 	strh.w	r7, [sp, #24]
 8022d88:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022d8c:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022d90:	9600      	str	r6, [sp, #0]
 8022d92:	464b      	mov	r3, r9
 8022d94:	e77a      	b.n	8022c8c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8022d96:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8022d9a:	2800      	cmp	r0, #0
 8022d9c:	f43f aeb3 	beq.w	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022da0:	6803      	ldr	r3, [r0, #0]
 8022da2:	9600      	str	r6, [sp, #0]
 8022da4:	68de      	ldr	r6, [r3, #12]
 8022da6:	4623      	mov	r3, r4
 8022da8:	aa02      	add	r2, sp, #8
 8022daa:	4629      	mov	r1, r5
 8022dac:	47b0      	blx	r6
 8022dae:	e6aa      	b.n	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022db0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8022db4:	2800      	cmp	r0, #0
 8022db6:	f43f aea6 	beq.w	8022b06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022dba:	6803      	ldr	r3, [r0, #0]
 8022dbc:	9600      	str	r6, [sp, #0]
 8022dbe:	689e      	ldr	r6, [r3, #8]
 8022dc0:	e7f1      	b.n	8022da6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8022dc2:	bf00      	nop
 8022dc4:	2005ba80 	.word	0x2005ba80

08022dc8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8022dc8:	b180      	cbz	r0, 8022dec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8022dca:	2903      	cmp	r1, #3
 8022dcc:	d81c      	bhi.n	8022e08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022dce:	e8df f001 	tbb	[pc, r1]
 8022dd2:	1d02      	.short	0x1d02
 8022dd4:	1f08      	.short	0x1f08
 8022dd6:	4b10      	ldr	r3, [pc, #64]	@ (8022e18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022dd8:	8818      	ldrh	r0, [r3, #0]
 8022dda:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022dde:	4240      	negs	r0, r0
 8022de0:	4770      	bx	lr
 8022de2:	4b0d      	ldr	r3, [pc, #52]	@ (8022e18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022de4:	8818      	ldrh	r0, [r3, #0]
 8022de6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022dea:	4770      	bx	lr
 8022dec:	2903      	cmp	r1, #3
 8022dee:	d80b      	bhi.n	8022e08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022df0:	a301      	add	r3, pc, #4	@ (adr r3, 8022df8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8022df2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022df6:	bf00      	nop
 8022df8:	08022e0d 	.word	0x08022e0d
 8022dfc:	08022de3 	.word	0x08022de3
 8022e00:	08022e11 	.word	0x08022e11
 8022e04:	08022dd7 	.word	0x08022dd7
 8022e08:	2000      	movs	r0, #0
 8022e0a:	4770      	bx	lr
 8022e0c:	2001      	movs	r0, #1
 8022e0e:	4770      	bx	lr
 8022e10:	f04f 30ff 	mov.w	r0, #4294967295
 8022e14:	4770      	bx	lr
 8022e16:	bf00      	nop
 8022e18:	2005ba7a 	.word	0x2005ba7a

08022e1c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8022e1c:	b180      	cbz	r0, 8022e40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8022e1e:	2903      	cmp	r1, #3
 8022e20:	d81c      	bhi.n	8022e5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8022e22:	e8df f001 	tbb	[pc, r1]
 8022e26:	021d      	.short	0x021d
 8022e28:	071f      	.short	0x071f
 8022e2a:	4b10      	ldr	r3, [pc, #64]	@ (8022e6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022e2c:	8818      	ldrh	r0, [r3, #0]
 8022e2e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e32:	4770      	bx	lr
 8022e34:	4b0d      	ldr	r3, [pc, #52]	@ (8022e6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022e36:	8818      	ldrh	r0, [r3, #0]
 8022e38:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e3c:	4240      	negs	r0, r0
 8022e3e:	4770      	bx	lr
 8022e40:	2903      	cmp	r1, #3
 8022e42:	d80b      	bhi.n	8022e5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8022e44:	a301      	add	r3, pc, #4	@ (adr r3, 8022e4c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8022e46:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022e4a:	bf00      	nop
 8022e4c:	08022e2b 	.word	0x08022e2b
 8022e50:	08022e65 	.word	0x08022e65
 8022e54:	08022e35 	.word	0x08022e35
 8022e58:	08022e61 	.word	0x08022e61
 8022e5c:	2000      	movs	r0, #0
 8022e5e:	4770      	bx	lr
 8022e60:	2001      	movs	r0, #1
 8022e62:	4770      	bx	lr
 8022e64:	f04f 30ff 	mov.w	r0, #4294967295
 8022e68:	4770      	bx	lr
 8022e6a:	bf00      	nop
 8022e6c:	2005ba7a 	.word	0x2005ba7a

08022e70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8022e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e74:	b099      	sub	sp, #100	@ 0x64
 8022e76:	910d      	str	r1, [sp, #52]	@ 0x34
 8022e78:	a914      	add	r1, sp, #80	@ 0x50
 8022e7a:	e881 000c 	stmia.w	r1, {r2, r3}
 8022e7e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8022e82:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8022e86:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8022e8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022e8c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8022e90:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8022e94:	9310      	str	r3, [sp, #64]	@ 0x40
 8022e96:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8022e9a:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8022e9e:	9308      	str	r3, [sp, #32]
 8022ea0:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8022ea4:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8022ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8022ea8:	7b4b      	ldrb	r3, [r1, #13]
 8022eaa:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 8022eae:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8022eb2:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 8022eb6:	f891 8006 	ldrb.w	r8, [r1, #6]
 8022eba:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8022ebe:	ea58 0800 	orrs.w	r8, r8, r0
 8022ec2:	f000 81cc 	beq.w	802325e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022ec6:	011b      	lsls	r3, r3, #4
 8022ec8:	79c8      	ldrb	r0, [r1, #7]
 8022eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022ece:	4303      	orrs	r3, r0
 8022ed0:	930c      	str	r3, [sp, #48]	@ 0x30
 8022ed2:	f000 81c4 	beq.w	802325e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022ed6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022eda:	b29b      	uxth	r3, r3
 8022edc:	2d00      	cmp	r5, #0
 8022ede:	f000 812a 	beq.w	8023136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c6>
 8022ee2:	1aed      	subs	r5, r5, r3
 8022ee4:	b2ad      	uxth	r5, r5
 8022ee6:	0429      	lsls	r1, r5, #16
 8022ee8:	d502      	bpl.n	8022ef0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8022eea:	1b64      	subs	r4, r4, r5
 8022eec:	2500      	movs	r5, #0
 8022eee:	b224      	sxth	r4, r4
 8022ef0:	f9b2 0000 	ldrsh.w	r0, [r2]
 8022ef4:	8891      	ldrh	r1, [r2, #4]
 8022ef6:	4284      	cmp	r4, r0
 8022ef8:	b283      	uxth	r3, r0
 8022efa:	bfbf      	itttt	lt
 8022efc:	18ed      	addlt	r5, r5, r3
 8022efe:	1b2c      	sublt	r4, r5, r4
 8022f00:	b2a5      	uxthlt	r5, r4
 8022f02:	4604      	movlt	r4, r0
 8022f04:	440b      	add	r3, r1
 8022f06:	b21b      	sxth	r3, r3
 8022f08:	930a      	str	r3, [sp, #40]	@ 0x28
 8022f0a:	88d3      	ldrh	r3, [r2, #6]
 8022f0c:	8852      	ldrh	r2, [r2, #2]
 8022f0e:	4621      	mov	r1, r4
 8022f10:	4413      	add	r3, r2
 8022f12:	b21b      	sxth	r3, r3
 8022f14:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022f16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022f18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022f1a:	930e      	str	r3, [sp, #56]	@ 0x38
 8022f1c:	4bb2      	ldr	r3, [pc, #712]	@ (80231e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8022f1e:	a814      	add	r0, sp, #80	@ 0x50
 8022f20:	f893 b000 	ldrb.w	fp, [r3]
 8022f24:	4653      	mov	r3, sl
 8022f26:	f7f6 f879 	bl	801901c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022f2a:	4621      	mov	r1, r4
 8022f2c:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8022f30:	4653      	mov	r3, sl
 8022f32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022f34:	a814      	add	r0, sp, #80	@ 0x50
 8022f36:	f7f6 f88e 	bl	8019056 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022f3a:	a918      	add	r1, sp, #96	@ 0x60
 8022f3c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022f40:	a817      	add	r0, sp, #92	@ 0x5c
 8022f42:	f7f6 f9b5 	bl	80192b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022f46:	f1ba 0f00 	cmp.w	sl, #0
 8022f4a:	f040 80f7 	bne.w	802313c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8022f4e:	f1bb 0f01 	cmp.w	fp, #1
 8022f52:	f040 80fb 	bne.w	802314c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8022f56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022f58:	2b00      	cmp	r3, #0
 8022f5a:	f040 81a8 	bne.w	80232ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x43e>
 8022f5e:	fa1f f288 	uxth.w	r2, r8
 8022f62:	b905      	cbnz	r5, 8022f66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf6>
 8022f64:	b15e      	cbz	r6, 8022f7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022f66:	4631      	mov	r1, r6
 8022f68:	fb06 5302 	mla	r3, r6, r2, r5
 8022f6c:	9808      	ldr	r0, [sp, #32]
 8022f6e:	4343      	muls	r3, r0
 8022f70:	f003 0607 	and.w	r6, r3, #7
 8022f74:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 8022f78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022f7a:	1a5b      	subs	r3, r3, r1
 8022f7c:	930e      	str	r3, [sp, #56]	@ 0x38
 8022f7e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8022f82:	424b      	negs	r3, r1
 8022f84:	414b      	adcs	r3, r1
 8022f86:	4618      	mov	r0, r3
 8022f88:	4651      	mov	r1, sl
 8022f8a:	930c      	str	r3, [sp, #48]	@ 0x30
 8022f8c:	f7ff ff1c 	bl	8022dc8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022f90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022f92:	4683      	mov	fp, r0
 8022f94:	4618      	mov	r0, r3
 8022f96:	f7ff ff41 	bl	8022e1c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022f9a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022f9c:	4603      	mov	r3, r0
 8022f9e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8022fa0:	eba1 0a00 	sub.w	sl, r1, r0
 8022fa4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022fa6:	458a      	cmp	sl, r1
 8022fa8:	bfa8      	it	ge
 8022faa:	468a      	movge	sl, r1
 8022fac:	f1ba 0f00 	cmp.w	sl, #0
 8022fb0:	f340 8155 	ble.w	802325e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022fb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022fb6:	1b64      	subs	r4, r4, r5
 8022fb8:	1b0c      	subs	r4, r1, r4
 8022fba:	4544      	cmp	r4, r8
 8022fbc:	bfd4      	ite	le
 8022fbe:	ebc5 0504 	rsble	r5, r5, r4
 8022fc2:	ebc5 0508 	rsbgt	r5, r5, r8
 8022fc6:	2d00      	cmp	r5, #0
 8022fc8:	f340 8149 	ble.w	802325e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022fcc:	9908      	ldr	r1, [sp, #32]
 8022fce:	1b52      	subs	r2, r2, r5
 8022fd0:	434a      	muls	r2, r1
 8022fd2:	920e      	str	r2, [sp, #56]	@ 0x38
 8022fd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022fd6:	2a00      	cmp	r2, #0
 8022fd8:	f040 8175 	bne.w	80232c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x456>
 8022fdc:	4a83      	ldr	r2, [pc, #524]	@ (80231ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8022fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8022fe0:	6810      	ldr	r0, [r2, #0]
 8022fe2:	6802      	ldr	r2, [r0, #0]
 8022fe4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8022fe6:	4790      	blx	r2
 8022fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022fea:	2201      	movs	r2, #1
 8022fec:	9908      	ldr	r1, [sp, #32]
 8022fee:	408a      	lsls	r2, r1
 8022ff0:	3a01      	subs	r2, #1
 8022ff2:	497f      	ldr	r1, [pc, #508]	@ (80231f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8022ff4:	b2d2      	uxtb	r2, r2
 8022ff6:	880c      	ldrh	r4, [r1, #0]
 8022ff8:	920c      	str	r2, [sp, #48]	@ 0x30
 8022ffa:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	@ 0x5c
 8022ffe:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 8023002:	fb04 1202 	mla	r2, r4, r2, r1
 8023006:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802300a:	ea4f 2419 	mov.w	r4, r9, lsr #8
 802300e:	920a      	str	r2, [sp, #40]	@ 0x28
 8023010:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8023014:	9212      	str	r2, [sp, #72]	@ 0x48
 8023016:	b2e2      	uxtb	r2, r4
 8023018:	9211      	str	r2, [sp, #68]	@ 0x44
 802301a:	fa5f f289 	uxtb.w	r2, r9
 802301e:	9210      	str	r2, [sp, #64]	@ 0x40
 8023020:	4a74      	ldr	r2, [pc, #464]	@ (80231f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8023022:	ea4f 1159 	mov.w	r1, r9, lsr #5
 8023026:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802302a:	4022      	ands	r2, r4
 802302c:	430a      	orrs	r2, r1
 802302e:	ea4f 014b 	mov.w	r1, fp, lsl #1
 8023032:	fb05 3b1b 	mls	fp, r5, fp, r3
 8023036:	460b      	mov	r3, r1
 8023038:	f3c9 09c4 	ubfx	r9, r9, #3, #5
 802303c:	ea42 0209 	orr.w	r2, r2, r9
 8023040:	436b      	muls	r3, r5
 8023042:	b292      	uxth	r2, r2
 8023044:	920f      	str	r2, [sp, #60]	@ 0x3c
 8023046:	783a      	ldrb	r2, [r7, #0]
 8023048:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 802304c:	4132      	asrs	r2, r6
 802304e:	b2d2      	uxtb	r2, r2
 8023050:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023052:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023054:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8023058:	f0c0 8149 	bcc.w	80232ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x47e>
 802305c:	46a9      	mov	r9, r5
 802305e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8023062:	f119 39ff 	adds.w	r9, r9, #4294967295
 8023066:	f0c0 8132 	bcc.w	80232ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45e>
 802306a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802306c:	4013      	ands	r3, r2
 802306e:	d054      	beq.n	802311a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8023070:	20ff      	movs	r0, #255	@ 0xff
 8023072:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023074:	fb90 f1f1 	sdiv	r1, r0, r1
 8023078:	434b      	muls	r3, r1
 802307a:	2bfe      	cmp	r3, #254	@ 0xfe
 802307c:	dd03      	ble.n	8023086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x216>
 802307e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023080:	4281      	cmp	r1, r0
 8023082:	f000 8122 	beq.w	80232ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45a>
 8023086:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023088:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802308a:	fb11 f303 	smulbb	r3, r1, r3
 802308e:	b29b      	uxth	r3, r3
 8023090:	1c59      	adds	r1, r3, #1
 8023092:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023096:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802309a:	fa1f fe83 	uxth.w	lr, r3
 802309e:	43db      	mvns	r3, r3
 80230a0:	f8b8 4000 	ldrh.w	r4, [r8]
 80230a4:	fb10 fb0e 	smulbb	fp, r0, lr
 80230a8:	1221      	asrs	r1, r4, #8
 80230aa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80230ac:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80230b0:	b2db      	uxtb	r3, r3
 80230b2:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80230b6:	fb01 b103 	mla	r1, r1, r3, fp
 80230ba:	fb10 fb0e 	smulbb	fp, r0, lr
 80230be:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80230c0:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 80230c4:	fb10 fe0e 	smulbb	lr, r0, lr
 80230c8:	00e4      	lsls	r4, r4, #3
 80230ca:	b2e4      	uxtb	r4, r4
 80230cc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80230d0:	fb04 e403 	mla	r4, r4, r3, lr
 80230d4:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80230d8:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 80230dc:	fb0c bc03 	mla	ip, ip, r3, fp
 80230e0:	b289      	uxth	r1, r1
 80230e2:	b2a4      	uxth	r4, r4
 80230e4:	1c4b      	adds	r3, r1, #1
 80230e6:	f104 0b01 	add.w	fp, r4, #1
 80230ea:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80230ee:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 80230f2:	fa1f fc8c 	uxth.w	ip, ip
 80230f6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80230fa:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80230fe:	ea4b 0101 	orr.w	r1, fp, r1
 8023102:	f10c 0b01 	add.w	fp, ip, #1
 8023106:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 802310a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802310e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8023112:	ea41 010b 	orr.w	r1, r1, fp
 8023116:	f8a8 1000 	strh.w	r1, [r8]
 802311a:	9b08      	ldr	r3, [sp, #32]
 802311c:	441e      	add	r6, r3
 802311e:	b2b6      	uxth	r6, r6
 8023120:	2e07      	cmp	r6, #7
 8023122:	bf98      	it	ls
 8023124:	411a      	asrls	r2, r3
 8023126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023128:	bf89      	itett	hi
 802312a:	787a      	ldrbhi	r2, [r7, #1]
 802312c:	b2d2      	uxtbls	r2, r2
 802312e:	3701      	addhi	r7, #1
 8023130:	2600      	movhi	r6, #0
 8023132:	4498      	add	r8, r3
 8023134:	e795      	b.n	8023062 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f2>
 8023136:	441c      	add	r4, r3
 8023138:	b224      	sxth	r4, r4
 802313a:	e6d9      	b.n	8022ef0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 802313c:	f1ba 0f01 	cmp.w	sl, #1
 8023140:	f47f af09 	bne.w	8022f56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8023144:	f1bb 0f01 	cmp.w	fp, #1
 8023148:	f47f af05 	bne.w	8022f56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 802314c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802314e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023150:	1a99      	subs	r1, r3, r2
 8023152:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023154:	1b9b      	subs	r3, r3, r6
 8023156:	4299      	cmp	r1, r3
 8023158:	bfa8      	it	ge
 802315a:	4619      	movge	r1, r3
 802315c:	2900      	cmp	r1, #0
 802315e:	9112      	str	r1, [sp, #72]	@ 0x48
 8023160:	dd7d      	ble.n	802325e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8023162:	4a22      	ldr	r2, [pc, #136]	@ (80231ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8023164:	6810      	ldr	r0, [r2, #0]
 8023166:	9211      	str	r2, [sp, #68]	@ 0x44
 8023168:	6803      	ldr	r3, [r0, #0]
 802316a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802316c:	4798      	blx	r3
 802316e:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8023172:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023174:	d006      	beq.n	8023184 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x314>
 8023176:	9b08      	ldr	r3, [sp, #32]
 8023178:	2b04      	cmp	r3, #4
 802317a:	d133      	bne.n	80231e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 802317c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802317e:	3300      	adds	r3, #0
 8023180:	bf18      	it	ne
 8023182:	2301      	movne	r3, #1
 8023184:	0582      	lsls	r2, r0, #22
 8023186:	fa1f fc88 	uxth.w	ip, r8
 802318a:	f140 80b9 	bpl.w	8023300 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x490>
 802318e:	9808      	ldr	r0, [sp, #32]
 8023190:	2808      	cmp	r0, #8
 8023192:	f040 80b5 	bne.w	8023300 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x490>
 8023196:	2b00      	cmp	r3, #0
 8023198:	d064      	beq.n	8023264 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>
 802319a:	f10c 0c01 	add.w	ip, ip, #1
 802319e:	f02c 0301 	bic.w	r3, ip, #1
 80231a2:	b29b      	uxth	r3, r3
 80231a4:	bb45      	cbnz	r5, 80231f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80231a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80231a8:	eb08 0004 	add.w	r0, r8, r4
 80231ac:	4290      	cmp	r0, r2
 80231ae:	dc23      	bgt.n	80231f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80231b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80231b2:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 80231b6:	6810      	ldr	r0, [r2, #0]
 80231b8:	b289      	uxth	r1, r1
 80231ba:	6804      	ldr	r4, [r0, #0]
 80231bc:	9506      	str	r5, [sp, #24]
 80231be:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80231c2:	e9cd 3100 	strd	r3, r1, [sp]
 80231c6:	9302      	str	r3, [sp, #8]
 80231c8:	4673      	mov	r3, lr
 80231ca:	9505      	str	r5, [sp, #20]
 80231cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80231ce:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80231d2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80231d6:	fb06 710c 	mla	r1, r6, ip, r7
 80231da:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80231de:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 80231e0:	47a0      	blx	r4
 80231e2:	e03c      	b.n	802325e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 80231e4:	2300      	movs	r3, #0
 80231e6:	e7cd      	b.n	8023184 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x314>
 80231e8:	2005ba78 	.word	0x2005ba78
 80231ec:	2005ba80 	.word	0x2005ba80
 80231f0:	2005ba7a 	.word	0x2005ba7a
 80231f4:	00fff800 	.word	0x00fff800
 80231f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80231fa:	eba4 0e05 	sub.w	lr, r4, r5
 80231fe:	eba2 0e0e 	sub.w	lr, r2, lr
 8023202:	45c6      	cmp	lr, r8
 8023204:	bfd4      	ite	le
 8023206:	ebc5 0e0e 	rsble	lr, r5, lr
 802320a:	ebc5 0e08 	rsbgt	lr, r5, r8
 802320e:	f1be 0f00 	cmp.w	lr, #0
 8023212:	d024      	beq.n	802325e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8023214:	07e8      	lsls	r0, r5, #31
 8023216:	f53f ae9e 	bmi.w	8022f56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 802321a:	f01e 0001 	ands.w	r0, lr, #1
 802321e:	f47f ae9a 	bne.w	8022f56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8023222:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023224:	086d      	lsrs	r5, r5, #1
 8023226:	6814      	ldr	r4, [r2, #0]
 8023228:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 802322c:	fb06 560c 	mla	r6, r6, ip, r5
 8023230:	6825      	ldr	r5, [r4, #0]
 8023232:	9006      	str	r0, [sp, #24]
 8023234:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8023238:	9005      	str	r0, [sp, #20]
 802323a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802323c:	9302      	str	r3, [sp, #8]
 802323e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8023242:	b289      	uxth	r1, r1
 8023244:	fa1f f38e 	uxth.w	r3, lr
 8023248:	f8bd 805e 	ldrh.w	r8, [sp, #94]	@ 0x5e
 802324c:	9101      	str	r1, [sp, #4]
 802324e:	9300      	str	r3, [sp, #0]
 8023250:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8023254:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 8023256:	4643      	mov	r3, r8
 8023258:	19b9      	adds	r1, r7, r6
 802325a:	4620      	mov	r0, r4
 802325c:	47a8      	blx	r5
 802325e:	b019      	add	sp, #100	@ 0x64
 8023260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023264:	4a28      	ldr	r2, [pc, #160]	@ (8023308 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>)
 8023266:	1b64      	subs	r4, r4, r5
 8023268:	6810      	ldr	r0, [r2, #0]
 802326a:	fb06 5608 	mla	r6, r6, r8, r5
 802326e:	f8d0 a000 	ldr.w	sl, [r0]
 8023272:	9306      	str	r3, [sp, #24]
 8023274:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8023278:	9305      	str	r3, [sp, #20]
 802327a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802327c:	b289      	uxth	r1, r1
 802327e:	e9cd 9303 	strd	r9, r3, [sp, #12]
 8023282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023284:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 8023288:	1b1c      	subs	r4, r3, r4
 802328a:	4544      	cmp	r4, r8
 802328c:	bfd4      	ite	le
 802328e:	ebc5 0504 	rsble	r5, r5, r4
 8023292:	ebc5 0508 	rsbgt	r5, r5, r8
 8023296:	b2ad      	uxth	r5, r5
 8023298:	9101      	str	r1, [sp, #4]
 802329a:	f8cd c008 	str.w	ip, [sp, #8]
 802329e:	9500      	str	r5, [sp, #0]
 80232a0:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80232a4:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 80232a8:	4673      	mov	r3, lr
 80232aa:	19b9      	adds	r1, r7, r6
 80232ac:	e798      	b.n	80231e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>
 80232ae:	2208      	movs	r2, #8
 80232b0:	9b08      	ldr	r3, [sp, #32]
 80232b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80232b6:	1e5a      	subs	r2, r3, #1
 80232b8:	4442      	add	r2, r8
 80232ba:	fb92 f2f3 	sdiv	r2, r2, r3
 80232be:	fb12 f203 	smulbb	r2, r2, r3
 80232c2:	b292      	uxth	r2, r2
 80232c4:	e64d      	b.n	8022f62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80232c6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80232c8:	e68f      	b.n	8022fea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17a>
 80232ca:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80232cc:	e723      	b.n	8023116 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a6>
 80232ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80232d0:	b143      	cbz	r3, 80232e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x474>
 80232d2:	441e      	add	r6, r3
 80232d4:	b2b6      	uxth	r6, r6
 80232d6:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
 80232da:	783a      	ldrb	r2, [r7, #0]
 80232dc:	f006 0607 	and.w	r6, r6, #7
 80232e0:	4132      	asrs	r2, r6
 80232e2:	b2d2      	uxtb	r2, r2
 80232e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80232e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80232e8:	4419      	add	r1, r3
 80232ea:	910a      	str	r1, [sp, #40]	@ 0x28
 80232ec:	e6b2      	b.n	8023054 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 80232ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80232f0:	2b00      	cmp	r3, #0
 80232f2:	d1b4      	bne.n	802325e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 80232f4:	4b04      	ldr	r3, [pc, #16]	@ (8023308 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>)
 80232f6:	6818      	ldr	r0, [r3, #0]
 80232f8:	6803      	ldr	r3, [r0, #0]
 80232fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80232fc:	4798      	blx	r3
 80232fe:	e7ae      	b.n	802325e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8023300:	2b00      	cmp	r3, #0
 8023302:	f47f af4a 	bne.w	802319a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32a>
 8023306:	e626      	b.n	8022f56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8023308:	2005ba80 	.word	0x2005ba80

0802330c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 802330c:	b538      	push	{r3, r4, r5, lr}
 802330e:	4605      	mov	r5, r0
 8023310:	4c13      	ldr	r4, [pc, #76]	@ (8023360 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 8023312:	e8d4 3f8f 	ldab	r3, [r4]
 8023316:	07da      	lsls	r2, r3, #31
 8023318:	d40b      	bmi.n	8023332 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 802331a:	4620      	mov	r0, r4
 802331c:	f008 fc23 	bl	802bb66 <__cxa_guard_acquire>
 8023320:	b138      	cbz	r0, 8023332 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 8023322:	4620      	mov	r0, r4
 8023324:	f008 fc2b 	bl	802bb7e <__cxa_guard_release>
 8023328:	4a0e      	ldr	r2, [pc, #56]	@ (8023364 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 802332a:	490f      	ldr	r1, [pc, #60]	@ (8023368 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 802332c:	480f      	ldr	r0, [pc, #60]	@ (802336c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802332e:	f008 fc13 	bl	802bb58 <__aeabi_atexit>
 8023332:	4c0f      	ldr	r4, [pc, #60]	@ (8023370 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8023334:	e8d4 3f8f 	ldab	r3, [r4]
 8023338:	07db      	lsls	r3, r3, #31
 802333a:	d40b      	bmi.n	8023354 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 802333c:	4620      	mov	r0, r4
 802333e:	f008 fc12 	bl	802bb66 <__cxa_guard_acquire>
 8023342:	b138      	cbz	r0, 8023354 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 8023344:	4620      	mov	r0, r4
 8023346:	f008 fc1a 	bl	802bb7e <__cxa_guard_release>
 802334a:	4a06      	ldr	r2, [pc, #24]	@ (8023364 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 802334c:	4909      	ldr	r1, [pc, #36]	@ (8023374 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802334e:	480a      	ldr	r0, [pc, #40]	@ (8023378 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8023350:	f008 fc02 	bl	802bb58 <__aeabi_atexit>
 8023354:	4b05      	ldr	r3, [pc, #20]	@ (802336c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8023356:	616b      	str	r3, [r5, #20]
 8023358:	4b07      	ldr	r3, [pc, #28]	@ (8023378 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802335a:	61ab      	str	r3, [r5, #24]
 802335c:	bd38      	pop	{r3, r4, r5, pc}
 802335e:	bf00      	nop
 8023360:	2005bb64 	.word	0x2005bb64
 8023364:	20000000 	.word	0x20000000
 8023368:	0801f423 	.word	0x0801f423
 802336c:	20000068 	.word	0x20000068
 8023370:	2005bb68 	.word	0x2005bb68
 8023374:	0801f421 	.word	0x0801f421
 8023378:	2000006c 	.word	0x2000006c

0802337c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 802337c:	b538      	push	{r3, r4, r5, lr}
 802337e:	4605      	mov	r5, r0
 8023380:	4c13      	ldr	r4, [pc, #76]	@ (80233d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 8023382:	e8d4 3f8f 	ldab	r3, [r4]
 8023386:	07da      	lsls	r2, r3, #31
 8023388:	d40b      	bmi.n	80233a2 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 802338a:	4620      	mov	r0, r4
 802338c:	f008 fbeb 	bl	802bb66 <__cxa_guard_acquire>
 8023390:	b138      	cbz	r0, 80233a2 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 8023392:	4620      	mov	r0, r4
 8023394:	f008 fbf3 	bl	802bb7e <__cxa_guard_release>
 8023398:	4a0e      	ldr	r2, [pc, #56]	@ (80233d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802339a:	490f      	ldr	r1, [pc, #60]	@ (80233d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 802339c:	480f      	ldr	r0, [pc, #60]	@ (80233dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802339e:	f008 fbdb 	bl	802bb58 <__aeabi_atexit>
 80233a2:	4c0f      	ldr	r4, [pc, #60]	@ (80233e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80233a4:	e8d4 3f8f 	ldab	r3, [r4]
 80233a8:	07db      	lsls	r3, r3, #31
 80233aa:	d40b      	bmi.n	80233c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 80233ac:	4620      	mov	r0, r4
 80233ae:	f008 fbda 	bl	802bb66 <__cxa_guard_acquire>
 80233b2:	b138      	cbz	r0, 80233c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 80233b4:	4620      	mov	r0, r4
 80233b6:	f008 fbe2 	bl	802bb7e <__cxa_guard_release>
 80233ba:	4a06      	ldr	r2, [pc, #24]	@ (80233d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80233bc:	4909      	ldr	r1, [pc, #36]	@ (80233e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80233be:	480a      	ldr	r0, [pc, #40]	@ (80233e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80233c0:	f008 fbca 	bl	802bb58 <__aeabi_atexit>
 80233c4:	4b05      	ldr	r3, [pc, #20]	@ (80233dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80233c6:	60eb      	str	r3, [r5, #12]
 80233c8:	4b07      	ldr	r3, [pc, #28]	@ (80233e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80233ca:	612b      	str	r3, [r5, #16]
 80233cc:	bd38      	pop	{r3, r4, r5, pc}
 80233ce:	bf00      	nop
 80233d0:	2005bb3c 	.word	0x2005bb3c
 80233d4:	20000000 	.word	0x20000000
 80233d8:	0801f427 	.word	0x0801f427
 80233dc:	20000040 	.word	0x20000040
 80233e0:	2005bb40 	.word	0x2005bb40
 80233e4:	0801f425 	.word	0x0801f425
 80233e8:	20000044 	.word	0x20000044

080233ec <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80233ec:	b510      	push	{r4, lr}
 80233ee:	4604      	mov	r4, r0
 80233f0:	f7ff ff8c 	bl	802330c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80233f4:	4620      	mov	r0, r4
 80233f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233fa:	f7ff bfbf 	b.w	802337c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08023400 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8023400:	b538      	push	{r3, r4, r5, lr}
 8023402:	4605      	mov	r5, r0
 8023404:	4c13      	ldr	r4, [pc, #76]	@ (8023454 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 8023406:	e8d4 3f8f 	ldab	r3, [r4]
 802340a:	07da      	lsls	r2, r3, #31
 802340c:	d40b      	bmi.n	8023426 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 802340e:	4620      	mov	r0, r4
 8023410:	f008 fba9 	bl	802bb66 <__cxa_guard_acquire>
 8023414:	b138      	cbz	r0, 8023426 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 8023416:	4620      	mov	r0, r4
 8023418:	f008 fbb1 	bl	802bb7e <__cxa_guard_release>
 802341c:	4a0e      	ldr	r2, [pc, #56]	@ (8023458 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 802341e:	490f      	ldr	r1, [pc, #60]	@ (802345c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023420:	480f      	ldr	r0, [pc, #60]	@ (8023460 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8023422:	f008 fb99 	bl	802bb58 <__aeabi_atexit>
 8023426:	4c0f      	ldr	r4, [pc, #60]	@ (8023464 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023428:	e8d4 3f8f 	ldab	r3, [r4]
 802342c:	07db      	lsls	r3, r3, #31
 802342e:	d40b      	bmi.n	8023448 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 8023430:	4620      	mov	r0, r4
 8023432:	f008 fb98 	bl	802bb66 <__cxa_guard_acquire>
 8023436:	b138      	cbz	r0, 8023448 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 8023438:	4620      	mov	r0, r4
 802343a:	f008 fba0 	bl	802bb7e <__cxa_guard_release>
 802343e:	4a06      	ldr	r2, [pc, #24]	@ (8023458 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023440:	4909      	ldr	r1, [pc, #36]	@ (8023468 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8023442:	480a      	ldr	r0, [pc, #40]	@ (802346c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8023444:	f008 fb88 	bl	802bb58 <__aeabi_atexit>
 8023448:	4b05      	ldr	r3, [pc, #20]	@ (8023460 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802344a:	626b      	str	r3, [r5, #36]	@ 0x24
 802344c:	4b07      	ldr	r3, [pc, #28]	@ (802346c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802344e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8023450:	bd38      	pop	{r3, r4, r5, pc}
 8023452:	bf00      	nop
 8023454:	2005bb6c 	.word	0x2005bb6c
 8023458:	20000000 	.word	0x20000000
 802345c:	0801f41b 	.word	0x0801f41b
 8023460:	20000070 	.word	0x20000070
 8023464:	2005bb70 	.word	0x2005bb70
 8023468:	0801f419 	.word	0x0801f419
 802346c:	20000074 	.word	0x20000074

08023470 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023470:	b538      	push	{r3, r4, r5, lr}
 8023472:	4605      	mov	r5, r0
 8023474:	4c13      	ldr	r4, [pc, #76]	@ (80234c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 8023476:	e8d4 3f8f 	ldab	r3, [r4]
 802347a:	07da      	lsls	r2, r3, #31
 802347c:	d40b      	bmi.n	8023496 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 802347e:	4620      	mov	r0, r4
 8023480:	f008 fb71 	bl	802bb66 <__cxa_guard_acquire>
 8023484:	b138      	cbz	r0, 8023496 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 8023486:	4620      	mov	r0, r4
 8023488:	f008 fb79 	bl	802bb7e <__cxa_guard_release>
 802348c:	4a0e      	ldr	r2, [pc, #56]	@ (80234c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 802348e:	490f      	ldr	r1, [pc, #60]	@ (80234cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023490:	480f      	ldr	r0, [pc, #60]	@ (80234d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023492:	f008 fb61 	bl	802bb58 <__aeabi_atexit>
 8023496:	4c0f      	ldr	r4, [pc, #60]	@ (80234d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023498:	e8d4 3f8f 	ldab	r3, [r4]
 802349c:	07db      	lsls	r3, r3, #31
 802349e:	d40b      	bmi.n	80234b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 80234a0:	4620      	mov	r0, r4
 80234a2:	f008 fb60 	bl	802bb66 <__cxa_guard_acquire>
 80234a6:	b138      	cbz	r0, 80234b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 80234a8:	4620      	mov	r0, r4
 80234aa:	f008 fb68 	bl	802bb7e <__cxa_guard_release>
 80234ae:	4a06      	ldr	r2, [pc, #24]	@ (80234c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80234b0:	4909      	ldr	r1, [pc, #36]	@ (80234d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80234b2:	480a      	ldr	r0, [pc, #40]	@ (80234dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80234b4:	f008 fb50 	bl	802bb58 <__aeabi_atexit>
 80234b8:	4b05      	ldr	r3, [pc, #20]	@ (80234d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80234ba:	61eb      	str	r3, [r5, #28]
 80234bc:	4b07      	ldr	r3, [pc, #28]	@ (80234dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80234be:	622b      	str	r3, [r5, #32]
 80234c0:	bd38      	pop	{r3, r4, r5, pc}
 80234c2:	bf00      	nop
 80234c4:	2005bb44 	.word	0x2005bb44
 80234c8:	20000000 	.word	0x20000000
 80234cc:	0801f41f 	.word	0x0801f41f
 80234d0:	20000048 	.word	0x20000048
 80234d4:	2005bb48 	.word	0x2005bb48
 80234d8:	0801f41d 	.word	0x0801f41d
 80234dc:	2000004c 	.word	0x2000004c

080234e0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80234e0:	b510      	push	{r4, lr}
 80234e2:	4604      	mov	r4, r0
 80234e4:	f7ff ff8c 	bl	8023400 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80234e8:	4620      	mov	r0, r4
 80234ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80234ee:	f7ff bfbf 	b.w	8023470 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080234f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80234f4:	b538      	push	{r3, r4, r5, lr}
 80234f6:	4605      	mov	r5, r0
 80234f8:	4c13      	ldr	r4, [pc, #76]	@ (8023548 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 80234fa:	e8d4 3f8f 	ldab	r3, [r4]
 80234fe:	07da      	lsls	r2, r3, #31
 8023500:	d40b      	bmi.n	802351a <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 8023502:	4620      	mov	r0, r4
 8023504:	f008 fb2f 	bl	802bb66 <__cxa_guard_acquire>
 8023508:	b138      	cbz	r0, 802351a <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 802350a:	4620      	mov	r0, r4
 802350c:	f008 fb37 	bl	802bb7e <__cxa_guard_release>
 8023510:	4a0e      	ldr	r2, [pc, #56]	@ (802354c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023512:	490f      	ldr	r1, [pc, #60]	@ (8023550 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023514:	480f      	ldr	r0, [pc, #60]	@ (8023554 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8023516:	f008 fb1f 	bl	802bb58 <__aeabi_atexit>
 802351a:	4c0f      	ldr	r4, [pc, #60]	@ (8023558 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802351c:	e8d4 3f8f 	ldab	r3, [r4]
 8023520:	07db      	lsls	r3, r3, #31
 8023522:	d40b      	bmi.n	802353c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 8023524:	4620      	mov	r0, r4
 8023526:	f008 fb1e 	bl	802bb66 <__cxa_guard_acquire>
 802352a:	b138      	cbz	r0, 802353c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 802352c:	4620      	mov	r0, r4
 802352e:	f008 fb26 	bl	802bb7e <__cxa_guard_release>
 8023532:	4a06      	ldr	r2, [pc, #24]	@ (802354c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023534:	4909      	ldr	r1, [pc, #36]	@ (802355c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8023536:	480a      	ldr	r0, [pc, #40]	@ (8023560 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023538:	f008 fb0e 	bl	802bb58 <__aeabi_atexit>
 802353c:	4b05      	ldr	r3, [pc, #20]	@ (8023554 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802353e:	636b      	str	r3, [r5, #52]	@ 0x34
 8023540:	4b07      	ldr	r3, [pc, #28]	@ (8023560 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023542:	63ab      	str	r3, [r5, #56]	@ 0x38
 8023544:	bd38      	pop	{r3, r4, r5, pc}
 8023546:	bf00      	nop
 8023548:	2005bb7c 	.word	0x2005bb7c
 802354c:	20000000 	.word	0x20000000
 8023550:	0801f413 	.word	0x0801f413
 8023554:	20000080 	.word	0x20000080
 8023558:	2005bb80 	.word	0x2005bb80
 802355c:	0801f411 	.word	0x0801f411
 8023560:	20000084 	.word	0x20000084

08023564 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023564:	b538      	push	{r3, r4, r5, lr}
 8023566:	4605      	mov	r5, r0
 8023568:	4c13      	ldr	r4, [pc, #76]	@ (80235b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 802356a:	e8d4 3f8f 	ldab	r3, [r4]
 802356e:	07da      	lsls	r2, r3, #31
 8023570:	d40b      	bmi.n	802358a <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 8023572:	4620      	mov	r0, r4
 8023574:	f008 faf7 	bl	802bb66 <__cxa_guard_acquire>
 8023578:	b138      	cbz	r0, 802358a <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 802357a:	4620      	mov	r0, r4
 802357c:	f008 faff 	bl	802bb7e <__cxa_guard_release>
 8023580:	4a0e      	ldr	r2, [pc, #56]	@ (80235bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023582:	490f      	ldr	r1, [pc, #60]	@ (80235c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023584:	480f      	ldr	r0, [pc, #60]	@ (80235c4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023586:	f008 fae7 	bl	802bb58 <__aeabi_atexit>
 802358a:	4c0f      	ldr	r4, [pc, #60]	@ (80235c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802358c:	e8d4 3f8f 	ldab	r3, [r4]
 8023590:	07db      	lsls	r3, r3, #31
 8023592:	d40b      	bmi.n	80235ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 8023594:	4620      	mov	r0, r4
 8023596:	f008 fae6 	bl	802bb66 <__cxa_guard_acquire>
 802359a:	b138      	cbz	r0, 80235ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 802359c:	4620      	mov	r0, r4
 802359e:	f008 faee 	bl	802bb7e <__cxa_guard_release>
 80235a2:	4a06      	ldr	r2, [pc, #24]	@ (80235bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80235a4:	4909      	ldr	r1, [pc, #36]	@ (80235cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80235a6:	480a      	ldr	r0, [pc, #40]	@ (80235d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80235a8:	f008 fad6 	bl	802bb58 <__aeabi_atexit>
 80235ac:	4b05      	ldr	r3, [pc, #20]	@ (80235c4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80235ae:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80235b0:	4b07      	ldr	r3, [pc, #28]	@ (80235d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80235b2:	632b      	str	r3, [r5, #48]	@ 0x30
 80235b4:	bd38      	pop	{r3, r4, r5, pc}
 80235b6:	bf00      	nop
 80235b8:	2005bb4c 	.word	0x2005bb4c
 80235bc:	20000000 	.word	0x20000000
 80235c0:	0801f417 	.word	0x0801f417
 80235c4:	20000050 	.word	0x20000050
 80235c8:	2005bb50 	.word	0x2005bb50
 80235cc:	0801f415 	.word	0x0801f415
 80235d0:	20000054 	.word	0x20000054

080235d4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80235d4:	b510      	push	{r4, lr}
 80235d6:	4604      	mov	r4, r0
 80235d8:	f7ff ff8c 	bl	80234f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80235dc:	4620      	mov	r0, r4
 80235de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80235e2:	f7ff bfbf 	b.w	8023564 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080235e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80235e8:	b538      	push	{r3, r4, r5, lr}
 80235ea:	4605      	mov	r5, r0
 80235ec:	4c13      	ldr	r4, [pc, #76]	@ (802363c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 80235ee:	e8d4 3f8f 	ldab	r3, [r4]
 80235f2:	07da      	lsls	r2, r3, #31
 80235f4:	d40b      	bmi.n	802360e <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 80235f6:	4620      	mov	r0, r4
 80235f8:	f008 fab5 	bl	802bb66 <__cxa_guard_acquire>
 80235fc:	b138      	cbz	r0, 802360e <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 80235fe:	4620      	mov	r0, r4
 8023600:	f008 fabd 	bl	802bb7e <__cxa_guard_release>
 8023604:	4a0e      	ldr	r2, [pc, #56]	@ (8023640 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8023606:	490f      	ldr	r1, [pc, #60]	@ (8023644 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023608:	480f      	ldr	r0, [pc, #60]	@ (8023648 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802360a:	f008 faa5 	bl	802bb58 <__aeabi_atexit>
 802360e:	4c0f      	ldr	r4, [pc, #60]	@ (802364c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8023610:	e8d4 3f8f 	ldab	r3, [r4]
 8023614:	07db      	lsls	r3, r3, #31
 8023616:	d40b      	bmi.n	8023630 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 8023618:	4620      	mov	r0, r4
 802361a:	f008 faa4 	bl	802bb66 <__cxa_guard_acquire>
 802361e:	b138      	cbz	r0, 8023630 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 8023620:	4620      	mov	r0, r4
 8023622:	f008 faac 	bl	802bb7e <__cxa_guard_release>
 8023626:	4a06      	ldr	r2, [pc, #24]	@ (8023640 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8023628:	4909      	ldr	r1, [pc, #36]	@ (8023650 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802362a:	480a      	ldr	r0, [pc, #40]	@ (8023654 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802362c:	f008 fa94 	bl	802bb58 <__aeabi_atexit>
 8023630:	4b05      	ldr	r3, [pc, #20]	@ (8023648 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8023632:	656b      	str	r3, [r5, #84]	@ 0x54
 8023634:	4b07      	ldr	r3, [pc, #28]	@ (8023654 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8023636:	65ab      	str	r3, [r5, #88]	@ 0x58
 8023638:	bd38      	pop	{r3, r4, r5, pc}
 802363a:	bf00      	nop
 802363c:	2005bb84 	.word	0x2005bb84
 8023640:	20000000 	.word	0x20000000
 8023644:	0801f403 	.word	0x0801f403
 8023648:	20000088 	.word	0x20000088
 802364c:	2005bb88 	.word	0x2005bb88
 8023650:	0801f401 	.word	0x0801f401
 8023654:	2000008c 	.word	0x2000008c

08023658 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8023658:	b538      	push	{r3, r4, r5, lr}
 802365a:	4605      	mov	r5, r0
 802365c:	4c13      	ldr	r4, [pc, #76]	@ (80236ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 802365e:	e8d4 3f8f 	ldab	r3, [r4]
 8023662:	07da      	lsls	r2, r3, #31
 8023664:	d40b      	bmi.n	802367e <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 8023666:	4620      	mov	r0, r4
 8023668:	f008 fa7d 	bl	802bb66 <__cxa_guard_acquire>
 802366c:	b138      	cbz	r0, 802367e <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 802366e:	4620      	mov	r0, r4
 8023670:	f008 fa85 	bl	802bb7e <__cxa_guard_release>
 8023674:	4a0e      	ldr	r2, [pc, #56]	@ (80236b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8023676:	490f      	ldr	r1, [pc, #60]	@ (80236b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023678:	480f      	ldr	r0, [pc, #60]	@ (80236b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802367a:	f008 fa6d 	bl	802bb58 <__aeabi_atexit>
 802367e:	4c0f      	ldr	r4, [pc, #60]	@ (80236bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023680:	e8d4 3f8f 	ldab	r3, [r4]
 8023684:	07db      	lsls	r3, r3, #31
 8023686:	d40b      	bmi.n	80236a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 8023688:	4620      	mov	r0, r4
 802368a:	f008 fa6c 	bl	802bb66 <__cxa_guard_acquire>
 802368e:	b138      	cbz	r0, 80236a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 8023690:	4620      	mov	r0, r4
 8023692:	f008 fa74 	bl	802bb7e <__cxa_guard_release>
 8023696:	4a06      	ldr	r2, [pc, #24]	@ (80236b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8023698:	4909      	ldr	r1, [pc, #36]	@ (80236c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802369a:	480a      	ldr	r0, [pc, #40]	@ (80236c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 802369c:	f008 fa5c 	bl	802bb58 <__aeabi_atexit>
 80236a0:	4b05      	ldr	r3, [pc, #20]	@ (80236b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80236a2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80236a4:	4b07      	ldr	r3, [pc, #28]	@ (80236c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80236a6:	652b      	str	r3, [r5, #80]	@ 0x50
 80236a8:	bd38      	pop	{r3, r4, r5, pc}
 80236aa:	bf00      	nop
 80236ac:	2005bb8c 	.word	0x2005bb8c
 80236b0:	20000000 	.word	0x20000000
 80236b4:	0801f407 	.word	0x0801f407
 80236b8:	20000090 	.word	0x20000090
 80236bc:	2005bb90 	.word	0x2005bb90
 80236c0:	0801f405 	.word	0x0801f405
 80236c4:	20000094 	.word	0x20000094

080236c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80236c8:	b538      	push	{r3, r4, r5, lr}
 80236ca:	4605      	mov	r5, r0
 80236cc:	4c13      	ldr	r4, [pc, #76]	@ (802371c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 80236ce:	e8d4 3f8f 	ldab	r3, [r4]
 80236d2:	07da      	lsls	r2, r3, #31
 80236d4:	d40b      	bmi.n	80236ee <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 80236d6:	4620      	mov	r0, r4
 80236d8:	f008 fa45 	bl	802bb66 <__cxa_guard_acquire>
 80236dc:	b138      	cbz	r0, 80236ee <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 80236de:	4620      	mov	r0, r4
 80236e0:	f008 fa4d 	bl	802bb7e <__cxa_guard_release>
 80236e4:	4a0e      	ldr	r2, [pc, #56]	@ (8023720 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80236e6:	490f      	ldr	r1, [pc, #60]	@ (8023724 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80236e8:	480f      	ldr	r0, [pc, #60]	@ (8023728 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80236ea:	f008 fa35 	bl	802bb58 <__aeabi_atexit>
 80236ee:	4c0f      	ldr	r4, [pc, #60]	@ (802372c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80236f0:	e8d4 3f8f 	ldab	r3, [r4]
 80236f4:	07db      	lsls	r3, r3, #31
 80236f6:	d40b      	bmi.n	8023710 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 80236f8:	4620      	mov	r0, r4
 80236fa:	f008 fa34 	bl	802bb66 <__cxa_guard_acquire>
 80236fe:	b138      	cbz	r0, 8023710 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8023700:	4620      	mov	r0, r4
 8023702:	f008 fa3c 	bl	802bb7e <__cxa_guard_release>
 8023706:	4a06      	ldr	r2, [pc, #24]	@ (8023720 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023708:	4909      	ldr	r1, [pc, #36]	@ (8023730 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802370a:	480a      	ldr	r0, [pc, #40]	@ (8023734 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802370c:	f008 fa24 	bl	802bb58 <__aeabi_atexit>
 8023710:	4b05      	ldr	r3, [pc, #20]	@ (8023728 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023712:	646b      	str	r3, [r5, #68]	@ 0x44
 8023714:	4b07      	ldr	r3, [pc, #28]	@ (8023734 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8023716:	64ab      	str	r3, [r5, #72]	@ 0x48
 8023718:	bd38      	pop	{r3, r4, r5, pc}
 802371a:	bf00      	nop
 802371c:	2005bb54 	.word	0x2005bb54
 8023720:	20000000 	.word	0x20000000
 8023724:	0801f40b 	.word	0x0801f40b
 8023728:	20000058 	.word	0x20000058
 802372c:	2005bb58 	.word	0x2005bb58
 8023730:	0801f409 	.word	0x0801f409
 8023734:	2000005c 	.word	0x2000005c

08023738 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8023738:	b538      	push	{r3, r4, r5, lr}
 802373a:	4605      	mov	r5, r0
 802373c:	4c13      	ldr	r4, [pc, #76]	@ (802378c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 802373e:	e8d4 3f8f 	ldab	r3, [r4]
 8023742:	07da      	lsls	r2, r3, #31
 8023744:	d40b      	bmi.n	802375e <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 8023746:	4620      	mov	r0, r4
 8023748:	f008 fa0d 	bl	802bb66 <__cxa_guard_acquire>
 802374c:	b138      	cbz	r0, 802375e <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 802374e:	4620      	mov	r0, r4
 8023750:	f008 fa15 	bl	802bb7e <__cxa_guard_release>
 8023754:	4a0e      	ldr	r2, [pc, #56]	@ (8023790 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8023756:	490f      	ldr	r1, [pc, #60]	@ (8023794 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023758:	480f      	ldr	r0, [pc, #60]	@ (8023798 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802375a:	f008 f9fd 	bl	802bb58 <__aeabi_atexit>
 802375e:	4c0f      	ldr	r4, [pc, #60]	@ (802379c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023760:	e8d4 3f8f 	ldab	r3, [r4]
 8023764:	07db      	lsls	r3, r3, #31
 8023766:	d40b      	bmi.n	8023780 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 8023768:	4620      	mov	r0, r4
 802376a:	f008 f9fc 	bl	802bb66 <__cxa_guard_acquire>
 802376e:	b138      	cbz	r0, 8023780 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 8023770:	4620      	mov	r0, r4
 8023772:	f008 fa04 	bl	802bb7e <__cxa_guard_release>
 8023776:	4a06      	ldr	r2, [pc, #24]	@ (8023790 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8023778:	4909      	ldr	r1, [pc, #36]	@ (80237a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802377a:	480a      	ldr	r0, [pc, #40]	@ (80237a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802377c:	f008 f9ec 	bl	802bb58 <__aeabi_atexit>
 8023780:	4b05      	ldr	r3, [pc, #20]	@ (8023798 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8023782:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8023784:	4b07      	ldr	r3, [pc, #28]	@ (80237a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8023786:	642b      	str	r3, [r5, #64]	@ 0x40
 8023788:	bd38      	pop	{r3, r4, r5, pc}
 802378a:	bf00      	nop
 802378c:	2005bb74 	.word	0x2005bb74
 8023790:	20000000 	.word	0x20000000
 8023794:	0801f40f 	.word	0x0801f40f
 8023798:	20000078 	.word	0x20000078
 802379c:	2005bb78 	.word	0x2005bb78
 80237a0:	0801f40d 	.word	0x0801f40d
 80237a4:	2000007c 	.word	0x2000007c

080237a8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80237a8:	b510      	push	{r4, lr}
 80237aa:	4604      	mov	r4, r0
 80237ac:	f7ff ff1c 	bl	80235e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80237b0:	4620      	mov	r0, r4
 80237b2:	f7ff ff89 	bl	80236c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80237b6:	4620      	mov	r0, r4
 80237b8:	f7ff ff4e 	bl	8023658 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80237bc:	4620      	mov	r0, r4
 80237be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237c2:	f7ff bfb9 	b.w	8023738 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080237c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80237c8:	b538      	push	{r3, r4, r5, lr}
 80237ca:	4605      	mov	r5, r0
 80237cc:	4c13      	ldr	r4, [pc, #76]	@ (802381c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 80237ce:	e8d4 3f8f 	ldab	r3, [r4]
 80237d2:	07da      	lsls	r2, r3, #31
 80237d4:	d40b      	bmi.n	80237ee <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 80237d6:	4620      	mov	r0, r4
 80237d8:	f008 f9c5 	bl	802bb66 <__cxa_guard_acquire>
 80237dc:	b138      	cbz	r0, 80237ee <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 80237de:	4620      	mov	r0, r4
 80237e0:	f008 f9cd 	bl	802bb7e <__cxa_guard_release>
 80237e4:	4a0e      	ldr	r2, [pc, #56]	@ (8023820 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80237e6:	490f      	ldr	r1, [pc, #60]	@ (8023824 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80237e8:	480f      	ldr	r0, [pc, #60]	@ (8023828 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80237ea:	f008 f9b5 	bl	802bb58 <__aeabi_atexit>
 80237ee:	4c0f      	ldr	r4, [pc, #60]	@ (802382c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80237f0:	e8d4 3f8f 	ldab	r3, [r4]
 80237f4:	07db      	lsls	r3, r3, #31
 80237f6:	d40b      	bmi.n	8023810 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 80237f8:	4620      	mov	r0, r4
 80237fa:	f008 f9b4 	bl	802bb66 <__cxa_guard_acquire>
 80237fe:	b138      	cbz	r0, 8023810 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8023800:	4620      	mov	r0, r4
 8023802:	f008 f9bc 	bl	802bb7e <__cxa_guard_release>
 8023806:	4a06      	ldr	r2, [pc, #24]	@ (8023820 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023808:	4909      	ldr	r1, [pc, #36]	@ (8023830 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802380a:	480a      	ldr	r0, [pc, #40]	@ (8023834 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802380c:	f008 f9a4 	bl	802bb58 <__aeabi_atexit>
 8023810:	4b05      	ldr	r3, [pc, #20]	@ (8023828 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023812:	666b      	str	r3, [r5, #100]	@ 0x64
 8023814:	4b07      	ldr	r3, [pc, #28]	@ (8023834 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023816:	66ab      	str	r3, [r5, #104]	@ 0x68
 8023818:	bd38      	pop	{r3, r4, r5, pc}
 802381a:	bf00      	nop
 802381c:	2005bb5c 	.word	0x2005bb5c
 8023820:	20000000 	.word	0x20000000
 8023824:	0801f3fb 	.word	0x0801f3fb
 8023828:	20000060 	.word	0x20000060
 802382c:	2005bb60 	.word	0x2005bb60
 8023830:	0801f3f9 	.word	0x0801f3f9
 8023834:	20000064 	.word	0x20000064

08023838 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023838:	b538      	push	{r3, r4, r5, lr}
 802383a:	4605      	mov	r5, r0
 802383c:	4c13      	ldr	r4, [pc, #76]	@ (802388c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 802383e:	e8d4 3f8f 	ldab	r3, [r4]
 8023842:	07da      	lsls	r2, r3, #31
 8023844:	d40b      	bmi.n	802385e <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 8023846:	4620      	mov	r0, r4
 8023848:	f008 f98d 	bl	802bb66 <__cxa_guard_acquire>
 802384c:	b138      	cbz	r0, 802385e <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 802384e:	4620      	mov	r0, r4
 8023850:	f008 f995 	bl	802bb7e <__cxa_guard_release>
 8023854:	4a0e      	ldr	r2, [pc, #56]	@ (8023890 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023856:	490f      	ldr	r1, [pc, #60]	@ (8023894 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023858:	480f      	ldr	r0, [pc, #60]	@ (8023898 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802385a:	f008 f97d 	bl	802bb58 <__aeabi_atexit>
 802385e:	4c0f      	ldr	r4, [pc, #60]	@ (802389c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023860:	e8d4 3f8f 	ldab	r3, [r4]
 8023864:	07db      	lsls	r3, r3, #31
 8023866:	d40b      	bmi.n	8023880 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8023868:	4620      	mov	r0, r4
 802386a:	f008 f97c 	bl	802bb66 <__cxa_guard_acquire>
 802386e:	b138      	cbz	r0, 8023880 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8023870:	4620      	mov	r0, r4
 8023872:	f008 f984 	bl	802bb7e <__cxa_guard_release>
 8023876:	4a06      	ldr	r2, [pc, #24]	@ (8023890 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023878:	4909      	ldr	r1, [pc, #36]	@ (80238a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802387a:	480a      	ldr	r0, [pc, #40]	@ (80238a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802387c:	f008 f96c 	bl	802bb58 <__aeabi_atexit>
 8023880:	4b05      	ldr	r3, [pc, #20]	@ (8023898 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023882:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8023884:	4b07      	ldr	r3, [pc, #28]	@ (80238a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023886:	662b      	str	r3, [r5, #96]	@ 0x60
 8023888:	bd38      	pop	{r3, r4, r5, pc}
 802388a:	bf00      	nop
 802388c:	2005bb34 	.word	0x2005bb34
 8023890:	20000000 	.word	0x20000000
 8023894:	0801f3ff 	.word	0x0801f3ff
 8023898:	20000038 	.word	0x20000038
 802389c:	2005bb38 	.word	0x2005bb38
 80238a0:	0801f3fd 	.word	0x0801f3fd
 80238a4:	2000003c 	.word	0x2000003c

080238a8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80238a8:	b510      	push	{r4, lr}
 80238aa:	4604      	mov	r4, r0
 80238ac:	f7ff ff8c 	bl	80237c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80238b0:	4620      	mov	r0, r4
 80238b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238b6:	f7ff bfbf 	b.w	8023838 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080238bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80238bc:	b538      	push	{r3, r4, r5, lr}
 80238be:	4605      	mov	r5, r0
 80238c0:	4c13      	ldr	r4, [pc, #76]	@ (8023910 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 80238c2:	e8d4 3f8f 	ldab	r3, [r4]
 80238c6:	07da      	lsls	r2, r3, #31
 80238c8:	d40b      	bmi.n	80238e2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 80238ca:	4620      	mov	r0, r4
 80238cc:	f008 f94b 	bl	802bb66 <__cxa_guard_acquire>
 80238d0:	b138      	cbz	r0, 80238e2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 80238d2:	4620      	mov	r0, r4
 80238d4:	f008 f953 	bl	802bb7e <__cxa_guard_release>
 80238d8:	4a0e      	ldr	r2, [pc, #56]	@ (8023914 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80238da:	490f      	ldr	r1, [pc, #60]	@ (8023918 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80238dc:	480f      	ldr	r0, [pc, #60]	@ (802391c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80238de:	f008 f93b 	bl	802bb58 <__aeabi_atexit>
 80238e2:	4c0f      	ldr	r4, [pc, #60]	@ (8023920 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80238e4:	e8d4 3f8f 	ldab	r3, [r4]
 80238e8:	07db      	lsls	r3, r3, #31
 80238ea:	d40b      	bmi.n	8023904 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 80238ec:	4620      	mov	r0, r4
 80238ee:	f008 f93a 	bl	802bb66 <__cxa_guard_acquire>
 80238f2:	b138      	cbz	r0, 8023904 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 80238f4:	4620      	mov	r0, r4
 80238f6:	f008 f942 	bl	802bb7e <__cxa_guard_release>
 80238fa:	4a06      	ldr	r2, [pc, #24]	@ (8023914 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80238fc:	4909      	ldr	r1, [pc, #36]	@ (8023924 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80238fe:	480a      	ldr	r0, [pc, #40]	@ (8023928 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023900:	f008 f92a 	bl	802bb58 <__aeabi_atexit>
 8023904:	4b05      	ldr	r3, [pc, #20]	@ (802391c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023906:	676b      	str	r3, [r5, #116]	@ 0x74
 8023908:	4b07      	ldr	r3, [pc, #28]	@ (8023928 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802390a:	67ab      	str	r3, [r5, #120]	@ 0x78
 802390c:	bd38      	pop	{r3, r4, r5, pc}
 802390e:	bf00      	nop
 8023910:	2005bb2c 	.word	0x2005bb2c
 8023914:	20000000 	.word	0x20000000
 8023918:	0801f3f3 	.word	0x0801f3f3
 802391c:	20000030 	.word	0x20000030
 8023920:	2005bb30 	.word	0x2005bb30
 8023924:	0801f3f1 	.word	0x0801f3f1
 8023928:	20000034 	.word	0x20000034

0802392c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 802392c:	b538      	push	{r3, r4, r5, lr}
 802392e:	4605      	mov	r5, r0
 8023930:	4c13      	ldr	r4, [pc, #76]	@ (8023980 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 8023932:	e8d4 3f8f 	ldab	r3, [r4]
 8023936:	07da      	lsls	r2, r3, #31
 8023938:	d40b      	bmi.n	8023952 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 802393a:	4620      	mov	r0, r4
 802393c:	f008 f913 	bl	802bb66 <__cxa_guard_acquire>
 8023940:	b138      	cbz	r0, 8023952 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 8023942:	4620      	mov	r0, r4
 8023944:	f008 f91b 	bl	802bb7e <__cxa_guard_release>
 8023948:	4a0e      	ldr	r2, [pc, #56]	@ (8023984 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802394a:	490f      	ldr	r1, [pc, #60]	@ (8023988 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802394c:	480f      	ldr	r0, [pc, #60]	@ (802398c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802394e:	f008 f903 	bl	802bb58 <__aeabi_atexit>
 8023952:	4c0f      	ldr	r4, [pc, #60]	@ (8023990 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023954:	e8d4 3f8f 	ldab	r3, [r4]
 8023958:	07db      	lsls	r3, r3, #31
 802395a:	d40b      	bmi.n	8023974 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 802395c:	4620      	mov	r0, r4
 802395e:	f008 f902 	bl	802bb66 <__cxa_guard_acquire>
 8023962:	b138      	cbz	r0, 8023974 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 8023964:	4620      	mov	r0, r4
 8023966:	f008 f90a 	bl	802bb7e <__cxa_guard_release>
 802396a:	4a06      	ldr	r2, [pc, #24]	@ (8023984 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802396c:	4909      	ldr	r1, [pc, #36]	@ (8023994 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802396e:	480a      	ldr	r0, [pc, #40]	@ (8023998 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023970:	f008 f8f2 	bl	802bb58 <__aeabi_atexit>
 8023974:	4b05      	ldr	r3, [pc, #20]	@ (802398c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023976:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8023978:	4b07      	ldr	r3, [pc, #28]	@ (8023998 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802397a:	672b      	str	r3, [r5, #112]	@ 0x70
 802397c:	bd38      	pop	{r3, r4, r5, pc}
 802397e:	bf00      	nop
 8023980:	2005bb24 	.word	0x2005bb24
 8023984:	20000000 	.word	0x20000000
 8023988:	0801f3f7 	.word	0x0801f3f7
 802398c:	20000028 	.word	0x20000028
 8023990:	2005bb28 	.word	0x2005bb28
 8023994:	0801f3f5 	.word	0x0801f3f5
 8023998:	2000002c 	.word	0x2000002c

0802399c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 802399c:	b510      	push	{r4, lr}
 802399e:	4604      	mov	r4, r0
 80239a0:	f7ff ff8c 	bl	80238bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80239a4:	4620      	mov	r0, r4
 80239a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239aa:	f7ff bfbf 	b.w	802392c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080239ae <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80239ae:	b510      	push	{r4, lr}
 80239b0:	4604      	mov	r4, r0
 80239b2:	f7ff fff3 	bl	802399c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80239b6:	4620      	mov	r0, r4
 80239b8:	f7ff ff76 	bl	80238a8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80239bc:	4620      	mov	r0, r4
 80239be:	f7ff fe09 	bl	80235d4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80239c2:	4620      	mov	r0, r4
 80239c4:	f7ff fd12 	bl	80233ec <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 80239c8:	4620      	mov	r0, r4
 80239ca:	f7ff fd89 	bl	80234e0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 80239ce:	4620      	mov	r0, r4
 80239d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239d4:	f7ff bee8 	b.w	80237a8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080239d8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 80239d8:	b538      	push	{r3, r4, r5, lr}
 80239da:	4605      	mov	r5, r0
 80239dc:	4c09      	ldr	r4, [pc, #36]	@ (8023a04 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x2c>)
 80239de:	e8d4 3f8f 	ldab	r3, [r4]
 80239e2:	07db      	lsls	r3, r3, #31
 80239e4:	d40b      	bmi.n	80239fe <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 80239e6:	4620      	mov	r0, r4
 80239e8:	f008 f8bd 	bl	802bb66 <__cxa_guard_acquire>
 80239ec:	b138      	cbz	r0, 80239fe <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 80239ee:	4620      	mov	r0, r4
 80239f0:	f008 f8c5 	bl	802bb7e <__cxa_guard_release>
 80239f4:	4a04      	ldr	r2, [pc, #16]	@ (8023a08 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 80239f6:	4905      	ldr	r1, [pc, #20]	@ (8023a0c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 80239f8:	4805      	ldr	r0, [pc, #20]	@ (8023a10 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 80239fa:	f008 f8ad 	bl	802bb58 <__aeabi_atexit>
 80239fe:	4b04      	ldr	r3, [pc, #16]	@ (8023a10 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8023a00:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8023a02:	bd38      	pop	{r3, r4, r5, pc}
 8023a04:	2005bb18 	.word	0x2005bb18
 8023a08:	20000000 	.word	0x20000000
 8023a0c:	0801f3ef 	.word	0x0801f3ef
 8023a10:	20000020 	.word	0x20000020

08023a14 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8023a14:	b538      	push	{r3, r4, r5, lr}
 8023a16:	4605      	mov	r5, r0
 8023a18:	4c0a      	ldr	r4, [pc, #40]	@ (8023a44 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8023a1a:	e8d4 3f8f 	ldab	r3, [r4]
 8023a1e:	07db      	lsls	r3, r3, #31
 8023a20:	d40b      	bmi.n	8023a3a <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8023a22:	4620      	mov	r0, r4
 8023a24:	f008 f89f 	bl	802bb66 <__cxa_guard_acquire>
 8023a28:	b138      	cbz	r0, 8023a3a <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8023a2a:	4620      	mov	r0, r4
 8023a2c:	f008 f8a7 	bl	802bb7e <__cxa_guard_release>
 8023a30:	4a05      	ldr	r2, [pc, #20]	@ (8023a48 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8023a32:	4906      	ldr	r1, [pc, #24]	@ (8023a4c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8023a34:	4806      	ldr	r0, [pc, #24]	@ (8023a50 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023a36:	f008 f88f 	bl	802bb58 <__aeabi_atexit>
 8023a3a:	4b05      	ldr	r3, [pc, #20]	@ (8023a50 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023a3c:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8023a40:	bd38      	pop	{r3, r4, r5, pc}
 8023a42:	bf00      	nop
 8023a44:	2005bb1c 	.word	0x2005bb1c
 8023a48:	20000000 	.word	0x20000000
 8023a4c:	0801f3ed 	.word	0x0801f3ed
 8023a50:	20000024 	.word	0x20000024

08023a54 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8023a54:	b570      	push	{r4, r5, r6, lr}
 8023a56:	4606      	mov	r6, r0
 8023a58:	4d0b      	ldr	r5, [pc, #44]	@ (8023a88 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8023a5a:	e8d5 3f8f 	ldab	r3, [r5]
 8023a5e:	f013 0f01 	tst.w	r3, #1
 8023a62:	4c0a      	ldr	r4, [pc, #40]	@ (8023a8c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8023a64:	d10d      	bne.n	8023a82 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8023a66:	4628      	mov	r0, r5
 8023a68:	f008 f87d 	bl	802bb66 <__cxa_guard_acquire>
 8023a6c:	b148      	cbz	r0, 8023a82 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8023a6e:	4b08      	ldr	r3, [pc, #32]	@ (8023a90 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8023a70:	4628      	mov	r0, r5
 8023a72:	6023      	str	r3, [r4, #0]
 8023a74:	f008 f883 	bl	802bb7e <__cxa_guard_release>
 8023a78:	4a06      	ldr	r2, [pc, #24]	@ (8023a94 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8023a7a:	4907      	ldr	r1, [pc, #28]	@ (8023a98 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8023a7c:	4620      	mov	r0, r4
 8023a7e:	f008 f86b 	bl	802bb58 <__aeabi_atexit>
 8023a82:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8023a86:	bd70      	pop	{r4, r5, r6, pc}
 8023a88:	2005bb20 	.word	0x2005bb20
 8023a8c:	2005bc98 	.word	0x2005bc98
 8023a90:	0802fa4c 	.word	0x0802fa4c
 8023a94:	20000000 	.word	0x20000000
 8023a98:	0801f3eb 	.word	0x0801f3eb

08023a9c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8023a9c:	b510      	push	{r4, lr}
 8023a9e:	4604      	mov	r4, r0
 8023aa0:	f7ff ff9a 	bl	80239d8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8023aa4:	4620      	mov	r0, r4
 8023aa6:	f7ff ffb5 	bl	8023a14 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8023aaa:	4620      	mov	r0, r4
 8023aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ab0:	f7ff bfd0 	b.w	8023a54 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08023ab4 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 8023ab4:	b570      	push	{r4, r5, r6, lr}
 8023ab6:	4606      	mov	r6, r0
 8023ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8023ae8 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x34>)
 8023aba:	e8d5 3f8f 	ldab	r3, [r5]
 8023abe:	f013 0f01 	tst.w	r3, #1
 8023ac2:	4c0a      	ldr	r4, [pc, #40]	@ (8023aec <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8023ac4:	d10d      	bne.n	8023ae2 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8023ac6:	4628      	mov	r0, r5
 8023ac8:	f008 f84d 	bl	802bb66 <__cxa_guard_acquire>
 8023acc:	b148      	cbz	r0, 8023ae2 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8023ace:	4b08      	ldr	r3, [pc, #32]	@ (8023af0 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8023ad0:	4628      	mov	r0, r5
 8023ad2:	6023      	str	r3, [r4, #0]
 8023ad4:	f008 f853 	bl	802bb7e <__cxa_guard_release>
 8023ad8:	4a06      	ldr	r2, [pc, #24]	@ (8023af4 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 8023ada:	4907      	ldr	r1, [pc, #28]	@ (8023af8 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8023adc:	4620      	mov	r0, r4
 8023ade:	f008 f83b 	bl	802bb58 <__aeabi_atexit>
 8023ae2:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8023ae6:	bd70      	pop	{r4, r5, r6, pc}
 8023ae8:	2005bb14 	.word	0x2005bb14
 8023aec:	2005bb94 	.word	0x2005bb94
 8023af0:	0802fa68 	.word	0x0802fa68
 8023af4:	20000000 	.word	0x20000000
 8023af8:	0801f3e9 	.word	0x0801f3e9

08023afc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b00:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8023b04:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8023b08:	fb05 4c0e 	mla	ip, r5, lr, r4
 8023b0c:	2d00      	cmp	r5, #0
 8023b0e:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8023b12:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8023b16:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8023b1a:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8023b1e:	eb02 0a0c 	add.w	sl, r2, ip
 8023b22:	8808      	ldrh	r0, [r1, #0]
 8023b24:	f2c0 80b0 	blt.w	8023c88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023b28:	45ab      	cmp	fp, r5
 8023b2a:	f340 80ad 	ble.w	8023c88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023b2e:	2c00      	cmp	r4, #0
 8023b30:	f2c0 80a8 	blt.w	8023c84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023b34:	45a6      	cmp	lr, r4
 8023b36:	f340 80a5 	ble.w	8023c84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023b3a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8023b3e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8023b42:	1c62      	adds	r2, r4, #1
 8023b44:	f100 80a3 	bmi.w	8023c8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023b48:	4596      	cmp	lr, r2
 8023b4a:	f340 80a0 	ble.w	8023c8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023b4e:	f1b9 0f00 	cmp.w	r9, #0
 8023b52:	f000 809c 	beq.w	8023c8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023b56:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023b5a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8023b5e:	3501      	adds	r5, #1
 8023b60:	f100 8099 	bmi.w	8023c96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023b64:	45ab      	cmp	fp, r5
 8023b66:	f340 8096 	ble.w	8023c96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023b6a:	2f00      	cmp	r7, #0
 8023b6c:	f000 8093 	beq.w	8023c96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023b70:	2c00      	cmp	r4, #0
 8023b72:	f2c0 808e 	blt.w	8023c92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023b76:	45a6      	cmp	lr, r4
 8023b78:	f340 808b 	ble.w	8023c92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023b7c:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8023b80:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8023b84:	3401      	adds	r4, #1
 8023b86:	f100 8089 	bmi.w	8023c9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023b8a:	45a6      	cmp	lr, r4
 8023b8c:	f340 8086 	ble.w	8023c9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023b90:	f1b9 0f00 	cmp.w	r9, #0
 8023b94:	f000 8082 	beq.w	8023c9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023b98:	44d6      	add	lr, sl
 8023b9a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023b9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8023ba2:	fb19 fe07 	smulbb	lr, r9, r7
 8023ba6:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8023baa:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023bae:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8023bb2:	ea44 0808 	orr.w	r8, r4, r8
 8023bb6:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8023bba:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8023bbe:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023bc2:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8023bc6:	ea44 0c0c 	orr.w	ip, r4, ip
 8023bca:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8023bce:	fb04 f40c 	mul.w	r4, r4, ip
 8023bd2:	f1c7 0210 	rsb	r2, r7, #16
 8023bd6:	eba2 0209 	sub.w	r2, r2, r9
 8023bda:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8023bde:	fb02 4808 	mla	r8, r2, r8, r4
 8023be2:	b2b4      	uxth	r4, r6
 8023be4:	43f6      	mvns	r6, r6
 8023be6:	041a      	lsls	r2, r3, #16
 8023be8:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023bec:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023bf0:	4313      	orrs	r3, r2
 8023bf2:	fb0e 8303 	mla	r3, lr, r3, r8
 8023bf6:	042a      	lsls	r2, r5, #16
 8023bf8:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023bfc:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8023c00:	432a      	orrs	r2, r5
 8023c02:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8023c06:	fb07 3202 	mla	r2, r7, r2, r3
 8023c0a:	0d53      	lsrs	r3, r2, #21
 8023c0c:	0952      	lsrs	r2, r2, #5
 8023c0e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023c12:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023c16:	431a      	orrs	r2, r3
 8023c18:	b293      	uxth	r3, r2
 8023c1a:	1202      	asrs	r2, r0, #8
 8023c1c:	b2f6      	uxtb	r6, r6
 8023c1e:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023c22:	fb12 f206 	smulbb	r2, r2, r6
 8023c26:	10c7      	asrs	r7, r0, #3
 8023c28:	00c0      	lsls	r0, r0, #3
 8023c2a:	b2c0      	uxtb	r0, r0
 8023c2c:	121d      	asrs	r5, r3, #8
 8023c2e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8023c32:	fb10 f006 	smulbb	r0, r0, r6
 8023c36:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023c3a:	fb17 f706 	smulbb	r7, r7, r6
 8023c3e:	fb05 2504 	mla	r5, r5, r4, r2
 8023c42:	10da      	asrs	r2, r3, #3
 8023c44:	00db      	lsls	r3, r3, #3
 8023c46:	b2db      	uxtb	r3, r3
 8023c48:	fb03 0004 	mla	r0, r3, r4, r0
 8023c4c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023c50:	fb02 7204 	mla	r2, r2, r4, r7
 8023c54:	b2ad      	uxth	r5, r5
 8023c56:	b280      	uxth	r0, r0
 8023c58:	1c6b      	adds	r3, r5, #1
 8023c5a:	b292      	uxth	r2, r2
 8023c5c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023c60:	1c43      	adds	r3, r0, #1
 8023c62:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023c66:	1c50      	adds	r0, r2, #1
 8023c68:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023c6c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8023c70:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023c74:	0952      	lsrs	r2, r2, #5
 8023c76:	432b      	orrs	r3, r5
 8023c78:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023c7c:	4313      	orrs	r3, r2
 8023c7e:	800b      	strh	r3, [r1, #0]
 8023c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c84:	4680      	mov	r8, r0
 8023c86:	e75c      	b.n	8023b42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8023c88:	4684      	mov	ip, r0
 8023c8a:	4680      	mov	r8, r0
 8023c8c:	e767      	b.n	8023b5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8023c8e:	4684      	mov	ip, r0
 8023c90:	e765      	b.n	8023b5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8023c92:	4605      	mov	r5, r0
 8023c94:	e776      	b.n	8023b84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8023c96:	4603      	mov	r3, r0
 8023c98:	4605      	mov	r5, r0
 8023c9a:	e782      	b.n	8023ba2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8023c9c:	4603      	mov	r3, r0
 8023c9e:	e780      	b.n	8023ba2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08023ca0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ca4:	b099      	sub	sp, #100	@ 0x64
 8023ca6:	9215      	str	r2, [sp, #84]	@ 0x54
 8023ca8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8023caa:	9016      	str	r0, [sp, #88]	@ 0x58
 8023cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8023cae:	6850      	ldr	r0, [r2, #4]
 8023cb0:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8023cb4:	910c      	str	r1, [sp, #48]	@ 0x30
 8023cb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8023cb8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8023cbc:	fb00 1303 	mla	r3, r0, r3, r1
 8023cc0:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8023cc4:	6812      	ldr	r2, [r2, #0]
 8023cc6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8023cca:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023ccc:	681b      	ldr	r3, [r3, #0]
 8023cce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023cd0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023cd2:	685e      	ldr	r6, [r3, #4]
 8023cd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023cd6:	3604      	adds	r6, #4
 8023cd8:	43db      	mvns	r3, r3
 8023cda:	b2db      	uxtb	r3, r3
 8023cdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8023cde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ce0:	2b00      	cmp	r3, #0
 8023ce2:	dc03      	bgt.n	8023cec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023ce4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023ce6:	2b00      	cmp	r3, #0
 8023ce8:	f340 8225 	ble.w	8024136 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023cec:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023cee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023cf2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023cf6:	1e48      	subs	r0, r1, #1
 8023cf8:	1e57      	subs	r7, r2, #1
 8023cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023cfc:	2b00      	cmp	r3, #0
 8023cfe:	f340 80e3 	ble.w	8023ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023d02:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8023d06:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023d0a:	d406      	bmi.n	8023d1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023d0c:	4584      	cmp	ip, r0
 8023d0e:	da04      	bge.n	8023d1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023d10:	2b00      	cmp	r3, #0
 8023d12:	db02      	blt.n	8023d1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023d14:	42bb      	cmp	r3, r7
 8023d16:	f2c0 80d8 	blt.w	8023eca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023d1a:	f11c 0c01 	adds.w	ip, ip, #1
 8023d1e:	f100 80c9 	bmi.w	8023eb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023d22:	4561      	cmp	r1, ip
 8023d24:	f2c0 80c6 	blt.w	8023eb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023d28:	3301      	adds	r3, #1
 8023d2a:	f100 80c3 	bmi.w	8023eb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023d2e:	429a      	cmp	r2, r3
 8023d30:	f2c0 80c0 	blt.w	8023eb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023d34:	4647      	mov	r7, r8
 8023d36:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8023d3a:	f1bb 0f00 	cmp.w	fp, #0
 8023d3e:	f340 80e3 	ble.w	8023f08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8023d42:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8023d44:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023d46:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023d4a:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023d4e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023d52:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023d56:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023d5a:	689b      	ldr	r3, [r3, #8]
 8023d5c:	f100 8121 	bmi.w	8023fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023d60:	f103 39ff 	add.w	r9, r3, #4294967295
 8023d64:	454a      	cmp	r2, r9
 8023d66:	f280 811c 	bge.w	8023fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023d6a:	f1bc 0f00 	cmp.w	ip, #0
 8023d6e:	f2c0 8118 	blt.w	8023fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023d72:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023d76:	45cc      	cmp	ip, r9
 8023d78:	f280 8113 	bge.w	8023fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023d7c:	b21b      	sxth	r3, r3
 8023d7e:	fb0c 2203 	mla	r2, ip, r3, r2
 8023d82:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023d84:	eb04 0902 	add.w	r9, r4, r2
 8023d88:	5ca2      	ldrb	r2, [r4, r2]
 8023d8a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8023d8e:	2800      	cmp	r0, #0
 8023d90:	f000 80fe 	beq.w	8023f90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8023d94:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023d98:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8023d9c:	9211      	str	r2, [sp, #68]	@ 0x44
 8023d9e:	b151      	cbz	r1, 8023db6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023da0:	eb09 0203 	add.w	r2, r9, r3
 8023da4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023da8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023dac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023dae:	7853      	ldrb	r3, [r2, #1]
 8023db0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023db4:	9312      	str	r3, [sp, #72]	@ 0x48
 8023db6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023db8:	fb10 f201 	smulbb	r2, r0, r1
 8023dbc:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023dc0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023dc4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023dc8:	ea4c 0c03 	orr.w	ip, ip, r3
 8023dcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023dce:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023dd0:	041b      	lsls	r3, r3, #16
 8023dd2:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8023dd6:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8023dda:	10d2      	asrs	r2, r2, #3
 8023ddc:	4323      	orrs	r3, r4
 8023dde:	4353      	muls	r3, r2
 8023de0:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8023de4:	fb09 330c 	mla	r3, r9, ip, r3
 8023de8:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023dec:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023df0:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8023df4:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023df8:	f1c1 0c10 	rsb	ip, r1, #16
 8023dfc:	ebac 0c00 	sub.w	ip, ip, r0
 8023e00:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023e04:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023e08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023e0a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023e0e:	0418      	lsls	r0, r3, #16
 8023e10:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8023e14:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023e18:	4318      	orrs	r0, r3
 8023e1a:	fb02 c200 	mla	r2, r2, r0, ip
 8023e1e:	8838      	ldrh	r0, [r7, #0]
 8023e20:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023e22:	0d53      	lsrs	r3, r2, #21
 8023e24:	1201      	asrs	r1, r0, #8
 8023e26:	0952      	lsrs	r2, r2, #5
 8023e28:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023e2c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023e30:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8023e34:	431a      	orrs	r2, r3
 8023e36:	fb11 f104 	smulbb	r1, r1, r4
 8023e3a:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8023e3e:	00c0      	lsls	r0, r0, #3
 8023e40:	b292      	uxth	r2, r2
 8023e42:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8023e46:	b2c0      	uxtb	r0, r0
 8023e48:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8023e4c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8023e50:	fb1e fe04 	smulbb	lr, lr, r4
 8023e54:	fb10 f004 	smulbb	r0, r0, r4
 8023e58:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8023e5c:	fb0c 1c03 	mla	ip, ip, r3, r1
 8023e60:	10d1      	asrs	r1, r2, #3
 8023e62:	00d2      	lsls	r2, r2, #3
 8023e64:	b2d2      	uxtb	r2, r2
 8023e66:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023e6a:	fb01 e103 	mla	r1, r1, r3, lr
 8023e6e:	fb02 0303 	mla	r3, r2, r3, r0
 8023e72:	fa1f fc8c 	uxth.w	ip, ip
 8023e76:	b29a      	uxth	r2, r3
 8023e78:	f10c 0301 	add.w	r3, ip, #1
 8023e7c:	b289      	uxth	r1, r1
 8023e7e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023e82:	1c53      	adds	r3, r2, #1
 8023e84:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023e88:	1c4a      	adds	r2, r1, #1
 8023e8a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023e8e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8023e92:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023e96:	0949      	lsrs	r1, r1, #5
 8023e98:	ea43 030c 	orr.w	r3, r3, ip
 8023e9c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023ea0:	430b      	orrs	r3, r1
 8023ea2:	803b      	strh	r3, [r7, #0]
 8023ea4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023ea6:	3702      	adds	r7, #2
 8023ea8:	449a      	add	sl, r3
 8023eaa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023eac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023eb0:	441d      	add	r5, r3
 8023eb2:	e742      	b.n	8023d3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023eb4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023eb6:	f108 0802 	add.w	r8, r8, #2
 8023eba:	449a      	add	sl, r3
 8023ebc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023ebe:	441d      	add	r5, r3
 8023ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ec2:	3b01      	subs	r3, #1
 8023ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8023ec6:	e718      	b.n	8023cfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023ec8:	d023      	beq.n	8023f12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8023eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ecc:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8023ece:	3b01      	subs	r3, #1
 8023ed0:	fb00 a003 	mla	r0, r0, r3, sl
 8023ed4:	1400      	asrs	r0, r0, #16
 8023ed6:	f53f af2d 	bmi.w	8023d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023eda:	3901      	subs	r1, #1
 8023edc:	4288      	cmp	r0, r1
 8023ede:	f6bf af29 	bge.w	8023d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023ee2:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8023ee4:	fb01 5303 	mla	r3, r1, r3, r5
 8023ee8:	141b      	asrs	r3, r3, #16
 8023eea:	f53f af23 	bmi.w	8023d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023eee:	3a01      	subs	r2, #1
 8023ef0:	4293      	cmp	r3, r2
 8023ef2:	f6bf af1f 	bge.w	8023d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023ef6:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8023efa:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8023efe:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8023f02:	f1be 0f00 	cmp.w	lr, #0
 8023f06:	dc6c      	bgt.n	8023fe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f0a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023f0e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8023f12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f14:	2b00      	cmp	r3, #0
 8023f16:	f340 810e 	ble.w	8024136 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023f1e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023f22:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023f26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023f2a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023f2e:	eef0 6a62 	vmov.f32	s13, s5
 8023f32:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023f36:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023f3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023f3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023f46:	ee16 aa90 	vmov	sl, s13
 8023f4a:	eef0 6a43 	vmov.f32	s13, s6
 8023f4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023f52:	ee12 2a90 	vmov	r2, s5
 8023f56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023f5a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023f5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f60:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f64:	ee13 2a10 	vmov	r2, s6
 8023f68:	9325      	str	r3, [sp, #148]	@ 0x94
 8023f6a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023f6c:	ee16 5a90 	vmov	r5, s13
 8023f70:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f74:	9326      	str	r3, [sp, #152]	@ 0x98
 8023f76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f78:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023f7a:	3b01      	subs	r3, #1
 8023f7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8023f7e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023f80:	bf08      	it	eq
 8023f82:	4613      	moveq	r3, r2
 8023f84:	eeb0 3a67 	vmov.f32	s6, s15
 8023f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f8a:	eef0 2a47 	vmov.f32	s5, s14
 8023f8e:	e6a6      	b.n	8023cde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023f90:	2900      	cmp	r1, #0
 8023f92:	f43f af10 	beq.w	8023db6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023f96:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023f9a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023f9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023fa0:	e709      	b.n	8023db6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023fa2:	f112 0901 	adds.w	r9, r2, #1
 8023fa6:	f53f af7d 	bmi.w	8023ea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023faa:	454b      	cmp	r3, r9
 8023fac:	f6ff af7a 	blt.w	8023ea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023fb0:	f11c 0901 	adds.w	r9, ip, #1
 8023fb4:	f53f af76 	bmi.w	8023ea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023fb8:	45ce      	cmp	lr, r9
 8023fba:	f6ff af73 	blt.w	8023ea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023fbe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023fc0:	9202      	str	r2, [sp, #8]
 8023fc2:	b21b      	sxth	r3, r3
 8023fc4:	fa0f f28e 	sxth.w	r2, lr
 8023fc8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023fcc:	e9cd c003 	strd	ip, r0, [sp, #12]
 8023fd0:	9201      	str	r2, [sp, #4]
 8023fd2:	9300      	str	r3, [sp, #0]
 8023fd4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023fd6:	4633      	mov	r3, r6
 8023fd8:	4639      	mov	r1, r7
 8023fda:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8023fdc:	f7ff fd8e 	bl	8023afc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8023fe0:	e760      	b.n	8023ea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023fe2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023fe4:	ea4f 422a 	mov.w	r2, sl, asr #16
 8023fe8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023fec:	1429      	asrs	r1, r5, #16
 8023fee:	fb03 2101 	mla	r1, r3, r1, r2
 8023ff2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023ff4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023ff6:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8023ffa:	440a      	add	r2, r1
 8023ffc:	5c61      	ldrb	r1, [r4, r1]
 8023ffe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024002:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8024006:	f1bc 0f00 	cmp.w	ip, #0
 802400a:	f000 808c 	beq.w	8024126 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802400e:	7857      	ldrb	r7, [r2, #1]
 8024010:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8024014:	9413      	str	r4, [sp, #76]	@ 0x4c
 8024016:	b140      	cbz	r0, 802402a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024018:	18d7      	adds	r7, r2, r3
 802401a:	5cd3      	ldrb	r3, [r2, r3]
 802401c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024020:	9310      	str	r3, [sp, #64]	@ 0x40
 8024022:	787b      	ldrb	r3, [r7, #1]
 8024024:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024028:	9314      	str	r3, [sp, #80]	@ 0x50
 802402a:	fb1c f200 	smulbb	r2, ip, r0
 802402e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024030:	10d2      	asrs	r2, r2, #3
 8024032:	041f      	lsls	r7, r3, #16
 8024034:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 8024038:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802403c:	431f      	orrs	r7, r3
 802403e:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8024042:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024044:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024046:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024048:	041b      	lsls	r3, r3, #16
 802404a:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 802404e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8024052:	ea43 030b 	orr.w	r3, r3, fp
 8024056:	4353      	muls	r3, r2
 8024058:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802405a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802405e:	fb04 3707 	mla	r7, r4, r7, r3
 8024062:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8024066:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 802406a:	ea43 0b01 	orr.w	fp, r3, r1
 802406e:	f1c0 0110 	rsb	r1, r0, #16
 8024072:	eba1 0c0c 	sub.w	ip, r1, ip
 8024076:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802407a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802407c:	fb0c 770b 	mla	r7, ip, fp, r7
 8024080:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024084:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 8024088:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802408c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024090:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024094:	fb02 770c 	mla	r7, r2, ip, r7
 8024098:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802409a:	0d79      	lsrs	r1, r7, #21
 802409c:	8812      	ldrh	r2, [r2, #0]
 802409e:	097f      	lsrs	r7, r7, #5
 80240a0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80240a4:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80240a8:	430f      	orrs	r7, r1
 80240aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80240ac:	1211      	asrs	r1, r2, #8
 80240ae:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80240b2:	b2bb      	uxth	r3, r7
 80240b4:	fb11 f104 	smulbb	r1, r1, r4
 80240b8:	10d7      	asrs	r7, r2, #3
 80240ba:	00d2      	lsls	r2, r2, #3
 80240bc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80240c0:	b2d2      	uxtb	r2, r2
 80240c2:	1218      	asrs	r0, r3, #8
 80240c4:	fb17 f704 	smulbb	r7, r7, r4
 80240c8:	fb12 f204 	smulbb	r2, r2, r4
 80240cc:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80240d0:	fb00 1009 	mla	r0, r0, r9, r1
 80240d4:	10d9      	asrs	r1, r3, #3
 80240d6:	00db      	lsls	r3, r3, #3
 80240d8:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80240dc:	b2db      	uxtb	r3, r3
 80240de:	fb01 7109 	mla	r1, r1, r9, r7
 80240e2:	fb03 2309 	mla	r3, r3, r9, r2
 80240e6:	b280      	uxth	r0, r0
 80240e8:	b29b      	uxth	r3, r3
 80240ea:	b289      	uxth	r1, r1
 80240ec:	1c42      	adds	r2, r0, #1
 80240ee:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80240f2:	1c4f      	adds	r7, r1, #1
 80240f4:	1c5a      	adds	r2, r3, #1
 80240f6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80240fa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80240fe:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8024102:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024106:	0949      	lsrs	r1, r1, #5
 8024108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802410a:	4310      	orrs	r0, r2
 802410c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024110:	4308      	orrs	r0, r1
 8024112:	f823 0b02 	strh.w	r0, [r3], #2
 8024116:	930e      	str	r3, [sp, #56]	@ 0x38
 8024118:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802411a:	f10e 3eff 	add.w	lr, lr, #4294967295
 802411e:	449a      	add	sl, r3
 8024120:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024122:	441d      	add	r5, r3
 8024124:	e6ed      	b.n	8023f02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8024126:	2800      	cmp	r0, #0
 8024128:	f43f af7f 	beq.w	802402a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802412c:	5cd3      	ldrb	r3, [r2, r3]
 802412e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024132:	9310      	str	r3, [sp, #64]	@ 0x40
 8024134:	e779      	b.n	802402a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024136:	b019      	add	sp, #100	@ 0x64
 8024138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802413c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802413c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024140:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8024144:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 8024148:	fb08 470e 	mla	r7, r8, lr, r4
 802414c:	f1b8 0f00 	cmp.w	r8, #0
 8024150:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 8024154:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 8024158:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 802415c:	eb02 0907 	add.w	r9, r2, r7
 8024160:	8808      	ldrh	r0, [r1, #0]
 8024162:	db67      	blt.n	8024234 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024164:	45c2      	cmp	sl, r8
 8024166:	dd65      	ble.n	8024234 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024168:	2c00      	cmp	r4, #0
 802416a:	db61      	blt.n	8024230 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 802416c:	45a6      	cmp	lr, r4
 802416e:	dd5f      	ble.n	8024230 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8024170:	5dd2      	ldrb	r2, [r2, r7]
 8024172:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8024176:	1c62      	adds	r2, r4, #1
 8024178:	d45f      	bmi.n	802423a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802417a:	4596      	cmp	lr, r2
 802417c:	dd5d      	ble.n	802423a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802417e:	2d00      	cmp	r5, #0
 8024180:	d05b      	beq.n	802423a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8024182:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024186:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 802418a:	f118 0801 	adds.w	r8, r8, #1
 802418e:	d458      	bmi.n	8024242 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024190:	45c2      	cmp	sl, r8
 8024192:	dd56      	ble.n	8024242 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024194:	2e00      	cmp	r6, #0
 8024196:	d054      	beq.n	8024242 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024198:	2c00      	cmp	r4, #0
 802419a:	db50      	blt.n	802423e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 802419c:	45a6      	cmp	lr, r4
 802419e:	dd4e      	ble.n	802423e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80241a0:	f819 200e 	ldrb.w	r2, [r9, lr]
 80241a4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80241a8:	3401      	adds	r4, #1
 80241aa:	d407      	bmi.n	80241bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80241ac:	45a6      	cmp	lr, r4
 80241ae:	dd05      	ble.n	80241bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80241b0:	b125      	cbz	r5, 80241bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80241b2:	44ce      	add	lr, r9
 80241b4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80241b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80241bc:	fb15 f406 	smulbb	r4, r5, r6
 80241c0:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80241c4:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80241c8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80241cc:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80241d0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80241d4:	ea43 0c0c 	orr.w	ip, r3, ip
 80241d8:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80241dc:	f1c6 0310 	rsb	r3, r6, #16
 80241e0:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80241e4:	1b5b      	subs	r3, r3, r5
 80241e6:	ea4e 0707 	orr.w	r7, lr, r7
 80241ea:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80241ee:	437d      	muls	r5, r7
 80241f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80241f4:	fb03 5c0c 	mla	ip, r3, ip, r5
 80241f8:	0403      	lsls	r3, r0, #16
 80241fa:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80241fe:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024202:	4318      	orrs	r0, r3
 8024204:	fb04 c000 	mla	r0, r4, r0, ip
 8024208:	0413      	lsls	r3, r2, #16
 802420a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802420e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024212:	4313      	orrs	r3, r2
 8024214:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8024218:	fb06 0003 	mla	r0, r6, r3, r0
 802421c:	0d43      	lsrs	r3, r0, #21
 802421e:	0940      	lsrs	r0, r0, #5
 8024220:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024224:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024228:	4318      	orrs	r0, r3
 802422a:	8008      	strh	r0, [r1, #0]
 802422c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024230:	4684      	mov	ip, r0
 8024232:	e7a0      	b.n	8024176 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8024234:	4607      	mov	r7, r0
 8024236:	4684      	mov	ip, r0
 8024238:	e7a7      	b.n	802418a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802423a:	4607      	mov	r7, r0
 802423c:	e7a5      	b.n	802418a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802423e:	4602      	mov	r2, r0
 8024240:	e7b2      	b.n	80241a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8024242:	4602      	mov	r2, r0
 8024244:	e7ba      	b.n	80241bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08024246 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802424a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802424e:	b093      	sub	sp, #76	@ 0x4c
 8024250:	920f      	str	r2, [sp, #60]	@ 0x3c
 8024252:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024254:	9010      	str	r0, [sp, #64]	@ 0x40
 8024256:	6850      	ldr	r0, [r2, #4]
 8024258:	9108      	str	r1, [sp, #32]
 802425a:	9306      	str	r3, [sp, #24]
 802425c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8024260:	fb00 1303 	mla	r3, r0, r3, r1
 8024264:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8024268:	6812      	ldr	r2, [r2, #0]
 802426a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802426e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024270:	681b      	ldr	r3, [r3, #0]
 8024272:	9307      	str	r3, [sp, #28]
 8024274:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024276:	685f      	ldr	r7, [r3, #4]
 8024278:	3704      	adds	r7, #4
 802427a:	9b08      	ldr	r3, [sp, #32]
 802427c:	2b00      	cmp	r3, #0
 802427e:	dc03      	bgt.n	8024288 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8024280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024282:	2b00      	cmp	r3, #0
 8024284:	f340 81b2 	ble.w	80245ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8024288:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802428a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802428e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024292:	1e48      	subs	r0, r1, #1
 8024294:	f102 3cff 	add.w	ip, r2, #4294967295
 8024298:	9b06      	ldr	r3, [sp, #24]
 802429a:	2b00      	cmp	r3, #0
 802429c:	f340 80a9 	ble.w	80243f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80242a0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80242a4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80242a8:	d406      	bmi.n	80242b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80242aa:	4586      	cmp	lr, r0
 80242ac:	da04      	bge.n	80242b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80242ae:	2b00      	cmp	r3, #0
 80242b0:	db02      	blt.n	80242b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80242b2:	4563      	cmp	r3, ip
 80242b4:	f2c0 809e 	blt.w	80243f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80242b8:	f11e 0e01 	adds.w	lr, lr, #1
 80242bc:	f100 808f 	bmi.w	80243de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80242c0:	4571      	cmp	r1, lr
 80242c2:	f2c0 808c 	blt.w	80243de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80242c6:	3301      	adds	r3, #1
 80242c8:	f100 8089 	bmi.w	80243de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80242cc:	429a      	cmp	r2, r3
 80242ce:	f2c0 8086 	blt.w	80243de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80242d2:	46c8      	mov	r8, r9
 80242d4:	f8dd b018 	ldr.w	fp, [sp, #24]
 80242d8:	f1bb 0f00 	cmp.w	fp, #0
 80242dc:	f340 80a6 	ble.w	802442c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80242e0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80242e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80242e4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80242e8:	1422      	asrs	r2, r4, #16
 80242ea:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80242ee:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80242f2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80242f6:	689b      	ldr	r3, [r3, #8]
 80242f8:	f100 80e3 	bmi.w	80244c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80242fc:	f103 3aff 	add.w	sl, r3, #4294967295
 8024300:	4552      	cmp	r2, sl
 8024302:	f280 80de 	bge.w	80244c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024306:	f1bc 0f00 	cmp.w	ip, #0
 802430a:	f2c0 80da 	blt.w	80244c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802430e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8024312:	45d4      	cmp	ip, sl
 8024314:	f280 80d5 	bge.w	80244c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024318:	b21b      	sxth	r3, r3
 802431a:	fb0c 2203 	mla	r2, ip, r3, r2
 802431e:	9d07      	ldr	r5, [sp, #28]
 8024320:	eb05 0a02 	add.w	sl, r5, r2
 8024324:	5caa      	ldrb	r2, [r5, r2]
 8024326:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 802432a:	2800      	cmp	r0, #0
 802432c:	f000 80c0 	beq.w	80244b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8024330:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024334:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8024338:	920b      	str	r2, [sp, #44]	@ 0x2c
 802433a:	b151      	cbz	r1, 8024352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802433c:	eb0a 0203 	add.w	r2, sl, r3
 8024340:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024344:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024348:	9309      	str	r3, [sp, #36]	@ 0x24
 802434a:	7853      	ldrb	r3, [r2, #1]
 802434c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024350:	930c      	str	r3, [sp, #48]	@ 0x30
 8024352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024354:	fb10 f201 	smulbb	r2, r0, r1
 8024358:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802435c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024360:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024364:	ea4c 0c03 	orr.w	ip, ip, r3
 8024368:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802436a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802436c:	041b      	lsls	r3, r3, #16
 802436e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8024372:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8024376:	10d2      	asrs	r2, r2, #3
 8024378:	432b      	orrs	r3, r5
 802437a:	4353      	muls	r3, r2
 802437c:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8024380:	fb0a 330c 	mla	r3, sl, ip, r3
 8024384:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024388:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802438c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8024390:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024394:	f1c1 0c10 	rsb	ip, r1, #16
 8024398:	ebac 0c00 	sub.w	ip, ip, r0
 802439c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80243a0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80243a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80243a6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80243aa:	0418      	lsls	r0, r3, #16
 80243ac:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80243b0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80243b4:	4318      	orrs	r0, r3
 80243b6:	fb02 c200 	mla	r2, r2, r0, ip
 80243ba:	0d53      	lsrs	r3, r2, #21
 80243bc:	0952      	lsrs	r2, r2, #5
 80243be:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80243c2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80243c6:	431a      	orrs	r2, r3
 80243c8:	f8a8 2000 	strh.w	r2, [r8]
 80243cc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80243ce:	f108 0802 	add.w	r8, r8, #2
 80243d2:	441c      	add	r4, r3
 80243d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80243d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80243da:	441e      	add	r6, r3
 80243dc:	e77c      	b.n	80242d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80243de:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80243e0:	f109 0902 	add.w	r9, r9, #2
 80243e4:	441c      	add	r4, r3
 80243e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80243e8:	441e      	add	r6, r3
 80243ea:	9b06      	ldr	r3, [sp, #24]
 80243ec:	3b01      	subs	r3, #1
 80243ee:	9306      	str	r3, [sp, #24]
 80243f0:	e752      	b.n	8024298 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80243f2:	d020      	beq.n	8024436 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80243f4:	9b06      	ldr	r3, [sp, #24]
 80243f6:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80243f8:	3b01      	subs	r3, #1
 80243fa:	fb00 4003 	mla	r0, r0, r3, r4
 80243fe:	1400      	asrs	r0, r0, #16
 8024400:	f53f af67 	bmi.w	80242d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024404:	3901      	subs	r1, #1
 8024406:	4288      	cmp	r0, r1
 8024408:	f6bf af63 	bge.w	80242d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802440c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802440e:	fb01 6303 	mla	r3, r1, r3, r6
 8024412:	141b      	asrs	r3, r3, #16
 8024414:	f53f af5d 	bmi.w	80242d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024418:	3a01      	subs	r2, #1
 802441a:	4293      	cmp	r3, r2
 802441c:	f6bf af59 	bge.w	80242d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024420:	46ca      	mov	sl, r9
 8024422:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8024426:	f1b8 0f00 	cmp.w	r8, #0
 802442a:	dc67      	bgt.n	80244fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802442c:	9b06      	ldr	r3, [sp, #24]
 802442e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024432:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024436:	9b08      	ldr	r3, [sp, #32]
 8024438:	2b00      	cmp	r3, #0
 802443a:	f340 80d7 	ble.w	80245ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802443e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024442:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024446:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802444a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802444e:	eeb0 6a62 	vmov.f32	s12, s5
 8024452:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024456:	ee77 2a62 	vsub.f32	s5, s14, s5
 802445a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802445e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024462:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024466:	ee16 4a10 	vmov	r4, s12
 802446a:	eeb0 6a43 	vmov.f32	s12, s6
 802446e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024472:	ee12 2a90 	vmov	r2, s5
 8024476:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802447a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802447c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024480:	fb92 f3f3 	sdiv	r3, r2, r3
 8024484:	ee13 2a10 	vmov	r2, s6
 8024488:	931f      	str	r3, [sp, #124]	@ 0x7c
 802448a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802448c:	ee16 6a10 	vmov	r6, s12
 8024490:	fb92 f3f3 	sdiv	r3, r2, r3
 8024494:	9320      	str	r3, [sp, #128]	@ 0x80
 8024496:	9b08      	ldr	r3, [sp, #32]
 8024498:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802449a:	3b01      	subs	r3, #1
 802449c:	9308      	str	r3, [sp, #32]
 802449e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80244a0:	bf08      	it	eq
 80244a2:	4613      	moveq	r3, r2
 80244a4:	eeb0 3a67 	vmov.f32	s6, s15
 80244a8:	9306      	str	r3, [sp, #24]
 80244aa:	eef0 2a47 	vmov.f32	s5, s14
 80244ae:	e6e4      	b.n	802427a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80244b0:	2900      	cmp	r1, #0
 80244b2:	f43f af4e 	beq.w	8024352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80244b6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80244ba:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80244be:	9309      	str	r3, [sp, #36]	@ 0x24
 80244c0:	e747      	b.n	8024352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80244c2:	f112 0a01 	adds.w	sl, r2, #1
 80244c6:	d481      	bmi.n	80243cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80244c8:	4553      	cmp	r3, sl
 80244ca:	f6ff af7f 	blt.w	80243cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80244ce:	f11c 0a01 	adds.w	sl, ip, #1
 80244d2:	f53f af7b 	bmi.w	80243cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80244d6:	45d6      	cmp	lr, sl
 80244d8:	f6ff af78 	blt.w	80243cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80244dc:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80244e0:	b21b      	sxth	r3, r3
 80244e2:	fa0f f28e 	sxth.w	r2, lr
 80244e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80244ea:	9201      	str	r2, [sp, #4]
 80244ec:	9300      	str	r3, [sp, #0]
 80244ee:	9a07      	ldr	r2, [sp, #28]
 80244f0:	463b      	mov	r3, r7
 80244f2:	4641      	mov	r1, r8
 80244f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80244f6:	f7ff fe21 	bl	802413c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80244fa:	e767      	b.n	80243cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80244fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80244fe:	1422      	asrs	r2, r4, #16
 8024500:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024504:	1431      	asrs	r1, r6, #16
 8024506:	fb03 2101 	mla	r1, r3, r1, r2
 802450a:	9d07      	ldr	r5, [sp, #28]
 802450c:	9a07      	ldr	r2, [sp, #28]
 802450e:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8024512:	440a      	add	r2, r1
 8024514:	5c69      	ldrb	r1, [r5, r1]
 8024516:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802451a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802451e:	f1be 0f00 	cmp.w	lr, #0
 8024522:	d05c      	beq.n	80245de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8024524:	f892 c001 	ldrb.w	ip, [r2, #1]
 8024528:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802452c:	950d      	str	r5, [sp, #52]	@ 0x34
 802452e:	b150      	cbz	r0, 8024546 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024530:	eb02 0c03 	add.w	ip, r2, r3
 8024534:	5cd3      	ldrb	r3, [r2, r3]
 8024536:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802453a:	930a      	str	r3, [sp, #40]	@ 0x28
 802453c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024540:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024544:	930e      	str	r3, [sp, #56]	@ 0x38
 8024546:	fb1e f200 	smulbb	r2, lr, r0
 802454a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802454c:	10d2      	asrs	r2, r2, #3
 802454e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024552:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024556:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802455a:	ea4c 0c03 	orr.w	ip, ip, r3
 802455e:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8024562:	9311      	str	r3, [sp, #68]	@ 0x44
 8024564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024566:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8024568:	041b      	lsls	r3, r3, #16
 802456a:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 802456e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8024572:	ea43 030b 	orr.w	r3, r3, fp
 8024576:	4353      	muls	r3, r2
 8024578:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802457a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802457e:	fb05 3c0c 	mla	ip, r5, ip, r3
 8024582:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8024586:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 802458a:	ea43 0b01 	orr.w	fp, r3, r1
 802458e:	f1c0 0110 	rsb	r1, r0, #16
 8024592:	eba1 0e0e 	sub.w	lr, r1, lr
 8024596:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802459a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802459c:	fb0e cc0b 	mla	ip, lr, fp, ip
 80245a0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80245a4:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80245a8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80245ac:	ea4b 0e0e 	orr.w	lr, fp, lr
 80245b0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80245b4:	fb02 cc0e 	mla	ip, r2, lr, ip
 80245b8:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80245bc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80245c0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80245c4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80245c8:	ea43 0c0c 	orr.w	ip, r3, ip
 80245cc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80245ce:	f82a cb02 	strh.w	ip, [sl], #2
 80245d2:	441c      	add	r4, r3
 80245d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80245d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80245da:	441e      	add	r6, r3
 80245dc:	e723      	b.n	8024426 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80245de:	2800      	cmp	r0, #0
 80245e0:	d0b1      	beq.n	8024546 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80245e2:	5cd3      	ldrb	r3, [r2, r3]
 80245e4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80245e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80245ea:	e7ac      	b.n	8024546 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80245ec:	b013      	add	sp, #76	@ 0x4c
 80245ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080245f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80245f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245f6:	880d      	ldrh	r5, [r1, #0]
 80245f8:	b087      	sub	sp, #28
 80245fa:	10ef      	asrs	r7, r5, #3
 80245fc:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8024600:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8024604:	00ed      	lsls	r5, r5, #3
 8024606:	9701      	str	r7, [sp, #4]
 8024608:	b2ed      	uxtb	r5, r5
 802460a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 802460e:	9502      	str	r5, [sp, #8]
 8024610:	9d01      	ldr	r5, [sp, #4]
 8024612:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8024616:	fb06 0709 	mla	r7, r6, r9, r0
 802461a:	9103      	str	r1, [sp, #12]
 802461c:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8024620:	022d      	lsls	r5, r5, #8
 8024622:	9902      	ldr	r1, [sp, #8]
 8024624:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8024628:	430d      	orrs	r5, r1
 802462a:	2e00      	cmp	r6, #0
 802462c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8024630:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8024634:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 8024638:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 802463c:	eb02 0c07 	add.w	ip, r2, r7
 8024640:	9505      	str	r5, [sp, #20]
 8024642:	f2c0 80b6 	blt.w	80247b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8024646:	45b3      	cmp	fp, r6
 8024648:	f340 80b3 	ble.w	80247b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 802464c:	2800      	cmp	r0, #0
 802464e:	f2c0 80ae 	blt.w	80247ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024652:	4581      	cmp	r9, r0
 8024654:	f340 80ab 	ble.w	80247ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024658:	5dd7      	ldrb	r7, [r2, r7]
 802465a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802465e:	441f      	add	r7, r3
 8024660:	1c42      	adds	r2, r0, #1
 8024662:	f100 80a9 	bmi.w	80247b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024666:	4591      	cmp	r9, r2
 8024668:	f340 80a6 	ble.w	80247b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802466c:	2c00      	cmp	r4, #0
 802466e:	f000 80a3 	beq.w	80247b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024672:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802467a:	441d      	add	r5, r3
 802467c:	3601      	adds	r6, #1
 802467e:	f100 809f 	bmi.w	80247c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024682:	45b3      	cmp	fp, r6
 8024684:	f340 809c 	ble.w	80247c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024688:	f1be 0f00 	cmp.w	lr, #0
 802468c:	f000 8098 	beq.w	80247c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024690:	2800      	cmp	r0, #0
 8024692:	f2c0 8093 	blt.w	80247bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024696:	4581      	cmp	r9, r0
 8024698:	f340 8090 	ble.w	80247bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 802469c:	f81c 6009 	ldrb.w	r6, [ip, r9]
 80246a0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80246a4:	441e      	add	r6, r3
 80246a6:	3001      	adds	r0, #1
 80246a8:	f100 808d 	bmi.w	80247c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80246ac:	4581      	cmp	r9, r0
 80246ae:	f340 808a 	ble.w	80247c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80246b2:	2c00      	cmp	r4, #0
 80246b4:	f000 8087 	beq.w	80247c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80246b8:	44e1      	add	r9, ip
 80246ba:	f899 2001 	ldrb.w	r2, [r9, #1]
 80246be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80246c2:	4413      	add	r3, r2
 80246c4:	b2a4      	uxth	r4, r4
 80246c6:	fa1f fe8e 	uxth.w	lr, lr
 80246ca:	fb04 fb0e 	mul.w	fp, r4, lr
 80246ce:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 80246d2:	fa1f f08e 	uxth.w	r0, lr
 80246d6:	fa1f fe88 	uxth.w	lr, r8
 80246da:	ea6f 0808 	mvn.w	r8, r8
 80246de:	0124      	lsls	r4, r4, #4
 80246e0:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 80246e4:	eba4 040b 	sub.w	r4, r4, fp
 80246e8:	b2a2      	uxth	r2, r4
 80246ea:	78ac      	ldrb	r4, [r5, #2]
 80246ec:	f897 c002 	ldrb.w	ip, [r7, #2]
 80246f0:	4354      	muls	r4, r2
 80246f2:	eba9 0900 	sub.w	r9, r9, r0
 80246f6:	fa1f f989 	uxth.w	r9, r9
 80246fa:	fb09 440c 	mla	r4, r9, ip, r4
 80246fe:	f896 c002 	ldrb.w	ip, [r6, #2]
 8024702:	fa5f f888 	uxtb.w	r8, r8
 8024706:	fb00 440c 	mla	r4, r0, ip, r4
 802470a:	f893 c002 	ldrb.w	ip, [r3, #2]
 802470e:	fb1a fa08 	smulbb	sl, sl, r8
 8024712:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8024716:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802471a:	fb0c ac0e 	mla	ip, ip, lr, sl
 802471e:	f895 a001 	ldrb.w	sl, [r5, #1]
 8024722:	782d      	ldrb	r5, [r5, #0]
 8024724:	fb02 fa0a 	mul.w	sl, r2, sl
 8024728:	436a      	muls	r2, r5
 802472a:	787c      	ldrb	r4, [r7, #1]
 802472c:	783f      	ldrb	r7, [r7, #0]
 802472e:	fb09 aa04 	mla	sl, r9, r4, sl
 8024732:	fb09 2207 	mla	r2, r9, r7, r2
 8024736:	7874      	ldrb	r4, [r6, #1]
 8024738:	7835      	ldrb	r5, [r6, #0]
 802473a:	fb00 aa04 	mla	sl, r0, r4, sl
 802473e:	fb00 2005 	mla	r0, r0, r5, r2
 8024742:	785c      	ldrb	r4, [r3, #1]
 8024744:	781b      	ldrb	r3, [r3, #0]
 8024746:	fb0b a404 	mla	r4, fp, r4, sl
 802474a:	9901      	ldr	r1, [sp, #4]
 802474c:	fb0b 0b03 	mla	fp, fp, r3, r0
 8024750:	9b02      	ldr	r3, [sp, #8]
 8024752:	fb11 fa08 	smulbb	sl, r1, r8
 8024756:	fb13 f808 	smulbb	r8, r3, r8
 802475a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 802475e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024762:	fb04 a40e 	mla	r4, r4, lr, sl
 8024766:	fb0b 8e0e 	mla	lr, fp, lr, r8
 802476a:	fa1f fc8c 	uxth.w	ip, ip
 802476e:	f10c 0301 	add.w	r3, ip, #1
 8024772:	fa1f fe8e 	uxth.w	lr, lr
 8024776:	b2a4      	uxth	r4, r4
 8024778:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802477c:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 8024780:	f104 0a01 	add.w	sl, r4, #1
 8024784:	f10e 0c01 	add.w	ip, lr, #1
 8024788:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802478c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8024790:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024794:	0964      	lsrs	r4, r4, #5
 8024796:	ea4c 0c03 	orr.w	ip, ip, r3
 802479a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802479e:	9b03      	ldr	r3, [sp, #12]
 80247a0:	ea4c 0c04 	orr.w	ip, ip, r4
 80247a4:	f8a3 c000 	strh.w	ip, [r3]
 80247a8:	b007      	add	sp, #28
 80247aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247ae:	af05      	add	r7, sp, #20
 80247b0:	e756      	b.n	8024660 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 80247b2:	ad05      	add	r5, sp, #20
 80247b4:	462f      	mov	r7, r5
 80247b6:	e761      	b.n	802467c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80247b8:	ad05      	add	r5, sp, #20
 80247ba:	e75f      	b.n	802467c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80247bc:	ae05      	add	r6, sp, #20
 80247be:	e772      	b.n	80246a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80247c0:	ab05      	add	r3, sp, #20
 80247c2:	461e      	mov	r6, r3
 80247c4:	e77e      	b.n	80246c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 80247c6:	ab05      	add	r3, sp, #20
 80247c8:	e77c      	b.n	80246c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

080247ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80247ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247ce:	b095      	sub	sp, #84	@ 0x54
 80247d0:	9212      	str	r2, [sp, #72]	@ 0x48
 80247d2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80247d4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80247d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80247d8:	6850      	ldr	r0, [r2, #4]
 80247da:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 80247de:	910e      	str	r1, [sp, #56]	@ 0x38
 80247e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80247e2:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 80247e6:	fb00 1303 	mla	r3, r0, r3, r1
 80247ea:	6812      	ldr	r2, [r2, #0]
 80247ec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80247f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80247f2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80247f4:	681b      	ldr	r3, [r3, #0]
 80247f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80247f8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80247fa:	685c      	ldr	r4, [r3, #4]
 80247fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80247fe:	3404      	adds	r4, #4
 8024800:	43db      	mvns	r3, r3
 8024802:	b2db      	uxtb	r3, r3
 8024804:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024808:	2b00      	cmp	r3, #0
 802480a:	dc03      	bgt.n	8024814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802480c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802480e:	2b00      	cmp	r3, #0
 8024810:	f340 8255 	ble.w	8024cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024814:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024816:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802481a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802481e:	1e48      	subs	r0, r1, #1
 8024820:	1e55      	subs	r5, r2, #1
 8024822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024824:	2b00      	cmp	r3, #0
 8024826:	f340 80f9 	ble.w	8024a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802482a:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 802482c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802482e:	1436      	asrs	r6, r6, #16
 8024830:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024834:	d406      	bmi.n	8024844 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024836:	4286      	cmp	r6, r0
 8024838:	da04      	bge.n	8024844 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802483a:	2b00      	cmp	r3, #0
 802483c:	db02      	blt.n	8024844 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802483e:	42ab      	cmp	r3, r5
 8024840:	f2c0 80ed 	blt.w	8024a1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8024844:	3601      	adds	r6, #1
 8024846:	f100 80da 	bmi.w	80249fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802484a:	42b1      	cmp	r1, r6
 802484c:	f2c0 80d7 	blt.w	80249fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024850:	3301      	adds	r3, #1
 8024852:	f100 80d4 	bmi.w	80249fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024856:	429a      	cmp	r2, r3
 8024858:	f2c0 80d1 	blt.w	80249fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802485c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802485e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024862:	930c      	str	r3, [sp, #48]	@ 0x30
 8024864:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024866:	2b00      	cmp	r3, #0
 8024868:	f340 80fa 	ble.w	8024a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802486c:	9826      	ldr	r0, [sp, #152]	@ 0x98
 802486e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024870:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024872:	68c6      	ldr	r6, [r0, #12]
 8024874:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8024876:	141d      	asrs	r5, r3, #16
 8024878:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802487c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802487e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024880:	1400      	asrs	r0, r0, #16
 8024882:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024886:	6892      	ldr	r2, [r2, #8]
 8024888:	f100 813e 	bmi.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802488c:	1e57      	subs	r7, r2, #1
 802488e:	42b8      	cmp	r0, r7
 8024890:	f280 813a 	bge.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024894:	2d00      	cmp	r5, #0
 8024896:	f2c0 8137 	blt.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802489a:	1e77      	subs	r7, r6, #1
 802489c:	42bd      	cmp	r5, r7
 802489e:	f280 8133 	bge.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80248a2:	b212      	sxth	r2, r2
 80248a4:	fb05 0002 	mla	r0, r5, r2, r0
 80248a8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80248aa:	f815 a000 	ldrb.w	sl, [r5, r0]
 80248ae:	182e      	adds	r6, r5, r0
 80248b0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80248b4:	eb04 050a 	add.w	r5, r4, sl
 80248b8:	2b00      	cmp	r3, #0
 80248ba:	f000 8117 	beq.w	8024aec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80248be:	f896 c001 	ldrb.w	ip, [r6, #1]
 80248c2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80248c6:	44a4      	add	ip, r4
 80248c8:	2900      	cmp	r1, #0
 80248ca:	f000 8117 	beq.w	8024afc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80248ce:	18b0      	adds	r0, r6, r2
 80248d0:	7840      	ldrb	r0, [r0, #1]
 80248d2:	5cb2      	ldrb	r2, [r6, r2]
 80248d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80248d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80248dc:	4422      	add	r2, r4
 80248de:	4420      	add	r0, r4
 80248e0:	b29b      	uxth	r3, r3
 80248e2:	b289      	uxth	r1, r1
 80248e4:	fb03 f901 	mul.w	r9, r3, r1
 80248e8:	011b      	lsls	r3, r3, #4
 80248ea:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80248ee:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 80248f2:	eba3 0309 	sub.w	r3, r3, r9
 80248f6:	b29b      	uxth	r3, r3
 80248f8:	435f      	muls	r7, r3
 80248fa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80248fe:	b289      	uxth	r1, r1
 8024900:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024904:	eba8 0801 	sub.w	r8, r8, r1
 8024908:	fa1f f888 	uxth.w	r8, r8
 802490c:	fb08 770b 	mla	r7, r8, fp, r7
 8024910:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024914:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024916:	fb01 770b 	mla	r7, r1, fp, r7
 802491a:	f8b6 e000 	ldrh.w	lr, [r6]
 802491e:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024922:	9310      	str	r3, [sp, #64]	@ 0x40
 8024924:	fb09 770b 	mla	r7, r9, fp, r7
 8024928:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802492a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 802492e:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024932:	fb1b fb03 	smulbb	fp, fp, r3
 8024936:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 802493a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802493e:	fb07 b706 	mla	r7, r7, r6, fp
 8024942:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024944:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024948:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802494c:	f89c c000 	ldrb.w	ip, [ip]
 8024950:	435d      	muls	r5, r3
 8024952:	fb08 550b 	mla	r5, r8, fp, r5
 8024956:	f892 b001 	ldrb.w	fp, [r2, #1]
 802495a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802495c:	fb01 550b 	mla	r5, r1, fp, r5
 8024960:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024964:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8024968:	fb09 550b 	mla	r5, r9, fp, r5
 802496c:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8024970:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024974:	fb1b fb03 	smulbb	fp, fp, r3
 8024978:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802497a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802497e:	fb03 f30c 	mul.w	r3, r3, ip
 8024982:	fb08 330a 	mla	r3, r8, sl, r3
 8024986:	f892 c000 	ldrb.w	ip, [r2]
 802498a:	fa5f fe8e 	uxtb.w	lr, lr
 802498e:	fb01 330c 	mla	r3, r1, ip, r3
 8024992:	f890 c000 	ldrb.w	ip, [r0]
 8024996:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802499a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802499e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80249a0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80249a4:	fb1e fe03 	smulbb	lr, lr, r3
 80249a8:	fb05 b506 	mla	r5, r5, r6, fp
 80249ac:	fb0c e606 	mla	r6, ip, r6, lr
 80249b0:	b2bf      	uxth	r7, r7
 80249b2:	1c7b      	adds	r3, r7, #1
 80249b4:	b2ad      	uxth	r5, r5
 80249b6:	b2b6      	uxth	r6, r6
 80249b8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80249bc:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 80249c0:	f105 0b01 	add.w	fp, r5, #1
 80249c4:	1c77      	adds	r7, r6, #1
 80249c6:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80249ca:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80249ce:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80249d2:	096d      	lsrs	r5, r5, #5
 80249d4:	431f      	orrs	r7, r3
 80249d6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80249da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80249dc:	433d      	orrs	r5, r7
 80249de:	801d      	strh	r5, [r3, #0]
 80249e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80249e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80249e4:	3302      	adds	r3, #2
 80249e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80249e8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80249ea:	4413      	add	r3, r2
 80249ec:	931f      	str	r3, [sp, #124]	@ 0x7c
 80249ee:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80249f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80249f2:	4413      	add	r3, r2
 80249f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80249f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80249f8:	3b01      	subs	r3, #1
 80249fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80249fc:	e732      	b.n	8024864 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80249fe:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024a00:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8024a02:	4433      	add	r3, r6
 8024a04:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024a06:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8024a08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024a0a:	4433      	add	r3, r6
 8024a0c:	9320      	str	r3, [sp, #128]	@ 0x80
 8024a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a10:	3b01      	subs	r3, #1
 8024a12:	9309      	str	r3, [sp, #36]	@ 0x24
 8024a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024a16:	3302      	adds	r3, #2
 8024a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8024a1a:	e702      	b.n	8024822 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024a1c:	d027      	beq.n	8024a6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a20:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8024a22:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8024a24:	3b01      	subs	r3, #1
 8024a26:	fb00 5003 	mla	r0, r0, r3, r5
 8024a2a:	1400      	asrs	r0, r0, #16
 8024a2c:	f53f af16 	bmi.w	802485c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024a30:	3901      	subs	r1, #1
 8024a32:	4288      	cmp	r0, r1
 8024a34:	f6bf af12 	bge.w	802485c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024a38:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8024a3a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8024a3c:	fb01 0303 	mla	r3, r1, r3, r0
 8024a40:	141b      	asrs	r3, r3, #16
 8024a42:	f53f af0b 	bmi.w	802485c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024a46:	3a01      	subs	r2, #1
 8024a48:	4293      	cmp	r3, r2
 8024a4a:	f6bf af07 	bge.w	802485c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a50:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8024a54:	9311      	str	r3, [sp, #68]	@ 0x44
 8024a56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024a58:	930c      	str	r3, [sp, #48]	@ 0x30
 8024a5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024a5c:	2b00      	cmp	r3, #0
 8024a5e:	dc70      	bgt.n	8024b42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8024a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024a64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024a68:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024a6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8024a6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024a70:	2b00      	cmp	r3, #0
 8024a72:	f340 8124 	ble.w	8024cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024a76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024a7a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024a7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024a82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024a86:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024a8a:	eef0 6a62 	vmov.f32	s13, s5
 8024a8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024a92:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024a96:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024a9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024aa2:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8024aa6:	eef0 6a43 	vmov.f32	s13, s6
 8024aaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024aae:	ee12 2a90 	vmov	r2, s5
 8024ab2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024ab6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024ab8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024abc:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ac0:	ee13 2a10 	vmov	r2, s6
 8024ac4:	9321      	str	r3, [sp, #132]	@ 0x84
 8024ac6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024ac8:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8024acc:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ad0:	9322      	str	r3, [sp, #136]	@ 0x88
 8024ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024ad4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024ad6:	3b01      	subs	r3, #1
 8024ad8:	930e      	str	r3, [sp, #56]	@ 0x38
 8024ada:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024adc:	bf08      	it	eq
 8024ade:	4613      	moveq	r3, r2
 8024ae0:	eeb0 3a67 	vmov.f32	s6, s15
 8024ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ae6:	eef0 2a47 	vmov.f32	s5, s14
 8024aea:	e68c      	b.n	8024806 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024aec:	b149      	cbz	r1, 8024b02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8024aee:	4628      	mov	r0, r5
 8024af0:	5cb2      	ldrb	r2, [r6, r2]
 8024af2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024af6:	4422      	add	r2, r4
 8024af8:	46ac      	mov	ip, r5
 8024afa:	e6f1      	b.n	80248e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024afc:	4628      	mov	r0, r5
 8024afe:	462a      	mov	r2, r5
 8024b00:	e6ee      	b.n	80248e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024b02:	4628      	mov	r0, r5
 8024b04:	462a      	mov	r2, r5
 8024b06:	e7f7      	b.n	8024af8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024b08:	1c47      	adds	r7, r0, #1
 8024b0a:	f53f af69 	bmi.w	80249e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024b0e:	42ba      	cmp	r2, r7
 8024b10:	f6ff af66 	blt.w	80249e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024b14:	1c6f      	adds	r7, r5, #1
 8024b16:	f53f af63 	bmi.w	80249e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024b1a:	42be      	cmp	r6, r7
 8024b1c:	f6ff af60 	blt.w	80249e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024b20:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8024b22:	b236      	sxth	r6, r6
 8024b24:	b212      	sxth	r2, r2
 8024b26:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8024b2a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024b2e:	9002      	str	r0, [sp, #8]
 8024b30:	9200      	str	r2, [sp, #0]
 8024b32:	9601      	str	r6, [sp, #4]
 8024b34:	4623      	mov	r3, r4
 8024b36:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8024b3a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024b3c:	f7ff fd59 	bl	80245f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8024b40:	e74e      	b.n	80249e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024b42:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024b44:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8024b46:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024b4a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024b4c:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8024b4e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024b52:	142d      	asrs	r5, r5, #16
 8024b54:	1400      	asrs	r0, r0, #16
 8024b56:	fb02 5000 	mla	r0, r2, r0, r5
 8024b5a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024b5c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024b5e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024b62:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024b66:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024b6a:	182e      	adds	r6, r5, r0
 8024b6c:	eb04 0509 	add.w	r5, r4, r9
 8024b70:	2b00      	cmp	r3, #0
 8024b72:	f000 8096 	beq.w	8024ca2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024b76:	7877      	ldrb	r7, [r6, #1]
 8024b78:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024b7c:	4427      	add	r7, r4
 8024b7e:	2900      	cmp	r1, #0
 8024b80:	f000 8097 	beq.w	8024cb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8024b84:	18b0      	adds	r0, r6, r2
 8024b86:	7840      	ldrb	r0, [r0, #1]
 8024b88:	5cb2      	ldrb	r2, [r6, r2]
 8024b8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024b8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024b92:	4422      	add	r2, r4
 8024b94:	4420      	add	r0, r4
 8024b96:	b29b      	uxth	r3, r3
 8024b98:	b289      	uxth	r1, r1
 8024b9a:	fb03 f801 	mul.w	r8, r3, r1
 8024b9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024ba0:	011b      	lsls	r3, r3, #4
 8024ba2:	f8b6 c000 	ldrh.w	ip, [r6]
 8024ba6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024baa:	78be      	ldrb	r6, [r7, #2]
 8024bac:	eba3 0308 	sub.w	r3, r3, r8
 8024bb0:	b29b      	uxth	r3, r3
 8024bb2:	435e      	muls	r6, r3
 8024bb4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024bb8:	b289      	uxth	r1, r1
 8024bba:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024bbe:	ebae 0e01 	sub.w	lr, lr, r1
 8024bc2:	fa1f fe8e 	uxth.w	lr, lr
 8024bc6:	fb0e 660b 	mla	r6, lr, fp, r6
 8024bca:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024bce:	9310      	str	r3, [sp, #64]	@ 0x40
 8024bd0:	fb01 660b 	mla	r6, r1, fp, r6
 8024bd4:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024bd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024bda:	fb08 660b 	mla	r6, r8, fp, r6
 8024bde:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024be2:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024be6:	fb1b fb03 	smulbb	fp, fp, r3
 8024bea:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024bee:	fb06 b60a 	mla	r6, r6, sl, fp
 8024bf2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024bf4:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024bf8:	787d      	ldrb	r5, [r7, #1]
 8024bfa:	783f      	ldrb	r7, [r7, #0]
 8024bfc:	435d      	muls	r5, r3
 8024bfe:	fb0e 550b 	mla	r5, lr, fp, r5
 8024c02:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c08:	fb01 550b 	mla	r5, r1, fp, r5
 8024c0c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024c10:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024c14:	fb08 550b 	mla	r5, r8, fp, r5
 8024c18:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8024c1c:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024c20:	fb1b fb03 	smulbb	fp, fp, r3
 8024c24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024c26:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024c2a:	437b      	muls	r3, r7
 8024c2c:	fb0e 3309 	mla	r3, lr, r9, r3
 8024c30:	7817      	ldrb	r7, [r2, #0]
 8024c32:	fa5f fc8c 	uxtb.w	ip, ip
 8024c36:	fb01 3307 	mla	r3, r1, r7, r3
 8024c3a:	7807      	ldrb	r7, [r0, #0]
 8024c3c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024c40:	fb08 3707 	mla	r7, r8, r7, r3
 8024c44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c46:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024c4a:	fb1c fc03 	smulbb	ip, ip, r3
 8024c4e:	fb05 b50a 	mla	r5, r5, sl, fp
 8024c52:	fb07 c70a 	mla	r7, r7, sl, ip
 8024c56:	b2b6      	uxth	r6, r6
 8024c58:	b2ad      	uxth	r5, r5
 8024c5a:	b2bf      	uxth	r7, r7
 8024c5c:	1c73      	adds	r3, r6, #1
 8024c5e:	1c7a      	adds	r2, r7, #1
 8024c60:	f105 0b01 	add.w	fp, r5, #1
 8024c64:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024c68:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024c6c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024c70:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024c74:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8024c78:	096d      	lsrs	r5, r5, #5
 8024c7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c7c:	4316      	orrs	r6, r2
 8024c7e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024c82:	432e      	orrs	r6, r5
 8024c84:	f823 6b02 	strh.w	r6, [r3], #2
 8024c88:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024c8a:	930c      	str	r3, [sp, #48]	@ 0x30
 8024c8c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024c8e:	4413      	add	r3, r2
 8024c90:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024c92:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024c94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024c96:	4413      	add	r3, r2
 8024c98:	9320      	str	r3, [sp, #128]	@ 0x80
 8024c9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024c9c:	3b01      	subs	r3, #1
 8024c9e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024ca0:	e6db      	b.n	8024a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8024ca2:	b149      	cbz	r1, 8024cb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8024ca4:	4628      	mov	r0, r5
 8024ca6:	5cb2      	ldrb	r2, [r6, r2]
 8024ca8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024cac:	4422      	add	r2, r4
 8024cae:	462f      	mov	r7, r5
 8024cb0:	e771      	b.n	8024b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024cb2:	4628      	mov	r0, r5
 8024cb4:	462a      	mov	r2, r5
 8024cb6:	e76e      	b.n	8024b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024cb8:	4628      	mov	r0, r5
 8024cba:	462a      	mov	r2, r5
 8024cbc:	e7f7      	b.n	8024cae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024cbe:	b015      	add	sp, #84	@ 0x54
 8024cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024cc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8024cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cc8:	880f      	ldrh	r7, [r1, #0]
 8024cca:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8024cce:	023c      	lsls	r4, r7, #8
 8024cd0:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 8024cd4:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8024cd8:	fb05 ca0e 	mla	sl, r5, lr, ip
 8024cdc:	017c      	lsls	r4, r7, #5
 8024cde:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8024ce2:	00ff      	lsls	r7, r7, #3
 8024ce4:	ea4b 0404 	orr.w	r4, fp, r4
 8024ce8:	b2ff      	uxtb	r7, r7
 8024cea:	4327      	orrs	r7, r4
 8024cec:	2d00      	cmp	r5, #0
 8024cee:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8024cf2:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8024cf6:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8024cfa:	eb02 080a 	add.w	r8, r2, sl
 8024cfe:	9701      	str	r7, [sp, #4]
 8024d00:	db7e      	blt.n	8024e00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8024d02:	45a9      	cmp	r9, r5
 8024d04:	dd7c      	ble.n	8024e00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8024d06:	f1bc 0f00 	cmp.w	ip, #0
 8024d0a:	db77      	blt.n	8024dfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8024d0c:	45e6      	cmp	lr, ip
 8024d0e:	dd75      	ble.n	8024dfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8024d10:	f812 700a 	ldrb.w	r7, [r2, sl]
 8024d14:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024d18:	441f      	add	r7, r3
 8024d1a:	f11c 0201 	adds.w	r2, ip, #1
 8024d1e:	d472      	bmi.n	8024e06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024d20:	4596      	cmp	lr, r2
 8024d22:	dd70      	ble.n	8024e06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024d24:	2800      	cmp	r0, #0
 8024d26:	d06e      	beq.n	8024e06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024d28:	f898 4001 	ldrb.w	r4, [r8, #1]
 8024d2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024d30:	441c      	add	r4, r3
 8024d32:	3501      	adds	r5, #1
 8024d34:	d46b      	bmi.n	8024e0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024d36:	45a9      	cmp	r9, r5
 8024d38:	dd69      	ble.n	8024e0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024d3a:	2e00      	cmp	r6, #0
 8024d3c:	d067      	beq.n	8024e0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024d3e:	f1bc 0f00 	cmp.w	ip, #0
 8024d42:	db62      	blt.n	8024e0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8024d44:	45e6      	cmp	lr, ip
 8024d46:	dd60      	ble.n	8024e0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8024d48:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024d50:	441d      	add	r5, r3
 8024d52:	f11c 0201 	adds.w	r2, ip, #1
 8024d56:	d45d      	bmi.n	8024e14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024d58:	4596      	cmp	lr, r2
 8024d5a:	dd5b      	ble.n	8024e14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024d5c:	2800      	cmp	r0, #0
 8024d5e:	d059      	beq.n	8024e14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024d60:	44c6      	add	lr, r8
 8024d62:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024d66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024d6a:	4413      	add	r3, r2
 8024d6c:	b280      	uxth	r0, r0
 8024d6e:	b2b2      	uxth	r2, r6
 8024d70:	fb00 f602 	mul.w	r6, r0, r2
 8024d74:	0100      	lsls	r0, r0, #4
 8024d76:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024d7a:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8024d7e:	1b80      	subs	r0, r0, r6
 8024d80:	fa1f fc82 	uxth.w	ip, r2
 8024d84:	b282      	uxth	r2, r0
 8024d86:	78a0      	ldrb	r0, [r4, #2]
 8024d88:	f897 e002 	ldrb.w	lr, [r7, #2]
 8024d8c:	4350      	muls	r0, r2
 8024d8e:	eba8 080c 	sub.w	r8, r8, ip
 8024d92:	fa1f f888 	uxth.w	r8, r8
 8024d96:	fb08 0e0e 	mla	lr, r8, lr, r0
 8024d9a:	78a8      	ldrb	r0, [r5, #2]
 8024d9c:	f897 9000 	ldrb.w	r9, [r7]
 8024da0:	fb0c e000 	mla	r0, ip, r0, lr
 8024da4:	f893 e002 	ldrb.w	lr, [r3, #2]
 8024da8:	787f      	ldrb	r7, [r7, #1]
 8024daa:	fb06 0e0e 	mla	lr, r6, lr, r0
 8024dae:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 8024db2:	f894 e000 	ldrb.w	lr, [r4]
 8024db6:	fb02 fe0e 	mul.w	lr, r2, lr
 8024dba:	fb08 e909 	mla	r9, r8, r9, lr
 8024dbe:	f895 e000 	ldrb.w	lr, [r5]
 8024dc2:	fb0c 990e 	mla	r9, ip, lr, r9
 8024dc6:	f893 e000 	ldrb.w	lr, [r3]
 8024dca:	785b      	ldrb	r3, [r3, #1]
 8024dcc:	fb06 9e0e 	mla	lr, r6, lr, r9
 8024dd0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8024dd4:	ea4e 0e00 	orr.w	lr, lr, r0
 8024dd8:	7860      	ldrb	r0, [r4, #1]
 8024dda:	4350      	muls	r0, r2
 8024ddc:	fb08 0007 	mla	r0, r8, r7, r0
 8024de0:	786a      	ldrb	r2, [r5, #1]
 8024de2:	fb0c 0202 	mla	r2, ip, r2, r0
 8024de6:	fb06 2303 	mla	r3, r6, r3, r2
 8024dea:	095b      	lsrs	r3, r3, #5
 8024dec:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024df0:	ea4e 0303 	orr.w	r3, lr, r3
 8024df4:	800b      	strh	r3, [r1, #0]
 8024df6:	b003      	add	sp, #12
 8024df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024dfc:	af01      	add	r7, sp, #4
 8024dfe:	e78c      	b.n	8024d1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8024e00:	ac01      	add	r4, sp, #4
 8024e02:	4627      	mov	r7, r4
 8024e04:	e795      	b.n	8024d32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024e06:	ac01      	add	r4, sp, #4
 8024e08:	e793      	b.n	8024d32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024e0a:	ad01      	add	r5, sp, #4
 8024e0c:	e7a1      	b.n	8024d52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8024e0e:	ab01      	add	r3, sp, #4
 8024e10:	461d      	mov	r5, r3
 8024e12:	e7ab      	b.n	8024d6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8024e14:	ab01      	add	r3, sp, #4
 8024e16:	e7a9      	b.n	8024d6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08024e18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e1c:	b08f      	sub	sp, #60	@ 0x3c
 8024e1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8024e20:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024e22:	900d      	str	r0, [sp, #52]	@ 0x34
 8024e24:	6850      	ldr	r0, [r2, #4]
 8024e26:	910a      	str	r1, [sp, #40]	@ 0x28
 8024e28:	9306      	str	r3, [sp, #24]
 8024e2a:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8024e2e:	fb00 1303 	mla	r3, r0, r3, r1
 8024e32:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 8024e36:	6812      	ldr	r2, [r2, #0]
 8024e38:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024e3c:	9307      	str	r3, [sp, #28]
 8024e3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024e40:	681b      	ldr	r3, [r3, #0]
 8024e42:	9308      	str	r3, [sp, #32]
 8024e44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024e46:	685c      	ldr	r4, [r3, #4]
 8024e48:	3404      	adds	r4, #4
 8024e4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024e4c:	2b00      	cmp	r3, #0
 8024e4e:	dc03      	bgt.n	8024e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8024e50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e52:	2b00      	cmp	r3, #0
 8024e54:	f340 81d6 	ble.w	8025204 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8024e58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024e5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024e5e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024e62:	1e48      	subs	r0, r1, #1
 8024e64:	1e56      	subs	r6, r2, #1
 8024e66:	9b06      	ldr	r3, [sp, #24]
 8024e68:	2b00      	cmp	r3, #0
 8024e6a:	f340 80b7 	ble.w	8024fdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8024e6e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8024e72:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024e76:	d406      	bmi.n	8024e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024e78:	4287      	cmp	r7, r0
 8024e7a:	da04      	bge.n	8024e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024e7c:	2b00      	cmp	r3, #0
 8024e7e:	db02      	blt.n	8024e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024e80:	42b3      	cmp	r3, r6
 8024e82:	f2c0 80ac 	blt.w	8024fde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024e86:	3701      	adds	r7, #1
 8024e88:	f100 809d 	bmi.w	8024fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024e8c:	42b9      	cmp	r1, r7
 8024e8e:	f2c0 809a 	blt.w	8024fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024e92:	3301      	adds	r3, #1
 8024e94:	f100 8097 	bmi.w	8024fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024e98:	429a      	cmp	r2, r3
 8024e9a:	f2c0 8094 	blt.w	8024fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024e9e:	9b06      	ldr	r3, [sp, #24]
 8024ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024ea2:	9b07      	ldr	r3, [sp, #28]
 8024ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024ea8:	2b00      	cmp	r3, #0
 8024eaa:	f340 80b5 	ble.w	8025018 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8024eae:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8024eb0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024eb2:	68c7      	ldr	r7, [r0, #12]
 8024eb4:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024eb8:	ea4f 4625 	mov.w	r6, r5, asr #16
 8024ebc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024ec0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024ec4:	6892      	ldr	r2, [r2, #8]
 8024ec6:	f100 80fb 	bmi.w	80250c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8024eca:	f102 3cff 	add.w	ip, r2, #4294967295
 8024ece:	4560      	cmp	r0, ip
 8024ed0:	f280 80f6 	bge.w	80250c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8024ed4:	2e00      	cmp	r6, #0
 8024ed6:	f2c0 80f3 	blt.w	80250c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8024eda:	f107 3cff 	add.w	ip, r7, #4294967295
 8024ede:	4566      	cmp	r6, ip
 8024ee0:	f280 80ee 	bge.w	80250c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8024ee4:	b212      	sxth	r2, r2
 8024ee6:	fb06 0002 	mla	r0, r6, r2, r0
 8024eea:	9e08      	ldr	r6, [sp, #32]
 8024eec:	1837      	adds	r7, r6, r0
 8024eee:	5c30      	ldrb	r0, [r6, r0]
 8024ef0:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8024ef4:	eb04 0c08 	add.w	ip, r4, r8
 8024ef8:	2b00      	cmp	r3, #0
 8024efa:	f000 80d3 	beq.w	80250a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024efe:	787e      	ldrb	r6, [r7, #1]
 8024f00:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024f04:	4426      	add	r6, r4
 8024f06:	2900      	cmp	r1, #0
 8024f08:	f000 80d4 	beq.w	80250b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8024f0c:	18b8      	adds	r0, r7, r2
 8024f0e:	7840      	ldrb	r0, [r0, #1]
 8024f10:	5cba      	ldrb	r2, [r7, r2]
 8024f12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024f16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024f1a:	4422      	add	r2, r4
 8024f1c:	4420      	add	r0, r4
 8024f1e:	b29b      	uxth	r3, r3
 8024f20:	b289      	uxth	r1, r1
 8024f22:	fb03 f901 	mul.w	r9, r3, r1
 8024f26:	011b      	lsls	r3, r3, #4
 8024f28:	78b7      	ldrb	r7, [r6, #2]
 8024f2a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024f2e:	eba3 0309 	sub.w	r3, r3, r9
 8024f32:	b29b      	uxth	r3, r3
 8024f34:	435f      	muls	r7, r3
 8024f36:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024f3a:	b289      	uxth	r1, r1
 8024f3c:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024f40:	ebae 0e01 	sub.w	lr, lr, r1
 8024f44:	fa1f fe8e 	uxth.w	lr, lr
 8024f48:	fb0e 770a 	mla	r7, lr, sl, r7
 8024f4c:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024f50:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024f54:	fb01 770a 	mla	r7, r1, sl, r7
 8024f58:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024f5c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024f60:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024f64:	f896 8000 	ldrb.w	r8, [r6]
 8024f68:	7876      	ldrb	r6, [r6, #1]
 8024f6a:	fb03 f808 	mul.w	r8, r3, r8
 8024f6e:	fb0e 8807 	mla	r8, lr, r7, r8
 8024f72:	7817      	ldrb	r7, [r2, #0]
 8024f74:	4373      	muls	r3, r6
 8024f76:	fb01 8807 	mla	r8, r1, r7, r8
 8024f7a:	7807      	ldrb	r7, [r0, #0]
 8024f7c:	fb0e 330c 	mla	r3, lr, ip, r3
 8024f80:	fb09 8707 	mla	r7, r9, r7, r8
 8024f84:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8024f88:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024f8c:	ea47 070a 	orr.w	r7, r7, sl
 8024f90:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024f94:	fb01 310a 	mla	r1, r1, sl, r3
 8024f98:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024f9e:	fb09 1a0a 	mla	sl, r9, sl, r1
 8024fa2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024fa6:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8024faa:	ea47 070a 	orr.w	r7, r7, sl
 8024fae:	801f      	strh	r7, [r3, #0]
 8024fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024fb2:	3302      	adds	r3, #2
 8024fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8024fb6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024fb8:	449b      	add	fp, r3
 8024fba:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024fbc:	441d      	add	r5, r3
 8024fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024fc0:	3b01      	subs	r3, #1
 8024fc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024fc4:	e76f      	b.n	8024ea6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024fc6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024fc8:	449b      	add	fp, r3
 8024fca:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024fcc:	441d      	add	r5, r3
 8024fce:	9b06      	ldr	r3, [sp, #24]
 8024fd0:	3b01      	subs	r3, #1
 8024fd2:	9306      	str	r3, [sp, #24]
 8024fd4:	9b07      	ldr	r3, [sp, #28]
 8024fd6:	3302      	adds	r3, #2
 8024fd8:	9307      	str	r3, [sp, #28]
 8024fda:	e744      	b.n	8024e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8024fdc:	d023      	beq.n	8025026 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024fde:	9b06      	ldr	r3, [sp, #24]
 8024fe0:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8024fe2:	3b01      	subs	r3, #1
 8024fe4:	fb00 b003 	mla	r0, r0, r3, fp
 8024fe8:	1400      	asrs	r0, r0, #16
 8024fea:	f53f af58 	bmi.w	8024e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024fee:	3901      	subs	r1, #1
 8024ff0:	4288      	cmp	r0, r1
 8024ff2:	f6bf af54 	bge.w	8024e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024ff6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024ff8:	fb01 5303 	mla	r3, r1, r3, r5
 8024ffc:	141b      	asrs	r3, r3, #16
 8024ffe:	f53f af4e 	bmi.w	8024e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025002:	3a01      	subs	r2, #1
 8025004:	4293      	cmp	r3, r2
 8025006:	f6bf af4a 	bge.w	8024e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802500a:	9b06      	ldr	r3, [sp, #24]
 802500c:	9309      	str	r3, [sp, #36]	@ 0x24
 802500e:	9b07      	ldr	r3, [sp, #28]
 8025010:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025014:	2b00      	cmp	r3, #0
 8025016:	dc70      	bgt.n	80250fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8025018:	9b06      	ldr	r3, [sp, #24]
 802501a:	9a07      	ldr	r2, [sp, #28]
 802501c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025020:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025024:	9307      	str	r3, [sp, #28]
 8025026:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025028:	2b00      	cmp	r3, #0
 802502a:	f340 80eb 	ble.w	8025204 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802502e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025032:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025036:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802503a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802503e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025042:	eef0 6a62 	vmov.f32	s13, s5
 8025046:	ee31 1a05 	vadd.f32	s2, s2, s10
 802504a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802504e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025052:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025056:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802505a:	ee16 ba90 	vmov	fp, s13
 802505e:	eef0 6a43 	vmov.f32	s13, s6
 8025062:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025066:	ee12 2a90 	vmov	r2, s5
 802506a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802506e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025070:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025074:	fb92 f3f3 	sdiv	r3, r2, r3
 8025078:	ee13 2a10 	vmov	r2, s6
 802507c:	931b      	str	r3, [sp, #108]	@ 0x6c
 802507e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025080:	ee16 5a90 	vmov	r5, s13
 8025084:	fb92 f3f3 	sdiv	r3, r2, r3
 8025088:	931c      	str	r3, [sp, #112]	@ 0x70
 802508a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802508c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802508e:	3b01      	subs	r3, #1
 8025090:	930a      	str	r3, [sp, #40]	@ 0x28
 8025092:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025094:	bf08      	it	eq
 8025096:	4613      	moveq	r3, r2
 8025098:	eeb0 3a67 	vmov.f32	s6, s15
 802509c:	9306      	str	r3, [sp, #24]
 802509e:	eef0 2a47 	vmov.f32	s5, s14
 80250a2:	e6d2      	b.n	8024e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80250a4:	b149      	cbz	r1, 80250ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80250a6:	4660      	mov	r0, ip
 80250a8:	5cba      	ldrb	r2, [r7, r2]
 80250aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80250ae:	4422      	add	r2, r4
 80250b0:	4666      	mov	r6, ip
 80250b2:	e734      	b.n	8024f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80250b4:	4660      	mov	r0, ip
 80250b6:	4662      	mov	r2, ip
 80250b8:	e731      	b.n	8024f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80250ba:	4660      	mov	r0, ip
 80250bc:	4662      	mov	r2, ip
 80250be:	e7f7      	b.n	80250b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80250c0:	f110 0c01 	adds.w	ip, r0, #1
 80250c4:	f53f af74 	bmi.w	8024fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80250c8:	4562      	cmp	r2, ip
 80250ca:	f6ff af71 	blt.w	8024fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80250ce:	f116 0c01 	adds.w	ip, r6, #1
 80250d2:	f53f af6d 	bmi.w	8024fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80250d6:	4567      	cmp	r7, ip
 80250d8:	f6ff af6a 	blt.w	8024fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80250dc:	b23f      	sxth	r7, r7
 80250de:	b212      	sxth	r2, r2
 80250e0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80250e4:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80250e8:	9200      	str	r2, [sp, #0]
 80250ea:	9701      	str	r7, [sp, #4]
 80250ec:	4623      	mov	r3, r4
 80250ee:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80250f2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80250f4:	f7ff fde6 	bl	8024cc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80250f8:	e75a      	b.n	8024fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80250fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80250fc:	ea4f 462b 	mov.w	r6, fp, asr #16
 8025100:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025104:	1428      	asrs	r0, r5, #16
 8025106:	fb02 6000 	mla	r0, r2, r0, r6
 802510a:	9e08      	ldr	r6, [sp, #32]
 802510c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025110:	f816 8000 	ldrb.w	r8, [r6, r0]
 8025114:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025118:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802511c:	1837      	adds	r7, r6, r0
 802511e:	eb04 0c08 	add.w	ip, r4, r8
 8025122:	2b00      	cmp	r3, #0
 8025124:	d060      	beq.n	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8025126:	787e      	ldrb	r6, [r7, #1]
 8025128:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802512c:	4426      	add	r6, r4
 802512e:	2900      	cmp	r1, #0
 8025130:	d062      	beq.n	80251f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8025132:	18b8      	adds	r0, r7, r2
 8025134:	7840      	ldrb	r0, [r0, #1]
 8025136:	5cba      	ldrb	r2, [r7, r2]
 8025138:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802513c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025140:	4422      	add	r2, r4
 8025142:	4420      	add	r0, r4
 8025144:	b29b      	uxth	r3, r3
 8025146:	b289      	uxth	r1, r1
 8025148:	fb03 f901 	mul.w	r9, r3, r1
 802514c:	011b      	lsls	r3, r3, #4
 802514e:	78b7      	ldrb	r7, [r6, #2]
 8025150:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8025154:	eba3 0309 	sub.w	r3, r3, r9
 8025158:	b29b      	uxth	r3, r3
 802515a:	435f      	muls	r7, r3
 802515c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025160:	b289      	uxth	r1, r1
 8025162:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025166:	ebae 0e01 	sub.w	lr, lr, r1
 802516a:	fa1f fe8e 	uxth.w	lr, lr
 802516e:	fb0e 770a 	mla	r7, lr, sl, r7
 8025172:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025176:	f89c c001 	ldrb.w	ip, [ip, #1]
 802517a:	fb01 770a 	mla	r7, r1, sl, r7
 802517e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025182:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025186:	f814 7008 	ldrb.w	r7, [r4, r8]
 802518a:	f896 8000 	ldrb.w	r8, [r6]
 802518e:	7876      	ldrb	r6, [r6, #1]
 8025190:	fb03 f808 	mul.w	r8, r3, r8
 8025194:	fb0e 8807 	mla	r8, lr, r7, r8
 8025198:	7817      	ldrb	r7, [r2, #0]
 802519a:	4373      	muls	r3, r6
 802519c:	fb01 8807 	mla	r8, r1, r7, r8
 80251a0:	7807      	ldrb	r7, [r0, #0]
 80251a2:	fb0e 330c 	mla	r3, lr, ip, r3
 80251a6:	fb09 8707 	mla	r7, r9, r7, r8
 80251aa:	7856      	ldrb	r6, [r2, #1]
 80251ac:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 80251b0:	fb01 3306 	mla	r3, r1, r6, r3
 80251b4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80251b8:	ea47 070a 	orr.w	r7, r7, sl
 80251bc:	f890 a001 	ldrb.w	sl, [r0, #1]
 80251c0:	fb09 3a0a 	mla	sl, r9, sl, r3
 80251c4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80251c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80251ca:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80251ce:	ea47 070a 	orr.w	r7, r7, sl
 80251d2:	f823 7b02 	strh.w	r7, [r3], #2
 80251d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80251d8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80251da:	449b      	add	fp, r3
 80251dc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80251de:	441d      	add	r5, r3
 80251e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80251e2:	3b01      	subs	r3, #1
 80251e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80251e6:	e714      	b.n	8025012 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80251e8:	b149      	cbz	r1, 80251fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80251ea:	4660      	mov	r0, ip
 80251ec:	5cba      	ldrb	r2, [r7, r2]
 80251ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80251f2:	4422      	add	r2, r4
 80251f4:	4666      	mov	r6, ip
 80251f6:	e7a5      	b.n	8025144 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80251f8:	4660      	mov	r0, ip
 80251fa:	4662      	mov	r2, ip
 80251fc:	e7a2      	b.n	8025144 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80251fe:	4660      	mov	r0, ip
 8025200:	4662      	mov	r2, ip
 8025202:	e7f7      	b.n	80251f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8025204:	b00f      	add	sp, #60	@ 0x3c
 8025206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802520a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 802520a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802520e:	b085      	sub	sp, #20
 8025210:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8025214:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 8025218:	9102      	str	r1, [sp, #8]
 802521a:	fb04 710c 	mla	r1, r4, ip, r7
 802521e:	2c00      	cmp	r4, #0
 8025220:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8025224:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 8025228:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802522c:	eb02 0e01 	add.w	lr, r2, r1
 8025230:	f2c0 8122 	blt.w	8025478 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8025234:	45a0      	cmp	r8, r4
 8025236:	f340 811f 	ble.w	8025478 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802523a:	2f00      	cmp	r7, #0
 802523c:	f2c0 811a 	blt.w	8025474 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8025240:	45bc      	cmp	ip, r7
 8025242:	f340 8117 	ble.w	8025474 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8025246:	5c52      	ldrb	r2, [r2, r1]
 8025248:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802524c:	1c7a      	adds	r2, r7, #1
 802524e:	f100 8116 	bmi.w	802547e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8025252:	4594      	cmp	ip, r2
 8025254:	f340 8113 	ble.w	802547e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8025258:	2e00      	cmp	r6, #0
 802525a:	f000 8112 	beq.w	8025482 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 802525e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025262:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025266:	3401      	adds	r4, #1
 8025268:	f100 810f 	bmi.w	802548a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802526c:	45a0      	cmp	r8, r4
 802526e:	f340 810c 	ble.w	802548a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8025272:	2800      	cmp	r0, #0
 8025274:	f000 810c 	beq.w	8025490 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8025278:	2f00      	cmp	r7, #0
 802527a:	f2c0 8104 	blt.w	8025486 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802527e:	45bc      	cmp	ip, r7
 8025280:	f340 8101 	ble.w	8025486 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8025284:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8025288:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 802528c:	3701      	adds	r7, #1
 802528e:	f100 8102 	bmi.w	8025496 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8025292:	45bc      	cmp	ip, r7
 8025294:	f340 80ff 	ble.w	8025496 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8025298:	2e00      	cmp	r6, #0
 802529a:	f000 80fe 	beq.w	802549a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 802529e:	44f4      	add	ip, lr
 80252a0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80252a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80252a8:	b2b6      	uxth	r6, r6
 80252aa:	b280      	uxth	r0, r0
 80252ac:	fb00 fe06 	mul.w	lr, r0, r6
 80252b0:	0136      	lsls	r6, r6, #4
 80252b2:	eba6 070e 	sub.w	r7, r6, lr
 80252b6:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80252ba:	b2bf      	uxth	r7, r7
 80252bc:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 80252c0:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80252c4:	fb0a f607 	mul.w	r6, sl, r7
 80252c8:	b280      	uxth	r0, r0
 80252ca:	1a1b      	subs	r3, r3, r0
 80252cc:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80252d0:	b29b      	uxth	r3, r3
 80252d2:	fb0b 6603 	mla	r6, fp, r3, r6
 80252d6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80252da:	fb00 6609 	mla	r6, r0, r9, r6
 80252de:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80252e2:	fb0e 6608 	mla	r6, lr, r8, r6
 80252e6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80252ea:	9600      	str	r6, [sp, #0]
 80252ec:	2e00      	cmp	r6, #0
 80252ee:	f000 80be 	beq.w	802546e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 80252f2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80252f6:	fb0b fc0c 	mul.w	ip, fp, ip
 80252fa:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80252fe:	fb0b f505 	mul.w	r5, fp, r5
 8025302:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8025306:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802530a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802530e:	44dc      	add	ip, fp
 8025310:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025314:	9501      	str	r5, [sp, #4]
 8025316:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 802531a:	9503      	str	r5, [sp, #12]
 802531c:	9d01      	ldr	r5, [sp, #4]
 802531e:	9e02      	ldr	r6, [sp, #8]
 8025320:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8025324:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8025328:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802532c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025330:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8025334:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8025338:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802533c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025340:	4465      	add	r5, ip
 8025342:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025346:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802534a:	fb09 fc0c 	mul.w	ip, r9, ip
 802534e:	fb09 f904 	mul.w	r9, r9, r4
 8025352:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8025356:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802535a:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 802535e:	fb08 f404 	mul.w	r4, r8, r4
 8025362:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025366:	fb08 f802 	mul.w	r8, r8, r2
 802536a:	0a2d      	lsrs	r5, r5, #8
 802536c:	0a22      	lsrs	r2, r4, #8
 802536e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025372:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025376:	437d      	muls	r5, r7
 8025378:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 802537c:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8025380:	4414      	add	r4, r2
 8025382:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8025386:	fb0a fa01 	mul.w	sl, sl, r1
 802538a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802538e:	9a03      	ldr	r2, [sp, #12]
 8025390:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8025394:	fb02 5503 	mla	r5, r2, r3, r5
 8025398:	0a24      	lsrs	r4, r4, #8
 802539a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802539e:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80253a2:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80253a6:	fb04 540e 	mla	r4, r4, lr, r5
 80253aa:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80253ae:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80253b2:	4461      	add	r1, ip
 80253b4:	0a09      	lsrs	r1, r1, #8
 80253b6:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80253ba:	fb01 4100 	mla	r1, r1, r0, r4
 80253be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80253c2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80253c6:	fb07 f70a 	mul.w	r7, r7, sl
 80253ca:	0a09      	lsrs	r1, r1, #8
 80253cc:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 80253d0:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 80253d4:	fb03 7101 	mla	r1, r3, r1, r7
 80253d8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80253dc:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80253e0:	fb0e 1e08 	mla	lr, lr, r8, r1
 80253e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80253e8:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 80253ec:	fb00 e101 	mla	r1, r0, r1, lr
 80253f0:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80253f4:	9a00      	ldr	r2, [sp, #0]
 80253f6:	b287      	uxth	r7, r0
 80253f8:	437a      	muls	r2, r7
 80253fa:	1c53      	adds	r3, r2, #1
 80253fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025400:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8025404:	0a09      	lsrs	r1, r1, #8
 8025406:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802540a:	4321      	orrs	r1, r4
 802540c:	0c0a      	lsrs	r2, r1, #16
 802540e:	8836      	ldrh	r6, [r6, #0]
 8025410:	fb12 f207 	smulbb	r2, r2, r7
 8025414:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8025418:	b2c8      	uxtb	r0, r1
 802541a:	1235      	asrs	r5, r6, #8
 802541c:	fb14 f407 	smulbb	r4, r4, r7
 8025420:	fb10 f007 	smulbb	r0, r0, r7
 8025424:	b2db      	uxtb	r3, r3
 8025426:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802542a:	fb05 2503 	mla	r5, r5, r3, r2
 802542e:	10f2      	asrs	r2, r6, #3
 8025430:	00f6      	lsls	r6, r6, #3
 8025432:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025436:	b2f6      	uxtb	r6, r6
 8025438:	fb02 4203 	mla	r2, r2, r3, r4
 802543c:	fb06 0303 	mla	r3, r6, r3, r0
 8025440:	b2ad      	uxth	r5, r5
 8025442:	b299      	uxth	r1, r3
 8025444:	b294      	uxth	r4, r2
 8025446:	1c6b      	adds	r3, r5, #1
 8025448:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802544c:	1c62      	adds	r2, r4, #1
 802544e:	1c4b      	adds	r3, r1, #1
 8025450:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025454:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8025458:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802545c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025460:	0952      	lsrs	r2, r2, #5
 8025462:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025466:	432b      	orrs	r3, r5
 8025468:	4313      	orrs	r3, r2
 802546a:	9a02      	ldr	r2, [sp, #8]
 802546c:	8013      	strh	r3, [r2, #0]
 802546e:	b005      	add	sp, #20
 8025470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025474:	2500      	movs	r5, #0
 8025476:	e6e9      	b.n	802524c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8025478:	2100      	movs	r1, #0
 802547a:	460d      	mov	r5, r1
 802547c:	e6f3      	b.n	8025266 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802547e:	2100      	movs	r1, #0
 8025480:	e6f1      	b.n	8025266 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025482:	4631      	mov	r1, r6
 8025484:	e6ef      	b.n	8025266 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025486:	2400      	movs	r4, #0
 8025488:	e700      	b.n	802528c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 802548a:	2200      	movs	r2, #0
 802548c:	4614      	mov	r4, r2
 802548e:	e70b      	b.n	80252a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025490:	4602      	mov	r2, r0
 8025492:	4604      	mov	r4, r0
 8025494:	e708      	b.n	80252a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025496:	2200      	movs	r2, #0
 8025498:	e706      	b.n	80252a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802549a:	4632      	mov	r2, r6
 802549c:	e704      	b.n	80252a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0802549e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802549e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254a2:	b09f      	sub	sp, #124	@ 0x7c
 80254a4:	921b      	str	r2, [sp, #108]	@ 0x6c
 80254a6:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80254a8:	901d      	str	r0, [sp, #116]	@ 0x74
 80254aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80254ac:	6850      	ldr	r0, [r2, #4]
 80254ae:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80254b2:	9119      	str	r1, [sp, #100]	@ 0x64
 80254b4:	931c      	str	r3, [sp, #112]	@ 0x70
 80254b6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80254ba:	fb00 1303 	mla	r3, r0, r3, r1
 80254be:	6812      	ldr	r2, [r2, #0]
 80254c0:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80254c2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80254c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80254c8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80254ca:	681b      	ldr	r3, [r3, #0]
 80254cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80254ce:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80254d0:	685e      	ldr	r6, [r3, #4]
 80254d2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80254d6:	3604      	adds	r6, #4
 80254d8:	930d      	str	r3, [sp, #52]	@ 0x34
 80254da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80254dc:	2b00      	cmp	r3, #0
 80254de:	dc03      	bgt.n	80254e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80254e0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80254e2:	2b00      	cmp	r3, #0
 80254e4:	f340 8387 	ble.w	8025bf6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80254e8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80254ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80254ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80254f2:	1e48      	subs	r0, r1, #1
 80254f4:	1e57      	subs	r7, r2, #1
 80254f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80254f8:	2b00      	cmp	r3, #0
 80254fa:	f340 8194 	ble.w	8025826 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80254fe:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025500:	142b      	asrs	r3, r5, #16
 8025502:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025506:	d406      	bmi.n	8025516 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025508:	4584      	cmp	ip, r0
 802550a:	da04      	bge.n	8025516 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802550c:	2b00      	cmp	r3, #0
 802550e:	db02      	blt.n	8025516 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025510:	42bb      	cmp	r3, r7
 8025512:	f2c0 8189 	blt.w	8025828 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025516:	f11c 0c01 	adds.w	ip, ip, #1
 802551a:	f100 8177 	bmi.w	802580c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802551e:	4561      	cmp	r1, ip
 8025520:	f2c0 8174 	blt.w	802580c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025524:	3301      	adds	r3, #1
 8025526:	f100 8171 	bmi.w	802580c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802552a:	429a      	cmp	r2, r3
 802552c:	f2c0 816e 	blt.w	802580c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025532:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025534:	931a      	str	r3, [sp, #104]	@ 0x68
 8025536:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025538:	2b00      	cmp	r3, #0
 802553a:	f340 8193 	ble.w	8025864 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 802553e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025540:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025544:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025548:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802554a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802554e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8025552:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025554:	141b      	asrs	r3, r3, #16
 8025556:	f100 81d6 	bmi.w	8025906 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802555a:	f100 38ff 	add.w	r8, r0, #4294967295
 802555e:	4543      	cmp	r3, r8
 8025560:	f280 81d1 	bge.w	8025906 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025564:	f1bc 0f00 	cmp.w	ip, #0
 8025568:	f2c0 81cd 	blt.w	8025906 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802556c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025570:	45c4      	cmp	ip, r8
 8025572:	f280 81c8 	bge.w	8025906 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025576:	b200      	sxth	r0, r0
 8025578:	fb0c 3300 	mla	r3, ip, r0, r3
 802557c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802557e:	eb04 0803 	add.w	r8, r4, r3
 8025582:	5ce3      	ldrb	r3, [r4, r3]
 8025584:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025588:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802558c:	2a00      	cmp	r2, #0
 802558e:	f000 81af 	beq.w	80258f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025592:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025596:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802559a:	940e      	str	r4, [sp, #56]	@ 0x38
 802559c:	0e24      	lsrs	r4, r4, #24
 802559e:	9415      	str	r4, [sp, #84]	@ 0x54
 80255a0:	b179      	cbz	r1, 80255c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80255a2:	eb08 0c00 	add.w	ip, r8, r0
 80255a6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80255aa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80255ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80255b0:	0e00      	lsrs	r0, r0, #24
 80255b2:	9013      	str	r0, [sp, #76]	@ 0x4c
 80255b4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80255b8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80255bc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80255be:	0e00      	lsrs	r0, r0, #24
 80255c0:	9016      	str	r0, [sp, #88]	@ 0x58
 80255c2:	b292      	uxth	r2, r2
 80255c4:	b289      	uxth	r1, r1
 80255c6:	fb02 f901 	mul.w	r9, r2, r1
 80255ca:	0112      	lsls	r2, r2, #4
 80255cc:	eba2 0809 	sub.w	r8, r2, r9
 80255d0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80255d2:	fa1f f888 	uxth.w	r8, r8
 80255d6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80255da:	fb08 f000 	mul.w	r0, r8, r0
 80255de:	b289      	uxth	r1, r1
 80255e0:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80255e4:	1a52      	subs	r2, r2, r1
 80255e6:	b292      	uxth	r2, r2
 80255e8:	fb02 000e 	mla	r0, r2, lr, r0
 80255ec:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80255ee:	fb01 0004 	mla	r0, r1, r4, r0
 80255f2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80255f4:	fb09 0004 	mla	r0, r9, r4, r0
 80255f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80255fc:	2800      	cmp	r0, #0
 80255fe:	f000 80fa 	beq.w	80257f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025602:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025606:	d01b      	beq.n	8025640 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025608:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802560c:	fb0e fa0a 	mul.w	sl, lr, sl
 8025610:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025614:	fb0e fe03 	mul.w	lr, lr, r3
 8025618:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802561c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025620:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025624:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025628:	4453      	add	r3, sl
 802562a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802562e:	0a1b      	lsrs	r3, r3, #8
 8025630:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025634:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025638:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802563c:	ea43 030c 	orr.w	r3, r3, ip
 8025640:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025642:	2cff      	cmp	r4, #255	@ 0xff
 8025644:	d021      	beq.n	802568a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8025646:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025648:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802564c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802564e:	fb04 fb0b 	mul.w	fp, r4, fp
 8025652:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025654:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025658:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802565c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802565e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025662:	fb04 fa0a 	mul.w	sl, r4, sl
 8025666:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802566a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802566e:	44de      	add	lr, fp
 8025670:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025674:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025678:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802567c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025680:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025684:	ea4e 040a 	orr.w	r4, lr, sl
 8025688:	940e      	str	r4, [sp, #56]	@ 0x38
 802568a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802568c:	2cff      	cmp	r4, #255	@ 0xff
 802568e:	d021      	beq.n	80256d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8025690:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025692:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025696:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025698:	fb04 fb0b 	mul.w	fp, r4, fp
 802569c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802569e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80256a2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80256a6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80256a8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80256ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80256b0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80256b4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80256b8:	44de      	add	lr, fp
 80256ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80256be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80256c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80256c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80256ca:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80256ce:	ea4e 040a 	orr.w	r4, lr, sl
 80256d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80256d4:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80256d6:	2cff      	cmp	r4, #255	@ 0xff
 80256d8:	d021      	beq.n	802571e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 80256da:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80256dc:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80256e0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80256e2:	fb04 fb0b 	mul.w	fp, r4, fp
 80256e6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80256e8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80256ec:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80256f0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80256f2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80256f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80256fa:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80256fe:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025702:	44de      	add	lr, fp
 8025704:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025708:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802570c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025710:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025714:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025718:	ea4e 040a 	orr.w	r4, lr, sl
 802571c:	940f      	str	r4, [sp, #60]	@ 0x3c
 802571e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025720:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8025724:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025728:	fb08 fc0c 	mul.w	ip, r8, ip
 802572c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025730:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025732:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025736:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802573a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802573e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025740:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025744:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025746:	fb09 cc0e 	mla	ip, r9, lr, ip
 802574a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802574e:	fb08 f80e 	mul.w	r8, r8, lr
 8025752:	fb02 8303 	mla	r3, r2, r3, r8
 8025756:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025758:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802575c:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025760:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025762:	fb01 330a 	mla	r3, r1, sl, r3
 8025766:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 802576a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802576c:	fb09 3901 	mla	r9, r9, r1, r3
 8025770:	4342      	muls	r2, r0
 8025772:	1c50      	adds	r0, r2, #1
 8025774:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025778:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802577c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025780:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025784:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025788:	ea4c 0c09 	orr.w	ip, ip, r9
 802578c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802578e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025792:	883b      	ldrh	r3, [r7, #0]
 8025794:	fb12 f204 	smulbb	r2, r2, r4
 8025798:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802579c:	fa5f fc8c 	uxtb.w	ip, ip
 80257a0:	1219      	asrs	r1, r3, #8
 80257a2:	fb1c fc04 	smulbb	ip, ip, r4
 80257a6:	b2c0      	uxtb	r0, r0
 80257a8:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80257ac:	fb01 2100 	mla	r1, r1, r0, r2
 80257b0:	10da      	asrs	r2, r3, #3
 80257b2:	00db      	lsls	r3, r3, #3
 80257b4:	fb1e fe04 	smulbb	lr, lr, r4
 80257b8:	b2db      	uxtb	r3, r3
 80257ba:	fb03 c300 	mla	r3, r3, r0, ip
 80257be:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80257c2:	b289      	uxth	r1, r1
 80257c4:	fb02 e200 	mla	r2, r2, r0, lr
 80257c8:	fa1f fc83 	uxth.w	ip, r3
 80257cc:	1c4b      	adds	r3, r1, #1
 80257ce:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80257d2:	f10c 0301 	add.w	r3, ip, #1
 80257d6:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80257da:	b292      	uxth	r2, r2
 80257dc:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80257e0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80257e4:	430b      	orrs	r3, r1
 80257e6:	1c51      	adds	r1, r2, #1
 80257e8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80257ec:	0952      	lsrs	r2, r2, #5
 80257ee:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80257f2:	4313      	orrs	r3, r2
 80257f4:	803b      	strh	r3, [r7, #0]
 80257f6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80257f8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80257fa:	3702      	adds	r7, #2
 80257fc:	441a      	add	r2, r3
 80257fe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025800:	9229      	str	r2, [sp, #164]	@ 0xa4
 8025802:	441d      	add	r5, r3
 8025804:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025806:	3b01      	subs	r3, #1
 8025808:	931a      	str	r3, [sp, #104]	@ 0x68
 802580a:	e694      	b.n	8025536 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802580c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802580e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025810:	441c      	add	r4, r3
 8025812:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025814:	9429      	str	r4, [sp, #164]	@ 0xa4
 8025816:	441d      	add	r5, r3
 8025818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802581a:	3b01      	subs	r3, #1
 802581c:	9309      	str	r3, [sp, #36]	@ 0x24
 802581e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025820:	3302      	adds	r3, #2
 8025822:	930c      	str	r3, [sp, #48]	@ 0x30
 8025824:	e667      	b.n	80254f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025826:	d024      	beq.n	8025872 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8025828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802582a:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802582c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802582e:	3b01      	subs	r3, #1
 8025830:	fb00 4003 	mla	r0, r0, r3, r4
 8025834:	1400      	asrs	r0, r0, #16
 8025836:	f53f ae7b 	bmi.w	8025530 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802583a:	3901      	subs	r1, #1
 802583c:	4288      	cmp	r0, r1
 802583e:	f6bf ae77 	bge.w	8025530 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025842:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8025844:	fb01 5303 	mla	r3, r1, r3, r5
 8025848:	141b      	asrs	r3, r3, #16
 802584a:	f53f ae71 	bmi.w	8025530 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802584e:	3a01      	subs	r2, #1
 8025850:	4293      	cmp	r3, r2
 8025852:	f6bf ae6d 	bge.w	8025530 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025856:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802585a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 802585e:	f1bb 0f00 	cmp.w	fp, #0
 8025862:	dc70      	bgt.n	8025946 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8025864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025866:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802586a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802586c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025870:	930c      	str	r3, [sp, #48]	@ 0x30
 8025872:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025874:	2b00      	cmp	r3, #0
 8025876:	f340 81be 	ble.w	8025bf6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 802587a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802587e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025882:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025886:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802588a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802588e:	eef0 6a62 	vmov.f32	s13, s5
 8025892:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025896:	ee77 2a62 	vsub.f32	s5, s14, s5
 802589a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802589e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80258a6:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 80258aa:	eef0 6a43 	vmov.f32	s13, s6
 80258ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80258b2:	ee12 2a90 	vmov	r2, s5
 80258b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80258ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80258bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80258c4:	ee13 2a10 	vmov	r2, s6
 80258c8:	932b      	str	r3, [sp, #172]	@ 0xac
 80258ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80258cc:	ee16 5a90 	vmov	r5, s13
 80258d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80258d4:	932c      	str	r3, [sp, #176]	@ 0xb0
 80258d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80258d8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80258da:	3b01      	subs	r3, #1
 80258dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80258de:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80258e0:	bf08      	it	eq
 80258e2:	4613      	moveq	r3, r2
 80258e4:	eeb0 3a67 	vmov.f32	s6, s15
 80258e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80258ea:	eef0 2a47 	vmov.f32	s5, s14
 80258ee:	e5f4      	b.n	80254da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80258f0:	2900      	cmp	r1, #0
 80258f2:	f43f ae66 	beq.w	80255c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80258f6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80258fa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80258fe:	900a      	str	r0, [sp, #40]	@ 0x28
 8025900:	0e00      	lsrs	r0, r0, #24
 8025902:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025904:	e65d      	b.n	80255c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025906:	f113 0801 	adds.w	r8, r3, #1
 802590a:	f53f af74 	bmi.w	80257f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802590e:	4540      	cmp	r0, r8
 8025910:	f6ff af71 	blt.w	80257f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025914:	f11c 0801 	adds.w	r8, ip, #1
 8025918:	f53f af6d 	bmi.w	80257f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802591c:	45c6      	cmp	lr, r8
 802591e:	f6ff af6a 	blt.w	80257f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025922:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025924:	9302      	str	r3, [sp, #8]
 8025926:	b200      	sxth	r0, r0
 8025928:	fa0f f38e 	sxth.w	r3, lr
 802592c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025930:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025934:	9301      	str	r3, [sp, #4]
 8025936:	9000      	str	r0, [sp, #0]
 8025938:	4633      	mov	r3, r6
 802593a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802593c:	4639      	mov	r1, r7
 802593e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8025940:	f7ff fc63 	bl	802520a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8025944:	e757      	b.n	80257f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025946:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025948:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802594a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802594e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025950:	1427      	asrs	r7, r4, #16
 8025952:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025956:	142b      	asrs	r3, r5, #16
 8025958:	fb01 7303 	mla	r3, r1, r3, r7
 802595c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802595e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025962:	18e7      	adds	r7, r4, r3
 8025964:	5ce3      	ldrb	r3, [r4, r3]
 8025966:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802596a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802596e:	2a00      	cmp	r2, #0
 8025970:	f000 8137 	beq.w	8025be2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8025974:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025978:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802597c:	9410      	str	r4, [sp, #64]	@ 0x40
 802597e:	0e24      	lsrs	r4, r4, #24
 8025980:	9417      	str	r4, [sp, #92]	@ 0x5c
 8025982:	b170      	cbz	r0, 80259a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025984:	eb07 0e01 	add.w	lr, r7, r1
 8025988:	5c79      	ldrb	r1, [r7, r1]
 802598a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802598e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025990:	0e09      	lsrs	r1, r1, #24
 8025992:	9114      	str	r1, [sp, #80]	@ 0x50
 8025994:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025998:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802599c:	9111      	str	r1, [sp, #68]	@ 0x44
 802599e:	0e09      	lsrs	r1, r1, #24
 80259a0:	9118      	str	r1, [sp, #96]	@ 0x60
 80259a2:	b292      	uxth	r2, r2
 80259a4:	b280      	uxth	r0, r0
 80259a6:	fb02 f800 	mul.w	r8, r2, r0
 80259aa:	0112      	lsls	r2, r2, #4
 80259ac:	eba2 0e08 	sub.w	lr, r2, r8
 80259b0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80259b2:	fa1f fe8e 	uxth.w	lr, lr
 80259b6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80259ba:	fb0e f101 	mul.w	r1, lr, r1
 80259be:	b280      	uxth	r0, r0
 80259c0:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80259c4:	1a12      	subs	r2, r2, r0
 80259c6:	b292      	uxth	r2, r2
 80259c8:	fb02 110c 	mla	r1, r2, ip, r1
 80259cc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80259ce:	fb00 1104 	mla	r1, r0, r4, r1
 80259d2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80259d4:	fb08 1104 	mla	r1, r8, r4, r1
 80259d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80259dc:	2900      	cmp	r1, #0
 80259de:	f000 80f5 	beq.w	8025bcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80259e2:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80259e6:	d019      	beq.n	8025a1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80259e8:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80259ec:	fb0c fa0a 	mul.w	sl, ip, sl
 80259f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80259f4:	fb0c fc03 	mul.w	ip, ip, r3
 80259f8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80259fc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025a00:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025a04:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8025a08:	4453      	add	r3, sl
 8025a0a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025a0e:	0a1b      	lsrs	r3, r3, #8
 8025a10:	0a3f      	lsrs	r7, r7, #8
 8025a12:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025a16:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025a1a:	433b      	orrs	r3, r7
 8025a1c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025a1e:	2cff      	cmp	r4, #255	@ 0xff
 8025a20:	d020      	beq.n	8025a64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8025a22:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025a24:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025a28:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025a2a:	4367      	muls	r7, r4
 8025a2c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025a2e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025a32:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025a36:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025a38:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025a3c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a40:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a44:	44bc      	add	ip, r7
 8025a46:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025a4a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025a4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a56:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a5a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025a5e:	ea4c 040a 	orr.w	r4, ip, sl
 8025a62:	9410      	str	r4, [sp, #64]	@ 0x40
 8025a64:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025a66:	2cff      	cmp	r4, #255	@ 0xff
 8025a68:	d020      	beq.n	8025aac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8025a6a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a6c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025a70:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025a72:	4367      	muls	r7, r4
 8025a74:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a76:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025a7a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025a7e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025a80:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025a84:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a88:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a8c:	44bc      	add	ip, r7
 8025a8e:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025a92:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025a96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a9e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025aa2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025aa6:	ea4c 040a 	orr.w	r4, ip, sl
 8025aaa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025aac:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025aae:	2cff      	cmp	r4, #255	@ 0xff
 8025ab0:	d020      	beq.n	8025af4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8025ab2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025ab4:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025ab8:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025aba:	4367      	muls	r7, r4
 8025abc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025abe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025ac2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025ac6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025ac8:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025acc:	fb04 fa0a 	mul.w	sl, r4, sl
 8025ad0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025ad4:	44bc      	add	ip, r7
 8025ad6:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025ada:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025ade:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ae2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ae6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025aea:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025aee:	ea4c 040a 	orr.w	r4, ip, sl
 8025af2:	9411      	str	r4, [sp, #68]	@ 0x44
 8025af4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025af6:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025afa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025afe:	fb0e f707 	mul.w	r7, lr, r7
 8025b02:	fb02 770c 	mla	r7, r2, ip, r7
 8025b06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025b0c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025b10:	fb00 770c 	mla	r7, r0, ip, r7
 8025b14:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025b16:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025b1a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025b1c:	fb08 770c 	mla	r7, r8, ip, r7
 8025b20:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025b24:	fb0e fe0c 	mul.w	lr, lr, ip
 8025b28:	fb02 e303 	mla	r3, r2, r3, lr
 8025b2c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025b2e:	0a3f      	lsrs	r7, r7, #8
 8025b30:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025b34:	fb00 330a 	mla	r3, r0, sl, r3
 8025b38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025b3a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025b3e:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8025b42:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025b46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025b48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b4c:	434b      	muls	r3, r1
 8025b4e:	1c59      	adds	r1, r3, #1
 8025b50:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025b54:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025b58:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025b5c:	ea47 070c 	orr.w	r7, r7, ip
 8025b60:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025b62:	0c3b      	lsrs	r3, r7, #16
 8025b64:	f8b9 0000 	ldrh.w	r0, [r9]
 8025b68:	fb13 f304 	smulbb	r3, r3, r4
 8025b6c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025b70:	b2ff      	uxtb	r7, r7
 8025b72:	1202      	asrs	r2, r0, #8
 8025b74:	fb17 f704 	smulbb	r7, r7, r4
 8025b78:	b2c9      	uxtb	r1, r1
 8025b7a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025b7e:	fb02 3201 	mla	r2, r2, r1, r3
 8025b82:	10c3      	asrs	r3, r0, #3
 8025b84:	00c0      	lsls	r0, r0, #3
 8025b86:	fb1c fc04 	smulbb	ip, ip, r4
 8025b8a:	b2c0      	uxtb	r0, r0
 8025b8c:	fb00 7001 	mla	r0, r0, r1, r7
 8025b90:	b292      	uxth	r2, r2
 8025b92:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8025b96:	fb03 c301 	mla	r3, r3, r1, ip
 8025b9a:	f102 0c01 	add.w	ip, r2, #1
 8025b9e:	b280      	uxth	r0, r0
 8025ba0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025ba4:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8025ba8:	1c42      	adds	r2, r0, #1
 8025baa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025bae:	b29b      	uxth	r3, r3
 8025bb0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025bb4:	ea42 020c 	orr.w	r2, r2, ip
 8025bb8:	f103 0c01 	add.w	ip, r3, #1
 8025bbc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025bc0:	095b      	lsrs	r3, r3, #5
 8025bc2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025bc6:	431a      	orrs	r2, r3
 8025bc8:	f8a9 2000 	strh.w	r2, [r9]
 8025bcc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025bce:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025bd0:	f109 0902 	add.w	r9, r9, #2
 8025bd4:	441a      	add	r2, r3
 8025bd6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025bd8:	9229      	str	r2, [sp, #164]	@ 0xa4
 8025bda:	441d      	add	r5, r3
 8025bdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025be0:	e63d      	b.n	802585e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8025be2:	2800      	cmp	r0, #0
 8025be4:	f43f aedd 	beq.w	80259a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025be8:	5c79      	ldrb	r1, [r7, r1]
 8025bea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025bee:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025bf0:	0e09      	lsrs	r1, r1, #24
 8025bf2:	9114      	str	r1, [sp, #80]	@ 0x50
 8025bf4:	e6d5      	b.n	80259a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025bf6:	b01f      	add	sp, #124	@ 0x7c
 8025bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025bfc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c00:	b089      	sub	sp, #36	@ 0x24
 8025c02:	9101      	str	r1, [sp, #4]
 8025c04:	9801      	ldr	r0, [sp, #4]
 8025c06:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8025c0a:	8800      	ldrh	r0, [r0, #0]
 8025c0c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8025c10:	1206      	asrs	r6, r0, #8
 8025c12:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8025c16:	9602      	str	r6, [sp, #8]
 8025c18:	10c6      	asrs	r6, r0, #3
 8025c1a:	00c0      	lsls	r0, r0, #3
 8025c1c:	b2c0      	uxtb	r0, r0
 8025c1e:	9004      	str	r0, [sp, #16]
 8025c20:	fb07 100c 	mla	r0, r7, ip, r1
 8025c24:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8025c28:	2f00      	cmp	r7, #0
 8025c2a:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8025c2e:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8025c32:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8025c36:	9603      	str	r6, [sp, #12]
 8025c38:	eb02 0e00 	add.w	lr, r2, r0
 8025c3c:	f2c0 810a 	blt.w	8025e54 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025c40:	45b8      	cmp	r8, r7
 8025c42:	f340 8107 	ble.w	8025e54 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025c46:	2900      	cmp	r1, #0
 8025c48:	f2c0 8102 	blt.w	8025e50 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025c4c:	458c      	cmp	ip, r1
 8025c4e:	f340 80ff 	ble.w	8025e50 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025c52:	5c12      	ldrb	r2, [r2, r0]
 8025c54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8025c58:	1c4a      	adds	r2, r1, #1
 8025c5a:	f100 80fe 	bmi.w	8025e5a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8025c5e:	4594      	cmp	ip, r2
 8025c60:	f340 80fb 	ble.w	8025e5a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8025c64:	2d00      	cmp	r5, #0
 8025c66:	f000 80fa 	beq.w	8025e5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8025c6a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025c6e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025c72:	3701      	adds	r7, #1
 8025c74:	f100 80f7 	bmi.w	8025e66 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8025c78:	45b8      	cmp	r8, r7
 8025c7a:	f340 80f4 	ble.w	8025e66 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8025c7e:	2c00      	cmp	r4, #0
 8025c80:	f000 80f4 	beq.w	8025e6c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8025c84:	2900      	cmp	r1, #0
 8025c86:	eb0e 020c 	add.w	r2, lr, ip
 8025c8a:	f2c0 80ea 	blt.w	8025e62 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8025c8e:	458c      	cmp	ip, r1
 8025c90:	f340 80e7 	ble.w	8025e62 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8025c94:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8025c98:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8025c9c:	3101      	adds	r1, #1
 8025c9e:	f100 80e8 	bmi.w	8025e72 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8025ca2:	458c      	cmp	ip, r1
 8025ca4:	f340 80e5 	ble.w	8025e72 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8025ca8:	2d00      	cmp	r5, #0
 8025caa:	f000 80e4 	beq.w	8025e76 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8025cae:	7852      	ldrb	r2, [r2, #1]
 8025cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025cb4:	0e0b      	lsrs	r3, r1, #24
 8025cb6:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8025cba:	9300      	str	r3, [sp, #0]
 8025cbc:	b2a4      	uxth	r4, r4
 8025cbe:	b2ab      	uxth	r3, r5
 8025cc0:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8025cc4:	fb03 f904 	mul.w	r9, r3, r4
 8025cc8:	fb0a f505 	mul.w	r5, sl, r5
 8025ccc:	011b      	lsls	r3, r3, #4
 8025cce:	eba3 0e09 	sub.w	lr, r3, r9
 8025cd2:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8025cd6:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8025cda:	0a28      	lsrs	r0, r5, #8
 8025cdc:	fb0a f303 	mul.w	r3, sl, r3
 8025ce0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025ce4:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8025ce8:	4405      	add	r5, r0
 8025cea:	0a2d      	lsrs	r5, r5, #8
 8025cec:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8025cf0:	9005      	str	r0, [sp, #20]
 8025cf2:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8025cf6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025cfa:	0a1b      	lsrs	r3, r3, #8
 8025cfc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025d00:	9306      	str	r3, [sp, #24]
 8025d02:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8025d06:	fb0b f303 	mul.w	r3, fp, r3
 8025d0a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025d0e:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8025d12:	fb0b f606 	mul.w	r6, fp, r6
 8025d16:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8025d1a:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025d1e:	fb08 f707 	mul.w	r7, r8, r7
 8025d22:	0a1d      	lsrs	r5, r3, #8
 8025d24:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025d28:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8025d2c:	441d      	add	r5, r3
 8025d2e:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 8025d32:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025d36:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8025d3a:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025d3e:	fb08 fc0c 	mul.w	ip, r8, ip
 8025d42:	0a1b      	lsrs	r3, r3, #8
 8025d44:	9307      	str	r3, [sp, #28]
 8025d46:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8025d4a:	0e0b      	lsrs	r3, r1, #24
 8025d4c:	0a2d      	lsrs	r5, r5, #8
 8025d4e:	fa1f fe8e 	uxth.w	lr, lr
 8025d52:	435f      	muls	r7, r3
 8025d54:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025d58:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8025d5c:	fb05 f50e 	mul.w	r5, r5, lr
 8025d60:	b2a4      	uxth	r4, r4
 8025d62:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8025d66:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8025d6a:	4359      	muls	r1, r3
 8025d6c:	1b12      	subs	r2, r2, r4
 8025d6e:	9b05      	ldr	r3, [sp, #20]
 8025d70:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025d74:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025d78:	b292      	uxth	r2, r2
 8025d7a:	4460      	add	r0, ip
 8025d7c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025d80:	fb03 5502 	mla	r5, r3, r2, r5
 8025d84:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025d88:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025d8c:	44bc      	add	ip, r7
 8025d8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d92:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025d96:	0a36      	lsrs	r6, r6, #8
 8025d98:	fb0c 5509 	mla	r5, ip, r9, r5
 8025d9c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025da0:	fb0e f606 	mul.w	r6, lr, r6
 8025da4:	9b06      	ldr	r3, [sp, #24]
 8025da6:	0a00      	lsrs	r0, r0, #8
 8025da8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025dac:	fb00 5504 	mla	r5, r0, r4, r5
 8025db0:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8025db4:	fb02 6000 	mla	r0, r2, r0, r6
 8025db8:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8025dbc:	fb0e fe0b 	mul.w	lr, lr, fp
 8025dc0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8025dc4:	0a09      	lsrs	r1, r1, #8
 8025dc6:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8025dca:	fb09 0001 	mla	r0, r9, r1, r0
 8025dce:	fb02 e20a 	mla	r2, r2, sl, lr
 8025dd2:	9b07      	ldr	r3, [sp, #28]
 8025dd4:	0a2d      	lsrs	r5, r5, #8
 8025dd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025dda:	fb04 0003 	mla	r0, r4, r3, r0
 8025dde:	fb04 2408 	mla	r4, r4, r8, r2
 8025de2:	9b00      	ldr	r3, [sp, #0]
 8025de4:	9a04      	ldr	r2, [sp, #16]
 8025de6:	fb09 4903 	mla	r9, r9, r3, r4
 8025dea:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8025dee:	9b02      	ldr	r3, [sp, #8]
 8025df0:	fa5f f989 	uxtb.w	r9, r9
 8025df4:	fb03 f109 	mul.w	r1, r3, r9
 8025df8:	9b03      	ldr	r3, [sp, #12]
 8025dfa:	0a00      	lsrs	r0, r0, #8
 8025dfc:	fb03 f309 	mul.w	r3, r3, r9
 8025e00:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025e04:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025e08:	4305      	orrs	r5, r0
 8025e0a:	fb02 f909 	mul.w	r9, r2, r9
 8025e0e:	1c58      	adds	r0, r3, #1
 8025e10:	1c4a      	adds	r2, r1, #1
 8025e12:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025e16:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025e1a:	0a2b      	lsrs	r3, r5, #8
 8025e1c:	0c2a      	lsrs	r2, r5, #16
 8025e1e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025e22:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8025e26:	00db      	lsls	r3, r3, #3
 8025e28:	0212      	lsls	r2, r2, #8
 8025e2a:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8025e2e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025e32:	4313      	orrs	r3, r2
 8025e34:	f109 0201 	add.w	r2, r9, #1
 8025e38:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8025e3c:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8025e40:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8025e44:	431d      	orrs	r5, r3
 8025e46:	9b01      	ldr	r3, [sp, #4]
 8025e48:	801d      	strh	r5, [r3, #0]
 8025e4a:	b009      	add	sp, #36	@ 0x24
 8025e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e50:	2000      	movs	r0, #0
 8025e52:	e701      	b.n	8025c58 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8025e54:	2600      	movs	r6, #0
 8025e56:	4630      	mov	r0, r6
 8025e58:	e70b      	b.n	8025c72 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025e5a:	2600      	movs	r6, #0
 8025e5c:	e709      	b.n	8025c72 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025e5e:	462e      	mov	r6, r5
 8025e60:	e707      	b.n	8025c72 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025e62:	2700      	movs	r7, #0
 8025e64:	e71a      	b.n	8025c9c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8025e66:	2100      	movs	r1, #0
 8025e68:	460f      	mov	r7, r1
 8025e6a:	e723      	b.n	8025cb4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025e6c:	4621      	mov	r1, r4
 8025e6e:	4627      	mov	r7, r4
 8025e70:	e720      	b.n	8025cb4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025e72:	2100      	movs	r1, #0
 8025e74:	e71e      	b.n	8025cb4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025e76:	4629      	mov	r1, r5
 8025e78:	e71c      	b.n	8025cb4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

08025e7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e80:	b09b      	sub	sp, #108	@ 0x6c
 8025e82:	9218      	str	r2, [sp, #96]	@ 0x60
 8025e84:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025e86:	9019      	str	r0, [sp, #100]	@ 0x64
 8025e88:	6850      	ldr	r0, [r2, #4]
 8025e8a:	9116      	str	r1, [sp, #88]	@ 0x58
 8025e8c:	9307      	str	r3, [sp, #28]
 8025e8e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8025e92:	fb00 1303 	mla	r3, r0, r3, r1
 8025e96:	6812      	ldr	r2, [r2, #0]
 8025e98:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8025e9a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025ea0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025ea2:	681b      	ldr	r3, [r3, #0]
 8025ea4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025ea6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025ea8:	685e      	ldr	r6, [r3, #4]
 8025eaa:	3604      	adds	r6, #4
 8025eac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025eae:	2b00      	cmp	r3, #0
 8025eb0:	dc03      	bgt.n	8025eba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8025eb2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025eb4:	2b00      	cmp	r3, #0
 8025eb6:	f340 8373 	ble.w	80265a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8025eba:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025ebc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025ec0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025ec4:	1e48      	subs	r0, r1, #1
 8025ec6:	1e57      	subs	r7, r2, #1
 8025ec8:	9b07      	ldr	r3, [sp, #28]
 8025eca:	2b00      	cmp	r3, #0
 8025ecc:	f340 818f 	ble.w	80261ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8025ed0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025ed2:	142b      	asrs	r3, r5, #16
 8025ed4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025ed8:	d406      	bmi.n	8025ee8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025eda:	4584      	cmp	ip, r0
 8025edc:	da04      	bge.n	8025ee8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025ede:	2b00      	cmp	r3, #0
 8025ee0:	db02      	blt.n	8025ee8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025ee2:	42bb      	cmp	r3, r7
 8025ee4:	f2c0 8184 	blt.w	80261f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025ee8:	f11c 0c01 	adds.w	ip, ip, #1
 8025eec:	f100 8172 	bmi.w	80261d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025ef0:	4561      	cmp	r1, ip
 8025ef2:	f2c0 816f 	blt.w	80261d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025ef6:	3301      	adds	r3, #1
 8025ef8:	f100 816c 	bmi.w	80261d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025efc:	429a      	cmp	r2, r3
 8025efe:	f2c0 8169 	blt.w	80261d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025f02:	9b07      	ldr	r3, [sp, #28]
 8025f04:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8025f06:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025f08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025f0a:	2b00      	cmp	r3, #0
 8025f0c:	f340 818e 	ble.w	802622c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8025f10:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025f12:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025f16:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025f1a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025f1c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025f20:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8025f24:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025f26:	141b      	asrs	r3, r3, #16
 8025f28:	f100 81d1 	bmi.w	80262ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025f2c:	f101 38ff 	add.w	r8, r1, #4294967295
 8025f30:	4543      	cmp	r3, r8
 8025f32:	f280 81cc 	bge.w	80262ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025f36:	f1bc 0f00 	cmp.w	ip, #0
 8025f3a:	f2c0 81c8 	blt.w	80262ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025f3e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025f42:	45c4      	cmp	ip, r8
 8025f44:	f280 81c3 	bge.w	80262ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025f48:	b209      	sxth	r1, r1
 8025f4a:	fb0c 3301 	mla	r3, ip, r1, r3
 8025f4e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025f50:	eb04 0803 	add.w	r8, r4, r3
 8025f54:	5ce3      	ldrb	r3, [r4, r3]
 8025f56:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025f5a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025f5e:	2a00      	cmp	r2, #0
 8025f60:	f000 81aa 	beq.w	80262b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8025f64:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025f68:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025f6c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025f6e:	0e24      	lsrs	r4, r4, #24
 8025f70:	9412      	str	r4, [sp, #72]	@ 0x48
 8025f72:	b178      	cbz	r0, 8025f94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8025f74:	eb08 0c01 	add.w	ip, r8, r1
 8025f78:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025f7c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025f80:	9108      	str	r1, [sp, #32]
 8025f82:	0e09      	lsrs	r1, r1, #24
 8025f84:	9110      	str	r1, [sp, #64]	@ 0x40
 8025f86:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8025f8a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025f8e:	910c      	str	r1, [sp, #48]	@ 0x30
 8025f90:	0e09      	lsrs	r1, r1, #24
 8025f92:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025f94:	b292      	uxth	r2, r2
 8025f96:	b280      	uxth	r0, r0
 8025f98:	fb02 f900 	mul.w	r9, r2, r0
 8025f9c:	0112      	lsls	r2, r2, #4
 8025f9e:	eba2 0809 	sub.w	r8, r2, r9
 8025fa2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025fa4:	fa1f f888 	uxth.w	r8, r8
 8025fa8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025fac:	fb08 f101 	mul.w	r1, r8, r1
 8025fb0:	b280      	uxth	r0, r0
 8025fb2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025fb6:	1a12      	subs	r2, r2, r0
 8025fb8:	b292      	uxth	r2, r2
 8025fba:	fb02 110e 	mla	r1, r2, lr, r1
 8025fbe:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025fc0:	fb00 1104 	mla	r1, r0, r4, r1
 8025fc4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025fc6:	fb09 1104 	mla	r1, r9, r4, r1
 8025fca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025fce:	2900      	cmp	r1, #0
 8025fd0:	f000 80f5 	beq.w	80261be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025fd4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025fd8:	d01b      	beq.n	8026012 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025fda:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025fde:	fb0e fa0a 	mul.w	sl, lr, sl
 8025fe2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025fe6:	fb0e fe03 	mul.w	lr, lr, r3
 8025fea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025fee:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025ff2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025ff6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025ffa:	4453      	add	r3, sl
 8025ffc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026000:	0a1b      	lsrs	r3, r3, #8
 8026002:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026006:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802600a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802600e:	ea43 030c 	orr.w	r3, r3, ip
 8026012:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026014:	2cff      	cmp	r4, #255	@ 0xff
 8026016:	d021      	beq.n	802605c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8026018:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802601a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802601e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026020:	fb04 fb0b 	mul.w	fp, r4, fp
 8026024:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026026:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802602a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802602e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026030:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026034:	fb04 fa0a 	mul.w	sl, r4, sl
 8026038:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802603c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026040:	44de      	add	lr, fp
 8026042:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026046:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802604a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802604e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026052:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026056:	ea4e 040a 	orr.w	r4, lr, sl
 802605a:	940b      	str	r4, [sp, #44]	@ 0x2c
 802605c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802605e:	2cff      	cmp	r4, #255	@ 0xff
 8026060:	d021      	beq.n	80260a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8026062:	9c08      	ldr	r4, [sp, #32]
 8026064:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026068:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802606a:	fb04 fb0b 	mul.w	fp, r4, fp
 802606e:	9c08      	ldr	r4, [sp, #32]
 8026070:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026074:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026078:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802607a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802607e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026082:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026086:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802608a:	44de      	add	lr, fp
 802608c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026090:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026094:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026098:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802609c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80260a0:	ea4e 040a 	orr.w	r4, lr, sl
 80260a4:	9408      	str	r4, [sp, #32]
 80260a6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80260a8:	2cff      	cmp	r4, #255	@ 0xff
 80260aa:	d021      	beq.n	80260f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80260ac:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80260ae:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80260b2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80260b4:	fb04 fb0b 	mul.w	fp, r4, fp
 80260b8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80260ba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80260be:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80260c2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80260c4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80260c8:	fb04 fa0a 	mul.w	sl, r4, sl
 80260cc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80260d0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80260d4:	44de      	add	lr, fp
 80260d6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80260da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80260de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80260e2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80260e6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80260ea:	ea4e 040a 	orr.w	r4, lr, sl
 80260ee:	940c      	str	r4, [sp, #48]	@ 0x30
 80260f0:	43c9      	mvns	r1, r1
 80260f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80260f4:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80260f8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80260fc:	fb08 fc0c 	mul.w	ip, r8, ip
 8026100:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026104:	9c08      	ldr	r4, [sp, #32]
 8026106:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802610a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802610e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026112:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026114:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026118:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802611a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802611e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026122:	fb08 f80e 	mul.w	r8, r8, lr
 8026126:	fb02 8303 	mla	r3, r2, r3, r8
 802612a:	9a08      	ldr	r2, [sp, #32]
 802612c:	f8b7 8000 	ldrh.w	r8, [r7]
 8026130:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8026134:	fb00 330a 	mla	r3, r0, sl, r3
 8026138:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802613a:	fa5f fe81 	uxtb.w	lr, r1
 802613e:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8026142:	fb09 3900 	mla	r9, r9, r0, r3
 8026146:	ea4f 2228 	mov.w	r2, r8, asr #8
 802614a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802614e:	fb02 f20e 	mul.w	r2, r2, lr
 8026152:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026156:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802615a:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802615e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026162:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026166:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802616a:	ea4c 0c09 	orr.w	ip, ip, r9
 802616e:	fb00 f00e 	mul.w	r0, r0, lr
 8026172:	1c53      	adds	r3, r2, #1
 8026174:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026178:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802617c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026180:	4a62      	ldr	r2, [pc, #392]	@ (802630c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8026182:	b2db      	uxtb	r3, r3
 8026184:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8026188:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802618c:	b2c9      	uxtb	r1, r1
 802618e:	1c43      	adds	r3, r0, #1
 8026190:	fb01 f10e 	mul.w	r1, r1, lr
 8026194:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026198:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802619c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80261a0:	00db      	lsls	r3, r3, #3
 80261a2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80261a6:	4313      	orrs	r3, r2
 80261a8:	1c4a      	adds	r2, r1, #1
 80261aa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80261ae:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80261b2:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80261b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80261ba:	f8a7 c000 	strh.w	ip, [r7]
 80261be:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80261c0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80261c2:	3702      	adds	r7, #2
 80261c4:	441a      	add	r2, r3
 80261c6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80261c8:	9225      	str	r2, [sp, #148]	@ 0x94
 80261ca:	441d      	add	r5, r3
 80261cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80261ce:	3b01      	subs	r3, #1
 80261d0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80261d2:	e699      	b.n	8025f08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80261d4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80261d6:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80261d8:	441c      	add	r4, r3
 80261da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80261dc:	9425      	str	r4, [sp, #148]	@ 0x94
 80261de:	441d      	add	r5, r3
 80261e0:	9b07      	ldr	r3, [sp, #28]
 80261e2:	3b01      	subs	r3, #1
 80261e4:	9307      	str	r3, [sp, #28]
 80261e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80261e8:	3302      	adds	r3, #2
 80261ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80261ec:	e66c      	b.n	8025ec8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80261ee:	d024      	beq.n	802623a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80261f0:	9b07      	ldr	r3, [sp, #28]
 80261f2:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80261f4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80261f6:	3b01      	subs	r3, #1
 80261f8:	fb00 4003 	mla	r0, r0, r3, r4
 80261fc:	1400      	asrs	r0, r0, #16
 80261fe:	f53f ae80 	bmi.w	8025f02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026202:	3901      	subs	r1, #1
 8026204:	4288      	cmp	r0, r1
 8026206:	f6bf ae7c 	bge.w	8025f02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802620a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802620c:	fb01 5303 	mla	r3, r1, r3, r5
 8026210:	141b      	asrs	r3, r3, #16
 8026212:	f53f ae76 	bmi.w	8025f02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026216:	3a01      	subs	r2, #1
 8026218:	4293      	cmp	r3, r2
 802621a:	f6bf ae72 	bge.w	8025f02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802621e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026222:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8026226:	f1bb 0f00 	cmp.w	fp, #0
 802622a:	dc71      	bgt.n	8026310 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802622c:	9b07      	ldr	r3, [sp, #28]
 802622e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026234:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026238:	930a      	str	r3, [sp, #40]	@ 0x28
 802623a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802623c:	2b00      	cmp	r3, #0
 802623e:	f340 81af 	ble.w	80265a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8026242:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026246:	ee30 0a04 	vadd.f32	s0, s0, s8
 802624a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802624e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026252:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026256:	eef0 6a62 	vmov.f32	s13, s5
 802625a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802625e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026262:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026266:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802626a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802626e:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 8026272:	eef0 6a43 	vmov.f32	s13, s6
 8026276:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802627a:	ee12 2a90 	vmov	r2, s5
 802627e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026282:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026284:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026288:	fb92 f3f3 	sdiv	r3, r2, r3
 802628c:	ee13 2a10 	vmov	r2, s6
 8026290:	9327      	str	r3, [sp, #156]	@ 0x9c
 8026292:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026294:	ee16 5a90 	vmov	r5, s13
 8026298:	fb92 f3f3 	sdiv	r3, r2, r3
 802629c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802629e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80262a0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80262a2:	3b01      	subs	r3, #1
 80262a4:	9316      	str	r3, [sp, #88]	@ 0x58
 80262a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80262a8:	bf08      	it	eq
 80262aa:	4613      	moveq	r3, r2
 80262ac:	eeb0 3a67 	vmov.f32	s6, s15
 80262b0:	9307      	str	r3, [sp, #28]
 80262b2:	eef0 2a47 	vmov.f32	s5, s14
 80262b6:	e5f9      	b.n	8025eac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80262b8:	2800      	cmp	r0, #0
 80262ba:	f43f ae6b 	beq.w	8025f94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80262be:	f818 1001 	ldrb.w	r1, [r8, r1]
 80262c2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80262c6:	9108      	str	r1, [sp, #32]
 80262c8:	0e09      	lsrs	r1, r1, #24
 80262ca:	9110      	str	r1, [sp, #64]	@ 0x40
 80262cc:	e662      	b.n	8025f94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80262ce:	f113 0801 	adds.w	r8, r3, #1
 80262d2:	f53f af74 	bmi.w	80261be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80262d6:	4541      	cmp	r1, r8
 80262d8:	f6ff af71 	blt.w	80261be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80262dc:	f11c 0801 	adds.w	r8, ip, #1
 80262e0:	f53f af6d 	bmi.w	80261be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80262e4:	45c6      	cmp	lr, r8
 80262e6:	f6ff af6a 	blt.w	80261be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80262ea:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80262ee:	b209      	sxth	r1, r1
 80262f0:	fa0f f38e 	sxth.w	r3, lr
 80262f4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80262f8:	9301      	str	r3, [sp, #4]
 80262fa:	9100      	str	r1, [sp, #0]
 80262fc:	4633      	mov	r3, r6
 80262fe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026300:	4639      	mov	r1, r7
 8026302:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8026304:	f7ff fc7a 	bl	8025bfc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8026308:	e759      	b.n	80261be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802630a:	bf00      	nop
 802630c:	fffff800 	.word	0xfffff800
 8026310:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8026312:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8026314:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026318:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802631a:	1427      	asrs	r7, r4, #16
 802631c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026320:	142b      	asrs	r3, r5, #16
 8026322:	fb01 7303 	mla	r3, r1, r3, r7
 8026326:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026328:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802632c:	18e7      	adds	r7, r4, r3
 802632e:	5ce3      	ldrb	r3, [r4, r3]
 8026330:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026334:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026338:	2a00      	cmp	r2, #0
 802633a:	f000 8127 	beq.w	802658c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802633e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8026342:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026346:	940d      	str	r4, [sp, #52]	@ 0x34
 8026348:	0e24      	lsrs	r4, r4, #24
 802634a:	9414      	str	r4, [sp, #80]	@ 0x50
 802634c:	b170      	cbz	r0, 802636c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802634e:	eb07 0e01 	add.w	lr, r7, r1
 8026352:	5c79      	ldrb	r1, [r7, r1]
 8026354:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026358:	9109      	str	r1, [sp, #36]	@ 0x24
 802635a:	0e09      	lsrs	r1, r1, #24
 802635c:	9111      	str	r1, [sp, #68]	@ 0x44
 802635e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026362:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026366:	910e      	str	r1, [sp, #56]	@ 0x38
 8026368:	0e09      	lsrs	r1, r1, #24
 802636a:	9115      	str	r1, [sp, #84]	@ 0x54
 802636c:	b292      	uxth	r2, r2
 802636e:	b280      	uxth	r0, r0
 8026370:	fb02 f800 	mul.w	r8, r2, r0
 8026374:	0112      	lsls	r2, r2, #4
 8026376:	eba2 0e08 	sub.w	lr, r2, r8
 802637a:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 802637e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8026380:	fa1f fe8e 	uxth.w	lr, lr
 8026384:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026388:	fb0e f202 	mul.w	r2, lr, r2
 802638c:	b280      	uxth	r0, r0
 802638e:	1a09      	subs	r1, r1, r0
 8026390:	b289      	uxth	r1, r1
 8026392:	fb01 220c 	mla	r2, r1, ip, r2
 8026396:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026398:	fb00 2204 	mla	r2, r0, r4, r2
 802639c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802639e:	fb08 2204 	mla	r2, r8, r4, r2
 80263a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80263a6:	2a00      	cmp	r2, #0
 80263a8:	f000 80e5 	beq.w	8026576 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80263ac:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80263b0:	d019      	beq.n	80263e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80263b2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80263b6:	fb0c fa0a 	mul.w	sl, ip, sl
 80263ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80263be:	fb0c fc03 	mul.w	ip, ip, r3
 80263c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80263c6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80263ca:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80263ce:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80263d2:	4453      	add	r3, sl
 80263d4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80263d8:	0a1b      	lsrs	r3, r3, #8
 80263da:	0a3f      	lsrs	r7, r7, #8
 80263dc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80263e0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80263e4:	433b      	orrs	r3, r7
 80263e6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80263e8:	2cff      	cmp	r4, #255	@ 0xff
 80263ea:	d020      	beq.n	802642e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80263ec:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80263ee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80263f2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80263f4:	4367      	muls	r7, r4
 80263f6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80263f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80263fc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026400:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026402:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026406:	fb04 fa0a 	mul.w	sl, r4, sl
 802640a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802640e:	44bc      	add	ip, r7
 8026410:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026414:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026418:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802641c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026420:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026424:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026428:	ea4c 040a 	orr.w	r4, ip, sl
 802642c:	940d      	str	r4, [sp, #52]	@ 0x34
 802642e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026430:	2cff      	cmp	r4, #255	@ 0xff
 8026432:	d020      	beq.n	8026476 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8026434:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026436:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802643a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802643c:	4367      	muls	r7, r4
 802643e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026440:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026444:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026448:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802644a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802644e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026452:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026456:	44bc      	add	ip, r7
 8026458:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802645c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026460:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026464:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026468:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802646c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026470:	ea4c 040a 	orr.w	r4, ip, sl
 8026474:	9409      	str	r4, [sp, #36]	@ 0x24
 8026476:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026478:	2cff      	cmp	r4, #255	@ 0xff
 802647a:	d020      	beq.n	80264be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 802647c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802647e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026482:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026484:	4367      	muls	r7, r4
 8026486:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026488:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802648c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026490:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026492:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026496:	fb04 fa0a 	mul.w	sl, r4, sl
 802649a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802649e:	44bc      	add	ip, r7
 80264a0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80264a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80264a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80264ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80264b0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80264b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80264b8:	ea4c 040a 	orr.w	r4, ip, sl
 80264bc:	940e      	str	r4, [sp, #56]	@ 0x38
 80264be:	43d2      	mvns	r2, r2
 80264c0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80264c2:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80264c6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80264ca:	fb0e f707 	mul.w	r7, lr, r7
 80264ce:	fb01 770c 	mla	r7, r1, ip, r7
 80264d2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80264d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80264d8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80264dc:	fb00 770c 	mla	r7, r0, ip, r7
 80264e0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80264e2:	b2d2      	uxtb	r2, r2
 80264e4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80264e8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80264ea:	fb08 770c 	mla	r7, r8, ip, r7
 80264ee:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80264f2:	fb0e fe0c 	mul.w	lr, lr, ip
 80264f6:	fb01 e303 	mla	r3, r1, r3, lr
 80264fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80264fc:	0a3f      	lsrs	r7, r7, #8
 80264fe:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8026502:	fb00 330a 	mla	r3, r0, sl, r3
 8026506:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8026508:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802650c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8026510:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026514:	f8b9 3000 	ldrh.w	r3, [r9]
 8026518:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802651c:	1218      	asrs	r0, r3, #8
 802651e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026522:	4350      	muls	r0, r2
 8026524:	10d9      	asrs	r1, r3, #3
 8026526:	00db      	lsls	r3, r3, #3
 8026528:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802652c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026530:	b2db      	uxtb	r3, r3
 8026532:	ea47 070c 	orr.w	r7, r7, ip
 8026536:	4351      	muls	r1, r2
 8026538:	4353      	muls	r3, r2
 802653a:	1c42      	adds	r2, r0, #1
 802653c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026540:	0c3a      	lsrs	r2, r7, #16
 8026542:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026546:	4a18      	ldr	r2, [pc, #96]	@ (80265a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8026548:	b2c0      	uxtb	r0, r0
 802654a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802654e:	1c4a      	adds	r2, r1, #1
 8026550:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026554:	0a3a      	lsrs	r2, r7, #8
 8026556:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802655a:	00c9      	lsls	r1, r1, #3
 802655c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026560:	4301      	orrs	r1, r0
 8026562:	1c58      	adds	r0, r3, #1
 8026564:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026568:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802656c:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8026570:	4308      	orrs	r0, r1
 8026572:	f8a9 0000 	strh.w	r0, [r9]
 8026576:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026578:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802657a:	f109 0902 	add.w	r9, r9, #2
 802657e:	441a      	add	r2, r3
 8026580:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026582:	9225      	str	r2, [sp, #148]	@ 0x94
 8026584:	441d      	add	r5, r3
 8026586:	f10b 3bff 	add.w	fp, fp, #4294967295
 802658a:	e64c      	b.n	8026226 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802658c:	2800      	cmp	r0, #0
 802658e:	f43f aeed 	beq.w	802636c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026592:	5c79      	ldrb	r1, [r7, r1]
 8026594:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026598:	9109      	str	r1, [sp, #36]	@ 0x24
 802659a:	0e09      	lsrs	r1, r1, #24
 802659c:	9111      	str	r1, [sp, #68]	@ 0x44
 802659e:	e6e5      	b.n	802636c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80265a0:	b01b      	add	sp, #108	@ 0x6c
 80265a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265a6:	bf00      	nop
 80265a8:	fffff800 	.word	0xfffff800

080265ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80265ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80265b0:	b085      	sub	sp, #20
 80265b2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80265b6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80265ba:	fb00 7406 	mla	r4, r0, r6, r7
 80265be:	2800      	cmp	r0, #0
 80265c0:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80265c4:	9103      	str	r1, [sp, #12]
 80265c6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 80265ca:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 80265ce:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 80265d2:	9501      	str	r5, [sp, #4]
 80265d4:	eb03 0904 	add.w	r9, r3, r4
 80265d8:	f2c0 8150 	blt.w	802687c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80265dc:	4583      	cmp	fp, r0
 80265de:	f340 814d 	ble.w	802687c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80265e2:	2f00      	cmp	r7, #0
 80265e4:	f2c0 8146 	blt.w	8026874 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80265e8:	42be      	cmp	r6, r7
 80265ea:	f340 8143 	ble.w	8026874 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80265ee:	f813 c004 	ldrb.w	ip, [r3, r4]
 80265f2:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80265f6:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 80265fa:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80265fe:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8026602:	4355      	muls	r5, r2
 8026604:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026608:	fb0c f203 	mul.w	r2, ip, r3
 802660c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8026610:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8026614:	441d      	add	r5, r3
 8026616:	f102 0320 	add.w	r3, r2, #32
 802661a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802661e:	0a1b      	lsrs	r3, r3, #8
 8026620:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8026624:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026628:	431c      	orrs	r4, r3
 802662a:	1c7b      	adds	r3, r7, #1
 802662c:	f100 812b 	bmi.w	8026886 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8026630:	429e      	cmp	r6, r3
 8026632:	f340 8128 	ble.w	8026886 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8026636:	2900      	cmp	r1, #0
 8026638:	f000 8128 	beq.w	802688c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 802663c:	9a01      	ldr	r2, [sp, #4]
 802663e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8026642:	8855      	ldrh	r5, [r2, #2]
 8026644:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8026648:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 802664c:	fb08 f802 	mul.w	r8, r8, r2
 8026650:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8026654:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026658:	435d      	muls	r5, r3
 802665a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802665e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026662:	44d0      	add	r8, sl
 8026664:	f105 0a20 	add.w	sl, r5, #32
 8026668:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802666c:	0a2d      	lsrs	r5, r5, #8
 802666e:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026672:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026676:	432a      	orrs	r2, r5
 8026678:	3001      	adds	r0, #1
 802667a:	f100 810d 	bmi.w	8026898 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802667e:	4583      	cmp	fp, r0
 8026680:	f340 810a 	ble.w	8026898 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8026684:	f1be 0f00 	cmp.w	lr, #0
 8026688:	f000 810b 	beq.w	80268a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 802668c:	2f00      	cmp	r7, #0
 802668e:	f2c0 8100 	blt.w	8026892 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026692:	42be      	cmp	r6, r7
 8026694:	f340 80fd 	ble.w	8026892 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026698:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 802669c:	9801      	ldr	r0, [sp, #4]
 802669e:	f819 5006 	ldrb.w	r5, [r9, r6]
 80266a2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80266a6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80266aa:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80266ae:	fb0a fa00 	mul.w	sl, sl, r0
 80266b2:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80266b6:	fb05 f808 	mul.w	r8, r5, r8
 80266ba:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80266be:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 80266c2:	4482      	add	sl, r0
 80266c4:	f108 0020 	add.w	r0, r8, #32
 80266c8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80266cc:	0a00      	lsrs	r0, r0, #8
 80266ce:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80266d2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80266d6:	ea4b 0b00 	orr.w	fp, fp, r0
 80266da:	3701      	adds	r7, #1
 80266dc:	f100 80e6 	bmi.w	80268ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80266e0:	42be      	cmp	r6, r7
 80266e2:	f340 80e3 	ble.w	80268ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80266e6:	2900      	cmp	r1, #0
 80266e8:	f000 80e3 	beq.w	80268b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 80266ec:	9801      	ldr	r0, [sp, #4]
 80266ee:	3601      	adds	r6, #1
 80266f0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80266f4:	f819 7006 	ldrb.w	r7, [r9, r6]
 80266f8:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 80266fc:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026700:	fb07 f800 	mul.w	r8, r7, r0
 8026704:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8026708:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802670c:	fb09 f906 	mul.w	r9, r9, r6
 8026710:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8026714:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8026718:	44d1      	add	r9, sl
 802671a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802671e:	f108 0020 	add.w	r0, r8, #32
 8026722:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026726:	0a00      	lsrs	r0, r0, #8
 8026728:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802672c:	4330      	orrs	r0, r6
 802672e:	b28e      	uxth	r6, r1
 8026730:	fa1f f98e 	uxth.w	r9, lr
 8026734:	fb06 f809 	mul.w	r8, r6, r9
 8026738:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802673c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026740:	0136      	lsls	r6, r6, #4
 8026742:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026746:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 802674a:	9601      	str	r6, [sp, #4]
 802674c:	ea4a 0404 	orr.w	r4, sl, r4
 8026750:	fa1f f689 	uxth.w	r6, r9
 8026754:	9602      	str	r6, [sp, #8]
 8026756:	4626      	mov	r6, r4
 8026758:	fb11 f90e 	smulbb	r9, r1, lr
 802675c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026760:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8026764:	f1ce 0410 	rsb	r4, lr, #16
 8026768:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802676c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026770:	1a64      	subs	r4, r4, r1
 8026772:	ea4a 0202 	orr.w	r2, sl, r2
 8026776:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802677a:	434a      	muls	r2, r1
 802677c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8026780:	fb04 2406 	mla	r4, r4, r6, r2
 8026784:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026788:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802678c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026790:	ea4a 0000 	orr.w	r0, sl, r0
 8026794:	fb09 4200 	mla	r2, r9, r0, r4
 8026798:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802679c:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80267a0:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80267a4:	ea44 0b0b 	orr.w	fp, r4, fp
 80267a8:	9c01      	ldr	r4, [sp, #4]
 80267aa:	9e02      	ldr	r6, [sp, #8]
 80267ac:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 80267b0:	1ba4      	subs	r4, r4, r6
 80267b2:	9e01      	ldr	r6, [sp, #4]
 80267b4:	b2a4      	uxth	r4, r4
 80267b6:	eba6 0608 	sub.w	r6, r6, r8
 80267ba:	b2b6      	uxth	r6, r6
 80267bc:	4373      	muls	r3, r6
 80267be:	fb0c 3304 	mla	r3, ip, r4, r3
 80267c2:	9c02      	ldr	r4, [sp, #8]
 80267c4:	9903      	ldr	r1, [sp, #12]
 80267c6:	fb04 3505 	mla	r5, r4, r5, r3
 80267ca:	fb08 5707 	mla	r7, r8, r7, r5
 80267ce:	8808      	ldrh	r0, [r1, #0]
 80267d0:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 80267d4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80267d8:	b289      	uxth	r1, r1
 80267da:	434f      	muls	r7, r1
 80267dc:	1c7b      	adds	r3, r7, #1
 80267de:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80267e2:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80267e6:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80267ea:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80267ee:	1203      	asrs	r3, r0, #8
 80267f0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80267f4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80267f8:	b2ff      	uxtb	r7, r7
 80267fa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80267fe:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026802:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026806:	fb13 f307 	smulbb	r3, r3, r7
 802680a:	ea42 0e0e 	orr.w	lr, r2, lr
 802680e:	fa1f f28e 	uxth.w	r2, lr
 8026812:	1215      	asrs	r5, r2, #8
 8026814:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026818:	fb05 3501 	mla	r5, r5, r1, r3
 802681c:	10c3      	asrs	r3, r0, #3
 802681e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026822:	fb13 f307 	smulbb	r3, r3, r7
 8026826:	10d4      	asrs	r4, r2, #3
 8026828:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802682c:	fb04 3401 	mla	r4, r4, r1, r3
 8026830:	00c3      	lsls	r3, r0, #3
 8026832:	b2db      	uxtb	r3, r3
 8026834:	fb13 f307 	smulbb	r3, r3, r7
 8026838:	00d2      	lsls	r2, r2, #3
 802683a:	b2d2      	uxtb	r2, r2
 802683c:	fb02 3101 	mla	r1, r2, r1, r3
 8026840:	b2ad      	uxth	r5, r5
 8026842:	b289      	uxth	r1, r1
 8026844:	b2a4      	uxth	r4, r4
 8026846:	1c6b      	adds	r3, r5, #1
 8026848:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802684c:	1c62      	adds	r2, r4, #1
 802684e:	1c4b      	adds	r3, r1, #1
 8026850:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026854:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026858:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802685c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026860:	0964      	lsrs	r4, r4, #5
 8026862:	432b      	orrs	r3, r5
 8026864:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8026868:	9a03      	ldr	r2, [sp, #12]
 802686a:	4323      	orrs	r3, r4
 802686c:	8013      	strh	r3, [r2, #0]
 802686e:	b005      	add	sp, #20
 8026870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026874:	f04f 0c00 	mov.w	ip, #0
 8026878:	4664      	mov	r4, ip
 802687a:	e6d6      	b.n	802662a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 802687c:	2300      	movs	r3, #0
 802687e:	469c      	mov	ip, r3
 8026880:	461a      	mov	r2, r3
 8026882:	461c      	mov	r4, r3
 8026884:	e6f8      	b.n	8026678 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026886:	2300      	movs	r3, #0
 8026888:	461a      	mov	r2, r3
 802688a:	e6f5      	b.n	8026678 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802688c:	460b      	mov	r3, r1
 802688e:	460a      	mov	r2, r1
 8026890:	e6f2      	b.n	8026678 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026892:	2500      	movs	r5, #0
 8026894:	46ab      	mov	fp, r5
 8026896:	e720      	b.n	80266da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8026898:	2700      	movs	r7, #0
 802689a:	463d      	mov	r5, r7
 802689c:	4638      	mov	r0, r7
 802689e:	46bb      	mov	fp, r7
 80268a0:	e745      	b.n	802672e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80268a2:	4677      	mov	r7, lr
 80268a4:	4675      	mov	r5, lr
 80268a6:	4670      	mov	r0, lr
 80268a8:	46f3      	mov	fp, lr
 80268aa:	e740      	b.n	802672e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80268ac:	2700      	movs	r7, #0
 80268ae:	4638      	mov	r0, r7
 80268b0:	e73d      	b.n	802672e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80268b2:	460f      	mov	r7, r1
 80268b4:	4608      	mov	r0, r1
 80268b6:	e73a      	b.n	802672e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080268b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80268b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268bc:	b097      	sub	sp, #92	@ 0x5c
 80268be:	9214      	str	r2, [sp, #80]	@ 0x50
 80268c0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80268c2:	9015      	str	r0, [sp, #84]	@ 0x54
 80268c4:	9308      	str	r3, [sp, #32]
 80268c6:	6850      	ldr	r0, [r2, #4]
 80268c8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80268cc:	9111      	str	r1, [sp, #68]	@ 0x44
 80268ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80268d0:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 80268d4:	fb00 1303 	mla	r3, r0, r3, r1
 80268d8:	6812      	ldr	r2, [r2, #0]
 80268da:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80268de:	9309      	str	r3, [sp, #36]	@ 0x24
 80268e0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80268e2:	681b      	ldr	r3, [r3, #0]
 80268e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80268e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80268e8:	685b      	ldr	r3, [r3, #4]
 80268ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80268ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80268f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80268f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80268f4:	2b00      	cmp	r3, #0
 80268f6:	dc03      	bgt.n	8026900 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80268f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80268fa:	2b00      	cmp	r3, #0
 80268fc:	f340 83cb 	ble.w	8027096 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026900:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026902:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026906:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802690a:	1e48      	subs	r0, r1, #1
 802690c:	1e55      	subs	r5, r2, #1
 802690e:	9b08      	ldr	r3, [sp, #32]
 8026910:	2b00      	cmp	r3, #0
 8026912:	f340 81a3 	ble.w	8026c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8026916:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8026918:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802691a:	1436      	asrs	r6, r6, #16
 802691c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026920:	d406      	bmi.n	8026930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026922:	4286      	cmp	r6, r0
 8026924:	da04      	bge.n	8026930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026926:	2b00      	cmp	r3, #0
 8026928:	db02      	blt.n	8026930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802692a:	42ab      	cmp	r3, r5
 802692c:	f2c0 8197 	blt.w	8026c5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8026930:	3601      	adds	r6, #1
 8026932:	f100 8184 	bmi.w	8026c3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026936:	42b1      	cmp	r1, r6
 8026938:	f2c0 8181 	blt.w	8026c3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802693c:	3301      	adds	r3, #1
 802693e:	f100 817e 	bmi.w	8026c3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026942:	429a      	cmp	r2, r3
 8026944:	f2c0 817b 	blt.w	8026c3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026948:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802694c:	9b08      	ldr	r3, [sp, #32]
 802694e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026950:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026952:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026954:	2b00      	cmp	r3, #0
 8026956:	f340 81a4 	ble.w	8026ca2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802695a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802695c:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 802695e:	1418      	asrs	r0, r3, #16
 8026960:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026962:	142d      	asrs	r5, r5, #16
 8026964:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026968:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802696a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802696e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026970:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026974:	f100 81f8 	bmi.w	8026d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026978:	f102 3eff 	add.w	lr, r2, #4294967295
 802697c:	4575      	cmp	r5, lr
 802697e:	f280 81f3 	bge.w	8026d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026982:	2800      	cmp	r0, #0
 8026984:	f2c0 81f0 	blt.w	8026d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026988:	f103 3eff 	add.w	lr, r3, #4294967295
 802698c:	4570      	cmp	r0, lr
 802698e:	f280 81eb 	bge.w	8026d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026992:	b212      	sxth	r2, r2
 8026994:	fb00 5002 	mla	r0, r0, r2, r5
 8026998:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802699a:	fa1f fe81 	uxth.w	lr, r1
 802699e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80269a2:	eb03 0a00 	add.w	sl, r3, r0
 80269a6:	f813 9000 	ldrb.w	r9, [r3, r0]
 80269aa:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80269ae:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80269b2:	b29b      	uxth	r3, r3
 80269b4:	f1bc 0f00 	cmp.w	ip, #0
 80269b8:	f000 81b9 	beq.w	8026d2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80269bc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80269c0:	eb0a 0b02 	add.w	fp, sl, r2
 80269c4:	fa1f fa8c 	uxth.w	sl, ip
 80269c8:	fb0a fe0e 	mul.w	lr, sl, lr
 80269cc:	eba5 050e 	sub.w	r5, r5, lr
 80269d0:	b2ad      	uxth	r5, r5
 80269d2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80269d6:	fb08 f505 	mul.w	r5, r8, r5
 80269da:	fa1f fa8a 	uxth.w	sl, sl
 80269de:	eba3 030a 	sub.w	r3, r3, sl
 80269e2:	b29b      	uxth	r3, r3
 80269e4:	940d      	str	r4, [sp, #52]	@ 0x34
 80269e6:	fb09 5303 	mla	r3, r9, r3, r5
 80269ea:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80269ee:	940e      	str	r4, [sp, #56]	@ 0x38
 80269f0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80269f2:	fb0a 3304 	mla	r3, sl, r4, r3
 80269f6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80269f8:	fb0e 3304 	mla	r3, lr, r4, r3
 80269fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026a00:	2b00      	cmp	r3, #0
 8026a02:	f000 810f 	beq.w	8026c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026a06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026a08:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026a0c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026a10:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026a14:	f000 8190 	beq.w	8026d38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026a18:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026a1c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026a20:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026a24:	fb09 f000 	mul.w	r0, r9, r0
 8026a28:	fb0a fe0e 	mul.w	lr, sl, lr
 8026a2c:	f100 0b20 	add.w	fp, r0, #32
 8026a30:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026a34:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026a38:	44ce      	add	lr, r9
 8026a3a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026a3e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026a42:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026a46:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026a4a:	ea4e 0909 	orr.w	r9, lr, r9
 8026a4e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026a52:	8868      	ldrh	r0, [r5, #2]
 8026a54:	d019      	beq.n	8026a8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8026a56:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026a5a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026a5e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026a62:	fb08 f800 	mul.w	r8, r8, r0
 8026a66:	fb0a fe0e 	mul.w	lr, sl, lr
 8026a6a:	f108 0b20 	add.w	fp, r8, #32
 8026a6e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026a72:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026a76:	4486      	add	lr, r0
 8026a78:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026a7c:	0a00      	lsrs	r0, r0, #8
 8026a7e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026a82:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026a86:	ea4e 0000 	orr.w	r0, lr, r0
 8026a8a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026a8e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026a92:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8026a96:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026a9a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026a9e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026aa2:	ea4e 0909 	orr.w	r9, lr, r9
 8026aa6:	ea4a 0000 	orr.w	r0, sl, r0
 8026aaa:	f1bc 0f00 	cmp.w	ip, #0
 8026aae:	f000 8145 	beq.w	8026d3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8026ab2:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8026ab6:	3a01      	subs	r2, #1
 8026ab8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026aba:	0052      	lsls	r2, r2, #1
 8026abc:	3202      	adds	r2, #2
 8026abe:	2cff      	cmp	r4, #255	@ 0xff
 8026ac0:	eb05 0e02 	add.w	lr, r5, r2
 8026ac4:	5aaa      	ldrh	r2, [r5, r2]
 8026ac6:	d018      	beq.n	8026afa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026ac8:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8026acc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026ad0:	fb04 fa02 	mul.w	sl, r4, r2
 8026ad4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026ad8:	fb08 f805 	mul.w	r8, r8, r5
 8026adc:	f10a 0520 	add.w	r5, sl, #32
 8026ae0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026ae4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026ae8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026aec:	4442      	add	r2, r8
 8026aee:	0a2d      	lsrs	r5, r5, #8
 8026af0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026af4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026af8:	432a      	orrs	r2, r5
 8026afa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026afc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026b00:	2cff      	cmp	r4, #255	@ 0xff
 8026b02:	d01a      	beq.n	8026b3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8026b04:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8026b08:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026b0c:	fb04 fa05 	mul.w	sl, r4, r5
 8026b10:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026b14:	fb08 f80e 	mul.w	r8, r8, lr
 8026b18:	f10a 0e20 	add.w	lr, sl, #32
 8026b1c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026b20:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026b24:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026b28:	4445      	add	r5, r8
 8026b2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026b2e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026b32:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8026b36:	ea45 050e 	orr.w	r5, r5, lr
 8026b3a:	fb1c fe01 	smulbb	lr, ip, r1
 8026b3e:	f1cc 0810 	rsb	r8, ip, #16
 8026b42:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026b46:	eba8 0801 	sub.w	r8, r8, r1
 8026b4a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026b4e:	4341      	muls	r1, r0
 8026b50:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026b54:	fb09 1108 	mla	r1, r9, r8, r1
 8026b58:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026b5c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026b60:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026b64:	ea4a 0202 	orr.w	r2, sl, r2
 8026b68:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026b6c:	fb0c 1102 	mla	r1, ip, r2, r1
 8026b70:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026b74:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026b78:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8026b7c:	ea4b 0505 	orr.w	r5, fp, r5
 8026b80:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026b84:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026b88:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026b8c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026b90:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026b94:	ea42 0e0e 	orr.w	lr, r2, lr
 8026b98:	fa1f f28e 	uxth.w	r2, lr
 8026b9c:	2bff      	cmp	r3, #255	@ 0xff
 8026b9e:	d103      	bne.n	8026ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8026ba0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026ba2:	29ff      	cmp	r1, #255	@ 0xff
 8026ba4:	f000 80de 	beq.w	8026d64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8026ba8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026baa:	8838      	ldrh	r0, [r7, #0]
 8026bac:	434b      	muls	r3, r1
 8026bae:	f103 0c01 	add.w	ip, r3, #1
 8026bb2:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026bb6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026bba:	fa5f fc83 	uxtb.w	ip, r3
 8026bbe:	1203      	asrs	r3, r0, #8
 8026bc0:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026bc4:	fb13 f30c 	smulbb	r3, r3, ip
 8026bc8:	1215      	asrs	r5, r2, #8
 8026bca:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026bce:	fb05 3501 	mla	r5, r5, r1, r3
 8026bd2:	10c3      	asrs	r3, r0, #3
 8026bd4:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026bd8:	fb13 f30c 	smulbb	r3, r3, ip
 8026bdc:	10d1      	asrs	r1, r2, #3
 8026bde:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026be0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026be4:	fb01 3104 	mla	r1, r1, r4, r3
 8026be8:	00c3      	lsls	r3, r0, #3
 8026bea:	b2db      	uxtb	r3, r3
 8026bec:	fb13 f30c 	smulbb	r3, r3, ip
 8026bf0:	00d2      	lsls	r2, r2, #3
 8026bf2:	b2d2      	uxtb	r2, r2
 8026bf4:	fb02 3304 	mla	r3, r2, r4, r3
 8026bf8:	b2ad      	uxth	r5, r5
 8026bfa:	b29a      	uxth	r2, r3
 8026bfc:	1c6b      	adds	r3, r5, #1
 8026bfe:	b289      	uxth	r1, r1
 8026c00:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026c04:	1c53      	adds	r3, r2, #1
 8026c06:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026c0a:	1c4a      	adds	r2, r1, #1
 8026c0c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026c10:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026c14:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026c18:	0949      	lsrs	r1, r1, #5
 8026c1a:	432b      	orrs	r3, r5
 8026c1c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026c20:	430b      	orrs	r3, r1
 8026c22:	803b      	strh	r3, [r7, #0]
 8026c24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026c26:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026c28:	3702      	adds	r7, #2
 8026c2a:	4413      	add	r3, r2
 8026c2c:	9321      	str	r3, [sp, #132]	@ 0x84
 8026c2e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026c30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026c32:	441a      	add	r2, r3
 8026c34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026c36:	9222      	str	r2, [sp, #136]	@ 0x88
 8026c38:	3b01      	subs	r3, #1
 8026c3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026c3c:	e689      	b.n	8026952 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026c3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026c40:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8026c42:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8026c44:	4433      	add	r3, r6
 8026c46:	9321      	str	r3, [sp, #132]	@ 0x84
 8026c48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026c4a:	441c      	add	r4, r3
 8026c4c:	9b08      	ldr	r3, [sp, #32]
 8026c4e:	9422      	str	r4, [sp, #136]	@ 0x88
 8026c50:	3b01      	subs	r3, #1
 8026c52:	9308      	str	r3, [sp, #32]
 8026c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c56:	3302      	adds	r3, #2
 8026c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c5a:	e658      	b.n	802690e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026c5c:	d028      	beq.n	8026cb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8026c5e:	9b08      	ldr	r3, [sp, #32]
 8026c60:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8026c62:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8026c64:	3b01      	subs	r3, #1
 8026c66:	fb00 5003 	mla	r0, r0, r3, r5
 8026c6a:	1400      	asrs	r0, r0, #16
 8026c6c:	f53f ae6c 	bmi.w	8026948 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c70:	3901      	subs	r1, #1
 8026c72:	4288      	cmp	r0, r1
 8026c74:	f6bf ae68 	bge.w	8026948 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c78:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8026c7a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8026c7c:	fb01 0303 	mla	r3, r1, r3, r0
 8026c80:	141b      	asrs	r3, r3, #16
 8026c82:	f53f ae61 	bmi.w	8026948 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c86:	3a01      	subs	r2, #1
 8026c88:	4293      	cmp	r3, r2
 8026c8a:	f6bf ae5d 	bge.w	8026948 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026c8e:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8026c92:	9b08      	ldr	r3, [sp, #32]
 8026c94:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8026c98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026c9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026c9c:	2b00      	cmp	r3, #0
 8026c9e:	f300 8082 	bgt.w	8026da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8026ca2:	9b08      	ldr	r3, [sp, #32]
 8026ca4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026caa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8026cb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026cb2:	2b00      	cmp	r3, #0
 8026cb4:	f340 81ef 	ble.w	8027096 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026cb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026cbc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026cc0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026cc4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026cc8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026ccc:	eef0 6a62 	vmov.f32	s13, s5
 8026cd0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026cd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026cd8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026cdc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026ce0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026ce4:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8026ce8:	eef0 6a43 	vmov.f32	s13, s6
 8026cec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026cf0:	ee12 2a90 	vmov	r2, s5
 8026cf4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026cf8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026cfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026cfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8026d02:	ee13 2a10 	vmov	r2, s6
 8026d06:	9323      	str	r3, [sp, #140]	@ 0x8c
 8026d08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026d0a:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8026d0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026d12:	9324      	str	r3, [sp, #144]	@ 0x90
 8026d14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8026d18:	3b01      	subs	r3, #1
 8026d1a:	9311      	str	r3, [sp, #68]	@ 0x44
 8026d1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026d1e:	bf08      	it	eq
 8026d20:	4613      	moveq	r3, r2
 8026d22:	eeb0 3a67 	vmov.f32	s6, s15
 8026d26:	9308      	str	r3, [sp, #32]
 8026d28:	eef0 2a47 	vmov.f32	s5, s14
 8026d2c:	e5e1      	b.n	80268f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026d2e:	fb08 f505 	mul.w	r5, r8, r5
 8026d32:	fb09 5303 	mla	r3, r9, r3, r5
 8026d36:	e661      	b.n	80269fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8026d38:	4681      	mov	r9, r0
 8026d3a:	e688      	b.n	8026a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026d3c:	f1c1 0210 	rsb	r2, r1, #16
 8026d40:	4341      	muls	r1, r0
 8026d42:	fb09 1902 	mla	r9, r9, r2, r1
 8026d46:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026d4a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026d4e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026d52:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026d56:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026d5a:	ea42 0909 	orr.w	r9, r2, r9
 8026d5e:	fa1f f289 	uxth.w	r2, r9
 8026d62:	e71b      	b.n	8026b9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8026d64:	803a      	strh	r2, [r7, #0]
 8026d66:	e75d      	b.n	8026c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026d68:	f115 0e01 	adds.w	lr, r5, #1
 8026d6c:	f53f af5a 	bmi.w	8026c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026d70:	4572      	cmp	r2, lr
 8026d72:	f6ff af57 	blt.w	8026c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026d76:	f110 0e01 	adds.w	lr, r0, #1
 8026d7a:	f53f af53 	bmi.w	8026c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026d7e:	4573      	cmp	r3, lr
 8026d80:	f6ff af50 	blt.w	8026c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026d84:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026d86:	b21b      	sxth	r3, r3
 8026d88:	b212      	sxth	r2, r2
 8026d8a:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8026d8e:	9301      	str	r3, [sp, #4]
 8026d90:	9200      	str	r2, [sp, #0]
 8026d92:	e9cd c405 	strd	ip, r4, [sp, #20]
 8026d96:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8026d9a:	9502      	str	r5, [sp, #8]
 8026d9c:	4639      	mov	r1, r7
 8026d9e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8026da0:	f7ff fc04 	bl	80265ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8026da4:	e73e      	b.n	8026c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026da6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026da8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026dac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026dae:	fa1f fc82 	uxth.w	ip, r2
 8026db2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026db6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026db8:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026dbc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026dc0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026dc2:	141f      	asrs	r7, r3, #16
 8026dc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026dc6:	141b      	asrs	r3, r3, #16
 8026dc8:	fb01 3707 	mla	r7, r1, r7, r3
 8026dcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026dce:	eb03 0a07 	add.w	sl, r3, r7
 8026dd2:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026dd6:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8026dda:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026dde:	b29b      	uxth	r3, r3
 8026de0:	2d00      	cmp	r5, #0
 8026de2:	f000 813d 	beq.w	8027060 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8026de6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026dea:	eb0a 0b01 	add.w	fp, sl, r1
 8026dee:	fa1f fa85 	uxth.w	sl, r5
 8026df2:	fb0a fc0c 	mul.w	ip, sl, ip
 8026df6:	eba0 000c 	sub.w	r0, r0, ip
 8026dfa:	b280      	uxth	r0, r0
 8026dfc:	fb08 f000 	mul.w	r0, r8, r0
 8026e00:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026e04:	fa1f fa8a 	uxth.w	sl, sl
 8026e08:	eba3 030a 	sub.w	r3, r3, sl
 8026e0c:	b29b      	uxth	r3, r3
 8026e0e:	fb09 0303 	mla	r3, r9, r3, r0
 8026e12:	940f      	str	r4, [sp, #60]	@ 0x3c
 8026e14:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026e16:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026e1a:	fb0a 3300 	mla	r3, sl, r0, r3
 8026e1e:	fb0c 3304 	mla	r3, ip, r4, r3
 8026e22:	9410      	str	r4, [sp, #64]	@ 0x40
 8026e24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026e28:	2b00      	cmp	r3, #0
 8026e2a:	f000 810b 	beq.w	8027044 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8026e2e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8026e30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026e32:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026e36:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026e3a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026e3e:	f000 8114 	beq.w	802706a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8026e42:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8026e46:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026e4a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026e4e:	fb09 f707 	mul.w	r7, r9, r7
 8026e52:	fb0a fc0c 	mul.w	ip, sl, ip
 8026e56:	f107 0b20 	add.w	fp, r7, #32
 8026e5a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026e5e:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8026e62:	44cc      	add	ip, r9
 8026e64:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026e68:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026e6c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026e70:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026e74:	ea4c 0909 	orr.w	r9, ip, r9
 8026e78:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026e7c:	8847      	ldrh	r7, [r0, #2]
 8026e7e:	d019      	beq.n	8026eb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8026e80:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8026e84:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026e88:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026e8c:	fb08 f807 	mul.w	r8, r8, r7
 8026e90:	fb0a fc0c 	mul.w	ip, sl, ip
 8026e94:	f108 0b20 	add.w	fp, r8, #32
 8026e98:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026e9c:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8026ea0:	44bc      	add	ip, r7
 8026ea2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026ea6:	0a3f      	lsrs	r7, r7, #8
 8026ea8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026eac:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026eb0:	ea4c 0707 	orr.w	r7, ip, r7
 8026eb4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026eb8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026ebc:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8026ec0:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026ec4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026ec8:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8026ecc:	ea4c 0909 	orr.w	r9, ip, r9
 8026ed0:	ea4a 0707 	orr.w	r7, sl, r7
 8026ed4:	2d00      	cmp	r5, #0
 8026ed6:	f000 80ca 	beq.w	802706e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8026eda:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8026ede:	3901      	subs	r1, #1
 8026ee0:	0049      	lsls	r1, r1, #1
 8026ee2:	3102      	adds	r1, #2
 8026ee4:	eb00 0c01 	add.w	ip, r0, r1
 8026ee8:	5a41      	ldrh	r1, [r0, r1]
 8026eea:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026eec:	28ff      	cmp	r0, #255	@ 0xff
 8026eee:	d019      	beq.n	8026f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8026ef0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026ef2:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8026ef6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026efa:	fb04 fa01 	mul.w	sl, r4, r1
 8026efe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026f02:	fb08 f800 	mul.w	r8, r8, r0
 8026f06:	f10a 0020 	add.w	r0, sl, #32
 8026f0a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026f0e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026f12:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026f16:	4441      	add	r1, r8
 8026f18:	0a00      	lsrs	r0, r0, #8
 8026f1a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026f1e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026f22:	4301      	orrs	r1, r0
 8026f24:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026f26:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026f2a:	2cff      	cmp	r4, #255	@ 0xff
 8026f2c:	d01a      	beq.n	8026f64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8026f2e:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8026f32:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026f36:	fb04 fa00 	mul.w	sl, r4, r0
 8026f3a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026f3e:	fb08 f80c 	mul.w	r8, r8, ip
 8026f42:	f10a 0c20 	add.w	ip, sl, #32
 8026f46:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026f4a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026f4e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026f52:	4440      	add	r0, r8
 8026f54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026f58:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026f5c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8026f60:	ea40 000c 	orr.w	r0, r0, ip
 8026f64:	fb15 fc02 	smulbb	ip, r5, r2
 8026f68:	f1c5 0810 	rsb	r8, r5, #16
 8026f6c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026f70:	eba8 0802 	sub.w	r8, r8, r2
 8026f74:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026f78:	437a      	muls	r2, r7
 8026f7a:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026f7e:	fb09 2208 	mla	r2, r9, r8, r2
 8026f82:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026f86:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026f8a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026f8e:	ea4a 0101 	orr.w	r1, sl, r1
 8026f92:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026f96:	fb05 2201 	mla	r2, r5, r1, r2
 8026f9a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026f9e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026fa2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026fa6:	ea4b 0000 	orr.w	r0, fp, r0
 8026faa:	fb0c 2200 	mla	r2, ip, r0, r2
 8026fae:	0d57      	lsrs	r7, r2, #21
 8026fb0:	0952      	lsrs	r2, r2, #5
 8026fb2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026fb6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026fba:	433a      	orrs	r2, r7
 8026fbc:	2bff      	cmp	r3, #255	@ 0xff
 8026fbe:	b292      	uxth	r2, r2
 8026fc0:	d102      	bne.n	8026fc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8026fc2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026fc4:	29ff      	cmp	r1, #255	@ 0xff
 8026fc6:	d063      	beq.n	8027090 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8026fc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026fca:	f8be 1000 	ldrh.w	r1, [lr]
 8026fce:	4343      	muls	r3, r0
 8026fd0:	1c58      	adds	r0, r3, #1
 8026fd2:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8026fd6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026fda:	1208      	asrs	r0, r1, #8
 8026fdc:	b2db      	uxtb	r3, r3
 8026fde:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026fe2:	fb10 f003 	smulbb	r0, r0, r3
 8026fe6:	10cf      	asrs	r7, r1, #3
 8026fe8:	00c9      	lsls	r1, r1, #3
 8026fea:	b2c9      	uxtb	r1, r1
 8026fec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026fee:	1215      	asrs	r5, r2, #8
 8026ff0:	fb11 f103 	smulbb	r1, r1, r3
 8026ff4:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026ff8:	fb05 0504 	mla	r5, r5, r4, r0
 8026ffc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8027000:	10d0      	asrs	r0, r2, #3
 8027002:	00d2      	lsls	r2, r2, #3
 8027004:	fb17 f703 	smulbb	r7, r7, r3
 8027008:	b2d2      	uxtb	r2, r2
 802700a:	fb02 1204 	mla	r2, r2, r4, r1
 802700e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027012:	fb00 7004 	mla	r0, r0, r4, r7
 8027016:	b2ad      	uxth	r5, r5
 8027018:	b292      	uxth	r2, r2
 802701a:	1c6b      	adds	r3, r5, #1
 802701c:	1c57      	adds	r7, r2, #1
 802701e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027022:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027026:	b280      	uxth	r0, r0
 8027028:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802702c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027030:	433d      	orrs	r5, r7
 8027032:	1c47      	adds	r7, r0, #1
 8027034:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027038:	097f      	lsrs	r7, r7, #5
 802703a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802703e:	433d      	orrs	r5, r7
 8027040:	f8ae 5000 	strh.w	r5, [lr]
 8027044:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027046:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027048:	f10e 0e02 	add.w	lr, lr, #2
 802704c:	4413      	add	r3, r2
 802704e:	9321      	str	r3, [sp, #132]	@ 0x84
 8027050:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027052:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027054:	441a      	add	r2, r3
 8027056:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027058:	9222      	str	r2, [sp, #136]	@ 0x88
 802705a:	3b01      	subs	r3, #1
 802705c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802705e:	e61c      	b.n	8026c9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8027060:	fb08 f000 	mul.w	r0, r8, r0
 8027064:	fb09 0303 	mla	r3, r9, r3, r0
 8027068:	e6dc      	b.n	8026e24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 802706a:	46b9      	mov	r9, r7
 802706c:	e704      	b.n	8026e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 802706e:	f1c2 0110 	rsb	r1, r2, #16
 8027072:	437a      	muls	r2, r7
 8027074:	fb09 2901 	mla	r9, r9, r1, r2
 8027078:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802707c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027080:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027084:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027088:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802708c:	4302      	orrs	r2, r0
 802708e:	e795      	b.n	8026fbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8027090:	f8ae 2000 	strh.w	r2, [lr]
 8027094:	e7d6      	b.n	8027044 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8027096:	b017      	add	sp, #92	@ 0x5c
 8027098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802709c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270a0:	b085      	sub	sp, #20
 80270a2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80270a6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80270aa:	fb00 7406 	mla	r4, r0, r6, r7
 80270ae:	2800      	cmp	r0, #0
 80270b0:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80270b4:	9103      	str	r1, [sp, #12]
 80270b6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 80270ba:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 80270be:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 80270c2:	9501      	str	r5, [sp, #4]
 80270c4:	eb02 0904 	add.w	r9, r2, r4
 80270c8:	f2c0 8141 	blt.w	802734e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80270cc:	4583      	cmp	fp, r0
 80270ce:	f340 813e 	ble.w	802734e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80270d2:	2f00      	cmp	r7, #0
 80270d4:	f2c0 8137 	blt.w	8027346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80270d8:	42be      	cmp	r6, r7
 80270da:	f340 8134 	ble.w	8027346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80270de:	f812 c004 	ldrb.w	ip, [r2, r4]
 80270e2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80270e6:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 80270ea:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80270ee:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 80270f2:	4355      	muls	r5, r2
 80270f4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80270f8:	fb0c f203 	mul.w	r2, ip, r3
 80270fc:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8027100:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8027104:	441d      	add	r5, r3
 8027106:	f102 0320 	add.w	r3, r2, #32
 802710a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802710e:	0a1b      	lsrs	r3, r3, #8
 8027110:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8027114:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027118:	431c      	orrs	r4, r3
 802711a:	1c7b      	adds	r3, r7, #1
 802711c:	f100 811c 	bmi.w	8027358 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8027120:	429e      	cmp	r6, r3
 8027122:	f340 8119 	ble.w	8027358 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8027126:	2900      	cmp	r1, #0
 8027128:	f000 8119 	beq.w	802735e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 802712c:	9a01      	ldr	r2, [sp, #4]
 802712e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8027132:	8855      	ldrh	r5, [r2, #2]
 8027134:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8027138:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 802713c:	fb08 f802 	mul.w	r8, r8, r2
 8027140:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8027144:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027148:	435d      	muls	r5, r3
 802714a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802714e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027152:	44d0      	add	r8, sl
 8027154:	f105 0a20 	add.w	sl, r5, #32
 8027158:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802715c:	0a2d      	lsrs	r5, r5, #8
 802715e:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8027162:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027166:	432a      	orrs	r2, r5
 8027168:	3001      	adds	r0, #1
 802716a:	f100 80fe 	bmi.w	802736a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802716e:	4583      	cmp	fp, r0
 8027170:	f340 80fb 	ble.w	802736a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8027174:	f1be 0f00 	cmp.w	lr, #0
 8027178:	f000 80fc 	beq.w	8027374 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 802717c:	2f00      	cmp	r7, #0
 802717e:	f2c0 80f1 	blt.w	8027364 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8027182:	42be      	cmp	r6, r7
 8027184:	f340 80ee 	ble.w	8027364 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8027188:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 802718c:	9801      	ldr	r0, [sp, #4]
 802718e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8027192:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8027196:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802719a:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 802719e:	fb0a fa00 	mul.w	sl, sl, r0
 80271a2:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80271a6:	fb05 f808 	mul.w	r8, r5, r8
 80271aa:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80271ae:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 80271b2:	4482      	add	sl, r0
 80271b4:	f108 0020 	add.w	r0, r8, #32
 80271b8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80271bc:	0a00      	lsrs	r0, r0, #8
 80271be:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80271c2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80271c6:	ea4b 0b00 	orr.w	fp, fp, r0
 80271ca:	3701      	adds	r7, #1
 80271cc:	f100 80d7 	bmi.w	802737e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80271d0:	42be      	cmp	r6, r7
 80271d2:	f340 80d4 	ble.w	802737e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80271d6:	2900      	cmp	r1, #0
 80271d8:	f000 80d4 	beq.w	8027384 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80271dc:	9801      	ldr	r0, [sp, #4]
 80271de:	3601      	adds	r6, #1
 80271e0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80271e4:	f819 7006 	ldrb.w	r7, [r9, r6]
 80271e8:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 80271ec:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80271f0:	fb07 f800 	mul.w	r8, r7, r0
 80271f4:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80271f8:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80271fc:	fb09 f906 	mul.w	r9, r9, r6
 8027200:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8027204:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8027208:	44d1      	add	r9, sl
 802720a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802720e:	f108 0020 	add.w	r0, r8, #32
 8027212:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027216:	0a00      	lsrs	r0, r0, #8
 8027218:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802721c:	4330      	orrs	r0, r6
 802721e:	b28e      	uxth	r6, r1
 8027220:	fa1f f98e 	uxth.w	r9, lr
 8027224:	fb06 f809 	mul.w	r8, r6, r9
 8027228:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802722c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8027230:	0136      	lsls	r6, r6, #4
 8027232:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027236:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 802723a:	9601      	str	r6, [sp, #4]
 802723c:	ea4a 0404 	orr.w	r4, sl, r4
 8027240:	fa1f f689 	uxth.w	r6, r9
 8027244:	9602      	str	r6, [sp, #8]
 8027246:	4626      	mov	r6, r4
 8027248:	fb11 f90e 	smulbb	r9, r1, lr
 802724c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027250:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8027254:	f1ce 0410 	rsb	r4, lr, #16
 8027258:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802725c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027260:	1a64      	subs	r4, r4, r1
 8027262:	ea4a 0202 	orr.w	r2, sl, r2
 8027266:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802726a:	434a      	muls	r2, r1
 802726c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027270:	fb04 2406 	mla	r4, r4, r6, r2
 8027274:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027278:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802727c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027280:	ea4a 0000 	orr.w	r0, sl, r0
 8027284:	fb09 4200 	mla	r2, r9, r0, r4
 8027288:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802728c:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027290:	9801      	ldr	r0, [sp, #4]
 8027292:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8027296:	ea44 0b0b 	orr.w	fp, r4, fp
 802729a:	9c02      	ldr	r4, [sp, #8]
 802729c:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 80272a0:	1b00      	subs	r0, r0, r4
 80272a2:	9c01      	ldr	r4, [sp, #4]
 80272a4:	b280      	uxth	r0, r0
 80272a6:	eba4 0608 	sub.w	r6, r4, r8
 80272aa:	b2b6      	uxth	r6, r6
 80272ac:	4373      	muls	r3, r6
 80272ae:	fb0c 3300 	mla	r3, ip, r0, r3
 80272b2:	9802      	ldr	r0, [sp, #8]
 80272b4:	9903      	ldr	r1, [sp, #12]
 80272b6:	fb00 3505 	mla	r5, r0, r5, r3
 80272ba:	fb08 5707 	mla	r7, r8, r7, r5
 80272be:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80272c2:	8809      	ldrh	r1, [r1, #0]
 80272c4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80272c8:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80272cc:	120b      	asrs	r3, r1, #8
 80272ce:	b2ff      	uxtb	r7, r7
 80272d0:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80272d4:	437b      	muls	r3, r7
 80272d6:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80272da:	10c8      	asrs	r0, r1, #3
 80272dc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80272e0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80272e4:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80272e8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80272ec:	00c9      	lsls	r1, r1, #3
 80272ee:	4378      	muls	r0, r7
 80272f0:	ea42 0e0e 	orr.w	lr, r2, lr
 80272f4:	b2c9      	uxtb	r1, r1
 80272f6:	fa1f f28e 	uxth.w	r2, lr
 80272fa:	434f      	muls	r7, r1
 80272fc:	1c59      	adds	r1, r3, #1
 80272fe:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027302:	1213      	asrs	r3, r2, #8
 8027304:	f023 0307 	bic.w	r3, r3, #7
 8027308:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802730c:	1c41      	adds	r1, r0, #1
 802730e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027312:	10d1      	asrs	r1, r2, #3
 8027314:	f021 0103 	bic.w	r1, r1, #3
 8027318:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802731c:	021b      	lsls	r3, r3, #8
 802731e:	00c9      	lsls	r1, r1, #3
 8027320:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027324:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8027328:	430b      	orrs	r3, r1
 802732a:	1c79      	adds	r1, r7, #1
 802732c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027330:	00d2      	lsls	r2, r2, #3
 8027332:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8027336:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802733a:	431a      	orrs	r2, r3
 802733c:	9b03      	ldr	r3, [sp, #12]
 802733e:	801a      	strh	r2, [r3, #0]
 8027340:	b005      	add	sp, #20
 8027342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027346:	f04f 0c00 	mov.w	ip, #0
 802734a:	4664      	mov	r4, ip
 802734c:	e6e5      	b.n	802711a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802734e:	2300      	movs	r3, #0
 8027350:	469c      	mov	ip, r3
 8027352:	461a      	mov	r2, r3
 8027354:	461c      	mov	r4, r3
 8027356:	e707      	b.n	8027168 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027358:	2300      	movs	r3, #0
 802735a:	461a      	mov	r2, r3
 802735c:	e704      	b.n	8027168 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802735e:	460b      	mov	r3, r1
 8027360:	460a      	mov	r2, r1
 8027362:	e701      	b.n	8027168 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027364:	2500      	movs	r5, #0
 8027366:	46ab      	mov	fp, r5
 8027368:	e72f      	b.n	80271ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 802736a:	2700      	movs	r7, #0
 802736c:	463d      	mov	r5, r7
 802736e:	4638      	mov	r0, r7
 8027370:	46bb      	mov	fp, r7
 8027372:	e754      	b.n	802721e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027374:	4677      	mov	r7, lr
 8027376:	4675      	mov	r5, lr
 8027378:	4670      	mov	r0, lr
 802737a:	46f3      	mov	fp, lr
 802737c:	e74f      	b.n	802721e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802737e:	2700      	movs	r7, #0
 8027380:	4638      	mov	r0, r7
 8027382:	e74c      	b.n	802721e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027384:	460f      	mov	r7, r1
 8027386:	4608      	mov	r0, r1
 8027388:	e749      	b.n	802721e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0802738c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027390:	b093      	sub	sp, #76	@ 0x4c
 8027392:	9210      	str	r2, [sp, #64]	@ 0x40
 8027394:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8027396:	9011      	str	r0, [sp, #68]	@ 0x44
 8027398:	6850      	ldr	r0, [r2, #4]
 802739a:	910e      	str	r1, [sp, #56]	@ 0x38
 802739c:	9306      	str	r3, [sp, #24]
 802739e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80273a2:	fb00 1303 	mla	r3, r0, r3, r1
 80273a6:	6812      	ldr	r2, [r2, #0]
 80273a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80273ac:	9307      	str	r3, [sp, #28]
 80273ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80273b0:	681b      	ldr	r3, [r3, #0]
 80273b2:	9308      	str	r3, [sp, #32]
 80273b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80273b6:	685b      	ldr	r3, [r3, #4]
 80273b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80273ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80273bc:	2b00      	cmp	r3, #0
 80273be:	dc03      	bgt.n	80273c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80273c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80273c2:	2b00      	cmp	r3, #0
 80273c4:	f340 83b4 	ble.w	8027b30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80273c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80273ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80273ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80273d2:	1e48      	subs	r0, r1, #1
 80273d4:	1e55      	subs	r5, r2, #1
 80273d6:	9b06      	ldr	r3, [sp, #24]
 80273d8:	2b00      	cmp	r3, #0
 80273da:	f340 8163 	ble.w	80276a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80273de:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80273e0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80273e2:	1436      	asrs	r6, r6, #16
 80273e4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80273e8:	d406      	bmi.n	80273f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80273ea:	4286      	cmp	r6, r0
 80273ec:	da04      	bge.n	80273f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80273ee:	2b00      	cmp	r3, #0
 80273f0:	db02      	blt.n	80273f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80273f2:	42ab      	cmp	r3, r5
 80273f4:	f2c0 8157 	blt.w	80276a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80273f8:	3601      	adds	r6, #1
 80273fa:	f100 8144 	bmi.w	8027686 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80273fe:	42b1      	cmp	r1, r6
 8027400:	f2c0 8141 	blt.w	8027686 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8027404:	3301      	adds	r3, #1
 8027406:	f100 813e 	bmi.w	8027686 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802740a:	429a      	cmp	r2, r3
 802740c:	f2c0 813b 	blt.w	8027686 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8027410:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027414:	9b06      	ldr	r3, [sp, #24]
 8027416:	9f07      	ldr	r7, [sp, #28]
 8027418:	930f      	str	r3, [sp, #60]	@ 0x3c
 802741a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802741c:	2b00      	cmp	r3, #0
 802741e:	f340 8164 	ble.w	80276ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027422:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8027424:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8027426:	1418      	asrs	r0, r3, #16
 8027428:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802742a:	142d      	asrs	r5, r5, #16
 802742c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027430:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8027432:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027436:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027438:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802743c:	f100 81ee 	bmi.w	802781c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027440:	f102 3eff 	add.w	lr, r2, #4294967295
 8027444:	4575      	cmp	r5, lr
 8027446:	f280 81e9 	bge.w	802781c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802744a:	2800      	cmp	r0, #0
 802744c:	f2c0 81e6 	blt.w	802781c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027450:	f103 3eff 	add.w	lr, r3, #4294967295
 8027454:	4570      	cmp	r0, lr
 8027456:	f280 81e1 	bge.w	802781c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802745a:	b212      	sxth	r2, r2
 802745c:	fb00 5002 	mla	r0, r0, r2, r5
 8027460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027462:	fa1f fe81 	uxth.w	lr, r1
 8027466:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802746a:	eb03 0a00 	add.w	sl, r3, r0
 802746e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027472:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8027476:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802747a:	b29b      	uxth	r3, r3
 802747c:	f1bc 0f00 	cmp.w	ip, #0
 8027480:	f000 8179 	beq.w	8027776 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8027484:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027488:	eb0a 0b02 	add.w	fp, sl, r2
 802748c:	fa1f fa8c 	uxth.w	sl, ip
 8027490:	fb0a fe0e 	mul.w	lr, sl, lr
 8027494:	eba5 050e 	sub.w	r5, r5, lr
 8027498:	b2ad      	uxth	r5, r5
 802749a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802749e:	fb08 f505 	mul.w	r5, r8, r5
 80274a2:	fa1f fa8a 	uxth.w	sl, sl
 80274a6:	eba3 030a 	sub.w	r3, r3, sl
 80274aa:	b29b      	uxth	r3, r3
 80274ac:	940a      	str	r4, [sp, #40]	@ 0x28
 80274ae:	fb09 5303 	mla	r3, r9, r3, r5
 80274b2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80274b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80274b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80274ba:	fb0a 3304 	mla	r3, sl, r4, r3
 80274be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80274c0:	fb0e 3304 	mla	r3, lr, r4, r3
 80274c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80274c8:	2b00      	cmp	r3, #0
 80274ca:	f000 80cf 	beq.w	802766c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80274ce:	9c08      	ldr	r4, [sp, #32]
 80274d0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80274d4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80274d8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80274dc:	f000 8150 	beq.w	8027780 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80274e0:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80274e4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80274e8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80274ec:	fb09 f000 	mul.w	r0, r9, r0
 80274f0:	fb0a fe0e 	mul.w	lr, sl, lr
 80274f4:	f100 0b20 	add.w	fp, r0, #32
 80274f8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80274fc:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027500:	44ce      	add	lr, r9
 8027502:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027506:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802750a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802750e:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027512:	ea4e 0909 	orr.w	r9, lr, r9
 8027516:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802751a:	8868      	ldrh	r0, [r5, #2]
 802751c:	d019      	beq.n	8027552 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802751e:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027522:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027526:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802752a:	fb08 f800 	mul.w	r8, r8, r0
 802752e:	fb0a fe0e 	mul.w	lr, sl, lr
 8027532:	f108 0b20 	add.w	fp, r8, #32
 8027536:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802753a:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802753e:	4486      	add	lr, r0
 8027540:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027544:	0a00      	lsrs	r0, r0, #8
 8027546:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802754a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802754e:	ea4e 0000 	orr.w	r0, lr, r0
 8027552:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027556:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802755a:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 802755e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027562:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027566:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802756a:	ea4e 0909 	orr.w	r9, lr, r9
 802756e:	ea4a 0000 	orr.w	r0, sl, r0
 8027572:	f1bc 0f00 	cmp.w	ip, #0
 8027576:	f000 8105 	beq.w	8027784 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802757a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 802757e:	3a01      	subs	r2, #1
 8027580:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027582:	0052      	lsls	r2, r2, #1
 8027584:	3202      	adds	r2, #2
 8027586:	2cff      	cmp	r4, #255	@ 0xff
 8027588:	eb05 0e02 	add.w	lr, r5, r2
 802758c:	5aaa      	ldrh	r2, [r5, r2]
 802758e:	d018      	beq.n	80275c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8027590:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8027594:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027598:	fb04 fa02 	mul.w	sl, r4, r2
 802759c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80275a0:	fb08 f805 	mul.w	r8, r8, r5
 80275a4:	f10a 0520 	add.w	r5, sl, #32
 80275a8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80275ac:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80275b0:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80275b4:	4442      	add	r2, r8
 80275b6:	0a2d      	lsrs	r5, r5, #8
 80275b8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80275bc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80275c0:	432a      	orrs	r2, r5
 80275c2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80275c4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80275c8:	2cff      	cmp	r4, #255	@ 0xff
 80275ca:	d01a      	beq.n	8027602 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80275cc:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 80275d0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80275d4:	fb04 fa05 	mul.w	sl, r4, r5
 80275d8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80275dc:	fb08 f80e 	mul.w	r8, r8, lr
 80275e0:	f10a 0e20 	add.w	lr, sl, #32
 80275e4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80275e8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80275ec:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80275f0:	4445      	add	r5, r8
 80275f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275f6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80275fa:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80275fe:	ea45 050e 	orr.w	r5, r5, lr
 8027602:	fb1c fe01 	smulbb	lr, ip, r1
 8027606:	f1cc 0810 	rsb	r8, ip, #16
 802760a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802760e:	eba8 0801 	sub.w	r8, r8, r1
 8027612:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027616:	4341      	muls	r1, r0
 8027618:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802761c:	fb09 1108 	mla	r1, r9, r8, r1
 8027620:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027624:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027628:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802762c:	ea4a 0202 	orr.w	r2, sl, r2
 8027630:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027634:	fb0c 1102 	mla	r1, ip, r2, r1
 8027638:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802763c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027640:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027644:	ea4b 0505 	orr.w	r5, fp, r5
 8027648:	fb0e 1e05 	mla	lr, lr, r5, r1
 802764c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027650:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027654:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027658:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802765c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027660:	fa1f f28e 	uxth.w	r2, lr
 8027664:	2bff      	cmp	r3, #255	@ 0xff
 8027666:	f040 80a1 	bne.w	80277ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802766a:	803a      	strh	r2, [r7, #0]
 802766c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802766e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8027670:	3702      	adds	r7, #2
 8027672:	4413      	add	r3, r2
 8027674:	931d      	str	r3, [sp, #116]	@ 0x74
 8027676:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8027678:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802767a:	441a      	add	r2, r3
 802767c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802767e:	921e      	str	r2, [sp, #120]	@ 0x78
 8027680:	3b01      	subs	r3, #1
 8027682:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027684:	e6c9      	b.n	802741a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027686:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027688:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 802768a:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 802768c:	4433      	add	r3, r6
 802768e:	931d      	str	r3, [sp, #116]	@ 0x74
 8027690:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027692:	441c      	add	r4, r3
 8027694:	9b06      	ldr	r3, [sp, #24]
 8027696:	941e      	str	r4, [sp, #120]	@ 0x78
 8027698:	3b01      	subs	r3, #1
 802769a:	9306      	str	r3, [sp, #24]
 802769c:	9b07      	ldr	r3, [sp, #28]
 802769e:	3302      	adds	r3, #2
 80276a0:	9307      	str	r3, [sp, #28]
 80276a2:	e698      	b.n	80273d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80276a4:	d028      	beq.n	80276f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80276a6:	9b06      	ldr	r3, [sp, #24]
 80276a8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80276aa:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80276ac:	3b01      	subs	r3, #1
 80276ae:	fb00 5003 	mla	r0, r0, r3, r5
 80276b2:	1400      	asrs	r0, r0, #16
 80276b4:	f53f aeac 	bmi.w	8027410 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80276b8:	3901      	subs	r1, #1
 80276ba:	4288      	cmp	r0, r1
 80276bc:	f6bf aea8 	bge.w	8027410 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80276c0:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80276c2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80276c4:	fb01 0303 	mla	r3, r1, r3, r0
 80276c8:	141b      	asrs	r3, r3, #16
 80276ca:	f53f aea1 	bmi.w	8027410 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80276ce:	3a01      	subs	r2, #1
 80276d0:	4293      	cmp	r3, r2
 80276d2:	f6bf ae9d 	bge.w	8027410 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80276d6:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80276da:	9b06      	ldr	r3, [sp, #24]
 80276dc:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80276e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80276e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80276e4:	2b00      	cmp	r3, #0
 80276e6:	f300 80b6 	bgt.w	8027856 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 80276ea:	9b06      	ldr	r3, [sp, #24]
 80276ec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80276f0:	9b07      	ldr	r3, [sp, #28]
 80276f2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80276f6:	9307      	str	r3, [sp, #28]
 80276f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80276fa:	2b00      	cmp	r3, #0
 80276fc:	f340 8218 	ble.w	8027b30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8027700:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027704:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027708:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802770c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027710:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027714:	eef0 6a62 	vmov.f32	s13, s5
 8027718:	ee31 1a05 	vadd.f32	s2, s2, s10
 802771c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027720:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027724:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027728:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802772c:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8027730:	eef0 6a43 	vmov.f32	s13, s6
 8027734:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027738:	ee12 2a90 	vmov	r2, s5
 802773c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027740:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027742:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027746:	fb92 f3f3 	sdiv	r3, r2, r3
 802774a:	ee13 2a10 	vmov	r2, s6
 802774e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8027750:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027752:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8027756:	fb92 f3f3 	sdiv	r3, r2, r3
 802775a:	9320      	str	r3, [sp, #128]	@ 0x80
 802775c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802775e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027760:	3b01      	subs	r3, #1
 8027762:	930e      	str	r3, [sp, #56]	@ 0x38
 8027764:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027766:	bf08      	it	eq
 8027768:	4613      	moveq	r3, r2
 802776a:	eeb0 3a67 	vmov.f32	s6, s15
 802776e:	9306      	str	r3, [sp, #24]
 8027770:	eef0 2a47 	vmov.f32	s5, s14
 8027774:	e621      	b.n	80273ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8027776:	fb08 f505 	mul.w	r5, r8, r5
 802777a:	fb09 5303 	mla	r3, r9, r3, r5
 802777e:	e6a1      	b.n	80274c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8027780:	4681      	mov	r9, r0
 8027782:	e6c8      	b.n	8027516 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027784:	f1c1 0210 	rsb	r2, r1, #16
 8027788:	4341      	muls	r1, r0
 802778a:	fb09 1902 	mla	r9, r9, r2, r1
 802778e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027792:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027796:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802779a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802779e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80277a2:	ea42 0909 	orr.w	r9, r2, r9
 80277a6:	fa1f f289 	uxth.w	r2, r9
 80277aa:	e75b      	b.n	8027664 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80277ac:	43db      	mvns	r3, r3
 80277ae:	f8b7 c000 	ldrh.w	ip, [r7]
 80277b2:	fa5f fe83 	uxtb.w	lr, r3
 80277b6:	ea4f 202c 	mov.w	r0, ip, asr #8
 80277ba:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80277be:	fb00 f00e 	mul.w	r0, r0, lr
 80277c2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80277c6:	1c41      	adds	r1, r0, #1
 80277c8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80277cc:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80277d0:	fb05 f50e 	mul.w	r5, r5, lr
 80277d4:	1211      	asrs	r1, r2, #8
 80277d6:	f021 0107 	bic.w	r1, r1, #7
 80277da:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80277de:	48d6      	ldr	r0, [pc, #856]	@ (8027b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 80277e0:	b2c9      	uxtb	r1, r1
 80277e2:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80277e6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80277ea:	1c69      	adds	r1, r5, #1
 80277ec:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80277f0:	b2db      	uxtb	r3, r3
 80277f2:	10d1      	asrs	r1, r2, #3
 80277f4:	fb03 f30e 	mul.w	r3, r3, lr
 80277f8:	f021 0103 	bic.w	r1, r1, #3
 80277fc:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027800:	00c9      	lsls	r1, r1, #3
 8027802:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027806:	4301      	orrs	r1, r0
 8027808:	1c58      	adds	r0, r3, #1
 802780a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802780e:	00d2      	lsls	r2, r2, #3
 8027810:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027814:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027818:	430a      	orrs	r2, r1
 802781a:	e726      	b.n	802766a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 802781c:	f115 0e01 	adds.w	lr, r5, #1
 8027820:	f53f af24 	bmi.w	802766c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027824:	4572      	cmp	r2, lr
 8027826:	f6ff af21 	blt.w	802766c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802782a:	f110 0e01 	adds.w	lr, r0, #1
 802782e:	f53f af1d 	bmi.w	802766c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027832:	4573      	cmp	r3, lr
 8027834:	f6ff af1a 	blt.w	802766c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027838:	b21b      	sxth	r3, r3
 802783a:	b212      	sxth	r2, r2
 802783c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8027840:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8027844:	9301      	str	r3, [sp, #4]
 8027846:	9200      	str	r2, [sp, #0]
 8027848:	4639      	mov	r1, r7
 802784a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802784e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027850:	f7ff fc24 	bl	802709c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8027854:	e70a      	b.n	802766c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027856:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027858:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802785c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802785e:	fa1f fc82 	uxth.w	ip, r2
 8027862:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027866:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027868:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802786c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027870:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8027872:	141f      	asrs	r7, r3, #16
 8027874:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027876:	141b      	asrs	r3, r3, #16
 8027878:	fb01 3707 	mla	r7, r1, r7, r3
 802787c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802787e:	eb03 0a07 	add.w	sl, r3, r7
 8027882:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027886:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802788a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802788e:	b29b      	uxth	r3, r3
 8027890:	2d00      	cmp	r5, #0
 8027892:	f000 80fe 	beq.w	8027a92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8027896:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802789a:	eb0a 0b01 	add.w	fp, sl, r1
 802789e:	fa1f fa85 	uxth.w	sl, r5
 80278a2:	fb0a fc0c 	mul.w	ip, sl, ip
 80278a6:	eba0 000c 	sub.w	r0, r0, ip
 80278aa:	b280      	uxth	r0, r0
 80278ac:	fb08 f000 	mul.w	r0, r8, r0
 80278b0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80278b4:	fa1f fa8a 	uxth.w	sl, sl
 80278b8:	eba3 030a 	sub.w	r3, r3, sl
 80278bc:	b29b      	uxth	r3, r3
 80278be:	fb09 0303 	mla	r3, r9, r3, r0
 80278c2:	940c      	str	r4, [sp, #48]	@ 0x30
 80278c4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80278c6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80278ca:	fb0a 3300 	mla	r3, sl, r0, r3
 80278ce:	fb0c 3304 	mla	r3, ip, r4, r3
 80278d2:	940d      	str	r4, [sp, #52]	@ 0x34
 80278d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80278d8:	2b00      	cmp	r3, #0
 80278da:	f000 80cc 	beq.w	8027a76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 80278de:	9808      	ldr	r0, [sp, #32]
 80278e0:	9c08      	ldr	r4, [sp, #32]
 80278e2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80278e6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80278ea:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80278ee:	f000 80d5 	beq.w	8027a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80278f2:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80278f6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80278fa:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80278fe:	fb09 f707 	mul.w	r7, r9, r7
 8027902:	fb0a fc0c 	mul.w	ip, sl, ip
 8027906:	f107 0b20 	add.w	fp, r7, #32
 802790a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802790e:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027912:	44cc      	add	ip, r9
 8027914:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027918:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802791c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027920:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027924:	ea4c 0909 	orr.w	r9, ip, r9
 8027928:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802792c:	8847      	ldrh	r7, [r0, #2]
 802792e:	d019      	beq.n	8027964 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8027930:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027934:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027938:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802793c:	fb08 f807 	mul.w	r8, r8, r7
 8027940:	fb0a fc0c 	mul.w	ip, sl, ip
 8027944:	f108 0b20 	add.w	fp, r8, #32
 8027948:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802794c:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027950:	44bc      	add	ip, r7
 8027952:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027956:	0a3f      	lsrs	r7, r7, #8
 8027958:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802795c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027960:	ea4c 0707 	orr.w	r7, ip, r7
 8027964:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027968:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802796c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8027970:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027974:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027978:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802797c:	ea4c 0909 	orr.w	r9, ip, r9
 8027980:	ea4a 0707 	orr.w	r7, sl, r7
 8027984:	2d00      	cmp	r5, #0
 8027986:	f000 808b 	beq.w	8027aa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802798a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802798e:	3901      	subs	r1, #1
 8027990:	0049      	lsls	r1, r1, #1
 8027992:	3102      	adds	r1, #2
 8027994:	eb00 0c01 	add.w	ip, r0, r1
 8027998:	5a41      	ldrh	r1, [r0, r1]
 802799a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802799c:	28ff      	cmp	r0, #255	@ 0xff
 802799e:	d019      	beq.n	80279d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 80279a0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80279a2:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 80279a6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80279aa:	fb04 fa01 	mul.w	sl, r4, r1
 80279ae:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80279b2:	fb08 f800 	mul.w	r8, r8, r0
 80279b6:	f10a 0020 	add.w	r0, sl, #32
 80279ba:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80279be:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80279c2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80279c6:	4441      	add	r1, r8
 80279c8:	0a00      	lsrs	r0, r0, #8
 80279ca:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80279ce:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80279d2:	4301      	orrs	r1, r0
 80279d4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80279d6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80279da:	2cff      	cmp	r4, #255	@ 0xff
 80279dc:	d01a      	beq.n	8027a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 80279de:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 80279e2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80279e6:	fb04 fa00 	mul.w	sl, r4, r0
 80279ea:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80279ee:	fb08 f80c 	mul.w	r8, r8, ip
 80279f2:	f10a 0c20 	add.w	ip, sl, #32
 80279f6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80279fa:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80279fe:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027a02:	4440      	add	r0, r8
 8027a04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a08:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027a0c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027a10:	ea40 000c 	orr.w	r0, r0, ip
 8027a14:	fb15 fc02 	smulbb	ip, r5, r2
 8027a18:	f1c5 0810 	rsb	r8, r5, #16
 8027a1c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027a20:	eba8 0802 	sub.w	r8, r8, r2
 8027a24:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027a28:	437a      	muls	r2, r7
 8027a2a:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027a2e:	fb09 2208 	mla	r2, r9, r8, r2
 8027a32:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027a36:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027a3a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027a3e:	ea4a 0101 	orr.w	r1, sl, r1
 8027a42:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027a46:	fb05 2201 	mla	r2, r5, r1, r2
 8027a4a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027a4e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027a52:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027a56:	ea4b 0000 	orr.w	r0, fp, r0
 8027a5a:	fb0c 2200 	mla	r2, ip, r0, r2
 8027a5e:	0d57      	lsrs	r7, r2, #21
 8027a60:	0952      	lsrs	r2, r2, #5
 8027a62:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027a66:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027a6a:	433a      	orrs	r2, r7
 8027a6c:	2bff      	cmp	r3, #255	@ 0xff
 8027a6e:	b292      	uxth	r2, r2
 8027a70:	d127      	bne.n	8027ac2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8027a72:	f8ae 2000 	strh.w	r2, [lr]
 8027a76:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027a78:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8027a7a:	f10e 0e02 	add.w	lr, lr, #2
 8027a7e:	4413      	add	r3, r2
 8027a80:	931d      	str	r3, [sp, #116]	@ 0x74
 8027a82:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8027a84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027a86:	441a      	add	r2, r3
 8027a88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027a8a:	921e      	str	r2, [sp, #120]	@ 0x78
 8027a8c:	3b01      	subs	r3, #1
 8027a8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027a90:	e627      	b.n	80276e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8027a92:	fb08 f000 	mul.w	r0, r8, r0
 8027a96:	fb09 0303 	mla	r3, r9, r3, r0
 8027a9a:	e71b      	b.n	80278d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8027a9c:	46b9      	mov	r9, r7
 8027a9e:	e743      	b.n	8027928 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8027aa0:	f1c2 0110 	rsb	r1, r2, #16
 8027aa4:	437a      	muls	r2, r7
 8027aa6:	fb09 2901 	mla	r9, r9, r1, r2
 8027aaa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027aae:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027ab2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027ab6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027aba:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027abe:	4302      	orrs	r2, r0
 8027ac0:	e7d4      	b.n	8027a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8027ac2:	43db      	mvns	r3, r3
 8027ac4:	f8be 7000 	ldrh.w	r7, [lr]
 8027ac8:	fa5f fc83 	uxtb.w	ip, r3
 8027acc:	1238      	asrs	r0, r7, #8
 8027ace:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027ad2:	fb00 f00c 	mul.w	r0, r0, ip
 8027ad6:	10fd      	asrs	r5, r7, #3
 8027ad8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8027adc:	fb05 f10c 	mul.w	r1, r5, ip
 8027ae0:	1c45      	adds	r5, r0, #1
 8027ae2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027ae6:	1215      	asrs	r5, r2, #8
 8027ae8:	f025 0507 	bic.w	r5, r5, #7
 8027aec:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027af0:	00fb      	lsls	r3, r7, #3
 8027af2:	1c4d      	adds	r5, r1, #1
 8027af4:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027af8:	b2db      	uxtb	r3, r3
 8027afa:	10d1      	asrs	r1, r2, #3
 8027afc:	fb03 f30c 	mul.w	r3, r3, ip
 8027b00:	f021 0103 	bic.w	r1, r1, #3
 8027b04:	4c0c      	ldr	r4, [pc, #48]	@ (8027b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8027b06:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027b0a:	b2c0      	uxtb	r0, r0
 8027b0c:	00c9      	lsls	r1, r1, #3
 8027b0e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027b12:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8027b16:	4308      	orrs	r0, r1
 8027b18:	1c59      	adds	r1, r3, #1
 8027b1a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027b1e:	00d2      	lsls	r2, r2, #3
 8027b20:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027b24:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8027b28:	4318      	orrs	r0, r3
 8027b2a:	f8ae 0000 	strh.w	r0, [lr]
 8027b2e:	e7a2      	b.n	8027a76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8027b30:	b013      	add	sp, #76	@ 0x4c
 8027b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b36:	bf00      	nop
 8027b38:	fffff800 	.word	0xfffff800

08027b3c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027b40:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8027b44:	fb05 4c03 	mla	ip, r5, r3, r4
 8027b48:	2d00      	cmp	r5, #0
 8027b4a:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8027b4e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8027b52:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8027b56:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8027b5a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027b5e:	8808      	ldrh	r0, [r1, #0]
 8027b60:	f2c0 80a7 	blt.w	8027cb2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027b64:	45aa      	cmp	sl, r5
 8027b66:	f340 80a4 	ble.w	8027cb2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027b6a:	2c00      	cmp	r4, #0
 8027b6c:	f2c0 809f 	blt.w	8027cae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027b70:	42a3      	cmp	r3, r4
 8027b72:	f340 809c 	ble.w	8027cae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027b76:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8027b7a:	1c62      	adds	r2, r4, #1
 8027b7c:	f100 809c 	bmi.w	8027cb8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027b80:	4293      	cmp	r3, r2
 8027b82:	f340 8099 	ble.w	8027cb8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027b86:	f1b9 0f00 	cmp.w	r9, #0
 8027b8a:	f000 8095 	beq.w	8027cb8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027b8e:	f8be c002 	ldrh.w	ip, [lr, #2]
 8027b92:	3501      	adds	r5, #1
 8027b94:	f100 8094 	bmi.w	8027cc0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027b98:	45aa      	cmp	sl, r5
 8027b9a:	f340 8091 	ble.w	8027cc0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027b9e:	2f00      	cmp	r7, #0
 8027ba0:	f000 808e 	beq.w	8027cc0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027ba4:	2c00      	cmp	r4, #0
 8027ba6:	f2c0 8089 	blt.w	8027cbc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027baa:	42a3      	cmp	r3, r4
 8027bac:	f340 8086 	ble.w	8027cbc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027bb0:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8027bb4:	3401      	adds	r4, #1
 8027bb6:	f100 8086 	bmi.w	8027cc6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027bba:	42a3      	cmp	r3, r4
 8027bbc:	f340 8083 	ble.w	8027cc6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027bc0:	f1b9 0f00 	cmp.w	r9, #0
 8027bc4:	d07f      	beq.n	8027cc6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027bc6:	3301      	adds	r3, #1
 8027bc8:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8027bcc:	fb19 fe07 	smulbb	lr, r9, r7
 8027bd0:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8027bd4:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027bd8:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8027bdc:	ea44 0808 	orr.w	r8, r4, r8
 8027be0:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8027be4:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8027be8:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027bec:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8027bf0:	ea44 0c0c 	orr.w	ip, r4, ip
 8027bf4:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8027bf8:	fb04 f40c 	mul.w	r4, r4, ip
 8027bfc:	f1c7 0210 	rsb	r2, r7, #16
 8027c00:	eba2 0209 	sub.w	r2, r2, r9
 8027c04:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8027c08:	fb02 4808 	mla	r8, r2, r8, r4
 8027c0c:	b2b4      	uxth	r4, r6
 8027c0e:	43f6      	mvns	r6, r6
 8027c10:	041a      	lsls	r2, r3, #16
 8027c12:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027c16:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027c1a:	4313      	orrs	r3, r2
 8027c1c:	fb0e 8303 	mla	r3, lr, r3, r8
 8027c20:	042a      	lsls	r2, r5, #16
 8027c22:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027c26:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027c2a:	432a      	orrs	r2, r5
 8027c2c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8027c30:	fb07 3202 	mla	r2, r7, r2, r3
 8027c34:	0d53      	lsrs	r3, r2, #21
 8027c36:	0952      	lsrs	r2, r2, #5
 8027c38:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027c3c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027c40:	431a      	orrs	r2, r3
 8027c42:	b293      	uxth	r3, r2
 8027c44:	1202      	asrs	r2, r0, #8
 8027c46:	b2f6      	uxtb	r6, r6
 8027c48:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027c4c:	fb12 f206 	smulbb	r2, r2, r6
 8027c50:	10c7      	asrs	r7, r0, #3
 8027c52:	00c0      	lsls	r0, r0, #3
 8027c54:	b2c0      	uxtb	r0, r0
 8027c56:	121d      	asrs	r5, r3, #8
 8027c58:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8027c5c:	fb10 f006 	smulbb	r0, r0, r6
 8027c60:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027c64:	fb17 f706 	smulbb	r7, r7, r6
 8027c68:	fb05 2504 	mla	r5, r5, r4, r2
 8027c6c:	10da      	asrs	r2, r3, #3
 8027c6e:	00db      	lsls	r3, r3, #3
 8027c70:	b2db      	uxtb	r3, r3
 8027c72:	fb03 0004 	mla	r0, r3, r4, r0
 8027c76:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8027c7a:	fb02 7204 	mla	r2, r2, r4, r7
 8027c7e:	b2ad      	uxth	r5, r5
 8027c80:	b280      	uxth	r0, r0
 8027c82:	1c6b      	adds	r3, r5, #1
 8027c84:	b292      	uxth	r2, r2
 8027c86:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027c8a:	1c43      	adds	r3, r0, #1
 8027c8c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027c90:	1c50      	adds	r0, r2, #1
 8027c92:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8027c96:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027c9a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027c9e:	0952      	lsrs	r2, r2, #5
 8027ca0:	432b      	orrs	r3, r5
 8027ca2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027ca6:	4313      	orrs	r3, r2
 8027ca8:	800b      	strh	r3, [r1, #0]
 8027caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027cae:	4680      	mov	r8, r0
 8027cb0:	e763      	b.n	8027b7a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8027cb2:	4684      	mov	ip, r0
 8027cb4:	4680      	mov	r8, r0
 8027cb6:	e76c      	b.n	8027b92 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8027cb8:	4684      	mov	ip, r0
 8027cba:	e76a      	b.n	8027b92 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8027cbc:	4605      	mov	r5, r0
 8027cbe:	e779      	b.n	8027bb4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8027cc0:	4603      	mov	r3, r0
 8027cc2:	4605      	mov	r5, r0
 8027cc4:	e782      	b.n	8027bcc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8027cc6:	4603      	mov	r3, r0
 8027cc8:	e780      	b.n	8027bcc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08027cca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027cca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cce:	b093      	sub	sp, #76	@ 0x4c
 8027cd0:	461d      	mov	r5, r3
 8027cd2:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8027cd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027cd8:	910a      	str	r1, [sp, #40]	@ 0x28
 8027cda:	9210      	str	r2, [sp, #64]	@ 0x40
 8027cdc:	6859      	ldr	r1, [r3, #4]
 8027cde:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8027ce2:	681b      	ldr	r3, [r3, #0]
 8027ce4:	920b      	str	r2, [sp, #44]	@ 0x2c
 8027ce6:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8027cea:	fb01 2707 	mla	r7, r1, r7, r2
 8027cee:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8027cf2:	9307      	str	r3, [sp, #28]
 8027cf4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027cf6:	9011      	str	r0, [sp, #68]	@ 0x44
 8027cf8:	681b      	ldr	r3, [r3, #0]
 8027cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8027cfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027cfe:	43db      	mvns	r3, r3
 8027d00:	b2db      	uxtb	r3, r3
 8027d02:	9308      	str	r3, [sp, #32]
 8027d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027d06:	2b00      	cmp	r3, #0
 8027d08:	dc03      	bgt.n	8027d12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027d0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027d0c:	2b00      	cmp	r3, #0
 8027d0e:	f340 8203 	ble.w	8028118 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8027d12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027d14:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027d18:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027d1c:	1e48      	subs	r0, r1, #1
 8027d1e:	f102 3cff 	add.w	ip, r2, #4294967295
 8027d22:	2d00      	cmp	r5, #0
 8027d24:	f340 80da 	ble.w	8027edc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027d28:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027d2c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027d30:	d406      	bmi.n	8027d40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027d32:	4586      	cmp	lr, r0
 8027d34:	da04      	bge.n	8027d40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027d36:	2b00      	cmp	r3, #0
 8027d38:	db02      	blt.n	8027d40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027d3a:	4563      	cmp	r3, ip
 8027d3c:	f2c0 80cf 	blt.w	8027ede <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8027d40:	f11e 0e01 	adds.w	lr, lr, #1
 8027d44:	f100 80c1 	bmi.w	8027eca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027d48:	4571      	cmp	r1, lr
 8027d4a:	f2c0 80be 	blt.w	8027eca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027d4e:	3301      	adds	r3, #1
 8027d50:	f100 80bb 	bmi.w	8027eca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027d54:	429a      	cmp	r2, r3
 8027d56:	f2c0 80b8 	blt.w	8027eca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027d5a:	46a9      	mov	r9, r5
 8027d5c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027d60:	f1b9 0f00 	cmp.w	r9, #0
 8027d64:	f340 80d8 	ble.w	8027f18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8027d68:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027d6a:	1421      	asrs	r1, r4, #16
 8027d6c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027d70:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027d74:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027d78:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027d7c:	f100 8111 	bmi.w	8027fa2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027d80:	f10e 3aff 	add.w	sl, lr, #4294967295
 8027d84:	4551      	cmp	r1, sl
 8027d86:	f280 810c 	bge.w	8027fa2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027d8a:	2800      	cmp	r0, #0
 8027d8c:	f2c0 8109 	blt.w	8027fa2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027d90:	f103 3aff 	add.w	sl, r3, #4294967295
 8027d94:	4550      	cmp	r0, sl
 8027d96:	f280 8104 	bge.w	8027fa2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027d9a:	fa0f f38e 	sxth.w	r3, lr
 8027d9e:	fb00 1103 	mla	r1, r0, r3, r1
 8027da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027da4:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8027da8:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8027dac:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8027db0:	f1bc 0f00 	cmp.w	ip, #0
 8027db4:	d007      	beq.n	8027dc6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8027db6:	005b      	lsls	r3, r3, #1
 8027db8:	eb0a 0003 	add.w	r0, sl, r3
 8027dbc:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8027dc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8027dc2:	8843      	ldrh	r3, [r0, #2]
 8027dc4:	930d      	str	r3, [sp, #52]	@ 0x34
 8027dc6:	fb12 f30c 	smulbb	r3, r2, ip
 8027dca:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8027dce:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027dd2:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027dd6:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027dda:	10db      	asrs	r3, r3, #3
 8027ddc:	ea40 000e 	orr.w	r0, r0, lr
 8027de0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027de4:	f1cc 0e10 	rsb	lr, ip, #16
 8027de8:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027dec:	ebae 0e02 	sub.w	lr, lr, r2
 8027df0:	ea4a 0101 	orr.w	r1, sl, r1
 8027df4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027df8:	4351      	muls	r1, r2
 8027dfa:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027dfe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027e00:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027e04:	0410      	lsls	r0, r2, #16
 8027e06:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027e0a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027e0e:	4310      	orrs	r0, r2
 8027e10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8027e12:	fb03 e000 	mla	r0, r3, r0, lr
 8027e16:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027e18:	0412      	lsls	r2, r2, #16
 8027e1a:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8027e1e:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027e22:	ea42 020e 	orr.w	r2, r2, lr
 8027e26:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027e2a:	fb03 0302 	mla	r3, r3, r2, r0
 8027e2e:	f8b8 0000 	ldrh.w	r0, [r8]
 8027e32:	9f08      	ldr	r7, [sp, #32]
 8027e34:	0d5a      	lsrs	r2, r3, #21
 8027e36:	1201      	asrs	r1, r0, #8
 8027e38:	095b      	lsrs	r3, r3, #5
 8027e3a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027e3e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027e42:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8027e46:	4313      	orrs	r3, r2
 8027e48:	fb11 f107 	smulbb	r1, r1, r7
 8027e4c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027e50:	00c0      	lsls	r0, r0, #3
 8027e52:	b29b      	uxth	r3, r3
 8027e54:	b2c0      	uxtb	r0, r0
 8027e56:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8027e5a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027e5e:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8027e62:	fb10 f007 	smulbb	r0, r0, r7
 8027e66:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8027e6a:	fb1e fe07 	smulbb	lr, lr, r7
 8027e6e:	fb0c 1c02 	mla	ip, ip, r2, r1
 8027e72:	10d9      	asrs	r1, r3, #3
 8027e74:	00db      	lsls	r3, r3, #3
 8027e76:	b2db      	uxtb	r3, r3
 8027e78:	fb03 0302 	mla	r3, r3, r2, r0
 8027e7c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027e80:	fb01 e102 	mla	r1, r1, r2, lr
 8027e84:	fa1f fc8c 	uxth.w	ip, ip
 8027e88:	b29a      	uxth	r2, r3
 8027e8a:	f10c 0301 	add.w	r3, ip, #1
 8027e8e:	b289      	uxth	r1, r1
 8027e90:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027e94:	1c53      	adds	r3, r2, #1
 8027e96:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027e9a:	1c4a      	adds	r2, r1, #1
 8027e9c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027ea0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8027ea4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027ea8:	0949      	lsrs	r1, r1, #5
 8027eaa:	ea43 030c 	orr.w	r3, r3, ip
 8027eae:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027eb2:	430b      	orrs	r3, r1
 8027eb4:	f8a8 3000 	strh.w	r3, [r8]
 8027eb8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027eba:	f108 0802 	add.w	r8, r8, #2
 8027ebe:	441c      	add	r4, r3
 8027ec0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027ec2:	f109 39ff 	add.w	r9, r9, #4294967295
 8027ec6:	441e      	add	r6, r3
 8027ec8:	e74a      	b.n	8027d60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027eca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027ecc:	3d01      	subs	r5, #1
 8027ece:	441c      	add	r4, r3
 8027ed0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027ed2:	441e      	add	r6, r3
 8027ed4:	9b07      	ldr	r3, [sp, #28]
 8027ed6:	3302      	adds	r3, #2
 8027ed8:	9307      	str	r3, [sp, #28]
 8027eda:	e722      	b.n	8027d22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8027edc:	d022      	beq.n	8027f24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8027ede:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8027ee0:	1e6b      	subs	r3, r5, #1
 8027ee2:	fb00 4003 	mla	r0, r0, r3, r4
 8027ee6:	1400      	asrs	r0, r0, #16
 8027ee8:	f53f af37 	bmi.w	8027d5a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027eec:	3901      	subs	r1, #1
 8027eee:	4288      	cmp	r0, r1
 8027ef0:	f6bf af33 	bge.w	8027d5a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027ef4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8027ef6:	fb01 6303 	mla	r3, r1, r3, r6
 8027efa:	141b      	asrs	r3, r3, #16
 8027efc:	f53f af2d 	bmi.w	8027d5a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027f00:	3a01      	subs	r2, #1
 8027f02:	4293      	cmp	r3, r2
 8027f04:	f6bf af29 	bge.w	8027d5a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027f08:	46a8      	mov	r8, r5
 8027f0a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8027f0e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8027f12:	f1b8 0f00 	cmp.w	r8, #0
 8027f16:	dc5e      	bgt.n	8027fd6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027f18:	9b07      	ldr	r3, [sp, #28]
 8027f1a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027f1e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027f22:	9307      	str	r3, [sp, #28]
 8027f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027f26:	2b00      	cmp	r3, #0
 8027f28:	f340 80f6 	ble.w	8028118 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8027f2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027f30:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027f34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027f38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027f3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027f40:	eef0 6a62 	vmov.f32	s13, s5
 8027f44:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027f48:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027f4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027f50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027f58:	ee16 4a90 	vmov	r4, s13
 8027f5c:	eef0 6a43 	vmov.f32	s13, s6
 8027f60:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027f64:	ee12 2a90 	vmov	r2, s5
 8027f68:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027f6c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027f6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f72:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f76:	ee13 2a10 	vmov	r2, s6
 8027f7a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8027f7c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027f7e:	ee16 6a90 	vmov	r6, s13
 8027f82:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f86:	9320      	str	r3, [sp, #128]	@ 0x80
 8027f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027f8a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027f8c:	3b01      	subs	r3, #1
 8027f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8027f90:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027f92:	bf0c      	ite	eq
 8027f94:	4615      	moveq	r5, r2
 8027f96:	461d      	movne	r5, r3
 8027f98:	eeb0 3a67 	vmov.f32	s6, s15
 8027f9c:	eef0 2a47 	vmov.f32	s5, s14
 8027fa0:	e6b0      	b.n	8027d04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027fa2:	f111 0a01 	adds.w	sl, r1, #1
 8027fa6:	d487      	bmi.n	8027eb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027fa8:	45d6      	cmp	lr, sl
 8027faa:	db85      	blt.n	8027eb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027fac:	f110 0a01 	adds.w	sl, r0, #1
 8027fb0:	d482      	bmi.n	8027eb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027fb2:	4553      	cmp	r3, sl
 8027fb4:	db80      	blt.n	8027eb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027fb6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8027fb8:	b21b      	sxth	r3, r3
 8027fba:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8027fbe:	9101      	str	r1, [sp, #4]
 8027fc0:	9300      	str	r3, [sp, #0]
 8027fc2:	e9cd c704 	strd	ip, r7, [sp, #16]
 8027fc6:	fa0f f38e 	sxth.w	r3, lr
 8027fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027fcc:	4641      	mov	r1, r8
 8027fce:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027fd0:	f7ff fdb4 	bl	8027b3c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8027fd4:	e770      	b.n	8027eb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027fd6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027fd8:	1430      	asrs	r0, r6, #16
 8027fda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027fde:	1423      	asrs	r3, r4, #16
 8027fe0:	fb01 3000 	mla	r0, r1, r0, r3
 8027fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027fe6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8027fe8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8027fec:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027ff0:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8027ff4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027ff8:	8858      	ldrh	r0, [r3, #2]
 8027ffa:	f1be 0f00 	cmp.w	lr, #0
 8027ffe:	d00b      	beq.n	8028018 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028000:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8028004:	3901      	subs	r1, #1
 8028006:	0049      	lsls	r1, r1, #1
 8028008:	3102      	adds	r1, #2
 802800a:	eb03 0b01 	add.w	fp, r3, r1
 802800e:	5a5b      	ldrh	r3, [r3, r1]
 8028010:	930e      	str	r3, [sp, #56]	@ 0x38
 8028012:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028016:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028018:	fb12 f30e 	smulbb	r3, r2, lr
 802801c:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8028020:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028024:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028028:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 802802c:	10db      	asrs	r3, r3, #3
 802802e:	ea41 010c 	orr.w	r1, r1, ip
 8028032:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028036:	f1ce 0c10 	rsb	ip, lr, #16
 802803a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802803e:	ebac 0c02 	sub.w	ip, ip, r2
 8028042:	ea4b 0000 	orr.w	r0, fp, r0
 8028046:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802804a:	4350      	muls	r0, r2
 802804c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8028050:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028052:	fb0c 0c01 	mla	ip, ip, r1, r0
 8028056:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802805a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802805e:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 8028062:	ea4b 0101 	orr.w	r1, fp, r1
 8028066:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028068:	fb03 c101 	mla	r1, r3, r1, ip
 802806c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802806e:	0412      	lsls	r2, r2, #16
 8028070:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028074:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028078:	4302      	orrs	r2, r0
 802807a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802807e:	fb03 1202 	mla	r2, r3, r2, r1
 8028082:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8028086:	0952      	lsrs	r2, r2, #5
 8028088:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 802808c:	f8b9 2000 	ldrh.w	r2, [r9]
 8028090:	9f08      	ldr	r7, [sp, #32]
 8028092:	1211      	asrs	r1, r2, #8
 8028094:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8028098:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802809c:	fb11 f107 	smulbb	r1, r1, r7
 80280a0:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80280a4:	ea4b 0303 	orr.w	r3, fp, r3
 80280a8:	00d2      	lsls	r2, r2, #3
 80280aa:	b29b      	uxth	r3, r3
 80280ac:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80280b0:	b2d2      	uxtb	r2, r2
 80280b2:	1218      	asrs	r0, r3, #8
 80280b4:	fb1c fc07 	smulbb	ip, ip, r7
 80280b8:	fb12 f207 	smulbb	r2, r2, r7
 80280bc:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80280c0:	fb00 100a 	mla	r0, r0, sl, r1
 80280c4:	10d9      	asrs	r1, r3, #3
 80280c6:	00db      	lsls	r3, r3, #3
 80280c8:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80280cc:	b2db      	uxtb	r3, r3
 80280ce:	fb01 c10a 	mla	r1, r1, sl, ip
 80280d2:	fb03 230a 	mla	r3, r3, sl, r2
 80280d6:	b280      	uxth	r0, r0
 80280d8:	b29b      	uxth	r3, r3
 80280da:	b289      	uxth	r1, r1
 80280dc:	1c42      	adds	r2, r0, #1
 80280de:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80280e2:	f101 0c01 	add.w	ip, r1, #1
 80280e6:	1c5a      	adds	r2, r3, #1
 80280e8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80280ec:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80280f0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80280f2:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 80280f6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80280fa:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80280fe:	4310      	orrs	r0, r2
 8028100:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028104:	441c      	add	r4, r3
 8028106:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028108:	ea40 000c 	orr.w	r0, r0, ip
 802810c:	f829 0b02 	strh.w	r0, [r9], #2
 8028110:	441e      	add	r6, r3
 8028112:	f108 38ff 	add.w	r8, r8, #4294967295
 8028116:	e6fc      	b.n	8027f12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8028118:	b013      	add	sp, #76	@ 0x4c
 802811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802811e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802811e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028122:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8028126:	fb0e 4703 	mla	r7, lr, r3, r4
 802812a:	f1be 0f00 	cmp.w	lr, #0
 802812e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8028132:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8028136:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 802813a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802813e:	8808      	ldrh	r0, [r1, #0]
 8028140:	db60      	blt.n	8028204 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8028142:	45f1      	cmp	r9, lr
 8028144:	dd5e      	ble.n	8028204 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8028146:	2c00      	cmp	r4, #0
 8028148:	db5a      	blt.n	8028200 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802814a:	42a3      	cmp	r3, r4
 802814c:	dd58      	ble.n	8028200 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802814e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8028152:	1c62      	adds	r2, r4, #1
 8028154:	d459      	bmi.n	802820a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8028156:	4293      	cmp	r3, r2
 8028158:	dd57      	ble.n	802820a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802815a:	2d00      	cmp	r5, #0
 802815c:	d055      	beq.n	802820a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802815e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8028162:	f11e 0e01 	adds.w	lr, lr, #1
 8028166:	d454      	bmi.n	8028212 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028168:	45f1      	cmp	r9, lr
 802816a:	dd52      	ble.n	8028212 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802816c:	2e00      	cmp	r6, #0
 802816e:	d050      	beq.n	8028212 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028170:	2c00      	cmp	r4, #0
 8028172:	db4c      	blt.n	802820e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8028174:	42a3      	cmp	r3, r4
 8028176:	dd4a      	ble.n	802820e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8028178:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 802817c:	3401      	adds	r4, #1
 802817e:	d405      	bmi.n	802818c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028180:	42a3      	cmp	r3, r4
 8028182:	dd03      	ble.n	802818c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028184:	b115      	cbz	r5, 802818c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028186:	3301      	adds	r3, #1
 8028188:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 802818c:	fb15 f406 	smulbb	r4, r5, r6
 8028190:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8028194:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8028198:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802819c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80281a0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80281a4:	ea43 0c0c 	orr.w	ip, r3, ip
 80281a8:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80281ac:	f1c6 0310 	rsb	r3, r6, #16
 80281b0:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80281b4:	1b5b      	subs	r3, r3, r5
 80281b6:	ea4e 0707 	orr.w	r7, lr, r7
 80281ba:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80281be:	437d      	muls	r5, r7
 80281c0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80281c4:	fb03 5c0c 	mla	ip, r3, ip, r5
 80281c8:	0403      	lsls	r3, r0, #16
 80281ca:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80281ce:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80281d2:	4318      	orrs	r0, r3
 80281d4:	fb04 c000 	mla	r0, r4, r0, ip
 80281d8:	0413      	lsls	r3, r2, #16
 80281da:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80281de:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80281e2:	4313      	orrs	r3, r2
 80281e4:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80281e8:	fb06 0003 	mla	r0, r6, r3, r0
 80281ec:	0d43      	lsrs	r3, r0, #21
 80281ee:	0940      	lsrs	r0, r0, #5
 80281f0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80281f4:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80281f8:	4318      	orrs	r0, r3
 80281fa:	8008      	strh	r0, [r1, #0]
 80281fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028200:	4684      	mov	ip, r0
 8028202:	e7a6      	b.n	8028152 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8028204:	4607      	mov	r7, r0
 8028206:	4684      	mov	ip, r0
 8028208:	e7ab      	b.n	8028162 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802820a:	4607      	mov	r7, r0
 802820c:	e7a9      	b.n	8028162 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802820e:	4602      	mov	r2, r0
 8028210:	e7b4      	b.n	802817c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8028212:	4602      	mov	r2, r0
 8028214:	e7ba      	b.n	802818c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08028216 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802821a:	b08f      	sub	sp, #60	@ 0x3c
 802821c:	461d      	mov	r5, r3
 802821e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 8028222:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028224:	9107      	str	r1, [sp, #28]
 8028226:	6859      	ldr	r1, [r3, #4]
 8028228:	920c      	str	r2, [sp, #48]	@ 0x30
 802822a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 802822e:	fb01 2707 	mla	r7, r1, r7, r2
 8028232:	681b      	ldr	r3, [r3, #0]
 8028234:	900d      	str	r0, [sp, #52]	@ 0x34
 8028236:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802823a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802823c:	f8d3 8000 	ldr.w	r8, [r3]
 8028240:	9b07      	ldr	r3, [sp, #28]
 8028242:	2b00      	cmp	r3, #0
 8028244:	dc03      	bgt.n	802824e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028246:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028248:	2b00      	cmp	r3, #0
 802824a:	f340 8181 	ble.w	8028550 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802824e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028250:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028254:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028258:	1e48      	subs	r0, r1, #1
 802825a:	f102 3cff 	add.w	ip, r2, #4294967295
 802825e:	2d00      	cmp	r5, #0
 8028260:	f340 809b 	ble.w	802839a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8028264:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028268:	ea4f 4326 	mov.w	r3, r6, asr #16
 802826c:	d406      	bmi.n	802827c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802826e:	4586      	cmp	lr, r0
 8028270:	da04      	bge.n	802827c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028272:	2b00      	cmp	r3, #0
 8028274:	db02      	blt.n	802827c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028276:	4563      	cmp	r3, ip
 8028278:	f2c0 8090 	blt.w	802839c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802827c:	f11e 0e01 	adds.w	lr, lr, #1
 8028280:	f100 8084 	bmi.w	802838c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028284:	4571      	cmp	r1, lr
 8028286:	f2c0 8081 	blt.w	802838c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802828a:	3301      	adds	r3, #1
 802828c:	d47e      	bmi.n	802838c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802828e:	429a      	cmp	r2, r3
 8028290:	db7c      	blt.n	802838c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028292:	46aa      	mov	sl, r5
 8028294:	46b9      	mov	r9, r7
 8028296:	f1ba 0f00 	cmp.w	sl, #0
 802829a:	f340 8099 	ble.w	80283d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802829e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80282a0:	1421      	asrs	r1, r4, #16
 80282a2:	ea4f 4026 	mov.w	r0, r6, asr #16
 80282a6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80282aa:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80282ae:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80282b2:	f100 80d0 	bmi.w	8028456 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80282b6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80282ba:	4559      	cmp	r1, fp
 80282bc:	f280 80cb 	bge.w	8028456 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80282c0:	2800      	cmp	r0, #0
 80282c2:	f2c0 80c8 	blt.w	8028456 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80282c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80282ca:	4558      	cmp	r0, fp
 80282cc:	f280 80c3 	bge.w	8028456 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80282d0:	fa0f fe8e 	sxth.w	lr, lr
 80282d4:	fb00 110e 	mla	r1, r0, lr, r1
 80282d8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80282dc:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80282e0:	8841      	ldrh	r1, [r0, #2]
 80282e2:	f1bc 0f00 	cmp.w	ip, #0
 80282e6:	d00b      	beq.n	8028300 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80282e8:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 80282ec:	3b01      	subs	r3, #1
 80282ee:	005b      	lsls	r3, r3, #1
 80282f0:	3302      	adds	r3, #2
 80282f2:	eb00 0e03 	add.w	lr, r0, r3
 80282f6:	5ac3      	ldrh	r3, [r0, r3]
 80282f8:	9308      	str	r3, [sp, #32]
 80282fa:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80282fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8028300:	fb12 f30c 	smulbb	r3, r2, ip
 8028304:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8028308:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802830c:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8028310:	ea40 000b 	orr.w	r0, r0, fp
 8028314:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028318:	10db      	asrs	r3, r3, #3
 802831a:	f1cc 0e10 	rsb	lr, ip, #16
 802831e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028322:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8028326:	ebae 0e02 	sub.w	lr, lr, r2
 802832a:	ea4b 0101 	orr.w	r1, fp, r1
 802832e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028332:	4351      	muls	r1, r2
 8028334:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802833a:	fb0e 1e00 	mla	lr, lr, r0, r1
 802833e:	0410      	lsls	r0, r2, #16
 8028340:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028344:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028348:	4310      	orrs	r0, r2
 802834a:	9a08      	ldr	r2, [sp, #32]
 802834c:	fb03 e000 	mla	r0, r3, r0, lr
 8028350:	9908      	ldr	r1, [sp, #32]
 8028352:	0412      	lsls	r2, r2, #16
 8028354:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028358:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 802835c:	ea42 020e 	orr.w	r2, r2, lr
 8028360:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028364:	fb03 0302 	mla	r3, r3, r2, r0
 8028368:	0d5a      	lsrs	r2, r3, #21
 802836a:	095b      	lsrs	r3, r3, #5
 802836c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028370:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8028374:	4313      	orrs	r3, r2
 8028376:	f8a9 3000 	strh.w	r3, [r9]
 802837a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802837c:	f109 0902 	add.w	r9, r9, #2
 8028380:	441c      	add	r4, r3
 8028382:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028384:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028388:	441e      	add	r6, r3
 802838a:	e784      	b.n	8028296 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802838c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802838e:	3d01      	subs	r5, #1
 8028390:	441c      	add	r4, r3
 8028392:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028394:	3702      	adds	r7, #2
 8028396:	441e      	add	r6, r3
 8028398:	e761      	b.n	802825e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802839a:	d01d      	beq.n	80283d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802839c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802839e:	1e6b      	subs	r3, r5, #1
 80283a0:	fb00 4003 	mla	r0, r0, r3, r4
 80283a4:	1400      	asrs	r0, r0, #16
 80283a6:	f53f af74 	bmi.w	8028292 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80283aa:	3901      	subs	r1, #1
 80283ac:	4288      	cmp	r0, r1
 80283ae:	f6bf af70 	bge.w	8028292 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80283b2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80283b4:	fb01 6303 	mla	r3, r1, r3, r6
 80283b8:	141b      	asrs	r3, r3, #16
 80283ba:	f53f af6a 	bmi.w	8028292 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80283be:	3a01      	subs	r2, #1
 80283c0:	4293      	cmp	r3, r2
 80283c2:	f6bf af66 	bge.w	8028292 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80283c6:	46a9      	mov	r9, r5
 80283c8:	46ba      	mov	sl, r7
 80283ca:	f1b9 0f00 	cmp.w	r9, #0
 80283ce:	dc5a      	bgt.n	8028486 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 80283d0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80283d4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80283d8:	9b07      	ldr	r3, [sp, #28]
 80283da:	2b00      	cmp	r3, #0
 80283dc:	f340 80b8 	ble.w	8028550 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80283e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80283e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80283e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80283ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80283f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80283f4:	eef0 6a62 	vmov.f32	s13, s5
 80283f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80283fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028400:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028404:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028408:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802840c:	ee16 4a90 	vmov	r4, s13
 8028410:	eef0 6a43 	vmov.f32	s13, s6
 8028414:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028418:	ee12 2a90 	vmov	r2, s5
 802841c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028420:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028422:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028426:	fb92 f3f3 	sdiv	r3, r2, r3
 802842a:	ee13 2a10 	vmov	r2, s6
 802842e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8028430:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028432:	ee16 6a90 	vmov	r6, s13
 8028436:	fb92 f3f3 	sdiv	r3, r2, r3
 802843a:	931c      	str	r3, [sp, #112]	@ 0x70
 802843c:	9b07      	ldr	r3, [sp, #28]
 802843e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028440:	3b01      	subs	r3, #1
 8028442:	9307      	str	r3, [sp, #28]
 8028444:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028446:	bf0c      	ite	eq
 8028448:	4615      	moveq	r5, r2
 802844a:	461d      	movne	r5, r3
 802844c:	eeb0 3a67 	vmov.f32	s6, s15
 8028450:	eef0 2a47 	vmov.f32	s5, s14
 8028454:	e6f4      	b.n	8028240 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8028456:	f111 0b01 	adds.w	fp, r1, #1
 802845a:	d48e      	bmi.n	802837a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802845c:	45de      	cmp	lr, fp
 802845e:	db8c      	blt.n	802837a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028460:	f110 0b01 	adds.w	fp, r0, #1
 8028464:	d489      	bmi.n	802837a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028466:	455b      	cmp	r3, fp
 8028468:	db87      	blt.n	802837a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802846a:	b21b      	sxth	r3, r3
 802846c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8028470:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8028474:	9300      	str	r3, [sp, #0]
 8028476:	4642      	mov	r2, r8
 8028478:	fa0f f38e 	sxth.w	r3, lr
 802847c:	4649      	mov	r1, r9
 802847e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028480:	f7ff fe4d 	bl	802811e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8028484:	e779      	b.n	802837a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028486:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028488:	1420      	asrs	r0, r4, #16
 802848a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802848e:	1431      	asrs	r1, r6, #16
 8028490:	fb03 0101 	mla	r1, r3, r1, r0
 8028494:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028498:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802849c:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80284a0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80284a4:	8841      	ldrh	r1, [r0, #2]
 80284a6:	f1be 0f00 	cmp.w	lr, #0
 80284aa:	d00b      	beq.n	80284c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80284ac:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80284b0:	3b01      	subs	r3, #1
 80284b2:	005b      	lsls	r3, r3, #1
 80284b4:	3302      	adds	r3, #2
 80284b6:	eb00 0b03 	add.w	fp, r0, r3
 80284ba:	5ac3      	ldrh	r3, [r0, r3]
 80284bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80284be:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80284c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80284c4:	fb12 f30e 	smulbb	r3, r2, lr
 80284c8:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80284cc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80284d0:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80284d4:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80284d8:	10db      	asrs	r3, r3, #3
 80284da:	ea40 000c 	orr.w	r0, r0, ip
 80284de:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80284e2:	f1ce 0c10 	rsb	ip, lr, #16
 80284e6:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80284ea:	ebac 0c02 	sub.w	ip, ip, r2
 80284ee:	ea4b 0101 	orr.w	r1, fp, r1
 80284f2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80284f6:	4351      	muls	r1, r2
 80284f8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80284fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80284fe:	fb0c 1c00 	mla	ip, ip, r0, r1
 8028502:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028506:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802850a:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 802850e:	ea4b 0000 	orr.w	r0, fp, r0
 8028512:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028514:	fb03 c000 	mla	r0, r3, r0, ip
 8028518:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802851a:	0412      	lsls	r2, r2, #16
 802851c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028520:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8028524:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028528:	ea42 0b0b 	orr.w	fp, r2, fp
 802852c:	fb03 000b 	mla	r0, r3, fp, r0
 8028530:	0d43      	lsrs	r3, r0, #21
 8028532:	0940      	lsrs	r0, r0, #5
 8028534:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028538:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802853c:	4318      	orrs	r0, r3
 802853e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8028540:	f82a 0b02 	strh.w	r0, [sl], #2
 8028544:	441c      	add	r4, r3
 8028546:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028548:	f109 39ff 	add.w	r9, r9, #4294967295
 802854c:	441e      	add	r6, r3
 802854e:	e73c      	b.n	80283ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8028550:	b00f      	add	sp, #60	@ 0x3c
 8028552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028556 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8028556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802855a:	b085      	sub	sp, #20
 802855c:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8028560:	9102      	str	r1, [sp, #8]
 8028562:	fb04 7103 	mla	r1, r4, r3, r7
 8028566:	2c00      	cmp	r4, #0
 8028568:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 802856c:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8028570:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8028574:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8028578:	f2c0 811b 	blt.w	80287b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802857c:	45a6      	cmp	lr, r4
 802857e:	f340 8118 	ble.w	80287b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028582:	2f00      	cmp	r7, #0
 8028584:	f2c0 8113 	blt.w	80287ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8028588:	42bb      	cmp	r3, r7
 802858a:	f340 8110 	ble.w	80287ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802858e:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8028592:	1c7a      	adds	r2, r7, #1
 8028594:	f100 8110 	bmi.w	80287b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8028598:	4293      	cmp	r3, r2
 802859a:	f340 810d 	ble.w	80287b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802859e:	2e00      	cmp	r6, #0
 80285a0:	f000 810c 	beq.w	80287bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80285a4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80285a8:	3401      	adds	r4, #1
 80285aa:	f100 810b 	bmi.w	80287c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80285ae:	45a6      	cmp	lr, r4
 80285b0:	f340 8108 	ble.w	80287c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80285b4:	2800      	cmp	r0, #0
 80285b6:	f000 8108 	beq.w	80287ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80285ba:	2f00      	cmp	r7, #0
 80285bc:	f2c0 8100 	blt.w	80287c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80285c0:	42bb      	cmp	r3, r7
 80285c2:	f340 80fd 	ble.w	80287c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80285c6:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80285ca:	3701      	adds	r7, #1
 80285cc:	f100 8100 	bmi.w	80287d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80285d0:	42bb      	cmp	r3, r7
 80285d2:	f340 80fd 	ble.w	80287d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80285d6:	2e00      	cmp	r6, #0
 80285d8:	f000 80fc 	beq.w	80287d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80285dc:	3301      	adds	r3, #1
 80285de:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80285e2:	b2b6      	uxth	r6, r6
 80285e4:	b280      	uxth	r0, r0
 80285e6:	fb00 fe06 	mul.w	lr, r0, r6
 80285ea:	0136      	lsls	r6, r6, #4
 80285ec:	eba6 070e 	sub.w	r7, r6, lr
 80285f0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80285f4:	b2bf      	uxth	r7, r7
 80285f6:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 80285fa:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80285fe:	fb0a f607 	mul.w	r6, sl, r7
 8028602:	b280      	uxth	r0, r0
 8028604:	1a1b      	subs	r3, r3, r0
 8028606:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802860a:	b29b      	uxth	r3, r3
 802860c:	fb0b 6603 	mla	r6, fp, r3, r6
 8028610:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028614:	fb00 6609 	mla	r6, r0, r9, r6
 8028618:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802861c:	fb0e 6608 	mla	r6, lr, r8, r6
 8028620:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028624:	9600      	str	r6, [sp, #0]
 8028626:	2e00      	cmp	r6, #0
 8028628:	f000 80be 	beq.w	80287a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802862c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028630:	fb0b fc0c 	mul.w	ip, fp, ip
 8028634:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8028638:	fb0b f505 	mul.w	r5, fp, r5
 802863c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8028640:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8028644:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028648:	44dc      	add	ip, fp
 802864a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802864e:	9501      	str	r5, [sp, #4]
 8028650:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8028654:	9503      	str	r5, [sp, #12]
 8028656:	9d01      	ldr	r5, [sp, #4]
 8028658:	9e02      	ldr	r6, [sp, #8]
 802865a:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802865e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8028662:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8028666:	fb0a fc0c 	mul.w	ip, sl, ip
 802866a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802866e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8028672:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8028676:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802867a:	4465      	add	r5, ip
 802867c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8028680:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8028684:	fb09 fc0c 	mul.w	ip, r9, ip
 8028688:	fb09 f904 	mul.w	r9, r9, r4
 802868c:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8028690:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8028694:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8028698:	fb08 f404 	mul.w	r4, r8, r4
 802869c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80286a0:	fb08 f802 	mul.w	r8, r8, r2
 80286a4:	0a2d      	lsrs	r5, r5, #8
 80286a6:	0a22      	lsrs	r2, r4, #8
 80286a8:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80286ac:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80286b0:	437d      	muls	r5, r7
 80286b2:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80286b6:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80286ba:	4414      	add	r4, r2
 80286bc:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80286c0:	fb0a fa01 	mul.w	sl, sl, r1
 80286c4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80286c8:	9a03      	ldr	r2, [sp, #12]
 80286ca:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80286ce:	fb02 5503 	mla	r5, r2, r3, r5
 80286d2:	0a24      	lsrs	r4, r4, #8
 80286d4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80286d8:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80286dc:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80286e0:	fb04 540e 	mla	r4, r4, lr, r5
 80286e4:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80286e8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80286ec:	4461      	add	r1, ip
 80286ee:	0a09      	lsrs	r1, r1, #8
 80286f0:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80286f4:	fb01 4100 	mla	r1, r1, r0, r4
 80286f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80286fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028700:	fb07 f70a 	mul.w	r7, r7, sl
 8028704:	0a09      	lsrs	r1, r1, #8
 8028706:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802870a:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802870e:	fb03 7101 	mla	r1, r3, r1, r7
 8028712:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028716:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802871a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802871e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028722:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8028726:	fb00 e101 	mla	r1, r0, r1, lr
 802872a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802872e:	9a00      	ldr	r2, [sp, #0]
 8028730:	b287      	uxth	r7, r0
 8028732:	437a      	muls	r2, r7
 8028734:	1c53      	adds	r3, r2, #1
 8028736:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802873a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802873e:	0a09      	lsrs	r1, r1, #8
 8028740:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8028744:	4321      	orrs	r1, r4
 8028746:	0c0a      	lsrs	r2, r1, #16
 8028748:	8836      	ldrh	r6, [r6, #0]
 802874a:	fb12 f207 	smulbb	r2, r2, r7
 802874e:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8028752:	b2c8      	uxtb	r0, r1
 8028754:	1235      	asrs	r5, r6, #8
 8028756:	fb14 f407 	smulbb	r4, r4, r7
 802875a:	fb10 f007 	smulbb	r0, r0, r7
 802875e:	b2db      	uxtb	r3, r3
 8028760:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8028764:	fb05 2503 	mla	r5, r5, r3, r2
 8028768:	10f2      	asrs	r2, r6, #3
 802876a:	00f6      	lsls	r6, r6, #3
 802876c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028770:	b2f6      	uxtb	r6, r6
 8028772:	fb02 4203 	mla	r2, r2, r3, r4
 8028776:	fb06 0303 	mla	r3, r6, r3, r0
 802877a:	b2ad      	uxth	r5, r5
 802877c:	b299      	uxth	r1, r3
 802877e:	b294      	uxth	r4, r2
 8028780:	1c6b      	adds	r3, r5, #1
 8028782:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028786:	1c62      	adds	r2, r4, #1
 8028788:	1c4b      	adds	r3, r1, #1
 802878a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802878e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028792:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8028796:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802879a:	0952      	lsrs	r2, r2, #5
 802879c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80287a0:	432b      	orrs	r3, r5
 80287a2:	4313      	orrs	r3, r2
 80287a4:	9a02      	ldr	r2, [sp, #8]
 80287a6:	8013      	strh	r3, [r2, #0]
 80287a8:	b005      	add	sp, #20
 80287aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287ae:	2500      	movs	r5, #0
 80287b0:	e6ef      	b.n	8028592 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80287b2:	2100      	movs	r1, #0
 80287b4:	460d      	mov	r5, r1
 80287b6:	e6f7      	b.n	80285a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80287b8:	2100      	movs	r1, #0
 80287ba:	e6f5      	b.n	80285a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80287bc:	4631      	mov	r1, r6
 80287be:	e6f3      	b.n	80285a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80287c0:	2400      	movs	r4, #0
 80287c2:	e702      	b.n	80285ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80287c4:	2200      	movs	r2, #0
 80287c6:	4614      	mov	r4, r2
 80287c8:	e70b      	b.n	80285e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80287ca:	4602      	mov	r2, r0
 80287cc:	4604      	mov	r4, r0
 80287ce:	e708      	b.n	80285e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80287d0:	2200      	movs	r2, #0
 80287d2:	e706      	b.n	80285e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80287d4:	4632      	mov	r2, r6
 80287d6:	e704      	b.n	80285e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080287d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80287d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80287dc:	b09d      	sub	sp, #116	@ 0x74
 80287de:	9219      	str	r2, [sp, #100]	@ 0x64
 80287e0:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80287e2:	901b      	str	r0, [sp, #108]	@ 0x6c
 80287e4:	9307      	str	r3, [sp, #28]
 80287e6:	6850      	ldr	r0, [r2, #4]
 80287e8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 80287ec:	9117      	str	r1, [sp, #92]	@ 0x5c
 80287ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80287f0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 80287f4:	fb00 1303 	mla	r3, r0, r3, r1
 80287f8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 80287fc:	6812      	ldr	r2, [r2, #0]
 80287fe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028802:	930a      	str	r3, [sp, #40]	@ 0x28
 8028804:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028806:	681b      	ldr	r3, [r3, #0]
 8028808:	9310      	str	r3, [sp, #64]	@ 0x40
 802880a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 802880e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028810:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028812:	2b00      	cmp	r3, #0
 8028814:	dc03      	bgt.n	802881e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8028816:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028818:	2b00      	cmp	r3, #0
 802881a:	f340 8375 	ble.w	8028f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802881e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028820:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028824:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028828:	1e48      	subs	r0, r1, #1
 802882a:	1e57      	subs	r7, r2, #1
 802882c:	9b07      	ldr	r3, [sp, #28]
 802882e:	2b00      	cmp	r3, #0
 8028830:	f340 818e 	ble.w	8028b50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8028834:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028838:	ea4f 4326 	mov.w	r3, r6, asr #16
 802883c:	d406      	bmi.n	802884c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802883e:	4584      	cmp	ip, r0
 8028840:	da04      	bge.n	802884c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028842:	2b00      	cmp	r3, #0
 8028844:	db02      	blt.n	802884c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028846:	42bb      	cmp	r3, r7
 8028848:	f2c0 8183 	blt.w	8028b52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802884c:	f11c 0c01 	adds.w	ip, ip, #1
 8028850:	f100 8173 	bmi.w	8028b3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028854:	4561      	cmp	r1, ip
 8028856:	f2c0 8170 	blt.w	8028b3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802885a:	3301      	adds	r3, #1
 802885c:	f100 816d 	bmi.w	8028b3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028860:	429a      	cmp	r2, r3
 8028862:	f2c0 816a 	blt.w	8028b3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028866:	9b07      	ldr	r3, [sp, #28]
 8028868:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802886a:	9318      	str	r3, [sp, #96]	@ 0x60
 802886c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802886e:	2b00      	cmp	r3, #0
 8028870:	f340 818c 	ble.w	8028b8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8028874:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8028876:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028878:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802887c:	1422      	asrs	r2, r4, #16
 802887e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028882:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028886:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802888a:	689b      	ldr	r3, [r3, #8]
 802888c:	f100 81cd 	bmi.w	8028c2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028890:	f103 38ff 	add.w	r8, r3, #4294967295
 8028894:	4542      	cmp	r2, r8
 8028896:	f280 81c8 	bge.w	8028c2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802889a:	f1bc 0f00 	cmp.w	ip, #0
 802889e:	f2c0 81c4 	blt.w	8028c2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80288a2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80288a6:	45c4      	cmp	ip, r8
 80288a8:	f280 81bf 	bge.w	8028c2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80288ac:	b21b      	sxth	r3, r3
 80288ae:	fb0c 2203 	mla	r2, ip, r3, r2
 80288b2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80288b4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80288b8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80288bc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80288c0:	2800      	cmp	r0, #0
 80288c2:	f000 81a9 	beq.w	8028c18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80288c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80288ca:	950c      	str	r5, [sp, #48]	@ 0x30
 80288cc:	0e2d      	lsrs	r5, r5, #24
 80288ce:	9513      	str	r5, [sp, #76]	@ 0x4c
 80288d0:	b181      	cbz	r1, 80288f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80288d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80288d6:	3b01      	subs	r3, #1
 80288d8:	009b      	lsls	r3, r3, #2
 80288da:	3304      	adds	r3, #4
 80288dc:	eb08 0c03 	add.w	ip, r8, r3
 80288e0:	f858 3003 	ldr.w	r3, [r8, r3]
 80288e4:	9308      	str	r3, [sp, #32]
 80288e6:	0e1b      	lsrs	r3, r3, #24
 80288e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80288ea:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80288ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80288f0:	0e1b      	lsrs	r3, r3, #24
 80288f2:	9314      	str	r3, [sp, #80]	@ 0x50
 80288f4:	b280      	uxth	r0, r0
 80288f6:	b289      	uxth	r1, r1
 80288f8:	fb00 f901 	mul.w	r9, r0, r1
 80288fc:	0100      	lsls	r0, r0, #4
 80288fe:	eba0 0809 	sub.w	r8, r0, r9
 8028902:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8028906:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8028908:	fa1f f888 	uxth.w	r8, r8
 802890c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028910:	fb08 f000 	mul.w	r0, r8, r0
 8028914:	b289      	uxth	r1, r1
 8028916:	1a5b      	subs	r3, r3, r1
 8028918:	b29b      	uxth	r3, r3
 802891a:	fb03 000e 	mla	r0, r3, lr, r0
 802891e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028920:	fb01 0005 	mla	r0, r1, r5, r0
 8028924:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028926:	fb09 0005 	mla	r0, r9, r5, r0
 802892a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802892e:	2800      	cmp	r0, #0
 8028930:	f000 80fa 	beq.w	8028b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028934:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8028938:	d01b      	beq.n	8028972 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802893a:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802893e:	fb0e fa0a 	mul.w	sl, lr, sl
 8028942:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028946:	fb0e fe02 	mul.w	lr, lr, r2
 802894a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802894e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028952:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028956:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802895a:	4452      	add	r2, sl
 802895c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028960:	0a12      	lsrs	r2, r2, #8
 8028962:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028966:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802896a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802896e:	ea42 020c 	orr.w	r2, r2, ip
 8028972:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028974:	2dff      	cmp	r5, #255	@ 0xff
 8028976:	d021      	beq.n	80289bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8028978:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802897a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802897e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028980:	fb05 fb0b 	mul.w	fp, r5, fp
 8028984:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028986:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802898a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802898e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028990:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028994:	fb05 fa0a 	mul.w	sl, r5, sl
 8028998:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802899c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80289a0:	44de      	add	lr, fp
 80289a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80289a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80289aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80289ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80289b2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80289b6:	ea4e 050a 	orr.w	r5, lr, sl
 80289ba:	950c      	str	r5, [sp, #48]	@ 0x30
 80289bc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80289be:	2dff      	cmp	r5, #255	@ 0xff
 80289c0:	d021      	beq.n	8028a06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80289c2:	9d08      	ldr	r5, [sp, #32]
 80289c4:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80289c8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80289ca:	fb05 fb0b 	mul.w	fp, r5, fp
 80289ce:	9d08      	ldr	r5, [sp, #32]
 80289d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80289d4:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80289d8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80289da:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80289de:	fb05 fa0a 	mul.w	sl, r5, sl
 80289e2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80289e6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80289ea:	44de      	add	lr, fp
 80289ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80289f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80289f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80289f8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80289fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028a00:	ea4e 050a 	orr.w	r5, lr, sl
 8028a04:	9508      	str	r5, [sp, #32]
 8028a06:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028a08:	2dff      	cmp	r5, #255	@ 0xff
 8028a0a:	d021      	beq.n	8028a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8028a0c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028a0e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028a12:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028a14:	fb05 fb0b 	mul.w	fp, r5, fp
 8028a18:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028a1a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028a1e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028a22:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028a24:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028a28:	fb05 fa0a 	mul.w	sl, r5, sl
 8028a2c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028a30:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028a34:	44de      	add	lr, fp
 8028a36:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028a3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028a3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028a42:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028a46:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028a4a:	ea4e 050a 	orr.w	r5, lr, sl
 8028a4e:	950d      	str	r5, [sp, #52]	@ 0x34
 8028a50:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028a52:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8028a56:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028a5a:	fb08 fc0c 	mul.w	ip, r8, ip
 8028a5e:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028a62:	9d08      	ldr	r5, [sp, #32]
 8028a64:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028a68:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028a6c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028a70:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028a72:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028a76:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028a78:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028a7c:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8028a80:	fb08 f80e 	mul.w	r8, r8, lr
 8028a84:	fb03 8202 	mla	r2, r3, r2, r8
 8028a88:	9b08      	ldr	r3, [sp, #32]
 8028a8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a8e:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8028a92:	fb01 220a 	mla	r2, r1, sl, r2
 8028a96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028a98:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028a9c:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8028aa0:	fb09 2901 	mla	r9, r9, r1, r2
 8028aa4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028aa6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028aaa:	4342      	muls	r2, r0
 8028aac:	1c50      	adds	r0, r2, #1
 8028aae:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028ab2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028ab6:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8028aba:	ea4c 0c09 	orr.w	ip, ip, r9
 8028abe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028ac0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028ac4:	883b      	ldrh	r3, [r7, #0]
 8028ac6:	fb12 f205 	smulbb	r2, r2, r5
 8028aca:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028ace:	fa5f fc8c 	uxtb.w	ip, ip
 8028ad2:	1219      	asrs	r1, r3, #8
 8028ad4:	fb1c fc05 	smulbb	ip, ip, r5
 8028ad8:	b2c0      	uxtb	r0, r0
 8028ada:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028ade:	fb01 2100 	mla	r1, r1, r0, r2
 8028ae2:	10da      	asrs	r2, r3, #3
 8028ae4:	00db      	lsls	r3, r3, #3
 8028ae6:	fb1e fe05 	smulbb	lr, lr, r5
 8028aea:	b2db      	uxtb	r3, r3
 8028aec:	fb03 c300 	mla	r3, r3, r0, ip
 8028af0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028af4:	b289      	uxth	r1, r1
 8028af6:	fb02 e200 	mla	r2, r2, r0, lr
 8028afa:	fa1f fc83 	uxth.w	ip, r3
 8028afe:	1c4b      	adds	r3, r1, #1
 8028b00:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028b04:	f10c 0301 	add.w	r3, ip, #1
 8028b08:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8028b0c:	b292      	uxth	r2, r2
 8028b0e:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8028b12:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028b16:	430b      	orrs	r3, r1
 8028b18:	1c51      	adds	r1, r2, #1
 8028b1a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028b1e:	0952      	lsrs	r2, r2, #5
 8028b20:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028b24:	4313      	orrs	r3, r2
 8028b26:	803b      	strh	r3, [r7, #0]
 8028b28:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028b2a:	3702      	adds	r7, #2
 8028b2c:	441c      	add	r4, r3
 8028b2e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028b30:	441e      	add	r6, r3
 8028b32:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028b34:	3b01      	subs	r3, #1
 8028b36:	9318      	str	r3, [sp, #96]	@ 0x60
 8028b38:	e698      	b.n	802886c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028b3a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028b3c:	441c      	add	r4, r3
 8028b3e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028b40:	441e      	add	r6, r3
 8028b42:	9b07      	ldr	r3, [sp, #28]
 8028b44:	3b01      	subs	r3, #1
 8028b46:	9307      	str	r3, [sp, #28]
 8028b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028b4a:	3302      	adds	r3, #2
 8028b4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8028b4e:	e66d      	b.n	802882c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8028b50:	d023      	beq.n	8028b9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8028b52:	9b07      	ldr	r3, [sp, #28]
 8028b54:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8028b56:	3b01      	subs	r3, #1
 8028b58:	fb00 4003 	mla	r0, r0, r3, r4
 8028b5c:	1400      	asrs	r0, r0, #16
 8028b5e:	f53f ae82 	bmi.w	8028866 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028b62:	3901      	subs	r1, #1
 8028b64:	4288      	cmp	r0, r1
 8028b66:	f6bf ae7e 	bge.w	8028866 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028b6a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8028b6c:	fb01 6303 	mla	r3, r1, r3, r6
 8028b70:	141b      	asrs	r3, r3, #16
 8028b72:	f53f ae78 	bmi.w	8028866 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028b76:	3a01      	subs	r2, #1
 8028b78:	4293      	cmp	r3, r2
 8028b7a:	f6bf ae74 	bge.w	8028866 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028b7e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028b82:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8028b86:	f1bb 0f00 	cmp.w	fp, #0
 8028b8a:	dc6c      	bgt.n	8028c66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8028b8c:	9b07      	ldr	r3, [sp, #28]
 8028b8e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028b92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028b94:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8028b9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028b9c:	2b00      	cmp	r3, #0
 8028b9e:	f340 81b3 	ble.w	8028f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028ba6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028baa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028bae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028bb2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028bb6:	eef0 6a62 	vmov.f32	s13, s5
 8028bba:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028bbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028bc2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028bc6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028bca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028bce:	ee16 4a90 	vmov	r4, s13
 8028bd2:	eef0 6a43 	vmov.f32	s13, s6
 8028bd6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028bda:	ee12 2a90 	vmov	r2, s5
 8028bde:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028be2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028be4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028be8:	fb92 f3f3 	sdiv	r3, r2, r3
 8028bec:	ee13 2a10 	vmov	r2, s6
 8028bf0:	9329      	str	r3, [sp, #164]	@ 0xa4
 8028bf2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028bf4:	ee16 6a90 	vmov	r6, s13
 8028bf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8028bfc:	932a      	str	r3, [sp, #168]	@ 0xa8
 8028bfe:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028c00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8028c02:	3b01      	subs	r3, #1
 8028c04:	9317      	str	r3, [sp, #92]	@ 0x5c
 8028c06:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028c08:	bf08      	it	eq
 8028c0a:	4613      	moveq	r3, r2
 8028c0c:	eeb0 3a67 	vmov.f32	s6, s15
 8028c10:	9307      	str	r3, [sp, #28]
 8028c12:	eef0 2a47 	vmov.f32	s5, s14
 8028c16:	e5fb      	b.n	8028810 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028c18:	2900      	cmp	r1, #0
 8028c1a:	f43f ae6b 	beq.w	80288f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028c1e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028c22:	9308      	str	r3, [sp, #32]
 8028c24:	0e1b      	lsrs	r3, r3, #24
 8028c26:	9311      	str	r3, [sp, #68]	@ 0x44
 8028c28:	e664      	b.n	80288f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028c2a:	f112 0801 	adds.w	r8, r2, #1
 8028c2e:	f53f af7b 	bmi.w	8028b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028c32:	4543      	cmp	r3, r8
 8028c34:	f6ff af78 	blt.w	8028b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028c38:	f11c 0801 	adds.w	r8, ip, #1
 8028c3c:	f53f af74 	bmi.w	8028b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028c40:	45c6      	cmp	lr, r8
 8028c42:	f6ff af71 	blt.w	8028b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028c46:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8028c48:	9201      	str	r2, [sp, #4]
 8028c4a:	fa0f f28e 	sxth.w	r2, lr
 8028c4e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8028c52:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028c56:	9200      	str	r2, [sp, #0]
 8028c58:	b21b      	sxth	r3, r3
 8028c5a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028c5c:	4639      	mov	r1, r7
 8028c5e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8028c60:	f7ff fc79 	bl	8028556 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8028c64:	e760      	b.n	8028b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028c66:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028c68:	1427      	asrs	r7, r4, #16
 8028c6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028c6e:	1433      	asrs	r3, r6, #16
 8028c70:	fb01 7303 	mla	r3, r1, r3, r7
 8028c74:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8028c76:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028c7a:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8028c7e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028c82:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028c86:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028c8a:	2a00      	cmp	r2, #0
 8028c8c:	f000 8133 	beq.w	8028ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8028c90:	687d      	ldr	r5, [r7, #4]
 8028c92:	950e      	str	r5, [sp, #56]	@ 0x38
 8028c94:	0e2d      	lsrs	r5, r5, #24
 8028c96:	9515      	str	r5, [sp, #84]	@ 0x54
 8028c98:	b178      	cbz	r0, 8028cba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028c9a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8028c9e:	3901      	subs	r1, #1
 8028ca0:	0089      	lsls	r1, r1, #2
 8028ca2:	3104      	adds	r1, #4
 8028ca4:	eb07 0e01 	add.w	lr, r7, r1
 8028ca8:	5879      	ldr	r1, [r7, r1]
 8028caa:	9109      	str	r1, [sp, #36]	@ 0x24
 8028cac:	0e09      	lsrs	r1, r1, #24
 8028cae:	9112      	str	r1, [sp, #72]	@ 0x48
 8028cb0:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028cb4:	910f      	str	r1, [sp, #60]	@ 0x3c
 8028cb6:	0e09      	lsrs	r1, r1, #24
 8028cb8:	9116      	str	r1, [sp, #88]	@ 0x58
 8028cba:	b292      	uxth	r2, r2
 8028cbc:	b280      	uxth	r0, r0
 8028cbe:	fb02 f800 	mul.w	r8, r2, r0
 8028cc2:	0112      	lsls	r2, r2, #4
 8028cc4:	eba2 0e08 	sub.w	lr, r2, r8
 8028cc8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8028cca:	fa1f fe8e 	uxth.w	lr, lr
 8028cce:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028cd2:	fb0e f101 	mul.w	r1, lr, r1
 8028cd6:	b280      	uxth	r0, r0
 8028cd8:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8028cdc:	1a12      	subs	r2, r2, r0
 8028cde:	b292      	uxth	r2, r2
 8028ce0:	fb02 110c 	mla	r1, r2, ip, r1
 8028ce4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028ce6:	fb00 1105 	mla	r1, r0, r5, r1
 8028cea:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028cec:	fb08 1105 	mla	r1, r8, r5, r1
 8028cf0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028cf4:	2900      	cmp	r1, #0
 8028cf6:	f000 80f5 	beq.w	8028ee4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8028cfa:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8028cfe:	d019      	beq.n	8028d34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8028d00:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8028d04:	fb0c fa0a 	mul.w	sl, ip, sl
 8028d08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028d0c:	fb0c fc03 	mul.w	ip, ip, r3
 8028d10:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028d14:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028d18:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028d1c:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8028d20:	4453      	add	r3, sl
 8028d22:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028d26:	0a1b      	lsrs	r3, r3, #8
 8028d28:	0a3f      	lsrs	r7, r7, #8
 8028d2a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028d2e:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8028d32:	433b      	orrs	r3, r7
 8028d34:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028d36:	2dff      	cmp	r5, #255	@ 0xff
 8028d38:	d020      	beq.n	8028d7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8028d3a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028d3c:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028d40:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028d42:	436f      	muls	r7, r5
 8028d44:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028d46:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028d4a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028d4e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028d50:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028d54:	fb05 fa0a 	mul.w	sl, r5, sl
 8028d58:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028d5c:	44bc      	add	ip, r7
 8028d5e:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028d62:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028d66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028d6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028d6e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028d72:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028d76:	ea4c 050a 	orr.w	r5, ip, sl
 8028d7a:	950e      	str	r5, [sp, #56]	@ 0x38
 8028d7c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028d7e:	2dff      	cmp	r5, #255	@ 0xff
 8028d80:	d020      	beq.n	8028dc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8028d82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028d84:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028d88:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028d8a:	436f      	muls	r7, r5
 8028d8c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028d8e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028d92:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028d96:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028d98:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028d9c:	fb05 fa0a 	mul.w	sl, r5, sl
 8028da0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028da4:	44bc      	add	ip, r7
 8028da6:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028daa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028dae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028db2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028db6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028dba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028dbe:	ea4c 050a 	orr.w	r5, ip, sl
 8028dc2:	9509      	str	r5, [sp, #36]	@ 0x24
 8028dc4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028dc6:	2dff      	cmp	r5, #255	@ 0xff
 8028dc8:	d020      	beq.n	8028e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8028dca:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028dcc:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028dd0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028dd2:	436f      	muls	r7, r5
 8028dd4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028dd6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028dda:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028dde:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028de0:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028de4:	fb05 fa0a 	mul.w	sl, r5, sl
 8028de8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028dec:	44bc      	add	ip, r7
 8028dee:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028df2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028df6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028dfa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028dfe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028e02:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028e06:	ea4c 050a 	orr.w	r5, ip, sl
 8028e0a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8028e0c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028e0e:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8028e12:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028e16:	fb0e f707 	mul.w	r7, lr, r7
 8028e1a:	fb02 770c 	mla	r7, r2, ip, r7
 8028e1e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028e20:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028e24:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028e28:	fb00 770c 	mla	r7, r0, ip, r7
 8028e2c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028e2e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028e32:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028e34:	fb08 770c 	mla	r7, r8, ip, r7
 8028e38:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8028e3c:	fb0e fe0c 	mul.w	lr, lr, ip
 8028e40:	fb02 e303 	mla	r3, r2, r3, lr
 8028e44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028e46:	0a3f      	lsrs	r7, r7, #8
 8028e48:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8028e4c:	fb00 330a 	mla	r3, r0, sl, r3
 8028e50:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028e52:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8028e56:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8028e5a:	fb08 3c0c 	mla	ip, r8, ip, r3
 8028e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028e60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e64:	4359      	muls	r1, r3
 8028e66:	1c4b      	adds	r3, r1, #1
 8028e68:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028e6c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8028e70:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8028e74:	ea47 070c 	orr.w	r7, r7, ip
 8028e78:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028e7a:	0c3b      	lsrs	r3, r7, #16
 8028e7c:	f8b9 0000 	ldrh.w	r0, [r9]
 8028e80:	fb13 f305 	smulbb	r3, r3, r5
 8028e84:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8028e88:	b2ff      	uxtb	r7, r7
 8028e8a:	1202      	asrs	r2, r0, #8
 8028e8c:	fb17 f705 	smulbb	r7, r7, r5
 8028e90:	b2c9      	uxtb	r1, r1
 8028e92:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8028e96:	fb02 3201 	mla	r2, r2, r1, r3
 8028e9a:	10c3      	asrs	r3, r0, #3
 8028e9c:	00c0      	lsls	r0, r0, #3
 8028e9e:	fb1c fc05 	smulbb	ip, ip, r5
 8028ea2:	b2c0      	uxtb	r0, r0
 8028ea4:	fb00 7001 	mla	r0, r0, r1, r7
 8028ea8:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8028eac:	fb03 c301 	mla	r3, r3, r1, ip
 8028eb0:	b292      	uxth	r2, r2
 8028eb2:	b280      	uxth	r0, r0
 8028eb4:	1c51      	adds	r1, r2, #1
 8028eb6:	f100 0c01 	add.w	ip, r0, #1
 8028eba:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028ebe:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8028ec2:	b29b      	uxth	r3, r3
 8028ec4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028ec8:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8028ecc:	ea4c 0202 	orr.w	r2, ip, r2
 8028ed0:	f103 0c01 	add.w	ip, r3, #1
 8028ed4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8028ed8:	095b      	lsrs	r3, r3, #5
 8028eda:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028ede:	431a      	orrs	r2, r3
 8028ee0:	f8a9 2000 	strh.w	r2, [r9]
 8028ee4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028ee6:	f109 0902 	add.w	r9, r9, #2
 8028eea:	441c      	add	r4, r3
 8028eec:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028eee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028ef2:	441e      	add	r6, r3
 8028ef4:	e647      	b.n	8028b86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8028ef6:	2800      	cmp	r0, #0
 8028ef8:	f43f aedf 	beq.w	8028cba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028efc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8028f00:	9109      	str	r1, [sp, #36]	@ 0x24
 8028f02:	0e09      	lsrs	r1, r1, #24
 8028f04:	9112      	str	r1, [sp, #72]	@ 0x48
 8028f06:	e6d8      	b.n	8028cba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028f08:	b01d      	add	sp, #116	@ 0x74
 8028f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028f0e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8028f0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f12:	b085      	sub	sp, #20
 8028f14:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8028f18:	9102      	str	r1, [sp, #8]
 8028f1a:	fb04 7103 	mla	r1, r4, r3, r7
 8028f1e:	2c00      	cmp	r4, #0
 8028f20:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8028f24:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8028f28:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8028f2c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8028f30:	f2c0 810c 	blt.w	802914c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8028f34:	45a6      	cmp	lr, r4
 8028f36:	f340 8109 	ble.w	802914c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8028f3a:	2f00      	cmp	r7, #0
 8028f3c:	f2c0 8104 	blt.w	8029148 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8028f40:	42bb      	cmp	r3, r7
 8028f42:	f340 8101 	ble.w	8029148 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8028f46:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8028f4a:	1c7a      	adds	r2, r7, #1
 8028f4c:	f100 8101 	bmi.w	8029152 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8028f50:	4293      	cmp	r3, r2
 8028f52:	f340 80fe 	ble.w	8029152 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8028f56:	2e00      	cmp	r6, #0
 8028f58:	f000 80fd 	beq.w	8029156 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8028f5c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8028f60:	3401      	adds	r4, #1
 8028f62:	f100 80fc 	bmi.w	802915e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8028f66:	45a6      	cmp	lr, r4
 8028f68:	f340 80f9 	ble.w	802915e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8028f6c:	2800      	cmp	r0, #0
 8028f6e:	f000 80f9 	beq.w	8029164 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8028f72:	2f00      	cmp	r7, #0
 8028f74:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8028f78:	f2c0 80ef 	blt.w	802915a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8028f7c:	42bb      	cmp	r3, r7
 8028f7e:	f340 80ec 	ble.w	802915a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8028f82:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028f86:	3701      	adds	r7, #1
 8028f88:	f100 80ef 	bmi.w	802916a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8028f8c:	42bb      	cmp	r3, r7
 8028f8e:	f340 80ec 	ble.w	802916a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8028f92:	2e00      	cmp	r6, #0
 8028f94:	f000 80eb 	beq.w	802916e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8028f98:	6852      	ldr	r2, [r2, #4]
 8028f9a:	b2b6      	uxth	r6, r6
 8028f9c:	b280      	uxth	r0, r0
 8028f9e:	fb00 fe06 	mul.w	lr, r0, r6
 8028fa2:	0136      	lsls	r6, r6, #4
 8028fa4:	eba6 070e 	sub.w	r7, r6, lr
 8028fa8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8028fac:	b2bf      	uxth	r7, r7
 8028fae:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8028fb2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8028fb6:	fb07 f60a 	mul.w	r6, r7, sl
 8028fba:	b280      	uxth	r0, r0
 8028fbc:	1a1b      	subs	r3, r3, r0
 8028fbe:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8028fc2:	b29b      	uxth	r3, r3
 8028fc4:	fb0b 6603 	mla	r6, fp, r3, r6
 8028fc8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028fcc:	fb00 6609 	mla	r6, r0, r9, r6
 8028fd0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8028fd4:	fb0e 6608 	mla	r6, lr, r8, r6
 8028fd8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028fdc:	9600      	str	r6, [sp, #0]
 8028fde:	2e00      	cmp	r6, #0
 8028fe0:	f000 80af 	beq.w	8029142 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8028fe4:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028fe8:	fb0b fc0c 	mul.w	ip, fp, ip
 8028fec:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8028ff0:	fb0b f505 	mul.w	r5, fp, r5
 8028ff4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8028ff8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8028ffc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029000:	44dc      	add	ip, fp
 8029002:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029006:	9501      	str	r5, [sp, #4]
 8029008:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 802900c:	9503      	str	r5, [sp, #12]
 802900e:	9d01      	ldr	r5, [sp, #4]
 8029010:	9e02      	ldr	r6, [sp, #8]
 8029012:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8029016:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802901a:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802901e:	fb0a fc0c 	mul.w	ip, sl, ip
 8029022:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8029026:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802902a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802902e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029032:	4465      	add	r5, ip
 8029034:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029038:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802903c:	fb09 fc0c 	mul.w	ip, r9, ip
 8029040:	fb09 f904 	mul.w	r9, r9, r4
 8029044:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8029048:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802904c:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8029050:	fb08 f404 	mul.w	r4, r8, r4
 8029054:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029058:	fb08 f802 	mul.w	r8, r8, r2
 802905c:	0a2d      	lsrs	r5, r5, #8
 802905e:	0a22      	lsrs	r2, r4, #8
 8029060:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8029064:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029068:	437d      	muls	r5, r7
 802906a:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 802906e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8029072:	4414      	add	r4, r2
 8029074:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8029078:	fb0a fa01 	mul.w	sl, sl, r1
 802907c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8029080:	9a03      	ldr	r2, [sp, #12]
 8029082:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8029086:	fb02 5503 	mla	r5, r2, r3, r5
 802908a:	0a24      	lsrs	r4, r4, #8
 802908c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8029090:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8029094:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8029098:	fb04 540e 	mla	r4, r4, lr, r5
 802909c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80290a0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80290a4:	4461      	add	r1, ip
 80290a6:	0a09      	lsrs	r1, r1, #8
 80290a8:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80290ac:	fb01 4100 	mla	r1, r1, r0, r4
 80290b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80290b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80290b8:	fb07 f70a 	mul.w	r7, r7, sl
 80290bc:	0a09      	lsrs	r1, r1, #8
 80290be:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 80290c2:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 80290c6:	fb03 7101 	mla	r1, r3, r1, r7
 80290ca:	9b00      	ldr	r3, [sp, #0]
 80290cc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80290d0:	43da      	mvns	r2, r3
 80290d2:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80290d6:	fb0e 1e08 	mla	lr, lr, r8, r1
 80290da:	8836      	ldrh	r6, [r6, #0]
 80290dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80290e0:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 80290e4:	fb00 e101 	mla	r1, r0, r1, lr
 80290e8:	1233      	asrs	r3, r6, #8
 80290ea:	b2d2      	uxtb	r2, r2
 80290ec:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80290f0:	4353      	muls	r3, r2
 80290f2:	10f0      	asrs	r0, r6, #3
 80290f4:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80290f8:	4350      	muls	r0, r2
 80290fa:	0a09      	lsrs	r1, r1, #8
 80290fc:	00f6      	lsls	r6, r6, #3
 80290fe:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8029102:	b2f6      	uxtb	r6, r6
 8029104:	4321      	orrs	r1, r4
 8029106:	4356      	muls	r6, r2
 8029108:	1c5a      	adds	r2, r3, #1
 802910a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802910e:	0c0b      	lsrs	r3, r1, #16
 8029110:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029114:	1c42      	adds	r2, r0, #1
 8029116:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802911a:	0a0a      	lsrs	r2, r1, #8
 802911c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029120:	021b      	lsls	r3, r3, #8
 8029122:	00d2      	lsls	r2, r2, #3
 8029124:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029128:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802912c:	4313      	orrs	r3, r2
 802912e:	1c72      	adds	r2, r6, #1
 8029130:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8029134:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8029138:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802913c:	4319      	orrs	r1, r3
 802913e:	9b02      	ldr	r3, [sp, #8]
 8029140:	8019      	strh	r1, [r3, #0]
 8029142:	b005      	add	sp, #20
 8029144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029148:	2500      	movs	r5, #0
 802914a:	e6fe      	b.n	8028f4a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802914c:	2100      	movs	r1, #0
 802914e:	460d      	mov	r5, r1
 8029150:	e706      	b.n	8028f60 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8029152:	2100      	movs	r1, #0
 8029154:	e704      	b.n	8028f60 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8029156:	4631      	mov	r1, r6
 8029158:	e702      	b.n	8028f60 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802915a:	2400      	movs	r4, #0
 802915c:	e713      	b.n	8028f86 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802915e:	2200      	movs	r2, #0
 8029160:	4614      	mov	r4, r2
 8029162:	e71a      	b.n	8028f9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029164:	4602      	mov	r2, r0
 8029166:	4604      	mov	r4, r0
 8029168:	e717      	b.n	8028f9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802916a:	2200      	movs	r2, #0
 802916c:	e715      	b.n	8028f9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802916e:	4632      	mov	r2, r6
 8029170:	e713      	b.n	8028f9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08029174 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029178:	b09b      	sub	sp, #108	@ 0x6c
 802917a:	9218      	str	r2, [sp, #96]	@ 0x60
 802917c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802917e:	9019      	str	r0, [sp, #100]	@ 0x64
 8029180:	6850      	ldr	r0, [r2, #4]
 8029182:	9116      	str	r1, [sp, #88]	@ 0x58
 8029184:	9307      	str	r3, [sp, #28]
 8029186:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802918a:	fb00 1303 	mla	r3, r0, r3, r1
 802918e:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8029192:	6812      	ldr	r2, [r2, #0]
 8029194:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029198:	930a      	str	r3, [sp, #40]	@ 0x28
 802919a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802919c:	681b      	ldr	r3, [r3, #0]
 802919e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80291a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80291a2:	2b00      	cmp	r3, #0
 80291a4:	dc03      	bgt.n	80291ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80291a6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80291a8:	2b00      	cmp	r3, #0
 80291aa:	f340 8387 	ble.w	80298bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80291ae:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80291b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80291b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80291b8:	1e48      	subs	r0, r1, #1
 80291ba:	1e57      	subs	r7, r2, #1
 80291bc:	9b07      	ldr	r3, [sp, #28]
 80291be:	2b00      	cmp	r3, #0
 80291c0:	f340 8166 	ble.w	8029490 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80291c4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80291c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80291cc:	d406      	bmi.n	80291dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80291ce:	4584      	cmp	ip, r0
 80291d0:	da04      	bge.n	80291dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80291d2:	2b00      	cmp	r3, #0
 80291d4:	db02      	blt.n	80291dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80291d6:	42bb      	cmp	r3, r7
 80291d8:	f2c0 815b 	blt.w	8029492 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80291dc:	f11c 0c01 	adds.w	ip, ip, #1
 80291e0:	f100 814b 	bmi.w	802947a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80291e4:	4561      	cmp	r1, ip
 80291e6:	f2c0 8148 	blt.w	802947a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80291ea:	3301      	adds	r3, #1
 80291ec:	f100 8145 	bmi.w	802947a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80291f0:	429a      	cmp	r2, r3
 80291f2:	f2c0 8142 	blt.w	802947a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80291f6:	9b07      	ldr	r3, [sp, #28]
 80291f8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80291fa:	9317      	str	r3, [sp, #92]	@ 0x5c
 80291fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80291fe:	2b00      	cmp	r3, #0
 8029200:	f340 8165 	ble.w	80294ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8029204:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8029206:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029208:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802920c:	1422      	asrs	r2, r4, #16
 802920e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029212:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029216:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802921a:	689b      	ldr	r3, [r3, #8]
 802921c:	f100 81d5 	bmi.w	80295ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029220:	f103 38ff 	add.w	r8, r3, #4294967295
 8029224:	4542      	cmp	r2, r8
 8029226:	f280 81d0 	bge.w	80295ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802922a:	f1bc 0f00 	cmp.w	ip, #0
 802922e:	f2c0 81cc 	blt.w	80295ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029232:	f10e 38ff 	add.w	r8, lr, #4294967295
 8029236:	45c4      	cmp	ip, r8
 8029238:	f280 81c7 	bge.w	80295ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802923c:	b21b      	sxth	r3, r3
 802923e:	fb0c 2203 	mla	r2, ip, r3, r2
 8029242:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029244:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029248:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802924c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029250:	2900      	cmp	r1, #0
 8029252:	f000 8182 	beq.w	802955a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8029256:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802925a:	950b      	str	r5, [sp, #44]	@ 0x2c
 802925c:	0e2d      	lsrs	r5, r5, #24
 802925e:	9512      	str	r5, [sp, #72]	@ 0x48
 8029260:	b180      	cbz	r0, 8029284 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029262:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8029266:	3b01      	subs	r3, #1
 8029268:	009b      	lsls	r3, r3, #2
 802926a:	3304      	adds	r3, #4
 802926c:	eb08 0c03 	add.w	ip, r8, r3
 8029270:	f858 3003 	ldr.w	r3, [r8, r3]
 8029274:	9308      	str	r3, [sp, #32]
 8029276:	0e1b      	lsrs	r3, r3, #24
 8029278:	9310      	str	r3, [sp, #64]	@ 0x40
 802927a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802927e:	930c      	str	r3, [sp, #48]	@ 0x30
 8029280:	0e1b      	lsrs	r3, r3, #24
 8029282:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029284:	b289      	uxth	r1, r1
 8029286:	b280      	uxth	r0, r0
 8029288:	fb01 f900 	mul.w	r9, r1, r0
 802928c:	0109      	lsls	r1, r1, #4
 802928e:	eba1 0809 	sub.w	r8, r1, r9
 8029292:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029294:	fa1f f888 	uxth.w	r8, r8
 8029298:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802929c:	fb08 f303 	mul.w	r3, r8, r3
 80292a0:	b280      	uxth	r0, r0
 80292a2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80292a6:	1a09      	subs	r1, r1, r0
 80292a8:	b289      	uxth	r1, r1
 80292aa:	fb01 330e 	mla	r3, r1, lr, r3
 80292ae:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80292b0:	fb00 3305 	mla	r3, r0, r5, r3
 80292b4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80292b6:	fb09 3305 	mla	r3, r9, r5, r3
 80292ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80292be:	2b00      	cmp	r3, #0
 80292c0:	f000 80d2 	beq.w	8029468 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80292c4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80292c8:	d01b      	beq.n	8029302 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80292ca:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 80292ce:	fb0e fa0a 	mul.w	sl, lr, sl
 80292d2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80292d6:	fb0e fe02 	mul.w	lr, lr, r2
 80292da:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80292de:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80292e2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80292e6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80292ea:	4452      	add	r2, sl
 80292ec:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80292f0:	0a12      	lsrs	r2, r2, #8
 80292f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80292f6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80292fa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80292fe:	ea42 020c 	orr.w	r2, r2, ip
 8029302:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029304:	2dff      	cmp	r5, #255	@ 0xff
 8029306:	d021      	beq.n	802934c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8029308:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802930a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802930e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029310:	fb05 fb0b 	mul.w	fp, r5, fp
 8029314:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029316:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802931a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802931e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029320:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029324:	fb05 fa0a 	mul.w	sl, r5, sl
 8029328:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802932c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029330:	44de      	add	lr, fp
 8029332:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029336:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802933a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802933e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029342:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029346:	ea4e 050a 	orr.w	r5, lr, sl
 802934a:	950b      	str	r5, [sp, #44]	@ 0x2c
 802934c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802934e:	2dff      	cmp	r5, #255	@ 0xff
 8029350:	d021      	beq.n	8029396 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8029352:	9d08      	ldr	r5, [sp, #32]
 8029354:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029358:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802935a:	fb05 fb0b 	mul.w	fp, r5, fp
 802935e:	9d08      	ldr	r5, [sp, #32]
 8029360:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8029364:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029366:	fb05 fa0e 	mul.w	sl, r5, lr
 802936a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802936e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029372:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029376:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802937a:	44de      	add	lr, fp
 802937c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029380:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029384:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029388:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802938c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029390:	ea4e 050a 	orr.w	r5, lr, sl
 8029394:	9508      	str	r5, [sp, #32]
 8029396:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029398:	2dff      	cmp	r5, #255	@ 0xff
 802939a:	d021      	beq.n	80293e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802939c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802939e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80293a2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80293a4:	fb05 fb0b 	mul.w	fp, r5, fp
 80293a8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80293aa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80293ae:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80293b2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80293b4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80293b8:	fb05 fa0a 	mul.w	sl, r5, sl
 80293bc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80293c0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80293c4:	44de      	add	lr, fp
 80293c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80293ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80293ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80293d2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80293d6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80293da:	ea4e 050a 	orr.w	r5, lr, sl
 80293de:	950c      	str	r5, [sp, #48]	@ 0x30
 80293e0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80293e2:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80293e6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80293ea:	fb08 fc0c 	mul.w	ip, r8, ip
 80293ee:	fb01 cc0e 	mla	ip, r1, lr, ip
 80293f2:	9d08      	ldr	r5, [sp, #32]
 80293f4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80293f8:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80293fc:	fb00 cc0e 	mla	ip, r0, lr, ip
 8029400:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029402:	2bff      	cmp	r3, #255	@ 0xff
 8029404:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8029408:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802940a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802940e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8029412:	fb08 f80e 	mul.w	r8, r8, lr
 8029416:	fb01 8202 	mla	r2, r1, r2, r8
 802941a:	9908      	ldr	r1, [sp, #32]
 802941c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029420:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8029424:	fb00 220a 	mla	r2, r0, sl, r2
 8029428:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802942a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802942e:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8029432:	fb09 2900 	mla	r9, r9, r0, r2
 8029436:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802943a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802943e:	ea4c 0c09 	orr.w	ip, ip, r9
 8029442:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8029446:	f040 8091 	bne.w	802956c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802944a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802944e:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8029452:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029456:	f022 0207 	bic.w	r2, r2, #7
 802945a:	431a      	orrs	r2, r3
 802945c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8029460:	ea4c 0c02 	orr.w	ip, ip, r2
 8029464:	f8a7 c000 	strh.w	ip, [r7]
 8029468:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802946a:	3702      	adds	r7, #2
 802946c:	441c      	add	r4, r3
 802946e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029470:	441e      	add	r6, r3
 8029472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029474:	3b01      	subs	r3, #1
 8029476:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029478:	e6c0      	b.n	80291fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802947a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802947c:	441c      	add	r4, r3
 802947e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029480:	441e      	add	r6, r3
 8029482:	9b07      	ldr	r3, [sp, #28]
 8029484:	3b01      	subs	r3, #1
 8029486:	9307      	str	r3, [sp, #28]
 8029488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802948a:	3302      	adds	r3, #2
 802948c:	930a      	str	r3, [sp, #40]	@ 0x28
 802948e:	e695      	b.n	80291bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029490:	d024      	beq.n	80294dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8029492:	9b07      	ldr	r3, [sp, #28]
 8029494:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8029496:	3b01      	subs	r3, #1
 8029498:	fb00 4003 	mla	r0, r0, r3, r4
 802949c:	1400      	asrs	r0, r0, #16
 802949e:	f53f aeaa 	bmi.w	80291f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80294a2:	3901      	subs	r1, #1
 80294a4:	4288      	cmp	r0, r1
 80294a6:	f6bf aea6 	bge.w	80291f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80294aa:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80294ac:	fb01 6303 	mla	r3, r1, r3, r6
 80294b0:	141b      	asrs	r3, r3, #16
 80294b2:	f53f aea0 	bmi.w	80291f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80294b6:	3a01      	subs	r2, #1
 80294b8:	4293      	cmp	r3, r2
 80294ba:	f6bf ae9c 	bge.w	80291f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80294be:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80294c2:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80294c6:	f1bb 0f00 	cmp.w	fp, #0
 80294ca:	f300 809a 	bgt.w	8029602 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80294ce:	9b07      	ldr	r3, [sp, #28]
 80294d0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80294d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80294d6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80294da:	930a      	str	r3, [sp, #40]	@ 0x28
 80294dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80294de:	2b00      	cmp	r3, #0
 80294e0:	f340 81ec 	ble.w	80298bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80294e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80294e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80294ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80294f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80294f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80294f8:	eef0 6a62 	vmov.f32	s13, s5
 80294fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029500:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029504:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029508:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802950c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029510:	ee16 4a90 	vmov	r4, s13
 8029514:	eef0 6a43 	vmov.f32	s13, s6
 8029518:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802951c:	ee12 2a90 	vmov	r2, s5
 8029520:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029524:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029526:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802952a:	fb92 f3f3 	sdiv	r3, r2, r3
 802952e:	ee13 2a10 	vmov	r2, s6
 8029532:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029534:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029536:	ee16 6a90 	vmov	r6, s13
 802953a:	fb92 f3f3 	sdiv	r3, r2, r3
 802953e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029540:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029542:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8029544:	3b01      	subs	r3, #1
 8029546:	9316      	str	r3, [sp, #88]	@ 0x58
 8029548:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802954a:	bf08      	it	eq
 802954c:	4613      	moveq	r3, r2
 802954e:	eeb0 3a67 	vmov.f32	s6, s15
 8029552:	9307      	str	r3, [sp, #28]
 8029554:	eef0 2a47 	vmov.f32	s5, s14
 8029558:	e622      	b.n	80291a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802955a:	2800      	cmp	r0, #0
 802955c:	f43f ae92 	beq.w	8029284 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029560:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029564:	9308      	str	r3, [sp, #32]
 8029566:	0e1b      	lsrs	r3, r3, #24
 8029568:	9310      	str	r3, [sp, #64]	@ 0x40
 802956a:	e68b      	b.n	8029284 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802956c:	43db      	mvns	r3, r3
 802956e:	8839      	ldrh	r1, [r7, #0]
 8029570:	fa5f f883 	uxtb.w	r8, r3
 8029574:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8029578:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802957c:	fb0e fe08 	mul.w	lr, lr, r8
 8029580:	10c8      	asrs	r0, r1, #3
 8029582:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029586:	fb00 f008 	mul.w	r0, r0, r8
 802958a:	00cb      	lsls	r3, r1, #3
 802958c:	f10e 0101 	add.w	r1, lr, #1
 8029590:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8029594:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8029598:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802959c:	b2db      	uxtb	r3, r3
 802959e:	f100 0e01 	add.w	lr, r0, #1
 80295a2:	fb03 f308 	mul.w	r3, r3, r8
 80295a6:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80295aa:	4dc6      	ldr	r5, [pc, #792]	@ (80298c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80295ac:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80295b0:	b2c9      	uxtb	r1, r1
 80295b2:	00d2      	lsls	r2, r2, #3
 80295b4:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80295b8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80295bc:	430a      	orrs	r2, r1
 80295be:	1c59      	adds	r1, r3, #1
 80295c0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80295c4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80295c8:	e748      	b.n	802945c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80295ca:	f112 0801 	adds.w	r8, r2, #1
 80295ce:	f53f af4b 	bmi.w	8029468 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80295d2:	4543      	cmp	r3, r8
 80295d4:	f6ff af48 	blt.w	8029468 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80295d8:	f11c 0801 	adds.w	r8, ip, #1
 80295dc:	f53f af44 	bmi.w	8029468 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80295e0:	45c6      	cmp	lr, r8
 80295e2:	f6ff af41 	blt.w	8029468 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80295e6:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80295ea:	fa0f f28e 	sxth.w	r2, lr
 80295ee:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80295f2:	9200      	str	r2, [sp, #0]
 80295f4:	b21b      	sxth	r3, r3
 80295f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80295f8:	4639      	mov	r1, r7
 80295fa:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80295fc:	f7ff fc87 	bl	8028f0e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8029600:	e732      	b.n	8029468 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029602:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029604:	1421      	asrs	r1, r4, #16
 8029606:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802960a:	1433      	asrs	r3, r6, #16
 802960c:	fb07 1303 	mla	r3, r7, r3, r1
 8029610:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029612:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8029614:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029618:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802961c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029620:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029624:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029628:	2a00      	cmp	r2, #0
 802962a:	f000 8108 	beq.w	802983e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802962e:	684d      	ldr	r5, [r1, #4]
 8029630:	950d      	str	r5, [sp, #52]	@ 0x34
 8029632:	0e2d      	lsrs	r5, r5, #24
 8029634:	9514      	str	r5, [sp, #80]	@ 0x50
 8029636:	b178      	cbz	r0, 8029658 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029638:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 802963c:	3f01      	subs	r7, #1
 802963e:	00bf      	lsls	r7, r7, #2
 8029640:	3704      	adds	r7, #4
 8029642:	eb01 0e07 	add.w	lr, r1, r7
 8029646:	59c9      	ldr	r1, [r1, r7]
 8029648:	9109      	str	r1, [sp, #36]	@ 0x24
 802964a:	0e09      	lsrs	r1, r1, #24
 802964c:	9111      	str	r1, [sp, #68]	@ 0x44
 802964e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029652:	910e      	str	r1, [sp, #56]	@ 0x38
 8029654:	0e09      	lsrs	r1, r1, #24
 8029656:	9115      	str	r1, [sp, #84]	@ 0x54
 8029658:	b292      	uxth	r2, r2
 802965a:	b280      	uxth	r0, r0
 802965c:	fb02 f900 	mul.w	r9, r2, r0
 8029660:	0112      	lsls	r2, r2, #4
 8029662:	eba2 0e09 	sub.w	lr, r2, r9
 8029666:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 802966a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802966c:	fa1f fe8e 	uxth.w	lr, lr
 8029670:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8029674:	fb0e f202 	mul.w	r2, lr, r2
 8029678:	b280      	uxth	r0, r0
 802967a:	1a09      	subs	r1, r1, r0
 802967c:	b289      	uxth	r1, r1
 802967e:	fb01 220c 	mla	r2, r1, ip, r2
 8029682:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029684:	fb00 2205 	mla	r2, r0, r5, r2
 8029688:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802968a:	fb09 2205 	mla	r2, r9, r5, r2
 802968e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029692:	2a00      	cmp	r2, #0
 8029694:	f000 80ca 	beq.w	802982c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8029698:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802969c:	d019      	beq.n	80296d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802969e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80296a2:	fb0c fa0a 	mul.w	sl, ip, sl
 80296a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80296aa:	fb0c fc03 	mul.w	ip, ip, r3
 80296ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80296b2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80296b6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80296ba:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80296be:	4453      	add	r3, sl
 80296c0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80296c4:	0a1b      	lsrs	r3, r3, #8
 80296c6:	0a3f      	lsrs	r7, r7, #8
 80296c8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80296cc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80296d0:	433b      	orrs	r3, r7
 80296d2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80296d4:	2dff      	cmp	r5, #255	@ 0xff
 80296d6:	d020      	beq.n	802971a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 80296d8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80296da:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80296de:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80296e0:	436f      	muls	r7, r5
 80296e2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80296e4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80296e8:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80296ec:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80296ee:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80296f2:	fb05 fa0a 	mul.w	sl, r5, sl
 80296f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80296fa:	44bc      	add	ip, r7
 80296fc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029700:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029704:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029708:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802970c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029710:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029714:	ea4c 050a 	orr.w	r5, ip, sl
 8029718:	950d      	str	r5, [sp, #52]	@ 0x34
 802971a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802971c:	2dff      	cmp	r5, #255	@ 0xff
 802971e:	d020      	beq.n	8029762 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8029720:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029722:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029726:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029728:	436f      	muls	r7, r5
 802972a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802972c:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029730:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029732:	fb05 fa0c 	mul.w	sl, r5, ip
 8029736:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802973a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802973e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029742:	44bc      	add	ip, r7
 8029744:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029748:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802974c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029750:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029754:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029758:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802975c:	ea4c 050a 	orr.w	r5, ip, sl
 8029760:	9509      	str	r5, [sp, #36]	@ 0x24
 8029762:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029764:	2dff      	cmp	r5, #255	@ 0xff
 8029766:	d020      	beq.n	80297aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8029768:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802976a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802976e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029770:	436f      	muls	r7, r5
 8029772:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029774:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029778:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802977c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802977e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029782:	fb05 fa0a 	mul.w	sl, r5, sl
 8029786:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802978a:	44bc      	add	ip, r7
 802978c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029790:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029794:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029798:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802979c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80297a0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80297a4:	ea4c 050a 	orr.w	r5, ip, sl
 80297a8:	950e      	str	r5, [sp, #56]	@ 0x38
 80297aa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80297ac:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80297b0:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80297b4:	fb0e f707 	mul.w	r7, lr, r7
 80297b8:	fb01 770c 	mla	r7, r1, ip, r7
 80297bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80297be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80297c2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80297c6:	fb00 770c 	mla	r7, r0, ip, r7
 80297ca:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80297cc:	2aff      	cmp	r2, #255	@ 0xff
 80297ce:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80297d2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80297d4:	fb09 770c 	mla	r7, r9, ip, r7
 80297d8:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 80297dc:	fb0e fe0c 	mul.w	lr, lr, ip
 80297e0:	fb01 e303 	mla	r3, r1, r3, lr
 80297e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80297e6:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80297ea:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80297ee:	fb00 330a 	mla	r3, r0, sl, r3
 80297f2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80297f4:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80297f8:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 80297fc:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029800:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029804:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029808:	ea47 070c 	orr.w	r7, r7, ip
 802980c:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8029810:	d11e      	bne.n	8029850 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029812:	097a      	lsrs	r2, r7, #5
 8029814:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8029818:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802981c:	f023 0307 	bic.w	r3, r3, #7
 8029820:	4313      	orrs	r3, r2
 8029822:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029826:	431f      	orrs	r7, r3
 8029828:	f8a8 7000 	strh.w	r7, [r8]
 802982c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802982e:	f108 0802 	add.w	r8, r8, #2
 8029832:	441c      	add	r4, r3
 8029834:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029836:	f10b 3bff 	add.w	fp, fp, #4294967295
 802983a:	441e      	add	r6, r3
 802983c:	e643      	b.n	80294c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802983e:	2800      	cmp	r0, #0
 8029840:	f43f af0a 	beq.w	8029658 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029844:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8029848:	9109      	str	r1, [sp, #36]	@ 0x24
 802984a:	0e09      	lsrs	r1, r1, #24
 802984c:	9111      	str	r1, [sp, #68]	@ 0x44
 802984e:	e703      	b.n	8029658 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029850:	43d2      	mvns	r2, r2
 8029852:	f8b8 1000 	ldrh.w	r1, [r8]
 8029856:	fa5f fe82 	uxtb.w	lr, r2
 802985a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802985e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8029862:	fb0c fc0e 	mul.w	ip, ip, lr
 8029866:	10c8      	asrs	r0, r1, #3
 8029868:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802986c:	fb00 f00e 	mul.w	r0, r0, lr
 8029870:	00ca      	lsls	r2, r1, #3
 8029872:	f10c 0101 	add.w	r1, ip, #1
 8029876:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802987a:	b2d2      	uxtb	r2, r2
 802987c:	0c39      	lsrs	r1, r7, #16
 802987e:	fb02 f20e 	mul.w	r2, r2, lr
 8029882:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029886:	490f      	ldr	r1, [pc, #60]	@ (80298c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8029888:	fa5f fc8c 	uxtb.w	ip, ip
 802988c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8029890:	1c41      	adds	r1, r0, #1
 8029892:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029896:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802989a:	1c51      	adds	r1, r2, #1
 802989c:	00c0      	lsls	r0, r0, #3
 802989e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80298a2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80298a6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80298aa:	ea4c 0c00 	orr.w	ip, ip, r0
 80298ae:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80298b2:	ea47 0c0c 	orr.w	ip, r7, ip
 80298b6:	f8a8 c000 	strh.w	ip, [r8]
 80298ba:	e7b7      	b.n	802982c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80298bc:	b01b      	add	sp, #108	@ 0x6c
 80298be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80298c2:	bf00      	nop
 80298c4:	fffff800 	.word	0xfffff800

080298c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80298c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80298cc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 80298d0:	2d00      	cmp	r5, #0
 80298d2:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80298d6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80298da:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 80298de:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 80298e2:	fb05 0e03 	mla	lr, r5, r3, r0
 80298e6:	f2c0 808c 	blt.w	8029a02 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80298ea:	45a9      	cmp	r9, r5
 80298ec:	f340 8089 	ble.w	8029a02 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80298f0:	2800      	cmp	r0, #0
 80298f2:	f2c0 8084 	blt.w	80299fe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80298f6:	4580      	cmp	r8, r0
 80298f8:	f340 8081 	ble.w	80299fe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80298fc:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8029900:	5d16      	ldrb	r6, [r2, r4]
 8029902:	f01e 0f01 	tst.w	lr, #1
 8029906:	bf0c      	ite	eq
 8029908:	f006 060f 	andeq.w	r6, r6, #15
 802990c:	1136      	asrne	r6, r6, #4
 802990e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029912:	b2f6      	uxtb	r6, r6
 8029914:	1c44      	adds	r4, r0, #1
 8029916:	d477      	bmi.n	8029a08 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8029918:	45a0      	cmp	r8, r4
 802991a:	dd75      	ble.n	8029a08 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802991c:	2f00      	cmp	r7, #0
 802991e:	d075      	beq.n	8029a0c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8029920:	f10e 0a01 	add.w	sl, lr, #1
 8029924:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8029928:	5d14      	ldrb	r4, [r2, r4]
 802992a:	f01a 0f01 	tst.w	sl, #1
 802992e:	bf0c      	ite	eq
 8029930:	f004 040f 	andeq.w	r4, r4, #15
 8029934:	1124      	asrne	r4, r4, #4
 8029936:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802993a:	b2e4      	uxtb	r4, r4
 802993c:	3501      	adds	r5, #1
 802993e:	d469      	bmi.n	8029a14 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029940:	45a9      	cmp	r9, r5
 8029942:	dd67      	ble.n	8029a14 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029944:	f1bc 0f00 	cmp.w	ip, #0
 8029948:	d067      	beq.n	8029a1a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802994a:	2800      	cmp	r0, #0
 802994c:	db60      	blt.n	8029a10 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802994e:	4580      	cmp	r8, r0
 8029950:	dd5e      	ble.n	8029a10 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029952:	eb03 090e 	add.w	r9, r3, lr
 8029956:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802995a:	5d55      	ldrb	r5, [r2, r5]
 802995c:	f019 0f01 	tst.w	r9, #1
 8029960:	bf0c      	ite	eq
 8029962:	f005 050f 	andeq.w	r5, r5, #15
 8029966:	112d      	asrne	r5, r5, #4
 8029968:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802996c:	b2ed      	uxtb	r5, r5
 802996e:	3001      	adds	r0, #1
 8029970:	d456      	bmi.n	8029a20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029972:	4580      	cmp	r8, r0
 8029974:	dd54      	ble.n	8029a20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029976:	2f00      	cmp	r7, #0
 8029978:	d054      	beq.n	8029a24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802997a:	3301      	adds	r3, #1
 802997c:	449e      	add	lr, r3
 802997e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029982:	5cd0      	ldrb	r0, [r2, r3]
 8029984:	f01e 0f01 	tst.w	lr, #1
 8029988:	bf0c      	ite	eq
 802998a:	f000 000f 	andeq.w	r0, r0, #15
 802998e:	1100      	asrne	r0, r0, #4
 8029990:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029994:	b2c3      	uxtb	r3, r0
 8029996:	b2ba      	uxth	r2, r7
 8029998:	fa1f fc8c 	uxth.w	ip, ip
 802999c:	fb02 f00c 	mul.w	r0, r2, ip
 80299a0:	0112      	lsls	r2, r2, #4
 80299a2:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80299a6:	1a12      	subs	r2, r2, r0
 80299a8:	b292      	uxth	r2, r2
 80299aa:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80299ae:	4362      	muls	r2, r4
 80299b0:	fa1f fc8c 	uxth.w	ip, ip
 80299b4:	eba7 070c 	sub.w	r7, r7, ip
 80299b8:	b2bf      	uxth	r7, r7
 80299ba:	fb06 2207 	mla	r2, r6, r7, r2
 80299be:	fb0c 2505 	mla	r5, ip, r5, r2
 80299c2:	fb00 5303 	mla	r3, r0, r3, r5
 80299c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80299ca:	b1b3      	cbz	r3, 80299fa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80299cc:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 80299d0:	435a      	muls	r2, r3
 80299d2:	1c53      	adds	r3, r2, #1
 80299d4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80299d8:	4a2d      	ldr	r2, [pc, #180]	@ (8029a90 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80299da:	121b      	asrs	r3, r3, #8
 80299dc:	6812      	ldr	r2, [r2, #0]
 80299de:	2bff      	cmp	r3, #255	@ 0xff
 80299e0:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80299e4:	d120      	bne.n	8029a28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 80299e6:	4b2b      	ldr	r3, [pc, #172]	@ (8029a94 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80299e8:	0950      	lsrs	r0, r2, #5
 80299ea:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80299ee:	4033      	ands	r3, r6
 80299f0:	4318      	orrs	r0, r3
 80299f2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80299f6:	4302      	orrs	r2, r0
 80299f8:	800a      	strh	r2, [r1, #0]
 80299fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80299fe:	2600      	movs	r6, #0
 8029a00:	e788      	b.n	8029914 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8029a02:	2400      	movs	r4, #0
 8029a04:	4626      	mov	r6, r4
 8029a06:	e799      	b.n	802993c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029a08:	2400      	movs	r4, #0
 8029a0a:	e797      	b.n	802993c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029a0c:	463c      	mov	r4, r7
 8029a0e:	e795      	b.n	802993c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029a10:	2500      	movs	r5, #0
 8029a12:	e7ac      	b.n	802996e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8029a14:	2300      	movs	r3, #0
 8029a16:	461d      	mov	r5, r3
 8029a18:	e7bd      	b.n	8029996 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029a1a:	4663      	mov	r3, ip
 8029a1c:	4665      	mov	r5, ip
 8029a1e:	e7ba      	b.n	8029996 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029a20:	2300      	movs	r3, #0
 8029a22:	e7b8      	b.n	8029996 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029a24:	463b      	mov	r3, r7
 8029a26:	e7b6      	b.n	8029996 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029a28:	b29f      	uxth	r7, r3
 8029a2a:	43db      	mvns	r3, r3
 8029a2c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029a30:	880d      	ldrh	r5, [r1, #0]
 8029a32:	fb10 f007 	smulbb	r0, r0, r7
 8029a36:	b2f6      	uxtb	r6, r6
 8029a38:	b2d2      	uxtb	r2, r2
 8029a3a:	122c      	asrs	r4, r5, #8
 8029a3c:	fb12 f207 	smulbb	r2, r2, r7
 8029a40:	fb16 f607 	smulbb	r6, r6, r7
 8029a44:	b2db      	uxtb	r3, r3
 8029a46:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8029a4a:	fb04 0403 	mla	r4, r4, r3, r0
 8029a4e:	10e8      	asrs	r0, r5, #3
 8029a50:	00ed      	lsls	r5, r5, #3
 8029a52:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029a56:	b2ed      	uxtb	r5, r5
 8029a58:	fb00 6603 	mla	r6, r0, r3, r6
 8029a5c:	fb05 2303 	mla	r3, r5, r3, r2
 8029a60:	b2a4      	uxth	r4, r4
 8029a62:	b29a      	uxth	r2, r3
 8029a64:	1c63      	adds	r3, r4, #1
 8029a66:	b2b0      	uxth	r0, r6
 8029a68:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029a6c:	1c53      	adds	r3, r2, #1
 8029a6e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029a72:	1c42      	adds	r2, r0, #1
 8029a74:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029a78:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8029a7c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029a80:	0940      	lsrs	r0, r0, #5
 8029a82:	4323      	orrs	r3, r4
 8029a84:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029a88:	4303      	orrs	r3, r0
 8029a8a:	800b      	strh	r3, [r1, #0]
 8029a8c:	e7b5      	b.n	80299fa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029a8e:	bf00      	nop
 8029a90:	2005ba90 	.word	0x2005ba90
 8029a94:	00fff800 	.word	0x00fff800

08029a98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a9c:	b097      	sub	sp, #92	@ 0x5c
 8029a9e:	9214      	str	r2, [sp, #80]	@ 0x50
 8029aa0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8029aa2:	9015      	str	r0, [sp, #84]	@ 0x54
 8029aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8029aa6:	6850      	ldr	r0, [r2, #4]
 8029aa8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8029aac:	910d      	str	r1, [sp, #52]	@ 0x34
 8029aae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029ab0:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8029ab4:	fb00 1303 	mla	r3, r0, r3, r1
 8029ab8:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 8029abc:	6812      	ldr	r2, [r2, #0]
 8029abe:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029ac2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029ac4:	689b      	ldr	r3, [r3, #8]
 8029ac6:	3301      	adds	r3, #1
 8029ac8:	f023 0301 	bic.w	r3, r3, #1
 8029acc:	930a      	str	r3, [sp, #40]	@ 0x28
 8029ace:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029ad0:	681f      	ldr	r7, [r3, #0]
 8029ad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029ad4:	2b00      	cmp	r3, #0
 8029ad6:	dc03      	bgt.n	8029ae0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029ad8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029ada:	2b00      	cmp	r3, #0
 8029adc:	f340 8287 	ble.w	8029fee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8029ae0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029ae2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029ae6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029aea:	1e48      	subs	r0, r1, #1
 8029aec:	f102 3cff 	add.w	ip, r2, #4294967295
 8029af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029af2:	2b00      	cmp	r3, #0
 8029af4:	f340 80c3 	ble.w	8029c7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029af8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029afc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029b00:	d406      	bmi.n	8029b10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029b02:	4586      	cmp	lr, r0
 8029b04:	da04      	bge.n	8029b10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029b06:	2b00      	cmp	r3, #0
 8029b08:	db02      	blt.n	8029b10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029b0a:	4563      	cmp	r3, ip
 8029b0c:	f2c0 80b8 	blt.w	8029c80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8029b10:	f11e 0e01 	adds.w	lr, lr, #1
 8029b14:	f100 80a9 	bmi.w	8029c6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029b18:	4571      	cmp	r1, lr
 8029b1a:	f2c0 80a6 	blt.w	8029c6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029b1e:	3301      	adds	r3, #1
 8029b20:	f100 80a3 	bmi.w	8029c6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029b24:	429a      	cmp	r2, r3
 8029b26:	f2c0 80a0 	blt.w	8029c6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029b2a:	46c8      	mov	r8, r9
 8029b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b2e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8029b32:	930e      	str	r3, [sp, #56]	@ 0x38
 8029b34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029b36:	2b00      	cmp	r3, #0
 8029b38:	f340 80c2 	ble.w	8029cc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8029b3c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029b3e:	1430      	asrs	r0, r6, #16
 8029b40:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029b44:	1423      	asrs	r3, r4, #16
 8029b46:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029b4a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029b4e:	f100 814d 	bmi.w	8029dec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029b52:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029b56:	455b      	cmp	r3, fp
 8029b58:	f280 8148 	bge.w	8029dec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029b5c:	2800      	cmp	r0, #0
 8029b5e:	f2c0 8145 	blt.w	8029dec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029b62:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029b66:	4558      	cmp	r0, fp
 8029b68:	f280 8140 	bge.w	8029dec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029b6c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029b6e:	fb00 3305 	mla	r3, r0, r5, r3
 8029b72:	0858      	lsrs	r0, r3, #1
 8029b74:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029b78:	07dd      	lsls	r5, r3, #31
 8029b7a:	bf54      	ite	pl
 8029b7c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029b80:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029b84:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029b88:	fa5f fc8c 	uxtb.w	ip, ip
 8029b8c:	2a00      	cmp	r2, #0
 8029b8e:	f000 80db 	beq.w	8029d48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8029b92:	1c58      	adds	r0, r3, #1
 8029b94:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029b98:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029b9c:	07c0      	lsls	r0, r0, #31
 8029b9e:	bf54      	ite	pl
 8029ba0:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029ba4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029ba8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029bac:	fa5f f08e 	uxtb.w	r0, lr
 8029bb0:	9010      	str	r0, [sp, #64]	@ 0x40
 8029bb2:	b1c9      	cbz	r1, 8029be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8029bb4:	4453      	add	r3, sl
 8029bb6:	0858      	lsrs	r0, r3, #1
 8029bb8:	5c38      	ldrb	r0, [r7, r0]
 8029bba:	07dd      	lsls	r5, r3, #31
 8029bbc:	bf54      	ite	pl
 8029bbe:	f000 000f 	andpl.w	r0, r0, #15
 8029bc2:	1100      	asrmi	r0, r0, #4
 8029bc4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029bc8:	3301      	adds	r3, #1
 8029bca:	b2c0      	uxtb	r0, r0
 8029bcc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8029bce:	0858      	lsrs	r0, r3, #1
 8029bd0:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029bd4:	07dd      	lsls	r5, r3, #31
 8029bd6:	bf54      	ite	pl
 8029bd8:	f00e 030f 	andpl.w	r3, lr, #15
 8029bdc:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029be0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029be4:	b2db      	uxtb	r3, r3
 8029be6:	9311      	str	r3, [sp, #68]	@ 0x44
 8029be8:	b292      	uxth	r2, r2
 8029bea:	b289      	uxth	r1, r1
 8029bec:	fb02 f301 	mul.w	r3, r2, r1
 8029bf0:	0112      	lsls	r2, r2, #4
 8029bf2:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8029bf6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029bf8:	1ad2      	subs	r2, r2, r3
 8029bfa:	b292      	uxth	r2, r2
 8029bfc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029c00:	436a      	muls	r2, r5
 8029c02:	b289      	uxth	r1, r1
 8029c04:	1a40      	subs	r0, r0, r1
 8029c06:	b280      	uxth	r0, r0
 8029c08:	fb0c 2c00 	mla	ip, ip, r0, r2
 8029c0c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029c0e:	fb01 c102 	mla	r1, r1, r2, ip
 8029c12:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029c14:	fb03 1302 	mla	r3, r3, r2, r1
 8029c18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029c1c:	b1db      	cbz	r3, 8029c56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029c1e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029c20:	4353      	muls	r3, r2
 8029c22:	1c5a      	adds	r2, r3, #1
 8029c24:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029c28:	4ac6      	ldr	r2, [pc, #792]	@ (8029f44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8029c2a:	121b      	asrs	r3, r3, #8
 8029c2c:	6812      	ldr	r2, [r2, #0]
 8029c2e:	2bff      	cmp	r3, #255	@ 0xff
 8029c30:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029c34:	f040 8099 	bne.w	8029d6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8029c38:	0953      	lsrs	r3, r2, #5
 8029c3a:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8029c3e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029c42:	f02c 0c07 	bic.w	ip, ip, #7
 8029c46:	ea43 0c0c 	orr.w	ip, r3, ip
 8029c4a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029c4e:	ea4c 0202 	orr.w	r2, ip, r2
 8029c52:	f8a8 2000 	strh.w	r2, [r8]
 8029c56:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029c58:	f108 0802 	add.w	r8, r8, #2
 8029c5c:	441c      	add	r4, r3
 8029c5e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029c60:	441e      	add	r6, r3
 8029c62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029c64:	3b01      	subs	r3, #1
 8029c66:	930e      	str	r3, [sp, #56]	@ 0x38
 8029c68:	e764      	b.n	8029b34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029c6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029c6c:	f109 0902 	add.w	r9, r9, #2
 8029c70:	441c      	add	r4, r3
 8029c72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029c74:	441e      	add	r6, r3
 8029c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c78:	3b01      	subs	r3, #1
 8029c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8029c7c:	e738      	b.n	8029af0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8029c7e:	d024      	beq.n	8029cca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8029c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c82:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8029c84:	3b01      	subs	r3, #1
 8029c86:	fb00 4003 	mla	r0, r0, r3, r4
 8029c8a:	1400      	asrs	r0, r0, #16
 8029c8c:	f53f af4d 	bmi.w	8029b2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029c90:	3901      	subs	r1, #1
 8029c92:	4288      	cmp	r0, r1
 8029c94:	f6bf af49 	bge.w	8029b2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029c98:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8029c9a:	fb01 6303 	mla	r3, r1, r3, r6
 8029c9e:	141b      	asrs	r3, r3, #16
 8029ca0:	f53f af43 	bmi.w	8029b2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029ca4:	3a01      	subs	r2, #1
 8029ca6:	4293      	cmp	r3, r2
 8029ca8:	f6bf af3f 	bge.w	8029b2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029cac:	46c8      	mov	r8, r9
 8029cae:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8029cb2:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8029cb6:	930e      	str	r3, [sp, #56]	@ 0x38
 8029cb8:	f1bb 0f00 	cmp.w	fp, #0
 8029cbc:	f300 80b7 	bgt.w	8029e2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8029cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029cc2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029cc6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029cca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029ccc:	2b00      	cmp	r3, #0
 8029cce:	f340 818e 	ble.w	8029fee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8029cd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029cd6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029cda:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029cde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029ce2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029ce6:	eef0 6a62 	vmov.f32	s13, s5
 8029cea:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029cee:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029cf2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029cf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029cfa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029cfe:	ee16 4a90 	vmov	r4, s13
 8029d02:	eef0 6a43 	vmov.f32	s13, s6
 8029d06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029d0a:	ee12 2a90 	vmov	r2, s5
 8029d0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029d12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029d14:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029d18:	fb92 f3f3 	sdiv	r3, r2, r3
 8029d1c:	ee13 2a10 	vmov	r2, s6
 8029d20:	9323      	str	r3, [sp, #140]	@ 0x8c
 8029d22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029d24:	ee16 6a90 	vmov	r6, s13
 8029d28:	fb92 f3f3 	sdiv	r3, r2, r3
 8029d2c:	9324      	str	r3, [sp, #144]	@ 0x90
 8029d2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029d30:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8029d32:	3b01      	subs	r3, #1
 8029d34:	930d      	str	r3, [sp, #52]	@ 0x34
 8029d36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029d38:	bf08      	it	eq
 8029d3a:	4613      	moveq	r3, r2
 8029d3c:	eeb0 3a67 	vmov.f32	s6, s15
 8029d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8029d42:	eef0 2a47 	vmov.f32	s5, s14
 8029d46:	e6c4      	b.n	8029ad2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8029d48:	2900      	cmp	r1, #0
 8029d4a:	f43f af4d 	beq.w	8029be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8029d4e:	eb0a 0003 	add.w	r0, sl, r3
 8029d52:	0843      	lsrs	r3, r0, #1
 8029d54:	5cfb      	ldrb	r3, [r7, r3]
 8029d56:	07c0      	lsls	r0, r0, #31
 8029d58:	bf54      	ite	pl
 8029d5a:	f003 030f 	andpl.w	r3, r3, #15
 8029d5e:	111b      	asrmi	r3, r3, #4
 8029d60:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029d64:	b2db      	uxtb	r3, r3
 8029d66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029d68:	e73e      	b.n	8029be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8029d6a:	fa1f fb83 	uxth.w	fp, r3
 8029d6e:	43db      	mvns	r3, r3
 8029d70:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029d74:	f8b8 e000 	ldrh.w	lr, [r8]
 8029d78:	fb11 f10b 	smulbb	r1, r1, fp
 8029d7c:	fa5f fc8c 	uxtb.w	ip, ip
 8029d80:	b2d2      	uxtb	r2, r2
 8029d82:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029d86:	fb1c fc0b 	smulbb	ip, ip, fp
 8029d8a:	fb12 fb0b 	smulbb	fp, r2, fp
 8029d8e:	b2db      	uxtb	r3, r3
 8029d90:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029d94:	fb00 1003 	mla	r0, r0, r3, r1
 8029d98:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029d9c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029da0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8029da4:	fa5f fe8e 	uxtb.w	lr, lr
 8029da8:	fb01 cc03 	mla	ip, r1, r3, ip
 8029dac:	fb0e bb03 	mla	fp, lr, r3, fp
 8029db0:	b280      	uxth	r0, r0
 8029db2:	1c43      	adds	r3, r0, #1
 8029db4:	fa1f fc8c 	uxth.w	ip, ip
 8029db8:	fa1f fb8b 	uxth.w	fp, fp
 8029dbc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029dc0:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 8029dc4:	f10c 0101 	add.w	r1, ip, #1
 8029dc8:	f10b 0001 	add.w	r0, fp, #1
 8029dcc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029dd0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029dd4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029dd8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029ddc:	4318      	orrs	r0, r3
 8029dde:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8029de2:	ea40 000c 	orr.w	r0, r0, ip
 8029de6:	f8a8 0000 	strh.w	r0, [r8]
 8029dea:	e734      	b.n	8029c56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029dec:	f113 0b01 	adds.w	fp, r3, #1
 8029df0:	f53f af31 	bmi.w	8029c56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029df4:	45dc      	cmp	ip, fp
 8029df6:	f6ff af2e 	blt.w	8029c56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029dfa:	f110 0b01 	adds.w	fp, r0, #1
 8029dfe:	f53f af2a 	bmi.w	8029c56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029e02:	45de      	cmp	lr, fp
 8029e04:	f6ff af27 	blt.w	8029c56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029e08:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029e0a:	9302      	str	r3, [sp, #8]
 8029e0c:	fa0f f38e 	sxth.w	r3, lr
 8029e10:	9301      	str	r3, [sp, #4]
 8029e12:	fa0f f38c 	sxth.w	r3, ip
 8029e16:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029e1a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8029e1e:	9300      	str	r3, [sp, #0]
 8029e20:	463a      	mov	r2, r7
 8029e22:	4653      	mov	r3, sl
 8029e24:	4641      	mov	r1, r8
 8029e26:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8029e28:	f7ff fd4e 	bl	80298c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8029e2c:	e713      	b.n	8029c56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029e2e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029e30:	1422      	asrs	r2, r4, #16
 8029e32:	1433      	asrs	r3, r6, #16
 8029e34:	fb05 2303 	mla	r3, r5, r3, r2
 8029e38:	085a      	lsrs	r2, r3, #1
 8029e3a:	5cba      	ldrb	r2, [r7, r2]
 8029e3c:	07dd      	lsls	r5, r3, #31
 8029e3e:	bf54      	ite	pl
 8029e40:	f002 020f 	andpl.w	r2, r2, #15
 8029e44:	1112      	asrmi	r2, r2, #4
 8029e46:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029e4a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029e4e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029e52:	b2d2      	uxtb	r2, r2
 8029e54:	2900      	cmp	r1, #0
 8029e56:	d077      	beq.n	8029f48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8029e58:	f103 0e01 	add.w	lr, r3, #1
 8029e5c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8029e60:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029e64:	f01e 0f01 	tst.w	lr, #1
 8029e68:	bf0c      	ite	eq
 8029e6a:	f00c 0c0f 	andeq.w	ip, ip, #15
 8029e6e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8029e72:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029e76:	fa5f f58c 	uxtb.w	r5, ip
 8029e7a:	9512      	str	r5, [sp, #72]	@ 0x48
 8029e7c:	b300      	cbz	r0, 8029ec0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8029e7e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029e80:	442b      	add	r3, r5
 8029e82:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029e86:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029e8a:	07dd      	lsls	r5, r3, #31
 8029e8c:	bf54      	ite	pl
 8029e8e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029e92:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029e96:	3301      	adds	r3, #1
 8029e98:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029e9c:	fa5f f58c 	uxtb.w	r5, ip
 8029ea0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029ea4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029ea8:	950c      	str	r5, [sp, #48]	@ 0x30
 8029eaa:	07dd      	lsls	r5, r3, #31
 8029eac:	bf54      	ite	pl
 8029eae:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029eb2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029eb6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029eba:	fa5f f38c 	uxtb.w	r3, ip
 8029ebe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029ec0:	b289      	uxth	r1, r1
 8029ec2:	b280      	uxth	r0, r0
 8029ec4:	fb01 f300 	mul.w	r3, r1, r0
 8029ec8:	0109      	lsls	r1, r1, #4
 8029eca:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8029ece:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029ed0:	1ac9      	subs	r1, r1, r3
 8029ed2:	b289      	uxth	r1, r1
 8029ed4:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8029ed8:	4369      	muls	r1, r5
 8029eda:	b280      	uxth	r0, r0
 8029edc:	ebac 0c00 	sub.w	ip, ip, r0
 8029ee0:	fa1f fc8c 	uxth.w	ip, ip
 8029ee4:	fb02 120c 	mla	r2, r2, ip, r1
 8029ee8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029eea:	fb00 2001 	mla	r0, r0, r1, r2
 8029eee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029ef0:	fb03 0302 	mla	r3, r3, r2, r0
 8029ef4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029ef8:	b1d3      	cbz	r3, 8029f30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8029efa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029efc:	4353      	muls	r3, r2
 8029efe:	1c5a      	adds	r2, r3, #1
 8029f00:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029f04:	4a0f      	ldr	r2, [pc, #60]	@ (8029f44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8029f06:	121b      	asrs	r3, r3, #8
 8029f08:	6812      	ldr	r2, [r2, #0]
 8029f0a:	2bff      	cmp	r3, #255	@ 0xff
 8029f0c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029f10:	d12e      	bne.n	8029f70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8029f12:	0953      	lsrs	r3, r2, #5
 8029f14:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8029f18:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029f1c:	f02c 0c07 	bic.w	ip, ip, #7
 8029f20:	ea43 0c0c 	orr.w	ip, r3, ip
 8029f24:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029f28:	ea4c 0202 	orr.w	r2, ip, r2
 8029f2c:	f8a8 2000 	strh.w	r2, [r8]
 8029f30:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029f32:	f108 0802 	add.w	r8, r8, #2
 8029f36:	441c      	add	r4, r3
 8029f38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029f3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029f3e:	441e      	add	r6, r3
 8029f40:	e6ba      	b.n	8029cb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8029f42:	bf00      	nop
 8029f44:	2005ba90 	.word	0x2005ba90
 8029f48:	2800      	cmp	r0, #0
 8029f4a:	d0b9      	beq.n	8029ec0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8029f4c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029f4e:	442b      	add	r3, r5
 8029f50:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029f54:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029f58:	07db      	lsls	r3, r3, #31
 8029f5a:	bf54      	ite	pl
 8029f5c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029f60:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029f64:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029f68:	fa5f f38c 	uxtb.w	r3, ip
 8029f6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8029f6e:	e7a7      	b.n	8029ec0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8029f70:	fa1f fa83 	uxth.w	sl, r3
 8029f74:	43db      	mvns	r3, r3
 8029f76:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029f7a:	f8b8 e000 	ldrh.w	lr, [r8]
 8029f7e:	fb11 f10a 	smulbb	r1, r1, sl
 8029f82:	b2d2      	uxtb	r2, r2
 8029f84:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029f88:	fb12 f20a 	smulbb	r2, r2, sl
 8029f8c:	b2db      	uxtb	r3, r3
 8029f8e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029f92:	fb00 1003 	mla	r0, r0, r3, r1
 8029f96:	fa5f fc8c 	uxtb.w	ip, ip
 8029f9a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029f9e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029fa2:	fb1c fc0a 	smulbb	ip, ip, sl
 8029fa6:	fa5f fe8e 	uxtb.w	lr, lr
 8029faa:	fb0e 2203 	mla	r2, lr, r3, r2
 8029fae:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8029fb2:	fb01 cc03 	mla	ip, r1, r3, ip
 8029fb6:	b280      	uxth	r0, r0
 8029fb8:	b292      	uxth	r2, r2
 8029fba:	1c43      	adds	r3, r0, #1
 8029fbc:	1c51      	adds	r1, r2, #1
 8029fbe:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029fc2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8029fc6:	fa1f fc8c 	uxth.w	ip, ip
 8029fca:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029fce:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8029fd2:	4308      	orrs	r0, r1
 8029fd4:	f10c 0101 	add.w	r1, ip, #1
 8029fd8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029fdc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029fe0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8029fe4:	ea40 000c 	orr.w	r0, r0, ip
 8029fe8:	f8a8 0000 	strh.w	r0, [r8]
 8029fec:	e7a0      	b.n	8029f30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8029fee:	b017      	add	sp, #92	@ 0x5c
 8029ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029ff4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8029ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029ff8:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8029ffc:	2d00      	cmp	r5, #0
 8029ffe:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a002:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802a006:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802a00a:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802a00e:	fb05 0e03 	mla	lr, r5, r3, r0
 802a012:	f2c0 80b0 	blt.w	802a176 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a016:	45a9      	cmp	r9, r5
 802a018:	f340 80ad 	ble.w	802a176 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a01c:	2800      	cmp	r0, #0
 802a01e:	f2c0 80a8 	blt.w	802a172 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a022:	4580      	cmp	r8, r0
 802a024:	f340 80a5 	ble.w	802a172 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a028:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802a02c:	5d16      	ldrb	r6, [r2, r4]
 802a02e:	f01e 0f01 	tst.w	lr, #1
 802a032:	bf0c      	ite	eq
 802a034:	f006 060f 	andeq.w	r6, r6, #15
 802a038:	1136      	asrne	r6, r6, #4
 802a03a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a03e:	b2f6      	uxtb	r6, r6
 802a040:	1c44      	adds	r4, r0, #1
 802a042:	f100 809b 	bmi.w	802a17c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a046:	45a0      	cmp	r8, r4
 802a048:	f340 8098 	ble.w	802a17c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a04c:	2f00      	cmp	r7, #0
 802a04e:	f000 8097 	beq.w	802a180 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802a052:	f10e 0a01 	add.w	sl, lr, #1
 802a056:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802a05a:	5d14      	ldrb	r4, [r2, r4]
 802a05c:	f01a 0f01 	tst.w	sl, #1
 802a060:	bf0c      	ite	eq
 802a062:	f004 040f 	andeq.w	r4, r4, #15
 802a066:	1124      	asrne	r4, r4, #4
 802a068:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a06c:	b2e4      	uxtb	r4, r4
 802a06e:	3501      	adds	r5, #1
 802a070:	f100 808a 	bmi.w	802a188 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a074:	45a9      	cmp	r9, r5
 802a076:	f340 8087 	ble.w	802a188 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a07a:	f1bc 0f00 	cmp.w	ip, #0
 802a07e:	f000 8086 	beq.w	802a18e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802a082:	2800      	cmp	r0, #0
 802a084:	db7e      	blt.n	802a184 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a086:	4580      	cmp	r8, r0
 802a088:	dd7c      	ble.n	802a184 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a08a:	eb03 090e 	add.w	r9, r3, lr
 802a08e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802a092:	5d55      	ldrb	r5, [r2, r5]
 802a094:	f019 0f01 	tst.w	r9, #1
 802a098:	bf0c      	ite	eq
 802a09a:	f005 050f 	andeq.w	r5, r5, #15
 802a09e:	112d      	asrne	r5, r5, #4
 802a0a0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a0a4:	b2ed      	uxtb	r5, r5
 802a0a6:	3001      	adds	r0, #1
 802a0a8:	d474      	bmi.n	802a194 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a0aa:	4580      	cmp	r8, r0
 802a0ac:	dd72      	ble.n	802a194 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a0ae:	2f00      	cmp	r7, #0
 802a0b0:	d072      	beq.n	802a198 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a0b2:	3301      	adds	r3, #1
 802a0b4:	449e      	add	lr, r3
 802a0b6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a0ba:	5cd0      	ldrb	r0, [r2, r3]
 802a0bc:	f01e 0f01 	tst.w	lr, #1
 802a0c0:	bf0c      	ite	eq
 802a0c2:	f000 000f 	andeq.w	r0, r0, #15
 802a0c6:	1100      	asrne	r0, r0, #4
 802a0c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a0cc:	b2c3      	uxtb	r3, r0
 802a0ce:	b2ba      	uxth	r2, r7
 802a0d0:	fa1f fc8c 	uxth.w	ip, ip
 802a0d4:	fb02 f00c 	mul.w	r0, r2, ip
 802a0d8:	0112      	lsls	r2, r2, #4
 802a0da:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802a0de:	1a12      	subs	r2, r2, r0
 802a0e0:	b292      	uxth	r2, r2
 802a0e2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802a0e6:	4362      	muls	r2, r4
 802a0e8:	fa1f fc8c 	uxth.w	ip, ip
 802a0ec:	eba7 070c 	sub.w	r7, r7, ip
 802a0f0:	b2bf      	uxth	r7, r7
 802a0f2:	fb06 2207 	mla	r2, r6, r7, r2
 802a0f6:	fb0c 2505 	mla	r5, ip, r5, r2
 802a0fa:	fb00 5303 	mla	r3, r0, r3, r5
 802a0fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a102:	b3a3      	cbz	r3, 802a16e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802a104:	4a25      	ldr	r2, [pc, #148]	@ (802a19c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802a106:	880e      	ldrh	r6, [r1, #0]
 802a108:	6815      	ldr	r5, [r2, #0]
 802a10a:	b29a      	uxth	r2, r3
 802a10c:	43db      	mvns	r3, r3
 802a10e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a112:	fb10 f002 	smulbb	r0, r0, r2
 802a116:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a11a:	b2ed      	uxtb	r5, r5
 802a11c:	1234      	asrs	r4, r6, #8
 802a11e:	fb17 f702 	smulbb	r7, r7, r2
 802a122:	fb15 f202 	smulbb	r2, r5, r2
 802a126:	b2db      	uxtb	r3, r3
 802a128:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802a12c:	fb04 0403 	mla	r4, r4, r3, r0
 802a130:	10f0      	asrs	r0, r6, #3
 802a132:	00f6      	lsls	r6, r6, #3
 802a134:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a138:	b2f6      	uxtb	r6, r6
 802a13a:	fb00 7003 	mla	r0, r0, r3, r7
 802a13e:	fb06 2303 	mla	r3, r6, r3, r2
 802a142:	b2a4      	uxth	r4, r4
 802a144:	b29a      	uxth	r2, r3
 802a146:	1c63      	adds	r3, r4, #1
 802a148:	b280      	uxth	r0, r0
 802a14a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a14e:	1c53      	adds	r3, r2, #1
 802a150:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a154:	1c42      	adds	r2, r0, #1
 802a156:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a15a:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802a15e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a162:	0940      	lsrs	r0, r0, #5
 802a164:	4323      	orrs	r3, r4
 802a166:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a16a:	4303      	orrs	r3, r0
 802a16c:	800b      	strh	r3, [r1, #0]
 802a16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a172:	2600      	movs	r6, #0
 802a174:	e764      	b.n	802a040 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802a176:	2400      	movs	r4, #0
 802a178:	4626      	mov	r6, r4
 802a17a:	e778      	b.n	802a06e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a17c:	2400      	movs	r4, #0
 802a17e:	e776      	b.n	802a06e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a180:	463c      	mov	r4, r7
 802a182:	e774      	b.n	802a06e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a184:	2500      	movs	r5, #0
 802a186:	e78e      	b.n	802a0a6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802a188:	2300      	movs	r3, #0
 802a18a:	461d      	mov	r5, r3
 802a18c:	e79f      	b.n	802a0ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a18e:	4663      	mov	r3, ip
 802a190:	4665      	mov	r5, ip
 802a192:	e79c      	b.n	802a0ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a194:	2300      	movs	r3, #0
 802a196:	e79a      	b.n	802a0ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a198:	463b      	mov	r3, r7
 802a19a:	e798      	b.n	802a0ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a19c:	2005ba90 	.word	0x2005ba90

0802a1a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a1a4:	b093      	sub	sp, #76	@ 0x4c
 802a1a6:	920c      	str	r2, [sp, #48]	@ 0x30
 802a1a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802a1aa:	9011      	str	r0, [sp, #68]	@ 0x44
 802a1ac:	6850      	ldr	r0, [r2, #4]
 802a1ae:	9107      	str	r1, [sp, #28]
 802a1b0:	461d      	mov	r5, r3
 802a1b2:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802a1b6:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802a1ba:	fb00 1303 	mla	r3, r0, r3, r1
 802a1be:	6812      	ldr	r2, [r2, #0]
 802a1c0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a1c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a1c6:	689b      	ldr	r3, [r3, #8]
 802a1c8:	3301      	adds	r3, #1
 802a1ca:	f023 0301 	bic.w	r3, r3, #1
 802a1ce:	9306      	str	r3, [sp, #24]
 802a1d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a1d2:	681f      	ldr	r7, [r3, #0]
 802a1d4:	9b07      	ldr	r3, [sp, #28]
 802a1d6:	2b00      	cmp	r3, #0
 802a1d8:	dc03      	bgt.n	802a1e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802a1da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a1dc:	2b00      	cmp	r3, #0
 802a1de:	f340 8265 	ble.w	802a6ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802a1e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a1e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a1e8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a1ec:	1e48      	subs	r0, r1, #1
 802a1ee:	f102 3cff 	add.w	ip, r2, #4294967295
 802a1f2:	2d00      	cmp	r5, #0
 802a1f4:	f340 80b7 	ble.w	802a366 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a1f8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a1fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a200:	d406      	bmi.n	802a210 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a202:	4586      	cmp	lr, r0
 802a204:	da04      	bge.n	802a210 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a206:	2b00      	cmp	r3, #0
 802a208:	db02      	blt.n	802a210 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a20a:	4563      	cmp	r3, ip
 802a20c:	f2c0 80ac 	blt.w	802a368 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802a210:	f11e 0e01 	adds.w	lr, lr, #1
 802a214:	f100 809f 	bmi.w	802a356 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a218:	4571      	cmp	r1, lr
 802a21a:	f2c0 809c 	blt.w	802a356 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a21e:	3301      	adds	r3, #1
 802a220:	f100 8099 	bmi.w	802a356 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a224:	429a      	cmp	r2, r3
 802a226:	f2c0 8096 	blt.w	802a356 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a22a:	46c8      	mov	r8, r9
 802a22c:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a230:	9509      	str	r5, [sp, #36]	@ 0x24
 802a232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a234:	2b00      	cmp	r3, #0
 802a236:	f340 80b5 	ble.w	802a3a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802a23a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a23e:	9308      	str	r3, [sp, #32]
 802a240:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a242:	1430      	asrs	r0, r6, #16
 802a244:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a248:	1423      	asrs	r3, r4, #16
 802a24a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a24e:	f100 813e 	bmi.w	802a4ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a252:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a256:	455b      	cmp	r3, fp
 802a258:	f280 8139 	bge.w	802a4ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a25c:	2800      	cmp	r0, #0
 802a25e:	f2c0 8136 	blt.w	802a4ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a262:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a266:	4558      	cmp	r0, fp
 802a268:	f280 8131 	bge.w	802a4ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a26c:	9a06      	ldr	r2, [sp, #24]
 802a26e:	fb00 3302 	mla	r3, r0, r2, r3
 802a272:	0858      	lsrs	r0, r3, #1
 802a274:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a278:	07da      	lsls	r2, r3, #31
 802a27a:	bf54      	ite	pl
 802a27c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a280:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a284:	9a08      	ldr	r2, [sp, #32]
 802a286:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a28a:	fa5f fc8c 	uxtb.w	ip, ip
 802a28e:	2a00      	cmp	r2, #0
 802a290:	f000 80cb 	beq.w	802a42a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802a294:	1c58      	adds	r0, r3, #1
 802a296:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a29a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a29e:	07c0      	lsls	r0, r0, #31
 802a2a0:	bf54      	ite	pl
 802a2a2:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a2a6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a2aa:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a2ae:	fa5f fe8e 	uxtb.w	lr, lr
 802a2b2:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802a2b6:	b1b9      	cbz	r1, 802a2e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a2b8:	4453      	add	r3, sl
 802a2ba:	0858      	lsrs	r0, r3, #1
 802a2bc:	5c38      	ldrb	r0, [r7, r0]
 802a2be:	07da      	lsls	r2, r3, #31
 802a2c0:	bf54      	ite	pl
 802a2c2:	f000 000f 	andpl.w	r0, r0, #15
 802a2c6:	1100      	asrmi	r0, r0, #4
 802a2c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a2cc:	b2c0      	uxtb	r0, r0
 802a2ce:	900a      	str	r0, [sp, #40]	@ 0x28
 802a2d0:	1c58      	adds	r0, r3, #1
 802a2d2:	0843      	lsrs	r3, r0, #1
 802a2d4:	5cfb      	ldrb	r3, [r7, r3]
 802a2d6:	07c2      	lsls	r2, r0, #31
 802a2d8:	bf54      	ite	pl
 802a2da:	f003 030f 	andpl.w	r3, r3, #15
 802a2de:	111b      	asrmi	r3, r3, #4
 802a2e0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a2e4:	b2db      	uxtb	r3, r3
 802a2e6:	930e      	str	r3, [sp, #56]	@ 0x38
 802a2e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a2ec:	b289      	uxth	r1, r1
 802a2ee:	fb02 f301 	mul.w	r3, r2, r1
 802a2f2:	0112      	lsls	r2, r2, #4
 802a2f4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a2f8:	b289      	uxth	r1, r1
 802a2fa:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802a2fe:	1a40      	subs	r0, r0, r1
 802a300:	fa1f fe80 	uxth.w	lr, r0
 802a304:	1ad2      	subs	r2, r2, r3
 802a306:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a308:	b292      	uxth	r2, r2
 802a30a:	4342      	muls	r2, r0
 802a30c:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a310:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a312:	fb01 c102 	mla	r1, r1, r2, ip
 802a316:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a318:	fb03 1302 	mla	r3, r3, r2, r1
 802a31c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a320:	2bff      	cmp	r3, #255	@ 0xff
 802a322:	f040 8093 	bne.w	802a44c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802a326:	4bbe      	ldr	r3, [pc, #760]	@ (802a620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a328:	681a      	ldr	r2, [r3, #0]
 802a32a:	4bbe      	ldr	r3, [pc, #760]	@ (802a624 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a32c:	0951      	lsrs	r1, r2, #5
 802a32e:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a332:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a336:	430b      	orrs	r3, r1
 802a338:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a33c:	4313      	orrs	r3, r2
 802a33e:	f8a8 3000 	strh.w	r3, [r8]
 802a342:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a344:	f108 0802 	add.w	r8, r8, #2
 802a348:	441c      	add	r4, r3
 802a34a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a34c:	441e      	add	r6, r3
 802a34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a350:	3b01      	subs	r3, #1
 802a352:	9309      	str	r3, [sp, #36]	@ 0x24
 802a354:	e76d      	b.n	802a232 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a356:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a358:	3d01      	subs	r5, #1
 802a35a:	441c      	add	r4, r3
 802a35c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a35e:	f109 0902 	add.w	r9, r9, #2
 802a362:	441e      	add	r6, r3
 802a364:	e745      	b.n	802a1f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802a366:	d021      	beq.n	802a3ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802a368:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802a36a:	1e6b      	subs	r3, r5, #1
 802a36c:	fb00 4003 	mla	r0, r0, r3, r4
 802a370:	1400      	asrs	r0, r0, #16
 802a372:	f53f af5a 	bmi.w	802a22a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a376:	3901      	subs	r1, #1
 802a378:	4288      	cmp	r0, r1
 802a37a:	f6bf af56 	bge.w	802a22a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a37e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802a380:	fb01 6303 	mla	r3, r1, r3, r6
 802a384:	141b      	asrs	r3, r3, #16
 802a386:	f53f af50 	bmi.w	802a22a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a38a:	3a01      	subs	r2, #1
 802a38c:	4293      	cmp	r3, r2
 802a38e:	f6bf af4c 	bge.w	802a22a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a392:	46a8      	mov	r8, r5
 802a394:	46ce      	mov	lr, r9
 802a396:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a39a:	9308      	str	r3, [sp, #32]
 802a39c:	f1b8 0f00 	cmp.w	r8, #0
 802a3a0:	f300 80b5 	bgt.w	802a50e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802a3a4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a3a8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a3ac:	9b07      	ldr	r3, [sp, #28]
 802a3ae:	2b00      	cmp	r3, #0
 802a3b0:	f340 817c 	ble.w	802a6ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802a3b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a3b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a3bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a3c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a3c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a3c8:	eef0 6a62 	vmov.f32	s13, s5
 802a3cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a3d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a3d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a3d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a3dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a3e0:	ee16 4a90 	vmov	r4, s13
 802a3e4:	eef0 6a43 	vmov.f32	s13, s6
 802a3e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a3ec:	ee12 2a90 	vmov	r2, s5
 802a3f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a3f4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a3f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a3fa:	fb92 f3f3 	sdiv	r3, r2, r3
 802a3fe:	ee13 2a10 	vmov	r2, s6
 802a402:	931f      	str	r3, [sp, #124]	@ 0x7c
 802a404:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a406:	ee16 6a90 	vmov	r6, s13
 802a40a:	fb92 f3f3 	sdiv	r3, r2, r3
 802a40e:	9320      	str	r3, [sp, #128]	@ 0x80
 802a410:	9b07      	ldr	r3, [sp, #28]
 802a412:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a414:	3b01      	subs	r3, #1
 802a416:	9307      	str	r3, [sp, #28]
 802a418:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a41a:	bf0c      	ite	eq
 802a41c:	4615      	moveq	r5, r2
 802a41e:	461d      	movne	r5, r3
 802a420:	eeb0 3a67 	vmov.f32	s6, s15
 802a424:	eef0 2a47 	vmov.f32	s5, s14
 802a428:	e6d4      	b.n	802a1d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802a42a:	2900      	cmp	r1, #0
 802a42c:	f43f af5c 	beq.w	802a2e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a430:	eb0a 0003 	add.w	r0, sl, r3
 802a434:	0843      	lsrs	r3, r0, #1
 802a436:	5cfb      	ldrb	r3, [r7, r3]
 802a438:	07c0      	lsls	r0, r0, #31
 802a43a:	bf54      	ite	pl
 802a43c:	f003 030f 	andpl.w	r3, r3, #15
 802a440:	111b      	asrmi	r3, r3, #4
 802a442:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a446:	b2db      	uxtb	r3, r3
 802a448:	930a      	str	r3, [sp, #40]	@ 0x28
 802a44a:	e74d      	b.n	802a2e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a44c:	2b00      	cmp	r3, #0
 802a44e:	f43f af78 	beq.w	802a342 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a452:	fa1f fe83 	uxth.w	lr, r3
 802a456:	43db      	mvns	r3, r3
 802a458:	4a71      	ldr	r2, [pc, #452]	@ (802a620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a45a:	f8b8 c000 	ldrh.w	ip, [r8]
 802a45e:	6810      	ldr	r0, [r2, #0]
 802a460:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a464:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a468:	fb12 f20e 	smulbb	r2, r2, lr
 802a46c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a470:	b2c0      	uxtb	r0, r0
 802a472:	fb1b fb0e 	smulbb	fp, fp, lr
 802a476:	fb10 fe0e 	smulbb	lr, r0, lr
 802a47a:	b2db      	uxtb	r3, r3
 802a47c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a480:	fb01 2103 	mla	r1, r1, r3, r2
 802a484:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a488:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a48c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802a490:	fa5f fc8c 	uxtb.w	ip, ip
 802a494:	fb02 b203 	mla	r2, r2, r3, fp
 802a498:	fb0c e303 	mla	r3, ip, r3, lr
 802a49c:	b289      	uxth	r1, r1
 802a49e:	1c48      	adds	r0, r1, #1
 802a4a0:	b292      	uxth	r2, r2
 802a4a2:	b29b      	uxth	r3, r3
 802a4a4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a4a8:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802a4ac:	f102 0b01 	add.w	fp, r2, #1
 802a4b0:	1c59      	adds	r1, r3, #1
 802a4b2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a4b6:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a4ba:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a4be:	0952      	lsrs	r2, r2, #5
 802a4c0:	4301      	orrs	r1, r0
 802a4c2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a4c6:	4311      	orrs	r1, r2
 802a4c8:	f8a8 1000 	strh.w	r1, [r8]
 802a4cc:	e739      	b.n	802a342 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a4ce:	f113 0b01 	adds.w	fp, r3, #1
 802a4d2:	f53f af36 	bmi.w	802a342 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a4d6:	45dc      	cmp	ip, fp
 802a4d8:	f6ff af33 	blt.w	802a342 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a4dc:	f110 0b01 	adds.w	fp, r0, #1
 802a4e0:	f53f af2f 	bmi.w	802a342 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a4e4:	45de      	cmp	lr, fp
 802a4e6:	f6ff af2c 	blt.w	802a342 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a4ea:	9a08      	ldr	r2, [sp, #32]
 802a4ec:	9302      	str	r3, [sp, #8]
 802a4ee:	fa0f f38e 	sxth.w	r3, lr
 802a4f2:	9301      	str	r3, [sp, #4]
 802a4f4:	fa0f f38c 	sxth.w	r3, ip
 802a4f8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a4fc:	9105      	str	r1, [sp, #20]
 802a4fe:	9300      	str	r3, [sp, #0]
 802a500:	463a      	mov	r2, r7
 802a502:	4653      	mov	r3, sl
 802a504:	4641      	mov	r1, r8
 802a506:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802a508:	f7ff fd74 	bl	8029ff4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a50c:	e719      	b.n	802a342 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a50e:	9906      	ldr	r1, [sp, #24]
 802a510:	1422      	asrs	r2, r4, #16
 802a512:	1433      	asrs	r3, r6, #16
 802a514:	fb01 2303 	mla	r3, r1, r3, r2
 802a518:	085a      	lsrs	r2, r3, #1
 802a51a:	5cba      	ldrb	r2, [r7, r2]
 802a51c:	07d9      	lsls	r1, r3, #31
 802a51e:	bf54      	ite	pl
 802a520:	f002 020f 	andpl.w	r2, r2, #15
 802a524:	1112      	asrmi	r2, r2, #4
 802a526:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a52a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a52e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a532:	b2d2      	uxtb	r2, r2
 802a534:	2800      	cmp	r0, #0
 802a536:	d062      	beq.n	802a5fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802a538:	f103 0a01 	add.w	sl, r3, #1
 802a53c:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a540:	5c79      	ldrb	r1, [r7, r1]
 802a542:	f01a 0f01 	tst.w	sl, #1
 802a546:	bf0c      	ite	eq
 802a548:	f001 010f 	andeq.w	r1, r1, #15
 802a54c:	1109      	asrne	r1, r1, #4
 802a54e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a552:	b2c9      	uxtb	r1, r1
 802a554:	910f      	str	r1, [sp, #60]	@ 0x3c
 802a556:	f1bc 0f00 	cmp.w	ip, #0
 802a55a:	d019      	beq.n	802a590 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a55c:	9908      	ldr	r1, [sp, #32]
 802a55e:	440b      	add	r3, r1
 802a560:	0859      	lsrs	r1, r3, #1
 802a562:	5c79      	ldrb	r1, [r7, r1]
 802a564:	f013 0f01 	tst.w	r3, #1
 802a568:	bf0c      	ite	eq
 802a56a:	f001 010f 	andeq.w	r1, r1, #15
 802a56e:	1109      	asrne	r1, r1, #4
 802a570:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a574:	b2c9      	uxtb	r1, r1
 802a576:	3301      	adds	r3, #1
 802a578:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a57a:	0859      	lsrs	r1, r3, #1
 802a57c:	5c79      	ldrb	r1, [r7, r1]
 802a57e:	07db      	lsls	r3, r3, #31
 802a580:	bf54      	ite	pl
 802a582:	f001 010f 	andpl.w	r1, r1, #15
 802a586:	1109      	asrmi	r1, r1, #4
 802a588:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a58c:	b2c9      	uxtb	r1, r1
 802a58e:	9110      	str	r1, [sp, #64]	@ 0x40
 802a590:	b280      	uxth	r0, r0
 802a592:	fa1f fc8c 	uxth.w	ip, ip
 802a596:	fb00 f30c 	mul.w	r3, r0, ip
 802a59a:	0100      	lsls	r0, r0, #4
 802a59c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802a5a0:	fa1f fc8c 	uxth.w	ip, ip
 802a5a4:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802a5a8:	eba1 010c 	sub.w	r1, r1, ip
 802a5ac:	fa1f fa81 	uxth.w	sl, r1
 802a5b0:	1ac0      	subs	r0, r0, r3
 802a5b2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a5b4:	b280      	uxth	r0, r0
 802a5b6:	4348      	muls	r0, r1
 802a5b8:	fb02 020a 	mla	r2, r2, sl, r0
 802a5bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a5be:	fb0c 2c01 	mla	ip, ip, r1, r2
 802a5c2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802a5c4:	fb03 c302 	mla	r3, r3, r2, ip
 802a5c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a5cc:	2bff      	cmp	r3, #255	@ 0xff
 802a5ce:	d12b      	bne.n	802a628 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802a5d0:	4b13      	ldr	r3, [pc, #76]	@ (802a620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a5d2:	681a      	ldr	r2, [r3, #0]
 802a5d4:	4b13      	ldr	r3, [pc, #76]	@ (802a624 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a5d6:	0951      	lsrs	r1, r2, #5
 802a5d8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a5dc:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a5e0:	430b      	orrs	r3, r1
 802a5e2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a5e6:	4313      	orrs	r3, r2
 802a5e8:	f8ae 3000 	strh.w	r3, [lr]
 802a5ec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a5ee:	f10e 0e02 	add.w	lr, lr, #2
 802a5f2:	441c      	add	r4, r3
 802a5f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a5f6:	f108 38ff 	add.w	r8, r8, #4294967295
 802a5fa:	441e      	add	r6, r3
 802a5fc:	e6ce      	b.n	802a39c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802a5fe:	f1bc 0f00 	cmp.w	ip, #0
 802a602:	d0c5      	beq.n	802a590 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a604:	9908      	ldr	r1, [sp, #32]
 802a606:	440b      	add	r3, r1
 802a608:	0859      	lsrs	r1, r3, #1
 802a60a:	5c79      	ldrb	r1, [r7, r1]
 802a60c:	07db      	lsls	r3, r3, #31
 802a60e:	bf54      	ite	pl
 802a610:	f001 010f 	andpl.w	r1, r1, #15
 802a614:	1109      	asrmi	r1, r1, #4
 802a616:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a61a:	b2c9      	uxtb	r1, r1
 802a61c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a61e:	e7b7      	b.n	802a590 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a620:	2005ba90 	.word	0x2005ba90
 802a624:	fffff800 	.word	0xfffff800
 802a628:	2b00      	cmp	r3, #0
 802a62a:	d0df      	beq.n	802a5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802a62c:	fa1f fa83 	uxth.w	sl, r3
 802a630:	43db      	mvns	r3, r3
 802a632:	4a20      	ldr	r2, [pc, #128]	@ (802a6b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 802a634:	f8be c000 	ldrh.w	ip, [lr]
 802a638:	6810      	ldr	r0, [r2, #0]
 802a63a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a63e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a642:	fb12 f20a 	smulbb	r2, r2, sl
 802a646:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a64a:	b2c0      	uxtb	r0, r0
 802a64c:	fb10 f00a 	smulbb	r0, r0, sl
 802a650:	b2db      	uxtb	r3, r3
 802a652:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a656:	fb01 2103 	mla	r1, r1, r3, r2
 802a65a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a65e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a662:	fb1b fb0a 	smulbb	fp, fp, sl
 802a666:	fa5f fc8c 	uxtb.w	ip, ip
 802a66a:	fb0c 0003 	mla	r0, ip, r3, r0
 802a66e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802a672:	fb02 b203 	mla	r2, r2, r3, fp
 802a676:	b289      	uxth	r1, r1
 802a678:	b280      	uxth	r0, r0
 802a67a:	1c4b      	adds	r3, r1, #1
 802a67c:	f100 0b01 	add.w	fp, r0, #1
 802a680:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a684:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802a688:	b292      	uxth	r2, r2
 802a68a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802a68e:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802a692:	ea4b 0101 	orr.w	r1, fp, r1
 802a696:	f102 0b01 	add.w	fp, r2, #1
 802a69a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a69e:	0952      	lsrs	r2, r2, #5
 802a6a0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a6a4:	4311      	orrs	r1, r2
 802a6a6:	f8ae 1000 	strh.w	r1, [lr]
 802a6aa:	e79f      	b.n	802a5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802a6ac:	b013      	add	sp, #76	@ 0x4c
 802a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a6b2:	bf00      	nop
 802a6b4:	2005ba90 	.word	0x2005ba90

0802a6b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802a6b8:	b570      	push	{r4, r5, r6, lr}
 802a6ba:	1208      	asrs	r0, r1, #8
 802a6bc:	b29e      	uxth	r6, r3
 802a6be:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802a6c2:	1213      	asrs	r3, r2, #8
 802a6c4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802a6c8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802a6cc:	fb13 f305 	smulbb	r3, r3, r5
 802a6d0:	fb10 f006 	smulbb	r0, r0, r6
 802a6d4:	10cc      	asrs	r4, r1, #3
 802a6d6:	4418      	add	r0, r3
 802a6d8:	10d3      	asrs	r3, r2, #3
 802a6da:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802a6de:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802a6e2:	fb13 f305 	smulbb	r3, r3, r5
 802a6e6:	fb14 f406 	smulbb	r4, r4, r6
 802a6ea:	00c9      	lsls	r1, r1, #3
 802a6ec:	00d2      	lsls	r2, r2, #3
 802a6ee:	441c      	add	r4, r3
 802a6f0:	b2d2      	uxtb	r2, r2
 802a6f2:	b2cb      	uxtb	r3, r1
 802a6f4:	fb12 f205 	smulbb	r2, r2, r5
 802a6f8:	fb13 f306 	smulbb	r3, r3, r6
 802a6fc:	b280      	uxth	r0, r0
 802a6fe:	4413      	add	r3, r2
 802a700:	1c42      	adds	r2, r0, #1
 802a702:	b29b      	uxth	r3, r3
 802a704:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a708:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 802a70c:	1c58      	adds	r0, r3, #1
 802a70e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802a712:	b2a4      	uxth	r4, r4
 802a714:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802a718:	4310      	orrs	r0, r2
 802a71a:	1c62      	adds	r2, r4, #1
 802a71c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802a720:	0964      	lsrs	r4, r4, #5
 802a722:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802a726:	4320      	orrs	r0, r4
 802a728:	bd70      	pop	{r4, r5, r6, pc}
	...

0802a72c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802a72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a730:	b08f      	sub	sp, #60	@ 0x3c
 802a732:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802a736:	461c      	mov	r4, r3
 802a738:	9004      	str	r0, [sp, #16]
 802a73a:	460d      	mov	r5, r1
 802a73c:	4616      	mov	r6, r2
 802a73e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a740:	2f00      	cmp	r7, #0
 802a742:	f000 80f5 	beq.w	802a930 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x204>
 802a746:	f04f 0802 	mov.w	r8, #2
 802a74a:	6820      	ldr	r0, [r4, #0]
 802a74c:	6861      	ldr	r1, [r4, #4]
 802a74e:	aa0a      	add	r2, sp, #40	@ 0x28
 802a750:	c203      	stmia	r2!, {r0, r1}
 802a752:	6818      	ldr	r0, [r3, #0]
 802a754:	6859      	ldr	r1, [r3, #4]
 802a756:	aa0c      	add	r2, sp, #48	@ 0x30
 802a758:	c203      	stmia	r2!, {r0, r1}
 802a75a:	a80a      	add	r0, sp, #40	@ 0x28
 802a75c:	f7ee fdea 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802a760:	4621      	mov	r1, r4
 802a762:	a80c      	add	r0, sp, #48	@ 0x30
 802a764:	f7ee fe0e 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802a768:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802a76c:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802a770:	f002 0301 	and.w	r3, r2, #1
 802a774:	9306      	str	r3, [sp, #24]
 802a776:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802a77a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802a77e:	f003 0101 	and.w	r1, r3, #1
 802a782:	9105      	str	r1, [sp, #20]
 802a784:	9805      	ldr	r0, [sp, #20]
 802a786:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802a78a:	4403      	add	r3, r0
 802a78c:	fb01 2303 	mla	r3, r1, r3, r2
 802a790:	fb93 f3f8 	sdiv	r3, r3, r8
 802a794:	441d      	add	r5, r3
 802a796:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802a79a:	3604      	adds	r6, #4
 802a79c:	441a      	add	r2, r3
 802a79e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802a7a2:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802a7a6:	4419      	add	r1, r3
 802a7a8:	4b63      	ldr	r3, [pc, #396]	@ (802a938 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802a7aa:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802a7ae:	6818      	ldr	r0, [r3, #0]
 802a7b0:	6803      	ldr	r3, [r0, #0]
 802a7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802a7b4:	4798      	blx	r3
 802a7b6:	4a61      	ldr	r2, [pc, #388]	@ (802a93c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802a7b8:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802a7bc:	8813      	ldrh	r3, [r2, #0]
 802a7be:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 802a7c2:	2fff      	cmp	r7, #255	@ 0xff
 802a7c4:	fb03 a404 	mla	r4, r3, r4, sl
 802a7c8:	4611      	mov	r1, r2
 802a7ca:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802a7ce:	fb03 fb0b 	mul.w	fp, r3, fp
 802a7d2:	d06b      	beq.n	802a8ac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 802a7d4:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 802a7d8:	9303      	str	r3, [sp, #12]
 802a7da:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802a7de:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802a7e2:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802a7e6:	9b07      	ldr	r3, [sp, #28]
 802a7e8:	42a3      	cmp	r3, r4
 802a7ea:	f240 809c 	bls.w	802a926 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802a7ee:	9b06      	ldr	r3, [sp, #24]
 802a7f0:	2b00      	cmp	r3, #0
 802a7f2:	d039      	beq.n	802a868 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 802a7f4:	782b      	ldrb	r3, [r5, #0]
 802a7f6:	8822      	ldrh	r2, [r4, #0]
 802a7f8:	f003 030f 	and.w	r3, r3, #15
 802a7fc:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a800:	9b03      	ldr	r3, [sp, #12]
 802a802:	9804      	ldr	r0, [sp, #16]
 802a804:	9300      	str	r3, [sp, #0]
 802a806:	463b      	mov	r3, r7
 802a808:	f7ff ff56 	bl	802a6b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a80c:	f105 0801 	add.w	r8, r5, #1
 802a810:	f824 0b02 	strh.w	r0, [r4], #2
 802a814:	f109 3bff 	add.w	fp, r9, #4294967295
 802a818:	f1bb 0f01 	cmp.w	fp, #1
 802a81c:	46a2      	mov	sl, r4
 802a81e:	f104 0404 	add.w	r4, r4, #4
 802a822:	dd24      	ble.n	802a86e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 802a824:	f898 3000 	ldrb.w	r3, [r8]
 802a828:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802a82c:	091b      	lsrs	r3, r3, #4
 802a82e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a832:	9b03      	ldr	r3, [sp, #12]
 802a834:	9804      	ldr	r0, [sp, #16]
 802a836:	9300      	str	r3, [sp, #0]
 802a838:	463b      	mov	r3, r7
 802a83a:	f7ff ff3d 	bl	802a6b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a83e:	f824 0c04 	strh.w	r0, [r4, #-4]
 802a842:	f818 3b01 	ldrb.w	r3, [r8], #1
 802a846:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802a84a:	f003 030f 	and.w	r3, r3, #15
 802a84e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a852:	9b03      	ldr	r3, [sp, #12]
 802a854:	9804      	ldr	r0, [sp, #16]
 802a856:	9300      	str	r3, [sp, #0]
 802a858:	463b      	mov	r3, r7
 802a85a:	f7ff ff2d 	bl	802a6b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a85e:	f1ab 0b02 	sub.w	fp, fp, #2
 802a862:	f824 0c02 	strh.w	r0, [r4, #-2]
 802a866:	e7d7      	b.n	802a818 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802a868:	46a8      	mov	r8, r5
 802a86a:	46cb      	mov	fp, r9
 802a86c:	e7d4      	b.n	802a818 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802a86e:	d10e      	bne.n	802a88e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 802a870:	f898 3000 	ldrb.w	r3, [r8]
 802a874:	f8ba 2000 	ldrh.w	r2, [sl]
 802a878:	091b      	lsrs	r3, r3, #4
 802a87a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a87e:	9b03      	ldr	r3, [sp, #12]
 802a880:	9804      	ldr	r0, [sp, #16]
 802a882:	9300      	str	r3, [sp, #0]
 802a884:	463b      	mov	r3, r7
 802a886:	f7ff ff17 	bl	802a6b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a88a:	f82a 0b02 	strh.w	r0, [sl], #2
 802a88e:	9b08      	ldr	r3, [sp, #32]
 802a890:	9a05      	ldr	r2, [sp, #20]
 802a892:	881c      	ldrh	r4, [r3, #0]
 802a894:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802a898:	eba4 0409 	sub.w	r4, r4, r9
 802a89c:	4413      	add	r3, r2
 802a89e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a8a0:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802a8a4:	fb93 f3f2 	sdiv	r3, r3, r2
 802a8a8:	441d      	add	r5, r3
 802a8aa:	e79c      	b.n	802a7e6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 802a8ac:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802a8b0:	45a3      	cmp	fp, r4
 802a8b2:	d938      	bls.n	802a926 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802a8b4:	9b06      	ldr	r3, [sp, #24]
 802a8b6:	b1f3      	cbz	r3, 802a8f6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ca>
 802a8b8:	782b      	ldrb	r3, [r5, #0]
 802a8ba:	1c6a      	adds	r2, r5, #1
 802a8bc:	f003 030f 	and.w	r3, r3, #15
 802a8c0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802a8c4:	f109 30ff 	add.w	r0, r9, #4294967295
 802a8c8:	8023      	strh	r3, [r4, #0]
 802a8ca:	3402      	adds	r4, #2
 802a8cc:	2801      	cmp	r0, #1
 802a8ce:	4623      	mov	r3, r4
 802a8d0:	f104 0404 	add.w	r4, r4, #4
 802a8d4:	dd12      	ble.n	802a8fc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 802a8d6:	7813      	ldrb	r3, [r2, #0]
 802a8d8:	3802      	subs	r0, #2
 802a8da:	091b      	lsrs	r3, r3, #4
 802a8dc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802a8e0:	f824 3c04 	strh.w	r3, [r4, #-4]
 802a8e4:	f812 3b01 	ldrb.w	r3, [r2], #1
 802a8e8:	f003 030f 	and.w	r3, r3, #15
 802a8ec:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802a8f0:	f824 3c02 	strh.w	r3, [r4, #-2]
 802a8f4:	e7ea      	b.n	802a8cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802a8f6:	462a      	mov	r2, r5
 802a8f8:	4648      	mov	r0, r9
 802a8fa:	e7e7      	b.n	802a8cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802a8fc:	d106      	bne.n	802a90c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802a8fe:	7812      	ldrb	r2, [r2, #0]
 802a900:	3302      	adds	r3, #2
 802a902:	0912      	lsrs	r2, r2, #4
 802a904:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802a908:	f823 2c02 	strh.w	r2, [r3, #-2]
 802a90c:	880c      	ldrh	r4, [r1, #0]
 802a90e:	9a05      	ldr	r2, [sp, #20]
 802a910:	eba4 0409 	sub.w	r4, r4, r9
 802a914:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802a918:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802a91c:	4413      	add	r3, r2
 802a91e:	fb93 f3f8 	sdiv	r3, r3, r8
 802a922:	441d      	add	r5, r3
 802a924:	e7c4      	b.n	802a8b0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 802a926:	4b04      	ldr	r3, [pc, #16]	@ (802a938 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802a928:	6818      	ldr	r0, [r3, #0]
 802a92a:	6803      	ldr	r3, [r0, #0]
 802a92c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a92e:	4798      	blx	r3
 802a930:	b00f      	add	sp, #60	@ 0x3c
 802a932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a936:	bf00      	nop
 802a938:	2005ba80 	.word	0x2005ba80
 802a93c:	2005ba7a 	.word	0x2005ba7a

0802a940 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 802a940:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a942:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802a946:	0a0f      	lsrs	r7, r1, #8
 802a948:	2dff      	cmp	r5, #255	@ 0xff
 802a94a:	d10c      	bne.n	802a966 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802a94c:	2bff      	cmp	r3, #255	@ 0xff
 802a94e:	d10a      	bne.n	802a966 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802a950:	4b25      	ldr	r3, [pc, #148]	@ (802a9e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802a952:	0948      	lsrs	r0, r1, #5
 802a954:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a958:	403b      	ands	r3, r7
 802a95a:	4318      	orrs	r0, r3
 802a95c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802a960:	4308      	orrs	r0, r1
 802a962:	b280      	uxth	r0, r0
 802a964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a966:	fb15 f503 	smulbb	r5, r5, r3
 802a96a:	b2ab      	uxth	r3, r5
 802a96c:	1c5d      	adds	r5, r3, #1
 802a96e:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802a972:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802a976:	fa1f fc85 	uxth.w	ip, r5
 802a97a:	43ed      	mvns	r5, r5
 802a97c:	1214      	asrs	r4, r2, #8
 802a97e:	10d6      	asrs	r6, r2, #3
 802a980:	00d0      	lsls	r0, r2, #3
 802a982:	f3c1 4207 	ubfx	r2, r1, #16, #8
 802a986:	fb12 f20c 	smulbb	r2, r2, ip
 802a98a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802a98e:	b2eb      	uxtb	r3, r5
 802a990:	b2c0      	uxtb	r0, r0
 802a992:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802a996:	fb04 2403 	mla	r4, r4, r3, r2
 802a99a:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 802a99e:	b2c8      	uxtb	r0, r1
 802a9a0:	b2fd      	uxtb	r5, r7
 802a9a2:	fb10 f00c 	smulbb	r0, r0, ip
 802a9a6:	fb15 f50c 	smulbb	r5, r5, ip
 802a9aa:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802a9ae:	fb02 0003 	mla	r0, r2, r3, r0
 802a9b2:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802a9b6:	fb06 5503 	mla	r5, r6, r3, r5
 802a9ba:	b2a4      	uxth	r4, r4
 802a9bc:	b283      	uxth	r3, r0
 802a9be:	1c60      	adds	r0, r4, #1
 802a9c0:	b2ad      	uxth	r5, r5
 802a9c2:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802a9c6:	1c58      	adds	r0, r3, #1
 802a9c8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802a9cc:	1c6b      	adds	r3, r5, #1
 802a9ce:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802a9d2:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802a9d6:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802a9da:	096d      	lsrs	r5, r5, #5
 802a9dc:	4320      	orrs	r0, r4
 802a9de:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802a9e2:	4328      	orrs	r0, r5
 802a9e4:	e7be      	b.n	802a964 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802a9e6:	bf00      	nop
 802a9e8:	00fff800 	.word	0x00fff800

0802a9ec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a9f0:	461c      	mov	r4, r3
 802a9f2:	f04f 0a02 	mov.w	sl, #2
 802a9f6:	b08d      	sub	sp, #52	@ 0x34
 802a9f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a9fa:	460d      	mov	r5, r1
 802a9fc:	4680      	mov	r8, r0
 802a9fe:	6861      	ldr	r1, [r4, #4]
 802aa00:	6820      	ldr	r0, [r4, #0]
 802aa02:	4616      	mov	r6, r2
 802aa04:	aa08      	add	r2, sp, #32
 802aa06:	c203      	stmia	r2!, {r0, r1}
 802aa08:	6818      	ldr	r0, [r3, #0]
 802aa0a:	6859      	ldr	r1, [r3, #4]
 802aa0c:	aa0a      	add	r2, sp, #40	@ 0x28
 802aa0e:	c203      	stmia	r2!, {r0, r1}
 802aa10:	a808      	add	r0, sp, #32
 802aa12:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 802aa16:	f7ee fc8d 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802aa1a:	4621      	mov	r1, r4
 802aa1c:	a80a      	add	r0, sp, #40	@ 0x28
 802aa1e:	f7ee fcb1 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802aa22:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 802aa26:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 802aa2a:	f002 0301 	and.w	r3, r2, #1
 802aa2e:	9303      	str	r3, [sp, #12]
 802aa30:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802aa34:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 802aa38:	f003 0101 	and.w	r1, r3, #1
 802aa3c:	9102      	str	r1, [sp, #8]
 802aa3e:	9802      	ldr	r0, [sp, #8]
 802aa40:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 802aa44:	4403      	add	r3, r0
 802aa46:	fb01 2303 	mla	r3, r1, r3, r2
 802aa4a:	fb93 f3fa 	sdiv	r3, r3, sl
 802aa4e:	441d      	add	r5, r3
 802aa50:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802aa54:	3604      	adds	r6, #4
 802aa56:	441a      	add	r2, r3
 802aa58:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 802aa5c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802aa60:	4a3e      	ldr	r2, [pc, #248]	@ (802ab5c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802aa62:	4419      	add	r1, r3
 802aa64:	6810      	ldr	r0, [r2, #0]
 802aa66:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 802aa6a:	6803      	ldr	r3, [r0, #0]
 802aa6c:	9205      	str	r2, [sp, #20]
 802aa6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802aa70:	4798      	blx	r3
 802aa72:	4b3b      	ldr	r3, [pc, #236]	@ (802ab60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802aa74:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 802aa78:	8819      	ldrh	r1, [r3, #0]
 802aa7a:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 802aa7e:	434f      	muls	r7, r1
 802aa80:	fb01 c404 	mla	r4, r1, r4, ip
 802aa84:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 802aa88:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802aa8c:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 802aa90:	9204      	str	r2, [sp, #16]
 802aa92:	9b04      	ldr	r3, [sp, #16]
 802aa94:	429c      	cmp	r4, r3
 802aa96:	d258      	bcs.n	802ab4a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 802aa98:	9b03      	ldr	r3, [sp, #12]
 802aa9a:	2b00      	cmp	r3, #0
 802aa9c:	d034      	beq.n	802ab08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802aa9e:	782b      	ldrb	r3, [r5, #0]
 802aaa0:	1c6f      	adds	r7, r5, #1
 802aaa2:	f003 030f 	and.w	r3, r3, #15
 802aaa6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802aaaa:	0e0b      	lsrs	r3, r1, #24
 802aaac:	d006      	beq.n	802aabc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 802aaae:	8822      	ldrh	r2, [r4, #0]
 802aab0:	4640      	mov	r0, r8
 802aab2:	9300      	str	r3, [sp, #0]
 802aab4:	464b      	mov	r3, r9
 802aab6:	f7ff ff43 	bl	802a940 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802aaba:	8020      	strh	r0, [r4, #0]
 802aabc:	3402      	adds	r4, #2
 802aabe:	f10b 3aff 	add.w	sl, fp, #4294967295
 802aac2:	f1ba 0f01 	cmp.w	sl, #1
 802aac6:	dd22      	ble.n	802ab0e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802aac8:	783b      	ldrb	r3, [r7, #0]
 802aaca:	091b      	lsrs	r3, r3, #4
 802aacc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802aad0:	0e0b      	lsrs	r3, r1, #24
 802aad2:	d006      	beq.n	802aae2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 802aad4:	8822      	ldrh	r2, [r4, #0]
 802aad6:	4640      	mov	r0, r8
 802aad8:	9300      	str	r3, [sp, #0]
 802aada:	464b      	mov	r3, r9
 802aadc:	f7ff ff30 	bl	802a940 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802aae0:	8020      	strh	r0, [r4, #0]
 802aae2:	f817 3b01 	ldrb.w	r3, [r7], #1
 802aae6:	f003 030f 	and.w	r3, r3, #15
 802aaea:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802aaee:	0e0b      	lsrs	r3, r1, #24
 802aaf0:	d006      	beq.n	802ab00 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802aaf2:	8862      	ldrh	r2, [r4, #2]
 802aaf4:	4640      	mov	r0, r8
 802aaf6:	9300      	str	r3, [sp, #0]
 802aaf8:	464b      	mov	r3, r9
 802aafa:	f7ff ff21 	bl	802a940 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802aafe:	8060      	strh	r0, [r4, #2]
 802ab00:	3404      	adds	r4, #4
 802ab02:	f1aa 0a02 	sub.w	sl, sl, #2
 802ab06:	e7dc      	b.n	802aac2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802ab08:	462f      	mov	r7, r5
 802ab0a:	46da      	mov	sl, fp
 802ab0c:	e7d9      	b.n	802aac2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802ab0e:	d10d      	bne.n	802ab2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 802ab10:	783b      	ldrb	r3, [r7, #0]
 802ab12:	091b      	lsrs	r3, r3, #4
 802ab14:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ab18:	0e0b      	lsrs	r3, r1, #24
 802ab1a:	d006      	beq.n	802ab2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 802ab1c:	8822      	ldrh	r2, [r4, #0]
 802ab1e:	4640      	mov	r0, r8
 802ab20:	9300      	str	r3, [sp, #0]
 802ab22:	464b      	mov	r3, r9
 802ab24:	f7ff ff0c 	bl	802a940 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ab28:	8020      	strh	r0, [r4, #0]
 802ab2a:	3402      	adds	r4, #2
 802ab2c:	9b06      	ldr	r3, [sp, #24]
 802ab2e:	9a02      	ldr	r2, [sp, #8]
 802ab30:	881b      	ldrh	r3, [r3, #0]
 802ab32:	eba3 030b 	sub.w	r3, r3, fp
 802ab36:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802ab3a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802ab3e:	4413      	add	r3, r2
 802ab40:	9a07      	ldr	r2, [sp, #28]
 802ab42:	fb93 f3f2 	sdiv	r3, r3, r2
 802ab46:	441d      	add	r5, r3
 802ab48:	e7a3      	b.n	802aa92 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802ab4a:	9b05      	ldr	r3, [sp, #20]
 802ab4c:	6818      	ldr	r0, [r3, #0]
 802ab4e:	6803      	ldr	r3, [r0, #0]
 802ab50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ab52:	4798      	blx	r3
 802ab54:	b00d      	add	sp, #52	@ 0x34
 802ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab5a:	bf00      	nop
 802ab5c:	2005ba80 	.word	0x2005ba80
 802ab60:	2005ba7a 	.word	0x2005ba7a

0802ab64 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802ab64:	b570      	push	{r4, r5, r6, lr}
 802ab66:	788d      	ldrb	r5, [r1, #2]
 802ab68:	1214      	asrs	r4, r2, #8
 802ab6a:	fb15 f503 	smulbb	r5, r5, r3
 802ab6e:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802ab72:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802ab76:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802ab7a:	fb04 5506 	mla	r5, r4, r6, r5
 802ab7e:	784c      	ldrb	r4, [r1, #1]
 802ab80:	7809      	ldrb	r1, [r1, #0]
 802ab82:	fb14 f403 	smulbb	r4, r4, r3
 802ab86:	fb11 f303 	smulbb	r3, r1, r3
 802ab8a:	10d0      	asrs	r0, r2, #3
 802ab8c:	00d2      	lsls	r2, r2, #3
 802ab8e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802ab92:	b2d2      	uxtb	r2, r2
 802ab94:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802ab98:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802ab9c:	fb00 4406 	mla	r4, r0, r6, r4
 802aba0:	fb02 3306 	mla	r3, r2, r6, r3
 802aba4:	b2ad      	uxth	r5, r5
 802aba6:	b29b      	uxth	r3, r3
 802aba8:	b2a4      	uxth	r4, r4
 802abaa:	1c68      	adds	r0, r5, #1
 802abac:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802abb0:	1c62      	adds	r2, r4, #1
 802abb2:	1c58      	adds	r0, r3, #1
 802abb4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802abb8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802abbc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802abc0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802abc4:	0964      	lsrs	r4, r4, #5
 802abc6:	4328      	orrs	r0, r5
 802abc8:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802abcc:	4320      	orrs	r0, r4
 802abce:	bd70      	pop	{r4, r5, r6, pc}

0802abd0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802abd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802abd4:	b08f      	sub	sp, #60	@ 0x3c
 802abd6:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802abda:	461c      	mov	r4, r3
 802abdc:	4682      	mov	sl, r0
 802abde:	460e      	mov	r6, r1
 802abe0:	4615      	mov	r5, r2
 802abe2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802abe4:	2f00      	cmp	r7, #0
 802abe6:	f000 8141 	beq.w	802ae6c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 802abea:	f04f 0802 	mov.w	r8, #2
 802abee:	6820      	ldr	r0, [r4, #0]
 802abf0:	6861      	ldr	r1, [r4, #4]
 802abf2:	aa0a      	add	r2, sp, #40	@ 0x28
 802abf4:	c203      	stmia	r2!, {r0, r1}
 802abf6:	6818      	ldr	r0, [r3, #0]
 802abf8:	6859      	ldr	r1, [r3, #4]
 802abfa:	aa0c      	add	r2, sp, #48	@ 0x30
 802abfc:	c203      	stmia	r2!, {r0, r1}
 802abfe:	a80a      	add	r0, sp, #40	@ 0x28
 802ac00:	f7ee fb98 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802ac04:	4621      	mov	r1, r4
 802ac06:	a80c      	add	r0, sp, #48	@ 0x30
 802ac08:	f7ee fbbc 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802ac0c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802ac10:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802ac14:	f002 0301 	and.w	r3, r2, #1
 802ac18:	9306      	str	r3, [sp, #24]
 802ac1a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802ac1e:	3504      	adds	r5, #4
 802ac20:	f003 0101 	and.w	r1, r3, #1
 802ac24:	9105      	str	r1, [sp, #20]
 802ac26:	9805      	ldr	r0, [sp, #20]
 802ac28:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802ac2c:	4403      	add	r3, r0
 802ac2e:	fb01 2303 	mla	r3, r1, r3, r2
 802ac32:	fb93 f3f8 	sdiv	r3, r3, r8
 802ac36:	441e      	add	r6, r3
 802ac38:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802ac3c:	441a      	add	r2, r3
 802ac3e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802ac42:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802ac46:	4419      	add	r1, r3
 802ac48:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802ac4c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802ac50:	9303      	str	r3, [sp, #12]
 802ac52:	4b88      	ldr	r3, [pc, #544]	@ (802ae74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802ac54:	6818      	ldr	r0, [r3, #0]
 802ac56:	6803      	ldr	r3, [r0, #0]
 802ac58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ac5a:	4798      	blx	r3
 802ac5c:	4a86      	ldr	r2, [pc, #536]	@ (802ae78 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 802ac5e:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802ac62:	8813      	ldrh	r3, [r2, #0]
 802ac64:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 802ac68:	2fff      	cmp	r7, #255	@ 0xff
 802ac6a:	fb03 9404 	mla	r4, r3, r4, r9
 802ac6e:	4694      	mov	ip, r2
 802ac70:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802ac74:	fb03 f30b 	mul.w	r3, r3, fp
 802ac78:	d071      	beq.n	802ad5e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 802ac7a:	43f9      	mvns	r1, r7
 802ac7c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802ac80:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802ac84:	b2c9      	uxtb	r1, r1
 802ac86:	9104      	str	r1, [sp, #16]
 802ac88:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802ac8c:	9b07      	ldr	r3, [sp, #28]
 802ac8e:	42a3      	cmp	r3, r4
 802ac90:	f240 80e7 	bls.w	802ae62 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802ac94:	9b06      	ldr	r3, [sp, #24]
 802ac96:	2b00      	cmp	r3, #0
 802ac98:	d03d      	beq.n	802ad16 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 802ac9a:	7831      	ldrb	r1, [r6, #0]
 802ac9c:	9b04      	ldr	r3, [sp, #16]
 802ac9e:	f001 010f 	and.w	r1, r1, #15
 802aca2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802aca6:	8822      	ldrh	r2, [r4, #0]
 802aca8:	4429      	add	r1, r5
 802acaa:	9300      	str	r3, [sp, #0]
 802acac:	4650      	mov	r0, sl
 802acae:	463b      	mov	r3, r7
 802acb0:	f7ff ff58 	bl	802ab64 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802acb4:	9b03      	ldr	r3, [sp, #12]
 802acb6:	f106 0801 	add.w	r8, r6, #1
 802acba:	f824 0b02 	strh.w	r0, [r4], #2
 802acbe:	f103 3bff 	add.w	fp, r3, #4294967295
 802acc2:	f1bb 0f01 	cmp.w	fp, #1
 802acc6:	46a1      	mov	r9, r4
 802acc8:	f104 0404 	add.w	r4, r4, #4
 802accc:	dd27      	ble.n	802ad1e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 802acce:	f898 1000 	ldrb.w	r1, [r8]
 802acd2:	9b04      	ldr	r3, [sp, #16]
 802acd4:	0909      	lsrs	r1, r1, #4
 802acd6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802acda:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802acde:	4429      	add	r1, r5
 802ace0:	9300      	str	r3, [sp, #0]
 802ace2:	4650      	mov	r0, sl
 802ace4:	463b      	mov	r3, r7
 802ace6:	f7ff ff3d 	bl	802ab64 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802acea:	f824 0c04 	strh.w	r0, [r4, #-4]
 802acee:	f818 1b01 	ldrb.w	r1, [r8], #1
 802acf2:	9b04      	ldr	r3, [sp, #16]
 802acf4:	f001 010f 	and.w	r1, r1, #15
 802acf8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802acfc:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802ad00:	4429      	add	r1, r5
 802ad02:	9300      	str	r3, [sp, #0]
 802ad04:	4650      	mov	r0, sl
 802ad06:	463b      	mov	r3, r7
 802ad08:	f7ff ff2c 	bl	802ab64 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ad0c:	f1ab 0b02 	sub.w	fp, fp, #2
 802ad10:	f824 0c02 	strh.w	r0, [r4, #-2]
 802ad14:	e7d5      	b.n	802acc2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802ad16:	46b0      	mov	r8, r6
 802ad18:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802ad1c:	e7d1      	b.n	802acc2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802ad1e:	d10f      	bne.n	802ad40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 802ad20:	f898 1000 	ldrb.w	r1, [r8]
 802ad24:	9b04      	ldr	r3, [sp, #16]
 802ad26:	0909      	lsrs	r1, r1, #4
 802ad28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ad2c:	f8b9 2000 	ldrh.w	r2, [r9]
 802ad30:	4429      	add	r1, r5
 802ad32:	9300      	str	r3, [sp, #0]
 802ad34:	4650      	mov	r0, sl
 802ad36:	463b      	mov	r3, r7
 802ad38:	f7ff ff14 	bl	802ab64 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ad3c:	f829 0b02 	strh.w	r0, [r9], #2
 802ad40:	9b08      	ldr	r3, [sp, #32]
 802ad42:	9a05      	ldr	r2, [sp, #20]
 802ad44:	881c      	ldrh	r4, [r3, #0]
 802ad46:	9b03      	ldr	r3, [sp, #12]
 802ad48:	1ae4      	subs	r4, r4, r3
 802ad4a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802ad4e:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802ad52:	4413      	add	r3, r2
 802ad54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ad56:	fb93 f3f2 	sdiv	r3, r3, r2
 802ad5a:	441e      	add	r6, r3
 802ad5c:	e796      	b.n	802ac8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 802ad5e:	4f47      	ldr	r7, [pc, #284]	@ (802ae7c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802ad60:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802ad64:	42a3      	cmp	r3, r4
 802ad66:	d97c      	bls.n	802ae62 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802ad68:	9a06      	ldr	r2, [sp, #24]
 802ad6a:	2a00      	cmp	r2, #0
 802ad6c:	d054      	beq.n	802ae18 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 802ad6e:	7830      	ldrb	r0, [r6, #0]
 802ad70:	1c71      	adds	r1, r6, #1
 802ad72:	f000 000f 	and.w	r0, r0, #15
 802ad76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802ad7a:	eb05 0e00 	add.w	lr, r5, r0
 802ad7e:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802ad82:	f89e e001 	ldrb.w	lr, [lr, #1]
 802ad86:	5c28      	ldrb	r0, [r5, r0]
 802ad88:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802ad8c:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802ad90:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802ad94:	ea42 020e 	orr.w	r2, r2, lr
 802ad98:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802ad9c:	f824 2b02 	strh.w	r2, [r4], #2
 802ada0:	9a03      	ldr	r2, [sp, #12]
 802ada2:	f102 3eff 	add.w	lr, r2, #4294967295
 802ada6:	f1be 0f01 	cmp.w	lr, #1
 802adaa:	4620      	mov	r0, r4
 802adac:	f104 0404 	add.w	r4, r4, #4
 802adb0:	dd36      	ble.n	802ae20 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802adb2:	7808      	ldrb	r0, [r1, #0]
 802adb4:	f1ae 0e02 	sub.w	lr, lr, #2
 802adb8:	0900      	lsrs	r0, r0, #4
 802adba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802adbe:	eb05 0a00 	add.w	sl, r5, r0
 802adc2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802adc6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802adca:	00d2      	lsls	r2, r2, #3
 802adcc:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802add0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802add4:	ea49 0202 	orr.w	r2, r9, r2
 802add8:	f815 9000 	ldrb.w	r9, [r5, r0]
 802addc:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802ade0:	f824 2c04 	strh.w	r2, [r4, #-4]
 802ade4:	f811 0b01 	ldrb.w	r0, [r1], #1
 802ade8:	f000 000f 	and.w	r0, r0, #15
 802adec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802adf0:	eb05 0a00 	add.w	sl, r5, r0
 802adf4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802adf8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802adfc:	00d2      	lsls	r2, r2, #3
 802adfe:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802ae02:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802ae06:	ea49 0202 	orr.w	r2, r9, r2
 802ae0a:	f815 9000 	ldrb.w	r9, [r5, r0]
 802ae0e:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802ae12:	f824 2c02 	strh.w	r2, [r4, #-2]
 802ae16:	e7c6      	b.n	802ada6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802ae18:	4631      	mov	r1, r6
 802ae1a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802ae1e:	e7c2      	b.n	802ada6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802ae20:	d111      	bne.n	802ae46 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802ae22:	7809      	ldrb	r1, [r1, #0]
 802ae24:	0909      	lsrs	r1, r1, #4
 802ae26:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ae2a:	186c      	adds	r4, r5, r1
 802ae2c:	78a2      	ldrb	r2, [r4, #2]
 802ae2e:	7864      	ldrb	r4, [r4, #1]
 802ae30:	5c69      	ldrb	r1, [r5, r1]
 802ae32:	00e4      	lsls	r4, r4, #3
 802ae34:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802ae38:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802ae3c:	4322      	orrs	r2, r4
 802ae3e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802ae42:	f820 2b02 	strh.w	r2, [r0], #2
 802ae46:	9a03      	ldr	r2, [sp, #12]
 802ae48:	f8bc 4000 	ldrh.w	r4, [ip]
 802ae4c:	9905      	ldr	r1, [sp, #20]
 802ae4e:	1aa4      	subs	r4, r4, r2
 802ae50:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 802ae54:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802ae58:	440a      	add	r2, r1
 802ae5a:	fb92 f2f8 	sdiv	r2, r2, r8
 802ae5e:	4416      	add	r6, r2
 802ae60:	e780      	b.n	802ad64 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802ae62:	4b04      	ldr	r3, [pc, #16]	@ (802ae74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802ae64:	6818      	ldr	r0, [r3, #0]
 802ae66:	6803      	ldr	r3, [r0, #0]
 802ae68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ae6a:	4798      	blx	r3
 802ae6c:	b00f      	add	sp, #60	@ 0x3c
 802ae6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ae72:	bf00      	nop
 802ae74:	2005ba80 	.word	0x2005ba80
 802ae78:	2005ba7a 	.word	0x2005ba7a
 802ae7c:	fffff800 	.word	0xfffff800

0802ae80 <CRC_Lock>:
 802ae80:	b530      	push	{r4, r5, lr}
 802ae82:	4a2d      	ldr	r2, [pc, #180]	@ (802af38 <CRC_Lock+0xb8>)
 802ae84:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802ae88:	6813      	ldr	r3, [r2, #0]
 802ae8a:	f023 0301 	bic.w	r3, r3, #1
 802ae8e:	6013      	str	r3, [r2, #0]
 802ae90:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802ae94:	4b29      	ldr	r3, [pc, #164]	@ (802af3c <CRC_Lock+0xbc>)
 802ae96:	681c      	ldr	r4, [r3, #0]
 802ae98:	4014      	ands	r4, r2
 802ae9a:	42ac      	cmp	r4, r5
 802ae9c:	d005      	beq.n	802aeaa <CRC_Lock+0x2a>
 802ae9e:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802aea2:	681c      	ldr	r4, [r3, #0]
 802aea4:	4014      	ands	r4, r2
 802aea6:	42ac      	cmp	r4, r5
 802aea8:	d125      	bne.n	802aef6 <CRC_Lock+0x76>
 802aeaa:	4b25      	ldr	r3, [pc, #148]	@ (802af40 <CRC_Lock+0xc0>)
 802aeac:	681b      	ldr	r3, [r3, #0]
 802aeae:	2b00      	cmp	r3, #0
 802aeb0:	d139      	bne.n	802af26 <CRC_Lock+0xa6>
 802aeb2:	4b24      	ldr	r3, [pc, #144]	@ (802af44 <CRC_Lock+0xc4>)
 802aeb4:	681a      	ldr	r2, [r3, #0]
 802aeb6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802aeba:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802aebe:	d00d      	beq.n	802aedc <CRC_Lock+0x5c>
 802aec0:	f240 4483 	movw	r4, #1155	@ 0x483
 802aec4:	681a      	ldr	r2, [r3, #0]
 802aec6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802aeca:	42a2      	cmp	r2, r4
 802aecc:	d006      	beq.n	802aedc <CRC_Lock+0x5c>
 802aece:	f240 4285 	movw	r2, #1157	@ 0x485
 802aed2:	681b      	ldr	r3, [r3, #0]
 802aed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802aed8:	4293      	cmp	r3, r2
 802aeda:	d124      	bne.n	802af26 <CRC_Lock+0xa6>
 802aedc:	2201      	movs	r2, #1
 802aede:	4b1a      	ldr	r3, [pc, #104]	@ (802af48 <CRC_Lock+0xc8>)
 802aee0:	601a      	str	r2, [r3, #0]
 802aee2:	681a      	ldr	r2, [r3, #0]
 802aee4:	2a00      	cmp	r2, #0
 802aee6:	d1fc      	bne.n	802aee2 <CRC_Lock+0x62>
 802aee8:	4b18      	ldr	r3, [pc, #96]	@ (802af4c <CRC_Lock+0xcc>)
 802aeea:	6018      	str	r0, [r3, #0]
 802aeec:	6818      	ldr	r0, [r3, #0]
 802aeee:	1a43      	subs	r3, r0, r1
 802aef0:	4258      	negs	r0, r3
 802aef2:	4158      	adcs	r0, r3
 802aef4:	e00e      	b.n	802af14 <CRC_Lock+0x94>
 802aef6:	681b      	ldr	r3, [r3, #0]
 802aef8:	4013      	ands	r3, r2
 802aefa:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802aefe:	4293      	cmp	r3, r2
 802af00:	d111      	bne.n	802af26 <CRC_Lock+0xa6>
 802af02:	f240 4286 	movw	r2, #1158	@ 0x486
 802af06:	4b12      	ldr	r3, [pc, #72]	@ (802af50 <CRC_Lock+0xd0>)
 802af08:	681b      	ldr	r3, [r3, #0]
 802af0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802af0e:	4293      	cmp	r3, r2
 802af10:	d001      	beq.n	802af16 <CRC_Lock+0x96>
 802af12:	2000      	movs	r0, #0
 802af14:	bd30      	pop	{r4, r5, pc}
 802af16:	2201      	movs	r2, #1
 802af18:	4b0e      	ldr	r3, [pc, #56]	@ (802af54 <CRC_Lock+0xd4>)
 802af1a:	601a      	str	r2, [r3, #0]
 802af1c:	681a      	ldr	r2, [r3, #0]
 802af1e:	2a00      	cmp	r2, #0
 802af20:	d1fc      	bne.n	802af1c <CRC_Lock+0x9c>
 802af22:	4b0d      	ldr	r3, [pc, #52]	@ (802af58 <CRC_Lock+0xd8>)
 802af24:	e7e1      	b.n	802aeea <CRC_Lock+0x6a>
 802af26:	2201      	movs	r2, #1
 802af28:	4b0c      	ldr	r3, [pc, #48]	@ (802af5c <CRC_Lock+0xdc>)
 802af2a:	601a      	str	r2, [r3, #0]
 802af2c:	681a      	ldr	r2, [r3, #0]
 802af2e:	2a00      	cmp	r2, #0
 802af30:	d1fc      	bne.n	802af2c <CRC_Lock+0xac>
 802af32:	4b0b      	ldr	r3, [pc, #44]	@ (802af60 <CRC_Lock+0xe0>)
 802af34:	e7d9      	b.n	802aeea <CRC_Lock+0x6a>
 802af36:	bf00      	nop
 802af38:	e0002000 	.word	0xe0002000
 802af3c:	e000ed00 	.word	0xe000ed00
 802af40:	e0042000 	.word	0xe0042000
 802af44:	5c001000 	.word	0x5c001000
 802af48:	58024c08 	.word	0x58024c08
 802af4c:	58024c00 	.word	0x58024c00
 802af50:	46008ff0 	.word	0x46008ff0
 802af54:	46024c08 	.word	0x46024c08
 802af58:	46024c00 	.word	0x46024c00
 802af5c:	40023008 	.word	0x40023008
 802af60:	40023000 	.word	0x40023000

0802af64 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802af64:	6101      	str	r1, [r0, #16]
 802af66:	4770      	bx	lr

0802af68 <_ZN8touchgfx8Gestures4tickEv>:
 802af68:	7b83      	ldrb	r3, [r0, #14]
 802af6a:	b14b      	cbz	r3, 802af80 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802af6c:	8903      	ldrh	r3, [r0, #8]
 802af6e:	3301      	adds	r3, #1
 802af70:	b29b      	uxth	r3, r3
 802af72:	2b07      	cmp	r3, #7
 802af74:	8103      	strh	r3, [r0, #8]
 802af76:	bf81      	itttt	hi
 802af78:	2300      	movhi	r3, #0
 802af7a:	8143      	strhhi	r3, [r0, #10]
 802af7c:	8183      	strhhi	r3, [r0, #12]
 802af7e:	7383      	strbhi	r3, [r0, #14]
 802af80:	4770      	bx	lr
	...

0802af84 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802af84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802af88:	4698      	mov	r8, r3
 802af8a:	4604      	mov	r4, r0
 802af8c:	8883      	ldrh	r3, [r0, #4]
 802af8e:	460e      	mov	r6, r1
 802af90:	88c1      	ldrh	r1, [r0, #6]
 802af92:	2000      	movs	r0, #0
 802af94:	f8ad 3006 	strh.w	r3, [sp, #6]
 802af98:	eba8 0303 	sub.w	r3, r8, r3
 802af9c:	b21b      	sxth	r3, r3
 802af9e:	4617      	mov	r7, r2
 802afa0:	4a17      	ldr	r2, [pc, #92]	@ (802b000 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802afa2:	2b00      	cmp	r3, #0
 802afa4:	bfb8      	it	lt
 802afa6:	425b      	neglt	r3, r3
 802afa8:	9200      	str	r2, [sp, #0]
 802afaa:	8aa2      	ldrh	r2, [r4, #20]
 802afac:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802afb0:	b21b      	sxth	r3, r3
 802afb2:	4293      	cmp	r3, r2
 802afb4:	f88d 0004 	strb.w	r0, [sp, #4]
 802afb8:	f8ad 1008 	strh.w	r1, [sp, #8]
 802afbc:	f8ad 800a 	strh.w	r8, [sp, #10]
 802afc0:	f8ad 500c 	strh.w	r5, [sp, #12]
 802afc4:	dc07      	bgt.n	802afd6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802afc6:	1a69      	subs	r1, r5, r1
 802afc8:	b209      	sxth	r1, r1
 802afca:	2900      	cmp	r1, #0
 802afcc:	bfb8      	it	lt
 802afce:	4249      	neglt	r1, r1
 802afd0:	b209      	sxth	r1, r1
 802afd2:	428a      	cmp	r2, r1
 802afd4:	da10      	bge.n	802aff8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802afd6:	6920      	ldr	r0, [r4, #16]
 802afd8:	4669      	mov	r1, sp
 802afda:	6803      	ldr	r3, [r0, #0]
 802afdc:	eba8 0606 	sub.w	r6, r8, r6
 802afe0:	685b      	ldr	r3, [r3, #4]
 802afe2:	4798      	blx	r3
 802afe4:	2300      	movs	r3, #0
 802afe6:	2001      	movs	r0, #1
 802afe8:	1bef      	subs	r7, r5, r7
 802afea:	8123      	strh	r3, [r4, #8]
 802afec:	8166      	strh	r6, [r4, #10]
 802afee:	81a7      	strh	r7, [r4, #12]
 802aff0:	f8a4 8004 	strh.w	r8, [r4, #4]
 802aff4:	80e5      	strh	r5, [r4, #6]
 802aff6:	73a0      	strb	r0, [r4, #14]
 802aff8:	b004      	add	sp, #16
 802affa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802affe:	bf00      	nop
 802b000:	0802f9b8 	.word	0x0802f9b8

0802b004 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802b004:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b006:	461e      	mov	r6, r3
 802b008:	1e4b      	subs	r3, r1, #1
 802b00a:	2b01      	cmp	r3, #1
 802b00c:	b085      	sub	sp, #20
 802b00e:	4604      	mov	r4, r0
 802b010:	460d      	mov	r5, r1
 802b012:	4617      	mov	r7, r2
 802b014:	d84b      	bhi.n	802b0ae <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802b016:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802b01a:	1cd3      	adds	r3, r2, #3
 802b01c:	b29b      	uxth	r3, r3
 802b01e:	2b06      	cmp	r3, #6
 802b020:	d916      	bls.n	802b050 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802b022:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802b0c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b026:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b02a:	f8cd c004 	str.w	ip, [sp, #4]
 802b02e:	f04f 0c00 	mov.w	ip, #0
 802b032:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b036:	6900      	ldr	r0, [r0, #16]
 802b038:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b03c:	f88d c008 	strb.w	ip, [sp, #8]
 802b040:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b044:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b048:	6803      	ldr	r3, [r0, #0]
 802b04a:	a901      	add	r1, sp, #4
 802b04c:	689b      	ldr	r3, [r3, #8]
 802b04e:	4798      	blx	r3
 802b050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b054:	1cd3      	adds	r3, r2, #3
 802b056:	b29b      	uxth	r3, r3
 802b058:	2b06      	cmp	r3, #6
 802b05a:	d916      	bls.n	802b08a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b05c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802b0c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b060:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b064:	f8cd c004 	str.w	ip, [sp, #4]
 802b068:	f04f 0c01 	mov.w	ip, #1
 802b06c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b070:	6920      	ldr	r0, [r4, #16]
 802b072:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b076:	f88d c008 	strb.w	ip, [sp, #8]
 802b07a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b07e:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b082:	6803      	ldr	r3, [r0, #0]
 802b084:	a901      	add	r1, sp, #4
 802b086:	689b      	ldr	r3, [r3, #8]
 802b088:	4798      	blx	r3
 802b08a:	4b0d      	ldr	r3, [pc, #52]	@ (802b0c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802b08c:	6920      	ldr	r0, [r4, #16]
 802b08e:	9301      	str	r3, [sp, #4]
 802b090:	2300      	movs	r3, #0
 802b092:	f88d 5008 	strb.w	r5, [sp, #8]
 802b096:	f8ad 700a 	strh.w	r7, [sp, #10]
 802b09a:	f8ad 600c 	strh.w	r6, [sp, #12]
 802b09e:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b0a2:	6803      	ldr	r3, [r0, #0]
 802b0a4:	a901      	add	r1, sp, #4
 802b0a6:	681b      	ldr	r3, [r3, #0]
 802b0a8:	4798      	blx	r3
 802b0aa:	b005      	add	sp, #20
 802b0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b0ae:	2900      	cmp	r1, #0
 802b0b0:	d1eb      	bne.n	802b08a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b0b2:	80a2      	strh	r2, [r4, #4]
 802b0b4:	80c6      	strh	r6, [r0, #6]
 802b0b6:	60a1      	str	r1, [r4, #8]
 802b0b8:	81a1      	strh	r1, [r4, #12]
 802b0ba:	73a1      	strb	r1, [r4, #14]
 802b0bc:	e7e5      	b.n	802b08a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b0be:	bf00      	nop
 802b0c0:	0802f9a4 	.word	0x0802f9a4
 802b0c4:	0802f9cc 	.word	0x0802f9cc

0802b0c8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802b0c8:	10c9      	asrs	r1, r1, #3
 802b0ca:	2900      	cmp	r1, #0
 802b0cc:	bfb8      	it	lt
 802b0ce:	4249      	neglt	r1, r1
 802b0d0:	2801      	cmp	r0, #1
 802b0d2:	d108      	bne.n	802b0e6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802b0d4:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802b0d8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802b0dc:	4601      	mov	r1, r0
 802b0de:	dd02      	ble.n	802b0e6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802b0e0:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802b0e4:	4770      	bx	lr
 802b0e6:	29ff      	cmp	r1, #255	@ 0xff
 802b0e8:	bfa8      	it	ge
 802b0ea:	21ff      	movge	r1, #255	@ 0xff
 802b0ec:	4608      	mov	r0, r1
 802b0ee:	4770      	bx	lr

0802b0f0 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802b0f0:	b410      	push	{r4}
 802b0f2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802b0f6:	429c      	cmp	r4, r3
 802b0f8:	d803      	bhi.n	802b102 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802b0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b0fe:	f7ed b8cb 	b.w	8018298 <_ZN8touchgfx7Outline6lineToEii>
 802b102:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b106:	4770      	bx	lr

0802b108 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b10c:	b08b      	sub	sp, #44	@ 0x2c
 802b10e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802b112:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802b116:	4606      	mov	r6, r0
 802b118:	9308      	str	r3, [sp, #32]
 802b11a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802b11e:	468a      	mov	sl, r1
 802b120:	9309      	str	r3, [sp, #36]	@ 0x24
 802b122:	f7ed fa25 	bl	8018570 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802b126:	68b5      	ldr	r5, [r6, #8]
 802b128:	4604      	mov	r4, r0
 802b12a:	2d00      	cmp	r5, #0
 802b12c:	d044      	beq.n	802b1b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b12e:	6873      	ldr	r3, [r6, #4]
 802b130:	42ab      	cmp	r3, r5
 802b132:	d33d      	bcc.n	802b1b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802b134:	f04f 0800 	mov.w	r8, #0
 802b138:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802b13c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802b140:	eb02 0b03 	add.w	fp, r2, r3
 802b144:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802b148:	fb02 1203 	mla	r2, r2, r3, r1
 802b14c:	9205      	str	r2, [sp, #20]
 802b14e:	1e6a      	subs	r2, r5, #1
 802b150:	9204      	str	r2, [sp, #16]
 802b152:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802b156:	f9b4 7000 	ldrsh.w	r7, [r4]
 802b15a:	454b      	cmp	r3, r9
 802b15c:	463a      	mov	r2, r7
 802b15e:	d008      	beq.n	802b172 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802b160:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802b164:	eb03 0b09 	add.w	fp, r3, r9
 802b168:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802b16c:	fb03 1309 	mla	r3, r3, r9, r1
 802b170:	9305      	str	r3, [sp, #20]
 802b172:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802b176:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802b17a:	4498      	add	r8, r3
 802b17c:	9b04      	ldr	r3, [sp, #16]
 802b17e:	3b01      	subs	r3, #1
 802b180:	9304      	str	r3, [sp, #16]
 802b182:	9b04      	ldr	r3, [sp, #16]
 802b184:	3301      	adds	r3, #1
 802b186:	d015      	beq.n	802b1b4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802b188:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802b18c:	42bb      	cmp	r3, r7
 802b18e:	d117      	bne.n	802b1c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802b190:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802b194:	9b04      	ldr	r3, [sp, #16]
 802b196:	4548      	cmp	r0, r9
 802b198:	f103 33ff 	add.w	r3, r3, #4294967295
 802b19c:	d17d      	bne.n	802b29a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802b19e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802b1a2:	4401      	add	r1, r0
 802b1a4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802b1a8:	4480      	add	r8, r0
 802b1aa:	e7e9      	b.n	802b180 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802b1ac:	461f      	mov	r7, r3
 802b1ae:	e042      	b.n	802b236 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802b1b0:	2000      	movs	r0, #0
 802b1b2:	e002      	b.n	802b1ba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802b1b4:	2900      	cmp	r1, #0
 802b1b6:	d16d      	bne.n	802b294 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802b1b8:	2001      	movs	r0, #1
 802b1ba:	b00b      	add	sp, #44	@ 0x2c
 802b1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b1c0:	b379      	cbz	r1, 802b222 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802b1c2:	2f00      	cmp	r7, #0
 802b1c4:	db29      	blt.n	802b21a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b1c6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802b1ca:	42bb      	cmp	r3, r7
 802b1cc:	dd25      	ble.n	802b21a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b1ce:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802b1d2:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802b1d6:	f7ff ff77 	bl	802b0c8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802b1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b1dc:	fb10 f003 	smulbb	r0, r0, r3
 802b1e0:	b280      	uxth	r0, r0
 802b1e2:	1c41      	adds	r1, r0, #1
 802b1e4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802b1e8:	1209      	asrs	r1, r1, #8
 802b1ea:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802b1ee:	d014      	beq.n	802b21a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b1f0:	b2c9      	uxtb	r1, r1
 802b1f2:	9102      	str	r1, [sp, #8]
 802b1f4:	2101      	movs	r1, #1
 802b1f6:	9808      	ldr	r0, [sp, #32]
 802b1f8:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802b1fa:	b2ba      	uxth	r2, r7
 802b1fc:	4413      	add	r3, r2
 802b1fe:	9101      	str	r1, [sp, #4]
 802b200:	4402      	add	r2, r0
 802b202:	fa0f f18b 	sxth.w	r1, fp
 802b206:	f8da 0000 	ldr.w	r0, [sl]
 802b20a:	9100      	str	r1, [sp, #0]
 802b20c:	6941      	ldr	r1, [r0, #20]
 802b20e:	b21b      	sxth	r3, r3
 802b210:	460d      	mov	r5, r1
 802b212:	b212      	sxth	r2, r2
 802b214:	9905      	ldr	r1, [sp, #20]
 802b216:	4650      	mov	r0, sl
 802b218:	47a8      	blx	r5
 802b21a:	9b04      	ldr	r3, [sp, #16]
 802b21c:	1c7a      	adds	r2, r7, #1
 802b21e:	3301      	adds	r3, #1
 802b220:	d0ca      	beq.n	802b1b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b222:	f9b4 7000 	ldrsh.w	r7, [r4]
 802b226:	1abb      	subs	r3, r7, r2
 802b228:	2b00      	cmp	r3, #0
 802b22a:	dd31      	ble.n	802b290 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b22c:	2a00      	cmp	r2, #0
 802b22e:	dabd      	bge.n	802b1ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802b230:	2f00      	cmp	r7, #0
 802b232:	dd2d      	ble.n	802b290 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b234:	2200      	movs	r2, #0
 802b236:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802b23a:	19d1      	adds	r1, r2, r7
 802b23c:	4299      	cmp	r1, r3
 802b23e:	db02      	blt.n	802b246 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802b240:	1a9f      	subs	r7, r3, r2
 802b242:	2f00      	cmp	r7, #0
 802b244:	dd24      	ble.n	802b290 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b246:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802b24a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802b24e:	f7ff ff3b 	bl	802b0c8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802b252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b254:	fb10 f003 	smulbb	r0, r0, r3
 802b258:	b280      	uxth	r0, r0
 802b25a:	1c41      	adds	r1, r0, #1
 802b25c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802b260:	1209      	asrs	r1, r1, #8
 802b262:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802b266:	d013      	beq.n	802b290 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b268:	9808      	ldr	r0, [sp, #32]
 802b26a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802b26c:	b292      	uxth	r2, r2
 802b26e:	b2c9      	uxtb	r1, r1
 802b270:	4413      	add	r3, r2
 802b272:	9102      	str	r1, [sp, #8]
 802b274:	4402      	add	r2, r0
 802b276:	b23f      	sxth	r7, r7
 802b278:	f8da 0000 	ldr.w	r0, [sl]
 802b27c:	fa0f f18b 	sxth.w	r1, fp
 802b280:	9100      	str	r1, [sp, #0]
 802b282:	9701      	str	r7, [sp, #4]
 802b284:	6947      	ldr	r7, [r0, #20]
 802b286:	b21b      	sxth	r3, r3
 802b288:	b212      	sxth	r2, r2
 802b28a:	9905      	ldr	r1, [sp, #20]
 802b28c:	4650      	mov	r0, sl
 802b28e:	47b8      	blx	r7
 802b290:	464b      	mov	r3, r9
 802b292:	e75e      	b.n	802b152 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802b294:	2f00      	cmp	r7, #0
 802b296:	da96      	bge.n	802b1c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802b298:	e78e      	b.n	802b1b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b29a:	2900      	cmp	r1, #0
 802b29c:	d0f8      	beq.n	802b290 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b29e:	e790      	b.n	802b1c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802b2a0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802b2a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b2a4:	2500      	movs	r5, #0
 802b2a6:	461e      	mov	r6, r3
 802b2a8:	4b35      	ldr	r3, [pc, #212]	@ (802b380 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802b2aa:	4604      	mov	r4, r0
 802b2ac:	e9c0 3100 	strd	r3, r1, [r0]
 802b2b0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802b2b4:	f100 0814 	add.w	r8, r0, #20
 802b2b8:	8103      	strh	r3, [r0, #8]
 802b2ba:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802b2be:	8185      	strh	r5, [r0, #12]
 802b2c0:	7283      	strb	r3, [r0, #10]
 802b2c2:	81c5      	strh	r5, [r0, #14]
 802b2c4:	8205      	strh	r5, [r0, #16]
 802b2c6:	8245      	strh	r5, [r0, #18]
 802b2c8:	4640      	mov	r0, r8
 802b2ca:	4617      	mov	r7, r2
 802b2cc:	f7ec fb1c 	bl	8017908 <_ZN8touchgfx7OutlineC1Ev>
 802b2d0:	466b      	mov	r3, sp
 802b2d2:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802b2d6:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802b2da:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802b2de:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802b2e2:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802b2e6:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802b2ea:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802b2ee:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802b2f2:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802b2f6:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802b2fa:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802b2fe:	6830      	ldr	r0, [r6, #0]
 802b300:	6871      	ldr	r1, [r6, #4]
 802b302:	8872      	ldrh	r2, [r6, #2]
 802b304:	c303      	stmia	r3!, {r0, r1}
 802b306:	887b      	ldrh	r3, [r7, #2]
 802b308:	8835      	ldrh	r5, [r6, #0]
 802b30a:	4413      	add	r3, r2
 802b30c:	883a      	ldrh	r2, [r7, #0]
 802b30e:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802b312:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802b316:	442a      	add	r2, r5
 802b318:	81a2      	strh	r2, [r4, #12]
 802b31a:	81e3      	strh	r3, [r4, #14]
 802b31c:	8220      	strh	r0, [r4, #16]
 802b31e:	8261      	strh	r1, [r4, #18]
 802b320:	4668      	mov	r0, sp
 802b322:	4639      	mov	r1, r7
 802b324:	f7ee f82e 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802b328:	f104 000c 	add.w	r0, r4, #12
 802b32c:	f7ee f802 	bl	8019334 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802b330:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802b334:	f8bd 2000 	ldrh.w	r2, [sp]
 802b338:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802b33c:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802b340:	4640      	mov	r0, r8
 802b342:	f7ec fac5 	bl	80178d0 <_ZN8touchgfx7Outline5resetEv>
 802b346:	4620      	mov	r0, r4
 802b348:	f9bd 3000 	ldrsh.w	r3, [sp]
 802b34c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802b350:	015b      	lsls	r3, r3, #5
 802b352:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802b354:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802b358:	015b      	lsls	r3, r3, #5
 802b35a:	6523      	str	r3, [r4, #80]	@ 0x50
 802b35c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802b360:	015b      	lsls	r3, r3, #5
 802b362:	6563      	str	r3, [r4, #84]	@ 0x54
 802b364:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802b368:	015b      	lsls	r3, r3, #5
 802b36a:	65a3      	str	r3, [r4, #88]	@ 0x58
 802b36c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802b370:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802b374:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802b378:	b002      	add	sp, #8
 802b37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b37e:	bf00      	nop
 802b380:	0802fd08 	.word	0x0802fd08

0802b384 <_ZN8touchgfx6Canvas5closeEv>:
 802b384:	b538      	push	{r3, r4, r5, lr}
 802b386:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802b38a:	4604      	mov	r4, r0
 802b38c:	b193      	cbz	r3, 802b3b4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802b38e:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802b392:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802b396:	4213      	tst	r3, r2
 802b398:	d10c      	bne.n	802b3b4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802b39a:	f100 0514 	add.w	r5, r0, #20
 802b39e:	b123      	cbz	r3, 802b3aa <_ZN8touchgfx6Canvas5closeEv+0x26>
 802b3a0:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802b3a4:	4628      	mov	r0, r5
 802b3a6:	f7ff fea3 	bl	802b0f0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b3aa:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802b3ae:	4628      	mov	r0, r5
 802b3b0:	f7ff fe9e 	bl	802b0f0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b3b4:	2300      	movs	r3, #0
 802b3b6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b3ba:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802b3be:	4298      	cmp	r0, r3
 802b3c0:	bf34      	ite	cc
 802b3c2:	2000      	movcc	r0, #0
 802b3c4:	2001      	movcs	r0, #1
 802b3c6:	bd38      	pop	{r3, r4, r5, pc}

0802b3c8 <_ZN8touchgfx6Canvas6renderEh>:
 802b3c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b3cc:	7a85      	ldrb	r5, [r0, #10]
 802b3ce:	4604      	mov	r4, r0
 802b3d0:	4369      	muls	r1, r5
 802b3d2:	1c4d      	adds	r5, r1, #1
 802b3d4:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802b3d8:	122d      	asrs	r5, r5, #8
 802b3da:	f000 8098 	beq.w	802b50e <_ZN8touchgfx6Canvas6renderEh+0x146>
 802b3de:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802b3e2:	2b00      	cmp	r3, #0
 802b3e4:	f000 8093 	beq.w	802b50e <_ZN8touchgfx6Canvas6renderEh+0x146>
 802b3e8:	f7ff ffcc 	bl	802b384 <_ZN8touchgfx6Canvas5closeEv>
 802b3ec:	4607      	mov	r7, r0
 802b3ee:	2800      	cmp	r0, #0
 802b3f0:	d045      	beq.n	802b47e <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802b3f2:	6860      	ldr	r0, [r4, #4]
 802b3f4:	4e47      	ldr	r6, [pc, #284]	@ (802b514 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802b3f6:	6803      	ldr	r3, [r0, #0]
 802b3f8:	6837      	ldr	r7, [r6, #0]
 802b3fa:	689b      	ldr	r3, [r3, #8]
 802b3fc:	4798      	blx	r3
 802b3fe:	4601      	mov	r1, r0
 802b400:	4638      	mov	r0, r7
 802b402:	f7ea fa15 	bl	8015830 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802b406:	4607      	mov	r7, r0
 802b408:	f7e4 fabe 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 802b40c:	6803      	ldr	r3, [r0, #0]
 802b40e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b410:	4798      	blx	r3
 802b412:	4680      	mov	r8, r0
 802b414:	f7e4 fab8 	bl	800f988 <_ZN8touchgfx3HAL3lcdEv>
 802b418:	6803      	ldr	r3, [r0, #0]
 802b41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b41c:	4798      	blx	r3
 802b41e:	280b      	cmp	r0, #11
 802b420:	d85a      	bhi.n	802b4d8 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802b422:	e8df f000 	tbb	[pc, r0]
 802b426:	5b50      	.short	0x5b50
 802b428:	3059066b 	.word	0x3059066b
 802b42c:	64646440 	.word	0x64646440
 802b430:	6464      	.short	0x6464
 802b432:	2208      	movs	r2, #8
 802b434:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b438:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b43c:	fb91 f2f2 	sdiv	r2, r1, r2
 802b440:	fb08 2303 	mla	r3, r8, r3, r2
 802b444:	441f      	add	r7, r3
 802b446:	424b      	negs	r3, r1
 802b448:	f003 0307 	and.w	r3, r3, #7
 802b44c:	f001 0107 	and.w	r1, r1, #7
 802b450:	bf58      	it	pl
 802b452:	4259      	negpl	r1, r3
 802b454:	b2c9      	uxtb	r1, r1
 802b456:	b2ed      	uxtb	r5, r5
 802b458:	463a      	mov	r2, r7
 802b45a:	e9cd 1500 	strd	r1, r5, [sp]
 802b45e:	fa0f f388 	sxth.w	r3, r8
 802b462:	6861      	ldr	r1, [r4, #4]
 802b464:	f104 0014 	add.w	r0, r4, #20
 802b468:	f7ff fe4e 	bl	802b108 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802b46c:	4607      	mov	r7, r0
 802b46e:	6860      	ldr	r0, [r4, #4]
 802b470:	6803      	ldr	r3, [r0, #0]
 802b472:	691b      	ldr	r3, [r3, #16]
 802b474:	4798      	blx	r3
 802b476:	6830      	ldr	r0, [r6, #0]
 802b478:	6803      	ldr	r3, [r0, #0]
 802b47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b47c:	4798      	blx	r3
 802b47e:	4638      	mov	r0, r7
 802b480:	b002      	add	sp, #8
 802b482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b486:	2204      	movs	r2, #4
 802b488:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b48c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b490:	fb91 f2f2 	sdiv	r2, r1, r2
 802b494:	fb08 2303 	mla	r3, r8, r3, r2
 802b498:	441f      	add	r7, r3
 802b49a:	424b      	negs	r3, r1
 802b49c:	f003 0303 	and.w	r3, r3, #3
 802b4a0:	f001 0103 	and.w	r1, r1, #3
 802b4a4:	e7d4      	b.n	802b450 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802b4a6:	2202      	movs	r2, #2
 802b4a8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b4ac:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b4b0:	fb91 f2f2 	sdiv	r2, r1, r2
 802b4b4:	fb08 2303 	mla	r3, r8, r3, r2
 802b4b8:	2900      	cmp	r1, #0
 802b4ba:	f001 0101 	and.w	r1, r1, #1
 802b4be:	441f      	add	r7, r3
 802b4c0:	bfb8      	it	lt
 802b4c2:	4249      	neglt	r1, r1
 802b4c4:	e7c6      	b.n	802b454 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802b4c6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b4ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b4ce:	fb08 f303 	mul.w	r3, r8, r3
 802b4d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802b4d6:	441f      	add	r7, r3
 802b4d8:	2100      	movs	r1, #0
 802b4da:	e7bc      	b.n	802b456 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802b4dc:	2103      	movs	r1, #3
 802b4de:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b4e2:	fb08 f203 	mul.w	r2, r8, r3
 802b4e6:	89a3      	ldrh	r3, [r4, #12]
 802b4e8:	fb13 2301 	smlabb	r3, r3, r1, r2
 802b4ec:	e7f3      	b.n	802b4d6 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b4ee:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b4f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b4f6:	fb08 2303 	mla	r3, r8, r3, r2
 802b4fa:	e7ec      	b.n	802b4d6 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b4fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b504:	fb08 f303 	mul.w	r3, r8, r3
 802b508:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802b50c:	e7e3      	b.n	802b4d6 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b50e:	2701      	movs	r7, #1
 802b510:	e7b5      	b.n	802b47e <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802b512:	bf00      	nop
 802b514:	2005ba80 	.word	0x2005ba80

0802b518 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802b518:	b510      	push	{r4, lr}
 802b51a:	4b06      	ldr	r3, [pc, #24]	@ (802b534 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802b51c:	781b      	ldrb	r3, [r3, #0]
 802b51e:	2b01      	cmp	r3, #1
 802b520:	d107      	bne.n	802b532 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802b522:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802b526:	680b      	ldr	r3, [r1, #0]
 802b528:	6814      	ldr	r4, [r2, #0]
 802b52a:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802b52e:	6013      	str	r3, [r2, #0]
 802b530:	600c      	str	r4, [r1, #0]
 802b532:	bd10      	pop	{r4, pc}
 802b534:	2005ba78 	.word	0x2005ba78

0802b538 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802b538:	b513      	push	{r0, r1, r4, lr}
 802b53a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802b53e:	4604      	mov	r4, r0
 802b540:	e9cd 2100 	strd	r2, r1, [sp]
 802b544:	b9a3      	cbnz	r3, 802b570 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802b546:	466a      	mov	r2, sp
 802b548:	a901      	add	r1, sp, #4
 802b54a:	4620      	mov	r0, r4
 802b54c:	f7ff ffe4 	bl	802b518 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b550:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802b552:	9901      	ldr	r1, [sp, #4]
 802b554:	9a00      	ldr	r2, [sp, #0]
 802b556:	1ac9      	subs	r1, r1, r3
 802b558:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802b55a:	9101      	str	r1, [sp, #4]
 802b55c:	1ad2      	subs	r2, r2, r3
 802b55e:	2a00      	cmp	r2, #0
 802b560:	9200      	str	r2, [sp, #0]
 802b562:	da0b      	bge.n	802b57c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802b564:	2301      	movs	r3, #1
 802b566:	2900      	cmp	r1, #0
 802b568:	da0e      	bge.n	802b588 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802b56a:	f043 0304 	orr.w	r3, r3, #4
 802b56e:	e013      	b.n	802b598 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802b570:	f7ff ff08 	bl	802b384 <_ZN8touchgfx6Canvas5closeEv>
 802b574:	2800      	cmp	r0, #0
 802b576:	d1e6      	bne.n	802b546 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802b578:	b002      	add	sp, #8
 802b57a:	bd10      	pop	{r4, pc}
 802b57c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802b57e:	429a      	cmp	r2, r3
 802b580:	bfac      	ite	ge
 802b582:	2302      	movge	r3, #2
 802b584:	2300      	movlt	r3, #0
 802b586:	e7ee      	b.n	802b566 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802b588:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802b58a:	4281      	cmp	r1, r0
 802b58c:	bfac      	ite	ge
 802b58e:	2008      	movge	r0, #8
 802b590:	2000      	movlt	r0, #0
 802b592:	4318      	orrs	r0, r3
 802b594:	b2c3      	uxtb	r3, r0
 802b596:	b158      	cbz	r0, 802b5b0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802b598:	2200      	movs	r2, #0
 802b59a:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802b59e:	9901      	ldr	r1, [sp, #4]
 802b5a0:	9a00      	ldr	r2, [sp, #0]
 802b5a2:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802b5a4:	6722      	str	r2, [r4, #112]	@ 0x70
 802b5a6:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802b5aa:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802b5ae:	e7e3      	b.n	802b578 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802b5b0:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802b5b4:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802b5b8:	4298      	cmp	r0, r3
 802b5ba:	d803      	bhi.n	802b5c4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802b5bc:	f104 0014 	add.w	r0, r4, #20
 802b5c0:	f7ec fe84 	bl	80182cc <_ZN8touchgfx7Outline6moveToEii>
 802b5c4:	2301      	movs	r3, #1
 802b5c6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b5ca:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802b5ce:	2300      	movs	r3, #0
 802b5d0:	e7e5      	b.n	802b59e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802b5d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802b5d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b5d4:	4604      	mov	r4, r0
 802b5d6:	ab02      	add	r3, sp, #8
 802b5d8:	f843 2d08 	str.w	r2, [r3, #-8]!
 802b5dc:	461a      	mov	r2, r3
 802b5de:	9101      	str	r1, [sp, #4]
 802b5e0:	a901      	add	r1, sp, #4
 802b5e2:	f7ff ff99 	bl	802b518 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b5e6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802b5e8:	9901      	ldr	r1, [sp, #4]
 802b5ea:	9a00      	ldr	r2, [sp, #0]
 802b5ec:	1ac9      	subs	r1, r1, r3
 802b5ee:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802b5f0:	9101      	str	r1, [sp, #4]
 802b5f2:	1ad2      	subs	r2, r2, r3
 802b5f4:	2a00      	cmp	r2, #0
 802b5f6:	9200      	str	r2, [sp, #0]
 802b5f8:	db1c      	blt.n	802b634 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802b5fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802b5fc:	429a      	cmp	r2, r3
 802b5fe:	bfac      	ite	ge
 802b600:	2002      	movge	r0, #2
 802b602:	2000      	movlt	r0, #0
 802b604:	2900      	cmp	r1, #0
 802b606:	db17      	blt.n	802b638 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802b608:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802b60a:	4299      	cmp	r1, r3
 802b60c:	bfac      	ite	ge
 802b60e:	2308      	movge	r3, #8
 802b610:	2300      	movlt	r3, #0
 802b612:	4303      	orrs	r3, r0
 802b614:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802b618:	b2dd      	uxtb	r5, r3
 802b61a:	b978      	cbnz	r0, 802b63c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802b61c:	f104 0014 	add.w	r0, r4, #20
 802b620:	f7ff fd66 	bl	802b0f0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b624:	9b01      	ldr	r3, [sp, #4]
 802b626:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802b62a:	6623      	str	r3, [r4, #96]	@ 0x60
 802b62c:	9b00      	ldr	r3, [sp, #0]
 802b62e:	6663      	str	r3, [r4, #100]	@ 0x64
 802b630:	b002      	add	sp, #8
 802b632:	bd70      	pop	{r4, r5, r6, pc}
 802b634:	2001      	movs	r0, #1
 802b636:	e7e5      	b.n	802b604 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802b638:	2304      	movs	r3, #4
 802b63a:	e7ea      	b.n	802b612 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802b63c:	b113      	cbz	r3, 802b644 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802b63e:	ea10 0305 	ands.w	r3, r0, r5
 802b642:	d11c      	bne.n	802b67e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802b644:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802b648:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802b64c:	f104 0614 	add.w	r6, r4, #20
 802b650:	b98b      	cbnz	r3, 802b676 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802b652:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802b656:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802b65a:	4298      	cmp	r0, r3
 802b65c:	d802      	bhi.n	802b664 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802b65e:	4630      	mov	r0, r6
 802b660:	f7ec fe34 	bl	80182cc <_ZN8touchgfx7Outline6moveToEii>
 802b664:	2301      	movs	r3, #1
 802b666:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b66a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802b66e:	e9dd 2100 	ldrd	r2, r1, [sp]
 802b672:	4630      	mov	r0, r6
 802b674:	e7d4      	b.n	802b620 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802b676:	4630      	mov	r0, r6
 802b678:	f7ff fd3a 	bl	802b0f0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b67c:	e7f7      	b.n	802b66e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802b67e:	461d      	mov	r5, r3
 802b680:	e7d0      	b.n	802b624 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802b684 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 802b684:	b538      	push	{r3, r4, r5, lr}
 802b686:	ed2d 8b10 	vpush	{d8-d15}
 802b68a:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 802b68e:	4605      	mov	r5, r0
 802b690:	eeb0 ca40 	vmov.f32	s24, s0
 802b694:	eef0 ca60 	vmov.f32	s25, s1
 802b698:	eeb0 da41 	vmov.f32	s26, s2
 802b69c:	eef0 da61 	vmov.f32	s27, s3
 802b6a0:	eeb0 ea42 	vmov.f32	s28, s4
 802b6a4:	eef0 ea62 	vmov.f32	s29, s5
 802b6a8:	460c      	mov	r4, r1
 802b6aa:	eef0 aa6b 	vmov.f32	s21, s23
 802b6ae:	ed9f ba52 	vldr	s22, [pc, #328]	@ 802b7f8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 802b6b2:	2c08      	cmp	r4, #8
 802b6b4:	d86e      	bhi.n	802b794 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802b6b6:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802b6ba:	ee7d 7aee 	vsub.f32	s15, s27, s29
 802b6be:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802b6c2:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802b6c6:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802b6ca:	eee6 7a07 	vfma.f32	s15, s12, s14
 802b6ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802b6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b6d6:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802b6da:	bf48      	it	mi
 802b6dc:	eef1 7a67 	vnegmi.f32	s15, s15
 802b6e0:	ee7c faad 	vadd.f32	s31, s25, s27
 802b6e4:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802b6e8:	ee3d aaae 	vadd.f32	s20, s27, s29
 802b6ec:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802b6f0:	ee6f faab 	vmul.f32	s31, s31, s23
 802b6f4:	ee69 9aab 	vmul.f32	s19, s19, s23
 802b6f8:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802b6fc:	eef4 7acb 	vcmpe.f32	s15, s22
 802b700:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802b704:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 802b708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b70c:	ee68 8aab 	vmul.f32	s17, s17, s23
 802b710:	ee29 9a2b 	vmul.f32	s18, s18, s23
 802b714:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 802b718:	dd3f      	ble.n	802b79a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 802b71a:	ee27 7a07 	vmul.f32	s14, s14, s14
 802b71e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802b722:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802b726:	ee27 7a06 	vmul.f32	s14, s14, s12
 802b72a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802b72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b732:	d847      	bhi.n	802b7c4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802b734:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 802b738:	ee3e 0aed 	vsub.f32	s0, s29, s27
 802b73c:	f000 fa37 	bl	802bbae <atan2f>
 802b740:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 802b744:	eeb0 8a40 	vmov.f32	s16, s0
 802b748:	ee3d 0aec 	vsub.f32	s0, s27, s25
 802b74c:	f000 fa2f 	bl	802bbae <atan2f>
 802b750:	ee38 0a40 	vsub.f32	s0, s16, s0
 802b754:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b75c:	eddf 7a27 	vldr	s15, [pc, #156]	@ 802b7fc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 802b760:	bf48      	it	mi
 802b762:	eeb1 0a40 	vnegmi.f32	s0, s0
 802b766:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b76e:	bfa4      	itt	ge
 802b770:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 802b800 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 802b774:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802b778:	eddf 7a22 	vldr	s15, [pc, #136]	@ 802b804 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 802b77c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b784:	d51e      	bpl.n	802b7c4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802b786:	eef0 0a49 	vmov.f32	s1, s18
 802b78a:	eeb0 0a68 	vmov.f32	s0, s17
 802b78e:	4628      	mov	r0, r5
 802b790:	f7eb fa3c 	bl	8016c0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802b794:	ecbd 8b10 	vpop	{d8-d15}
 802b798:	bd38      	pop	{r3, r4, r5, pc}
 802b79a:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802b79e:	eeb0 7a68 	vmov.f32	s14, s17
 802b7a2:	eef0 6a49 	vmov.f32	s13, s18
 802b7a6:	eea7 7aea 	vfms.f32	s14, s15, s21
 802b7aa:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802b7ae:	eee7 6aea 	vfms.f32	s13, s15, s21
 802b7b2:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802b7b6:	eee7 7a07 	vfma.f32	s15, s14, s14
 802b7ba:	eef4 7ac6 	vcmpe.f32	s15, s12
 802b7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b7c2:	d9e0      	bls.n	802b786 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802b7c4:	3401      	adds	r4, #1
 802b7c6:	eef0 0a6c 	vmov.f32	s1, s25
 802b7ca:	eeb0 0a4c 	vmov.f32	s0, s24
 802b7ce:	4621      	mov	r1, r4
 802b7d0:	eef0 2a49 	vmov.f32	s5, s18
 802b7d4:	eeb0 2a68 	vmov.f32	s4, s17
 802b7d8:	eef0 1a6f 	vmov.f32	s3, s31
 802b7dc:	eeb0 1a4f 	vmov.f32	s2, s30
 802b7e0:	4628      	mov	r0, r5
 802b7e2:	f7ff ff4f 	bl	802b684 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802b7e6:	eef0 da4a 	vmov.f32	s27, s20
 802b7ea:	eeb0 da69 	vmov.f32	s26, s19
 802b7ee:	eef0 ca49 	vmov.f32	s25, s18
 802b7f2:	eeb0 ca68 	vmov.f32	s24, s17
 802b7f6:	e75c      	b.n	802b6b2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 802b7f8:	2edbe6ff 	.word	0x2edbe6ff
 802b7fc:	40490fdb 	.word	0x40490fdb
 802b800:	40c90fdb 	.word	0x40c90fdb
 802b804:	3dcccccd 	.word	0x3dcccccd

0802b808 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 802b808:	b530      	push	{r4, r5, lr}
 802b80a:	ed2d 8b10 	vpush	{d8-d15}
 802b80e:	4604      	mov	r4, r0
 802b810:	eef0 8a40 	vmov.f32	s17, s0
 802b814:	eef0 9a60 	vmov.f32	s19, s1
 802b818:	eef0 fa41 	vmov.f32	s31, s2
 802b81c:	eeb0 fa61 	vmov.f32	s30, s3
 802b820:	eef0 ba42 	vmov.f32	s23, s4
 802b824:	eeb0 ca62 	vmov.f32	s24, s5
 802b828:	eef0 aa43 	vmov.f32	s21, s6
 802b82c:	eeb0 ba63 	vmov.f32	s22, s7
 802b830:	460d      	mov	r5, r1
 802b832:	b085      	sub	sp, #20
 802b834:	2d08      	cmp	r5, #8
 802b836:	f200 8113 	bhi.w	802ba60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 802b83a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802b83e:	ee38 daaf 	vadd.f32	s26, s17, s31
 802b842:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802b846:	ee7f 6aab 	vadd.f32	s13, s31, s23
 802b84a:	ee26 6a27 	vmul.f32	s12, s12, s15
 802b84e:	ee2d da27 	vmul.f32	s26, s26, s15
 802b852:	ed8d 6a01 	vstr	s12, [sp, #4]
 802b856:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802b85a:	eeb0 ea4d 	vmov.f32	s28, s26
 802b85e:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802b862:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802b866:	ee79 da8f 	vadd.f32	s27, s19, s30
 802b86a:	ee66 6a27 	vmul.f32	s13, s12, s15
 802b86e:	ee6c caa7 	vmul.f32	s25, s25, s15
 802b872:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802b876:	edcd 6a03 	vstr	s13, [sp, #12]
 802b87a:	ee6d daa7 	vmul.f32	s27, s27, s15
 802b87e:	eef0 6a6c 	vmov.f32	s13, s25
 802b882:	eef0 ea6d 	vmov.f32	s29, s27
 802b886:	eee7 6a27 	vfma.f32	s13, s14, s15
 802b88a:	eee7 ea27 	vfma.f32	s29, s14, s15
 802b88e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802b892:	ee2e ea27 	vmul.f32	s28, s28, s15
 802b896:	ed8d 7a02 	vstr	s14, [sp, #8]
 802b89a:	ed9d 7a03 	vldr	s14, [sp, #12]
 802b89e:	ee6e eaa7 	vmul.f32	s29, s29, s15
 802b8a2:	ee3e 9a07 	vadd.f32	s18, s28, s14
 802b8a6:	ed9d 7a02 	vldr	s14, [sp, #8]
 802b8aa:	ee3e aa87 	vadd.f32	s20, s29, s14
 802b8ae:	ee29 9a27 	vmul.f32	s18, s18, s15
 802b8b2:	ee2a aa27 	vmul.f32	s20, s20, s15
 802b8b6:	eef0 6a67 	vmov.f32	s13, s15
 802b8ba:	2d00      	cmp	r5, #0
 802b8bc:	f000 810b 	beq.w	802bad6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b8c0:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802b8c4:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 802b8c8:	ee7b 7a69 	vsub.f32	s15, s22, s19
 802b8cc:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802b8d0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802b8d4:	eea6 7a27 	vfma.f32	s14, s12, s15
 802b8d8:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802b8dc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802b8e0:	ee3b 5aea 	vsub.f32	s10, s23, s21
 802b8e4:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 802b8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b8ec:	eea5 6a27 	vfma.f32	s12, s10, s15
 802b8f0:	bf48      	it	mi
 802b8f2:	eeb1 7a47 	vnegmi.f32	s14, s14
 802b8f6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802b8fa:	eddf 4a88 	vldr	s9, [pc, #544]	@ 802bb1c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802b8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b902:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802b906:	bf48      	it	mi
 802b908:	eeb1 6a46 	vnegmi.f32	s12, s12
 802b90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b910:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 802b914:	f340 80a8 	ble.w	802ba68 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 802b918:	eeb4 6ae4 	vcmpe.f32	s12, s9
 802b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b920:	dd5a      	ble.n	802b9d8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 802b922:	ee65 5aa5 	vmul.f32	s11, s11, s11
 802b926:	ee37 7a06 	vadd.f32	s14, s14, s12
 802b92a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 802b92e:	ee27 7a07 	vmul.f32	s14, s14, s14
 802b932:	ee65 7a85 	vmul.f32	s15, s11, s10
 802b936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802b93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b93e:	f200 80ca 	bhi.w	802bad6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b942:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802b946:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802b94a:	f000 f930 	bl	802bbae <atan2f>
 802b94e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802b952:	eeb0 8a40 	vmov.f32	s16, s0
 802b956:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802b95a:	f000 f928 	bl	802bbae <atan2f>
 802b95e:	ee38 fa40 	vsub.f32	s30, s16, s0
 802b962:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802b966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b96a:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802b96e:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802b972:	bf48      	it	mi
 802b974:	eeb1 fa4f 	vnegmi.f32	s30, s30
 802b978:	f000 f919 	bl	802bbae <atan2f>
 802b97c:	ee30 0a48 	vsub.f32	s0, s0, s16
 802b980:	eddf 7a67 	vldr	s15, [pc, #412]	@ 802bb20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802b984:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b98c:	eeb4 fae7 	vcmpe.f32	s30, s15
 802b990:	bf48      	it	mi
 802b992:	eeb1 0a40 	vnegmi.f32	s0, s0
 802b996:	eddf 7a62 	vldr	s15, [pc, #392]	@ 802bb20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802b99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b99e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b9a2:	bfa4      	itt	ge
 802b9a4:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 802bb24 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802b9a8:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 802b9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b9b0:	bfa4      	itt	ge
 802b9b2:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 802bb24 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802b9b6:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802b9ba:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802bb28 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802b9be:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802b9c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b9ca:	f140 8084 	bpl.w	802bad6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b9ce:	eef0 0a4a 	vmov.f32	s1, s20
 802b9d2:	eeb0 0a49 	vmov.f32	s0, s18
 802b9d6:	e040      	b.n	802ba5a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 802b9d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802b9dc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802b9e0:	ee27 7a07 	vmul.f32	s14, s14, s14
 802b9e4:	ee67 7a85 	vmul.f32	s15, s15, s10
 802b9e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802b9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b9f0:	d871      	bhi.n	802bad6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b9f2:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802b9f6:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802b9fa:	f000 f8d8 	bl	802bbae <atan2f>
 802b9fe:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802ba02:	eeb0 8a40 	vmov.f32	s16, s0
 802ba06:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802ba0a:	f000 f8d0 	bl	802bbae <atan2f>
 802ba0e:	ee38 0a40 	vsub.f32	s0, s16, s0
 802ba12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802ba16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba1a:	eddf 7a41 	vldr	s15, [pc, #260]	@ 802bb20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802ba1e:	bf48      	it	mi
 802ba20:	eeb1 0a40 	vnegmi.f32	s0, s0
 802ba24:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802ba28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba2c:	bfa4      	itt	ge
 802ba2e:	eddf 7a3d 	vldrge	s15, [pc, #244]	@ 802bb24 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802ba32:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802ba36:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 802bb28 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802ba3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802ba3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba42:	d548      	bpl.n	802bad6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802ba44:	eef0 0a4f 	vmov.f32	s1, s30
 802ba48:	eeb0 0a6f 	vmov.f32	s0, s31
 802ba4c:	4620      	mov	r0, r4
 802ba4e:	f7eb f8dd 	bl	8016c0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802ba52:	eef0 0a4c 	vmov.f32	s1, s24
 802ba56:	eeb0 0a6b 	vmov.f32	s0, s23
 802ba5a:	4620      	mov	r0, r4
 802ba5c:	f7eb f8d6 	bl	8016c0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802ba60:	b005      	add	sp, #20
 802ba62:	ecbd 8b10 	vpop	{d8-d15}
 802ba66:	bd30      	pop	{r4, r5, pc}
 802ba68:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 802bb1c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802ba6c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802ba70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba74:	dd19      	ble.n	802baaa <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 802ba76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802ba7a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802ba7e:	ee26 7a06 	vmul.f32	s14, s12, s12
 802ba82:	ee67 7a85 	vmul.f32	s15, s15, s10
 802ba86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802ba8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba8e:	d822      	bhi.n	802bad6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802ba90:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802ba94:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802ba98:	f000 f889 	bl	802bbae <atan2f>
 802ba9c:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802baa0:	eeb0 8a40 	vmov.f32	s16, s0
 802baa4:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802baa8:	e7af      	b.n	802ba0a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 802baaa:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802baae:	eeb0 7a49 	vmov.f32	s14, s18
 802bab2:	eeb0 6a4a 	vmov.f32	s12, s20
 802bab6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802baba:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802babe:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802bac2:	ee66 7a06 	vmul.f32	s15, s12, s12
 802bac6:	eee7 7a07 	vfma.f32	s15, s14, s14
 802baca:	eef4 7ac5 	vcmpe.f32	s15, s10
 802bace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bad2:	f67f af7c 	bls.w	802b9ce <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802bad6:	3501      	adds	r5, #1
 802bad8:	eef0 0a69 	vmov.f32	s1, s19
 802badc:	eeb0 0a68 	vmov.f32	s0, s17
 802bae0:	4629      	mov	r1, r5
 802bae2:	eef0 3a4a 	vmov.f32	s7, s20
 802bae6:	eeb0 3a49 	vmov.f32	s6, s18
 802baea:	eef0 2a6e 	vmov.f32	s5, s29
 802baee:	eeb0 2a4e 	vmov.f32	s4, s28
 802baf2:	eef0 1a6d 	vmov.f32	s3, s27
 802baf6:	eeb0 1a4d 	vmov.f32	s2, s26
 802bafa:	4620      	mov	r0, r4
 802bafc:	f7ff fe84 	bl	802b808 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802bb00:	eeb0 ca6c 	vmov.f32	s24, s25
 802bb04:	eddd ba01 	vldr	s23, [sp, #4]
 802bb08:	ed9d fa02 	vldr	s30, [sp, #8]
 802bb0c:	eddd fa03 	vldr	s31, [sp, #12]
 802bb10:	eef0 9a4a 	vmov.f32	s19, s20
 802bb14:	eef0 8a49 	vmov.f32	s17, s18
 802bb18:	e68c      	b.n	802b834 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 802bb1a:	bf00      	nop
 802bb1c:	2edbe6ff 	.word	0x2edbe6ff
 802bb20:	40490fdb 	.word	0x40490fdb
 802bb24:	40c90fdb 	.word	0x40c90fdb
 802bb28:	3dcccccd 	.word	0x3dcccccd

0802bb2c <_ZN8touchgfx6CanvasD1Ev>:
 802bb2c:	b510      	push	{r4, lr}
 802bb2e:	4604      	mov	r4, r0
 802bb30:	4b03      	ldr	r3, [pc, #12]	@ (802bb40 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802bb32:	f840 3b14 	str.w	r3, [r0], #20
 802bb36:	f7eb fec3 	bl	80178c0 <_ZN8touchgfx7OutlineD1Ev>
 802bb3a:	4620      	mov	r0, r4
 802bb3c:	bd10      	pop	{r4, pc}
 802bb3e:	bf00      	nop
 802bb40:	0802fd08 	.word	0x0802fd08

0802bb44 <_ZN8touchgfx6CanvasD0Ev>:
 802bb44:	b510      	push	{r4, lr}
 802bb46:	4604      	mov	r4, r0
 802bb48:	f7ff fff0 	bl	802bb2c <_ZN8touchgfx6CanvasD1Ev>
 802bb4c:	4620      	mov	r0, r4
 802bb4e:	2174      	movs	r1, #116	@ 0x74
 802bb50:	f000 f807 	bl	802bb62 <_ZdlPvj>
 802bb54:	4620      	mov	r0, r4
 802bb56:	bd10      	pop	{r4, pc}

0802bb58 <__aeabi_atexit>:
 802bb58:	460b      	mov	r3, r1
 802bb5a:	4601      	mov	r1, r0
 802bb5c:	4618      	mov	r0, r3
 802bb5e:	f000 bfd7 	b.w	802cb10 <__cxa_atexit>

0802bb62 <_ZdlPvj>:
 802bb62:	f000 b812 	b.w	802bb8a <_ZdlPv>

0802bb66 <__cxa_guard_acquire>:
 802bb66:	6802      	ldr	r2, [r0, #0]
 802bb68:	4603      	mov	r3, r0
 802bb6a:	07d2      	lsls	r2, r2, #31
 802bb6c:	d405      	bmi.n	802bb7a <__cxa_guard_acquire+0x14>
 802bb6e:	7842      	ldrb	r2, [r0, #1]
 802bb70:	b102      	cbz	r2, 802bb74 <__cxa_guard_acquire+0xe>
 802bb72:	deff      	udf	#255	@ 0xff
 802bb74:	2001      	movs	r0, #1
 802bb76:	7058      	strb	r0, [r3, #1]
 802bb78:	4770      	bx	lr
 802bb7a:	2000      	movs	r0, #0
 802bb7c:	4770      	bx	lr

0802bb7e <__cxa_guard_release>:
 802bb7e:	2301      	movs	r3, #1
 802bb80:	6003      	str	r3, [r0, #0]
 802bb82:	4770      	bx	lr

0802bb84 <__cxa_pure_virtual>:
 802bb84:	b508      	push	{r3, lr}
 802bb86:	f000 f80d 	bl	802bba4 <_ZSt9terminatev>

0802bb8a <_ZdlPv>:
 802bb8a:	f000 bf0b 	b.w	802c9a4 <free>

0802bb8e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802bb8e:	b508      	push	{r3, lr}
 802bb90:	4780      	blx	r0
 802bb92:	f000 fed4 	bl	802c93e <abort>
	...

0802bb98 <_ZSt13get_terminatev>:
 802bb98:	4b01      	ldr	r3, [pc, #4]	@ (802bba0 <_ZSt13get_terminatev+0x8>)
 802bb9a:	e8d3 0faf 	lda	r0, [r3]
 802bb9e:	4770      	bx	lr
 802bba0:	20000098 	.word	0x20000098

0802bba4 <_ZSt9terminatev>:
 802bba4:	b508      	push	{r3, lr}
 802bba6:	f7ff fff7 	bl	802bb98 <_ZSt13get_terminatev>
 802bbaa:	f7ff fff0 	bl	802bb8e <_ZN10__cxxabiv111__terminateEPFvvE>

0802bbae <atan2f>:
 802bbae:	f000 b94d 	b.w	802be4c <__ieee754_atan2f>
	...

0802bbb4 <sqrtf>:
 802bbb4:	b508      	push	{r3, lr}
 802bbb6:	ed2d 8b02 	vpush	{d8}
 802bbba:	eeb0 8a40 	vmov.f32	s16, s0
 802bbbe:	f000 f8a1 	bl	802bd04 <__ieee754_sqrtf>
 802bbc2:	eeb4 8a48 	vcmp.f32	s16, s16
 802bbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bbca:	d60c      	bvs.n	802bbe6 <sqrtf+0x32>
 802bbcc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802bbec <sqrtf+0x38>
 802bbd0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802bbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bbd8:	d505      	bpl.n	802bbe6 <sqrtf+0x32>
 802bbda:	f001 fa65 	bl	802d0a8 <__errno>
 802bbde:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802bbe2:	2321      	movs	r3, #33	@ 0x21
 802bbe4:	6003      	str	r3, [r0, #0]
 802bbe6:	ecbd 8b02 	vpop	{d8}
 802bbea:	bd08      	pop	{r3, pc}
 802bbec:	00000000 	.word	0x00000000

0802bbf0 <cosf>:
 802bbf0:	ee10 3a10 	vmov	r3, s0
 802bbf4:	b507      	push	{r0, r1, r2, lr}
 802bbf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802bbfa:	4a1d      	ldr	r2, [pc, #116]	@ (802bc70 <cosf+0x80>)
 802bbfc:	4293      	cmp	r3, r2
 802bbfe:	d806      	bhi.n	802bc0e <cosf+0x1e>
 802bc00:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 802bc74 <cosf+0x84>
 802bc04:	b003      	add	sp, #12
 802bc06:	f85d eb04 	ldr.w	lr, [sp], #4
 802bc0a:	f000 b87f 	b.w	802bd0c <__kernel_cosf>
 802bc0e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bc12:	d304      	bcc.n	802bc1e <cosf+0x2e>
 802bc14:	ee30 0a40 	vsub.f32	s0, s0, s0
 802bc18:	b003      	add	sp, #12
 802bc1a:	f85d fb04 	ldr.w	pc, [sp], #4
 802bc1e:	4668      	mov	r0, sp
 802bc20:	f000 f9b2 	bl	802bf88 <__ieee754_rem_pio2f>
 802bc24:	f000 0003 	and.w	r0, r0, #3
 802bc28:	2801      	cmp	r0, #1
 802bc2a:	d009      	beq.n	802bc40 <cosf+0x50>
 802bc2c:	2802      	cmp	r0, #2
 802bc2e:	d010      	beq.n	802bc52 <cosf+0x62>
 802bc30:	b9b0      	cbnz	r0, 802bc60 <cosf+0x70>
 802bc32:	eddd 0a01 	vldr	s1, [sp, #4]
 802bc36:	ed9d 0a00 	vldr	s0, [sp]
 802bc3a:	f000 f867 	bl	802bd0c <__kernel_cosf>
 802bc3e:	e7eb      	b.n	802bc18 <cosf+0x28>
 802bc40:	eddd 0a01 	vldr	s1, [sp, #4]
 802bc44:	ed9d 0a00 	vldr	s0, [sp]
 802bc48:	f000 f8b8 	bl	802bdbc <__kernel_sinf>
 802bc4c:	eeb1 0a40 	vneg.f32	s0, s0
 802bc50:	e7e2      	b.n	802bc18 <cosf+0x28>
 802bc52:	eddd 0a01 	vldr	s1, [sp, #4]
 802bc56:	ed9d 0a00 	vldr	s0, [sp]
 802bc5a:	f000 f857 	bl	802bd0c <__kernel_cosf>
 802bc5e:	e7f5      	b.n	802bc4c <cosf+0x5c>
 802bc60:	2001      	movs	r0, #1
 802bc62:	eddd 0a01 	vldr	s1, [sp, #4]
 802bc66:	ed9d 0a00 	vldr	s0, [sp]
 802bc6a:	f000 f8a7 	bl	802bdbc <__kernel_sinf>
 802bc6e:	e7d3      	b.n	802bc18 <cosf+0x28>
 802bc70:	3f490fd8 	.word	0x3f490fd8
 802bc74:	00000000 	.word	0x00000000

0802bc78 <sinf>:
 802bc78:	ee10 3a10 	vmov	r3, s0
 802bc7c:	b507      	push	{r0, r1, r2, lr}
 802bc7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802bc82:	4a1e      	ldr	r2, [pc, #120]	@ (802bcfc <sinf+0x84>)
 802bc84:	4293      	cmp	r3, r2
 802bc86:	d807      	bhi.n	802bc98 <sinf+0x20>
 802bc88:	2000      	movs	r0, #0
 802bc8a:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802bd00 <sinf+0x88>
 802bc8e:	b003      	add	sp, #12
 802bc90:	f85d eb04 	ldr.w	lr, [sp], #4
 802bc94:	f000 b892 	b.w	802bdbc <__kernel_sinf>
 802bc98:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bc9c:	d304      	bcc.n	802bca8 <sinf+0x30>
 802bc9e:	ee30 0a40 	vsub.f32	s0, s0, s0
 802bca2:	b003      	add	sp, #12
 802bca4:	f85d fb04 	ldr.w	pc, [sp], #4
 802bca8:	4668      	mov	r0, sp
 802bcaa:	f000 f96d 	bl	802bf88 <__ieee754_rem_pio2f>
 802bcae:	f000 0003 	and.w	r0, r0, #3
 802bcb2:	2801      	cmp	r0, #1
 802bcb4:	d00a      	beq.n	802bccc <sinf+0x54>
 802bcb6:	2802      	cmp	r0, #2
 802bcb8:	d00f      	beq.n	802bcda <sinf+0x62>
 802bcba:	b9c0      	cbnz	r0, 802bcee <sinf+0x76>
 802bcbc:	2001      	movs	r0, #1
 802bcbe:	eddd 0a01 	vldr	s1, [sp, #4]
 802bcc2:	ed9d 0a00 	vldr	s0, [sp]
 802bcc6:	f000 f879 	bl	802bdbc <__kernel_sinf>
 802bcca:	e7ea      	b.n	802bca2 <sinf+0x2a>
 802bccc:	eddd 0a01 	vldr	s1, [sp, #4]
 802bcd0:	ed9d 0a00 	vldr	s0, [sp]
 802bcd4:	f000 f81a 	bl	802bd0c <__kernel_cosf>
 802bcd8:	e7e3      	b.n	802bca2 <sinf+0x2a>
 802bcda:	2001      	movs	r0, #1
 802bcdc:	eddd 0a01 	vldr	s1, [sp, #4]
 802bce0:	ed9d 0a00 	vldr	s0, [sp]
 802bce4:	f000 f86a 	bl	802bdbc <__kernel_sinf>
 802bce8:	eeb1 0a40 	vneg.f32	s0, s0
 802bcec:	e7d9      	b.n	802bca2 <sinf+0x2a>
 802bcee:	eddd 0a01 	vldr	s1, [sp, #4]
 802bcf2:	ed9d 0a00 	vldr	s0, [sp]
 802bcf6:	f000 f809 	bl	802bd0c <__kernel_cosf>
 802bcfa:	e7f5      	b.n	802bce8 <sinf+0x70>
 802bcfc:	3f490fd8 	.word	0x3f490fd8
 802bd00:	00000000 	.word	0x00000000

0802bd04 <__ieee754_sqrtf>:
 802bd04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802bd08:	4770      	bx	lr
	...

0802bd0c <__kernel_cosf>:
 802bd0c:	ee10 3a10 	vmov	r3, s0
 802bd10:	eef0 6a40 	vmov.f32	s13, s0
 802bd14:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802bd18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802bd1c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802bd20:	d204      	bcs.n	802bd2c <__kernel_cosf+0x20>
 802bd22:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 802bd26:	ee17 2a90 	vmov	r2, s15
 802bd2a:	b342      	cbz	r2, 802bd7e <__kernel_cosf+0x72>
 802bd2c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802bd30:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 802bd9c <__kernel_cosf+0x90>
 802bd34:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 802bda0 <__kernel_cosf+0x94>
 802bd38:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 802bd3c:	4a19      	ldr	r2, [pc, #100]	@ (802bda4 <__kernel_cosf+0x98>)
 802bd3e:	eea7 6a27 	vfma.f32	s12, s14, s15
 802bd42:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802bda8 <__kernel_cosf+0x9c>
 802bd46:	4293      	cmp	r3, r2
 802bd48:	eee6 7a07 	vfma.f32	s15, s12, s14
 802bd4c:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 802bdac <__kernel_cosf+0xa0>
 802bd50:	eea7 6a87 	vfma.f32	s12, s15, s14
 802bd54:	eddf 7a16 	vldr	s15, [pc, #88]	@ 802bdb0 <__kernel_cosf+0xa4>
 802bd58:	eee6 7a07 	vfma.f32	s15, s12, s14
 802bd5c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802bdb4 <__kernel_cosf+0xa8>
 802bd60:	eea7 6a87 	vfma.f32	s12, s15, s14
 802bd64:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802bd68:	ee67 7a27 	vmul.f32	s15, s14, s15
 802bd6c:	ee26 6a07 	vmul.f32	s12, s12, s14
 802bd70:	eee7 0a06 	vfma.f32	s1, s14, s12
 802bd74:	d804      	bhi.n	802bd80 <__kernel_cosf+0x74>
 802bd76:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802bd7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802bd7e:	4770      	bx	lr
 802bd80:	4a0d      	ldr	r2, [pc, #52]	@ (802bdb8 <__kernel_cosf+0xac>)
 802bd82:	4293      	cmp	r3, r2
 802bd84:	bf96      	itet	ls
 802bd86:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 802bd8a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 802bd8e:	ee07 3a10 	vmovls	s14, r3
 802bd92:	ee30 0a47 	vsub.f32	s0, s0, s14
 802bd96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bd9a:	e7ec      	b.n	802bd76 <__kernel_cosf+0x6a>
 802bd9c:	ad47d74e 	.word	0xad47d74e
 802bda0:	310f74f6 	.word	0x310f74f6
 802bda4:	3e999999 	.word	0x3e999999
 802bda8:	b493f27c 	.word	0xb493f27c
 802bdac:	37d00d01 	.word	0x37d00d01
 802bdb0:	bab60b61 	.word	0xbab60b61
 802bdb4:	3d2aaaab 	.word	0x3d2aaaab
 802bdb8:	3f480000 	.word	0x3f480000

0802bdbc <__kernel_sinf>:
 802bdbc:	ee10 3a10 	vmov	r3, s0
 802bdc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802bdc4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802bdc8:	d204      	bcs.n	802bdd4 <__kernel_sinf+0x18>
 802bdca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802bdce:	ee17 3a90 	vmov	r3, s15
 802bdd2:	b35b      	cbz	r3, 802be2c <__kernel_sinf+0x70>
 802bdd4:	ee20 7a00 	vmul.f32	s14, s0, s0
 802bdd8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802be30 <__kernel_sinf+0x74>
 802bddc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802be34 <__kernel_sinf+0x78>
 802bde0:	eea7 6a27 	vfma.f32	s12, s14, s15
 802bde4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 802be38 <__kernel_sinf+0x7c>
 802bde8:	ee60 6a07 	vmul.f32	s13, s0, s14
 802bdec:	eee6 7a07 	vfma.f32	s15, s12, s14
 802bdf0:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 802be3c <__kernel_sinf+0x80>
 802bdf4:	eea7 6a87 	vfma.f32	s12, s15, s14
 802bdf8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 802be40 <__kernel_sinf+0x84>
 802bdfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 802be00:	b930      	cbnz	r0, 802be10 <__kernel_sinf+0x54>
 802be02:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 802be44 <__kernel_sinf+0x88>
 802be06:	eea7 6a27 	vfma.f32	s12, s14, s15
 802be0a:	eea6 0a26 	vfma.f32	s0, s12, s13
 802be0e:	4770      	bx	lr
 802be10:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802be14:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802be18:	eee0 7a86 	vfma.f32	s15, s1, s12
 802be1c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802be20:	eddf 7a09 	vldr	s15, [pc, #36]	@ 802be48 <__kernel_sinf+0x8c>
 802be24:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802be28:	ee30 0a60 	vsub.f32	s0, s0, s1
 802be2c:	4770      	bx	lr
 802be2e:	bf00      	nop
 802be30:	2f2ec9d3 	.word	0x2f2ec9d3
 802be34:	b2d72f34 	.word	0xb2d72f34
 802be38:	3638ef1b 	.word	0x3638ef1b
 802be3c:	b9500d01 	.word	0xb9500d01
 802be40:	3c088889 	.word	0x3c088889
 802be44:	be2aaaab 	.word	0xbe2aaaab
 802be48:	3e2aaaab 	.word	0x3e2aaaab

0802be4c <__ieee754_atan2f>:
 802be4c:	ee10 2a90 	vmov	r2, s1
 802be50:	eef0 7a40 	vmov.f32	s15, s0
 802be54:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 802be58:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802be5c:	b510      	push	{r4, lr}
 802be5e:	d806      	bhi.n	802be6e <__ieee754_atan2f+0x22>
 802be60:	ee10 0a10 	vmov	r0, s0
 802be64:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802be68:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802be6c:	d904      	bls.n	802be78 <__ieee754_atan2f+0x2c>
 802be6e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802be72:	eeb0 0a67 	vmov.f32	s0, s15
 802be76:	bd10      	pop	{r4, pc}
 802be78:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 802be7c:	d103      	bne.n	802be86 <__ieee754_atan2f+0x3a>
 802be7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802be82:	f000 b9af 	b.w	802c1e4 <atanf>
 802be86:	1794      	asrs	r4, r2, #30
 802be88:	f004 0402 	and.w	r4, r4, #2
 802be8c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802be90:	b93b      	cbnz	r3, 802bea2 <__ieee754_atan2f+0x56>
 802be92:	2c02      	cmp	r4, #2
 802be94:	d05c      	beq.n	802bf50 <__ieee754_atan2f+0x104>
 802be96:	2c03      	cmp	r4, #3
 802be98:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802bf64 <__ieee754_atan2f+0x118>
 802be9c:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802bea0:	e7e7      	b.n	802be72 <__ieee754_atan2f+0x26>
 802bea2:	b939      	cbnz	r1, 802beb4 <__ieee754_atan2f+0x68>
 802bea4:	2800      	cmp	r0, #0
 802bea6:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802bf68 <__ieee754_atan2f+0x11c>
 802beaa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802bf6c <__ieee754_atan2f+0x120>
 802beae:	fe67 7a27 	vselge.f32	s15, s14, s15
 802beb2:	e7de      	b.n	802be72 <__ieee754_atan2f+0x26>
 802beb4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802beb8:	d110      	bne.n	802bedc <__ieee754_atan2f+0x90>
 802beba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bebe:	f104 34ff 	add.w	r4, r4, #4294967295
 802bec2:	d107      	bne.n	802bed4 <__ieee754_atan2f+0x88>
 802bec4:	2c02      	cmp	r4, #2
 802bec6:	d846      	bhi.n	802bf56 <__ieee754_atan2f+0x10a>
 802bec8:	4b29      	ldr	r3, [pc, #164]	@ (802bf70 <__ieee754_atan2f+0x124>)
 802beca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802bece:	edd3 7a00 	vldr	s15, [r3]
 802bed2:	e7ce      	b.n	802be72 <__ieee754_atan2f+0x26>
 802bed4:	2c02      	cmp	r4, #2
 802bed6:	d841      	bhi.n	802bf5c <__ieee754_atan2f+0x110>
 802bed8:	4b26      	ldr	r3, [pc, #152]	@ (802bf74 <__ieee754_atan2f+0x128>)
 802beda:	e7f6      	b.n	802beca <__ieee754_atan2f+0x7e>
 802bedc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bee0:	d0e0      	beq.n	802bea4 <__ieee754_atan2f+0x58>
 802bee2:	1a5b      	subs	r3, r3, r1
 802bee4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802bee8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802beec:	da1a      	bge.n	802bf24 <__ieee754_atan2f+0xd8>
 802beee:	2a00      	cmp	r2, #0
 802bef0:	da01      	bge.n	802bef6 <__ieee754_atan2f+0xaa>
 802bef2:	313c      	adds	r1, #60	@ 0x3c
 802bef4:	db19      	blt.n	802bf2a <__ieee754_atan2f+0xde>
 802bef6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802befa:	f000 fa47 	bl	802c38c <fabsf>
 802befe:	f000 f971 	bl	802c1e4 <atanf>
 802bf02:	eef0 7a40 	vmov.f32	s15, s0
 802bf06:	2c01      	cmp	r4, #1
 802bf08:	d012      	beq.n	802bf30 <__ieee754_atan2f+0xe4>
 802bf0a:	2c02      	cmp	r4, #2
 802bf0c:	d017      	beq.n	802bf3e <__ieee754_atan2f+0xf2>
 802bf0e:	2c00      	cmp	r4, #0
 802bf10:	d0af      	beq.n	802be72 <__ieee754_atan2f+0x26>
 802bf12:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802bf78 <__ieee754_atan2f+0x12c>
 802bf16:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bf1a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 802bf7c <__ieee754_atan2f+0x130>
 802bf1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bf22:	e7a6      	b.n	802be72 <__ieee754_atan2f+0x26>
 802bf24:	eddf 7a11 	vldr	s15, [pc, #68]	@ 802bf6c <__ieee754_atan2f+0x120>
 802bf28:	e7ed      	b.n	802bf06 <__ieee754_atan2f+0xba>
 802bf2a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802bf80 <__ieee754_atan2f+0x134>
 802bf2e:	e7ea      	b.n	802bf06 <__ieee754_atan2f+0xba>
 802bf30:	ee17 3a90 	vmov	r3, s15
 802bf34:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802bf38:	ee07 3a90 	vmov	s15, r3
 802bf3c:	e799      	b.n	802be72 <__ieee754_atan2f+0x26>
 802bf3e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802bf78 <__ieee754_atan2f+0x12c>
 802bf42:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bf46:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 802bf7c <__ieee754_atan2f+0x130>
 802bf4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802bf4e:	e790      	b.n	802be72 <__ieee754_atan2f+0x26>
 802bf50:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 802bf7c <__ieee754_atan2f+0x130>
 802bf54:	e78d      	b.n	802be72 <__ieee754_atan2f+0x26>
 802bf56:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 802bf84 <__ieee754_atan2f+0x138>
 802bf5a:	e78a      	b.n	802be72 <__ieee754_atan2f+0x26>
 802bf5c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802bf80 <__ieee754_atan2f+0x134>
 802bf60:	e787      	b.n	802be72 <__ieee754_atan2f+0x26>
 802bf62:	bf00      	nop
 802bf64:	c0490fdb 	.word	0xc0490fdb
 802bf68:	bfc90fdb 	.word	0xbfc90fdb
 802bf6c:	3fc90fdb 	.word	0x3fc90fdb
 802bf70:	0802fd20 	.word	0x0802fd20
 802bf74:	0802fd14 	.word	0x0802fd14
 802bf78:	33bbbd2e 	.word	0x33bbbd2e
 802bf7c:	40490fdb 	.word	0x40490fdb
 802bf80:	00000000 	.word	0x00000000
 802bf84:	3f490fdb 	.word	0x3f490fdb

0802bf88 <__ieee754_rem_pio2f>:
 802bf88:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bf8a:	ee10 6a10 	vmov	r6, s0
 802bf8e:	4b87      	ldr	r3, [pc, #540]	@ (802c1ac <__ieee754_rem_pio2f+0x224>)
 802bf90:	b087      	sub	sp, #28
 802bf92:	4604      	mov	r4, r0
 802bf94:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802bf98:	429d      	cmp	r5, r3
 802bf9a:	d805      	bhi.n	802bfa8 <__ieee754_rem_pio2f+0x20>
 802bf9c:	2300      	movs	r3, #0
 802bf9e:	ed80 0a00 	vstr	s0, [r0]
 802bfa2:	6043      	str	r3, [r0, #4]
 802bfa4:	2000      	movs	r0, #0
 802bfa6:	e022      	b.n	802bfee <__ieee754_rem_pio2f+0x66>
 802bfa8:	4b81      	ldr	r3, [pc, #516]	@ (802c1b0 <__ieee754_rem_pio2f+0x228>)
 802bfaa:	429d      	cmp	r5, r3
 802bfac:	d83a      	bhi.n	802c024 <__ieee754_rem_pio2f+0x9c>
 802bfae:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802bfb2:	2e00      	cmp	r6, #0
 802bfb4:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 802c1b4 <__ieee754_rem_pio2f+0x22c>
 802bfb8:	f023 030f 	bic.w	r3, r3, #15
 802bfbc:	4a7e      	ldr	r2, [pc, #504]	@ (802c1b8 <__ieee754_rem_pio2f+0x230>)
 802bfbe:	dd18      	ble.n	802bff2 <__ieee754_rem_pio2f+0x6a>
 802bfc0:	4293      	cmp	r3, r2
 802bfc2:	ee70 7a47 	vsub.f32	s15, s0, s14
 802bfc6:	bf09      	itett	eq
 802bfc8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	@ 802c1bc <__ieee754_rem_pio2f+0x234>
 802bfcc:	eddf 6a7c 	vldrne	s13, [pc, #496]	@ 802c1c0 <__ieee754_rem_pio2f+0x238>
 802bfd0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802bfd4:	eddf 6a7b 	vldreq	s13, [pc, #492]	@ 802c1c4 <__ieee754_rem_pio2f+0x23c>
 802bfd8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 802bfdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bfe0:	ed80 7a00 	vstr	s14, [r0]
 802bfe4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802bfe8:	edc0 7a01 	vstr	s15, [r0, #4]
 802bfec:	2001      	movs	r0, #1
 802bfee:	b007      	add	sp, #28
 802bff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bff2:	4293      	cmp	r3, r2
 802bff4:	ee70 7a07 	vadd.f32	s15, s0, s14
 802bff8:	bf09      	itett	eq
 802bffa:	ed9f 7a70 	vldreq	s14, [pc, #448]	@ 802c1bc <__ieee754_rem_pio2f+0x234>
 802bffe:	eddf 6a70 	vldrne	s13, [pc, #448]	@ 802c1c0 <__ieee754_rem_pio2f+0x238>
 802c002:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802c006:	eddf 6a6f 	vldreq	s13, [pc, #444]	@ 802c1c4 <__ieee754_rem_pio2f+0x23c>
 802c00a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c00e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c012:	ed80 7a00 	vstr	s14, [r0]
 802c016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c01a:	edc0 7a01 	vstr	s15, [r0, #4]
 802c01e:	f04f 30ff 	mov.w	r0, #4294967295
 802c022:	e7e4      	b.n	802bfee <__ieee754_rem_pio2f+0x66>
 802c024:	4b68      	ldr	r3, [pc, #416]	@ (802c1c8 <__ieee754_rem_pio2f+0x240>)
 802c026:	429d      	cmp	r5, r3
 802c028:	d872      	bhi.n	802c110 <__ieee754_rem_pio2f+0x188>
 802c02a:	f000 f9af 	bl	802c38c <fabsf>
 802c02e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802c032:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 802c1cc <__ieee754_rem_pio2f+0x244>
 802c036:	eee0 7a07 	vfma.f32	s15, s0, s14
 802c03a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c03e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802c042:	ee17 0a90 	vmov	r0, s15
 802c046:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802c1b4 <__ieee754_rem_pio2f+0x22c>
 802c04a:	281f      	cmp	r0, #31
 802c04c:	eea7 0a67 	vfms.f32	s0, s14, s15
 802c050:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802c1c0 <__ieee754_rem_pio2f+0x238>
 802c054:	eeb1 6a47 	vneg.f32	s12, s14
 802c058:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c05c:	ee70 6a67 	vsub.f32	s13, s0, s15
 802c060:	ee16 1a90 	vmov	r1, s13
 802c064:	dc09      	bgt.n	802c07a <__ieee754_rem_pio2f+0xf2>
 802c066:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802c06a:	1e47      	subs	r7, r0, #1
 802c06c:	4a58      	ldr	r2, [pc, #352]	@ (802c1d0 <__ieee754_rem_pio2f+0x248>)
 802c06e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802c072:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 802c076:	4293      	cmp	r3, r2
 802c078:	d106      	bne.n	802c088 <__ieee754_rem_pio2f+0x100>
 802c07a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 802c07e:	15eb      	asrs	r3, r5, #23
 802c080:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802c084:	2a08      	cmp	r2, #8
 802c086:	dc14      	bgt.n	802c0b2 <__ieee754_rem_pio2f+0x12a>
 802c088:	6021      	str	r1, [r4, #0]
 802c08a:	ed94 7a00 	vldr	s14, [r4]
 802c08e:	2e00      	cmp	r6, #0
 802c090:	ee30 0a47 	vsub.f32	s0, s0, s14
 802c094:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c098:	ed84 0a01 	vstr	s0, [r4, #4]
 802c09c:	daa7      	bge.n	802bfee <__ieee754_rem_pio2f+0x66>
 802c09e:	eeb1 7a47 	vneg.f32	s14, s14
 802c0a2:	eeb1 0a40 	vneg.f32	s0, s0
 802c0a6:	ed84 7a00 	vstr	s14, [r4]
 802c0aa:	ed84 0a01 	vstr	s0, [r4, #4]
 802c0ae:	4240      	negs	r0, r0
 802c0b0:	e79d      	b.n	802bfee <__ieee754_rem_pio2f+0x66>
 802c0b2:	eef0 6a40 	vmov.f32	s13, s0
 802c0b6:	eddf 5a41 	vldr	s11, [pc, #260]	@ 802c1bc <__ieee754_rem_pio2f+0x234>
 802c0ba:	eee6 6a25 	vfma.f32	s13, s12, s11
 802c0be:	ee70 7a66 	vsub.f32	s15, s0, s13
 802c0c2:	eee6 7a25 	vfma.f32	s15, s12, s11
 802c0c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 802c1c4 <__ieee754_rem_pio2f+0x23c>
 802c0ca:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802c0ce:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802c0d2:	ee15 2a90 	vmov	r2, s11
 802c0d6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802c0da:	1a5b      	subs	r3, r3, r1
 802c0dc:	2b19      	cmp	r3, #25
 802c0de:	dc04      	bgt.n	802c0ea <__ieee754_rem_pio2f+0x162>
 802c0e0:	eeb0 0a66 	vmov.f32	s0, s13
 802c0e4:	edc4 5a00 	vstr	s11, [r4]
 802c0e8:	e7cf      	b.n	802c08a <__ieee754_rem_pio2f+0x102>
 802c0ea:	eeb0 0a66 	vmov.f32	s0, s13
 802c0ee:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802c1d4 <__ieee754_rem_pio2f+0x24c>
 802c0f2:	eea6 0a25 	vfma.f32	s0, s12, s11
 802c0f6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802c0fa:	eddf 6a37 	vldr	s13, [pc, #220]	@ 802c1d8 <__ieee754_rem_pio2f+0x250>
 802c0fe:	eee6 7a25 	vfma.f32	s15, s12, s11
 802c102:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802c106:	ee30 7a67 	vsub.f32	s14, s0, s15
 802c10a:	ed84 7a00 	vstr	s14, [r4]
 802c10e:	e7bc      	b.n	802c08a <__ieee754_rem_pio2f+0x102>
 802c110:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 802c114:	d306      	bcc.n	802c124 <__ieee754_rem_pio2f+0x19c>
 802c116:	ee70 7a40 	vsub.f32	s15, s0, s0
 802c11a:	edc0 7a01 	vstr	s15, [r0, #4]
 802c11e:	edc0 7a00 	vstr	s15, [r0]
 802c122:	e73f      	b.n	802bfa4 <__ieee754_rem_pio2f+0x1c>
 802c124:	15ea      	asrs	r2, r5, #23
 802c126:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 802c1dc <__ieee754_rem_pio2f+0x254>
 802c12a:	3a86      	subs	r2, #134	@ 0x86
 802c12c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802c130:	ee07 3a90 	vmov	s15, r3
 802c134:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802c138:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802c13c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c140:	ed8d 7a03 	vstr	s14, [sp, #12]
 802c144:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802c148:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802c14c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802c150:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c154:	ed8d 7a04 	vstr	s14, [sp, #16]
 802c158:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802c15c:	eef5 7a40 	vcmp.f32	s15, #0.0
 802c160:	edcd 7a05 	vstr	s15, [sp, #20]
 802c164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c168:	d11e      	bne.n	802c1a8 <__ieee754_rem_pio2f+0x220>
 802c16a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802c16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c172:	bf0c      	ite	eq
 802c174:	2301      	moveq	r3, #1
 802c176:	2302      	movne	r3, #2
 802c178:	4919      	ldr	r1, [pc, #100]	@ (802c1e0 <__ieee754_rem_pio2f+0x258>)
 802c17a:	a803      	add	r0, sp, #12
 802c17c:	9101      	str	r1, [sp, #4]
 802c17e:	2102      	movs	r1, #2
 802c180:	9100      	str	r1, [sp, #0]
 802c182:	4621      	mov	r1, r4
 802c184:	f000 f96e 	bl	802c464 <__kernel_rem_pio2f>
 802c188:	2e00      	cmp	r6, #0
 802c18a:	f6bf af30 	bge.w	802bfee <__ieee754_rem_pio2f+0x66>
 802c18e:	edd4 7a00 	vldr	s15, [r4]
 802c192:	eef1 7a67 	vneg.f32	s15, s15
 802c196:	edc4 7a00 	vstr	s15, [r4]
 802c19a:	edd4 7a01 	vldr	s15, [r4, #4]
 802c19e:	eef1 7a67 	vneg.f32	s15, s15
 802c1a2:	edc4 7a01 	vstr	s15, [r4, #4]
 802c1a6:	e782      	b.n	802c0ae <__ieee754_rem_pio2f+0x126>
 802c1a8:	2303      	movs	r3, #3
 802c1aa:	e7e5      	b.n	802c178 <__ieee754_rem_pio2f+0x1f0>
 802c1ac:	3f490fd8 	.word	0x3f490fd8
 802c1b0:	4016cbe3 	.word	0x4016cbe3
 802c1b4:	3fc90f80 	.word	0x3fc90f80
 802c1b8:	3fc90fd0 	.word	0x3fc90fd0
 802c1bc:	37354400 	.word	0x37354400
 802c1c0:	37354443 	.word	0x37354443
 802c1c4:	2e85a308 	.word	0x2e85a308
 802c1c8:	43490f80 	.word	0x43490f80
 802c1cc:	3f22f984 	.word	0x3f22f984
 802c1d0:	0802fd2c 	.word	0x0802fd2c
 802c1d4:	2e85a300 	.word	0x2e85a300
 802c1d8:	248d3132 	.word	0x248d3132
 802c1dc:	43800000 	.word	0x43800000
 802c1e0:	0802fdac 	.word	0x0802fdac

0802c1e4 <atanf>:
 802c1e4:	b538      	push	{r3, r4, r5, lr}
 802c1e6:	ee10 5a10 	vmov	r5, s0
 802c1ea:	eef0 7a40 	vmov.f32	s15, s0
 802c1ee:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802c1f2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802c1f6:	d30f      	bcc.n	802c218 <atanf+0x34>
 802c1f8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802c1fc:	d904      	bls.n	802c208 <atanf+0x24>
 802c1fe:	ee70 7a00 	vadd.f32	s15, s0, s0
 802c202:	eeb0 0a67 	vmov.f32	s0, s15
 802c206:	bd38      	pop	{r3, r4, r5, pc}
 802c208:	2d00      	cmp	r5, #0
 802c20a:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 802c340 <atanf+0x15c>
 802c20e:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802c344 <atanf+0x160>
 802c212:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802c216:	e7f4      	b.n	802c202 <atanf+0x1e>
 802c218:	4b4b      	ldr	r3, [pc, #300]	@ (802c348 <atanf+0x164>)
 802c21a:	429c      	cmp	r4, r3
 802c21c:	d810      	bhi.n	802c240 <atanf+0x5c>
 802c21e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802c222:	d20a      	bcs.n	802c23a <atanf+0x56>
 802c224:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802c34c <atanf+0x168>
 802c228:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802c22c:	ee30 7a07 	vadd.f32	s14, s0, s14
 802c230:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802c234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c238:	dce3      	bgt.n	802c202 <atanf+0x1e>
 802c23a:	f04f 33ff 	mov.w	r3, #4294967295
 802c23e:	e013      	b.n	802c268 <atanf+0x84>
 802c240:	f000 f8a4 	bl	802c38c <fabsf>
 802c244:	4b42      	ldr	r3, [pc, #264]	@ (802c350 <atanf+0x16c>)
 802c246:	429c      	cmp	r4, r3
 802c248:	d84f      	bhi.n	802c2ea <atanf+0x106>
 802c24a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802c24e:	429c      	cmp	r4, r3
 802c250:	d841      	bhi.n	802c2d6 <atanf+0xf2>
 802c252:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802c256:	2300      	movs	r3, #0
 802c258:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802c25c:	eea0 7a27 	vfma.f32	s14, s0, s15
 802c260:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c264:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c268:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 802c354 <atanf+0x170>
 802c26c:	1c5a      	adds	r2, r3, #1
 802c26e:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 802c358 <atanf+0x174>
 802c272:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 802c35c <atanf+0x178>
 802c276:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802c27a:	ee66 6a06 	vmul.f32	s13, s12, s12
 802c27e:	eee6 5a87 	vfma.f32	s11, s13, s14
 802c282:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 802c360 <atanf+0x17c>
 802c286:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802c28a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802c364 <atanf+0x180>
 802c28e:	eee7 5a26 	vfma.f32	s11, s14, s13
 802c292:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 802c368 <atanf+0x184>
 802c296:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802c29a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802c36c <atanf+0x188>
 802c29e:	eee7 5a26 	vfma.f32	s11, s14, s13
 802c2a2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802c370 <atanf+0x18c>
 802c2a6:	eea6 5a87 	vfma.f32	s10, s13, s14
 802c2aa:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802c374 <atanf+0x190>
 802c2ae:	eea5 7a26 	vfma.f32	s14, s10, s13
 802c2b2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 802c378 <atanf+0x194>
 802c2b6:	eea7 5a26 	vfma.f32	s10, s14, s13
 802c2ba:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802c37c <atanf+0x198>
 802c2be:	eea5 7a26 	vfma.f32	s14, s10, s13
 802c2c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 802c2c6:	eea5 7a86 	vfma.f32	s14, s11, s12
 802c2ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 802c2ce:	d121      	bne.n	802c314 <atanf+0x130>
 802c2d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c2d4:	e795      	b.n	802c202 <atanf+0x1e>
 802c2d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802c2da:	2301      	movs	r3, #1
 802c2dc:	ee30 7a67 	vsub.f32	s14, s0, s15
 802c2e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c2e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c2e8:	e7be      	b.n	802c268 <atanf+0x84>
 802c2ea:	4b25      	ldr	r3, [pc, #148]	@ (802c380 <atanf+0x19c>)
 802c2ec:	429c      	cmp	r4, r3
 802c2ee:	d80b      	bhi.n	802c308 <atanf+0x124>
 802c2f0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802c2f4:	2302      	movs	r3, #2
 802c2f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802c2fa:	ee70 6a67 	vsub.f32	s13, s0, s15
 802c2fe:	eea0 7a27 	vfma.f32	s14, s0, s15
 802c302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802c306:	e7af      	b.n	802c268 <atanf+0x84>
 802c308:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802c30c:	2303      	movs	r3, #3
 802c30e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c312:	e7a9      	b.n	802c268 <atanf+0x84>
 802c314:	4a1b      	ldr	r2, [pc, #108]	@ (802c384 <atanf+0x1a0>)
 802c316:	2d00      	cmp	r5, #0
 802c318:	491b      	ldr	r1, [pc, #108]	@ (802c388 <atanf+0x1a4>)
 802c31a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802c31e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802c322:	edd3 6a00 	vldr	s13, [r3]
 802c326:	ee37 7a66 	vsub.f32	s14, s14, s13
 802c32a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802c32e:	edd2 7a00 	vldr	s15, [r2]
 802c332:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c336:	bfb8      	it	lt
 802c338:	eef1 7a67 	vneglt.f32	s15, s15
 802c33c:	e761      	b.n	802c202 <atanf+0x1e>
 802c33e:	bf00      	nop
 802c340:	bfc90fdb 	.word	0xbfc90fdb
 802c344:	3fc90fdb 	.word	0x3fc90fdb
 802c348:	3edfffff 	.word	0x3edfffff
 802c34c:	7149f2ca 	.word	0x7149f2ca
 802c350:	3f97ffff 	.word	0x3f97ffff
 802c354:	3c8569d7 	.word	0x3c8569d7
 802c358:	3d4bda59 	.word	0x3d4bda59
 802c35c:	bd6ef16b 	.word	0xbd6ef16b
 802c360:	3d886b35 	.word	0x3d886b35
 802c364:	3dba2e6e 	.word	0x3dba2e6e
 802c368:	3e124925 	.word	0x3e124925
 802c36c:	3eaaaaab 	.word	0x3eaaaaab
 802c370:	bd15a221 	.word	0xbd15a221
 802c374:	bd9d8795 	.word	0xbd9d8795
 802c378:	bde38e38 	.word	0xbde38e38
 802c37c:	be4ccccd 	.word	0xbe4ccccd
 802c380:	401bffff 	.word	0x401bffff
 802c384:	080300d4 	.word	0x080300d4
 802c388:	080300c4 	.word	0x080300c4

0802c38c <fabsf>:
 802c38c:	ee10 3a10 	vmov	r3, s0
 802c390:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802c394:	ee00 3a10 	vmov	s0, r3
 802c398:	4770      	bx	lr
	...

0802c39c <scalbnf>:
 802c39c:	ee10 3a10 	vmov	r3, s0
 802c3a0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 802c3a4:	d02a      	beq.n	802c3fc <scalbnf+0x60>
 802c3a6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 802c3aa:	d302      	bcc.n	802c3b2 <scalbnf+0x16>
 802c3ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c3b0:	4770      	bx	lr
 802c3b2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 802c3b6:	d122      	bne.n	802c3fe <scalbnf+0x62>
 802c3b8:	4b23      	ldr	r3, [pc, #140]	@ (802c448 <scalbnf+0xac>)
 802c3ba:	eddf 7a24 	vldr	s15, [pc, #144]	@ 802c44c <scalbnf+0xb0>
 802c3be:	4298      	cmp	r0, r3
 802c3c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 802c3c4:	db16      	blt.n	802c3f4 <scalbnf+0x58>
 802c3c6:	ee10 3a10 	vmov	r3, s0
 802c3ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802c3ce:	3a19      	subs	r2, #25
 802c3d0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 802c3d4:	4288      	cmp	r0, r1
 802c3d6:	dd14      	ble.n	802c402 <scalbnf+0x66>
 802c3d8:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 802c450 <scalbnf+0xb4>
 802c3dc:	ee10 3a10 	vmov	r3, s0
 802c3e0:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 802c454 <scalbnf+0xb8>
 802c3e4:	eeb0 7a67 	vmov.f32	s14, s15
 802c3e8:	2b00      	cmp	r3, #0
 802c3ea:	fe67 7aa6 	vselge.f32	s15, s15, s13
 802c3ee:	ee27 0a87 	vmul.f32	s0, s15, s14
 802c3f2:	4770      	bx	lr
 802c3f4:	eddf 7a18 	vldr	s15, [pc, #96]	@ 802c458 <scalbnf+0xbc>
 802c3f8:	ee27 0a80 	vmul.f32	s0, s15, s0
 802c3fc:	4770      	bx	lr
 802c3fe:	0dd2      	lsrs	r2, r2, #23
 802c400:	e7e6      	b.n	802c3d0 <scalbnf+0x34>
 802c402:	4410      	add	r0, r2
 802c404:	28fe      	cmp	r0, #254	@ 0xfe
 802c406:	dce7      	bgt.n	802c3d8 <scalbnf+0x3c>
 802c408:	2800      	cmp	r0, #0
 802c40a:	dd06      	ble.n	802c41a <scalbnf+0x7e>
 802c40c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802c410:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802c414:	ee00 3a10 	vmov	s0, r3
 802c418:	4770      	bx	lr
 802c41a:	f110 0f16 	cmn.w	r0, #22
 802c41e:	da09      	bge.n	802c434 <scalbnf+0x98>
 802c420:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 802c458 <scalbnf+0xbc>
 802c424:	ee10 3a10 	vmov	r3, s0
 802c428:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 802c45c <scalbnf+0xc0>
 802c42c:	eeb0 7a67 	vmov.f32	s14, s15
 802c430:	2b00      	cmp	r3, #0
 802c432:	e7da      	b.n	802c3ea <scalbnf+0x4e>
 802c434:	3019      	adds	r0, #25
 802c436:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802c43a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 802c460 <scalbnf+0xc4>
 802c43e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802c442:	ee07 3a90 	vmov	s15, r3
 802c446:	e7d7      	b.n	802c3f8 <scalbnf+0x5c>
 802c448:	ffff3cb0 	.word	0xffff3cb0
 802c44c:	4c000000 	.word	0x4c000000
 802c450:	7149f2ca 	.word	0x7149f2ca
 802c454:	f149f2ca 	.word	0xf149f2ca
 802c458:	0da24260 	.word	0x0da24260
 802c45c:	8da24260 	.word	0x8da24260
 802c460:	33000000 	.word	0x33000000

0802c464 <__kernel_rem_pio2f>:
 802c464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c468:	4690      	mov	r8, r2
 802c46a:	4ab9      	ldr	r2, [pc, #740]	@ (802c750 <__kernel_rem_pio2f+0x2ec>)
 802c46c:	460f      	mov	r7, r1
 802c46e:	f103 3bff 	add.w	fp, r3, #4294967295
 802c472:	f118 0f04 	cmn.w	r8, #4
 802c476:	ed2d 8b04 	vpush	{d8-d9}
 802c47a:	b0d9      	sub	sp, #356	@ 0x164
 802c47c:	9001      	str	r0, [sp, #4]
 802c47e:	9866      	ldr	r0, [sp, #408]	@ 0x198
 802c480:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 802c484:	db26      	blt.n	802c4d4 <__kernel_rem_pio2f+0x70>
 802c486:	f1b8 0203 	subs.w	r2, r8, #3
 802c48a:	bf48      	it	mi
 802c48c:	f108 0204 	addmi.w	r2, r8, #4
 802c490:	10d2      	asrs	r2, r2, #3
 802c492:	1c55      	adds	r5, r2, #1
 802c494:	eba2 060b 	sub.w	r6, r2, fp
 802c498:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802c49a:	eb0a 0c0b 	add.w	ip, sl, fp
 802c49e:	00e8      	lsls	r0, r5, #3
 802c4a0:	ac1c      	add	r4, sp, #112	@ 0x70
 802c4a2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 802c4a6:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 802c760 <__kernel_rem_pio2f+0x2fc>
 802c4aa:	9002      	str	r0, [sp, #8]
 802c4ac:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 802c4b0:	2000      	movs	r0, #0
 802c4b2:	4560      	cmp	r0, ip
 802c4b4:	dd10      	ble.n	802c4d8 <__kernel_rem_pio2f+0x74>
 802c4b6:	a91c      	add	r1, sp, #112	@ 0x70
 802c4b8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 802c4bc:	2600      	movs	r6, #0
 802c4be:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 802c4c2:	4556      	cmp	r6, sl
 802c4c4:	dc26      	bgt.n	802c514 <__kernel_rem_pio2f+0xb0>
 802c4c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 802c4ca:	4684      	mov	ip, r0
 802c4cc:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 802c760 <__kernel_rem_pio2f+0x2fc>
 802c4d0:	2400      	movs	r4, #0
 802c4d2:	e018      	b.n	802c506 <__kernel_rem_pio2f+0xa2>
 802c4d4:	2200      	movs	r2, #0
 802c4d6:	e7dc      	b.n	802c492 <__kernel_rem_pio2f+0x2e>
 802c4d8:	42c6      	cmn	r6, r0
 802c4da:	bf54      	ite	pl
 802c4dc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 802c4e0:	eef0 7a47 	vmovmi.f32	s15, s14
 802c4e4:	f100 0001 	add.w	r0, r0, #1
 802c4e8:	bf5c      	itt	pl
 802c4ea:	ee07 1a90 	vmovpl	s15, r1
 802c4ee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802c4f2:	ece4 7a01 	vstmia	r4!, {s15}
 802c4f6:	e7dc      	b.n	802c4b2 <__kernel_rem_pio2f+0x4e>
 802c4f8:	ecfe 6a01 	vldmia	lr!, {s13}
 802c4fc:	3401      	adds	r4, #1
 802c4fe:	ed3c 7a01 	vldmdb	ip!, {s14}
 802c502:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c506:	455c      	cmp	r4, fp
 802c508:	ddf6      	ble.n	802c4f8 <__kernel_rem_pio2f+0x94>
 802c50a:	3601      	adds	r6, #1
 802c50c:	3004      	adds	r0, #4
 802c50e:	ece9 7a01 	vstmia	r9!, {s15}
 802c512:	e7d6      	b.n	802c4c2 <__kernel_rem_pio2f+0x5e>
 802c514:	a908      	add	r1, sp, #32
 802c516:	4654      	mov	r4, sl
 802c518:	eddf 8a90 	vldr	s17, [pc, #576]	@ 802c75c <__kernel_rem_pio2f+0x2f8>
 802c51c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c520:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 802c758 <__kernel_rem_pio2f+0x2f4>
 802c524:	9104      	str	r1, [sp, #16]
 802c526:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802c528:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802c52c:	9203      	str	r2, [sp, #12]
 802c52e:	00a2      	lsls	r2, r4, #2
 802c530:	a944      	add	r1, sp, #272	@ 0x110
 802c532:	4626      	mov	r6, r4
 802c534:	9205      	str	r2, [sp, #20]
 802c536:	aa58      	add	r2, sp, #352	@ 0x160
 802c538:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 802c53c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 802c540:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 802c544:	aa08      	add	r2, sp, #32
 802c546:	4694      	mov	ip, r2
 802c548:	2e00      	cmp	r6, #0
 802c54a:	dc4c      	bgt.n	802c5e6 <__kernel_rem_pio2f+0x182>
 802c54c:	4628      	mov	r0, r5
 802c54e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802c552:	f7ff ff23 	bl	802c39c <scalbnf>
 802c556:	eeb0 8a40 	vmov.f32	s16, s0
 802c55a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 802c55e:	ee28 0a00 	vmul.f32	s0, s16, s0
 802c562:	f000 f9e9 	bl	802c938 <floorf>
 802c566:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 802c56a:	2d00      	cmp	r5, #0
 802c56c:	eea0 8a67 	vfms.f32	s16, s0, s15
 802c570:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802c574:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802c578:	ee17 9a90 	vmov	r9, s15
 802c57c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c580:	ee38 8a67 	vsub.f32	s16, s16, s15
 802c584:	dd41      	ble.n	802c60a <__kernel_rem_pio2f+0x1a6>
 802c586:	f104 3cff 	add.w	ip, r4, #4294967295
 802c58a:	a908      	add	r1, sp, #32
 802c58c:	f1c5 0e08 	rsb	lr, r5, #8
 802c590:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 802c594:	fa46 f00e 	asr.w	r0, r6, lr
 802c598:	4481      	add	r9, r0
 802c59a:	fa00 f00e 	lsl.w	r0, r0, lr
 802c59e:	1a36      	subs	r6, r6, r0
 802c5a0:	f1c5 0007 	rsb	r0, r5, #7
 802c5a4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 802c5a8:	4106      	asrs	r6, r0
 802c5aa:	2e00      	cmp	r6, #0
 802c5ac:	dd3c      	ble.n	802c628 <__kernel_rem_pio2f+0x1c4>
 802c5ae:	f04f 0e00 	mov.w	lr, #0
 802c5b2:	f109 0901 	add.w	r9, r9, #1
 802c5b6:	4670      	mov	r0, lr
 802c5b8:	4574      	cmp	r4, lr
 802c5ba:	dc68      	bgt.n	802c68e <__kernel_rem_pio2f+0x22a>
 802c5bc:	2d00      	cmp	r5, #0
 802c5be:	dd03      	ble.n	802c5c8 <__kernel_rem_pio2f+0x164>
 802c5c0:	2d01      	cmp	r5, #1
 802c5c2:	d074      	beq.n	802c6ae <__kernel_rem_pio2f+0x24a>
 802c5c4:	2d02      	cmp	r5, #2
 802c5c6:	d07d      	beq.n	802c6c4 <__kernel_rem_pio2f+0x260>
 802c5c8:	2e02      	cmp	r6, #2
 802c5ca:	d12d      	bne.n	802c628 <__kernel_rem_pio2f+0x1c4>
 802c5cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802c5d0:	ee30 8a48 	vsub.f32	s16, s0, s16
 802c5d4:	b340      	cbz	r0, 802c628 <__kernel_rem_pio2f+0x1c4>
 802c5d6:	4628      	mov	r0, r5
 802c5d8:	9306      	str	r3, [sp, #24]
 802c5da:	f7ff fedf 	bl	802c39c <scalbnf>
 802c5de:	9b06      	ldr	r3, [sp, #24]
 802c5e0:	ee38 8a40 	vsub.f32	s16, s16, s0
 802c5e4:	e020      	b.n	802c628 <__kernel_rem_pio2f+0x1c4>
 802c5e6:	ee60 7a28 	vmul.f32	s15, s0, s17
 802c5ea:	3e01      	subs	r6, #1
 802c5ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c5f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c5f4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802c5f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c5fc:	ecac 0a01 	vstmia	ip!, {s0}
 802c600:	ed30 0a01 	vldmdb	r0!, {s0}
 802c604:	ee37 0a80 	vadd.f32	s0, s15, s0
 802c608:	e79e      	b.n	802c548 <__kernel_rem_pio2f+0xe4>
 802c60a:	d105      	bne.n	802c618 <__kernel_rem_pio2f+0x1b4>
 802c60c:	1e60      	subs	r0, r4, #1
 802c60e:	a908      	add	r1, sp, #32
 802c610:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 802c614:	11f6      	asrs	r6, r6, #7
 802c616:	e7c8      	b.n	802c5aa <__kernel_rem_pio2f+0x146>
 802c618:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802c61c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802c620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c624:	da31      	bge.n	802c68a <__kernel_rem_pio2f+0x226>
 802c626:	2600      	movs	r6, #0
 802c628:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802c62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c630:	f040 8098 	bne.w	802c764 <__kernel_rem_pio2f+0x300>
 802c634:	1e60      	subs	r0, r4, #1
 802c636:	2200      	movs	r2, #0
 802c638:	4550      	cmp	r0, sl
 802c63a:	da4b      	bge.n	802c6d4 <__kernel_rem_pio2f+0x270>
 802c63c:	2a00      	cmp	r2, #0
 802c63e:	d065      	beq.n	802c70c <__kernel_rem_pio2f+0x2a8>
 802c640:	3c01      	subs	r4, #1
 802c642:	ab08      	add	r3, sp, #32
 802c644:	3d08      	subs	r5, #8
 802c646:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802c64a:	2b00      	cmp	r3, #0
 802c64c:	d0f8      	beq.n	802c640 <__kernel_rem_pio2f+0x1dc>
 802c64e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802c652:	4628      	mov	r0, r5
 802c654:	f7ff fea2 	bl	802c39c <scalbnf>
 802c658:	1c63      	adds	r3, r4, #1
 802c65a:	aa44      	add	r2, sp, #272	@ 0x110
 802c65c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 802c75c <__kernel_rem_pio2f+0x2f8>
 802c660:	0099      	lsls	r1, r3, #2
 802c662:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802c666:	4623      	mov	r3, r4
 802c668:	2b00      	cmp	r3, #0
 802c66a:	f280 80a9 	bge.w	802c7c0 <__kernel_rem_pio2f+0x35c>
 802c66e:	4623      	mov	r3, r4
 802c670:	2b00      	cmp	r3, #0
 802c672:	f2c0 80c7 	blt.w	802c804 <__kernel_rem_pio2f+0x3a0>
 802c676:	aa44      	add	r2, sp, #272	@ 0x110
 802c678:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 802c754 <__kernel_rem_pio2f+0x2f0>
 802c67c:	eddf 7a38 	vldr	s15, [pc, #224]	@ 802c760 <__kernel_rem_pio2f+0x2fc>
 802c680:	2000      	movs	r0, #0
 802c682:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802c686:	1ae2      	subs	r2, r4, r3
 802c688:	e0b1      	b.n	802c7ee <__kernel_rem_pio2f+0x38a>
 802c68a:	2602      	movs	r6, #2
 802c68c:	e78f      	b.n	802c5ae <__kernel_rem_pio2f+0x14a>
 802c68e:	f852 1b04 	ldr.w	r1, [r2], #4
 802c692:	b948      	cbnz	r0, 802c6a8 <__kernel_rem_pio2f+0x244>
 802c694:	b121      	cbz	r1, 802c6a0 <__kernel_rem_pio2f+0x23c>
 802c696:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802c69a:	f842 1c04 	str.w	r1, [r2, #-4]
 802c69e:	2101      	movs	r1, #1
 802c6a0:	f10e 0e01 	add.w	lr, lr, #1
 802c6a4:	4608      	mov	r0, r1
 802c6a6:	e787      	b.n	802c5b8 <__kernel_rem_pio2f+0x154>
 802c6a8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 802c6ac:	e7f5      	b.n	802c69a <__kernel_rem_pio2f+0x236>
 802c6ae:	f104 3cff 	add.w	ip, r4, #4294967295
 802c6b2:	aa08      	add	r2, sp, #32
 802c6b4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802c6b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 802c6bc:	a908      	add	r1, sp, #32
 802c6be:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802c6c2:	e781      	b.n	802c5c8 <__kernel_rem_pio2f+0x164>
 802c6c4:	f104 3cff 	add.w	ip, r4, #4294967295
 802c6c8:	aa08      	add	r2, sp, #32
 802c6ca:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802c6ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802c6d2:	e7f3      	b.n	802c6bc <__kernel_rem_pio2f+0x258>
 802c6d4:	a908      	add	r1, sp, #32
 802c6d6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802c6da:	3801      	subs	r0, #1
 802c6dc:	430a      	orrs	r2, r1
 802c6de:	e7ab      	b.n	802c638 <__kernel_rem_pio2f+0x1d4>
 802c6e0:	3201      	adds	r2, #1
 802c6e2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802c6e6:	2e00      	cmp	r6, #0
 802c6e8:	d0fa      	beq.n	802c6e0 <__kernel_rem_pio2f+0x27c>
 802c6ea:	9905      	ldr	r1, [sp, #20]
 802c6ec:	18e6      	adds	r6, r4, r3
 802c6ee:	f104 0c01 	add.w	ip, r4, #1
 802c6f2:	4422      	add	r2, r4
 802c6f4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 802c6f8:	eb0d 0001 	add.w	r0, sp, r1
 802c6fc:	a91c      	add	r1, sp, #112	@ 0x70
 802c6fe:	384c      	subs	r0, #76	@ 0x4c
 802c700:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 802c704:	4562      	cmp	r2, ip
 802c706:	da04      	bge.n	802c712 <__kernel_rem_pio2f+0x2ae>
 802c708:	4614      	mov	r4, r2
 802c70a:	e710      	b.n	802c52e <__kernel_rem_pio2f+0xca>
 802c70c:	9804      	ldr	r0, [sp, #16]
 802c70e:	2201      	movs	r2, #1
 802c710:	e7e7      	b.n	802c6e2 <__kernel_rem_pio2f+0x27e>
 802c712:	9903      	ldr	r1, [sp, #12]
 802c714:	2400      	movs	r4, #0
 802c716:	f8dd e004 	ldr.w	lr, [sp, #4]
 802c71a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802c71e:	ee07 1a90 	vmov	s15, r1
 802c722:	9105      	str	r1, [sp, #20]
 802c724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c728:	ece6 7a01 	vstmia	r6!, {s15}
 802c72c:	46b1      	mov	r9, r6
 802c72e:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 802c760 <__kernel_rem_pio2f+0x2fc>
 802c732:	455c      	cmp	r4, fp
 802c734:	dd04      	ble.n	802c740 <__kernel_rem_pio2f+0x2dc>
 802c736:	f10c 0c01 	add.w	ip, ip, #1
 802c73a:	ece0 7a01 	vstmia	r0!, {s15}
 802c73e:	e7e1      	b.n	802c704 <__kernel_rem_pio2f+0x2a0>
 802c740:	ecfe 6a01 	vldmia	lr!, {s13}
 802c744:	3401      	adds	r4, #1
 802c746:	ed39 7a01 	vldmdb	r9!, {s14}
 802c74a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c74e:	e7f0      	b.n	802c732 <__kernel_rem_pio2f+0x2ce>
 802c750:	08030110 	.word	0x08030110
 802c754:	080300e4 	.word	0x080300e4
 802c758:	43800000 	.word	0x43800000
 802c75c:	3b800000 	.word	0x3b800000
 802c760:	00000000 	.word	0x00000000
 802c764:	9b02      	ldr	r3, [sp, #8]
 802c766:	eeb0 0a48 	vmov.f32	s0, s16
 802c76a:	eba3 0008 	sub.w	r0, r3, r8
 802c76e:	f7ff fe15 	bl	802c39c <scalbnf>
 802c772:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 802c758 <__kernel_rem_pio2f+0x2f4>
 802c776:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802c77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c77e:	db19      	blt.n	802c7b4 <__kernel_rem_pio2f+0x350>
 802c780:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 802c75c <__kernel_rem_pio2f+0x2f8>
 802c784:	aa08      	add	r2, sp, #32
 802c786:	3508      	adds	r5, #8
 802c788:	ee60 7a27 	vmul.f32	s15, s0, s15
 802c78c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c794:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802c798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c79c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c7a0:	ee10 3a10 	vmov	r3, s0
 802c7a4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802c7a8:	3401      	adds	r4, #1
 802c7aa:	ee17 3a90 	vmov	r3, s15
 802c7ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802c7b2:	e74c      	b.n	802c64e <__kernel_rem_pio2f+0x1ea>
 802c7b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c7b8:	aa08      	add	r2, sp, #32
 802c7ba:	ee10 3a10 	vmov	r3, s0
 802c7be:	e7f6      	b.n	802c7ae <__kernel_rem_pio2f+0x34a>
 802c7c0:	a808      	add	r0, sp, #32
 802c7c2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802c7c6:	3b01      	subs	r3, #1
 802c7c8:	ee07 0a90 	vmov	s15, r0
 802c7cc:	9001      	str	r0, [sp, #4]
 802c7ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c7d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 802c7d6:	ee20 0a07 	vmul.f32	s0, s0, s14
 802c7da:	ed62 7a01 	vstmdb	r2!, {s15}
 802c7de:	e743      	b.n	802c668 <__kernel_rem_pio2f+0x204>
 802c7e0:	ecfc 6a01 	vldmia	ip!, {s13}
 802c7e4:	3001      	adds	r0, #1
 802c7e6:	ecb5 7a01 	vldmia	r5!, {s14}
 802c7ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c7ee:	4550      	cmp	r0, sl
 802c7f0:	dc01      	bgt.n	802c7f6 <__kernel_rem_pio2f+0x392>
 802c7f2:	4290      	cmp	r0, r2
 802c7f4:	ddf4      	ble.n	802c7e0 <__kernel_rem_pio2f+0x37c>
 802c7f6:	a858      	add	r0, sp, #352	@ 0x160
 802c7f8:	3b01      	subs	r3, #1
 802c7fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802c7fe:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 802c802:	e735      	b.n	802c670 <__kernel_rem_pio2f+0x20c>
 802c804:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802c806:	2b02      	cmp	r3, #2
 802c808:	dc09      	bgt.n	802c81e <__kernel_rem_pio2f+0x3ba>
 802c80a:	2b00      	cmp	r3, #0
 802c80c:	dc27      	bgt.n	802c85e <__kernel_rem_pio2f+0x3fa>
 802c80e:	d040      	beq.n	802c892 <__kernel_rem_pio2f+0x42e>
 802c810:	f009 0007 	and.w	r0, r9, #7
 802c814:	b059      	add	sp, #356	@ 0x164
 802c816:	ecbd 8b04 	vpop	{d8-d9}
 802c81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c81e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802c820:	2b03      	cmp	r3, #3
 802c822:	d1f5      	bne.n	802c810 <__kernel_rem_pio2f+0x3ac>
 802c824:	aa30      	add	r2, sp, #192	@ 0xc0
 802c826:	1f0b      	subs	r3, r1, #4
 802c828:	4620      	mov	r0, r4
 802c82a:	4413      	add	r3, r2
 802c82c:	461a      	mov	r2, r3
 802c82e:	2800      	cmp	r0, #0
 802c830:	dc50      	bgt.n	802c8d4 <__kernel_rem_pio2f+0x470>
 802c832:	4622      	mov	r2, r4
 802c834:	2a01      	cmp	r2, #1
 802c836:	dc5d      	bgt.n	802c8f4 <__kernel_rem_pio2f+0x490>
 802c838:	ab30      	add	r3, sp, #192	@ 0xc0
 802c83a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 802c760 <__kernel_rem_pio2f+0x2fc>
 802c83e:	440b      	add	r3, r1
 802c840:	2c01      	cmp	r4, #1
 802c842:	dc67      	bgt.n	802c914 <__kernel_rem_pio2f+0x4b0>
 802c844:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 802c848:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 802c84c:	2e00      	cmp	r6, #0
 802c84e:	d167      	bne.n	802c920 <__kernel_rem_pio2f+0x4bc>
 802c850:	edc7 6a00 	vstr	s13, [r7]
 802c854:	ed87 7a01 	vstr	s14, [r7, #4]
 802c858:	edc7 7a02 	vstr	s15, [r7, #8]
 802c85c:	e7d8      	b.n	802c810 <__kernel_rem_pio2f+0x3ac>
 802c85e:	ab30      	add	r3, sp, #192	@ 0xc0
 802c860:	4622      	mov	r2, r4
 802c862:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 802c760 <__kernel_rem_pio2f+0x2fc>
 802c866:	440b      	add	r3, r1
 802c868:	2a00      	cmp	r2, #0
 802c86a:	da24      	bge.n	802c8b6 <__kernel_rem_pio2f+0x452>
 802c86c:	b34e      	cbz	r6, 802c8c2 <__kernel_rem_pio2f+0x45e>
 802c86e:	eef1 7a47 	vneg.f32	s15, s14
 802c872:	edc7 7a00 	vstr	s15, [r7]
 802c876:	aa31      	add	r2, sp, #196	@ 0xc4
 802c878:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 802c87c:	2301      	movs	r3, #1
 802c87e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c882:	429c      	cmp	r4, r3
 802c884:	da20      	bge.n	802c8c8 <__kernel_rem_pio2f+0x464>
 802c886:	b10e      	cbz	r6, 802c88c <__kernel_rem_pio2f+0x428>
 802c888:	eef1 7a67 	vneg.f32	s15, s15
 802c88c:	edc7 7a01 	vstr	s15, [r7, #4]
 802c890:	e7be      	b.n	802c810 <__kernel_rem_pio2f+0x3ac>
 802c892:	ab30      	add	r3, sp, #192	@ 0xc0
 802c894:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 802c760 <__kernel_rem_pio2f+0x2fc>
 802c898:	440b      	add	r3, r1
 802c89a:	2c00      	cmp	r4, #0
 802c89c:	da05      	bge.n	802c8aa <__kernel_rem_pio2f+0x446>
 802c89e:	b10e      	cbz	r6, 802c8a4 <__kernel_rem_pio2f+0x440>
 802c8a0:	eef1 7a67 	vneg.f32	s15, s15
 802c8a4:	edc7 7a00 	vstr	s15, [r7]
 802c8a8:	e7b2      	b.n	802c810 <__kernel_rem_pio2f+0x3ac>
 802c8aa:	ed33 7a01 	vldmdb	r3!, {s14}
 802c8ae:	3c01      	subs	r4, #1
 802c8b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c8b4:	e7f1      	b.n	802c89a <__kernel_rem_pio2f+0x436>
 802c8b6:	ed73 7a01 	vldmdb	r3!, {s15}
 802c8ba:	3a01      	subs	r2, #1
 802c8bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 802c8c0:	e7d2      	b.n	802c868 <__kernel_rem_pio2f+0x404>
 802c8c2:	eef0 7a47 	vmov.f32	s15, s14
 802c8c6:	e7d4      	b.n	802c872 <__kernel_rem_pio2f+0x40e>
 802c8c8:	ecb2 7a01 	vldmia	r2!, {s14}
 802c8cc:	3301      	adds	r3, #1
 802c8ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c8d2:	e7d6      	b.n	802c882 <__kernel_rem_pio2f+0x41e>
 802c8d4:	ed72 7a01 	vldmdb	r2!, {s15}
 802c8d8:	3801      	subs	r0, #1
 802c8da:	edd2 6a01 	vldr	s13, [r2, #4]
 802c8de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c8e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c8e6:	ed82 7a00 	vstr	s14, [r2]
 802c8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c8ee:	edc2 7a01 	vstr	s15, [r2, #4]
 802c8f2:	e79c      	b.n	802c82e <__kernel_rem_pio2f+0x3ca>
 802c8f4:	ed73 7a01 	vldmdb	r3!, {s15}
 802c8f8:	3a01      	subs	r2, #1
 802c8fa:	edd3 6a01 	vldr	s13, [r3, #4]
 802c8fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c902:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c906:	ed83 7a00 	vstr	s14, [r3]
 802c90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c90e:	edc3 7a01 	vstr	s15, [r3, #4]
 802c912:	e78f      	b.n	802c834 <__kernel_rem_pio2f+0x3d0>
 802c914:	ed33 7a01 	vldmdb	r3!, {s14}
 802c918:	3c01      	subs	r4, #1
 802c91a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c91e:	e78f      	b.n	802c840 <__kernel_rem_pio2f+0x3dc>
 802c920:	eef1 6a66 	vneg.f32	s13, s13
 802c924:	eeb1 7a47 	vneg.f32	s14, s14
 802c928:	eef1 7a67 	vneg.f32	s15, s15
 802c92c:	edc7 6a00 	vstr	s13, [r7]
 802c930:	ed87 7a01 	vstr	s14, [r7, #4]
 802c934:	e790      	b.n	802c858 <__kernel_rem_pio2f+0x3f4>
 802c936:	bf00      	nop

0802c938 <floorf>:
 802c938:	febb 0a40 	vrintm.f32	s0, s0
 802c93c:	4770      	bx	lr

0802c93e <abort>:
 802c93e:	2006      	movs	r0, #6
 802c940:	b508      	push	{r3, lr}
 802c942:	f000 fb3f 	bl	802cfc4 <raise>
 802c946:	2001      	movs	r0, #1
 802c948:	f7d5 f800 	bl	800194c <_exit>

0802c94c <__assert_func>:
 802c94c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c94e:	4614      	mov	r4, r2
 802c950:	461a      	mov	r2, r3
 802c952:	4b09      	ldr	r3, [pc, #36]	@ (802c978 <__assert_func+0x2c>)
 802c954:	4605      	mov	r5, r0
 802c956:	681b      	ldr	r3, [r3, #0]
 802c958:	68d8      	ldr	r0, [r3, #12]
 802c95a:	b14c      	cbz	r4, 802c970 <__assert_func+0x24>
 802c95c:	4b07      	ldr	r3, [pc, #28]	@ (802c97c <__assert_func+0x30>)
 802c95e:	9100      	str	r1, [sp, #0]
 802c960:	4907      	ldr	r1, [pc, #28]	@ (802c980 <__assert_func+0x34>)
 802c962:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c966:	462b      	mov	r3, r5
 802c968:	f000 f984 	bl	802cc74 <fiprintf>
 802c96c:	f7ff ffe7 	bl	802c93e <abort>
 802c970:	4b04      	ldr	r3, [pc, #16]	@ (802c984 <__assert_func+0x38>)
 802c972:	461c      	mov	r4, r3
 802c974:	e7f3      	b.n	802c95e <__assert_func+0x12>
 802c976:	bf00      	nop
 802c978:	200000a8 	.word	0x200000a8
 802c97c:	0803011c 	.word	0x0803011c
 802c980:	08030129 	.word	0x08030129
 802c984:	08030157 	.word	0x08030157

0802c988 <atexit>:
 802c988:	2300      	movs	r3, #0
 802c98a:	4601      	mov	r1, r0
 802c98c:	461a      	mov	r2, r3
 802c98e:	4618      	mov	r0, r3
 802c990:	f000 bbc4 	b.w	802d11c <__register_exitproc>

0802c994 <malloc>:
 802c994:	4b02      	ldr	r3, [pc, #8]	@ (802c9a0 <malloc+0xc>)
 802c996:	4601      	mov	r1, r0
 802c998:	6818      	ldr	r0, [r3, #0]
 802c99a:	f000 b82d 	b.w	802c9f8 <_malloc_r>
 802c99e:	bf00      	nop
 802c9a0:	200000a8 	.word	0x200000a8

0802c9a4 <free>:
 802c9a4:	4b02      	ldr	r3, [pc, #8]	@ (802c9b0 <free+0xc>)
 802c9a6:	4601      	mov	r1, r0
 802c9a8:	6818      	ldr	r0, [r3, #0]
 802c9aa:	f000 bc15 	b.w	802d1d8 <_free_r>
 802c9ae:	bf00      	nop
 802c9b0:	200000a8 	.word	0x200000a8

0802c9b4 <sbrk_aligned>:
 802c9b4:	b570      	push	{r4, r5, r6, lr}
 802c9b6:	4e0f      	ldr	r6, [pc, #60]	@ (802c9f4 <sbrk_aligned+0x40>)
 802c9b8:	460c      	mov	r4, r1
 802c9ba:	4605      	mov	r5, r0
 802c9bc:	6831      	ldr	r1, [r6, #0]
 802c9be:	b911      	cbnz	r1, 802c9c6 <sbrk_aligned+0x12>
 802c9c0:	f000 fb50 	bl	802d064 <_sbrk_r>
 802c9c4:	6030      	str	r0, [r6, #0]
 802c9c6:	4621      	mov	r1, r4
 802c9c8:	4628      	mov	r0, r5
 802c9ca:	f000 fb4b 	bl	802d064 <_sbrk_r>
 802c9ce:	1c43      	adds	r3, r0, #1
 802c9d0:	d103      	bne.n	802c9da <sbrk_aligned+0x26>
 802c9d2:	f04f 34ff 	mov.w	r4, #4294967295
 802c9d6:	4620      	mov	r0, r4
 802c9d8:	bd70      	pop	{r4, r5, r6, pc}
 802c9da:	1cc4      	adds	r4, r0, #3
 802c9dc:	f024 0403 	bic.w	r4, r4, #3
 802c9e0:	42a0      	cmp	r0, r4
 802c9e2:	d0f8      	beq.n	802c9d6 <sbrk_aligned+0x22>
 802c9e4:	1a21      	subs	r1, r4, r0
 802c9e6:	4628      	mov	r0, r5
 802c9e8:	f000 fb3c 	bl	802d064 <_sbrk_r>
 802c9ec:	3001      	adds	r0, #1
 802c9ee:	d1f2      	bne.n	802c9d6 <sbrk_aligned+0x22>
 802c9f0:	e7ef      	b.n	802c9d2 <sbrk_aligned+0x1e>
 802c9f2:	bf00      	nop
 802c9f4:	2005c4dc 	.word	0x2005c4dc

0802c9f8 <_malloc_r>:
 802c9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c9fc:	1ccd      	adds	r5, r1, #3
 802c9fe:	4606      	mov	r6, r0
 802ca00:	f025 0503 	bic.w	r5, r5, #3
 802ca04:	3508      	adds	r5, #8
 802ca06:	2d0c      	cmp	r5, #12
 802ca08:	bf38      	it	cc
 802ca0a:	250c      	movcc	r5, #12
 802ca0c:	2d00      	cmp	r5, #0
 802ca0e:	db01      	blt.n	802ca14 <_malloc_r+0x1c>
 802ca10:	42a9      	cmp	r1, r5
 802ca12:	d904      	bls.n	802ca1e <_malloc_r+0x26>
 802ca14:	230c      	movs	r3, #12
 802ca16:	6033      	str	r3, [r6, #0]
 802ca18:	2000      	movs	r0, #0
 802ca1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ca1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802caf4 <_malloc_r+0xfc>
 802ca22:	f000 f869 	bl	802caf8 <__malloc_lock>
 802ca26:	f8d8 3000 	ldr.w	r3, [r8]
 802ca2a:	461c      	mov	r4, r3
 802ca2c:	bb44      	cbnz	r4, 802ca80 <_malloc_r+0x88>
 802ca2e:	4629      	mov	r1, r5
 802ca30:	4630      	mov	r0, r6
 802ca32:	f7ff ffbf 	bl	802c9b4 <sbrk_aligned>
 802ca36:	1c43      	adds	r3, r0, #1
 802ca38:	4604      	mov	r4, r0
 802ca3a:	d158      	bne.n	802caee <_malloc_r+0xf6>
 802ca3c:	f8d8 4000 	ldr.w	r4, [r8]
 802ca40:	4627      	mov	r7, r4
 802ca42:	2f00      	cmp	r7, #0
 802ca44:	d143      	bne.n	802cace <_malloc_r+0xd6>
 802ca46:	2c00      	cmp	r4, #0
 802ca48:	d04b      	beq.n	802cae2 <_malloc_r+0xea>
 802ca4a:	6823      	ldr	r3, [r4, #0]
 802ca4c:	4639      	mov	r1, r7
 802ca4e:	4630      	mov	r0, r6
 802ca50:	eb04 0903 	add.w	r9, r4, r3
 802ca54:	f000 fb06 	bl	802d064 <_sbrk_r>
 802ca58:	4581      	cmp	r9, r0
 802ca5a:	d142      	bne.n	802cae2 <_malloc_r+0xea>
 802ca5c:	6821      	ldr	r1, [r4, #0]
 802ca5e:	4630      	mov	r0, r6
 802ca60:	1a6d      	subs	r5, r5, r1
 802ca62:	4629      	mov	r1, r5
 802ca64:	f7ff ffa6 	bl	802c9b4 <sbrk_aligned>
 802ca68:	3001      	adds	r0, #1
 802ca6a:	d03a      	beq.n	802cae2 <_malloc_r+0xea>
 802ca6c:	6823      	ldr	r3, [r4, #0]
 802ca6e:	442b      	add	r3, r5
 802ca70:	6023      	str	r3, [r4, #0]
 802ca72:	f8d8 3000 	ldr.w	r3, [r8]
 802ca76:	685a      	ldr	r2, [r3, #4]
 802ca78:	bb62      	cbnz	r2, 802cad4 <_malloc_r+0xdc>
 802ca7a:	f8c8 7000 	str.w	r7, [r8]
 802ca7e:	e00f      	b.n	802caa0 <_malloc_r+0xa8>
 802ca80:	6822      	ldr	r2, [r4, #0]
 802ca82:	1b52      	subs	r2, r2, r5
 802ca84:	d420      	bmi.n	802cac8 <_malloc_r+0xd0>
 802ca86:	2a0b      	cmp	r2, #11
 802ca88:	d917      	bls.n	802caba <_malloc_r+0xc2>
 802ca8a:	1961      	adds	r1, r4, r5
 802ca8c:	42a3      	cmp	r3, r4
 802ca8e:	6025      	str	r5, [r4, #0]
 802ca90:	bf18      	it	ne
 802ca92:	6059      	strne	r1, [r3, #4]
 802ca94:	6863      	ldr	r3, [r4, #4]
 802ca96:	bf08      	it	eq
 802ca98:	f8c8 1000 	streq.w	r1, [r8]
 802ca9c:	5162      	str	r2, [r4, r5]
 802ca9e:	604b      	str	r3, [r1, #4]
 802caa0:	4630      	mov	r0, r6
 802caa2:	f000 f82f 	bl	802cb04 <__malloc_unlock>
 802caa6:	f104 000b 	add.w	r0, r4, #11
 802caaa:	1d23      	adds	r3, r4, #4
 802caac:	f020 0007 	bic.w	r0, r0, #7
 802cab0:	1ac2      	subs	r2, r0, r3
 802cab2:	bf1c      	itt	ne
 802cab4:	1a1b      	subne	r3, r3, r0
 802cab6:	50a3      	strne	r3, [r4, r2]
 802cab8:	e7af      	b.n	802ca1a <_malloc_r+0x22>
 802caba:	6862      	ldr	r2, [r4, #4]
 802cabc:	42a3      	cmp	r3, r4
 802cabe:	bf0c      	ite	eq
 802cac0:	f8c8 2000 	streq.w	r2, [r8]
 802cac4:	605a      	strne	r2, [r3, #4]
 802cac6:	e7eb      	b.n	802caa0 <_malloc_r+0xa8>
 802cac8:	4623      	mov	r3, r4
 802caca:	6864      	ldr	r4, [r4, #4]
 802cacc:	e7ae      	b.n	802ca2c <_malloc_r+0x34>
 802cace:	463c      	mov	r4, r7
 802cad0:	687f      	ldr	r7, [r7, #4]
 802cad2:	e7b6      	b.n	802ca42 <_malloc_r+0x4a>
 802cad4:	461a      	mov	r2, r3
 802cad6:	685b      	ldr	r3, [r3, #4]
 802cad8:	42a3      	cmp	r3, r4
 802cada:	d1fb      	bne.n	802cad4 <_malloc_r+0xdc>
 802cadc:	2300      	movs	r3, #0
 802cade:	6053      	str	r3, [r2, #4]
 802cae0:	e7de      	b.n	802caa0 <_malloc_r+0xa8>
 802cae2:	230c      	movs	r3, #12
 802cae4:	4630      	mov	r0, r6
 802cae6:	6033      	str	r3, [r6, #0]
 802cae8:	f000 f80c 	bl	802cb04 <__malloc_unlock>
 802caec:	e794      	b.n	802ca18 <_malloc_r+0x20>
 802caee:	6005      	str	r5, [r0, #0]
 802caf0:	e7d6      	b.n	802caa0 <_malloc_r+0xa8>
 802caf2:	bf00      	nop
 802caf4:	2005c4e0 	.word	0x2005c4e0

0802caf8 <__malloc_lock>:
 802caf8:	4801      	ldr	r0, [pc, #4]	@ (802cb00 <__malloc_lock+0x8>)
 802cafa:	f000 bb00 	b.w	802d0fe <__retarget_lock_acquire_recursive>
 802cafe:	bf00      	nop
 802cb00:	2005c624 	.word	0x2005c624

0802cb04 <__malloc_unlock>:
 802cb04:	4801      	ldr	r0, [pc, #4]	@ (802cb0c <__malloc_unlock+0x8>)
 802cb06:	f000 bafb 	b.w	802d100 <__retarget_lock_release_recursive>
 802cb0a:	bf00      	nop
 802cb0c:	2005c624 	.word	0x2005c624

0802cb10 <__cxa_atexit>:
 802cb10:	b510      	push	{r4, lr}
 802cb12:	4604      	mov	r4, r0
 802cb14:	4804      	ldr	r0, [pc, #16]	@ (802cb28 <__cxa_atexit+0x18>)
 802cb16:	4613      	mov	r3, r2
 802cb18:	b120      	cbz	r0, 802cb24 <__cxa_atexit+0x14>
 802cb1a:	460a      	mov	r2, r1
 802cb1c:	2002      	movs	r0, #2
 802cb1e:	4621      	mov	r1, r4
 802cb20:	f000 fafc 	bl	802d11c <__register_exitproc>
 802cb24:	bd10      	pop	{r4, pc}
 802cb26:	bf00      	nop
 802cb28:	0802d11d 	.word	0x0802d11d

0802cb2c <std>:
 802cb2c:	2300      	movs	r3, #0
 802cb2e:	b510      	push	{r4, lr}
 802cb30:	4604      	mov	r4, r0
 802cb32:	6083      	str	r3, [r0, #8]
 802cb34:	8181      	strh	r1, [r0, #12]
 802cb36:	4619      	mov	r1, r3
 802cb38:	6643      	str	r3, [r0, #100]	@ 0x64
 802cb3a:	81c2      	strh	r2, [r0, #14]
 802cb3c:	2208      	movs	r2, #8
 802cb3e:	6183      	str	r3, [r0, #24]
 802cb40:	e9c0 3300 	strd	r3, r3, [r0]
 802cb44:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802cb48:	305c      	adds	r0, #92	@ 0x5c
 802cb4a:	f000 fa0b 	bl	802cf64 <memset>
 802cb4e:	4b0d      	ldr	r3, [pc, #52]	@ (802cb84 <std+0x58>)
 802cb50:	6224      	str	r4, [r4, #32]
 802cb52:	6263      	str	r3, [r4, #36]	@ 0x24
 802cb54:	4b0c      	ldr	r3, [pc, #48]	@ (802cb88 <std+0x5c>)
 802cb56:	62a3      	str	r3, [r4, #40]	@ 0x28
 802cb58:	4b0c      	ldr	r3, [pc, #48]	@ (802cb8c <std+0x60>)
 802cb5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802cb5c:	4b0c      	ldr	r3, [pc, #48]	@ (802cb90 <std+0x64>)
 802cb5e:	6323      	str	r3, [r4, #48]	@ 0x30
 802cb60:	4b0c      	ldr	r3, [pc, #48]	@ (802cb94 <std+0x68>)
 802cb62:	429c      	cmp	r4, r3
 802cb64:	d006      	beq.n	802cb74 <std+0x48>
 802cb66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802cb6a:	4294      	cmp	r4, r2
 802cb6c:	d002      	beq.n	802cb74 <std+0x48>
 802cb6e:	33d0      	adds	r3, #208	@ 0xd0
 802cb70:	429c      	cmp	r4, r3
 802cb72:	d105      	bne.n	802cb80 <std+0x54>
 802cb74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802cb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cb7c:	f000 babe 	b.w	802d0fc <__retarget_lock_init_recursive>
 802cb80:	bd10      	pop	{r4, pc}
 802cb82:	bf00      	nop
 802cb84:	0802cdb5 	.word	0x0802cdb5
 802cb88:	0802cdd7 	.word	0x0802cdd7
 802cb8c:	0802ce0f 	.word	0x0802ce0f
 802cb90:	0802ce33 	.word	0x0802ce33
 802cb94:	2005c4e4 	.word	0x2005c4e4

0802cb98 <stdio_exit_handler>:
 802cb98:	4a02      	ldr	r2, [pc, #8]	@ (802cba4 <stdio_exit_handler+0xc>)
 802cb9a:	4903      	ldr	r1, [pc, #12]	@ (802cba8 <stdio_exit_handler+0x10>)
 802cb9c:	4803      	ldr	r0, [pc, #12]	@ (802cbac <stdio_exit_handler+0x14>)
 802cb9e:	f000 b87b 	b.w	802cc98 <_fwalk_sglue>
 802cba2:	bf00      	nop
 802cba4:	2000009c 	.word	0x2000009c
 802cba8:	0802d919 	.word	0x0802d919
 802cbac:	200000ac 	.word	0x200000ac

0802cbb0 <cleanup_stdio>:
 802cbb0:	6841      	ldr	r1, [r0, #4]
 802cbb2:	4b0c      	ldr	r3, [pc, #48]	@ (802cbe4 <cleanup_stdio+0x34>)
 802cbb4:	4299      	cmp	r1, r3
 802cbb6:	b510      	push	{r4, lr}
 802cbb8:	4604      	mov	r4, r0
 802cbba:	d001      	beq.n	802cbc0 <cleanup_stdio+0x10>
 802cbbc:	f000 feac 	bl	802d918 <_fflush_r>
 802cbc0:	68a1      	ldr	r1, [r4, #8]
 802cbc2:	4b09      	ldr	r3, [pc, #36]	@ (802cbe8 <cleanup_stdio+0x38>)
 802cbc4:	4299      	cmp	r1, r3
 802cbc6:	d002      	beq.n	802cbce <cleanup_stdio+0x1e>
 802cbc8:	4620      	mov	r0, r4
 802cbca:	f000 fea5 	bl	802d918 <_fflush_r>
 802cbce:	68e1      	ldr	r1, [r4, #12]
 802cbd0:	4b06      	ldr	r3, [pc, #24]	@ (802cbec <cleanup_stdio+0x3c>)
 802cbd2:	4299      	cmp	r1, r3
 802cbd4:	d004      	beq.n	802cbe0 <cleanup_stdio+0x30>
 802cbd6:	4620      	mov	r0, r4
 802cbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cbdc:	f000 be9c 	b.w	802d918 <_fflush_r>
 802cbe0:	bd10      	pop	{r4, pc}
 802cbe2:	bf00      	nop
 802cbe4:	2005c4e4 	.word	0x2005c4e4
 802cbe8:	2005c54c 	.word	0x2005c54c
 802cbec:	2005c5b4 	.word	0x2005c5b4

0802cbf0 <global_stdio_init.part.0>:
 802cbf0:	b510      	push	{r4, lr}
 802cbf2:	4b0b      	ldr	r3, [pc, #44]	@ (802cc20 <global_stdio_init.part.0+0x30>)
 802cbf4:	2104      	movs	r1, #4
 802cbf6:	4c0b      	ldr	r4, [pc, #44]	@ (802cc24 <global_stdio_init.part.0+0x34>)
 802cbf8:	4a0b      	ldr	r2, [pc, #44]	@ (802cc28 <global_stdio_init.part.0+0x38>)
 802cbfa:	4620      	mov	r0, r4
 802cbfc:	601a      	str	r2, [r3, #0]
 802cbfe:	2200      	movs	r2, #0
 802cc00:	f7ff ff94 	bl	802cb2c <std>
 802cc04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802cc08:	2201      	movs	r2, #1
 802cc0a:	2109      	movs	r1, #9
 802cc0c:	f7ff ff8e 	bl	802cb2c <std>
 802cc10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802cc14:	2202      	movs	r2, #2
 802cc16:	2112      	movs	r1, #18
 802cc18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cc1c:	f7ff bf86 	b.w	802cb2c <std>
 802cc20:	2005c61c 	.word	0x2005c61c
 802cc24:	2005c4e4 	.word	0x2005c4e4
 802cc28:	0802cb99 	.word	0x0802cb99

0802cc2c <__sfp_lock_acquire>:
 802cc2c:	4801      	ldr	r0, [pc, #4]	@ (802cc34 <__sfp_lock_acquire+0x8>)
 802cc2e:	f000 ba66 	b.w	802d0fe <__retarget_lock_acquire_recursive>
 802cc32:	bf00      	nop
 802cc34:	2005c626 	.word	0x2005c626

0802cc38 <__sfp_lock_release>:
 802cc38:	4801      	ldr	r0, [pc, #4]	@ (802cc40 <__sfp_lock_release+0x8>)
 802cc3a:	f000 ba61 	b.w	802d100 <__retarget_lock_release_recursive>
 802cc3e:	bf00      	nop
 802cc40:	2005c626 	.word	0x2005c626

0802cc44 <__sinit>:
 802cc44:	b510      	push	{r4, lr}
 802cc46:	4604      	mov	r4, r0
 802cc48:	f7ff fff0 	bl	802cc2c <__sfp_lock_acquire>
 802cc4c:	6a23      	ldr	r3, [r4, #32]
 802cc4e:	b11b      	cbz	r3, 802cc58 <__sinit+0x14>
 802cc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cc54:	f7ff bff0 	b.w	802cc38 <__sfp_lock_release>
 802cc58:	4b04      	ldr	r3, [pc, #16]	@ (802cc6c <__sinit+0x28>)
 802cc5a:	6223      	str	r3, [r4, #32]
 802cc5c:	4b04      	ldr	r3, [pc, #16]	@ (802cc70 <__sinit+0x2c>)
 802cc5e:	681b      	ldr	r3, [r3, #0]
 802cc60:	2b00      	cmp	r3, #0
 802cc62:	d1f5      	bne.n	802cc50 <__sinit+0xc>
 802cc64:	f7ff ffc4 	bl	802cbf0 <global_stdio_init.part.0>
 802cc68:	e7f2      	b.n	802cc50 <__sinit+0xc>
 802cc6a:	bf00      	nop
 802cc6c:	0802cbb1 	.word	0x0802cbb1
 802cc70:	2005c61c 	.word	0x2005c61c

0802cc74 <fiprintf>:
 802cc74:	b40e      	push	{r1, r2, r3}
 802cc76:	b503      	push	{r0, r1, lr}
 802cc78:	ab03      	add	r3, sp, #12
 802cc7a:	4601      	mov	r1, r0
 802cc7c:	4805      	ldr	r0, [pc, #20]	@ (802cc94 <fiprintf+0x20>)
 802cc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 802cc82:	6800      	ldr	r0, [r0, #0]
 802cc84:	9301      	str	r3, [sp, #4]
 802cc86:	f000 fb1b 	bl	802d2c0 <_vfiprintf_r>
 802cc8a:	b002      	add	sp, #8
 802cc8c:	f85d eb04 	ldr.w	lr, [sp], #4
 802cc90:	b003      	add	sp, #12
 802cc92:	4770      	bx	lr
 802cc94:	200000a8 	.word	0x200000a8

0802cc98 <_fwalk_sglue>:
 802cc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cc9c:	4607      	mov	r7, r0
 802cc9e:	4688      	mov	r8, r1
 802cca0:	4614      	mov	r4, r2
 802cca2:	2600      	movs	r6, #0
 802cca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802cca8:	f1b9 0901 	subs.w	r9, r9, #1
 802ccac:	d505      	bpl.n	802ccba <_fwalk_sglue+0x22>
 802ccae:	6824      	ldr	r4, [r4, #0]
 802ccb0:	2c00      	cmp	r4, #0
 802ccb2:	d1f7      	bne.n	802cca4 <_fwalk_sglue+0xc>
 802ccb4:	4630      	mov	r0, r6
 802ccb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ccba:	89ab      	ldrh	r3, [r5, #12]
 802ccbc:	2b01      	cmp	r3, #1
 802ccbe:	d907      	bls.n	802ccd0 <_fwalk_sglue+0x38>
 802ccc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ccc4:	3301      	adds	r3, #1
 802ccc6:	d003      	beq.n	802ccd0 <_fwalk_sglue+0x38>
 802ccc8:	4629      	mov	r1, r5
 802ccca:	4638      	mov	r0, r7
 802cccc:	47c0      	blx	r8
 802ccce:	4306      	orrs	r6, r0
 802ccd0:	3568      	adds	r5, #104	@ 0x68
 802ccd2:	e7e9      	b.n	802cca8 <_fwalk_sglue+0x10>

0802ccd4 <iprintf>:
 802ccd4:	b40f      	push	{r0, r1, r2, r3}
 802ccd6:	b507      	push	{r0, r1, r2, lr}
 802ccd8:	4906      	ldr	r1, [pc, #24]	@ (802ccf4 <iprintf+0x20>)
 802ccda:	ab04      	add	r3, sp, #16
 802ccdc:	6808      	ldr	r0, [r1, #0]
 802ccde:	f853 2b04 	ldr.w	r2, [r3], #4
 802cce2:	6881      	ldr	r1, [r0, #8]
 802cce4:	9301      	str	r3, [sp, #4]
 802cce6:	f000 faeb 	bl	802d2c0 <_vfiprintf_r>
 802ccea:	b003      	add	sp, #12
 802ccec:	f85d eb04 	ldr.w	lr, [sp], #4
 802ccf0:	b004      	add	sp, #16
 802ccf2:	4770      	bx	lr
 802ccf4:	200000a8 	.word	0x200000a8

0802ccf8 <_puts_r>:
 802ccf8:	6a03      	ldr	r3, [r0, #32]
 802ccfa:	b570      	push	{r4, r5, r6, lr}
 802ccfc:	4605      	mov	r5, r0
 802ccfe:	460e      	mov	r6, r1
 802cd00:	6884      	ldr	r4, [r0, #8]
 802cd02:	b90b      	cbnz	r3, 802cd08 <_puts_r+0x10>
 802cd04:	f7ff ff9e 	bl	802cc44 <__sinit>
 802cd08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802cd0a:	07db      	lsls	r3, r3, #31
 802cd0c:	d405      	bmi.n	802cd1a <_puts_r+0x22>
 802cd0e:	89a3      	ldrh	r3, [r4, #12]
 802cd10:	0598      	lsls	r0, r3, #22
 802cd12:	d402      	bmi.n	802cd1a <_puts_r+0x22>
 802cd14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802cd16:	f000 f9f2 	bl	802d0fe <__retarget_lock_acquire_recursive>
 802cd1a:	89a3      	ldrh	r3, [r4, #12]
 802cd1c:	0719      	lsls	r1, r3, #28
 802cd1e:	d502      	bpl.n	802cd26 <_puts_r+0x2e>
 802cd20:	6923      	ldr	r3, [r4, #16]
 802cd22:	2b00      	cmp	r3, #0
 802cd24:	d135      	bne.n	802cd92 <_puts_r+0x9a>
 802cd26:	4621      	mov	r1, r4
 802cd28:	4628      	mov	r0, r5
 802cd2a:	f000 f8c5 	bl	802ceb8 <__swsetup_r>
 802cd2e:	b380      	cbz	r0, 802cd92 <_puts_r+0x9a>
 802cd30:	f04f 35ff 	mov.w	r5, #4294967295
 802cd34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802cd36:	07da      	lsls	r2, r3, #31
 802cd38:	d405      	bmi.n	802cd46 <_puts_r+0x4e>
 802cd3a:	89a3      	ldrh	r3, [r4, #12]
 802cd3c:	059b      	lsls	r3, r3, #22
 802cd3e:	d402      	bmi.n	802cd46 <_puts_r+0x4e>
 802cd40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802cd42:	f000 f9dd 	bl	802d100 <__retarget_lock_release_recursive>
 802cd46:	4628      	mov	r0, r5
 802cd48:	bd70      	pop	{r4, r5, r6, pc}
 802cd4a:	2b00      	cmp	r3, #0
 802cd4c:	da04      	bge.n	802cd58 <_puts_r+0x60>
 802cd4e:	69a2      	ldr	r2, [r4, #24]
 802cd50:	429a      	cmp	r2, r3
 802cd52:	dc17      	bgt.n	802cd84 <_puts_r+0x8c>
 802cd54:	290a      	cmp	r1, #10
 802cd56:	d015      	beq.n	802cd84 <_puts_r+0x8c>
 802cd58:	6823      	ldr	r3, [r4, #0]
 802cd5a:	1c5a      	adds	r2, r3, #1
 802cd5c:	6022      	str	r2, [r4, #0]
 802cd5e:	7019      	strb	r1, [r3, #0]
 802cd60:	68a3      	ldr	r3, [r4, #8]
 802cd62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802cd66:	3b01      	subs	r3, #1
 802cd68:	60a3      	str	r3, [r4, #8]
 802cd6a:	2900      	cmp	r1, #0
 802cd6c:	d1ed      	bne.n	802cd4a <_puts_r+0x52>
 802cd6e:	2b00      	cmp	r3, #0
 802cd70:	da11      	bge.n	802cd96 <_puts_r+0x9e>
 802cd72:	4622      	mov	r2, r4
 802cd74:	210a      	movs	r1, #10
 802cd76:	4628      	mov	r0, r5
 802cd78:	f000 f85f 	bl	802ce3a <__swbuf_r>
 802cd7c:	3001      	adds	r0, #1
 802cd7e:	d0d7      	beq.n	802cd30 <_puts_r+0x38>
 802cd80:	250a      	movs	r5, #10
 802cd82:	e7d7      	b.n	802cd34 <_puts_r+0x3c>
 802cd84:	4622      	mov	r2, r4
 802cd86:	4628      	mov	r0, r5
 802cd88:	f000 f857 	bl	802ce3a <__swbuf_r>
 802cd8c:	3001      	adds	r0, #1
 802cd8e:	d1e7      	bne.n	802cd60 <_puts_r+0x68>
 802cd90:	e7ce      	b.n	802cd30 <_puts_r+0x38>
 802cd92:	3e01      	subs	r6, #1
 802cd94:	e7e4      	b.n	802cd60 <_puts_r+0x68>
 802cd96:	6823      	ldr	r3, [r4, #0]
 802cd98:	1c5a      	adds	r2, r3, #1
 802cd9a:	6022      	str	r2, [r4, #0]
 802cd9c:	220a      	movs	r2, #10
 802cd9e:	701a      	strb	r2, [r3, #0]
 802cda0:	e7ee      	b.n	802cd80 <_puts_r+0x88>
	...

0802cda4 <puts>:
 802cda4:	4b02      	ldr	r3, [pc, #8]	@ (802cdb0 <puts+0xc>)
 802cda6:	4601      	mov	r1, r0
 802cda8:	6818      	ldr	r0, [r3, #0]
 802cdaa:	f7ff bfa5 	b.w	802ccf8 <_puts_r>
 802cdae:	bf00      	nop
 802cdb0:	200000a8 	.word	0x200000a8

0802cdb4 <__sread>:
 802cdb4:	b510      	push	{r4, lr}
 802cdb6:	460c      	mov	r4, r1
 802cdb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cdbc:	f000 f92c 	bl	802d018 <_read_r>
 802cdc0:	2800      	cmp	r0, #0
 802cdc2:	bfab      	itete	ge
 802cdc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802cdc6:	89a3      	ldrhlt	r3, [r4, #12]
 802cdc8:	181b      	addge	r3, r3, r0
 802cdca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802cdce:	bfac      	ite	ge
 802cdd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 802cdd2:	81a3      	strhlt	r3, [r4, #12]
 802cdd4:	bd10      	pop	{r4, pc}

0802cdd6 <__swrite>:
 802cdd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cdda:	461f      	mov	r7, r3
 802cddc:	898b      	ldrh	r3, [r1, #12]
 802cdde:	4605      	mov	r5, r0
 802cde0:	460c      	mov	r4, r1
 802cde2:	05db      	lsls	r3, r3, #23
 802cde4:	4616      	mov	r6, r2
 802cde6:	d505      	bpl.n	802cdf4 <__swrite+0x1e>
 802cde8:	2302      	movs	r3, #2
 802cdea:	2200      	movs	r2, #0
 802cdec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cdf0:	f000 f900 	bl	802cff4 <_lseek_r>
 802cdf4:	89a3      	ldrh	r3, [r4, #12]
 802cdf6:	4632      	mov	r2, r6
 802cdf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cdfc:	4628      	mov	r0, r5
 802cdfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802ce02:	81a3      	strh	r3, [r4, #12]
 802ce04:	463b      	mov	r3, r7
 802ce06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ce0a:	f000 b93b 	b.w	802d084 <_write_r>

0802ce0e <__sseek>:
 802ce0e:	b510      	push	{r4, lr}
 802ce10:	460c      	mov	r4, r1
 802ce12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ce16:	f000 f8ed 	bl	802cff4 <_lseek_r>
 802ce1a:	1c43      	adds	r3, r0, #1
 802ce1c:	89a3      	ldrh	r3, [r4, #12]
 802ce1e:	bf15      	itete	ne
 802ce20:	6560      	strne	r0, [r4, #84]	@ 0x54
 802ce22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802ce26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802ce2a:	81a3      	strheq	r3, [r4, #12]
 802ce2c:	bf18      	it	ne
 802ce2e:	81a3      	strhne	r3, [r4, #12]
 802ce30:	bd10      	pop	{r4, pc}

0802ce32 <__sclose>:
 802ce32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ce36:	f000 b8cd 	b.w	802cfd4 <_close_r>

0802ce3a <__swbuf_r>:
 802ce3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ce3c:	460e      	mov	r6, r1
 802ce3e:	4614      	mov	r4, r2
 802ce40:	4605      	mov	r5, r0
 802ce42:	b118      	cbz	r0, 802ce4c <__swbuf_r+0x12>
 802ce44:	6a03      	ldr	r3, [r0, #32]
 802ce46:	b90b      	cbnz	r3, 802ce4c <__swbuf_r+0x12>
 802ce48:	f7ff fefc 	bl	802cc44 <__sinit>
 802ce4c:	69a3      	ldr	r3, [r4, #24]
 802ce4e:	60a3      	str	r3, [r4, #8]
 802ce50:	89a3      	ldrh	r3, [r4, #12]
 802ce52:	071a      	lsls	r2, r3, #28
 802ce54:	d501      	bpl.n	802ce5a <__swbuf_r+0x20>
 802ce56:	6923      	ldr	r3, [r4, #16]
 802ce58:	b943      	cbnz	r3, 802ce6c <__swbuf_r+0x32>
 802ce5a:	4621      	mov	r1, r4
 802ce5c:	4628      	mov	r0, r5
 802ce5e:	f000 f82b 	bl	802ceb8 <__swsetup_r>
 802ce62:	b118      	cbz	r0, 802ce6c <__swbuf_r+0x32>
 802ce64:	f04f 37ff 	mov.w	r7, #4294967295
 802ce68:	4638      	mov	r0, r7
 802ce6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ce6c:	6823      	ldr	r3, [r4, #0]
 802ce6e:	b2f6      	uxtb	r6, r6
 802ce70:	6922      	ldr	r2, [r4, #16]
 802ce72:	4637      	mov	r7, r6
 802ce74:	1a98      	subs	r0, r3, r2
 802ce76:	6963      	ldr	r3, [r4, #20]
 802ce78:	4283      	cmp	r3, r0
 802ce7a:	dc05      	bgt.n	802ce88 <__swbuf_r+0x4e>
 802ce7c:	4621      	mov	r1, r4
 802ce7e:	4628      	mov	r0, r5
 802ce80:	f000 fd4a 	bl	802d918 <_fflush_r>
 802ce84:	2800      	cmp	r0, #0
 802ce86:	d1ed      	bne.n	802ce64 <__swbuf_r+0x2a>
 802ce88:	68a3      	ldr	r3, [r4, #8]
 802ce8a:	3b01      	subs	r3, #1
 802ce8c:	60a3      	str	r3, [r4, #8]
 802ce8e:	6823      	ldr	r3, [r4, #0]
 802ce90:	1c5a      	adds	r2, r3, #1
 802ce92:	6022      	str	r2, [r4, #0]
 802ce94:	701e      	strb	r6, [r3, #0]
 802ce96:	1c43      	adds	r3, r0, #1
 802ce98:	6962      	ldr	r2, [r4, #20]
 802ce9a:	429a      	cmp	r2, r3
 802ce9c:	d004      	beq.n	802cea8 <__swbuf_r+0x6e>
 802ce9e:	89a3      	ldrh	r3, [r4, #12]
 802cea0:	07db      	lsls	r3, r3, #31
 802cea2:	d5e1      	bpl.n	802ce68 <__swbuf_r+0x2e>
 802cea4:	2e0a      	cmp	r6, #10
 802cea6:	d1df      	bne.n	802ce68 <__swbuf_r+0x2e>
 802cea8:	4621      	mov	r1, r4
 802ceaa:	4628      	mov	r0, r5
 802ceac:	f000 fd34 	bl	802d918 <_fflush_r>
 802ceb0:	2800      	cmp	r0, #0
 802ceb2:	d0d9      	beq.n	802ce68 <__swbuf_r+0x2e>
 802ceb4:	e7d6      	b.n	802ce64 <__swbuf_r+0x2a>
	...

0802ceb8 <__swsetup_r>:
 802ceb8:	b538      	push	{r3, r4, r5, lr}
 802ceba:	4b29      	ldr	r3, [pc, #164]	@ (802cf60 <__swsetup_r+0xa8>)
 802cebc:	4605      	mov	r5, r0
 802cebe:	460c      	mov	r4, r1
 802cec0:	6818      	ldr	r0, [r3, #0]
 802cec2:	b118      	cbz	r0, 802cecc <__swsetup_r+0x14>
 802cec4:	6a03      	ldr	r3, [r0, #32]
 802cec6:	b90b      	cbnz	r3, 802cecc <__swsetup_r+0x14>
 802cec8:	f7ff febc 	bl	802cc44 <__sinit>
 802cecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ced0:	0719      	lsls	r1, r3, #28
 802ced2:	d422      	bmi.n	802cf1a <__swsetup_r+0x62>
 802ced4:	06da      	lsls	r2, r3, #27
 802ced6:	d407      	bmi.n	802cee8 <__swsetup_r+0x30>
 802ced8:	2209      	movs	r2, #9
 802ceda:	602a      	str	r2, [r5, #0]
 802cedc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802cee0:	f04f 30ff 	mov.w	r0, #4294967295
 802cee4:	81a3      	strh	r3, [r4, #12]
 802cee6:	e033      	b.n	802cf50 <__swsetup_r+0x98>
 802cee8:	0758      	lsls	r0, r3, #29
 802ceea:	d512      	bpl.n	802cf12 <__swsetup_r+0x5a>
 802ceec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802ceee:	b141      	cbz	r1, 802cf02 <__swsetup_r+0x4a>
 802cef0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802cef4:	4299      	cmp	r1, r3
 802cef6:	d002      	beq.n	802cefe <__swsetup_r+0x46>
 802cef8:	4628      	mov	r0, r5
 802cefa:	f000 f96d 	bl	802d1d8 <_free_r>
 802cefe:	2300      	movs	r3, #0
 802cf00:	6363      	str	r3, [r4, #52]	@ 0x34
 802cf02:	89a3      	ldrh	r3, [r4, #12]
 802cf04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802cf08:	81a3      	strh	r3, [r4, #12]
 802cf0a:	2300      	movs	r3, #0
 802cf0c:	6063      	str	r3, [r4, #4]
 802cf0e:	6923      	ldr	r3, [r4, #16]
 802cf10:	6023      	str	r3, [r4, #0]
 802cf12:	89a3      	ldrh	r3, [r4, #12]
 802cf14:	f043 0308 	orr.w	r3, r3, #8
 802cf18:	81a3      	strh	r3, [r4, #12]
 802cf1a:	6923      	ldr	r3, [r4, #16]
 802cf1c:	b94b      	cbnz	r3, 802cf32 <__swsetup_r+0x7a>
 802cf1e:	89a3      	ldrh	r3, [r4, #12]
 802cf20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802cf24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802cf28:	d003      	beq.n	802cf32 <__swsetup_r+0x7a>
 802cf2a:	4621      	mov	r1, r4
 802cf2c:	4628      	mov	r0, r5
 802cf2e:	f000 fd40 	bl	802d9b2 <__smakebuf_r>
 802cf32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cf36:	f013 0201 	ands.w	r2, r3, #1
 802cf3a:	d00a      	beq.n	802cf52 <__swsetup_r+0x9a>
 802cf3c:	2200      	movs	r2, #0
 802cf3e:	60a2      	str	r2, [r4, #8]
 802cf40:	6962      	ldr	r2, [r4, #20]
 802cf42:	4252      	negs	r2, r2
 802cf44:	61a2      	str	r2, [r4, #24]
 802cf46:	6922      	ldr	r2, [r4, #16]
 802cf48:	b942      	cbnz	r2, 802cf5c <__swsetup_r+0xa4>
 802cf4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802cf4e:	d1c5      	bne.n	802cedc <__swsetup_r+0x24>
 802cf50:	bd38      	pop	{r3, r4, r5, pc}
 802cf52:	0799      	lsls	r1, r3, #30
 802cf54:	bf58      	it	pl
 802cf56:	6962      	ldrpl	r2, [r4, #20]
 802cf58:	60a2      	str	r2, [r4, #8]
 802cf5a:	e7f4      	b.n	802cf46 <__swsetup_r+0x8e>
 802cf5c:	2000      	movs	r0, #0
 802cf5e:	e7f7      	b.n	802cf50 <__swsetup_r+0x98>
 802cf60:	200000a8 	.word	0x200000a8

0802cf64 <memset>:
 802cf64:	4402      	add	r2, r0
 802cf66:	4603      	mov	r3, r0
 802cf68:	4293      	cmp	r3, r2
 802cf6a:	d100      	bne.n	802cf6e <memset+0xa>
 802cf6c:	4770      	bx	lr
 802cf6e:	f803 1b01 	strb.w	r1, [r3], #1
 802cf72:	e7f9      	b.n	802cf68 <memset+0x4>

0802cf74 <_raise_r>:
 802cf74:	291f      	cmp	r1, #31
 802cf76:	b538      	push	{r3, r4, r5, lr}
 802cf78:	4605      	mov	r5, r0
 802cf7a:	460c      	mov	r4, r1
 802cf7c:	d904      	bls.n	802cf88 <_raise_r+0x14>
 802cf7e:	2316      	movs	r3, #22
 802cf80:	6003      	str	r3, [r0, #0]
 802cf82:	f04f 30ff 	mov.w	r0, #4294967295
 802cf86:	bd38      	pop	{r3, r4, r5, pc}
 802cf88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802cf8a:	b112      	cbz	r2, 802cf92 <_raise_r+0x1e>
 802cf8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802cf90:	b94b      	cbnz	r3, 802cfa6 <_raise_r+0x32>
 802cf92:	4628      	mov	r0, r5
 802cf94:	f000 f864 	bl	802d060 <_getpid_r>
 802cf98:	4622      	mov	r2, r4
 802cf9a:	4601      	mov	r1, r0
 802cf9c:	4628      	mov	r0, r5
 802cf9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cfa2:	f000 b84b 	b.w	802d03c <_kill_r>
 802cfa6:	2b01      	cmp	r3, #1
 802cfa8:	d00a      	beq.n	802cfc0 <_raise_r+0x4c>
 802cfaa:	1c59      	adds	r1, r3, #1
 802cfac:	d103      	bne.n	802cfb6 <_raise_r+0x42>
 802cfae:	2316      	movs	r3, #22
 802cfb0:	6003      	str	r3, [r0, #0]
 802cfb2:	2001      	movs	r0, #1
 802cfb4:	e7e7      	b.n	802cf86 <_raise_r+0x12>
 802cfb6:	2100      	movs	r1, #0
 802cfb8:	4620      	mov	r0, r4
 802cfba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802cfbe:	4798      	blx	r3
 802cfc0:	2000      	movs	r0, #0
 802cfc2:	e7e0      	b.n	802cf86 <_raise_r+0x12>

0802cfc4 <raise>:
 802cfc4:	4b02      	ldr	r3, [pc, #8]	@ (802cfd0 <raise+0xc>)
 802cfc6:	4601      	mov	r1, r0
 802cfc8:	6818      	ldr	r0, [r3, #0]
 802cfca:	f7ff bfd3 	b.w	802cf74 <_raise_r>
 802cfce:	bf00      	nop
 802cfd0:	200000a8 	.word	0x200000a8

0802cfd4 <_close_r>:
 802cfd4:	b538      	push	{r3, r4, r5, lr}
 802cfd6:	2300      	movs	r3, #0
 802cfd8:	4d05      	ldr	r5, [pc, #20]	@ (802cff0 <_close_r+0x1c>)
 802cfda:	4604      	mov	r4, r0
 802cfdc:	4608      	mov	r0, r1
 802cfde:	602b      	str	r3, [r5, #0]
 802cfe0:	f7d4 fcf8 	bl	80019d4 <_close>
 802cfe4:	1c43      	adds	r3, r0, #1
 802cfe6:	d102      	bne.n	802cfee <_close_r+0x1a>
 802cfe8:	682b      	ldr	r3, [r5, #0]
 802cfea:	b103      	cbz	r3, 802cfee <_close_r+0x1a>
 802cfec:	6023      	str	r3, [r4, #0]
 802cfee:	bd38      	pop	{r3, r4, r5, pc}
 802cff0:	2005c620 	.word	0x2005c620

0802cff4 <_lseek_r>:
 802cff4:	b538      	push	{r3, r4, r5, lr}
 802cff6:	4604      	mov	r4, r0
 802cff8:	4d06      	ldr	r5, [pc, #24]	@ (802d014 <_lseek_r+0x20>)
 802cffa:	4608      	mov	r0, r1
 802cffc:	4611      	mov	r1, r2
 802cffe:	2200      	movs	r2, #0
 802d000:	602a      	str	r2, [r5, #0]
 802d002:	461a      	mov	r2, r3
 802d004:	f7d4 fd0d 	bl	8001a22 <_lseek>
 802d008:	1c43      	adds	r3, r0, #1
 802d00a:	d102      	bne.n	802d012 <_lseek_r+0x1e>
 802d00c:	682b      	ldr	r3, [r5, #0]
 802d00e:	b103      	cbz	r3, 802d012 <_lseek_r+0x1e>
 802d010:	6023      	str	r3, [r4, #0]
 802d012:	bd38      	pop	{r3, r4, r5, pc}
 802d014:	2005c620 	.word	0x2005c620

0802d018 <_read_r>:
 802d018:	b538      	push	{r3, r4, r5, lr}
 802d01a:	4604      	mov	r4, r0
 802d01c:	4d06      	ldr	r5, [pc, #24]	@ (802d038 <_read_r+0x20>)
 802d01e:	4608      	mov	r0, r1
 802d020:	4611      	mov	r1, r2
 802d022:	2200      	movs	r2, #0
 802d024:	602a      	str	r2, [r5, #0]
 802d026:	461a      	mov	r2, r3
 802d028:	f7d4 fc9b 	bl	8001962 <_read>
 802d02c:	1c43      	adds	r3, r0, #1
 802d02e:	d102      	bne.n	802d036 <_read_r+0x1e>
 802d030:	682b      	ldr	r3, [r5, #0]
 802d032:	b103      	cbz	r3, 802d036 <_read_r+0x1e>
 802d034:	6023      	str	r3, [r4, #0]
 802d036:	bd38      	pop	{r3, r4, r5, pc}
 802d038:	2005c620 	.word	0x2005c620

0802d03c <_kill_r>:
 802d03c:	b538      	push	{r3, r4, r5, lr}
 802d03e:	2300      	movs	r3, #0
 802d040:	4d06      	ldr	r5, [pc, #24]	@ (802d05c <_kill_r+0x20>)
 802d042:	4604      	mov	r4, r0
 802d044:	4608      	mov	r0, r1
 802d046:	4611      	mov	r1, r2
 802d048:	602b      	str	r3, [r5, #0]
 802d04a:	f7d4 fc6f 	bl	800192c <_kill>
 802d04e:	1c43      	adds	r3, r0, #1
 802d050:	d102      	bne.n	802d058 <_kill_r+0x1c>
 802d052:	682b      	ldr	r3, [r5, #0]
 802d054:	b103      	cbz	r3, 802d058 <_kill_r+0x1c>
 802d056:	6023      	str	r3, [r4, #0]
 802d058:	bd38      	pop	{r3, r4, r5, pc}
 802d05a:	bf00      	nop
 802d05c:	2005c620 	.word	0x2005c620

0802d060 <_getpid_r>:
 802d060:	f7d4 bc5c 	b.w	800191c <_getpid>

0802d064 <_sbrk_r>:
 802d064:	b538      	push	{r3, r4, r5, lr}
 802d066:	2300      	movs	r3, #0
 802d068:	4d05      	ldr	r5, [pc, #20]	@ (802d080 <_sbrk_r+0x1c>)
 802d06a:	4604      	mov	r4, r0
 802d06c:	4608      	mov	r0, r1
 802d06e:	602b      	str	r3, [r5, #0]
 802d070:	f7d4 fce4 	bl	8001a3c <_sbrk>
 802d074:	1c43      	adds	r3, r0, #1
 802d076:	d102      	bne.n	802d07e <_sbrk_r+0x1a>
 802d078:	682b      	ldr	r3, [r5, #0]
 802d07a:	b103      	cbz	r3, 802d07e <_sbrk_r+0x1a>
 802d07c:	6023      	str	r3, [r4, #0]
 802d07e:	bd38      	pop	{r3, r4, r5, pc}
 802d080:	2005c620 	.word	0x2005c620

0802d084 <_write_r>:
 802d084:	b538      	push	{r3, r4, r5, lr}
 802d086:	4604      	mov	r4, r0
 802d088:	4d06      	ldr	r5, [pc, #24]	@ (802d0a4 <_write_r+0x20>)
 802d08a:	4608      	mov	r0, r1
 802d08c:	4611      	mov	r1, r2
 802d08e:	2200      	movs	r2, #0
 802d090:	602a      	str	r2, [r5, #0]
 802d092:	461a      	mov	r2, r3
 802d094:	f7d4 fc82 	bl	800199c <_write>
 802d098:	1c43      	adds	r3, r0, #1
 802d09a:	d102      	bne.n	802d0a2 <_write_r+0x1e>
 802d09c:	682b      	ldr	r3, [r5, #0]
 802d09e:	b103      	cbz	r3, 802d0a2 <_write_r+0x1e>
 802d0a0:	6023      	str	r3, [r4, #0]
 802d0a2:	bd38      	pop	{r3, r4, r5, pc}
 802d0a4:	2005c620 	.word	0x2005c620

0802d0a8 <__errno>:
 802d0a8:	4b01      	ldr	r3, [pc, #4]	@ (802d0b0 <__errno+0x8>)
 802d0aa:	6818      	ldr	r0, [r3, #0]
 802d0ac:	4770      	bx	lr
 802d0ae:	bf00      	nop
 802d0b0:	200000a8 	.word	0x200000a8

0802d0b4 <__libc_init_array>:
 802d0b4:	b570      	push	{r4, r5, r6, lr}
 802d0b6:	4d0d      	ldr	r5, [pc, #52]	@ (802d0ec <__libc_init_array+0x38>)
 802d0b8:	2600      	movs	r6, #0
 802d0ba:	4c0d      	ldr	r4, [pc, #52]	@ (802d0f0 <__libc_init_array+0x3c>)
 802d0bc:	1b64      	subs	r4, r4, r5
 802d0be:	10a4      	asrs	r4, r4, #2
 802d0c0:	42a6      	cmp	r6, r4
 802d0c2:	d109      	bne.n	802d0d8 <__libc_init_array+0x24>
 802d0c4:	4d0b      	ldr	r5, [pc, #44]	@ (802d0f4 <__libc_init_array+0x40>)
 802d0c6:	2600      	movs	r6, #0
 802d0c8:	4c0b      	ldr	r4, [pc, #44]	@ (802d0f8 <__libc_init_array+0x44>)
 802d0ca:	f000 fcdf 	bl	802da8c <_init>
 802d0ce:	1b64      	subs	r4, r4, r5
 802d0d0:	10a4      	asrs	r4, r4, #2
 802d0d2:	42a6      	cmp	r6, r4
 802d0d4:	d105      	bne.n	802d0e2 <__libc_init_array+0x2e>
 802d0d6:	bd70      	pop	{r4, r5, r6, pc}
 802d0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 802d0dc:	3601      	adds	r6, #1
 802d0de:	4798      	blx	r3
 802d0e0:	e7ee      	b.n	802d0c0 <__libc_init_array+0xc>
 802d0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 802d0e6:	3601      	adds	r6, #1
 802d0e8:	4798      	blx	r3
 802d0ea:	e7f2      	b.n	802d0d2 <__libc_init_array+0x1e>
 802d0ec:	08030fe8 	.word	0x08030fe8
 802d0f0:	08030fe8 	.word	0x08030fe8
 802d0f4:	08030fe8 	.word	0x08030fe8
 802d0f8:	08030ffc 	.word	0x08030ffc

0802d0fc <__retarget_lock_init_recursive>:
 802d0fc:	4770      	bx	lr

0802d0fe <__retarget_lock_acquire_recursive>:
 802d0fe:	4770      	bx	lr

0802d100 <__retarget_lock_release_recursive>:
 802d100:	4770      	bx	lr

0802d102 <memcpy>:
 802d102:	440a      	add	r2, r1
 802d104:	1e43      	subs	r3, r0, #1
 802d106:	4291      	cmp	r1, r2
 802d108:	d100      	bne.n	802d10c <memcpy+0xa>
 802d10a:	4770      	bx	lr
 802d10c:	b510      	push	{r4, lr}
 802d10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d112:	4291      	cmp	r1, r2
 802d114:	f803 4f01 	strb.w	r4, [r3, #1]!
 802d118:	d1f9      	bne.n	802d10e <memcpy+0xc>
 802d11a:	bd10      	pop	{r4, pc}

0802d11c <__register_exitproc>:
 802d11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d120:	4d28      	ldr	r5, [pc, #160]	@ (802d1c4 <__register_exitproc+0xa8>)
 802d122:	4607      	mov	r7, r0
 802d124:	4691      	mov	r9, r2
 802d126:	460e      	mov	r6, r1
 802d128:	6828      	ldr	r0, [r5, #0]
 802d12a:	4698      	mov	r8, r3
 802d12c:	f7ff ffe7 	bl	802d0fe <__retarget_lock_acquire_recursive>
 802d130:	4a25      	ldr	r2, [pc, #148]	@ (802d1c8 <__register_exitproc+0xac>)
 802d132:	6814      	ldr	r4, [r2, #0]
 802d134:	b93c      	cbnz	r4, 802d146 <__register_exitproc+0x2a>
 802d136:	4b25      	ldr	r3, [pc, #148]	@ (802d1cc <__register_exitproc+0xb0>)
 802d138:	6013      	str	r3, [r2, #0]
 802d13a:	4a25      	ldr	r2, [pc, #148]	@ (802d1d0 <__register_exitproc+0xb4>)
 802d13c:	b112      	cbz	r2, 802d144 <__register_exitproc+0x28>
 802d13e:	6812      	ldr	r2, [r2, #0]
 802d140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802d144:	4c21      	ldr	r4, [pc, #132]	@ (802d1cc <__register_exitproc+0xb0>)
 802d146:	6863      	ldr	r3, [r4, #4]
 802d148:	2b1f      	cmp	r3, #31
 802d14a:	dd06      	ble.n	802d15a <__register_exitproc+0x3e>
 802d14c:	6828      	ldr	r0, [r5, #0]
 802d14e:	f7ff ffd7 	bl	802d100 <__retarget_lock_release_recursive>
 802d152:	f04f 30ff 	mov.w	r0, #4294967295
 802d156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d15a:	b33f      	cbz	r7, 802d1ac <__register_exitproc+0x90>
 802d15c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802d160:	b968      	cbnz	r0, 802d17e <__register_exitproc+0x62>
 802d162:	4b1c      	ldr	r3, [pc, #112]	@ (802d1d4 <__register_exitproc+0xb8>)
 802d164:	2b00      	cmp	r3, #0
 802d166:	d0f1      	beq.n	802d14c <__register_exitproc+0x30>
 802d168:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802d16c:	f7ff fc12 	bl	802c994 <malloc>
 802d170:	2800      	cmp	r0, #0
 802d172:	d0eb      	beq.n	802d14c <__register_exitproc+0x30>
 802d174:	2300      	movs	r3, #0
 802d176:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802d17a:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802d17e:	6863      	ldr	r3, [r4, #4]
 802d180:	2201      	movs	r2, #1
 802d182:	2f02      	cmp	r7, #2
 802d184:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802d188:	fa02 f203 	lsl.w	r2, r2, r3
 802d18c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802d190:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802d194:	ea43 0302 	orr.w	r3, r3, r2
 802d198:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802d19c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802d1a0:	bf02      	ittt	eq
 802d1a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802d1a6:	4313      	orreq	r3, r2
 802d1a8:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802d1ac:	6863      	ldr	r3, [r4, #4]
 802d1ae:	6828      	ldr	r0, [r5, #0]
 802d1b0:	1c5a      	adds	r2, r3, #1
 802d1b2:	3302      	adds	r3, #2
 802d1b4:	6062      	str	r2, [r4, #4]
 802d1b6:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802d1ba:	f7ff ffa1 	bl	802d100 <__retarget_lock_release_recursive>
 802d1be:	2000      	movs	r0, #0
 802d1c0:	e7c9      	b.n	802d156 <__register_exitproc+0x3a>
 802d1c2:	bf00      	nop
 802d1c4:	200000f8 	.word	0x200000f8
 802d1c8:	2005c6b4 	.word	0x2005c6b4
 802d1cc:	2005c628 	.word	0x2005c628
 802d1d0:	0803018c 	.word	0x0803018c
 802d1d4:	0802c995 	.word	0x0802c995

0802d1d8 <_free_r>:
 802d1d8:	b538      	push	{r3, r4, r5, lr}
 802d1da:	4605      	mov	r5, r0
 802d1dc:	2900      	cmp	r1, #0
 802d1de:	d041      	beq.n	802d264 <_free_r+0x8c>
 802d1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d1e4:	1f0c      	subs	r4, r1, #4
 802d1e6:	2b00      	cmp	r3, #0
 802d1e8:	bfb8      	it	lt
 802d1ea:	18e4      	addlt	r4, r4, r3
 802d1ec:	f7ff fc84 	bl	802caf8 <__malloc_lock>
 802d1f0:	4a1d      	ldr	r2, [pc, #116]	@ (802d268 <_free_r+0x90>)
 802d1f2:	6813      	ldr	r3, [r2, #0]
 802d1f4:	b933      	cbnz	r3, 802d204 <_free_r+0x2c>
 802d1f6:	6063      	str	r3, [r4, #4]
 802d1f8:	6014      	str	r4, [r2, #0]
 802d1fa:	4628      	mov	r0, r5
 802d1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d200:	f7ff bc80 	b.w	802cb04 <__malloc_unlock>
 802d204:	42a3      	cmp	r3, r4
 802d206:	d908      	bls.n	802d21a <_free_r+0x42>
 802d208:	6820      	ldr	r0, [r4, #0]
 802d20a:	1821      	adds	r1, r4, r0
 802d20c:	428b      	cmp	r3, r1
 802d20e:	bf01      	itttt	eq
 802d210:	6819      	ldreq	r1, [r3, #0]
 802d212:	685b      	ldreq	r3, [r3, #4]
 802d214:	1809      	addeq	r1, r1, r0
 802d216:	6021      	streq	r1, [r4, #0]
 802d218:	e7ed      	b.n	802d1f6 <_free_r+0x1e>
 802d21a:	461a      	mov	r2, r3
 802d21c:	685b      	ldr	r3, [r3, #4]
 802d21e:	b10b      	cbz	r3, 802d224 <_free_r+0x4c>
 802d220:	42a3      	cmp	r3, r4
 802d222:	d9fa      	bls.n	802d21a <_free_r+0x42>
 802d224:	6811      	ldr	r1, [r2, #0]
 802d226:	1850      	adds	r0, r2, r1
 802d228:	42a0      	cmp	r0, r4
 802d22a:	d10b      	bne.n	802d244 <_free_r+0x6c>
 802d22c:	6820      	ldr	r0, [r4, #0]
 802d22e:	4401      	add	r1, r0
 802d230:	1850      	adds	r0, r2, r1
 802d232:	6011      	str	r1, [r2, #0]
 802d234:	4283      	cmp	r3, r0
 802d236:	d1e0      	bne.n	802d1fa <_free_r+0x22>
 802d238:	6818      	ldr	r0, [r3, #0]
 802d23a:	685b      	ldr	r3, [r3, #4]
 802d23c:	4408      	add	r0, r1
 802d23e:	6053      	str	r3, [r2, #4]
 802d240:	6010      	str	r0, [r2, #0]
 802d242:	e7da      	b.n	802d1fa <_free_r+0x22>
 802d244:	d902      	bls.n	802d24c <_free_r+0x74>
 802d246:	230c      	movs	r3, #12
 802d248:	602b      	str	r3, [r5, #0]
 802d24a:	e7d6      	b.n	802d1fa <_free_r+0x22>
 802d24c:	6820      	ldr	r0, [r4, #0]
 802d24e:	1821      	adds	r1, r4, r0
 802d250:	428b      	cmp	r3, r1
 802d252:	bf02      	ittt	eq
 802d254:	6819      	ldreq	r1, [r3, #0]
 802d256:	685b      	ldreq	r3, [r3, #4]
 802d258:	1809      	addeq	r1, r1, r0
 802d25a:	6063      	str	r3, [r4, #4]
 802d25c:	bf08      	it	eq
 802d25e:	6021      	streq	r1, [r4, #0]
 802d260:	6054      	str	r4, [r2, #4]
 802d262:	e7ca      	b.n	802d1fa <_free_r+0x22>
 802d264:	bd38      	pop	{r3, r4, r5, pc}
 802d266:	bf00      	nop
 802d268:	2005c4e0 	.word	0x2005c4e0

0802d26c <__sfputc_r>:
 802d26c:	6893      	ldr	r3, [r2, #8]
 802d26e:	3b01      	subs	r3, #1
 802d270:	2b00      	cmp	r3, #0
 802d272:	b410      	push	{r4}
 802d274:	6093      	str	r3, [r2, #8]
 802d276:	da08      	bge.n	802d28a <__sfputc_r+0x1e>
 802d278:	6994      	ldr	r4, [r2, #24]
 802d27a:	42a3      	cmp	r3, r4
 802d27c:	db01      	blt.n	802d282 <__sfputc_r+0x16>
 802d27e:	290a      	cmp	r1, #10
 802d280:	d103      	bne.n	802d28a <__sfputc_r+0x1e>
 802d282:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d286:	f7ff bdd8 	b.w	802ce3a <__swbuf_r>
 802d28a:	6813      	ldr	r3, [r2, #0]
 802d28c:	1c58      	adds	r0, r3, #1
 802d28e:	6010      	str	r0, [r2, #0]
 802d290:	4608      	mov	r0, r1
 802d292:	7019      	strb	r1, [r3, #0]
 802d294:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d298:	4770      	bx	lr

0802d29a <__sfputs_r>:
 802d29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d29c:	4606      	mov	r6, r0
 802d29e:	460f      	mov	r7, r1
 802d2a0:	4614      	mov	r4, r2
 802d2a2:	18d5      	adds	r5, r2, r3
 802d2a4:	42ac      	cmp	r4, r5
 802d2a6:	d101      	bne.n	802d2ac <__sfputs_r+0x12>
 802d2a8:	2000      	movs	r0, #0
 802d2aa:	e007      	b.n	802d2bc <__sfputs_r+0x22>
 802d2ac:	463a      	mov	r2, r7
 802d2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d2b2:	4630      	mov	r0, r6
 802d2b4:	f7ff ffda 	bl	802d26c <__sfputc_r>
 802d2b8:	1c43      	adds	r3, r0, #1
 802d2ba:	d1f3      	bne.n	802d2a4 <__sfputs_r+0xa>
 802d2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802d2c0 <_vfiprintf_r>:
 802d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d2c4:	460d      	mov	r5, r1
 802d2c6:	b09d      	sub	sp, #116	@ 0x74
 802d2c8:	4614      	mov	r4, r2
 802d2ca:	4698      	mov	r8, r3
 802d2cc:	4606      	mov	r6, r0
 802d2ce:	b118      	cbz	r0, 802d2d8 <_vfiprintf_r+0x18>
 802d2d0:	6a03      	ldr	r3, [r0, #32]
 802d2d2:	b90b      	cbnz	r3, 802d2d8 <_vfiprintf_r+0x18>
 802d2d4:	f7ff fcb6 	bl	802cc44 <__sinit>
 802d2d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802d2da:	07d9      	lsls	r1, r3, #31
 802d2dc:	d405      	bmi.n	802d2ea <_vfiprintf_r+0x2a>
 802d2de:	89ab      	ldrh	r3, [r5, #12]
 802d2e0:	059a      	lsls	r2, r3, #22
 802d2e2:	d402      	bmi.n	802d2ea <_vfiprintf_r+0x2a>
 802d2e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802d2e6:	f7ff ff0a 	bl	802d0fe <__retarget_lock_acquire_recursive>
 802d2ea:	89ab      	ldrh	r3, [r5, #12]
 802d2ec:	071b      	lsls	r3, r3, #28
 802d2ee:	d501      	bpl.n	802d2f4 <_vfiprintf_r+0x34>
 802d2f0:	692b      	ldr	r3, [r5, #16]
 802d2f2:	b99b      	cbnz	r3, 802d31c <_vfiprintf_r+0x5c>
 802d2f4:	4629      	mov	r1, r5
 802d2f6:	4630      	mov	r0, r6
 802d2f8:	f7ff fdde 	bl	802ceb8 <__swsetup_r>
 802d2fc:	b170      	cbz	r0, 802d31c <_vfiprintf_r+0x5c>
 802d2fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802d300:	07dc      	lsls	r4, r3, #31
 802d302:	d504      	bpl.n	802d30e <_vfiprintf_r+0x4e>
 802d304:	f04f 30ff 	mov.w	r0, #4294967295
 802d308:	b01d      	add	sp, #116	@ 0x74
 802d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d30e:	89ab      	ldrh	r3, [r5, #12]
 802d310:	0598      	lsls	r0, r3, #22
 802d312:	d4f7      	bmi.n	802d304 <_vfiprintf_r+0x44>
 802d314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802d316:	f7ff fef3 	bl	802d100 <__retarget_lock_release_recursive>
 802d31a:	e7f3      	b.n	802d304 <_vfiprintf_r+0x44>
 802d31c:	2300      	movs	r3, #0
 802d31e:	f8cd 800c 	str.w	r8, [sp, #12]
 802d322:	f04f 0901 	mov.w	r9, #1
 802d326:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802d4dc <_vfiprintf_r+0x21c>
 802d32a:	9309      	str	r3, [sp, #36]	@ 0x24
 802d32c:	2320      	movs	r3, #32
 802d32e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802d332:	2330      	movs	r3, #48	@ 0x30
 802d334:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802d338:	4623      	mov	r3, r4
 802d33a:	469a      	mov	sl, r3
 802d33c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d340:	b10a      	cbz	r2, 802d346 <_vfiprintf_r+0x86>
 802d342:	2a25      	cmp	r2, #37	@ 0x25
 802d344:	d1f9      	bne.n	802d33a <_vfiprintf_r+0x7a>
 802d346:	ebba 0b04 	subs.w	fp, sl, r4
 802d34a:	d00b      	beq.n	802d364 <_vfiprintf_r+0xa4>
 802d34c:	465b      	mov	r3, fp
 802d34e:	4622      	mov	r2, r4
 802d350:	4629      	mov	r1, r5
 802d352:	4630      	mov	r0, r6
 802d354:	f7ff ffa1 	bl	802d29a <__sfputs_r>
 802d358:	3001      	adds	r0, #1
 802d35a:	f000 80a7 	beq.w	802d4ac <_vfiprintf_r+0x1ec>
 802d35e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d360:	445a      	add	r2, fp
 802d362:	9209      	str	r2, [sp, #36]	@ 0x24
 802d364:	f89a 3000 	ldrb.w	r3, [sl]
 802d368:	2b00      	cmp	r3, #0
 802d36a:	f000 809f 	beq.w	802d4ac <_vfiprintf_r+0x1ec>
 802d36e:	2300      	movs	r3, #0
 802d370:	f04f 32ff 	mov.w	r2, #4294967295
 802d374:	f10a 0a01 	add.w	sl, sl, #1
 802d378:	9304      	str	r3, [sp, #16]
 802d37a:	9307      	str	r3, [sp, #28]
 802d37c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802d380:	931a      	str	r3, [sp, #104]	@ 0x68
 802d382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d386:	4654      	mov	r4, sl
 802d388:	2205      	movs	r2, #5
 802d38a:	4854      	ldr	r0, [pc, #336]	@ (802d4dc <_vfiprintf_r+0x21c>)
 802d38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d390:	f000 fb6e 	bl	802da70 <memchr>
 802d394:	9a04      	ldr	r2, [sp, #16]
 802d396:	b9d8      	cbnz	r0, 802d3d0 <_vfiprintf_r+0x110>
 802d398:	06d1      	lsls	r1, r2, #27
 802d39a:	bf44      	itt	mi
 802d39c:	2320      	movmi	r3, #32
 802d39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802d3a2:	0713      	lsls	r3, r2, #28
 802d3a4:	bf44      	itt	mi
 802d3a6:	232b      	movmi	r3, #43	@ 0x2b
 802d3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802d3ac:	f89a 3000 	ldrb.w	r3, [sl]
 802d3b0:	2b2a      	cmp	r3, #42	@ 0x2a
 802d3b2:	d015      	beq.n	802d3e0 <_vfiprintf_r+0x120>
 802d3b4:	9a07      	ldr	r2, [sp, #28]
 802d3b6:	4654      	mov	r4, sl
 802d3b8:	2000      	movs	r0, #0
 802d3ba:	f04f 0c0a 	mov.w	ip, #10
 802d3be:	4621      	mov	r1, r4
 802d3c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d3c4:	3b30      	subs	r3, #48	@ 0x30
 802d3c6:	2b09      	cmp	r3, #9
 802d3c8:	d94b      	bls.n	802d462 <_vfiprintf_r+0x1a2>
 802d3ca:	b1b0      	cbz	r0, 802d3fa <_vfiprintf_r+0x13a>
 802d3cc:	9207      	str	r2, [sp, #28]
 802d3ce:	e014      	b.n	802d3fa <_vfiprintf_r+0x13a>
 802d3d0:	eba0 0308 	sub.w	r3, r0, r8
 802d3d4:	46a2      	mov	sl, r4
 802d3d6:	fa09 f303 	lsl.w	r3, r9, r3
 802d3da:	4313      	orrs	r3, r2
 802d3dc:	9304      	str	r3, [sp, #16]
 802d3de:	e7d2      	b.n	802d386 <_vfiprintf_r+0xc6>
 802d3e0:	9b03      	ldr	r3, [sp, #12]
 802d3e2:	1d19      	adds	r1, r3, #4
 802d3e4:	681b      	ldr	r3, [r3, #0]
 802d3e6:	2b00      	cmp	r3, #0
 802d3e8:	9103      	str	r1, [sp, #12]
 802d3ea:	bfbb      	ittet	lt
 802d3ec:	425b      	neglt	r3, r3
 802d3ee:	f042 0202 	orrlt.w	r2, r2, #2
 802d3f2:	9307      	strge	r3, [sp, #28]
 802d3f4:	9307      	strlt	r3, [sp, #28]
 802d3f6:	bfb8      	it	lt
 802d3f8:	9204      	strlt	r2, [sp, #16]
 802d3fa:	7823      	ldrb	r3, [r4, #0]
 802d3fc:	2b2e      	cmp	r3, #46	@ 0x2e
 802d3fe:	d10a      	bne.n	802d416 <_vfiprintf_r+0x156>
 802d400:	7863      	ldrb	r3, [r4, #1]
 802d402:	2b2a      	cmp	r3, #42	@ 0x2a
 802d404:	d132      	bne.n	802d46c <_vfiprintf_r+0x1ac>
 802d406:	9b03      	ldr	r3, [sp, #12]
 802d408:	3402      	adds	r4, #2
 802d40a:	1d1a      	adds	r2, r3, #4
 802d40c:	681b      	ldr	r3, [r3, #0]
 802d40e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802d412:	9203      	str	r2, [sp, #12]
 802d414:	9305      	str	r3, [sp, #20]
 802d416:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802d4ec <_vfiprintf_r+0x22c>
 802d41a:	2203      	movs	r2, #3
 802d41c:	7821      	ldrb	r1, [r4, #0]
 802d41e:	4650      	mov	r0, sl
 802d420:	f000 fb26 	bl	802da70 <memchr>
 802d424:	b138      	cbz	r0, 802d436 <_vfiprintf_r+0x176>
 802d426:	eba0 000a 	sub.w	r0, r0, sl
 802d42a:	2240      	movs	r2, #64	@ 0x40
 802d42c:	9b04      	ldr	r3, [sp, #16]
 802d42e:	3401      	adds	r4, #1
 802d430:	4082      	lsls	r2, r0
 802d432:	4313      	orrs	r3, r2
 802d434:	9304      	str	r3, [sp, #16]
 802d436:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d43a:	2206      	movs	r2, #6
 802d43c:	4828      	ldr	r0, [pc, #160]	@ (802d4e0 <_vfiprintf_r+0x220>)
 802d43e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802d442:	f000 fb15 	bl	802da70 <memchr>
 802d446:	2800      	cmp	r0, #0
 802d448:	d03f      	beq.n	802d4ca <_vfiprintf_r+0x20a>
 802d44a:	4b26      	ldr	r3, [pc, #152]	@ (802d4e4 <_vfiprintf_r+0x224>)
 802d44c:	bb1b      	cbnz	r3, 802d496 <_vfiprintf_r+0x1d6>
 802d44e:	9b03      	ldr	r3, [sp, #12]
 802d450:	3307      	adds	r3, #7
 802d452:	f023 0307 	bic.w	r3, r3, #7
 802d456:	3308      	adds	r3, #8
 802d458:	9303      	str	r3, [sp, #12]
 802d45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d45c:	443b      	add	r3, r7
 802d45e:	9309      	str	r3, [sp, #36]	@ 0x24
 802d460:	e76a      	b.n	802d338 <_vfiprintf_r+0x78>
 802d462:	fb0c 3202 	mla	r2, ip, r2, r3
 802d466:	460c      	mov	r4, r1
 802d468:	2001      	movs	r0, #1
 802d46a:	e7a8      	b.n	802d3be <_vfiprintf_r+0xfe>
 802d46c:	2300      	movs	r3, #0
 802d46e:	3401      	adds	r4, #1
 802d470:	f04f 0c0a 	mov.w	ip, #10
 802d474:	4619      	mov	r1, r3
 802d476:	9305      	str	r3, [sp, #20]
 802d478:	4620      	mov	r0, r4
 802d47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d47e:	3a30      	subs	r2, #48	@ 0x30
 802d480:	2a09      	cmp	r2, #9
 802d482:	d903      	bls.n	802d48c <_vfiprintf_r+0x1cc>
 802d484:	2b00      	cmp	r3, #0
 802d486:	d0c6      	beq.n	802d416 <_vfiprintf_r+0x156>
 802d488:	9105      	str	r1, [sp, #20]
 802d48a:	e7c4      	b.n	802d416 <_vfiprintf_r+0x156>
 802d48c:	fb0c 2101 	mla	r1, ip, r1, r2
 802d490:	4604      	mov	r4, r0
 802d492:	2301      	movs	r3, #1
 802d494:	e7f0      	b.n	802d478 <_vfiprintf_r+0x1b8>
 802d496:	ab03      	add	r3, sp, #12
 802d498:	462a      	mov	r2, r5
 802d49a:	a904      	add	r1, sp, #16
 802d49c:	4630      	mov	r0, r6
 802d49e:	9300      	str	r3, [sp, #0]
 802d4a0:	4b11      	ldr	r3, [pc, #68]	@ (802d4e8 <_vfiprintf_r+0x228>)
 802d4a2:	f3af 8000 	nop.w
 802d4a6:	4607      	mov	r7, r0
 802d4a8:	1c78      	adds	r0, r7, #1
 802d4aa:	d1d6      	bne.n	802d45a <_vfiprintf_r+0x19a>
 802d4ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802d4ae:	07d9      	lsls	r1, r3, #31
 802d4b0:	d405      	bmi.n	802d4be <_vfiprintf_r+0x1fe>
 802d4b2:	89ab      	ldrh	r3, [r5, #12]
 802d4b4:	059a      	lsls	r2, r3, #22
 802d4b6:	d402      	bmi.n	802d4be <_vfiprintf_r+0x1fe>
 802d4b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802d4ba:	f7ff fe21 	bl	802d100 <__retarget_lock_release_recursive>
 802d4be:	89ab      	ldrh	r3, [r5, #12]
 802d4c0:	065b      	lsls	r3, r3, #25
 802d4c2:	f53f af1f 	bmi.w	802d304 <_vfiprintf_r+0x44>
 802d4c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802d4c8:	e71e      	b.n	802d308 <_vfiprintf_r+0x48>
 802d4ca:	ab03      	add	r3, sp, #12
 802d4cc:	462a      	mov	r2, r5
 802d4ce:	a904      	add	r1, sp, #16
 802d4d0:	4630      	mov	r0, r6
 802d4d2:	9300      	str	r3, [sp, #0]
 802d4d4:	4b04      	ldr	r3, [pc, #16]	@ (802d4e8 <_vfiprintf_r+0x228>)
 802d4d6:	f000 f87d 	bl	802d5d4 <_printf_i>
 802d4da:	e7e4      	b.n	802d4a6 <_vfiprintf_r+0x1e6>
 802d4dc:	08030158 	.word	0x08030158
 802d4e0:	08030162 	.word	0x08030162
 802d4e4:	00000000 	.word	0x00000000
 802d4e8:	0802d29b 	.word	0x0802d29b
 802d4ec:	0803015e 	.word	0x0803015e

0802d4f0 <_printf_common>:
 802d4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d4f4:	4616      	mov	r6, r2
 802d4f6:	4698      	mov	r8, r3
 802d4f8:	688a      	ldr	r2, [r1, #8]
 802d4fa:	4607      	mov	r7, r0
 802d4fc:	690b      	ldr	r3, [r1, #16]
 802d4fe:	460c      	mov	r4, r1
 802d500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802d504:	4293      	cmp	r3, r2
 802d506:	bfb8      	it	lt
 802d508:	4613      	movlt	r3, r2
 802d50a:	6033      	str	r3, [r6, #0]
 802d50c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802d510:	b10a      	cbz	r2, 802d516 <_printf_common+0x26>
 802d512:	3301      	adds	r3, #1
 802d514:	6033      	str	r3, [r6, #0]
 802d516:	6823      	ldr	r3, [r4, #0]
 802d518:	0699      	lsls	r1, r3, #26
 802d51a:	bf42      	ittt	mi
 802d51c:	6833      	ldrmi	r3, [r6, #0]
 802d51e:	3302      	addmi	r3, #2
 802d520:	6033      	strmi	r3, [r6, #0]
 802d522:	6825      	ldr	r5, [r4, #0]
 802d524:	f015 0506 	ands.w	r5, r5, #6
 802d528:	d106      	bne.n	802d538 <_printf_common+0x48>
 802d52a:	f104 0a19 	add.w	sl, r4, #25
 802d52e:	68e3      	ldr	r3, [r4, #12]
 802d530:	6832      	ldr	r2, [r6, #0]
 802d532:	1a9b      	subs	r3, r3, r2
 802d534:	42ab      	cmp	r3, r5
 802d536:	dc2b      	bgt.n	802d590 <_printf_common+0xa0>
 802d538:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802d53c:	6822      	ldr	r2, [r4, #0]
 802d53e:	3b00      	subs	r3, #0
 802d540:	bf18      	it	ne
 802d542:	2301      	movne	r3, #1
 802d544:	0692      	lsls	r2, r2, #26
 802d546:	d430      	bmi.n	802d5aa <_printf_common+0xba>
 802d548:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802d54c:	4641      	mov	r1, r8
 802d54e:	4638      	mov	r0, r7
 802d550:	47c8      	blx	r9
 802d552:	3001      	adds	r0, #1
 802d554:	d023      	beq.n	802d59e <_printf_common+0xae>
 802d556:	6823      	ldr	r3, [r4, #0]
 802d558:	341a      	adds	r4, #26
 802d55a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802d55e:	f003 0306 	and.w	r3, r3, #6
 802d562:	2b04      	cmp	r3, #4
 802d564:	bf0a      	itet	eq
 802d566:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802d56a:	2500      	movne	r5, #0
 802d56c:	6833      	ldreq	r3, [r6, #0]
 802d56e:	f04f 0600 	mov.w	r6, #0
 802d572:	bf08      	it	eq
 802d574:	1aed      	subeq	r5, r5, r3
 802d576:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802d57a:	bf08      	it	eq
 802d57c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802d580:	4293      	cmp	r3, r2
 802d582:	bfc4      	itt	gt
 802d584:	1a9b      	subgt	r3, r3, r2
 802d586:	18ed      	addgt	r5, r5, r3
 802d588:	42b5      	cmp	r5, r6
 802d58a:	d11a      	bne.n	802d5c2 <_printf_common+0xd2>
 802d58c:	2000      	movs	r0, #0
 802d58e:	e008      	b.n	802d5a2 <_printf_common+0xb2>
 802d590:	2301      	movs	r3, #1
 802d592:	4652      	mov	r2, sl
 802d594:	4641      	mov	r1, r8
 802d596:	4638      	mov	r0, r7
 802d598:	47c8      	blx	r9
 802d59a:	3001      	adds	r0, #1
 802d59c:	d103      	bne.n	802d5a6 <_printf_common+0xb6>
 802d59e:	f04f 30ff 	mov.w	r0, #4294967295
 802d5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d5a6:	3501      	adds	r5, #1
 802d5a8:	e7c1      	b.n	802d52e <_printf_common+0x3e>
 802d5aa:	18e1      	adds	r1, r4, r3
 802d5ac:	1c5a      	adds	r2, r3, #1
 802d5ae:	2030      	movs	r0, #48	@ 0x30
 802d5b0:	3302      	adds	r3, #2
 802d5b2:	4422      	add	r2, r4
 802d5b4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802d5b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802d5bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802d5c0:	e7c2      	b.n	802d548 <_printf_common+0x58>
 802d5c2:	2301      	movs	r3, #1
 802d5c4:	4622      	mov	r2, r4
 802d5c6:	4641      	mov	r1, r8
 802d5c8:	4638      	mov	r0, r7
 802d5ca:	47c8      	blx	r9
 802d5cc:	3001      	adds	r0, #1
 802d5ce:	d0e6      	beq.n	802d59e <_printf_common+0xae>
 802d5d0:	3601      	adds	r6, #1
 802d5d2:	e7d9      	b.n	802d588 <_printf_common+0x98>

0802d5d4 <_printf_i>:
 802d5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802d5d8:	7e0f      	ldrb	r7, [r1, #24]
 802d5da:	4691      	mov	r9, r2
 802d5dc:	4680      	mov	r8, r0
 802d5de:	460c      	mov	r4, r1
 802d5e0:	2f78      	cmp	r7, #120	@ 0x78
 802d5e2:	469a      	mov	sl, r3
 802d5e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802d5e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802d5ea:	d807      	bhi.n	802d5fc <_printf_i+0x28>
 802d5ec:	2f62      	cmp	r7, #98	@ 0x62
 802d5ee:	d80a      	bhi.n	802d606 <_printf_i+0x32>
 802d5f0:	2f00      	cmp	r7, #0
 802d5f2:	f000 80d1 	beq.w	802d798 <_printf_i+0x1c4>
 802d5f6:	2f58      	cmp	r7, #88	@ 0x58
 802d5f8:	f000 80b8 	beq.w	802d76c <_printf_i+0x198>
 802d5fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802d600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802d604:	e03a      	b.n	802d67c <_printf_i+0xa8>
 802d606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802d60a:	2b15      	cmp	r3, #21
 802d60c:	d8f6      	bhi.n	802d5fc <_printf_i+0x28>
 802d60e:	a101      	add	r1, pc, #4	@ (adr r1, 802d614 <_printf_i+0x40>)
 802d610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802d614:	0802d66d 	.word	0x0802d66d
 802d618:	0802d681 	.word	0x0802d681
 802d61c:	0802d5fd 	.word	0x0802d5fd
 802d620:	0802d5fd 	.word	0x0802d5fd
 802d624:	0802d5fd 	.word	0x0802d5fd
 802d628:	0802d5fd 	.word	0x0802d5fd
 802d62c:	0802d681 	.word	0x0802d681
 802d630:	0802d5fd 	.word	0x0802d5fd
 802d634:	0802d5fd 	.word	0x0802d5fd
 802d638:	0802d5fd 	.word	0x0802d5fd
 802d63c:	0802d5fd 	.word	0x0802d5fd
 802d640:	0802d77f 	.word	0x0802d77f
 802d644:	0802d6ab 	.word	0x0802d6ab
 802d648:	0802d739 	.word	0x0802d739
 802d64c:	0802d5fd 	.word	0x0802d5fd
 802d650:	0802d5fd 	.word	0x0802d5fd
 802d654:	0802d7a1 	.word	0x0802d7a1
 802d658:	0802d5fd 	.word	0x0802d5fd
 802d65c:	0802d6ab 	.word	0x0802d6ab
 802d660:	0802d5fd 	.word	0x0802d5fd
 802d664:	0802d5fd 	.word	0x0802d5fd
 802d668:	0802d741 	.word	0x0802d741
 802d66c:	6833      	ldr	r3, [r6, #0]
 802d66e:	1d1a      	adds	r2, r3, #4
 802d670:	681b      	ldr	r3, [r3, #0]
 802d672:	6032      	str	r2, [r6, #0]
 802d674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802d678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802d67c:	2301      	movs	r3, #1
 802d67e:	e09c      	b.n	802d7ba <_printf_i+0x1e6>
 802d680:	6833      	ldr	r3, [r6, #0]
 802d682:	6820      	ldr	r0, [r4, #0]
 802d684:	1d19      	adds	r1, r3, #4
 802d686:	6031      	str	r1, [r6, #0]
 802d688:	0606      	lsls	r6, r0, #24
 802d68a:	d501      	bpl.n	802d690 <_printf_i+0xbc>
 802d68c:	681d      	ldr	r5, [r3, #0]
 802d68e:	e003      	b.n	802d698 <_printf_i+0xc4>
 802d690:	0645      	lsls	r5, r0, #25
 802d692:	d5fb      	bpl.n	802d68c <_printf_i+0xb8>
 802d694:	f9b3 5000 	ldrsh.w	r5, [r3]
 802d698:	2d00      	cmp	r5, #0
 802d69a:	da03      	bge.n	802d6a4 <_printf_i+0xd0>
 802d69c:	232d      	movs	r3, #45	@ 0x2d
 802d69e:	426d      	negs	r5, r5
 802d6a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802d6a4:	4858      	ldr	r0, [pc, #352]	@ (802d808 <_printf_i+0x234>)
 802d6a6:	230a      	movs	r3, #10
 802d6a8:	e011      	b.n	802d6ce <_printf_i+0xfa>
 802d6aa:	6821      	ldr	r1, [r4, #0]
 802d6ac:	6833      	ldr	r3, [r6, #0]
 802d6ae:	0608      	lsls	r0, r1, #24
 802d6b0:	f853 5b04 	ldr.w	r5, [r3], #4
 802d6b4:	d402      	bmi.n	802d6bc <_printf_i+0xe8>
 802d6b6:	0649      	lsls	r1, r1, #25
 802d6b8:	bf48      	it	mi
 802d6ba:	b2ad      	uxthmi	r5, r5
 802d6bc:	2f6f      	cmp	r7, #111	@ 0x6f
 802d6be:	6033      	str	r3, [r6, #0]
 802d6c0:	4851      	ldr	r0, [pc, #324]	@ (802d808 <_printf_i+0x234>)
 802d6c2:	bf14      	ite	ne
 802d6c4:	230a      	movne	r3, #10
 802d6c6:	2308      	moveq	r3, #8
 802d6c8:	2100      	movs	r1, #0
 802d6ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802d6ce:	6866      	ldr	r6, [r4, #4]
 802d6d0:	2e00      	cmp	r6, #0
 802d6d2:	60a6      	str	r6, [r4, #8]
 802d6d4:	db05      	blt.n	802d6e2 <_printf_i+0x10e>
 802d6d6:	6821      	ldr	r1, [r4, #0]
 802d6d8:	432e      	orrs	r6, r5
 802d6da:	f021 0104 	bic.w	r1, r1, #4
 802d6de:	6021      	str	r1, [r4, #0]
 802d6e0:	d04b      	beq.n	802d77a <_printf_i+0x1a6>
 802d6e2:	4616      	mov	r6, r2
 802d6e4:	fbb5 f1f3 	udiv	r1, r5, r3
 802d6e8:	fb03 5711 	mls	r7, r3, r1, r5
 802d6ec:	5dc7      	ldrb	r7, [r0, r7]
 802d6ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802d6f2:	462f      	mov	r7, r5
 802d6f4:	460d      	mov	r5, r1
 802d6f6:	42bb      	cmp	r3, r7
 802d6f8:	d9f4      	bls.n	802d6e4 <_printf_i+0x110>
 802d6fa:	2b08      	cmp	r3, #8
 802d6fc:	d10b      	bne.n	802d716 <_printf_i+0x142>
 802d6fe:	6823      	ldr	r3, [r4, #0]
 802d700:	07df      	lsls	r7, r3, #31
 802d702:	d508      	bpl.n	802d716 <_printf_i+0x142>
 802d704:	6923      	ldr	r3, [r4, #16]
 802d706:	6861      	ldr	r1, [r4, #4]
 802d708:	4299      	cmp	r1, r3
 802d70a:	bfde      	ittt	le
 802d70c:	2330      	movle	r3, #48	@ 0x30
 802d70e:	f806 3c01 	strble.w	r3, [r6, #-1]
 802d712:	f106 36ff 	addle.w	r6, r6, #4294967295
 802d716:	1b92      	subs	r2, r2, r6
 802d718:	6122      	str	r2, [r4, #16]
 802d71a:	464b      	mov	r3, r9
 802d71c:	aa03      	add	r2, sp, #12
 802d71e:	4621      	mov	r1, r4
 802d720:	4640      	mov	r0, r8
 802d722:	f8cd a000 	str.w	sl, [sp]
 802d726:	f7ff fee3 	bl	802d4f0 <_printf_common>
 802d72a:	3001      	adds	r0, #1
 802d72c:	d14a      	bne.n	802d7c4 <_printf_i+0x1f0>
 802d72e:	f04f 30ff 	mov.w	r0, #4294967295
 802d732:	b004      	add	sp, #16
 802d734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d738:	6823      	ldr	r3, [r4, #0]
 802d73a:	f043 0320 	orr.w	r3, r3, #32
 802d73e:	6023      	str	r3, [r4, #0]
 802d740:	2778      	movs	r7, #120	@ 0x78
 802d742:	4832      	ldr	r0, [pc, #200]	@ (802d80c <_printf_i+0x238>)
 802d744:	6823      	ldr	r3, [r4, #0]
 802d746:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802d74a:	061f      	lsls	r7, r3, #24
 802d74c:	6831      	ldr	r1, [r6, #0]
 802d74e:	f851 5b04 	ldr.w	r5, [r1], #4
 802d752:	d402      	bmi.n	802d75a <_printf_i+0x186>
 802d754:	065f      	lsls	r7, r3, #25
 802d756:	bf48      	it	mi
 802d758:	b2ad      	uxthmi	r5, r5
 802d75a:	6031      	str	r1, [r6, #0]
 802d75c:	07d9      	lsls	r1, r3, #31
 802d75e:	bf44      	itt	mi
 802d760:	f043 0320 	orrmi.w	r3, r3, #32
 802d764:	6023      	strmi	r3, [r4, #0]
 802d766:	b11d      	cbz	r5, 802d770 <_printf_i+0x19c>
 802d768:	2310      	movs	r3, #16
 802d76a:	e7ad      	b.n	802d6c8 <_printf_i+0xf4>
 802d76c:	4826      	ldr	r0, [pc, #152]	@ (802d808 <_printf_i+0x234>)
 802d76e:	e7e9      	b.n	802d744 <_printf_i+0x170>
 802d770:	6823      	ldr	r3, [r4, #0]
 802d772:	f023 0320 	bic.w	r3, r3, #32
 802d776:	6023      	str	r3, [r4, #0]
 802d778:	e7f6      	b.n	802d768 <_printf_i+0x194>
 802d77a:	4616      	mov	r6, r2
 802d77c:	e7bd      	b.n	802d6fa <_printf_i+0x126>
 802d77e:	6833      	ldr	r3, [r6, #0]
 802d780:	6825      	ldr	r5, [r4, #0]
 802d782:	1d18      	adds	r0, r3, #4
 802d784:	6961      	ldr	r1, [r4, #20]
 802d786:	6030      	str	r0, [r6, #0]
 802d788:	062e      	lsls	r6, r5, #24
 802d78a:	681b      	ldr	r3, [r3, #0]
 802d78c:	d501      	bpl.n	802d792 <_printf_i+0x1be>
 802d78e:	6019      	str	r1, [r3, #0]
 802d790:	e002      	b.n	802d798 <_printf_i+0x1c4>
 802d792:	0668      	lsls	r0, r5, #25
 802d794:	d5fb      	bpl.n	802d78e <_printf_i+0x1ba>
 802d796:	8019      	strh	r1, [r3, #0]
 802d798:	2300      	movs	r3, #0
 802d79a:	4616      	mov	r6, r2
 802d79c:	6123      	str	r3, [r4, #16]
 802d79e:	e7bc      	b.n	802d71a <_printf_i+0x146>
 802d7a0:	6833      	ldr	r3, [r6, #0]
 802d7a2:	2100      	movs	r1, #0
 802d7a4:	1d1a      	adds	r2, r3, #4
 802d7a6:	6032      	str	r2, [r6, #0]
 802d7a8:	681e      	ldr	r6, [r3, #0]
 802d7aa:	6862      	ldr	r2, [r4, #4]
 802d7ac:	4630      	mov	r0, r6
 802d7ae:	f000 f95f 	bl	802da70 <memchr>
 802d7b2:	b108      	cbz	r0, 802d7b8 <_printf_i+0x1e4>
 802d7b4:	1b80      	subs	r0, r0, r6
 802d7b6:	6060      	str	r0, [r4, #4]
 802d7b8:	6863      	ldr	r3, [r4, #4]
 802d7ba:	6123      	str	r3, [r4, #16]
 802d7bc:	2300      	movs	r3, #0
 802d7be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802d7c2:	e7aa      	b.n	802d71a <_printf_i+0x146>
 802d7c4:	6923      	ldr	r3, [r4, #16]
 802d7c6:	4632      	mov	r2, r6
 802d7c8:	4649      	mov	r1, r9
 802d7ca:	4640      	mov	r0, r8
 802d7cc:	47d0      	blx	sl
 802d7ce:	3001      	adds	r0, #1
 802d7d0:	d0ad      	beq.n	802d72e <_printf_i+0x15a>
 802d7d2:	6823      	ldr	r3, [r4, #0]
 802d7d4:	079b      	lsls	r3, r3, #30
 802d7d6:	d413      	bmi.n	802d800 <_printf_i+0x22c>
 802d7d8:	68e0      	ldr	r0, [r4, #12]
 802d7da:	9b03      	ldr	r3, [sp, #12]
 802d7dc:	4298      	cmp	r0, r3
 802d7de:	bfb8      	it	lt
 802d7e0:	4618      	movlt	r0, r3
 802d7e2:	e7a6      	b.n	802d732 <_printf_i+0x15e>
 802d7e4:	2301      	movs	r3, #1
 802d7e6:	4632      	mov	r2, r6
 802d7e8:	4649      	mov	r1, r9
 802d7ea:	4640      	mov	r0, r8
 802d7ec:	47d0      	blx	sl
 802d7ee:	3001      	adds	r0, #1
 802d7f0:	d09d      	beq.n	802d72e <_printf_i+0x15a>
 802d7f2:	3501      	adds	r5, #1
 802d7f4:	68e3      	ldr	r3, [r4, #12]
 802d7f6:	9903      	ldr	r1, [sp, #12]
 802d7f8:	1a5b      	subs	r3, r3, r1
 802d7fa:	42ab      	cmp	r3, r5
 802d7fc:	dcf2      	bgt.n	802d7e4 <_printf_i+0x210>
 802d7fe:	e7eb      	b.n	802d7d8 <_printf_i+0x204>
 802d800:	2500      	movs	r5, #0
 802d802:	f104 0619 	add.w	r6, r4, #25
 802d806:	e7f5      	b.n	802d7f4 <_printf_i+0x220>
 802d808:	08030169 	.word	0x08030169
 802d80c:	0803017a 	.word	0x0803017a

0802d810 <__sflush_r>:
 802d810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802d814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d818:	0716      	lsls	r6, r2, #28
 802d81a:	4605      	mov	r5, r0
 802d81c:	460c      	mov	r4, r1
 802d81e:	d454      	bmi.n	802d8ca <__sflush_r+0xba>
 802d820:	684b      	ldr	r3, [r1, #4]
 802d822:	2b00      	cmp	r3, #0
 802d824:	dc02      	bgt.n	802d82c <__sflush_r+0x1c>
 802d826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802d828:	2b00      	cmp	r3, #0
 802d82a:	dd48      	ble.n	802d8be <__sflush_r+0xae>
 802d82c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802d82e:	2e00      	cmp	r6, #0
 802d830:	d045      	beq.n	802d8be <__sflush_r+0xae>
 802d832:	2300      	movs	r3, #0
 802d834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802d838:	682f      	ldr	r7, [r5, #0]
 802d83a:	6a21      	ldr	r1, [r4, #32]
 802d83c:	602b      	str	r3, [r5, #0]
 802d83e:	d030      	beq.n	802d8a2 <__sflush_r+0x92>
 802d840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802d842:	89a3      	ldrh	r3, [r4, #12]
 802d844:	0759      	lsls	r1, r3, #29
 802d846:	d505      	bpl.n	802d854 <__sflush_r+0x44>
 802d848:	6863      	ldr	r3, [r4, #4]
 802d84a:	1ad2      	subs	r2, r2, r3
 802d84c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802d84e:	b10b      	cbz	r3, 802d854 <__sflush_r+0x44>
 802d850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802d852:	1ad2      	subs	r2, r2, r3
 802d854:	2300      	movs	r3, #0
 802d856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802d858:	6a21      	ldr	r1, [r4, #32]
 802d85a:	4628      	mov	r0, r5
 802d85c:	47b0      	blx	r6
 802d85e:	1c43      	adds	r3, r0, #1
 802d860:	89a3      	ldrh	r3, [r4, #12]
 802d862:	d106      	bne.n	802d872 <__sflush_r+0x62>
 802d864:	6829      	ldr	r1, [r5, #0]
 802d866:	291d      	cmp	r1, #29
 802d868:	d82b      	bhi.n	802d8c2 <__sflush_r+0xb2>
 802d86a:	4a2a      	ldr	r2, [pc, #168]	@ (802d914 <__sflush_r+0x104>)
 802d86c:	40ca      	lsrs	r2, r1
 802d86e:	07d6      	lsls	r6, r2, #31
 802d870:	d527      	bpl.n	802d8c2 <__sflush_r+0xb2>
 802d872:	2200      	movs	r2, #0
 802d874:	04d9      	lsls	r1, r3, #19
 802d876:	6062      	str	r2, [r4, #4]
 802d878:	6922      	ldr	r2, [r4, #16]
 802d87a:	6022      	str	r2, [r4, #0]
 802d87c:	d504      	bpl.n	802d888 <__sflush_r+0x78>
 802d87e:	1c42      	adds	r2, r0, #1
 802d880:	d101      	bne.n	802d886 <__sflush_r+0x76>
 802d882:	682b      	ldr	r3, [r5, #0]
 802d884:	b903      	cbnz	r3, 802d888 <__sflush_r+0x78>
 802d886:	6560      	str	r0, [r4, #84]	@ 0x54
 802d888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802d88a:	602f      	str	r7, [r5, #0]
 802d88c:	b1b9      	cbz	r1, 802d8be <__sflush_r+0xae>
 802d88e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802d892:	4299      	cmp	r1, r3
 802d894:	d002      	beq.n	802d89c <__sflush_r+0x8c>
 802d896:	4628      	mov	r0, r5
 802d898:	f7ff fc9e 	bl	802d1d8 <_free_r>
 802d89c:	2300      	movs	r3, #0
 802d89e:	6363      	str	r3, [r4, #52]	@ 0x34
 802d8a0:	e00d      	b.n	802d8be <__sflush_r+0xae>
 802d8a2:	2301      	movs	r3, #1
 802d8a4:	4628      	mov	r0, r5
 802d8a6:	47b0      	blx	r6
 802d8a8:	4602      	mov	r2, r0
 802d8aa:	1c50      	adds	r0, r2, #1
 802d8ac:	d1c9      	bne.n	802d842 <__sflush_r+0x32>
 802d8ae:	682b      	ldr	r3, [r5, #0]
 802d8b0:	2b00      	cmp	r3, #0
 802d8b2:	d0c6      	beq.n	802d842 <__sflush_r+0x32>
 802d8b4:	2b1d      	cmp	r3, #29
 802d8b6:	d001      	beq.n	802d8bc <__sflush_r+0xac>
 802d8b8:	2b16      	cmp	r3, #22
 802d8ba:	d11d      	bne.n	802d8f8 <__sflush_r+0xe8>
 802d8bc:	602f      	str	r7, [r5, #0]
 802d8be:	2000      	movs	r0, #0
 802d8c0:	e021      	b.n	802d906 <__sflush_r+0xf6>
 802d8c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d8c6:	b21b      	sxth	r3, r3
 802d8c8:	e01a      	b.n	802d900 <__sflush_r+0xf0>
 802d8ca:	690f      	ldr	r7, [r1, #16]
 802d8cc:	2f00      	cmp	r7, #0
 802d8ce:	d0f6      	beq.n	802d8be <__sflush_r+0xae>
 802d8d0:	0793      	lsls	r3, r2, #30
 802d8d2:	680e      	ldr	r6, [r1, #0]
 802d8d4:	600f      	str	r7, [r1, #0]
 802d8d6:	bf0c      	ite	eq
 802d8d8:	694b      	ldreq	r3, [r1, #20]
 802d8da:	2300      	movne	r3, #0
 802d8dc:	eba6 0807 	sub.w	r8, r6, r7
 802d8e0:	608b      	str	r3, [r1, #8]
 802d8e2:	f1b8 0f00 	cmp.w	r8, #0
 802d8e6:	ddea      	ble.n	802d8be <__sflush_r+0xae>
 802d8e8:	4643      	mov	r3, r8
 802d8ea:	463a      	mov	r2, r7
 802d8ec:	6a21      	ldr	r1, [r4, #32]
 802d8ee:	4628      	mov	r0, r5
 802d8f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802d8f2:	47b0      	blx	r6
 802d8f4:	2800      	cmp	r0, #0
 802d8f6:	dc08      	bgt.n	802d90a <__sflush_r+0xfa>
 802d8f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d8fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d900:	f04f 30ff 	mov.w	r0, #4294967295
 802d904:	81a3      	strh	r3, [r4, #12]
 802d906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d90a:	4407      	add	r7, r0
 802d90c:	eba8 0800 	sub.w	r8, r8, r0
 802d910:	e7e7      	b.n	802d8e2 <__sflush_r+0xd2>
 802d912:	bf00      	nop
 802d914:	20400001 	.word	0x20400001

0802d918 <_fflush_r>:
 802d918:	b538      	push	{r3, r4, r5, lr}
 802d91a:	690b      	ldr	r3, [r1, #16]
 802d91c:	4605      	mov	r5, r0
 802d91e:	460c      	mov	r4, r1
 802d920:	b913      	cbnz	r3, 802d928 <_fflush_r+0x10>
 802d922:	2500      	movs	r5, #0
 802d924:	4628      	mov	r0, r5
 802d926:	bd38      	pop	{r3, r4, r5, pc}
 802d928:	b118      	cbz	r0, 802d932 <_fflush_r+0x1a>
 802d92a:	6a03      	ldr	r3, [r0, #32]
 802d92c:	b90b      	cbnz	r3, 802d932 <_fflush_r+0x1a>
 802d92e:	f7ff f989 	bl	802cc44 <__sinit>
 802d932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d936:	2b00      	cmp	r3, #0
 802d938:	d0f3      	beq.n	802d922 <_fflush_r+0xa>
 802d93a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802d93c:	07d0      	lsls	r0, r2, #31
 802d93e:	d404      	bmi.n	802d94a <_fflush_r+0x32>
 802d940:	0599      	lsls	r1, r3, #22
 802d942:	d402      	bmi.n	802d94a <_fflush_r+0x32>
 802d944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d946:	f7ff fbda 	bl	802d0fe <__retarget_lock_acquire_recursive>
 802d94a:	4628      	mov	r0, r5
 802d94c:	4621      	mov	r1, r4
 802d94e:	f7ff ff5f 	bl	802d810 <__sflush_r>
 802d952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d954:	4605      	mov	r5, r0
 802d956:	07da      	lsls	r2, r3, #31
 802d958:	d4e4      	bmi.n	802d924 <_fflush_r+0xc>
 802d95a:	89a3      	ldrh	r3, [r4, #12]
 802d95c:	059b      	lsls	r3, r3, #22
 802d95e:	d4e1      	bmi.n	802d924 <_fflush_r+0xc>
 802d960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d962:	f7ff fbcd 	bl	802d100 <__retarget_lock_release_recursive>
 802d966:	e7dd      	b.n	802d924 <_fflush_r+0xc>

0802d968 <__swhatbuf_r>:
 802d968:	b570      	push	{r4, r5, r6, lr}
 802d96a:	460c      	mov	r4, r1
 802d96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d970:	b096      	sub	sp, #88	@ 0x58
 802d972:	4615      	mov	r5, r2
 802d974:	2900      	cmp	r1, #0
 802d976:	461e      	mov	r6, r3
 802d978:	da0c      	bge.n	802d994 <__swhatbuf_r+0x2c>
 802d97a:	89a3      	ldrh	r3, [r4, #12]
 802d97c:	2100      	movs	r1, #0
 802d97e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802d982:	bf14      	ite	ne
 802d984:	2340      	movne	r3, #64	@ 0x40
 802d986:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802d98a:	2000      	movs	r0, #0
 802d98c:	6031      	str	r1, [r6, #0]
 802d98e:	602b      	str	r3, [r5, #0]
 802d990:	b016      	add	sp, #88	@ 0x58
 802d992:	bd70      	pop	{r4, r5, r6, pc}
 802d994:	466a      	mov	r2, sp
 802d996:	f000 f849 	bl	802da2c <_fstat_r>
 802d99a:	2800      	cmp	r0, #0
 802d99c:	dbed      	blt.n	802d97a <__swhatbuf_r+0x12>
 802d99e:	9901      	ldr	r1, [sp, #4]
 802d9a0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802d9a4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802d9a8:	4259      	negs	r1, r3
 802d9aa:	4159      	adcs	r1, r3
 802d9ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802d9b0:	e7eb      	b.n	802d98a <__swhatbuf_r+0x22>

0802d9b2 <__smakebuf_r>:
 802d9b2:	898b      	ldrh	r3, [r1, #12]
 802d9b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802d9b6:	079d      	lsls	r5, r3, #30
 802d9b8:	4606      	mov	r6, r0
 802d9ba:	460c      	mov	r4, r1
 802d9bc:	d507      	bpl.n	802d9ce <__smakebuf_r+0x1c>
 802d9be:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802d9c2:	6023      	str	r3, [r4, #0]
 802d9c4:	6123      	str	r3, [r4, #16]
 802d9c6:	2301      	movs	r3, #1
 802d9c8:	6163      	str	r3, [r4, #20]
 802d9ca:	b003      	add	sp, #12
 802d9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d9ce:	ab01      	add	r3, sp, #4
 802d9d0:	466a      	mov	r2, sp
 802d9d2:	f7ff ffc9 	bl	802d968 <__swhatbuf_r>
 802d9d6:	9f00      	ldr	r7, [sp, #0]
 802d9d8:	4605      	mov	r5, r0
 802d9da:	4630      	mov	r0, r6
 802d9dc:	4639      	mov	r1, r7
 802d9de:	f7ff f80b 	bl	802c9f8 <_malloc_r>
 802d9e2:	b948      	cbnz	r0, 802d9f8 <__smakebuf_r+0x46>
 802d9e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d9e8:	059a      	lsls	r2, r3, #22
 802d9ea:	d4ee      	bmi.n	802d9ca <__smakebuf_r+0x18>
 802d9ec:	f023 0303 	bic.w	r3, r3, #3
 802d9f0:	f043 0302 	orr.w	r3, r3, #2
 802d9f4:	81a3      	strh	r3, [r4, #12]
 802d9f6:	e7e2      	b.n	802d9be <__smakebuf_r+0xc>
 802d9f8:	89a3      	ldrh	r3, [r4, #12]
 802d9fa:	6020      	str	r0, [r4, #0]
 802d9fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802da00:	81a3      	strh	r3, [r4, #12]
 802da02:	9b01      	ldr	r3, [sp, #4]
 802da04:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802da08:	b15b      	cbz	r3, 802da22 <__smakebuf_r+0x70>
 802da0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802da0e:	4630      	mov	r0, r6
 802da10:	f000 f81e 	bl	802da50 <_isatty_r>
 802da14:	b128      	cbz	r0, 802da22 <__smakebuf_r+0x70>
 802da16:	89a3      	ldrh	r3, [r4, #12]
 802da18:	f023 0303 	bic.w	r3, r3, #3
 802da1c:	f043 0301 	orr.w	r3, r3, #1
 802da20:	81a3      	strh	r3, [r4, #12]
 802da22:	89a3      	ldrh	r3, [r4, #12]
 802da24:	431d      	orrs	r5, r3
 802da26:	81a5      	strh	r5, [r4, #12]
 802da28:	e7cf      	b.n	802d9ca <__smakebuf_r+0x18>
	...

0802da2c <_fstat_r>:
 802da2c:	b538      	push	{r3, r4, r5, lr}
 802da2e:	2300      	movs	r3, #0
 802da30:	4d06      	ldr	r5, [pc, #24]	@ (802da4c <_fstat_r+0x20>)
 802da32:	4604      	mov	r4, r0
 802da34:	4608      	mov	r0, r1
 802da36:	4611      	mov	r1, r2
 802da38:	602b      	str	r3, [r5, #0]
 802da3a:	f7d3 ffd7 	bl	80019ec <_fstat>
 802da3e:	1c43      	adds	r3, r0, #1
 802da40:	d102      	bne.n	802da48 <_fstat_r+0x1c>
 802da42:	682b      	ldr	r3, [r5, #0]
 802da44:	b103      	cbz	r3, 802da48 <_fstat_r+0x1c>
 802da46:	6023      	str	r3, [r4, #0]
 802da48:	bd38      	pop	{r3, r4, r5, pc}
 802da4a:	bf00      	nop
 802da4c:	2005c620 	.word	0x2005c620

0802da50 <_isatty_r>:
 802da50:	b538      	push	{r3, r4, r5, lr}
 802da52:	2300      	movs	r3, #0
 802da54:	4d05      	ldr	r5, [pc, #20]	@ (802da6c <_isatty_r+0x1c>)
 802da56:	4604      	mov	r4, r0
 802da58:	4608      	mov	r0, r1
 802da5a:	602b      	str	r3, [r5, #0]
 802da5c:	f7d3 ffd6 	bl	8001a0c <_isatty>
 802da60:	1c43      	adds	r3, r0, #1
 802da62:	d102      	bne.n	802da6a <_isatty_r+0x1a>
 802da64:	682b      	ldr	r3, [r5, #0]
 802da66:	b103      	cbz	r3, 802da6a <_isatty_r+0x1a>
 802da68:	6023      	str	r3, [r4, #0]
 802da6a:	bd38      	pop	{r3, r4, r5, pc}
 802da6c:	2005c620 	.word	0x2005c620

0802da70 <memchr>:
 802da70:	b2c9      	uxtb	r1, r1
 802da72:	4603      	mov	r3, r0
 802da74:	4402      	add	r2, r0
 802da76:	b510      	push	{r4, lr}
 802da78:	4293      	cmp	r3, r2
 802da7a:	4618      	mov	r0, r3
 802da7c:	d101      	bne.n	802da82 <memchr+0x12>
 802da7e:	2000      	movs	r0, #0
 802da80:	e003      	b.n	802da8a <memchr+0x1a>
 802da82:	7804      	ldrb	r4, [r0, #0]
 802da84:	3301      	adds	r3, #1
 802da86:	428c      	cmp	r4, r1
 802da88:	d1f6      	bne.n	802da78 <memchr+0x8>
 802da8a:	bd10      	pop	{r4, pc}

0802da8c <_init>:
 802da8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802da8e:	bf00      	nop
 802da90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802da92:	bc08      	pop	{r3}
 802da94:	469e      	mov	lr, r3
 802da96:	4770      	bx	lr

0802da98 <_fini>:
 802da98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802da9a:	bf00      	nop
 802da9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802da9e:	bc08      	pop	{r3}
 802daa0:	469e      	mov	lr, r3
 802daa2:	4770      	bx	lr
