
watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d8b4  08000240  08000240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002750  0802daf4  0802daf4  0002eaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08030244  08030244  00031244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  080303ec  080303ec  000313ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00000c80  08030404  08030404  00031404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  08031084  08031084  00032084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  08031094  08031094  00032094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  0803109c  0803109c  0003209c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000008  080310b0  080310b0  000320b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         000000fc  20000000  080310b8  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_Framebuffer 00045600  200000fc  080311b4  000330fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferA 00000100  20045700  080767b4  00078700  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferB 00000100  20045800  080768b4  00078800  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00016ee4  20045900  080769b4  00078900  2**2
                  ALLOC
 15 ._user_heap_stack 00000a04  2005c7e4  080769b4  000797e4  2**0
                  ALLOC
 16 .ARM.attributes 00000036  00000000  00000000  00078900  2**0
                  CONTENTS, READONLY
 17 .debug_info   0009a2de  00000000  00000000  00078936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00011aec  00000000  00000000  00112c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003cf0  00000000  00000000  00124700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002dc0  00000000  00000000  001283f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00042e3b  00000000  00000000  0012b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004dbb3  00000000  00000000  0016dfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0017a879  00000000  00000000  001bbb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  00336417  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00010b74  00000000  00000000  003364dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000047  00000000  00000000  00347050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	@ (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20045900 	.word	0x20045900
 800025c:	00000000 	.word	0x00000000
 8000260:	0802dadc 	.word	0x0802dadc

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	@ (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20045904 	.word	0x20045904
 800027c:	0802dadc 	.word	0x0802dadc

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9fb 	b.w	8000698 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b9b0 	b.w	8000698 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000354:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000356:	4688      	mov	r8, r1
 8000358:	4604      	mov	r4, r0
 800035a:	468e      	mov	lr, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d95f      	bls.n	8000426 <__udivmoddi4+0xd6>
 8000366:	fab2 f682 	clz	r6, r2
 800036a:	b14e      	cbz	r6, 8000380 <__udivmoddi4+0x30>
 800036c:	f1c6 0320 	rsb	r3, r6, #32
 8000370:	fa01 fe06 	lsl.w	lr, r1, r6
 8000374:	40b7      	lsls	r7, r6
 8000376:	40b4      	lsls	r4, r6
 8000378:	fa20 f303 	lsr.w	r3, r0, r3
 800037c:	ea43 0e0e 	orr.w	lr, r3, lr
 8000380:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	0c23      	lsrs	r3, r4, #16
 800038a:	fbbe f1f8 	udiv	r1, lr, r8
 800038e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000392:	fb01 f20c 	mul.w	r2, r1, ip
 8000396:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800039a:	429a      	cmp	r2, r3
 800039c:	d907      	bls.n	80003ae <__udivmoddi4+0x5e>
 800039e:	18fb      	adds	r3, r7, r3
 80003a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x5c>
 80003a6:	429a      	cmp	r2, r3
 80003a8:	f200 8154 	bhi.w	8000654 <__udivmoddi4+0x304>
 80003ac:	4601      	mov	r1, r0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	b2a2      	uxth	r2, r4
 80003b2:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b6:	fb08 3310 	mls	r3, r8, r0, r3
 80003ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80003be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80003c2:	4594      	cmp	ip, r2
 80003c4:	d90b      	bls.n	80003de <__udivmoddi4+0x8e>
 80003c6:	18ba      	adds	r2, r7, r2
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	bf2c      	ite	cs
 80003ce:	2401      	movcs	r4, #1
 80003d0:	2400      	movcc	r4, #0
 80003d2:	4594      	cmp	ip, r2
 80003d4:	d902      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003d6:	2c00      	cmp	r4, #0
 80003d8:	f000 813f 	beq.w	800065a <__udivmoddi4+0x30a>
 80003dc:	4618      	mov	r0, r3
 80003de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e2:	eba2 020c 	sub.w	r2, r2, ip
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11d      	cbz	r5, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40f2      	lsrs	r2, r6
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c5 2300 	strd	r2, r3, [r5]
 80003f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d905      	bls.n	8000406 <__udivmoddi4+0xb6>
 80003fa:	b10d      	cbz	r5, 8000400 <__udivmoddi4+0xb0>
 80003fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	4608      	mov	r0, r1
 8000404:	e7f5      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000406:	fab3 f183 	clz	r1, r3
 800040a:	2900      	cmp	r1, #0
 800040c:	d14e      	bne.n	80004ac <__udivmoddi4+0x15c>
 800040e:	4543      	cmp	r3, r8
 8000410:	f0c0 8112 	bcc.w	8000638 <__udivmoddi4+0x2e8>
 8000414:	4282      	cmp	r2, r0
 8000416:	f240 810f 	bls.w	8000638 <__udivmoddi4+0x2e8>
 800041a:	4608      	mov	r0, r1
 800041c:	2d00      	cmp	r5, #0
 800041e:	d0e8      	beq.n	80003f2 <__udivmoddi4+0xa2>
 8000420:	e9c5 4e00 	strd	r4, lr, [r5]
 8000424:	e7e5      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000426:	2a00      	cmp	r2, #0
 8000428:	f000 80ac 	beq.w	8000584 <__udivmoddi4+0x234>
 800042c:	fab2 f682 	clz	r6, r2
 8000430:	2e00      	cmp	r6, #0
 8000432:	f040 80bb 	bne.w	80005ac <__udivmoddi4+0x25c>
 8000436:	1a8b      	subs	r3, r1, r2
 8000438:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800043c:	b2bc      	uxth	r4, r7
 800043e:	2101      	movs	r1, #1
 8000440:	0c02      	lsrs	r2, r0, #16
 8000442:	b280      	uxth	r0, r0
 8000444:	fbb3 fcfe 	udiv	ip, r3, lr
 8000448:	fb0e 331c 	mls	r3, lr, ip, r3
 800044c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000450:	fb04 f20c 	mul.w	r2, r4, ip
 8000454:	429a      	cmp	r2, r3
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x126>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f10c 38ff 	add.w	r8, ip, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0901 	movcs.w	r9, #1
 8000464:	f04f 0900 	movcc.w	r9, #0
 8000468:	429a      	cmp	r2, r3
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x124>
 800046c:	f1b9 0f00 	cmp.w	r9, #0
 8000470:	f000 80ec 	beq.w	800064c <__udivmoddi4+0x2fc>
 8000474:	46c4      	mov	ip, r8
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	fbb3 f8fe 	udiv	r8, r3, lr
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	fb04 f408 	mul.w	r4, r4, r8
 8000484:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000488:	4294      	cmp	r4, r2
 800048a:	d90b      	bls.n	80004a4 <__udivmoddi4+0x154>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f108 33ff 	add.w	r3, r8, #4294967295
 8000492:	bf2c      	ite	cs
 8000494:	2001      	movcs	r0, #1
 8000496:	2000      	movcc	r0, #0
 8000498:	4294      	cmp	r4, r2
 800049a:	d902      	bls.n	80004a2 <__udivmoddi4+0x152>
 800049c:	2800      	cmp	r0, #0
 800049e:	f000 80d1 	beq.w	8000644 <__udivmoddi4+0x2f4>
 80004a2:	4698      	mov	r8, r3
 80004a4:	1b12      	subs	r2, r2, r4
 80004a6:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80004aa:	e79d      	b.n	80003e8 <__udivmoddi4+0x98>
 80004ac:	f1c1 0620 	rsb	r6, r1, #32
 80004b0:	408b      	lsls	r3, r1
 80004b2:	fa08 f401 	lsl.w	r4, r8, r1
 80004b6:	fa00 f901 	lsl.w	r9, r0, r1
 80004ba:	fa22 f706 	lsr.w	r7, r2, r6
 80004be:	fa28 f806 	lsr.w	r8, r8, r6
 80004c2:	408a      	lsls	r2, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	fa20 f306 	lsr.w	r3, r0, r6
 80004ca:	0c38      	lsrs	r0, r7, #16
 80004cc:	4323      	orrs	r3, r4
 80004ce:	fa1f fc87 	uxth.w	ip, r7
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	fbb8 fef0 	udiv	lr, r8, r0
 80004d8:	fb00 881e 	mls	r8, r0, lr, r8
 80004dc:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80004e0:	fb0e f80c 	mul.w	r8, lr, ip
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	d90e      	bls.n	8000506 <__udivmoddi4+0x1b6>
 80004e8:	193c      	adds	r4, r7, r4
 80004ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ee:	bf2c      	ite	cs
 80004f0:	f04f 0b01 	movcs.w	fp, #1
 80004f4:	f04f 0b00 	movcc.w	fp, #0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d903      	bls.n	8000504 <__udivmoddi4+0x1b4>
 80004fc:	f1bb 0f00 	cmp.w	fp, #0
 8000500:	f000 80b8 	beq.w	8000674 <__udivmoddi4+0x324>
 8000504:	46d6      	mov	lr, sl
 8000506:	eba4 0408 	sub.w	r4, r4, r8
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000512:	fb00 4413 	mls	r4, r0, r3, r4
 8000516:	fb03 fc0c 	mul.w	ip, r3, ip
 800051a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800051e:	45a4      	cmp	ip, r4
 8000520:	d90e      	bls.n	8000540 <__udivmoddi4+0x1f0>
 8000522:	193c      	adds	r4, r7, r4
 8000524:	f103 30ff 	add.w	r0, r3, #4294967295
 8000528:	bf2c      	ite	cs
 800052a:	f04f 0801 	movcs.w	r8, #1
 800052e:	f04f 0800 	movcc.w	r8, #0
 8000532:	45a4      	cmp	ip, r4
 8000534:	d903      	bls.n	800053e <__udivmoddi4+0x1ee>
 8000536:	f1b8 0f00 	cmp.w	r8, #0
 800053a:	f000 809f 	beq.w	800067c <__udivmoddi4+0x32c>
 800053e:	4603      	mov	r3, r0
 8000540:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000544:	eba4 040c 	sub.w	r4, r4, ip
 8000548:	fba0 ec02 	umull	lr, ip, r0, r2
 800054c:	4564      	cmp	r4, ip
 800054e:	4673      	mov	r3, lr
 8000550:	46e0      	mov	r8, ip
 8000552:	d302      	bcc.n	800055a <__udivmoddi4+0x20a>
 8000554:	d107      	bne.n	8000566 <__udivmoddi4+0x216>
 8000556:	45f1      	cmp	r9, lr
 8000558:	d205      	bcs.n	8000566 <__udivmoddi4+0x216>
 800055a:	ebbe 0302 	subs.w	r3, lr, r2
 800055e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000562:	3801      	subs	r0, #1
 8000564:	46e0      	mov	r8, ip
 8000566:	b15d      	cbz	r5, 8000580 <__udivmoddi4+0x230>
 8000568:	ebb9 0203 	subs.w	r2, r9, r3
 800056c:	eb64 0408 	sbc.w	r4, r4, r8
 8000570:	fa04 f606 	lsl.w	r6, r4, r6
 8000574:	fa22 f301 	lsr.w	r3, r2, r1
 8000578:	40cc      	lsrs	r4, r1
 800057a:	431e      	orrs	r6, r3
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e736      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000584:	fbb1 fcf2 	udiv	ip, r1, r2
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	4614      	mov	r4, r2
 800058c:	b280      	uxth	r0, r0
 800058e:	4696      	mov	lr, r2
 8000590:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000594:	2620      	movs	r6, #32
 8000596:	4690      	mov	r8, r2
 8000598:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 800059c:	4610      	mov	r0, r2
 800059e:	fbb1 f1f2 	udiv	r1, r1, r2
 80005a2:	eba3 0308 	sub.w	r3, r3, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e74b      	b.n	8000444 <__udivmoddi4+0xf4>
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	f1c6 0320 	rsb	r3, r6, #32
 80005b2:	fa01 f206 	lsl.w	r2, r1, r6
 80005b6:	fa21 f803 	lsr.w	r8, r1, r3
 80005ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005be:	fa20 f303 	lsr.w	r3, r0, r3
 80005c2:	b2bc      	uxth	r4, r7
 80005c4:	40b0      	lsls	r0, r6
 80005c6:	4313      	orrs	r3, r2
 80005c8:	0c02      	lsrs	r2, r0, #16
 80005ca:	0c19      	lsrs	r1, r3, #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	fbb8 f9fe 	udiv	r9, r8, lr
 80005d2:	fb0e 8819 	mls	r8, lr, r9, r8
 80005d6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80005da:	fb09 f804 	mul.w	r8, r9, r4
 80005de:	4588      	cmp	r8, r1
 80005e0:	d951      	bls.n	8000686 <__udivmoddi4+0x336>
 80005e2:	1879      	adds	r1, r7, r1
 80005e4:	f109 3cff 	add.w	ip, r9, #4294967295
 80005e8:	bf2c      	ite	cs
 80005ea:	f04f 0a01 	movcs.w	sl, #1
 80005ee:	f04f 0a00 	movcc.w	sl, #0
 80005f2:	4588      	cmp	r8, r1
 80005f4:	d902      	bls.n	80005fc <__udivmoddi4+0x2ac>
 80005f6:	f1ba 0f00 	cmp.w	sl, #0
 80005fa:	d031      	beq.n	8000660 <__udivmoddi4+0x310>
 80005fc:	eba1 0108 	sub.w	r1, r1, r8
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	fb0e 1119 	mls	r1, lr, r9, r1
 800060c:	b29b      	uxth	r3, r3
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	4543      	cmp	r3, r8
 8000614:	d235      	bcs.n	8000682 <__udivmoddi4+0x332>
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	f109 31ff 	add.w	r1, r9, #4294967295
 800061c:	bf2c      	ite	cs
 800061e:	f04f 0a01 	movcs.w	sl, #1
 8000622:	f04f 0a00 	movcc.w	sl, #0
 8000626:	4543      	cmp	r3, r8
 8000628:	d2bb      	bcs.n	80005a2 <__udivmoddi4+0x252>
 800062a:	f1ba 0f00 	cmp.w	sl, #0
 800062e:	d1b8      	bne.n	80005a2 <__udivmoddi4+0x252>
 8000630:	f1a9 0102 	sub.w	r1, r9, #2
 8000634:	443b      	add	r3, r7
 8000636:	e7b4      	b.n	80005a2 <__udivmoddi4+0x252>
 8000638:	1a84      	subs	r4, r0, r2
 800063a:	eb68 0203 	sbc.w	r2, r8, r3
 800063e:	2001      	movs	r0, #1
 8000640:	4696      	mov	lr, r2
 8000642:	e6eb      	b.n	800041c <__udivmoddi4+0xcc>
 8000644:	443a      	add	r2, r7
 8000646:	f1a8 0802 	sub.w	r8, r8, #2
 800064a:	e72b      	b.n	80004a4 <__udivmoddi4+0x154>
 800064c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000650:	443b      	add	r3, r7
 8000652:	e710      	b.n	8000476 <__udivmoddi4+0x126>
 8000654:	3902      	subs	r1, #2
 8000656:	443b      	add	r3, r7
 8000658:	e6a9      	b.n	80003ae <__udivmoddi4+0x5e>
 800065a:	443a      	add	r2, r7
 800065c:	3802      	subs	r0, #2
 800065e:	e6be      	b.n	80003de <__udivmoddi4+0x8e>
 8000660:	eba7 0808 	sub.w	r8, r7, r8
 8000664:	f1a9 0c02 	sub.w	ip, r9, #2
 8000668:	4441      	add	r1, r8
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	e7c9      	b.n	8000608 <__udivmoddi4+0x2b8>
 8000674:	f1ae 0e02 	sub.w	lr, lr, #2
 8000678:	443c      	add	r4, r7
 800067a:	e744      	b.n	8000506 <__udivmoddi4+0x1b6>
 800067c:	3b02      	subs	r3, #2
 800067e:	443c      	add	r4, r7
 8000680:	e75e      	b.n	8000540 <__udivmoddi4+0x1f0>
 8000682:	4649      	mov	r1, r9
 8000684:	e78d      	b.n	80005a2 <__udivmoddi4+0x252>
 8000686:	eba1 0108 	sub.w	r1, r1, r8
 800068a:	46cc      	mov	ip, r9
 800068c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000690:	fb09 f804 	mul.w	r8, r9, r4
 8000694:	e7b8      	b.n	8000608 <__udivmoddi4+0x2b8>
 8000696:	bf00      	nop

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <CST816D_ReadReg>:
// 外部声明
extern I2C_HandleTypeDef hi2c3;

// 读取CST816D寄存器
HAL_StatusTypeDef CST816D_ReadReg(uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c3, (CST816D_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	88bb      	ldrh	r3, [r7, #4]
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	212a      	movs	r1, #42	@ 0x2a
 80006c0:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <CST816D_ReadReg+0x34>)
 80006c2:	f003 ff03 	bl	80044cc <HAL_I2C_Mem_Read>
 80006c6:	4603      	mov	r3, r0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20045aa8 	.word	0x20045aa8

080006d4 <CST816D_WriteReg>:

// 写入CST816D寄存器
HAL_StatusTypeDef CST816D_WriteReg(uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af04      	add	r7, sp, #16
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Write(&hi2c3, (CST816D_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	2364      	movs	r3, #100	@ 0x64
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	212a      	movs	r1, #42	@ 0x2a
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <CST816D_WriteReg+0x34>)
 80006fa:	f003 fdd3 	bl	80042a4 <HAL_I2C_Mem_Write>
 80006fe:	4603      	mov	r3, r0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20045aa8 	.word	0x20045aa8

0800070c <CST816D_Init>:

// 复位并初始化CST816D
uint8_t CST816D_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
    uint8_t temp_data;

    // 硬件复位CST816D
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // RST引脚拉低
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	482b      	ldr	r0, [pc, #172]	@ (80007c4 <CST816D_Init+0xb8>)
 8000718:	f003 fd10 	bl	800413c <HAL_GPIO_WritePin>
    HAL_Delay(20);                                         // 延时20ms（增加复位时间）
 800071c:	2014      	movs	r0, #20
 800071e:	f001 fbe7 	bl	8001ef0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);   // RST引脚拉高
 8000722:	2201      	movs	r2, #1
 8000724:	2120      	movs	r1, #32
 8000726:	4827      	ldr	r0, [pc, #156]	@ (80007c4 <CST816D_Init+0xb8>)
 8000728:	f003 fd08 	bl	800413c <HAL_GPIO_WritePin>
    HAL_Delay(100);                                       // 延时100ms等待芯片稳定启动
 800072c:	2064      	movs	r0, #100	@ 0x64
 800072e:	f001 fbdf 	bl	8001ef0 <HAL_Delay>

    uint8_t chip_id = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	71bb      	strb	r3, [r7, #6]
    if (CST816D_ReadReg(0xA7, &chip_id, 1) == HAL_OK)
 8000736:	1dbb      	adds	r3, r7, #6
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	20a7      	movs	r0, #167	@ 0xa7
 800073e:	f7ff ffad 	bl	800069c <CST816D_ReadReg>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d105      	bne.n	8000754 <CST816D_Init+0x48>
    {
        printf("CST816D ChipID = 0x%02X\r\n", chip_id);
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	4619      	mov	r1, r3
 800074c:	481e      	ldr	r0, [pc, #120]	@ (80007c8 <CST816D_Init+0xbc>)
 800074e:	f02c fae9 	bl	802cd24 <iprintf>
 8000752:	e002      	b.n	800075a <CST816D_Init+0x4e>
    }
    else
    {
        printf("Failed to read CST816D ChipID!\r\n");
 8000754:	481d      	ldr	r0, [pc, #116]	@ (80007cc <CST816D_Init+0xc0>)
 8000756:	f02c fb4d 	bl	802cdf4 <puts>
    }

    // 关闭自动休眠，确保持续工作
    temp_data = 0x01; // 禁用自动休眠
 800075a:	2301      	movs	r3, #1
 800075c:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_DIS_AUTO_SLEEP, &temp_data, 1);
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	2201      	movs	r2, #1
 8000762:	4619      	mov	r1, r3
 8000764:	20fe      	movs	r0, #254	@ 0xfe
 8000766:	f7ff ffb5 	bl	80006d4 <CST816D_WriteReg>

    // 重新设置扫描周期 - 适合双击检测的更快扫描
    temp_data = 0; // 扫描周期设为最小值(0)，最高速
 800076a:	2300      	movs	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_NOR_SCAN, &temp_data, 1);
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	2201      	movs	r2, #1
 8000772:	4619      	mov	r1, r3
 8000774:	20ee      	movs	r0, #238	@ 0xee
 8000776:	f7ff ffad 	bl	80006d4 <CST816D_WriteReg>

    // 设置中断脉冲宽度
    temp_data = 5; // 更小的脉冲宽度，提高响应速度
 800077a:	2305      	movs	r3, #5
 800077c:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_IRQ_PULSE, &temp_data, 1);
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	20ed      	movs	r0, #237	@ 0xed
 8000786:	f7ff ffa5 	bl	80006d4 <CST816D_WriteReg>

    // 配置中断控制 - 启用触摸和所有变化检测
    temp_data = EnTouch | EnChange | EnMotion;
 800078a:	2370      	movs	r3, #112	@ 0x70
 800078c:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_IRQ_CTL, &temp_data, 1);
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	2201      	movs	r2, #1
 8000792:	4619      	mov	r1, r3
 8000794:	20fa      	movs	r0, #250	@ 0xfa
 8000796:	f7ff ff9d 	bl	80006d4 <CST816D_WriteReg>
    // 设置长按时间(500ms)
//    temp_data = 10;
//    CST816D_WriteReg(CST816D_REG_LONG_PRESS, &temp_data, 1);

    // 设置动作识别掩码 - 确保双击能被检测
    temp_data = 0x07; // 启用滑动和双击 (0x01+0x02+0x03)
 800079a:	2307      	movs	r3, #7
 800079c:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_MOTION_MASK, &temp_data, 1);
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	20ec      	movs	r0, #236	@ 0xec
 80007a6:	f7ff ff95 	bl	80006d4 <CST816D_WriteReg>

    // 配置动作角度 - 更宽松的滑动手势检测
    temp_data = 60;
 80007aa:	233c      	movs	r3, #60	@ 0x3c
 80007ac:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_MOTION_ANGLE, &temp_data, 1);
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	2201      	movs	r2, #1
 80007b2:	4619      	mov	r1, r3
 80007b4:	20ef      	movs	r0, #239	@ 0xef
 80007b6:	f7ff ff8d 	bl	80006d4 <CST816D_WriteReg>

    return 1; // 初始化成功
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	42020800 	.word	0x42020800
 80007c8:	0802daf4 	.word	0x0802daf4
 80007cc:	0802db10 	.word	0x0802db10

080007d0 <CST816D_GetTouchData>:

// 获取触摸点数据 - 优化速度版本
HAL_StatusTypeDef CST816D_GetTouchData(CST816D_TouchData *touch_data)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    uint8_t data[7] = {0};
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	f8c3 2003 	str.w	r2, [r3, #3]

    // 设置初始值
    touch_data->gesture = GESTURE_NONE;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
    touch_data->finger_num = 0;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	705a      	strb	r2, [r3, #1]
    touch_data->x = 0;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	805a      	strh	r2, [r3, #2]
    touch_data->y = 0;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2200      	movs	r2, #0
 80007fa:	809a      	strh	r2, [r3, #4]

    // 直接读取所需数据，减少一个字节的传输
    if (CST816D_ReadReg(CST816D_REG_GESTURE, data, 7) != HAL_OK)
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	2207      	movs	r2, #7
 8000802:	4619      	mov	r1, r3
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff ff49 	bl	800069c <CST816D_ReadReg>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <CST816D_GetTouchData+0x44>
    {
        return HAL_ERROR;
 8000810:	2301      	movs	r3, #1
 8000812:	e022      	b.n	800085a <CST816D_GetTouchData+0x8a>
    }

    // 解析数据 - 简化处理逻辑
    touch_data->gesture = data[0];
 8000814:	7a3a      	ldrb	r2, [r7, #8]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	701a      	strb	r2, [r3, #0]
    touch_data->finger_num = data[1];
 800081a:	7a7a      	ldrb	r2, [r7, #9]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	705a      	strb	r2, [r3, #1]

    // X坐标位于寄存器2-3
    touch_data->x = ((uint16_t)(data[2] & 0x0F) << 8) | data[3];
 8000820:	7abb      	ldrb	r3, [r7, #10]
 8000822:	b21b      	sxth	r3, r3
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21b      	sxth	r3, r3
 8000828:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800082c:	b21a      	sxth	r2, r3
 800082e:	7afb      	ldrb	r3, [r7, #11]
 8000830:	b21b      	sxth	r3, r3
 8000832:	4313      	orrs	r3, r2
 8000834:	b21b      	sxth	r3, r3
 8000836:	b29a      	uxth	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	805a      	strh	r2, [r3, #2]
    // Y坐标位于寄存器4-5
    touch_data->y = ((uint16_t)(data[4] & 0x0F) << 8) | data[5];
 800083c:	7b3b      	ldrb	r3, [r7, #12]
 800083e:	b21b      	sxth	r3, r3
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000848:	b21a      	sxth	r2, r3
 800084a:	7b7b      	ldrb	r3, [r7, #13]
 800084c:	b21b      	sxth	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b21b      	sxth	r3, r3
 8000852:	b29a      	uxth	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	809a      	strh	r2, [r3, #4]

    return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <CST816D_IsTouched>:

// 检测触摸(通过INT引脚) - 优化速度版本
uint8_t CST816D_IsTouched(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    // 直接返回INT引脚状态，移除2ms延时
    return (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET);
 8000868:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800086c:	4805      	ldr	r0, [pc, #20]	@ (8000884 <CST816D_IsTouched+0x20>)
 800086e:	f003 fc4d 	bl	800410c <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	42020400 	.word	0x42020400

08000888 <CST816D_SetMotionMask>:
    return CST816D_WriteReg(CST816D_REG_IRQ_PULSE, &width, 1);
}

// 设置动作识别掩码 (使能/禁用特定手势)
HAL_StatusTypeDef CST816D_SetMotionMask(uint8_t mask)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
    return CST816D_WriteReg(CST816D_REG_MOTION_MASK, &mask, 1);
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	20ec      	movs	r0, #236	@ 0xec
 800089a:	f7ff ff1b 	bl	80006d4 <CST816D_WriteReg>
 800089e:	4603      	mov	r3, r0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <CST816D_SetIrqCtl>:
    return CST816D_SetMotionMask(motion_mask);
}

// 设置中断控制寄存器
HAL_StatusTypeDef CST816D_SetIrqCtl(uint8_t irq_ctl)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
    return CST816D_WriteReg(CST816D_REG_IRQ_CTL, &irq_ctl, 1);
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	2201      	movs	r2, #1
 80008b6:	4619      	mov	r1, r3
 80008b8:	20fa      	movs	r0, #250	@ 0xfa
 80008ba:	f7ff ff0b 	bl	80006d4 <CST816D_WriteReg>
 80008be:	4603      	mov	r3, r0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <GPDMA_Callback>:

/**
 * @brief Register DMA callbacks
 */
void GPDMA_Callback(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&handle_GPDMA1_Channel13, HAL_DMA_XFER_CPLT_CB_ID, DMA_TxCpltCallback);
 80008cc:	4a05      	ldr	r2, [pc, #20]	@ (80008e4 <GPDMA_Callback+0x1c>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <GPDMA_Callback+0x20>)
 80008d2:	f001 ffc1 	bl	8002858 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&handle_GPDMA1_Channel13, HAL_DMA_XFER_ERROR_CB_ID, DMA_TxErrorCallback);
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <GPDMA_Callback+0x24>)
 80008d8:	2102      	movs	r1, #2
 80008da:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <GPDMA_Callback+0x20>)
 80008dc:	f001 ffbc 	bl	8002858 <HAL_DMA_RegisterCallback>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	080008f1 	.word	0x080008f1
 80008e8:	20045a30 	.word	0x20045a30
 80008ec:	08000921 	.word	0x08000921

080008f0 <DMA_TxCpltCallback>:
/**
 * @brief DMA transfer complete callback
 * @param hdma: DMA handle
 */
static void DMA_TxCpltCallback(DMA_HandleTypeDef *hdma)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    if (hdma == &handle_GPDMA1_Channel13)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a07      	ldr	r2, [pc, #28]	@ (8000918 <DMA_TxCpltCallback+0x28>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d105      	bne.n	800090c <DMA_TxCpltCallback+0x1c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000900:	f3bf 8f4f 	dsb	sy
}
 8000904:	bf00      	nop
    {
        __DSB(); // 添加内存屏障
        displayRefreshing = false;
 8000906:	4b05      	ldr	r3, [pc, #20]	@ (800091c <DMA_TxCpltCallback+0x2c>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
    }
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	20045a30 	.word	0x20045a30
 800091c:	2004591c 	.word	0x2004591c

08000920 <DMA_TxErrorCallback>:
/**
 * @brief DMA transfer error callback
 * @param hdma: DMA handle
 */
static void DMA_TxErrorCallback(DMA_HandleTypeDef *hdma)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    displayRefreshing = false;
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <DMA_TxErrorCallback+0x1c>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2004591c 	.word	0x2004591c

08000940 <GPDMA_Queue_Config>:

/**
 * @brief Configure DMA Linked-list Queue
 */
static HAL_StatusTypeDef GPDMA_Queue_Config(DMA_QListTypeDef *Queue, uint8_t node_cnt, uint8_t *src, uint8_t *dst, uint32_t data_size)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0a0      	sub	sp, #128	@ 0x80
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	460b      	mov	r3, r1
 800094e:	72fb      	strb	r3, [r7, #11]
    static DMA_NodeTypeDef Nodes[(((WIDTH * HEIGHT * 2) / ((64 * 1024) - 2)) + 1)];
    HAL_StatusTypeDef ret = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    /* DMA node configuration declaration */
    DMA_NodeConfTypeDef pNodeConfig;
    uint8_t i;

    /* Set node configuration ################################################*/
    pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8000956:	2322      	movs	r3, #34	@ 0x22
 8000958:	613b      	str	r3, [r7, #16]
    pNodeConfig.Init.Mode = DMA_NORMAL;
 800095a:	2300      	movs	r3, #0
 800095c:	647b      	str	r3, [r7, #68]	@ 0x44
    pNodeConfig.Init.Request = DMA_REQUEST_SW;
 800095e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000962:	617b      	str	r3, [r7, #20]
    pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
    pNodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000968:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096c:	61fb      	str	r3, [r7, #28]
    pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 800096e:	2308      	movs	r3, #8
 8000970:	623b      	str	r3, [r7, #32]
    pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
    pNodeConfig.Init.SrcDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
    pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pNodeConfig.Init.SrcBurstLength = 1;
 800097e:	2301      	movs	r3, #1
 8000980:	637b      	str	r3, [r7, #52]	@ 0x34
    pNodeConfig.Init.DestBurstLength = 1;
 8000982:	2301      	movs	r3, #1
 8000984:	63bb      	str	r3, [r7, #56]	@ 0x38
    pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0 | DMA_DEST_ALLOCATED_PORT0;
 8000986:	2300      	movs	r3, #0
 8000988:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pNodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800098a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800098e:	643b      	str	r3, [r7, #64]	@ 0x40
    pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	65fb      	str	r3, [r7, #92]	@ 0x5c
    pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	663b      	str	r3, [r7, #96]	@ 0x60
    pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	667b      	str	r3, [r7, #100]	@ 0x64
    pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	66bb      	str	r3, [r7, #104]	@ 0x68
    pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80009a4:	2300      	movs	r3, #0
 80009a6:	657b      	str	r3, [r7, #84]	@ 0x54
    pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	64bb      	str	r3, [r7, #72]	@ 0x48
    pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80009ac:	2300      	movs	r3, #0
 80009ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    pNodeConfig.SrcAddress = (uint32_t)src;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	673b      	str	r3, [r7, #112]	@ 0x70
    pNodeConfig.DstAddress = (uint32_t)dst;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (node_cnt > 1)
 80009b8:	7afb      	ldrb	r3, [r7, #11]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d903      	bls.n	80009c6 <GPDMA_Queue_Config+0x86>
    {
        pNodeConfig.DataSize = ((64 * 1024) - 2);
 80009be:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80009c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80009c4:	e002      	b.n	80009cc <GPDMA_Queue_Config+0x8c>
    }
    else
    {
        pNodeConfig.DataSize = data_size;
 80009c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    }

    for (i = 0; ((ret == HAL_OK) && (i < node_cnt)); i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80009d2:	e08a      	b.n	8000aea <GPDMA_Queue_Config+0x1aa>
    {
        if (i == 0)
 80009d4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d13a      	bne.n	8000a52 <GPDMA_Queue_Config+0x112>
        {
            /* Reset The Queue */
            ret = HAL_DMAEx_List_ResetQ(Queue);
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f002 fca6 	bl	800332e <HAL_DMAEx_List_ResetQ>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 80009e8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <GPDMA_Queue_Config+0xb6>
            {
                return ret;
 80009f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009f4:	e085      	b.n	8000b02 <GPDMA_Queue_Config+0x1c2>
            }
            /* Build Node first Node */
            ret = HAL_DMAEx_List_BuildNode(&pNodeConfig, &Nodes[i]);
 80009f6:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80009fa:	4613      	mov	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	4413      	add	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4a42      	ldr	r2, [pc, #264]	@ (8000b0c <GPDMA_Queue_Config+0x1cc>)
 8000a04:	441a      	add	r2, r3
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fb97 	bl	8003140 <HAL_DMAEx_List_BuildNode>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000a18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <GPDMA_Queue_Config+0xe6>
            {
                return ret;
 8000a20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a24:	e06d      	b.n	8000b02 <GPDMA_Queue_Config+0x1c2>
            }
            /* Insert Node to Queue */
            ret = HAL_DMAEx_List_InsertNode_Head(Queue, &Nodes[i]);
 8000a26:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4413      	add	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4a36      	ldr	r2, [pc, #216]	@ (8000b0c <GPDMA_Queue_Config+0x1cc>)
 8000a34:	4413      	add	r3, r2
 8000a36:	4619      	mov	r1, r3
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f002 fb97 	bl	800316c <HAL_DMAEx_List_InsertNode_Head>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000a44:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d044      	beq.n	8000ad6 <GPDMA_Queue_Config+0x196>
            {
                return ret;
 8000a4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a50:	e057      	b.n	8000b02 <GPDMA_Queue_Config+0x1c2>
            }
        }
        else
        {
            /* Adjust size of last node */
            if ((node_cnt > 1) && (i == (node_cnt - 1)))
 8000a52:	7afb      	ldrb	r3, [r7, #11]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d910      	bls.n	8000a7a <GPDMA_Queue_Config+0x13a>
 8000a58:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a5c:	7afb      	ldrb	r3, [r7, #11]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d10a      	bne.n	8000a7a <GPDMA_Queue_Config+0x13a>
            {
                pNodeConfig.DataSize = (data_size - (i * ((64 * 1024) - 2)));
 8000a64:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a68:	4613      	mov	r3, r2
 8000a6a:	03db      	lsls	r3, r3, #15
 8000a6c:	1a9b      	subs	r3, r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	461a      	mov	r2, r3
 8000a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	67bb      	str	r3, [r7, #120]	@ 0x78
            }
            /* Build Node Node */
            ret = HAL_DMAEx_List_BuildNode(&pNodeConfig, &Nodes[i]);
 8000a7a:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a7e:	4613      	mov	r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	4413      	add	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4a21      	ldr	r2, [pc, #132]	@ (8000b0c <GPDMA_Queue_Config+0x1cc>)
 8000a88:	441a      	add	r2, r3
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fb55 	bl	8003140 <HAL_DMAEx_List_BuildNode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000a9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <GPDMA_Queue_Config+0x16a>
            {
                return ret;
 8000aa4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000aa8:	e02b      	b.n	8000b02 <GPDMA_Queue_Config+0x1c2>
            }
            /* Insert Node to Queue */
            ret = HAL_DMAEx_List_InsertNode_Tail(Queue, &Nodes[i]);
 8000aaa:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000aae:	4613      	mov	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4a15      	ldr	r2, [pc, #84]	@ (8000b0c <GPDMA_Queue_Config+0x1cc>)
 8000ab8:	4413      	add	r3, r2
 8000aba:	4619      	mov	r1, r3
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f002 fbbe 	bl	800323e <HAL_DMAEx_List_InsertNode_Tail>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000ac8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <GPDMA_Queue_Config+0x196>
            {
                return ret;
 8000ad0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000ad4:	e015      	b.n	8000b02 <GPDMA_Queue_Config+0x1c2>
            }
        }
        pNodeConfig.SrcAddress += ((64 * 1024) - 2);
 8000ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ad8:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000adc:	33fe      	adds	r3, #254	@ 0xfe
 8000ade:	673b      	str	r3, [r7, #112]	@ 0x70
    for (i = 0; ((ret == HAL_OK) && (i < node_cnt)); i++)
 8000ae0:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000aea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d105      	bne.n	8000afe <GPDMA_Queue_Config+0x1be>
 8000af2:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000af6:	7afb      	ldrb	r3, [r7, #11]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f4ff af6b 	bcc.w	80009d4 <GPDMA_Queue_Config+0x94>
    }

    return ret;
 8000afe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3780      	adds	r7, #128	@ 0x80
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20045920 	.word	0x20045920

08000b10 <ICNA3306_SendDataDMA>:

/**
 * @brief Send data to ICNA3306 using DMA
 */
static HAL_StatusTypeDef ICNA3306_SendDataDMA(uint8_t *pData, uint32_t Length)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
    static DMA_QListTypeDef Queue;
    uint32_t len = Length;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
    uint8_t node_cnt = (len / ((64 * 1024) - 2));
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	085b      	lsrs	r3, r3, #1
 8000b22:	4a3b      	ldr	r2, [pc, #236]	@ (8000c10 <ICNA3306_SendDataDMA+0x100>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	0b9b      	lsrs	r3, r3, #14
 8000b2a:	72fb      	strb	r3, [r7, #11]
    if (len % ((64 * 1024) - 2))
 8000b2c:	68f9      	ldr	r1, [r7, #12]
 8000b2e:	084b      	lsrs	r3, r1, #1
 8000b30:	4a37      	ldr	r2, [pc, #220]	@ (8000c10 <ICNA3306_SendDataDMA+0x100>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	0b9a      	lsrs	r2, r3, #14
 8000b38:	4613      	mov	r3, r2
 8000b3a:	03db      	lsls	r3, r3, #15
 8000b3c:	1a9b      	subs	r3, r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	1aca      	subs	r2, r1, r3
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	d002      	beq.n	8000b4c <ICNA3306_SendDataDMA+0x3c>
    {
        node_cnt++;
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	72fb      	strb	r3, [r7, #11]
    }

    if ((handle_GPDMA1_Channel13.Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000b4c:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <ICNA3306_SendDataDMA+0x104>)
 8000b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d02a      	beq.n	8000bae <ICNA3306_SendDataDMA+0x9e>
    {
        /* Link created queue to DMA channel */
        if (GPDMA_Queue_Config(&Queue, node_cnt, pData, (uint8_t *)&(hospi1.Instance->DR), len) != HAL_OK)
 8000b58:	4b2f      	ldr	r3, [pc, #188]	@ (8000c18 <ICNA3306_SendDataDMA+0x108>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8000b60:	7af9      	ldrb	r1, [r7, #11]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	4613      	mov	r3, r2
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	482c      	ldr	r0, [pc, #176]	@ (8000c1c <ICNA3306_SendDataDMA+0x10c>)
 8000b6c:	f7ff fee8 	bl	8000940 <GPDMA_Queue_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d004      	beq.n	8000b80 <ICNA3306_SendDataDMA+0x70>
        {
            displayRefreshing = false;
 8000b76:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <ICNA3306_SendDataDMA+0x110>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e042      	b.n	8000c06 <ICNA3306_SendDataDMA+0xf6>
        }

        /* Link created queue to DMA channel */
        if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel13, &Queue) != HAL_OK)
 8000b80:	4926      	ldr	r1, [pc, #152]	@ (8000c1c <ICNA3306_SendDataDMA+0x10c>)
 8000b82:	4824      	ldr	r0, [pc, #144]	@ (8000c14 <ICNA3306_SendDataDMA+0x104>)
 8000b84:	f002 fc1e 	bl	80033c4 <HAL_DMAEx_List_LinkQ>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <ICNA3306_SendDataDMA+0x88>
        {
            displayRefreshing = false;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <ICNA3306_SendDataDMA+0x110>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e036      	b.n	8000c06 <ICNA3306_SendDataDMA+0xf6>
        }

        /* Enable All the DMA interrupts */
        if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel13) != HAL_OK)
 8000b98:	481e      	ldr	r0, [pc, #120]	@ (8000c14 <ICNA3306_SendDataDMA+0x104>)
 8000b9a:	f002 fa3d 	bl	8003018 <HAL_DMAEx_List_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d02f      	beq.n	8000c04 <ICNA3306_SendDataDMA+0xf4>
        {
            displayRefreshing = false;
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c20 <ICNA3306_SendDataDMA+0x110>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e02b      	b.n	8000c06 <ICNA3306_SendDataDMA+0xf6>
        }
    }
    else
    {
        if (node_cnt > 1)
 8000bae:	7afb      	ldrb	r3, [r7, #11]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d904      	bls.n	8000bbe <ICNA3306_SendDataDMA+0xae>
        {
            displayRefreshing = false;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <ICNA3306_SendDataDMA+0x110>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e023      	b.n	8000c06 <ICNA3306_SendDataDMA+0xf6>
        }

        switch (handle_GPDMA1_Channel13.Init.DestDataWidth)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <ICNA3306_SendDataDMA+0x104>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <ICNA3306_SendDataDMA+0xc4>
 8000bc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000bca:	d106      	bne.n	8000bda <ICNA3306_SendDataDMA+0xca>
        {
        case DMA_DEST_DATAWIDTH_WORD:
            len = (Length / 4);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	60fb      	str	r3, [r7, #12]
            break;
 8000bd2:	e006      	b.n	8000be2 <ICNA3306_SendDataDMA+0xd2>
        case DMA_DEST_DATAWIDTH_BYTE:
            len = Length;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	60fb      	str	r3, [r7, #12]
            break;
 8000bd8:	e003      	b.n	8000be2 <ICNA3306_SendDataDMA+0xd2>
        default:
        case DMA_DEST_DATAWIDTH_HALFWORD:
            len = (Length / 2);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	085b      	lsrs	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
            break;
 8000be0:	bf00      	nop
        }

        if (HAL_DMA_Start_IT(&handle_GPDMA1_Channel13, (uint32_t)pData, (uint32_t)&(hospi1.Instance->DR), len) != HAL_OK)
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <ICNA3306_SendDataDMA+0x108>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3350      	adds	r3, #80	@ 0x50
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4809      	ldr	r0, [pc, #36]	@ (8000c14 <ICNA3306_SendDataDMA+0x104>)
 8000bf0:	f001 fbcc 	bl	800238c <HAL_DMA_Start_IT>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d004      	beq.n	8000c04 <ICNA3306_SendDataDMA+0xf4>
        {
            displayRefreshing = false;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <ICNA3306_SendDataDMA+0x110>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <ICNA3306_SendDataDMA+0xf6>
        }
    }

    return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	80010003 	.word	0x80010003
 8000c14:	20045a30 	.word	0x20045a30
 8000c18:	20045afc 	.word	0x20045afc
 8000c1c:	2004598c 	.word	0x2004598c
 8000c20:	2004591c 	.word	0x2004591c

08000c24 <ICNA3306_WriteCmdParam>:

HAL_StatusTypeDef ICNA3306_WriteCmdParam(uint8_t cmd, size_t len, const uint8_t *params)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b098      	sub	sp, #96	@ 0x60
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	73fb      	strb	r3, [r7, #15]
    OSPI_RegularCmdTypeDef sCommand = {0};
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	2250      	movs	r2, #80	@ 0x50
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f02c f9ba 	bl	802cfb4 <memset>

    sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = 0x02;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
    sCommand.Address = ((uint32_t)cmd) << 8;
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28

    sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000c56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c60:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000c66:	2300      	movs	r3, #0
 8000c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.DummyCycles = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.DataMode = len > 0 ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_NONE;
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <ICNA3306_WriteCmdParam+0x5a>
 8000c78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c7c:	e000      	b.n	8000c80 <ICNA3306_WriteCmdParam+0x5c>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.NbData = len;
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480d      	ldr	r0, [pc, #52]	@ (8000cc8 <ICNA3306_WriteCmdParam+0xa4>)
 8000c92:	f004 fa9d 	bl	80051d0 <HAL_OSPI_Command>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <ICNA3306_WriteCmdParam+0x7c>
    {
        return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e00e      	b.n	8000cbe <ICNA3306_WriteCmdParam+0x9a>
    }

    if (len > 0)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00a      	beq.n	8000cbc <ICNA3306_WriteCmdParam+0x98>
    {
        if (HAL_OSPI_Transmit(&hospi1, (uint8_t *)params, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <ICNA3306_WriteCmdParam+0xa4>)
 8000cae:	f004 fb1c 	bl	80052ea <HAL_OSPI_Transmit>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <ICNA3306_WriteCmdParam+0x98>
        {
            return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <ICNA3306_WriteCmdParam+0x9a>
        }
    }

    return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3760      	adds	r7, #96	@ 0x60
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20045afc 	.word	0x20045afc

08000ccc <ICNA3306_WriteCmdData>:

HAL_StatusTypeDef ICNA3306_WriteCmdData(uint8_t cmd, size_t len, const uint8_t *data)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b09a      	sub	sp, #104	@ 0x68
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;
    OSPI_RegularCmdTypeDef sCommand = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2250      	movs	r2, #80	@ 0x50
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f02c f966 	bl	802cfb4 <memset>

    // printf("OSPI State: %d\r\n", hospi1.State);
    // printf("MemoryType: %d\r\n", hospi1.Init.MemoryType);
    // printf("OperationType: %d\r\n", sCommand.OperationType);
    if (len == 0 || data == NULL)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <ICNA3306_WriteCmdData+0x28>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <ICNA3306_WriteCmdData+0x2c>
        return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e073      	b.n	8000de0 <ICNA3306_WriteCmdData+0x114>

    HAL_OSPI_Abort(&hospi1); // 先调用
 8000cf8:	483b      	ldr	r0, [pc, #236]	@ (8000de8 <ICNA3306_WriteCmdData+0x11c>)
 8000cfa:	f004 fbb9 	bl	8005470 <HAL_OSPI_Abort>

    sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000d02:	2301      	movs	r3, #1
 8000d04:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
    sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.Instruction = 0x32;
 8000d0e:	2332      	movs	r3, #50	@ 0x32
 8000d10:	61bb      	str	r3, [r7, #24]

    sCommand.Address = (cmd << 8);
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000d18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000d1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DataMode = HAL_OSPI_DATA_4_LINES;
 8000d2c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000d30:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DummyCycles = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.NbData = len;
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	64fb      	str	r3, [r7, #76]	@ 0x4c

    sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000d42:	2300      	movs	r3, #0
 8000d44:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4825      	ldr	r0, [pc, #148]	@ (8000de8 <ICNA3306_WriteCmdData+0x11c>)
 8000d52:	f004 fa3d 	bl	80051d0 <HAL_OSPI_Command>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d004      	beq.n	8000d66 <ICNA3306_WriteCmdData+0x9a>
    {
        printf("OSPI Command Failed!\r\n");
 8000d5c:	4823      	ldr	r0, [pc, #140]	@ (8000dec <ICNA3306_WriteCmdData+0x120>)
 8000d5e:	f02c f849 	bl	802cdf4 <puts>
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e03c      	b.n	8000de0 <ICNA3306_WriteCmdData+0x114>
    }
    printf("Transfer length: %d\r\n", len);
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	4821      	ldr	r0, [pc, #132]	@ (8000df0 <ICNA3306_WriteCmdData+0x124>)
 8000d6a:	f02b ffdb 	bl	802cd24 <iprintf>
    if (len > 1024)
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d74:	d933      	bls.n	8000dde <ICNA3306_WriteCmdData+0x112>
    {
        HAL_OSPI_Abort(&hospi1);
 8000d76:	481c      	ldr	r0, [pc, #112]	@ (8000de8 <ICNA3306_WriteCmdData+0x11c>)
 8000d78:	f004 fb7a 	bl	8005470 <HAL_OSPI_Abort>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d7c:	f3bf 8f4f 	dsb	sy
}
 8000d80:	bf00      	nop
        __DSB();

        displayRefreshing = true;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <ICNA3306_WriteCmdData+0x128>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
        status = ICNA3306_SendDataDMA((uint8_t *)data, len);
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fec0 	bl	8000b10 <ICNA3306_SendDataDMA>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (status != HAL_OK)
 8000d96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <ICNA3306_WriteCmdData+0xde>
        {
            displayRefreshing = false;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <ICNA3306_WriteCmdData+0x128>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
            return status;
 8000da4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000da8:	e01a      	b.n	8000de0 <ICNA3306_WriteCmdData+0x114>
        }
        uint32_t timeout = HAL_GetTick() + 1000;
 8000daa:	f001 f895 	bl	8001ed8 <HAL_GetTick>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000db4:	663b      	str	r3, [r7, #96]	@ 0x60
        while (displayRefreshing)
 8000db6:	e00d      	b.n	8000dd4 <ICNA3306_WriteCmdData+0x108>
        {
            if (HAL_GetTick() >= timeout)
 8000db8:	f001 f88e 	bl	8001ed8 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d807      	bhi.n	8000dd4 <ICNA3306_WriteCmdData+0x108>
            {
                HAL_DMA_Abort_IT(&handle_GPDMA1_Channel13);
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <ICNA3306_WriteCmdData+0x12c>)
 8000dc6:	f001 fbbd 	bl	8002544 <HAL_DMA_Abort_IT>
                displayRefreshing = false;
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <ICNA3306_WriteCmdData+0x128>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
                return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e005      	b.n	8000de0 <ICNA3306_WriteCmdData+0x114>
        while (displayRefreshing)
 8000dd4:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <ICNA3306_WriteCmdData+0x128>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1ec      	bne.n	8000db8 <ICNA3306_WriteCmdData+0xec>
            }
        }
    }

    return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3768      	adds	r7, #104	@ 0x68
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20045afc 	.word	0x20045afc
 8000dec:	0802db30 	.word	0x0802db30
 8000df0:	0802db48 	.word	0x0802db48
 8000df4:	2004591c 	.word	0x2004591c
 8000df8:	20045a30 	.word	0x20045a30

08000dfc <ICNA3306_DrawBuffer>:

void ICNA3306_DrawBuffer(int16_t x_start, int16_t y_start, int16_t width, int16_t height, const uint8_t *buf, size_t len)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4604      	mov	r4, r0
 8000e04:	4608      	mov	r0, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	80fb      	strh	r3, [r7, #6]
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80bb      	strh	r3, [r7, #4]
 8000e12:	460b      	mov	r3, r1
 8000e14:	807b      	strh	r3, [r7, #2]
 8000e16:	4613      	mov	r3, r2
 8000e18:	803b      	strh	r3, [r7, #0]
    //    printf("Draw Buffer:\r\n");
    //    printf("Size: %dx%d pixels\r\n", width, height);
    //    printf("Data length: %d bytes\r\n", len);
    uint8_t params[5] = {0};
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	711a      	strb	r2, [r3, #4]
    int16_t x_end = x_start + width - 1;
 8000e24:	88fa      	ldrh	r2, [r7, #6]
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	4413      	add	r3, r2
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	82fb      	strh	r3, [r7, #22]
    int16_t y_end = y_start + height - 1;
 8000e32:	88ba      	ldrh	r2, [r7, #4]
 8000e34:	883b      	ldrh	r3, [r7, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	82bb      	strh	r3, [r7, #20]

    // （0x2A）
    params[0] = x_start >> 8;
 8000e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e44:	121b      	asrs	r3, r3, #8
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	733b      	strb	r3, [r7, #12]
    params[1] = x_start & 0xFF;
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	737b      	strb	r3, [r7, #13]
    params[2] = x_end >> 8;
 8000e52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e56:	121b      	asrs	r3, r3, #8
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	73bb      	strb	r3, [r7, #14]
    params[3] = x_end & 0xFF;
 8000e5e:	8afb      	ldrh	r3, [r7, #22]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	73fb      	strb	r3, [r7, #15]
    ICNA3306_WriteCmdParam(CMD_COL_SET, 4, params);
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	202a      	movs	r0, #42	@ 0x2a
 8000e6e:	f7ff fed9 	bl	8000c24 <ICNA3306_WriteCmdParam>

    // （0x2B）
    params[0] = y_start >> 8;
 8000e72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e76:	121b      	asrs	r3, r3, #8
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	733b      	strb	r3, [r7, #12]
    params[1] = y_start & 0xFF;
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	737b      	strb	r3, [r7, #13]
    params[2] = y_end >> 8;
 8000e84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e88:	121b      	asrs	r3, r3, #8
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	73bb      	strb	r3, [r7, #14]
    params[3] = y_end & 0xFF;
 8000e90:	8abb      	ldrh	r3, [r7, #20]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	73fb      	strb	r3, [r7, #15]
    ICNA3306_WriteCmdParam(CMD_ROW_SET, 4, params);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	202b      	movs	r0, #43	@ 0x2b
 8000ea0:	f7ff fec0 	bl	8000c24 <ICNA3306_WriteCmdParam>

    // （0x2C）
    ICNA3306_WriteCmdData(CMD_START_WRITE, len, buf);
 8000ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000ea8:	202c      	movs	r0, #44	@ 0x2c
 8000eaa:	f7ff ff0f 	bl	8000ccc <ICNA3306_WriteCmdData>
}
 8000eae:	bf00      	nop
 8000eb0:	371c      	adds	r7, #28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd90      	pop	{r4, r7, pc}
	...

08000eb8 <ICNA3306_Init>:

void ICNA3306_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
    uint8_t parameter[14];
    memset(parameter, 0, sizeof(parameter));
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	220e      	movs	r2, #14
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f02c f875 	bl	802cfb4 <memset>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2104      	movs	r1, #4
 8000ece:	4838      	ldr	r0, [pc, #224]	@ (8000fb0 <ICNA3306_Init+0xf8>)
 8000ed0:	f003 f934 	bl	800413c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000ed4:	2064      	movs	r0, #100	@ 0x64
 8000ed6:	f001 f80b 	bl	8001ef0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2104      	movs	r1, #4
 8000ede:	4834      	ldr	r0, [pc, #208]	@ (8000fb0 <ICNA3306_Init+0xf8>)
 8000ee0:	f003 f92c 	bl	800413c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000ee4:	2064      	movs	r0, #100	@ 0x64
 8000ee6:	f001 f803 	bl	8001ef0 <HAL_Delay>

    GPDMA_Callback();
 8000eea:	f7ff fced 	bl	80008c8 <GPDMA_Callback>

    printf("OSPI DR Addr @ %p\r\n", &(hospi1.Instance->DR));
 8000eee:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <ICNA3306_Init+0xfc>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3350      	adds	r3, #80	@ 0x50
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4830      	ldr	r0, [pc, #192]	@ (8000fb8 <ICNA3306_Init+0x100>)
 8000ef8:	f02b ff14 	bl	802cd24 <iprintf>
    printf("GPDMA1_Channel13 Instance @ 0x%08lX\r\n", (uint32_t)handle_GPDMA1_Channel13.Instance);
 8000efc:	4b2f      	ldr	r3, [pc, #188]	@ (8000fbc <ICNA3306_Init+0x104>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	482f      	ldr	r0, [pc, #188]	@ (8000fc0 <ICNA3306_Init+0x108>)
 8000f04:	f02b ff0e 	bl	802cd24 <iprintf>

    ICNA3306_WriteCmdParam(CMD_RST, 0, NULL);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff fe89 	bl	8000c24 <ICNA3306_WriteCmdParam>
    HAL_Delay(150);
 8000f12:	2096      	movs	r0, #150	@ 0x96
 8000f14:	f000 ffec 	bl	8001ef0 <HAL_Delay>

    ICNA3306_WriteCmdParam(CMD_SLEEP_OUT, 0, NULL);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2011      	movs	r0, #17
 8000f1e:	f7ff fe81 	bl	8000c24 <ICNA3306_WriteCmdParam>
    HAL_Delay(120);
 8000f22:	2078      	movs	r0, #120	@ 0x78
 8000f24:	f000 ffe4 	bl	8001ef0 <HAL_Delay>

    parameter[0] = 0x00;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0xFE, 1, parameter);
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2101      	movs	r1, #1
 8000f32:	20fe      	movs	r0, #254	@ 0xfe
 8000f34:	f7ff fe76 	bl	8000c24 <ICNA3306_WriteCmdParam>

    parameter[0] = 0x80;
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0xC4, 1, parameter);
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2101      	movs	r1, #1
 8000f42:	20c4      	movs	r0, #196	@ 0xc4
 8000f44:	f7ff fe6e 	bl	8000c24 <ICNA3306_WriteCmdParam>

    //  TearEffect
    parameter[0] = 0x00;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x35, 1, parameter);
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	461a      	mov	r2, r3
 8000f50:	2101      	movs	r1, #1
 8000f52:	2035      	movs	r0, #53	@ 0x35
 8000f54:	f7ff fe66 	bl	8000c24 <ICNA3306_WriteCmdParam>

    parameter[0] = 0x55;
 8000f58:	2355      	movs	r3, #85	@ 0x55
 8000f5a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x3A, 1, parameter);
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	203a      	movs	r0, #58	@ 0x3a
 8000f64:	f7ff fe5e 	bl	8000c24 <ICNA3306_WriteCmdParam>

    // (Memory Data Access Control)
    // parameter[0] = 0x00; // RGB
    // ICNA3306_WriteCmdParam(0x36, 1, parameter);

    parameter[0] = 0x20;
 8000f68:	2320      	movs	r3, #32
 8000f6a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x53, 1, parameter);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2101      	movs	r1, #1
 8000f72:	2053      	movs	r0, #83	@ 0x53
 8000f74:	f7ff fe56 	bl	8000c24 <ICNA3306_WriteCmdParam>

    parameter[0] = 0xFF;
 8000f78:	23ff      	movs	r3, #255	@ 0xff
 8000f7a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x51, 1, parameter);
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2101      	movs	r1, #1
 8000f82:	2051      	movs	r0, #81	@ 0x51
 8000f84:	f7ff fe4e 	bl	8000c24 <ICNA3306_WriteCmdParam>

    parameter[0] = 0xFF;
 8000f88:	23ff      	movs	r3, #255	@ 0xff
 8000f8a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x63, 1, parameter);
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2101      	movs	r1, #1
 8000f92:	2063      	movs	r0, #99	@ 0x63
 8000f94:	f7ff fe46 	bl	8000c24 <ICNA3306_WriteCmdParam>

    ICNA3306_WriteCmdParam(CMD_DISPLAY_ON, 0, NULL);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2029      	movs	r0, #41	@ 0x29
 8000f9e:	f7ff fe41 	bl	8000c24 <ICNA3306_WriteCmdParam>
    HAL_Delay(120);
 8000fa2:	2078      	movs	r0, #120	@ 0x78
 8000fa4:	f000 ffa4 	bl	8001ef0 <HAL_Delay>
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	42020400 	.word	0x42020400
 8000fb4:	20045afc 	.word	0x20045afc
 8000fb8:	0802db60 	.word	0x0802db60
 8000fbc:	20045a30 	.word	0x20045a30
 8000fc0:	0802db74 	.word	0x0802db74

08000fc4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc8:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <MX_FREERTOS_Init+0x28>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <MX_FREERTOS_Init+0x2c>)
 8000fce:	f00a fdcd 	bl	800bb6c <osThreadNew>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a07      	ldr	r2, [pc, #28]	@ (8000ff4 <MX_FREERTOS_Init+0x30>)
 8000fd6:	6013      	str	r3, [r2, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_GUI, NULL, &GUI_Task_attributes);
 8000fd8:	4a07      	ldr	r2, [pc, #28]	@ (8000ff8 <MX_FREERTOS_Init+0x34>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <MX_FREERTOS_Init+0x38>)
 8000fde:	f00a fdc5 	bl	800bb6c <osThreadNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <MX_FREERTOS_Init+0x3c>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	0802e7d8 	.word	0x0802e7d8
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	200459a4 	.word	0x200459a4
 8000ff8:	0802e7fc 	.word	0x0802e7fc
 8000ffc:	08001015 	.word	0x08001015
 8001000:	200459a8 	.word	0x200459a8

08001004 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
    //I2C_Scan(&hi2c3);
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800100c:	2001      	movs	r0, #1
 800100e:	f00a fe3f 	bl	800bc90 <osDelay>
 8001012:	e7fb      	b.n	800100c <StartDefaultTask+0x8>

08001014 <TouchGFX_GUI>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void TouchGFX_GUI(void *argument)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN defaultTask */
    MX_TouchGFX_Process();
 800101c:	f00e f901 	bl	800f222 <MX_TouchGFX_Process>

    /* Infinite loop */
    for(;;)
    {
        osDelay(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f00a fe35 	bl	800bc90 <osDelay>
 8001026:	e7fb      	b.n	8001020 <TouchGFX_GUI+0xc>

08001028 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800102c:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <MX_CRC_Init+0x3c>)
 800102e:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <MX_CRC_Init+0x40>)
 8001030:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_CRC_Init+0x3c>)
 8001034:	2200      	movs	r2, #0
 8001036:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001038:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <MX_CRC_Init+0x3c>)
 800103a:	2200      	movs	r2, #0
 800103c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_CRC_Init+0x3c>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001044:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <MX_CRC_Init+0x3c>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_CRC_Init+0x3c>)
 800104c:	2201      	movs	r2, #1
 800104e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <MX_CRC_Init+0x3c>)
 8001052:	f001 f8a9 	bl	80021a8 <HAL_CRC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800105c:	f000 faae 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200459ac 	.word	0x200459ac
 8001068:	40023000 	.word	0x40023000

0800106c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <HAL_CRC_MspInit+0x3c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10e      	bne.n	800109c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <HAL_CRC_MspInit+0x40>)
 8001080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001084:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <HAL_CRC_MspInit+0x40>)
 8001086:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800108a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <HAL_CRC_MspInit+0x40>)
 8001090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40023000 	.word	0x40023000
 80010ac:	46020c00 	.word	0x46020c00

080010b0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <MX_DMA2D_Init+0x78>)
 80010b8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010c2:	2202      	movs	r2, #2
 80010c4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80010cc:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 80010d2:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010fc:	4809      	ldr	r0, [pc, #36]	@ (8001124 <MX_DMA2D_Init+0x74>)
 80010fe:	f001 fc50 	bl	80029a2 <HAL_DMA2D_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001108:	f000 fa58 	bl	80015bc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800110c:	2101      	movs	r1, #1
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_DMA2D_Init+0x74>)
 8001110:	f001 fdb8 	bl	8002c84 <HAL_DMA2D_ConfigLayer>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 800111a:	f000 fa4f 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200459d0 	.word	0x200459d0
 8001128:	4002b000 	.word	0x4002b000

0800112c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0e      	ldr	r2, [pc, #56]	@ (8001174 <HAL_DMA2D_MspInit+0x48>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d116      	bne.n	800116c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <HAL_DMA2D_MspInit+0x4c>)
 8001140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001144:	4a0c      	ldr	r2, [pc, #48]	@ (8001178 <HAL_DMA2D_MspInit+0x4c>)
 8001146:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800114a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_DMA2D_MspInit+0x4c>)
 8001150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001154:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2105      	movs	r1, #5
 8001160:	2076      	movs	r0, #118	@ 0x76
 8001162:	f000 ffa1 	bl	80020a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001166:	2076      	movs	r0, #118	@ 0x76
 8001168:	f000 ffb8 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	4002b000 	.word	0x4002b000
 8001178:	46020c00 	.word	0x46020c00

0800117c <MX_GPDMA1_Init>:

DMA_HandleTypeDef handle_GPDMA1_Channel13;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001182:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_GPDMA1_Init+0x84>)
 8001184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001188:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <MX_GPDMA1_Init+0x84>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001192:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_GPDMA1_Init+0x84>)
 8001194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 5, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2105      	movs	r1, #5
 80011a4:	2055      	movs	r0, #85	@ 0x55
 80011a6:	f000 ff7f 	bl	80020a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 80011aa:	2055      	movs	r0, #85	@ 0x55
 80011ac:	f000 ff96 	bl	80020dc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_GPDMA1_Init+0x88>)
 80011b2:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <MX_GPDMA1_Init+0x8c>)
 80011b4:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel13.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <MX_GPDMA1_Init+0x88>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel13.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_GPDMA1_Init+0x88>)
 80011be:	2200      	movs	r2, #0
 80011c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel13.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <MX_GPDMA1_Init+0x88>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel13.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_GPDMA1_Init+0x88>)
 80011ca:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80011ce:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel13.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_GPDMA1_Init+0x88>)
 80011d2:	2280      	movs	r2, #128	@ 0x80
 80011d4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 80011d6:	480b      	ldr	r0, [pc, #44]	@ (8001204 <MX_GPDMA1_Init+0x88>)
 80011d8:	f001 fdf2 	bl	8002dc0 <HAL_DMAEx_List_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_GPDMA1_Init+0x6a>
  {
    Error_Handler();
 80011e2:	f000 f9eb 	bl	80015bc <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 80011e6:	2110      	movs	r1, #16
 80011e8:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_GPDMA1_Init+0x88>)
 80011ea:	f001 fb79 	bl	80028e0 <HAL_DMA_ConfigChannelAttributes>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_GPDMA1_Init+0x7c>
  {
    Error_Handler();
 80011f4:	f000 f9e2 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	46020c00 	.word	0x46020c00
 8001204:	20045a30 	.word	0x20045a30
 8001208:	400206d0 	.word	0x400206d0

0800120c <MX_GPIO_Init>:
     PC15-OSC32_OUT (PC15)   ------> RCC_OSC32_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b34      	ldr	r3, [pc, #208]	@ (80012f4 <MX_GPIO_Init+0xe8>)
 8001224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001228:	4a32      	ldr	r2, [pc, #200]	@ (80012f4 <MX_GPIO_Init+0xe8>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001232:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <MX_GPIO_Init+0xe8>)
 8001234:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <MX_GPIO_Init+0xe8>)
 8001242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001246:	4a2b      	ldr	r2, [pc, #172]	@ (80012f4 <MX_GPIO_Init+0xe8>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001250:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <MX_GPIO_Init+0xe8>)
 8001252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b25      	ldr	r3, [pc, #148]	@ (80012f4 <MX_GPIO_Init+0xe8>)
 8001260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001264:	4a23      	ldr	r2, [pc, #140]	@ (80012f4 <MX_GPIO_Init+0xe8>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800126e:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <MX_GPIO_Init+0xe8>)
 8001270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin = GPIO_PIN_2; // TE
 800127c:	2304      	movs	r3, #4
 800127e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <MX_GPIO_Init+0xec>)
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	4619      	mov	r1, r3
 800128e:	481b      	ldr	r0, [pc, #108]	@ (80012fc <MX_GPIO_Init+0xf0>)
 8001290:	f002 fd64 	bl	8003d5c <HAL_GPIO_Init>

    /*Configure GPIO pin : PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;           // CTP_RST
 8001294:	2320      	movs	r3, #32
 8001296:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_GPIO_Init+0xf4>)
 800129a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129c:	2301      	movs	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4619      	mov	r1, r3
 80012aa:	4816      	ldr	r0, [pc, #88]	@ (8001304 <MX_GPIO_Init+0xf8>)
 80012ac:	f002 fd56 	bl	8003d5c <HAL_GPIO_Init>

    /*Configure GPIO pin : PB2  */
    GPIO_InitStruct.Pin = GPIO_PIN_2; // LCD_RST
 80012b0:	2304      	movs	r3, #4
 80012b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	4810      	ldr	r0, [pc, #64]	@ (8001308 <MX_GPIO_Init+0xfc>)
 80012c8:	f002 fd48 	bl	8003d5c <HAL_GPIO_Init>

    /*Configure GPIO pin :  PB10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10; // CTP_INT
 80012cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <MX_GPIO_Init+0xf4>)
 80012d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	4619      	mov	r1, r3
 80012e4:	4808      	ldr	r0, [pc, #32]	@ (8001308 <MX_GPIO_Init+0xfc>)
 80012e6:	f002 fd39 	bl	8003d5c <HAL_GPIO_Init>
}
 80012ea:	bf00      	nop
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	46020c00 	.word	0x46020c00
 80012f8:	10110000 	.word	0x10110000
 80012fc:	42020000 	.word	0x42020000
 8001300:	10210000 	.word	0x10210000
 8001304:	42020800 	.word	0x42020800
 8001308:	42020400 	.word	0x42020400

0800130c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001310:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <MX_I2C3_Init+0x74>)
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <MX_I2C3_Init+0x78>)
 8001314:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x30909DEC;
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <MX_I2C3_Init+0x74>)
 8001318:	4a1b      	ldr	r2, [pc, #108]	@ (8001388 <MX_I2C3_Init+0x7c>)
 800131a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <MX_I2C3_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <MX_I2C3_Init+0x74>)
 8001324:	2201      	movs	r2, #1
 8001326:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <MX_I2C3_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800132e:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <MX_I2C3_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <MX_I2C3_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_I2C3_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_I2C3_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001346:	480e      	ldr	r0, [pc, #56]	@ (8001380 <MX_I2C3_Init+0x74>)
 8001348:	f002 ff10 	bl	800416c <HAL_I2C_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001352:	f000 f933 	bl	80015bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4809      	ldr	r0, [pc, #36]	@ (8001380 <MX_I2C3_Init+0x74>)
 800135a:	f003 fc93 	bl	8004c84 <HAL_I2CEx_ConfigAnalogFilter>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001364:	f000 f92a 	bl	80015bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_I2C3_Init+0x74>)
 800136c:	f003 fcd5 	bl	8004d1a <HAL_I2CEx_ConfigDigitalFilter>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001376:	f000 f921 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20045aa8 	.word	0x20045aa8
 8001384:	46002800 	.word	0x46002800
 8001388:	30909dec 	.word	0x30909dec

0800138c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0ba      	sub	sp, #232	@ 0xe8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	22c0      	movs	r2, #192	@ 0xc0
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f02b fe01 	bl	802cfb4 <memset>
  if(i2cHandle->Instance==I2C3)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a26      	ldr	r2, [pc, #152]	@ (8001450 <HAL_I2C_MspInit+0xc4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d145      	bne.n	8001448 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4618      	mov	r0, r3
 80013d4:	f006 fc2e 	bl	8007c34 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013de:	f000 f8ed 	bl	80015bc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <HAL_I2C_MspInit+0xc8>)
 80013e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001454 <HAL_I2C_MspInit+0xc8>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_I2C_MspInit+0xc8>)
 80013f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001400:	2303      	movs	r3, #3
 8001402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001406:	2312      	movs	r3, #18
 8001408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001418:	2304      	movs	r3, #4
 800141a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001422:	4619      	mov	r1, r3
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <HAL_I2C_MspInit+0xcc>)
 8001426:	f002 fc99 	bl	8003d5c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <HAL_I2C_MspInit+0xc8>)
 800142c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001430:	4a08      	ldr	r2, [pc, #32]	@ (8001454 <HAL_I2C_MspInit+0xc8>)
 8001432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001436:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_I2C_MspInit+0xc8>)
 800143c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001448:	bf00      	nop
 800144a:	37e8      	adds	r7, #232	@ 0xe8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	46002800 	.word	0x46002800
 8001454:	46020c00 	.word	0x46020c00
 8001458:	42020800 	.word	0x42020800

0800145c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001460:	f000 fcf6 	bl	8001e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001464:	f000 f822 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001468:	f7ff fed0 	bl	800120c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800146c:	f7ff fe86 	bl	800117c <MX_GPDMA1_Init>
  //MX_DCACHE1_Init();
  MX_DMA2D_Init();
 8001470:	f7ff fe1e 	bl	80010b0 <MX_DMA2D_Init>
  //MX_ICACHE_Init();
  MX_TIM6_Init();
 8001474:	f000 fbb0 	bl	8001bd8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001478:	f000 fc0c 	bl	8001c94 <MX_USART1_UART_Init>
  MX_CRC_Init();
 800147c:	f7ff fdd4 	bl	8001028 <MX_CRC_Init>
  MX_I2C3_Init();
 8001480:	f7ff ff44 	bl	800130c <MX_I2C3_Init>
  MX_OCTOSPI1_Init();
 8001484:	f000 f8a0 	bl	80015c8 <MX_OCTOSPI1_Init>
  MX_TouchGFX_Init();
 8001488:	f00d fec3 	bl	800f212 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 800148c:	f00d feba 	bl	800f204 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim6);
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <main+0x4c>)
 8001492:	f009 f8bf 	bl	800a614 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001496:	f00a fb19 	bl	800bacc <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 800149a:	f7ff fd93 	bl	8000fc4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800149e:	f00a fb3b 	bl	800bb18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 80014a2:	bf00      	nop
 80014a4:	e7fd      	b.n	80014a2 <main+0x46>
 80014a6:	bf00      	nop
 80014a8:	20045ba8 	.word	0x20045ba8

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b09e      	sub	sp, #120	@ 0x78
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	2260      	movs	r2, #96	@ 0x60
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f02b fd7a 	bl	802cfb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014d0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80014d4:	f005 f83e 	bl	8006554 <HAL_PWREx_ControlVoltageScaling>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80014de:	f000 f86d 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014e2:	2310      	movs	r3, #16
 80014e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014e6:	2301      	movs	r3, #1
 80014e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014ea:	2310      	movs	r3, #16
 80014ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	2302      	movs	r3, #2
 80014f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014f6:	2301      	movs	r3, #1
 80014f8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80014fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001500:	2303      	movs	r3, #3
 8001502:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001504:	230a      	movs	r3, #10
 8001506:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001508:	2302      	movs	r3, #2
 800150a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800150c:	2302      	movs	r3, #2
 800150e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001510:	2301      	movs	r3, #1
 8001512:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001514:	230c      	movs	r3, #12
 8001516:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	4618      	mov	r0, r3
 8001522:	f005 f8a3 	bl	800666c <HAL_RCC_OscConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800152c:	f000 f846 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001530:	231f      	movs	r3, #31
 8001532:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001534:	2303      	movs	r3, #3
 8001536:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	2104      	movs	r1, #4
 800154c:	4618      	mov	r0, r3
 800154e:	f005 ff69 	bl	8007424 <HAL_RCC_ClockConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001558:	f000 f830 	bl	80015bc <Error_Handler>
  }
}
 800155c:	bf00      	nop
 800155e:	3778      	adds	r7, #120	@ 0x78
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0x200);
 800156c:	1d39      	adds	r1, r7, #4
 800156e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001572:	2201      	movs	r2, #1
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <__io_putchar+0x20>)
 8001576:	f009 fcbd 	bl	800aef4 <HAL_UART_Transmit>
    return ch;
 800157a:	687b      	ldr	r3, [r7, #4]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20045bf4 	.word	0x20045bf4

08001588 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800159a:	f000 fc89 	bl	8001eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
    if (htim->Instance == TIM6)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d101      	bne.n	80015ac <HAL_TIM_PeriodElapsedCallback+0x24>
    {
        touchgfx_tim_vsync();
 80015a8:	f010 fb19 	bl	8011bde <touchgfx_tim_vsync>
    }
  /* USER CODE END Callback 1 */
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40001400 	.word	0x40001400
 80015b8:	40001000 	.word	0x40001000

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <Error_Handler+0x8>

080015c8 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80015e8:	4b2e      	ldr	r3, [pc, #184]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 80015ea:	4a2f      	ldr	r2, [pc, #188]	@ (80016a8 <MX_OCTOSPI1_Init+0xe0>)
 80015ec:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 8;
 80015ee:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 80015f0:	2208      	movs	r2, #8
 80015f2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80015f4:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80015fa:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 22;
 8001600:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 8001602:	2216      	movs	r2, #22
 8001604:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001606:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 8001608:	2201      	movs	r2, #1
 800160a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800160c:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001612:	4b24      	ldr	r3, [pc, #144]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001618:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 5;
 800161e:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 8001620:	2205      	movs	r2, #5
 8001622:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001624:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800162a:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 800162c:	2200      	movs	r2, #0
 800162e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001630:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 8001632:	2200      	movs	r2, #0
 8001634:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001636:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 8001638:	2208      	movs	r2, #8
 800163a:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 800163e:	2200      	movs	r2, #0
 8001640:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001642:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 8001644:	2200      	movs	r2, #0
 8001646:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001648:	4816      	ldr	r0, [pc, #88]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 800164a:	f003 fbc3 	bl	8004dd4 <HAL_OSPI_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_OCTOSPI1_Init+0x90>
  {
    Error_Handler();
 8001654:	f7ff ffb2 	bl	80015bc <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.NCSPort = 1;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001660:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001664:	617b      	str	r3, [r7, #20]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 8001672:	f003 ff81 	bl	8005578 <HAL_OSPIM_Config>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_OCTOSPI1_Init+0xb8>
  {
    Error_Handler();
 800167c:	f7ff ff9e 	bl	80015bc <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_OCTOSPI1_Init+0xdc>)
 800168e:	f004 ff19 	bl	80064c4 <HAL_OSPI_DLYB_SetConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 8001698:	f7ff ff90 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20045afc 	.word	0x20045afc
 80016a8:	420d1400 	.word	0x420d1400

080016ac <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b0bc      	sub	sp, #240	@ 0xf0
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	22c0      	movs	r2, #192	@ 0xc0
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f02b fc71 	bl	802cfb4 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a4f      	ldr	r2, [pc, #316]	@ (8001814 <HAL_OSPI_MspInit+0x168>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	f040 8096 	bne.w	800180a <HAL_OSPI_MspInit+0x15e>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80016de:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	4618      	mov	r0, r3
 80016f6:	f006 fa9d 	bl	8007c34 <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_OSPI_MspInit+0x58>
    {
      Error_Handler();
 8001700:	f7ff ff5c 	bl	80015bc <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001704:	4b44      	ldr	r3, [pc, #272]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 8001706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800170a:	4a43      	ldr	r2, [pc, #268]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 800170c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001710:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001714:	4b40      	ldr	r3, [pc, #256]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 8001716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800171a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001722:	4b3d      	ldr	r3, [pc, #244]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001728:	4a3b      	ldr	r2, [pc, #236]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001732:	4b39      	ldr	r3, [pc, #228]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 8001734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b35      	ldr	r3, [pc, #212]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 8001742:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001746:	4a34      	ldr	r2, [pc, #208]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001750:	4b31      	ldr	r3, [pc, #196]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 8001752:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	4b2e      	ldr	r3, [pc, #184]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 8001760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001764:	4a2c      	ldr	r2, [pc, #176]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800176e:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <HAL_OSPI_MspInit+0x16c>)
 8001770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> OCTOSPIM_P1_IO3
    PA7     ------> OCTOSPIM_P1_IO2
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 800177c:	23c8      	movs	r3, #200	@ 0xc8
 800177e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001794:	230a      	movs	r3, #10
 8001796:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800179e:	4619      	mov	r1, r3
 80017a0:	481e      	ldr	r0, [pc, #120]	@ (800181c <HAL_OSPI_MspInit+0x170>)
 80017a2:	f002 fadb 	bl	8003d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017a6:	2310      	movs	r3, #16
 80017a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80017be:	2303      	movs	r3, #3
 80017c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017c8:	4619      	mov	r1, r3
 80017ca:	4814      	ldr	r0, [pc, #80]	@ (800181c <HAL_OSPI_MspInit+0x170>)
 80017cc:	f002 fac6 	bl	8003d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017d0:	2303      	movs	r3, #3
 80017d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80017e8:	230a      	movs	r3, #10
 80017ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017f2:	4619      	mov	r1, r3
 80017f4:	480a      	ldr	r0, [pc, #40]	@ (8001820 <HAL_OSPI_MspInit+0x174>)
 80017f6:	f002 fab1 	bl	8003d5c <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	204c      	movs	r0, #76	@ 0x4c
 8001800:	f000 fc52 	bl	80020a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001804:	204c      	movs	r0, #76	@ 0x4c
 8001806:	f000 fc69 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 800180a:	bf00      	nop
 800180c:	37f0      	adds	r7, #240	@ 0xf0
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	420d1400 	.word	0x420d1400
 8001818:	46020c00 	.word	0x46020c00
 800181c:	42020000 	.word	0x42020000
 8001820:	42020400 	.word	0x42020400

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <HAL_MspInit+0x38>)
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001830:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <HAL_MspInit+0x38>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800183a:	4b08      	ldr	r3, [pc, #32]	@ (800185c <HAL_MspInit+0x38>)
 800183c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	210f      	movs	r1, #15
 800184c:	f06f 0001 	mvn.w	r0, #1
 8001850:	f000 fc2a 	bl	80020a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	46020c00 	.word	0x46020c00

08001860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	@ 0x38
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001870:	4b2e      	ldr	r3, [pc, #184]	@ (800192c <HAL_InitTick+0xcc>)
 8001872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001876:	4a2d      	ldr	r2, [pc, #180]	@ (800192c <HAL_InitTick+0xcc>)
 8001878:	f043 0320 	orr.w	r3, r3, #32
 800187c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001880:	4b2a      	ldr	r3, [pc, #168]	@ (800192c <HAL_InitTick+0xcc>)
 8001882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001886:	f003 0320 	and.w	r3, r3, #32
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800188e:	f107 0210 	add.w	r2, r7, #16
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f006 f90d 	bl	8007ab8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800189e:	f006 f8cf 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 80018a2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a6:	4a22      	ldr	r2, [pc, #136]	@ (8001930 <HAL_InitTick+0xd0>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	0c9b      	lsrs	r3, r3, #18
 80018ae:	3b01      	subs	r3, #1
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <HAL_InitTick+0xd4>)
 80018b4:	4a20      	ldr	r2, [pc, #128]	@ (8001938 <HAL_InitTick+0xd8>)
 80018b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <HAL_InitTick+0xd4>)
 80018ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018be:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80018c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001934 <HAL_InitTick+0xd4>)
 80018c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80018c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_InitTick+0xd4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_InitTick+0xd4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 80018d2:	4818      	ldr	r0, [pc, #96]	@ (8001934 <HAL_InitTick+0xd4>)
 80018d4:	f008 fe46 	bl	800a564 <HAL_TIM_Base_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80018de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80018e6:	4813      	ldr	r0, [pc, #76]	@ (8001934 <HAL_InitTick+0xd4>)
 80018e8:	f008 fe94 	bl	800a614 <HAL_TIM_Base_Start_IT>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80018f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10e      	bne.n	8001918 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d808      	bhi.n	8001912 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM7 global Interrupt */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	2032      	movs	r0, #50	@ 0x32
 8001906:	f000 fbcf 	bl	80020a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800190a:	4a0c      	ldr	r2, [pc, #48]	@ (800193c <HAL_InitTick+0xdc>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	e002      	b.n	8001918 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001918:	2032      	movs	r0, #50	@ 0x32
 800191a:	f000 fbdf 	bl	80020dc <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800191e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001922:	4618      	mov	r0, r3
 8001924:	3738      	adds	r7, #56	@ 0x38
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	46020c00 	.word	0x46020c00
 8001930:	431bde83 	.word	0x431bde83
 8001934:	20045b58 	.word	0x20045b58
 8001938:	40001400 	.word	0x40001400
 800193c:	20000008 	.word	0x20000008

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <NMI_Handler+0x4>

08001948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <MemManage_Handler+0x4>

08001958 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <UsageFault_Handler+0x4>

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <TIM6_IRQHandler+0x10>)
 800197e:	f008 fee9 	bl	800a754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20045ba8 	.word	0x20045ba8

0800198c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <TIM7_IRQHandler+0x10>)
 8001992:	f008 fedf 	bl	800a754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20045b58 	.word	0x20045b58

080019a0 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <OCTOSPI1_IRQHandler+0x10>)
 80019a6:	f003 fad1 	bl	8004f4c <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20045afc 	.word	0x20045afc

080019b4 <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <GPDMA1_Channel13_IRQHandler+0x10>)
 80019ba:	f000 fdec 	bl	8002596 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20045a30 	.word	0x20045a30

080019c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <DMA2D_IRQHandler+0x10>)
 80019ce:	f001 f849 	bl	8002a64 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200459d0 	.word	0x200459d0

080019dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_kill>:

int _kill(int pid, int sig)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f6:	f02b fb7f 	bl	802d0f8 <__errno>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2216      	movs	r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_exit>:

void _exit (int status)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffe7 	bl	80019ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a1e:	bf00      	nop
 8001a20:	e7fd      	b.n	8001a1e <_exit+0x12>

08001a22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e00a      	b.n	8001a4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a34:	f3af 8000 	nop.w
 8001a38:	4601      	mov	r1, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	60ba      	str	r2, [r7, #8]
 8001a40:	b2ca      	uxtb	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf0      	blt.n	8001a34 <_read+0x12>
  }

  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e009      	b.n	8001a82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	60ba      	str	r2, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fd74 	bl	8001564 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbf1      	blt.n	8001a6e <_write+0x12>
  }
  return len;
 8001a8a:	687b      	ldr	r3, [r7, #4]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_close>:

int _close(int file)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001abc:	605a      	str	r2, [r3, #4]
  return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_isatty>:

int _isatty(int file)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b085      	sub	sp, #20
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f02b fae4 	bl	802d0f8 <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200c0000 	.word	0x200c0000
 8001b5c:	00000800 	.word	0x00000800
 8001b60:	20045ba4 	.word	0x20045ba4
 8001b64:	2005c7e8 	.word	0x2005c7e8

08001b68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <SystemInit+0x68>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b72:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <SystemInit+0x68>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <SystemInit+0x6c>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b82:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <SystemInit+0x6c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <SystemInit+0x6c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <SystemInit+0x6c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <SystemInit+0x6c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <SystemInit+0x6c>)
 8001b9a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001b9e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001ba2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <SystemInit+0x6c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <SystemInit+0x6c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a09      	ldr	r2, [pc, #36]	@ (8001bd4 <SystemInit+0x6c>)
 8001bb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <SystemInit+0x6c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <SystemInit+0x68>)
 8001bbe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bc2:	609a      	str	r2, [r3, #8]
  #endif
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00
 8001bd4:	46020c00 	.word	0x46020c00

08001bd8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001bea:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <MX_TIM6_Init+0x68>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001bee:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001bfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001c0a:	f008 fcab 	bl	800a564 <HAL_TIM_Base_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c14:	f7ff fcd2 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001c26:	f009 f80d 	bl	800ac44 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c30:	f7ff fcc4 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20045ba8 	.word	0x20045ba8
 8001c40:	40001000 	.word	0x40001000

08001c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0e      	ldr	r2, [pc, #56]	@ (8001c8c <HAL_TIM_Base_MspInit+0x48>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d116      	bne.n	8001c84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_TIM_Base_MspInit+0x4c>)
 8001c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c90 <HAL_TIM_Base_MspInit+0x4c>)
 8001c5e:	f043 0310 	orr.w	r3, r3, #16
 8001c62:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c66:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <HAL_TIM_Base_MspInit+0x4c>)
 8001c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2105      	movs	r1, #5
 8001c78:	2031      	movs	r0, #49	@ 0x31
 8001c7a:	f000 fa15 	bl	80020a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001c7e:	2031      	movs	r0, #49	@ 0x31
 8001c80:	f000 fa2c 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40001000 	.word	0x40001000
 8001c90:	46020c00 	.word	0x46020c00

08001c94 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c98:	4b22      	ldr	r3, [pc, #136]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001c9a:	4a23      	ldr	r2, [pc, #140]	@ (8001d28 <MX_USART1_UART_Init+0x94>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c9e:	4b21      	ldr	r3, [pc, #132]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001ca0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cca:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cdc:	4811      	ldr	r0, [pc, #68]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001cde:	f009 f8b9 	bl	800ae54 <HAL_UART_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ce8:	f7ff fc68 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cec:	2100      	movs	r1, #0
 8001cee:	480d      	ldr	r0, [pc, #52]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001cf0:	f009 fd98 	bl	800b824 <HAL_UARTEx_SetTxFifoThreshold>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cfa:	f7ff fc5f 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4808      	ldr	r0, [pc, #32]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001d02:	f009 fdcd 	bl	800b8a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d0c:	f7ff fc56 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d10:	4804      	ldr	r0, [pc, #16]	@ (8001d24 <MX_USART1_UART_Init+0x90>)
 8001d12:	f009 fd4e 	bl	800b7b2 <HAL_UARTEx_DisableFifoMode>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d1c:	f7ff fc4e 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20045bf4 	.word	0x20045bf4
 8001d28:	40013800 	.word	0x40013800

08001d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0ba      	sub	sp, #232	@ 0xe8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	22c0      	movs	r2, #192	@ 0xc0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f02b f931 	bl	802cfb4 <memset>
  if(uartHandle->Instance==USART1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a26      	ldr	r2, [pc, #152]	@ (8001df0 <HAL_UART_MspInit+0xc4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d145      	bne.n	8001de8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d5c:	f04f 0201 	mov.w	r2, #1
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4618      	mov	r0, r3
 8001d72:	f005 ff5f 	bl	8007c34 <HAL_RCCEx_PeriphCLKConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001d7c:	f7ff fc1e 	bl	80015bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <HAL_UART_MspInit+0xc8>)
 8001d82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d86:	4a1b      	ldr	r2, [pc, #108]	@ (8001df4 <HAL_UART_MspInit+0xc8>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d90:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <HAL_UART_MspInit+0xc8>)
 8001d92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_UART_MspInit+0xc8>)
 8001da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da4:	4a13      	ldr	r2, [pc, #76]	@ (8001df4 <HAL_UART_MspInit+0xc8>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dae:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <HAL_UART_MspInit+0xc8>)
 8001db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dbc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <HAL_UART_MspInit+0xcc>)
 8001de4:	f001 ffba 	bl	8003d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001de8:	bf00      	nop
 8001dea:	37e8      	adds	r7, #232	@ 0xe8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40013800 	.word	0x40013800
 8001df4:	46020c00 	.word	0x46020c00
 8001df8:	42020000 	.word	0x42020000

08001dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e34 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e00:	f7ff feb2 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e06:	e003      	b.n	8001e10 <LoopCopyDataInit>

08001e08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e08:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e0e:	3104      	adds	r1, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e10:	480a      	ldr	r0, [pc, #40]	@ (8001e3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e12:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e18:	d3f6      	bcc.n	8001e08 <CopyDataInit>
	ldr	r2, =_sbss
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e1c:	e002      	b.n	8001e24 <LoopFillZerobss>

08001e1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e20:	f842 3b04 	str.w	r3, [r2], #4

08001e24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e24:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <LoopForever+0x16>)
	cmp	r2, r3
 8001e26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e28:	d3f9      	bcc.n	8001e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f02b f96b 	bl	802d104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e2e:	f7ff fb15 	bl	800145c <main>

08001e32 <LoopForever>:

LoopForever:
    b LoopForever
 8001e32:	e7fe      	b.n	8001e32 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001e34:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001e38:	080310b8 	.word	0x080310b8
	ldr	r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e40:	200000fc 	.word	0x200000fc
	ldr	r2, =_sbss
 8001e44:	20045900 	.word	0x20045900
	ldr	r3, = _ebss
 8001e48:	2005c7e4 	.word	0x2005c7e4

08001e4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC1_IRQHandler>
	...

08001e50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_Init+0x50>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a11      	ldr	r2, [pc, #68]	@ (8001ea0 <HAL_Init+0x50>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e60:	2003      	movs	r0, #3
 8001e62:	f000 f916 	bl	8002092 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e66:	f005 fccf 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_Init+0x54>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <HAL_Init+0x58>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001eac <HAL_Init+0x5c>)
 8001e7e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e80:	2004      	movs	r0, #4
 8001e82:	f000 f939 	bl	80020f8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff fcea 	bl	8001860 <HAL_InitTick>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e002      	b.n	8001e9c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e96:	f7ff fcc5 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	46020c00 	.word	0x46020c00
 8001ea8:	0802e820 	.word	0x0802e820
 8001eac:	20000004 	.word	0x20000004

08001eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	20045c88 	.word	0x20045c88

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20045c88 	.word	0x20045c88

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff ffee 	bl	8001ed8 <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_Delay+0x44>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f16:	bf00      	nop
 8001f18:	f7ff ffde 	bl	8001ed8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000000c 	.word	0x2000000c

08001f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db0b      	blt.n	8001fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4907      	ldr	r1, [pc, #28]	@ (8001fd4 <__NVIC_EnableIRQ+0x38>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db0a      	blt.n	8002002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	490c      	ldr	r1, [pc, #48]	@ (8002024 <__NVIC_SetPriority+0x4c>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	0112      	lsls	r2, r2, #4
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002000:	e00a      	b.n	8002018 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4908      	ldr	r1, [pc, #32]	@ (8002028 <__NVIC_SetPriority+0x50>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3b04      	subs	r3, #4
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	440b      	add	r3, r1
 8002016:	761a      	strb	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f1c3 0307 	rsb	r3, r3, #7
 8002046:	2b04      	cmp	r3, #4
 8002048:	bf28      	it	cs
 800204a:	2304      	movcs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3304      	adds	r3, #4
 8002052:	2b06      	cmp	r3, #6
 8002054:	d902      	bls.n	800205c <NVIC_EncodePriority+0x30>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3b03      	subs	r3, #3
 800205a:	e000      	b.n	800205e <NVIC_EncodePriority+0x32>
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	f04f 32ff 	mov.w	r2, #4294967295
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	401a      	ands	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43d9      	mvns	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	4313      	orrs	r3, r2
         );
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	@ 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ff4c 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020b6:	f7ff ff63 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 80020ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	6978      	ldr	r0, [r7, #20]
 80020c2:	f7ff ffb3 	bl	800202c <NVIC_EncodePriority>
 80020c6:	4602      	mov	r2, r0
 80020c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff82 	bl	8001fd8 <__NVIC_SetPriority>
}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff56 	bl	8001f9c <__NVIC_EnableIRQ>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b04      	cmp	r3, #4
 8002104:	d844      	bhi.n	8002190 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002106:	a201      	add	r2, pc, #4	@ (adr r2, 800210c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210c:	0800212f 	.word	0x0800212f
 8002110:	0800214d 	.word	0x0800214d
 8002114:	0800216f 	.word	0x0800216f
 8002118:	08002191 	.word	0x08002191
 800211c:	08002121 	.word	0x08002121
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002120:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1e      	ldr	r2, [pc, #120]	@ (80021a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6013      	str	r3, [r2, #0]
      break;
 800212c:	e031      	b.n	8002192 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800212e:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a1b      	ldr	r2, [pc, #108]	@ (80021a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800213a:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002140:	4a18      	ldr	r2, [pc, #96]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002142:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800214a:	e022      	b.n	8002192 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800214c:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a13      	ldr	r2, [pc, #76]	@ (80021a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002152:	f023 0304 	bic.w	r3, r3, #4
 8002156:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800215a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800215e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002162:	4a10      	ldr	r2, [pc, #64]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002164:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002168:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800216c:	e011      	b.n	8002192 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800216e:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a0b      	ldr	r2, [pc, #44]	@ (80021a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002180:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002184:	4a07      	ldr	r2, [pc, #28]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002186:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800218a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800218e:	e000      	b.n	8002192 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002190:	bf00      	nop
  }
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000e010 	.word	0xe000e010
 80021a4:	46020c00 	.word	0x46020c00

080021a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e054      	b.n	8002264 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7f5b      	ldrb	r3, [r3, #29]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe ff4e 	bl	800106c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	791b      	ldrb	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a22      	ldr	r2, [pc, #136]	@ (800226c <HAL_CRC_Init+0xc4>)
 80021e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0218 	bic.w	r2, r2, #24
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	e00c      	b.n	8002212 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	461a      	mov	r2, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f834 	bl	8002270 <HAL_CRCEx_Polynomial_Set>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e028      	b.n	8002264 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	795b      	ldrb	r3, [r3, #5]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f04f 32ff 	mov.w	r2, #4294967295
 8002222:	611a      	str	r2, [r3, #16]
 8002224:	e004      	b.n	8002230 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6912      	ldr	r2, [r2, #16]
 800222e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699a      	ldr	r2, [r3, #24]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	04c11db7 	.word	0x04c11db7

08002270 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002280:	231f      	movs	r3, #31
 8002282:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	75fb      	strb	r3, [r7, #23]
 8002292:	e063      	b.n	800235c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002294:	bf00      	nop
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1e5a      	subs	r2, r3, #1
 800229a:	613a      	str	r2, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_CRCEx_Polynomial_Set+0x44>
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b18      	cmp	r3, #24
 80022b8:	d846      	bhi.n	8002348 <HAL_CRCEx_Polynomial_Set+0xd8>
 80022ba:	a201      	add	r2, pc, #4	@ (adr r2, 80022c0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	0800234f 	.word	0x0800234f
 80022c4:	08002349 	.word	0x08002349
 80022c8:	08002349 	.word	0x08002349
 80022cc:	08002349 	.word	0x08002349
 80022d0:	08002349 	.word	0x08002349
 80022d4:	08002349 	.word	0x08002349
 80022d8:	08002349 	.word	0x08002349
 80022dc:	08002349 	.word	0x08002349
 80022e0:	0800233d 	.word	0x0800233d
 80022e4:	08002349 	.word	0x08002349
 80022e8:	08002349 	.word	0x08002349
 80022ec:	08002349 	.word	0x08002349
 80022f0:	08002349 	.word	0x08002349
 80022f4:	08002349 	.word	0x08002349
 80022f8:	08002349 	.word	0x08002349
 80022fc:	08002349 	.word	0x08002349
 8002300:	08002331 	.word	0x08002331
 8002304:	08002349 	.word	0x08002349
 8002308:	08002349 	.word	0x08002349
 800230c:	08002349 	.word	0x08002349
 8002310:	08002349 	.word	0x08002349
 8002314:	08002349 	.word	0x08002349
 8002318:	08002349 	.word	0x08002349
 800231c:	08002349 	.word	0x08002349
 8002320:	08002325 	.word	0x08002325
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b06      	cmp	r3, #6
 8002328:	d913      	bls.n	8002352 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800232e:	e010      	b.n	8002352 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b07      	cmp	r3, #7
 8002334:	d90f      	bls.n	8002356 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800233a:	e00c      	b.n	8002356 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b0f      	cmp	r3, #15
 8002340:	d90b      	bls.n	800235a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002346:	e008      	b.n	800235a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	75fb      	strb	r3, [r7, #23]
        break;
 800234c:	e006      	b.n	800235c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800234e:	bf00      	nop
 8002350:	e004      	b.n	800235c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002352:	bf00      	nop
 8002354:	e002      	b.n	800235c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002356:	bf00      	nop
 8002358:	e000      	b.n	800235c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800235a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10d      	bne.n	800237e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 0118 	bic.w	r1, r3, #24
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	430a      	orrs	r2, r1
 800237c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800237e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002380:	4618      	mov	r0, r3
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e04f      	b.n	8002444 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_DMA_Start_IT+0x26>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e048      	b.n	8002444 <HAL_DMA_Start_IT+0xb8>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d136      	bne.n	8002434 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fabc 	bl	8002958 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80023ee:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002406:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800241e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e007      	b.n	8002444 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2240      	movs	r2, #64	@ 0x40
 8002438:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002454:	f7ff fd40 	bl	8001ed8 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e06b      	b.n	800253c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d008      	beq.n	8002482 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e05c      	b.n	800253c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0204 	orr.w	r2, r2, #4
 8002490:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2205      	movs	r2, #5
 8002496:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800249a:	e020      	b.n	80024de <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800249c:	f7ff fd1c 	bl	8001ed8 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d919      	bls.n	80024de <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	f043 0210 	orr.w	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2203      	movs	r2, #3
 80024ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ce:	2201      	movs	r2, #1
 80024d0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e02e      	b.n	800253c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0d7      	beq.n	800249c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0202 	orr.w	r2, r2, #2
 80024fa:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2204      	movs	r2, #4
 8002500:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800250c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002526:	2201      	movs	r2, #1
 8002528:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2200      	movs	r2, #0
 8002530:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e019      	b.n	800258a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d004      	beq.n	800256c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e00e      	b.n	800258a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2204      	movs	r2, #4
 8002570:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80025a6:	f023 030f 	bic.w	r3, r3, #15
 80025aa:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	3b50      	subs	r3, #80	@ 0x50
 80025b6:	09db      	lsrs	r3, r3, #7
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2201      	movs	r2, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 813b 	beq.w	800284c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d011      	beq.n	8002608 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025fa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002612:	2b00      	cmp	r3, #0
 8002614:	d011      	beq.n	800263a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800262c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	f043 0202 	orr.w	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d011      	beq.n	800266c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800265e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	f043 0204 	orr.w	r2, r3, #4
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d011      	beq.n	800269e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002690:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002696:	f043 0208 	orr.w	r2, r3, #8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00c      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c2:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d04c      	beq.n	800277c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d045      	beq.n	800277c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026f8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b04      	cmp	r3, #4
 8002704:	d12e      	bne.n	8002764 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002714:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0202 	orr.w	r2, r2, #2
 8002724:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273e:	2201      	movs	r2, #1
 8002740:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2200      	movs	r2, #0
 8002748:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d07a      	beq.n	8002850 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	4798      	blx	r3
        }

        return;
 8002762:	e075      	b.n	8002850 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2205      	movs	r2, #5
 8002768:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d039      	beq.n	80027fe <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d032      	beq.n	80027fe <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800279c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d012      	beq.n	80027ca <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d116      	bne.n	80027dc <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d111      	bne.n	80027dc <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c4:	2201      	movs	r2, #1
 80027c6:	731a      	strb	r2, [r3, #12]
 80027c8:	e008      	b.n	80027dc <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80027e4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002802:	2b00      	cmp	r3, #0
 8002804:	d025      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0202 	orr.w	r2, r2, #2
 8002814:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282e:	2201      	movs	r2, #1
 8002830:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
 800284a:	e002      	b.n	8002852 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800284c:	bf00      	nop
 800284e:	e000      	b.n	8002852 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002850:	bf00      	nop
    }
  }
}
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_DMA_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *const hdma,
                                           HAL_DMA_CallbackIDTypeDef CallbackID,
                                           void (*const pCallback)(DMA_HandleTypeDef *const _hdma))
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	460b      	mov	r3, r1
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e02f      	b.n	80028d4 <HAL_DMA_RegisterCallback+0x7c>
  }

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d126      	bne.n	80028ce <HAL_DMA_RegisterCallback+0x76>
  {
    /* Check callback ID */
    switch (CallbackID)
 8002880:	7afb      	ldrb	r3, [r7, #11]
 8002882:	2b04      	cmp	r3, #4
 8002884:	d820      	bhi.n	80028c8 <HAL_DMA_RegisterCallback+0x70>
 8002886:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <HAL_DMA_RegisterCallback+0x34>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	080028a1 	.word	0x080028a1
 8002890:	080028a9 	.word	0x080028a9
 8002894:	080028b1 	.word	0x080028b1
 8002898:	080028b9 	.word	0x080028b9
 800289c:	080028c1 	.word	0x080028c1
    {
      case HAL_DMA_XFER_CPLT_CB_ID:
      {
        /* Register transfer complete callback */
        hdma->XferCpltCallback = pCallback;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80028a6:	e014      	b.n	80028d2 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_HALFCPLT_CB_ID:
      {
        /* Register half transfer callback */
        hdma->XferHalfCpltCallback = pCallback;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80028ae:	e010      	b.n	80028d2 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ERROR_CB_ID:
      {
        /* Register transfer error callback */
        hdma->XferErrorCallback = pCallback;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80028b6:	e00c      	b.n	80028d2 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ABORT_CB_ID:
      {
        /* Register abort callback */
        hdma->XferAbortCallback = pCallback;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80028be:	e008      	b.n	80028d2 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_SUSPEND_CB_ID:
      {
        /* Register suspend callback */
        hdma->XferSuspendCallback = pCallback;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80028c6:	e004      	b.n	80028d2 <HAL_DMA_RegisterCallback+0x7a>
      }

      default:
      {
        /* Update error status */
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
        break;
 80028cc:	e001      	b.n	80028d2 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    /* Update error status */
    status =  HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e02b      	b.n	800294c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80028fc:	f023 030f 	bic.w	r3, r3, #15
 8002900:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290a:	3b50      	subs	r3, #80	@ 0x50
 800290c:	09db      	lsrs	r3, r3, #7
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2201      	movs	r2, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f003 0311 	and.w	r3, r3, #17
 800292a:	2b11      	cmp	r3, #17
 800292c:	d106      	bne.n	800293c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	e006      	b.n	800294a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	43db      	mvns	r3, r3
 8002944:	401a      	ands	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296c:	0c1b      	lsrs	r3, r3, #16
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	b291      	uxth	r1, r2
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002984:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e053      	b.n	8002a5c <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7fe fbaf 	bl	800112c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80029e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6851      	ldr	r1, [r2, #4]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	69d2      	ldr	r2, [r2, #28]
 80029ec:	4311      	orrs	r1, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	430b      	orrs	r3, r1
 80029f4:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029fc:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6891      	ldr	r1, [r2, #8]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6992      	ldr	r2, [r2, #24]
 8002a0c:	4311      	orrs	r1, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	430b      	orrs	r3, r1
 8002a14:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68d1      	ldr	r1, [r2, #12]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	051a      	lsls	r2, r3, #20
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	055b      	lsls	r3, r3, #21
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d026      	beq.n	8002ad4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d021      	beq.n	8002ad4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d026      	beq.n	8002b2c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d021      	beq.n	8002b2c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002af6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2220      	movs	r2, #32
 8002afe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b04:	f043 0202 	orr.w	r2, r3, #2
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d026      	beq.n	8002b84 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d021      	beq.n	8002b84 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2208      	movs	r2, #8
 8002b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	f043 0204 	orr.w	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2204      	movs	r2, #4
 8002b68:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d013      	beq.n	8002bb6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00e      	beq.n	8002bb6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2204      	movs	r2, #4
 8002bae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f853 	bl	8002c5c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d024      	beq.n	8002c0a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01f      	beq.n	8002c0a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2202      	movs	r2, #2
 8002be0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01f      	beq.n	8002c54 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01a      	beq.n	8002c54 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c2c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2210      	movs	r2, #16
 8002c34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f80e 	bl	8002c70 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DMA2D_ConfigLayer+0x20>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e084      	b.n	8002dae <HAL_DMA2D_ConfigLayer+0x12a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	3328      	adds	r3, #40	@ 0x28
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	041b      	lsls	r3, r3, #16
 8002cd0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002cd8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002ce4:	4b35      	ldr	r3, [pc, #212]	@ (8002dbc <HAL_DMA2D_ConfigLayer+0x138>)
 8002ce6:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b0a      	cmp	r3, #10
 8002cee:	d003      	beq.n	8002cf8 <HAL_DMA2D_ConfigLayer+0x74>
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b09      	cmp	r3, #9
 8002cf6:	d107      	bne.n	8002d08 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e005      	b.n	8002d14 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	061b      	lsls	r3, r3, #24
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d120      	bne.n	8002d5c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	ea02 0103 	and.w	r1, r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b0a      	cmp	r3, #10
 8002d42:	d003      	beq.n	8002d4c <HAL_DMA2D_ConfigLayer+0xc8>
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b09      	cmp	r3, #9
 8002d4a:	d127      	bne.n	8002d9c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d5a:	e01f      	b.n	8002d9c <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	ea02 0103 	and.w	r1, r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b0a      	cmp	r3, #10
 8002d84:	d003      	beq.n	8002d8e <HAL_DMA2D_ConfigLayer+0x10a>
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b09      	cmp	r3, #9
 8002d8c:	d106      	bne.n	8002d9c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d9a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	ff33000f 	.word	0xff33000f

08002dc0 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff f886 	bl	8001ed8 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0db      	b.n	8002f90 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a6e      	ldr	r2, [pc, #440]	@ (8002f98 <HAL_DMAEx_List_Init+0x1d8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	f000 809f 	beq.w	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a6c      	ldr	r2, [pc, #432]	@ (8002f9c <HAL_DMAEx_List_Init+0x1dc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f000 8099 	beq.w	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6a      	ldr	r2, [pc, #424]	@ (8002fa0 <HAL_DMAEx_List_Init+0x1e0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	f000 8093 	beq.w	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a68      	ldr	r2, [pc, #416]	@ (8002fa4 <HAL_DMAEx_List_Init+0x1e4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	f000 808d 	beq.w	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a66      	ldr	r2, [pc, #408]	@ (8002fa8 <HAL_DMAEx_List_Init+0x1e8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	f000 8087 	beq.w	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a64      	ldr	r2, [pc, #400]	@ (8002fac <HAL_DMAEx_List_Init+0x1ec>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	f000 8081 	beq.w	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a62      	ldr	r2, [pc, #392]	@ (8002fb0 <HAL_DMAEx_List_Init+0x1f0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d07b      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a61      	ldr	r2, [pc, #388]	@ (8002fb4 <HAL_DMAEx_List_Init+0x1f4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d076      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb8 <HAL_DMAEx_List_Init+0x1f8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d071      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a5e      	ldr	r2, [pc, #376]	@ (8002fbc <HAL_DMAEx_List_Init+0x1fc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d06c      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc0 <HAL_DMAEx_List_Init+0x200>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d067      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a5b      	ldr	r2, [pc, #364]	@ (8002fc4 <HAL_DMAEx_List_Init+0x204>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d062      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a59      	ldr	r2, [pc, #356]	@ (8002fc8 <HAL_DMAEx_List_Init+0x208>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d05d      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a58      	ldr	r2, [pc, #352]	@ (8002fcc <HAL_DMAEx_List_Init+0x20c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d058      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a56      	ldr	r2, [pc, #344]	@ (8002fd0 <HAL_DMAEx_List_Init+0x210>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d053      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a55      	ldr	r2, [pc, #340]	@ (8002fd4 <HAL_DMAEx_List_Init+0x214>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d04e      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a53      	ldr	r2, [pc, #332]	@ (8002fd8 <HAL_DMAEx_List_Init+0x218>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d049      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a52      	ldr	r2, [pc, #328]	@ (8002fdc <HAL_DMAEx_List_Init+0x21c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d044      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a50      	ldr	r2, [pc, #320]	@ (8002fe0 <HAL_DMAEx_List_Init+0x220>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d03f      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a4f      	ldr	r2, [pc, #316]	@ (8002fe4 <HAL_DMAEx_List_Init+0x224>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d03a      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a4d      	ldr	r2, [pc, #308]	@ (8002fe8 <HAL_DMAEx_List_Init+0x228>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d035      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a4c      	ldr	r2, [pc, #304]	@ (8002fec <HAL_DMAEx_List_Init+0x22c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d030      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff0 <HAL_DMAEx_List_Init+0x230>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d02b      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a49      	ldr	r2, [pc, #292]	@ (8002ff4 <HAL_DMAEx_List_Init+0x234>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d026      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a47      	ldr	r2, [pc, #284]	@ (8002ff8 <HAL_DMAEx_List_Init+0x238>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d021      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a46      	ldr	r2, [pc, #280]	@ (8002ffc <HAL_DMAEx_List_Init+0x23c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d01c      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a44      	ldr	r2, [pc, #272]	@ (8003000 <HAL_DMAEx_List_Init+0x240>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d017      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a43      	ldr	r2, [pc, #268]	@ (8003004 <HAL_DMAEx_List_Init+0x244>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d012      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a41      	ldr	r2, [pc, #260]	@ (8003008 <HAL_DMAEx_List_Init+0x248>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00d      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a40      	ldr	r2, [pc, #256]	@ (800300c <HAL_DMAEx_List_Init+0x24c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d008      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a3e      	ldr	r2, [pc, #248]	@ (8003010 <HAL_DMAEx_List_Init+0x250>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <HAL_DMAEx_List_Init+0x162>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a3d      	ldr	r2, [pc, #244]	@ (8003014 <HAL_DMAEx_List_Init+0x254>)
 8002f20:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0206 	orr.w	r2, r2, #6
 8002f40:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002f42:	e00f      	b.n	8002f64 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002f44:	f7fe ffc8 	bl	8001ed8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d908      	bls.n	8002f64 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2210      	movs	r2, #16
 8002f56:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e015      	b.n	8002f90 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e8      	bne.n	8002f44 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fabc 	bl	80034f0 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40020050 	.word	0x40020050
 8002f9c:	50020050 	.word	0x50020050
 8002fa0:	400200d0 	.word	0x400200d0
 8002fa4:	500200d0 	.word	0x500200d0
 8002fa8:	40020150 	.word	0x40020150
 8002fac:	50020150 	.word	0x50020150
 8002fb0:	400201d0 	.word	0x400201d0
 8002fb4:	500201d0 	.word	0x500201d0
 8002fb8:	40020250 	.word	0x40020250
 8002fbc:	50020250 	.word	0x50020250
 8002fc0:	400202d0 	.word	0x400202d0
 8002fc4:	500202d0 	.word	0x500202d0
 8002fc8:	40020350 	.word	0x40020350
 8002fcc:	50020350 	.word	0x50020350
 8002fd0:	400203d0 	.word	0x400203d0
 8002fd4:	500203d0 	.word	0x500203d0
 8002fd8:	40020450 	.word	0x40020450
 8002fdc:	50020450 	.word	0x50020450
 8002fe0:	400204d0 	.word	0x400204d0
 8002fe4:	500204d0 	.word	0x500204d0
 8002fe8:	40020550 	.word	0x40020550
 8002fec:	50020550 	.word	0x50020550
 8002ff0:	400205d0 	.word	0x400205d0
 8002ff4:	500205d0 	.word	0x500205d0
 8002ff8:	40020650 	.word	0x40020650
 8002ffc:	50020650 	.word	0x50020650
 8003000:	400206d0 	.word	0x400206d0
 8003004:	500206d0 	.word	0x500206d0
 8003008:	40020750 	.word	0x40020750
 800300c:	50020750 	.word	0x50020750
 8003010:	400207d0 	.word	0x400207d0
 8003014:	500207d0 	.word	0x500207d0

08003018 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_DMAEx_List_Start_IT+0x16>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e082      	b.n	8003138 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003038:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003044:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d005      	beq.n	8003058 <HAL_DMAEx_List_Start_IT+0x40>
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d16a      	bne.n	8003128 <HAL_DMAEx_List_Start_IT+0x110>
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d067      	beq.n	8003128 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d157      	bne.n	8003114 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_DMAEx_List_Start_IT+0x5a>
 800306e:	2302      	movs	r3, #2
 8003070:	e062      	b.n	8003138 <HAL_DMAEx_List_Start_IT+0x120>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003086:	2202      	movs	r2, #2
 8003088:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80030a6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030be:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030d6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f107 010c 	add.w	r1, r7, #12
 80030e2:	2200      	movs	r2, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fd1f 	bl	8003b28 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4619      	mov	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	0c0b      	lsrs	r3, r1, #16
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003108:	4013      	ands	r3, r2
 800310a:	68f9      	ldr	r1, [r7, #12]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	430b      	orrs	r3, r1
 8003112:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	e007      	b.n	8003138 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2240      	movs	r2, #64	@ 0x40
 800312c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_DMAEx_List_BuildNode+0x16>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e004      	b.n	8003164 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800315a:	6839      	ldr	r1, [r7, #0]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fb1f 	bl	80037a0 <DMA_List_BuildNode>

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_DMAEx_List_InsertNode_Head>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Head(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_DMAEx_List_InsertNode_Head+0x16>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_DMAEx_List_InsertNode_Head+0x1a>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e057      	b.n	8003236 <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d104      	bne.n	8003198 <HAL_DMAEx_List_InsertNode_Head+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2204      	movs	r2, #4
 8003192:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e04e      	b.n	8003236 <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2200      	movs	r2, #0
 800319e:	6839      	ldr	r1, [r7, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fc55 	bl	8003a50 <DMA_List_CheckNodesBaseAddresses>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d004      	beq.n	80031b6 <HAL_DMAEx_List_InsertNode_Head+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2205      	movs	r2, #5
 80031b0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e03f      	b.n	8003236 <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	6839      	ldr	r1, [r7, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fc76 	bl	8003ab0 <DMA_List_CheckNodesTypes>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <HAL_DMAEx_List_InsertNode_Head+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2204      	movs	r2, #4
 80031ce:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e030      	b.n	8003236 <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	611a      	str	r2, [r3, #16]

  /* Empty queue */
  if (pQList->Head == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <HAL_DMAEx_List_InsertNode_Head+0x84>
  {
    pQList->Head = pNewNode;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e016      	b.n	800321e <HAL_DMAEx_List_InsertNode_Head+0xb2>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80031f0:	f107 0208 	add.w	r2, r7, #8
 80031f4:	f107 030c 	add.w	r3, r7, #12
 80031f8:	4619      	mov	r1, r3
 80031fa:	6838      	ldr	r0, [r7, #0]
 80031fc:	f000 fc94 	bl	8003b28 <DMA_List_GetCLLRNodeInfo>

    pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800320a:	4013      	ands	r3, r2
 800320c:	68f9      	ldr	r1, [r7, #12]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	4319      	orrs	r1, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQList->Head                         = pNewNode;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b08a      	sub	sp, #40	@ 0x28
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e066      	b.n	8003326 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d104      	bne.n	800326a <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2204      	movs	r2, #4
 8003264:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e05d      	b.n	8003326 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	6839      	ldr	r1, [r7, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fbec 	bl	8003a50 <DMA_List_CheckNodesBaseAddresses>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d004      	beq.n	8003288 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2205      	movs	r2, #5
 8003282:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e04e      	b.n	8003326 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2200      	movs	r2, #0
 800328e:	6839      	ldr	r1, [r7, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fc0d 	bl	8003ab0 <DMA_List_CheckNodesTypes>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d004      	beq.n	80032a6 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2204      	movs	r2, #4
 80032a0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e03f      	b.n	8003326 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e02b      	b.n	800330e <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80032b6:	f107 0220 	add.w	r2, r7, #32
 80032ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032be:	4619      	mov	r1, r3
 80032c0:	6838      	ldr	r0, [r7, #0]
 80032c2:	f000 fc31 	bl	8003b28 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80032ca:	f107 030c 	add.w	r3, r7, #12
 80032ce:	461a      	mov	r2, r3
 80032d0:	2100      	movs	r1, #0
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fc58 	bl	8003b88 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	461a      	mov	r2, r3
 80032e6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80032ea:	4013      	ands	r3, r2
 80032ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032ee:	6a3a      	ldr	r2, [r7, #32]
 80032f0:	4319      	orrs	r1, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80032fe:	4013      	ands	r3, r2
 8003300:	6a79      	ldr	r1, [r7, #36]	@ 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4610      	mov	r0, r2
 8003306:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003308:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 800330a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3728      	adds	r7, #40	@ 0x28
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_DMAEx_List_ResetQ>:
  * @brief  Reset the linked-list queue and unlink queue nodes.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_ResetQ(DMA_QListTypeDef *const pQList)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b088      	sub	sp, #32
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_DMAEx_List_ResetQ+0x12>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e03c      	b.n	80033ba <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	7b1b      	ldrb	r3, [r3, #12]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d104      	bne.n	8003354 <HAL_DMAEx_List_ResetQ+0x26>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e032      	b.n	80033ba <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d104      	bne.n	8003366 <HAL_DMAEx_List_ResetQ+0x38>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2204      	movs	r2, #4
 8003360:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e029      	b.n	80033ba <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	611a      	str	r2, [r3, #16]

  /* Check the queue */
  if (pQList->Head != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00f      	beq.n	800339a <HAL_DMAEx_List_ResetQ+0x6c>
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pQList->Head, NULL, &cllr_offset);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f107 021c 	add.w	r2, r7, #28
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fbcf 	bl	8003b28 <DMA_List_GetCLLRNodeInfo>

    /* Reset selected queue nodes */
    node_info.cllr_offset = cllr_offset;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	60bb      	str	r3, [r7, #8]
    DMA_List_ResetQueueNodes(pQList, &node_info);
 800338e:	f107 0308 	add.w	r3, r7, #8
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fc96 	bl	8003cc6 <DMA_List_ResetQueueNodes>
  }

  /* Reset head node address */
  pQList->Head = NULL;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

  /* Reset node number */
  pQList->NodeNumber = 0U;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]

  /* Reset first circular node */
  pQList->FirstCircularNode = NULL;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_RESET;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_DMAEx_List_LinkQ+0x16>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e072      	b.n	80034c4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033e4:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d002      	beq.n	80033f8 <HAL_DMAEx_List_LinkQ+0x34>
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	d108      	bne.n	800340a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2240      	movs	r2, #64	@ 0x40
 80033fc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e05c      	b.n	80034c4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	7b1b      	ldrb	r3, [r3, #12]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d104      	bne.n	800341e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2201      	movs	r2, #1
 8003418:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e052      	b.n	80034c4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a2b      	ldr	r2, [pc, #172]	@ (80034d0 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d022      	beq.n	800346e <HAL_DMAEx_List_LinkQ+0xaa>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a29      	ldr	r2, [pc, #164]	@ (80034d4 <HAL_DMAEx_List_LinkQ+0x110>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01d      	beq.n	800346e <HAL_DMAEx_List_LinkQ+0xaa>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a28      	ldr	r2, [pc, #160]	@ (80034d8 <HAL_DMAEx_List_LinkQ+0x114>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d018      	beq.n	800346e <HAL_DMAEx_List_LinkQ+0xaa>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a26      	ldr	r2, [pc, #152]	@ (80034dc <HAL_DMAEx_List_LinkQ+0x118>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_DMAEx_List_LinkQ+0xaa>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a25      	ldr	r2, [pc, #148]	@ (80034e0 <HAL_DMAEx_List_LinkQ+0x11c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00e      	beq.n	800346e <HAL_DMAEx_List_LinkQ+0xaa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a23      	ldr	r2, [pc, #140]	@ (80034e4 <HAL_DMAEx_List_LinkQ+0x120>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d009      	beq.n	800346e <HAL_DMAEx_List_LinkQ+0xaa>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a22      	ldr	r2, [pc, #136]	@ (80034e8 <HAL_DMAEx_List_LinkQ+0x124>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_DMAEx_List_LinkQ+0xaa>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a20      	ldr	r2, [pc, #128]	@ (80034ec <HAL_DMAEx_List_LinkQ+0x128>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_DMAEx_List_LinkQ+0xae>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_DMAEx_List_LinkQ+0xb0>
 8003472:	2300      	movs	r3, #0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2203      	movs	r2, #3
 800348a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e019      	b.n	80034c4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003494:	2b81      	cmp	r3, #129	@ 0x81
 8003496:	d108      	bne.n	80034aa <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10d      	bne.n	80034bc <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2204      	movs	r2, #4
 80034a4:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00c      	b.n	80034c4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2204      	movs	r2, #4
 80034b6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e003      	b.n	80034c4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40020650 	.word	0x40020650
 80034d4:	50020650 	.word	0x50020650
 80034d8:	400206d0 	.word	0x400206d0
 80034dc:	500206d0 	.word	0x500206d0
 80034e0:	40020750 	.word	0x40020750
 80034e4:	50020750 	.word	0x50020750
 80034e8:	400207d0 	.word	0x400207d0
 80034ec:	500207d0 	.word	0x500207d0

080034f0 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a85      	ldr	r2, [pc, #532]	@ (8003720 <DMA_List_Init+0x230>)
 800350a:	4293      	cmp	r3, r2
 800350c:	f000 80a0 	beq.w	8003650 <DMA_List_Init+0x160>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a83      	ldr	r2, [pc, #524]	@ (8003724 <DMA_List_Init+0x234>)
 8003516:	4293      	cmp	r3, r2
 8003518:	f000 809a 	beq.w	8003650 <DMA_List_Init+0x160>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a81      	ldr	r2, [pc, #516]	@ (8003728 <DMA_List_Init+0x238>)
 8003522:	4293      	cmp	r3, r2
 8003524:	f000 8094 	beq.w	8003650 <DMA_List_Init+0x160>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a7f      	ldr	r2, [pc, #508]	@ (800372c <DMA_List_Init+0x23c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	f000 808e 	beq.w	8003650 <DMA_List_Init+0x160>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a7d      	ldr	r2, [pc, #500]	@ (8003730 <DMA_List_Init+0x240>)
 800353a:	4293      	cmp	r3, r2
 800353c:	f000 8088 	beq.w	8003650 <DMA_List_Init+0x160>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a7b      	ldr	r2, [pc, #492]	@ (8003734 <DMA_List_Init+0x244>)
 8003546:	4293      	cmp	r3, r2
 8003548:	f000 8082 	beq.w	8003650 <DMA_List_Init+0x160>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a79      	ldr	r2, [pc, #484]	@ (8003738 <DMA_List_Init+0x248>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d07c      	beq.n	8003650 <DMA_List_Init+0x160>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a78      	ldr	r2, [pc, #480]	@ (800373c <DMA_List_Init+0x24c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d077      	beq.n	8003650 <DMA_List_Init+0x160>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a76      	ldr	r2, [pc, #472]	@ (8003740 <DMA_List_Init+0x250>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d072      	beq.n	8003650 <DMA_List_Init+0x160>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a75      	ldr	r2, [pc, #468]	@ (8003744 <DMA_List_Init+0x254>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d06d      	beq.n	8003650 <DMA_List_Init+0x160>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a73      	ldr	r2, [pc, #460]	@ (8003748 <DMA_List_Init+0x258>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d068      	beq.n	8003650 <DMA_List_Init+0x160>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a72      	ldr	r2, [pc, #456]	@ (800374c <DMA_List_Init+0x25c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d063      	beq.n	8003650 <DMA_List_Init+0x160>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a70      	ldr	r2, [pc, #448]	@ (8003750 <DMA_List_Init+0x260>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d05e      	beq.n	8003650 <DMA_List_Init+0x160>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6f      	ldr	r2, [pc, #444]	@ (8003754 <DMA_List_Init+0x264>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d059      	beq.n	8003650 <DMA_List_Init+0x160>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6d      	ldr	r2, [pc, #436]	@ (8003758 <DMA_List_Init+0x268>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d054      	beq.n	8003650 <DMA_List_Init+0x160>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6c      	ldr	r2, [pc, #432]	@ (800375c <DMA_List_Init+0x26c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d04f      	beq.n	8003650 <DMA_List_Init+0x160>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6a      	ldr	r2, [pc, #424]	@ (8003760 <DMA_List_Init+0x270>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d04a      	beq.n	8003650 <DMA_List_Init+0x160>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a69      	ldr	r2, [pc, #420]	@ (8003764 <DMA_List_Init+0x274>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d045      	beq.n	8003650 <DMA_List_Init+0x160>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a67      	ldr	r2, [pc, #412]	@ (8003768 <DMA_List_Init+0x278>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d040      	beq.n	8003650 <DMA_List_Init+0x160>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a66      	ldr	r2, [pc, #408]	@ (800376c <DMA_List_Init+0x27c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d03b      	beq.n	8003650 <DMA_List_Init+0x160>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a64      	ldr	r2, [pc, #400]	@ (8003770 <DMA_List_Init+0x280>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d036      	beq.n	8003650 <DMA_List_Init+0x160>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a63      	ldr	r2, [pc, #396]	@ (8003774 <DMA_List_Init+0x284>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d031      	beq.n	8003650 <DMA_List_Init+0x160>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a61      	ldr	r2, [pc, #388]	@ (8003778 <DMA_List_Init+0x288>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d02c      	beq.n	8003650 <DMA_List_Init+0x160>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a60      	ldr	r2, [pc, #384]	@ (800377c <DMA_List_Init+0x28c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d027      	beq.n	8003650 <DMA_List_Init+0x160>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a5e      	ldr	r2, [pc, #376]	@ (8003780 <DMA_List_Init+0x290>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d022      	beq.n	8003650 <DMA_List_Init+0x160>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a5d      	ldr	r2, [pc, #372]	@ (8003784 <DMA_List_Init+0x294>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d01d      	beq.n	8003650 <DMA_List_Init+0x160>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5b      	ldr	r2, [pc, #364]	@ (8003788 <DMA_List_Init+0x298>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d018      	beq.n	8003650 <DMA_List_Init+0x160>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a5a      	ldr	r2, [pc, #360]	@ (800378c <DMA_List_Init+0x29c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d013      	beq.n	8003650 <DMA_List_Init+0x160>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a58      	ldr	r2, [pc, #352]	@ (8003790 <DMA_List_Init+0x2a0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00e      	beq.n	8003650 <DMA_List_Init+0x160>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a57      	ldr	r2, [pc, #348]	@ (8003794 <DMA_List_Init+0x2a4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d009      	beq.n	8003650 <DMA_List_Init+0x160>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a55      	ldr	r2, [pc, #340]	@ (8003798 <DMA_List_Init+0x2a8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <DMA_List_Init+0x160>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a54      	ldr	r2, [pc, #336]	@ (800379c <DMA_List_Init+0x2ac>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d101      	bne.n	8003654 <DMA_List_Init+0x164>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <DMA_List_Init+0x166>
 8003654:	2300      	movs	r3, #0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d004      	beq.n	8003664 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	430a      	orrs	r2, r1
 8003676:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2200      	movs	r2, #0
 800367e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003688:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2200      	movs	r2, #0
 8003690:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2200      	movs	r2, #0
 8003698:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a36      	ldr	r2, [pc, #216]	@ (8003780 <DMA_List_Init+0x290>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d022      	beq.n	80036f2 <DMA_List_Init+0x202>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a34      	ldr	r2, [pc, #208]	@ (8003784 <DMA_List_Init+0x294>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01d      	beq.n	80036f2 <DMA_List_Init+0x202>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a33      	ldr	r2, [pc, #204]	@ (8003788 <DMA_List_Init+0x298>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d018      	beq.n	80036f2 <DMA_List_Init+0x202>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a31      	ldr	r2, [pc, #196]	@ (800378c <DMA_List_Init+0x29c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d013      	beq.n	80036f2 <DMA_List_Init+0x202>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a30      	ldr	r2, [pc, #192]	@ (8003790 <DMA_List_Init+0x2a0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00e      	beq.n	80036f2 <DMA_List_Init+0x202>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003794 <DMA_List_Init+0x2a4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d009      	beq.n	80036f2 <DMA_List_Init+0x202>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003798 <DMA_List_Init+0x2a8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d004      	beq.n	80036f2 <DMA_List_Init+0x202>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2b      	ldr	r2, [pc, #172]	@ (800379c <DMA_List_Init+0x2ac>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <DMA_List_Init+0x206>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <DMA_List_Init+0x208>
 80036f6:	2300      	movs	r3, #0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2200      	movs	r2, #0
 8003702:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2200      	movs	r2, #0
 800370a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2200      	movs	r2, #0
 8003712:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40020050 	.word	0x40020050
 8003724:	50020050 	.word	0x50020050
 8003728:	400200d0 	.word	0x400200d0
 800372c:	500200d0 	.word	0x500200d0
 8003730:	40020150 	.word	0x40020150
 8003734:	50020150 	.word	0x50020150
 8003738:	400201d0 	.word	0x400201d0
 800373c:	500201d0 	.word	0x500201d0
 8003740:	40020250 	.word	0x40020250
 8003744:	50020250 	.word	0x50020250
 8003748:	400202d0 	.word	0x400202d0
 800374c:	500202d0 	.word	0x500202d0
 8003750:	40020350 	.word	0x40020350
 8003754:	50020350 	.word	0x50020350
 8003758:	400203d0 	.word	0x400203d0
 800375c:	500203d0 	.word	0x500203d0
 8003760:	40020450 	.word	0x40020450
 8003764:	50020450 	.word	0x50020450
 8003768:	400204d0 	.word	0x400204d0
 800376c:	500204d0 	.word	0x500204d0
 8003770:	40020550 	.word	0x40020550
 8003774:	50020550 	.word	0x50020550
 8003778:	400205d0 	.word	0x400205d0
 800377c:	500205d0 	.word	0x500205d0
 8003780:	40020650 	.word	0x40020650
 8003784:	50020650 	.word	0x50020650
 8003788:	400206d0 	.word	0x400206d0
 800378c:	500206d0 	.word	0x500206d0
 8003790:	40020750 	.word	0x40020750
 8003794:	50020750 	.word	0x50020750
 8003798:	400207d0 	.word	0x400207d0
 800379c:	500207d0 	.word	0x500207d0

080037a0 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80037b2:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80037b8:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80037be:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80037c4:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d017      	beq.n	8003806 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e2:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	3b01      	subs	r3, #1
 80037ea:	051b      	lsls	r3, r3, #20
 80037ec:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80037f0:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	3b01      	subs	r3, #1
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80037fe:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003800:	431a      	orrs	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	f240 237f 	movw	r3, #639	@ 0x27f
 8003812:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003814:	431a      	orrs	r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003822:	d10c      	bne.n	800383e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d011      	beq.n	8003854 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	e00a      	b.n	8003854 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003846:	d105      	bne.n	8003854 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00f      	beq.n	800387c <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003868:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003874:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003876:	431a      	orrs	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003880:	b29a      	uxth	r2, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d04e      	beq.n	8003930 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800389a:	3b01      	subs	r3, #1
 800389c:	0419      	lsls	r1, r3, #16
 800389e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a48 <DMA_List_BuildNode+0x2a8>)
 80038a0:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80038a2:	431a      	orrs	r2, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da06      	bge.n	80038be <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	e005      	b.n	80038ca <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	da06      	bge.n	80038e0 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	609a      	str	r2, [r3, #8]
 80038de:	e005      	b.n	80038ec <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da06      	bge.n	8003902 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	e005      	b.n	800390e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	2b00      	cmp	r3, #0
 8003914:	da06      	bge.n	8003924 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	609a      	str	r2, [r3, #8]
 8003922:	e005      	b.n	8003930 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d05d      	beq.n	8003a08 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003950:	2b00      	cmp	r3, #0
 8003952:	da09      	bge.n	8003968 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003958:	425b      	negs	r3, r3
 800395a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	615a      	str	r2, [r3, #20]
 8003966:	e005      	b.n	8003974 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003978:	2b00      	cmp	r3, #0
 800397a:	da0d      	bge.n	8003998 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003980:	425b      	negs	r3, r3
 8003982:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	0419      	lsls	r1, r3, #16
 800398c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a4c <DMA_List_BuildNode+0x2ac>)
 800398e:	400b      	ands	r3, r1
 8003990:	431a      	orrs	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	615a      	str	r2, [r3, #20]
 8003996:	e009      	b.n	80039ac <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a0:	0419      	lsls	r1, r3, #16
 80039a2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a4c <DMA_List_BuildNode+0x2ac>)
 80039a4:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80039a6:	431a      	orrs	r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	da08      	bge.n	80039c6 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b8:	425b      	negs	r3, r3
 80039ba:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	619a      	str	r2, [r3, #24]
 80039c4:	e004      	b.n	80039d0 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ca:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	da0b      	bge.n	80039f0 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039dc:	425b      	negs	r3, r3
 80039de:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80039e8:	431a      	orrs	r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	619a      	str	r2, [r3, #24]
 80039ee:	e007      	b.n	8003a00 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f8:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80039fa:	431a      	orrs	r2, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	61da      	str	r2, [r3, #28]
 8003a06:	e002      	b.n	8003a0e <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d006      	beq.n	8003a30 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8003a2e:	e005      	b.n	8003a3c <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	621a      	str	r2, [r3, #32]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	07ff0000 	.word	0x07ff0000
 8003a4c:	1fff0000 	.word	0x1fff0000

08003a50 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e00a      	b.n	8003a92 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e004      	b.n	8003a92 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d001      	beq.n	8003aa2 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e00e      	b.n	8003aee <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e006      	b.n	8003aee <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8003b00:	2302      	movs	r3, #2
 8003b02:	e00b      	b.n	8003b1c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d001      	beq.n	8003b1a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e000      	b.n	8003b1c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00c      	beq.n	8003b5a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4a0d      	ldr	r2, [pc, #52]	@ (8003b80 <DMA_List_GetCLLRNodeInfo+0x58>)
 8003b4a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00f      	beq.n	8003b72 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2207      	movs	r2, #7
 8003b56:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003b58:	e00b      	b.n	8003b72 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4a08      	ldr	r2, [pc, #32]	@ (8003b84 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003b64:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2205      	movs	r2, #5
 8003b70:	601a      	str	r2, [r3, #0]
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	fe010000 	.word	0xfe010000
 8003b84:	f8010000 	.word	0xf8010000

08003b88 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	@ 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d142      	bne.n	8003c32 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8003bac:	e01d      	b.n	8003bea <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d107      	bne.n	8003bc4 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	e00f      	b.n	8003be4 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003bdc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3dc      	bcc.n	8003bae <DMA_List_FindNode+0x26>
 8003bf4:	e029      	b.n	8003c4a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	e00f      	b.n	8003c2c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003c24:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d206      	bcs.n	8003c4a <DMA_List_FindNode+0xc2>
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c42:	4013      	ands	r3, r2
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d1d5      	bne.n	8003bf6 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c56:	4013      	ands	r3, r2
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d001      	beq.n	8003c62 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e02b      	b.n	8003cba <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00f      	beq.n	8003cb8 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8003ca8:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	041b      	lsls	r3, r3, #16
 8003cb2:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3724      	adds	r7, #36	@ 0x24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <DMA_List_ResetQueueNodes>:
  * @param  NodeInfo : Pointer to a DMA_NodeInQInfoTypeDef structure that contains node linked to queue information.
  * @retval None.
  */
static void DMA_List_ResetQueueNodes(DMA_QListTypeDef const *const pQList,
                                     DMA_NodeInQInfoTypeDef const *const NodeInfo)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b087      	sub	sp, #28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  uint32_t node_idx = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t currentnode_address  = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
  uint32_t previousnode_address;
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60bb      	str	r3, [r7, #8]

  /* Check that previous node is linked to the selected queue */
  while (node_idx < pQList->NodeNumber)
 8003cde:	e031      	b.n	8003d44 <DMA_List_ResetQueueNodes+0x7e>
  {
    /* Get head node address */
    if (node_idx == 0U)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d110      	bne.n	8003d08 <DMA_List_ResetQueueNodes+0x42>
    {
      previousnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
      currentnode_address  = (pQList->Head->LinkRegisters[cllr_offset] & DMA_CLLR_LA);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003cfe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e00f      	b.n	8003d28 <DMA_List_ResetQueueNodes+0x62>
    }
    /* Calculate nodes addresses */
    else
    {
      previousnode_address = currentnode_address;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	60fb      	str	r3, [r7, #12]
      currentnode_address =
        ((DMA_NodeTypeDef *)(currentnode_address +
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	041b      	lsls	r3, r3, #16
        ((DMA_NodeTypeDef *)(currentnode_address +
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4413      	add	r3, r2
 8003d18:	461a      	mov	r2, r3
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
      currentnode_address =
 8003d20:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
    }

    /* Reset node */
    ((DMA_NodeTypeDef *)(previousnode_address +
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	041b      	lsls	r3, r3, #16
    ((DMA_NodeTypeDef *)(previousnode_address +
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	4619      	mov	r1, r3
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Increment node index */
    node_idx++;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	3301      	adds	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
  while (node_idx < pQList->NodeNumber)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d3c8      	bcc.n	8003ce0 <DMA_List_ResetQueueNodes+0x1a>
  }
}
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	@ 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003d6e:	e1ba      	b.n	80040e6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 81aa 	beq.w	80040e0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a55      	ldr	r2, [pc, #340]	@ (8003ee4 <HAL_GPIO_Init+0x188>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d15d      	bne.n	8003e50 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0201 	and.w	r2, r3, #1
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003dc4:	4a48      	ldr	r2, [pc, #288]	@ (8003ee8 <HAL_GPIO_Init+0x18c>)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003dcc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003dce:	4a46      	ldr	r2, [pc, #280]	@ (8003ee8 <HAL_GPIO_Init+0x18c>)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	08da      	lsrs	r2, r3, #3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	3208      	adds	r2, #8
 8003de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	220f      	movs	r2, #15
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	220b      	movs	r2, #11
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	08da      	lsrs	r2, r3, #3
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	3208      	adds	r2, #8
 8003e1a:	69f9      	ldr	r1, [r7, #28]
 8003e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e067      	b.n	8003f20 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d003      	beq.n	8003e60 <HAL_GPIO_Init+0x104>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b12      	cmp	r3, #18
 8003e5e:	d145      	bne.n	8003eec <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	08da      	lsrs	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3208      	adds	r2, #8
 8003e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	220f      	movs	r2, #15
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f003 020f 	and.w	r2, r3, #15
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	08da      	lsrs	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3208      	adds	r2, #8
 8003ea6:	69f9      	ldr	r1, [r7, #28]
 8003ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0203 	and.w	r2, r3, #3
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e01e      	b.n	8003f20 <HAL_GPIO_Init+0x1c4>
 8003ee2:	bf00      	nop
 8003ee4:	46020000 	.word	0x46020000
 8003ee8:	0802e878 	.word	0x0802e878
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0203 	and.w	r2, r3, #3
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d00b      	beq.n	8003f40 <HAL_GPIO_Init+0x1e4>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d007      	beq.n	8003f40 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f34:	2b11      	cmp	r3, #17
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b12      	cmp	r3, #18
 8003f3e:	d130      	bne.n	8003fa2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003f76:	2201      	movs	r2, #1
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	f003 0201 	and.w	r2, r3, #1
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d017      	beq.n	8003fda <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d07c      	beq.n	80040e0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003fe6:	4a47      	ldr	r2, [pc, #284]	@ (8004104 <HAL_GPIO_Init+0x3a8>)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3318      	adds	r3, #24
 8003fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	4013      	ands	r3, r2
 8004008:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0a9a      	lsrs	r2, r3, #10
 800400e:	4b3e      	ldr	r3, [pc, #248]	@ (8004108 <HAL_GPIO_Init+0x3ac>)
 8004010:	4013      	ands	r3, r2
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	f002 0203 	and.w	r2, r2, #3
 8004018:	00d2      	lsls	r2, r2, #3
 800401a:	4093      	lsls	r3, r2
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	4313      	orrs	r3, r2
 8004020:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004022:	4938      	ldr	r1, [pc, #224]	@ (8004104 <HAL_GPIO_Init+0x3a8>)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	089b      	lsrs	r3, r3, #2
 8004028:	3318      	adds	r3, #24
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004030:	4b34      	ldr	r3, [pc, #208]	@ (8004104 <HAL_GPIO_Init+0x3a8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	43db      	mvns	r3, r3
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	4013      	ands	r3, r2
 800403e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004054:	4a2b      	ldr	r2, [pc, #172]	@ (8004104 <HAL_GPIO_Init+0x3a8>)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800405a:	4b2a      	ldr	r3, [pc, #168]	@ (8004104 <HAL_GPIO_Init+0x3a8>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	43db      	mvns	r3, r3
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	4013      	ands	r3, r2
 8004068:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800407e:	4a21      	ldr	r2, [pc, #132]	@ (8004104 <HAL_GPIO_Init+0x3a8>)
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004084:	4b1f      	ldr	r3, [pc, #124]	@ (8004104 <HAL_GPIO_Init+0x3a8>)
 8004086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800408a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	43db      	mvns	r3, r3
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	4013      	ands	r3, r2
 8004094:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80040aa:	4a16      	ldr	r2, [pc, #88]	@ (8004104 <HAL_GPIO_Init+0x3a8>)
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80040b2:	4b14      	ldr	r3, [pc, #80]	@ (8004104 <HAL_GPIO_Init+0x3a8>)
 80040b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	43db      	mvns	r3, r3
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80040d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <HAL_GPIO_Init+0x3a8>)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	3301      	adds	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	fa22 f303 	lsr.w	r3, r2, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f47f ae3d 	bne.w	8003d70 <HAL_GPIO_Init+0x14>
  }
}
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	3724      	adds	r7, #36	@ 0x24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	46022000 	.word	0x46022000
 8004108:	002f7f7f 	.word	0x002f7f7f

0800410c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
 8004128:	e001      	b.n	800412e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
 8004148:	4613      	mov	r3, r2
 800414a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800414c:	787b      	ldrb	r3, [r7, #1]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004158:	e002      	b.n	8004160 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e08d      	b.n	800429a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd f8fa 	bl	800138c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2224      	movs	r2, #36	@ 0x24
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0201 	bic.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d107      	bne.n	80041e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	e006      	b.n	80041f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80041f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d108      	bne.n	800420e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	e007      	b.n	800421e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800421c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800422c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004230:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004240:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69d9      	ldr	r1, [r3, #28]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	817b      	strh	r3, [r7, #10]
 80042b6:	460b      	mov	r3, r1
 80042b8:	813b      	strh	r3, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	f040 80f9 	bne.w	80044be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_I2C_Mem_Write+0x34>
 80042d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0ed      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Mem_Write+0x4e>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e0e6      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042fa:	f7fd fded 	bl	8001ed8 <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2319      	movs	r3, #25
 8004306:	2201      	movs	r2, #1
 8004308:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fac3 	bl	8004898 <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0d1      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2221      	movs	r2, #33	@ 0x21
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2240      	movs	r2, #64	@ 0x40
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800433c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004344:	88f8      	ldrh	r0, [r7, #6]
 8004346:	893a      	ldrh	r2, [r7, #8]
 8004348:	8979      	ldrh	r1, [r7, #10]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	4603      	mov	r3, r0
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f9d3 	bl	8004700 <I2C_RequestMemoryWrite>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0a9      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2bff      	cmp	r3, #255	@ 0xff
 8004374:	d90e      	bls.n	8004394 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	22ff      	movs	r2, #255	@ 0xff
 800437a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004380:	b2da      	uxtb	r2, r3
 8004382:	8979      	ldrh	r1, [r7, #10]
 8004384:	2300      	movs	r3, #0
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 fc47 	bl	8004c20 <I2C_TransferConfig>
 8004392:	e00f      	b.n	80043b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	8979      	ldrh	r1, [r7, #10]
 80043a6:	2300      	movs	r3, #0
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fc36 	bl	8004c20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fac6 	bl	800494a <I2C_WaitOnTXISFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e07b      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d034      	beq.n	800446c <HAL_I2C_Mem_Write+0x1c8>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004406:	2b00      	cmp	r3, #0
 8004408:	d130      	bne.n	800446c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	2200      	movs	r2, #0
 8004412:	2180      	movs	r1, #128	@ 0x80
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fa3f 	bl	8004898 <I2C_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e04d      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	2bff      	cmp	r3, #255	@ 0xff
 800442c:	d90e      	bls.n	800444c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	22ff      	movs	r2, #255	@ 0xff
 8004432:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004438:	b2da      	uxtb	r2, r3
 800443a:	8979      	ldrh	r1, [r7, #10]
 800443c:	2300      	movs	r3, #0
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fbeb 	bl	8004c20 <I2C_TransferConfig>
 800444a:	e00f      	b.n	800446c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445a:	b2da      	uxtb	r2, r3
 800445c:	8979      	ldrh	r1, [r7, #10]
 800445e:	2300      	movs	r3, #0
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 fbda 	bl	8004c20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d19e      	bne.n	80043b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 faac 	bl	80049d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e01a      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2220      	movs	r2, #32
 8004490:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4b0a      	ldr	r3, [pc, #40]	@ (80044c8 <HAL_I2C_Mem_Write+0x224>)
 800449e:	400b      	ands	r3, r1
 80044a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80044be:	2302      	movs	r3, #2
  }
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	fe00e800 	.word	0xfe00e800

080044cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	4608      	mov	r0, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	461a      	mov	r2, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	817b      	strh	r3, [r7, #10]
 80044de:	460b      	mov	r3, r1
 80044e0:	813b      	strh	r3, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	f040 80fd 	bne.w	80046ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_I2C_Mem_Read+0x34>
 80044fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004506:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0f1      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_I2C_Mem_Read+0x4e>
 8004516:	2302      	movs	r3, #2
 8004518:	e0ea      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004522:	f7fd fcd9 	bl	8001ed8 <HAL_GetTick>
 8004526:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2319      	movs	r3, #25
 800452e:	2201      	movs	r2, #1
 8004530:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f9af 	bl	8004898 <I2C_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0d5      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2222      	movs	r2, #34	@ 0x22
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2240      	movs	r2, #64	@ 0x40
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a3a      	ldr	r2, [r7, #32]
 800455e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800456c:	88f8      	ldrh	r0, [r7, #6]
 800456e:	893a      	ldrh	r2, [r7, #8]
 8004570:	8979      	ldrh	r1, [r7, #10]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	4603      	mov	r3, r0
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f913 	bl	80047a8 <I2C_RequestMemoryRead>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0ad      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2bff      	cmp	r3, #255	@ 0xff
 800459c:	d90e      	bls.n	80045bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22ff      	movs	r2, #255	@ 0xff
 80045a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	8979      	ldrh	r1, [r7, #10]
 80045ac:	4b52      	ldr	r3, [pc, #328]	@ (80046f8 <HAL_I2C_Mem_Read+0x22c>)
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fb33 	bl	8004c20 <I2C_TransferConfig>
 80045ba:	e00f      	b.n	80045dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	8979      	ldrh	r1, [r7, #10]
 80045ce:	4b4a      	ldr	r3, [pc, #296]	@ (80046f8 <HAL_I2C_Mem_Read+0x22c>)
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fb22 	bl	8004c20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e2:	2200      	movs	r2, #0
 80045e4:	2104      	movs	r1, #4
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f956 	bl	8004898 <I2C_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e07c      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d034      	beq.n	800469c <HAL_I2C_Mem_Read+0x1d0>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d130      	bne.n	800469c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	2200      	movs	r2, #0
 8004642:	2180      	movs	r1, #128	@ 0x80
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f927 	bl	8004898 <I2C_WaitOnFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e04d      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2bff      	cmp	r3, #255	@ 0xff
 800465c:	d90e      	bls.n	800467c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	22ff      	movs	r2, #255	@ 0xff
 8004662:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004668:	b2da      	uxtb	r2, r3
 800466a:	8979      	ldrh	r1, [r7, #10]
 800466c:	2300      	movs	r3, #0
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fad3 	bl	8004c20 <I2C_TransferConfig>
 800467a:	e00f      	b.n	800469c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468a:	b2da      	uxtb	r2, r3
 800468c:	8979      	ldrh	r1, [r7, #10]
 800468e:	2300      	movs	r3, #0
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fac2 	bl	8004c20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d19a      	bne.n	80045dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f994 	bl	80049d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e01a      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2220      	movs	r2, #32
 80046c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6859      	ldr	r1, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <HAL_I2C_Mem_Read+0x230>)
 80046ce:	400b      	ands	r3, r1
 80046d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	80002400 	.word	0x80002400
 80046fc:	fe00e800 	.word	0xfe00e800

08004700 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	4608      	mov	r0, r1
 800470a:	4611      	mov	r1, r2
 800470c:	461a      	mov	r2, r3
 800470e:	4603      	mov	r3, r0
 8004710:	817b      	strh	r3, [r7, #10]
 8004712:	460b      	mov	r3, r1
 8004714:	813b      	strh	r3, [r7, #8]
 8004716:	4613      	mov	r3, r2
 8004718:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	8979      	ldrh	r1, [r7, #10]
 8004720:	4b20      	ldr	r3, [pc, #128]	@ (80047a4 <I2C_RequestMemoryWrite+0xa4>)
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fa79 	bl	8004c20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	69b9      	ldr	r1, [r7, #24]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f909 	bl	800494a <I2C_WaitOnTXISFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e02c      	b.n	800479c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004748:	893b      	ldrh	r3, [r7, #8]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	629a      	str	r2, [r3, #40]	@ 0x28
 8004752:	e015      	b.n	8004780 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004754:	893b      	ldrh	r3, [r7, #8]
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	b29b      	uxth	r3, r3
 800475a:	b2da      	uxtb	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	69b9      	ldr	r1, [r7, #24]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f8ef 	bl	800494a <I2C_WaitOnTXISFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e012      	b.n	800479c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004776:	893b      	ldrh	r3, [r7, #8]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2200      	movs	r2, #0
 8004788:	2180      	movs	r1, #128	@ 0x80
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f884 	bl	8004898 <I2C_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	80002000 	.word	0x80002000

080047a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	4608      	mov	r0, r1
 80047b2:	4611      	mov	r1, r2
 80047b4:	461a      	mov	r2, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	817b      	strh	r3, [r7, #10]
 80047ba:	460b      	mov	r3, r1
 80047bc:	813b      	strh	r3, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	8979      	ldrh	r1, [r7, #10]
 80047c8:	4b20      	ldr	r3, [pc, #128]	@ (800484c <I2C_RequestMemoryRead+0xa4>)
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	2300      	movs	r3, #0
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fa26 	bl	8004c20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	69b9      	ldr	r1, [r7, #24]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f8b6 	bl	800494a <I2C_WaitOnTXISFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e02c      	b.n	8004842 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d105      	bne.n	80047fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047ee:	893b      	ldrh	r3, [r7, #8]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80047f8:	e015      	b.n	8004826 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047fa:	893b      	ldrh	r3, [r7, #8]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	b29b      	uxth	r3, r3
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	69b9      	ldr	r1, [r7, #24]
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f89c 	bl	800494a <I2C_WaitOnTXISFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e012      	b.n	8004842 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800481c:	893b      	ldrh	r3, [r7, #8]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2200      	movs	r2, #0
 800482e:	2140      	movs	r1, #64	@ 0x40
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f831 	bl	8004898 <I2C_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	80002000 	.word	0x80002000

08004850 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b02      	cmp	r3, #2
 8004864:	d103      	bne.n	800486e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2200      	movs	r2, #0
 800486c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d007      	beq.n	800488c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	619a      	str	r2, [r3, #24]
  }
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048a8:	e03b      	b.n	8004922 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f8d6 	bl	8004a60 <I2C_IsErrorOccurred>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e041      	b.n	8004942 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d02d      	beq.n	8004922 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c6:	f7fd fb07 	bl	8001ed8 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d122      	bne.n	8004922 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4013      	ands	r3, r2
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	bf0c      	ite	eq
 80048ec:	2301      	moveq	r3, #1
 80048ee:	2300      	movne	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d113      	bne.n	8004922 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e00f      	b.n	8004942 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699a      	ldr	r2, [r3, #24]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4013      	ands	r3, r2
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	bf0c      	ite	eq
 8004932:	2301      	moveq	r3, #1
 8004934:	2300      	movne	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	429a      	cmp	r2, r3
 800493e:	d0b4      	beq.n	80048aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004956:	e033      	b.n	80049c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f87f 	bl	8004a60 <I2C_IsErrorOccurred>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e031      	b.n	80049d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004972:	d025      	beq.n	80049c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004974:	f7fd fab0 	bl	8001ed8 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	429a      	cmp	r2, r3
 8004982:	d302      	bcc.n	800498a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11a      	bne.n	80049c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b02      	cmp	r3, #2
 8004996:	d013      	beq.n	80049c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e007      	b.n	80049d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d1c4      	bne.n	8004958 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049e4:	e02f      	b.n	8004a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f838 	bl	8004a60 <I2C_IsErrorOccurred>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e02d      	b.n	8004a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fa:	f7fd fa6d 	bl	8001ed8 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d11a      	bne.n	8004a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d013      	beq.n	8004a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e007      	b.n	8004a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d1c8      	bne.n	80049e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	@ 0x28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d068      	beq.n	8004b5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2210      	movs	r2, #16
 8004a92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a94:	e049      	b.n	8004b2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d045      	beq.n	8004b2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a9e:	f7fd fa1b 	bl	8001ed8 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d302      	bcc.n	8004ab4 <I2C_IsErrorOccurred+0x54>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d13a      	bne.n	8004b2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004abe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ac6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad6:	d121      	bne.n	8004b1c <I2C_IsErrorOccurred+0xbc>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ade:	d01d      	beq.n	8004b1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d01a      	beq.n	8004b1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004af4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004af6:	f7fd f9ef 	bl	8001ed8 <HAL_GetTick>
 8004afa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004afc:	e00e      	b.n	8004b1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004afe:	f7fd f9eb 	bl	8001ed8 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b19      	cmp	r3, #25
 8004b0a:	d907      	bls.n	8004b1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	f043 0320 	orr.w	r3, r3, #32
 8004b12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004b1a:	e006      	b.n	8004b2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d1e9      	bne.n	8004afe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d003      	beq.n	8004b40 <I2C_IsErrorOccurred+0xe0>
 8004b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0aa      	beq.n	8004a96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	f043 0304 	orr.w	r3, r3, #4
 8004b56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f043 0308 	orr.w	r3, r3, #8
 8004b98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ba2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	f043 0302 	orr.w	r3, r3, #2
 8004bba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01c      	beq.n	8004c0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7ff fe3b 	bl	8004850 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4b0d      	ldr	r3, [pc, #52]	@ (8004c1c <I2C_IsErrorOccurred+0x1bc>)
 8004be6:	400b      	ands	r3, r1
 8004be8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3728      	adds	r7, #40	@ 0x28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	fe00e800 	.word	0xfe00e800

08004c20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	607b      	str	r3, [r7, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	817b      	strh	r3, [r7, #10]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c32:	897b      	ldrh	r3, [r7, #10]
 8004c34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c38:	7a7b      	ldrb	r3, [r7, #9]
 8004c3a:	041b      	lsls	r3, r3, #16
 8004c3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c40:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c4e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	0d5b      	lsrs	r3, r3, #21
 8004c5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004c5e:	4b08      	ldr	r3, [pc, #32]	@ (8004c80 <I2C_TransferConfig+0x60>)
 8004c60:	430b      	orrs	r3, r1
 8004c62:	43db      	mvns	r3, r3
 8004c64:	ea02 0103 	and.w	r1, r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	03ff63ff 	.word	0x03ff63ff

08004c84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d138      	bne.n	8004d0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e032      	b.n	8004d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	@ 0x24
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004cd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6819      	ldr	r1, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d139      	bne.n	8004da4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e033      	b.n	8004da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2224      	movs	r2, #36	@ 0x24
 8004d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0201 	bic.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f043 0201 	orr.w	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004de0:	f7fd f87a 	bl	8001ed8 <HAL_GetTick>
 8004de4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
 8004df0:	e0a5      	b.n	8004f3e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 809e 	bne.w	8004f3e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc fc52 	bl	80016ac <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004e08:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fba4 	bl	800555a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	4b4b      	ldr	r3, [pc, #300]	@ (8004f48 <HAL_OSPI_Init+0x174>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	68d1      	ldr	r1, [r2, #12]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6912      	ldr	r2, [r2, #16]
 8004e24:	3a01      	subs	r2, #1
 8004e26:	0412      	lsls	r2, r2, #16
 8004e28:	4311      	orrs	r1, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6952      	ldr	r2, [r2, #20]
 8004e2e:	3a01      	subs	r2, #1
 8004e30:	0212      	lsls	r2, r2, #8
 8004e32:	4311      	orrs	r1, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e38:	4311      	orrs	r1, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	69d2      	ldr	r2, [r2, #28]
 8004e3e:	4311      	orrs	r1, r2
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	430b      	orrs	r3, r1
 8004e46:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e62:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e78:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	021a      	lsls	r2, r3, #8
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2120      	movs	r1, #32
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f001 f89b 	bl	8005fdc <OSPI_WaitFlagStateUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d146      	bne.n	8004f3e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebe:	1e5a      	subs	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004ee6:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d107      	bne.n	8004f26 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0202 	orr.w	r2, r2, #2
 8004f24:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f2e:	d103      	bne.n	8004f38 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f36:	e002      	b.n	8004f3e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	f8e0c0f4 	.word	0xf8e0c0f4

08004f4c <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3350      	adds	r3, #80	@ 0x50
 8004f5a:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f70:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d03a      	beq.n	8004ff2 <HAL_OSPI_IRQHandler+0xa6>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d035      	beq.n	8004ff2 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b18      	cmp	r3, #24
 8004f8a:	d10f      	bne.n	8004fac <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f90:	781a      	ldrb	r2, [r3, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa4:	1e5a      	subs	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	649a      	str	r2, [r3, #72]	@ 0x48
 8004faa:	e012      	b.n	8004fd2 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b28      	cmp	r3, #40	@ 0x28
 8004fb0:	d10f      	bne.n	8004fd2 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	7812      	ldrb	r2, [r2, #0]
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fcc:	1e5a      	subs	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	649a      	str	r2, [r3, #72]	@ 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d107      	bne.n	8004fea <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004fe8:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fa04 	bl	80053f8 <HAL_OSPI_FifoThresholdCallback>
 8004ff0:	e0e7      	b.n	80051c2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d067      	beq.n	80050cc <HAL_OSPI_IRQHandler+0x180>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d062      	beq.n	80050cc <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b28      	cmp	r3, #40	@ 0x28
 800500a:	d131      	bne.n	8005070 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005010:	2b00      	cmp	r3, #0
 8005012:	d015      	beq.n	8005040 <HAL_OSPI_IRQHandler+0xf4>
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 800501a:	2b00      	cmp	r3, #0
 800501c:	d010      	beq.n	8005040 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	7812      	ldrb	r2, [r2, #0]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005038:	1e5a      	subs	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800503e:	e0bd      	b.n	80051bc <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005044:	2b00      	cmp	r3, #0
 8005046:	f040 80b9 	bne.w	80051bc <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2202      	movs	r2, #2
 8005050:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8005060:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2202      	movs	r2, #2
 8005066:	651a      	str	r2, [r3, #80]	@ 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f9d9 	bl	8005420 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800506e:	e0a5      	b.n	80051bc <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2202      	movs	r2, #2
 8005076:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8005086:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b18      	cmp	r3, #24
 8005092:	d103      	bne.n	800509c <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f9cd 	bl	8005434 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800509a:	e08f      	b.n	80051bc <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d103      	bne.n	80050aa <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f9b2 	bl	800540c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80050a8:	e088      	b.n	80051bc <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050b0:	f040 8084 	bne.w	80051bc <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f991 	bl	80053e4 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80050c2:	e07b      	b.n	80051bc <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f983 	bl	80053d0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80050ca:	e077      	b.n	80051bc <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01e      	beq.n	8005114 <HAL_OSPI_IRQHandler+0x1c8>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d019      	beq.n	8005114 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2208      	movs	r2, #8
 80050e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8005104:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f99b 	bl	8005448 <HAL_OSPI_StatusMatchCallback>
 8005112:	e056      	b.n	80051c2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d03c      	beq.n	8005198 <HAL_OSPI_IRQHandler+0x24c>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d037      	beq.n	8005198 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2201      	movs	r2, #1
 800512e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800513e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01a      	beq.n	800518a <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0204 	bic.w	r2, r2, #4
 8005162:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005168:	4a18      	ldr	r2, [pc, #96]	@ (80051cc <HAL_OSPI_IRQHandler+0x280>)
 800516a:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005170:	4618      	mov	r0, r3
 8005172:	f7fd f9e7 	bl	8002544 <HAL_DMA_Abort_IT>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d021      	beq.n	80051c0 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f924 	bl	80053d0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005188:	e01a      	b.n	80051c0 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f91d 	bl	80053d0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005196:	e013      	b.n	80051c0 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00f      	beq.n	80051c2 <HAL_OSPI_IRQHandler+0x276>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2210      	movs	r2, #16
 80051b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f951 	bl	800545c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80051ba:	e002      	b.n	80051c2 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80051bc:	bf00      	nop
 80051be:	e000      	b.n	80051c2 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80051c0:	bf00      	nop
}
 80051c2:	bf00      	nop
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	08005f65 	.word	0x08005f65

080051d0 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	@ 0x28
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80051dc:	f7fc fe7c 	bl	8001ed8 <HAL_GetTick>
 80051e0:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e6:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ec:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d104      	bne.n	80051fe <HAL_OSPI_Command+0x2e>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051fc:	d115      	bne.n	800522a <HAL_OSPI_Command+0x5a>
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b14      	cmp	r3, #20
 8005202:	d107      	bne.n	8005214 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d00e      	beq.n	800522a <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d00a      	beq.n	800522a <HAL_OSPI_Command+0x5a>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b24      	cmp	r3, #36	@ 0x24
 8005218:	d15b      	bne.n	80052d2 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d003      	beq.n	800522a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8005226:	2b03      	cmp	r3, #3
 8005228:	d153      	bne.n	80052d2 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2200      	movs	r2, #0
 8005232:	2120      	movs	r1, #32
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 fed1 	bl	8005fdc <OSPI_WaitFlagStateUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800523e:	7ffb      	ldrb	r3, [r7, #31]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d14c      	bne.n	80052de <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 ff05 	bl	800605c <OSPI_ConfigCmd>
 8005252:	4603      	mov	r3, r0
 8005254:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8005256:	7ffb      	ldrb	r3, [r7, #31]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d140      	bne.n	80052de <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10e      	bne.n	8005282 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2201      	movs	r2, #1
 800526c:	2102      	movs	r1, #2
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 feb4 	bl	8005fdc <OSPI_WaitFlagStateUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2202      	movs	r2, #2
 800527e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8005280:	e02d      	b.n	80052de <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d103      	bne.n	8005292 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2204      	movs	r2, #4
 800528e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8005290:	e025      	b.n	80052de <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d10b      	bne.n	80052b2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800529e:	2b24      	cmp	r3, #36	@ 0x24
 80052a0:	d103      	bne.n	80052aa <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2204      	movs	r2, #4
 80052a6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80052a8:	e019      	b.n	80052de <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2214      	movs	r2, #20
 80052ae:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80052b0:	e015      	b.n	80052de <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d111      	bne.n	80052de <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052be:	2b14      	cmp	r3, #20
 80052c0:	d103      	bne.n	80052ca <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2204      	movs	r2, #4
 80052c6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80052c8:	e009      	b.n	80052de <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2224      	movs	r2, #36	@ 0x24
 80052ce:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80052d0:	e005      	b.n	80052de <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2210      	movs	r2, #16
 80052da:	655a      	str	r2, [r3, #84]	@ 0x54
 80052dc:	e000      	b.n	80052e0 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 80052de:	bf00      	nop
  }

  /* Return function status */
  return status;
 80052e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3720      	adds	r7, #32
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b08a      	sub	sp, #40	@ 0x28
 80052ee:	af02      	add	r7, sp, #8
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80052f6:	f7fc fdef 	bl	8001ed8 <HAL_GetTick>
 80052fa:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3350      	adds	r3, #80	@ 0x50
 8005302:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d105      	bne.n	8005316 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2208      	movs	r2, #8
 8005312:	655a      	str	r2, [r3, #84]	@ 0x54
 8005314:	e057      	b.n	80053c6 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800531a:	2b04      	cmp	r3, #4
 800531c:	d14e      	bne.n	80053bc <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005346:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2201      	movs	r2, #1
 8005350:	2104      	movs	r1, #4
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 fe42 	bl	8005fdc <OSPI_WaitFlagStateUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800535c:	7ffb      	ldrb	r3, [r7, #31]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d113      	bne.n	800538a <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	781a      	ldrb	r2, [r3, #0]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537a:	1e5a      	subs	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1df      	bne.n	8005348 <HAL_OSPI_Transmit+0x5e>
 8005388:	e000      	b.n	800538c <HAL_OSPI_Transmit+0xa2>
          break;
 800538a:	bf00      	nop

      if (status == HAL_OK)
 800538c:	7ffb      	ldrb	r3, [r7, #31]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d119      	bne.n	80053c6 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2201      	movs	r2, #1
 800539a:	2102      	movs	r1, #2
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fe1d 	bl	8005fdc <OSPI_WaitFlagStateUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80053a6:	7ffb      	ldrb	r3, [r7, #31]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10c      	bne.n	80053c6 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2202      	movs	r2, #2
 80053b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2202      	movs	r2, #2
 80053b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80053ba:	e004      	b.n	80053c6 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2210      	movs	r2, #16
 80053c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 80053c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3720      	adds	r7, #32
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af02      	add	r7, sp, #8
 8005476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800547c:	f7fc fd2c 	bl	8001ed8 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005486:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d104      	bne.n	800549c <HAL_OSPI_Abort+0x2c>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d052      	beq.n	8005542 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d014      	beq.n	80054d4 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0204 	bic.w	r2, r2, #4
 80054b8:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fc ffc4 	bl	800244c <HAL_DMA_Abort>
 80054c4:	4603      	mov	r3, r0
 80054c6:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2204      	movs	r2, #4
 80054d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d02b      	beq.n	800553a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0202 	orr.w	r2, r2, #2
 80054f0:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2201      	movs	r2, #1
 80054fc:	2102      	movs	r1, #2
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fd6c 	bl	8005fdc <OSPI_WaitFlagStateUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d11f      	bne.n	800554e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2202      	movs	r2, #2
 8005514:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2200      	movs	r2, #0
 8005520:	2120      	movs	r1, #32
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fd5a 	bl	8005fdc <OSPI_WaitFlagStateUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800552c:	7dfb      	ldrb	r3, [r7, #23]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10d      	bne.n	800554e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005538:	e009      	b.n	800554e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005540:	e005      	b.n	800554e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2210      	movs	r2, #16
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54
 800554c:	e000      	b.n	8005550 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800554e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005550:	7dfb      	ldrb	r3, [r7, #23]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b094      	sub	sp, #80	@ 0x50
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a9d      	ldr	r2, [pc, #628]	@ (800580c <HAL_OSPIM_Config+0x294>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d105      	bne.n	80055a6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80055a4:	e004      	b.n	80055b0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80055a6:	2301      	movs	r3, #1
 80055a8:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80055b6:	e01d      	b.n	80055f4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80055b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80055bc:	3301      	adds	r3, #1
 80055be:	b2d8      	uxtb	r0, r3
 80055c0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80055c4:	f107 0114 	add.w	r1, r7, #20
 80055c8:	4613      	mov	r3, r2
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4413      	add	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	440b      	add	r3, r1
 80055d2:	4619      	mov	r1, r3
 80055d4:	f000 febc 	bl	8006350 <OSPIM_GetConfig>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2208      	movs	r2, #8
 80055e8:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80055ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80055ee:	3301      	adds	r3, #1
 80055f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80055f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d9dd      	bls.n	80055b8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80055fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005600:	2b00      	cmp	r3, #0
 8005602:	f040 84a2 	bne.w	8005f4a <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005606:	4b81      	ldr	r3, [pc, #516]	@ (800580c <HAL_OSPIM_Config+0x294>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00b      	beq.n	800562a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005612:	4b7e      	ldr	r3, [pc, #504]	@ (800580c <HAL_OSPIM_Config+0x294>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a7d      	ldr	r2, [pc, #500]	@ (800580c <HAL_OSPIM_Config+0x294>)
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800561e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800562a:	4b79      	ldr	r3, [pc, #484]	@ (8005810 <HAL_OSPIM_Config+0x298>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00b      	beq.n	800564e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005636:	4b76      	ldr	r3, [pc, #472]	@ (8005810 <HAL_OSPIM_Config+0x298>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a75      	ldr	r2, [pc, #468]	@ (8005810 <HAL_OSPIM_Config+0x298>)
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005642:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005646:	f043 0302 	orr.w	r3, r3, #2
 800564a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800564e:	4971      	ldr	r1, [pc, #452]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 8005650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005652:	4613      	mov	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	3350      	adds	r3, #80	@ 0x50
 800565c:	443b      	add	r3, r7
 800565e:	3b34      	subs	r3, #52	@ 0x34
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3b01      	subs	r3, #1
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	6859      	ldr	r1, [r3, #4]
 800566a:	486a      	ldr	r0, [pc, #424]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 800566c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800566e:	4613      	mov	r3, r2
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4413      	add	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	3350      	adds	r3, #80	@ 0x50
 8005678:	443b      	add	r3, r7
 800567a:	3b34      	subs	r3, #52	@ 0x34
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3b01      	subs	r3, #1
 8005680:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4403      	add	r3, r0
 8005688:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800568a:	4b62      	ldr	r3, [pc, #392]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 80c0 	beq.w	8005818 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005698:	4b5e      	ldr	r3, [pc, #376]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a5d      	ldr	r2, [pc, #372]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80056a4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	f040 8162 	bne.w	8005972 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80056ae:	4959      	ldr	r1, [pc, #356]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 80056b0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80056b4:	4613      	mov	r3, r2
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	4413      	add	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	3350      	adds	r3, #80	@ 0x50
 80056be:	443b      	add	r3, r7
 80056c0:	3b3c      	subs	r3, #60	@ 0x3c
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	6859      	ldr	r1, [r3, #4]
 80056cc:	4851      	ldr	r0, [pc, #324]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 80056ce:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80056d2:	4613      	mov	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	4413      	add	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	3350      	adds	r3, #80	@ 0x50
 80056dc:	443b      	add	r3, r7
 80056de:	3b3c      	subs	r3, #60	@ 0x3c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f041 0202 	orr.w	r2, r1, #2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4403      	add	r3, r0
 80056ec:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80056ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80056f2:	4613      	mov	r3, r2
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4413      	add	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	3350      	adds	r3, #80	@ 0x50
 80056fc:	443b      	add	r3, r7
 80056fe:	3b38      	subs	r3, #56	@ 0x38
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01f      	beq.n	8005746 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8005706:	4943      	ldr	r1, [pc, #268]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 8005708:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800570c:	4613      	mov	r3, r2
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	4413      	add	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	3350      	adds	r3, #80	@ 0x50
 8005716:	443b      	add	r3, r7
 8005718:	3b38      	subs	r3, #56	@ 0x38
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3b01      	subs	r3, #1
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	6859      	ldr	r1, [r3, #4]
 8005724:	483b      	ldr	r0, [pc, #236]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 8005726:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800572a:	4613      	mov	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4413      	add	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	3350      	adds	r3, #80	@ 0x50
 8005734:	443b      	add	r3, r7
 8005736:	3b38      	subs	r3, #56	@ 0x38
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3b01      	subs	r3, #1
 800573c:	f041 0220 	orr.w	r2, r1, #32
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4403      	add	r3, r0
 8005744:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005746:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800574a:	4613      	mov	r3, r2
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4413      	add	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	3350      	adds	r3, #80	@ 0x50
 8005754:	443b      	add	r3, r7
 8005756:	3b30      	subs	r3, #48	@ 0x30
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d023      	beq.n	80057a6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800575e:	492d      	ldr	r1, [pc, #180]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 8005760:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005764:	4613      	mov	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4413      	add	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	3350      	adds	r3, #80	@ 0x50
 800576e:	443b      	add	r3, r7
 8005770:	3b30      	subs	r3, #48	@ 0x30
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3b01      	subs	r3, #1
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	6859      	ldr	r1, [r3, #4]
 8005780:	4824      	ldr	r0, [pc, #144]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 8005782:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005786:	4613      	mov	r3, r2
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	4413      	add	r3, r2
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	3350      	adds	r3, #80	@ 0x50
 8005790:	443b      	add	r3, r7
 8005792:	3b30      	subs	r3, #48	@ 0x30
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3b01      	subs	r3, #1
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4403      	add	r3, r0
 80057a4:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80057a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057aa:	4613      	mov	r3, r2
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4413      	add	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	3350      	adds	r3, #80	@ 0x50
 80057b4:	443b      	add	r3, r7
 80057b6:	3b2c      	subs	r3, #44	@ 0x2c
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 80d9 	beq.w	8005972 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80057c0:	4914      	ldr	r1, [pc, #80]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 80057c2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	3350      	adds	r3, #80	@ 0x50
 80057d0:	443b      	add	r3, r7
 80057d2:	3b2c      	subs	r3, #44	@ 0x2c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	6859      	ldr	r1, [r3, #4]
 80057e2:	480c      	ldr	r0, [pc, #48]	@ (8005814 <HAL_OSPIM_Config+0x29c>)
 80057e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057e8:	4613      	mov	r3, r2
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	4413      	add	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	3350      	adds	r3, #80	@ 0x50
 80057f2:	443b      	add	r3, r7
 80057f4:	3b2c      	subs	r3, #44	@ 0x2c
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4403      	add	r3, r0
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	e0b3      	b.n	8005972 <HAL_OSPIM_Config+0x3fa>
 800580a:	bf00      	nop
 800580c:	420d1400 	.word	0x420d1400
 8005810:	420d2400 	.word	0x420d2400
 8005814:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8005818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	3350      	adds	r3, #80	@ 0x50
 8005824:	443b      	add	r3, r7
 8005826:	3b3c      	subs	r3, #60	@ 0x3c
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 80a1 	beq.w	8005972 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005830:	4995      	ldr	r1, [pc, #596]	@ (8005a88 <HAL_OSPIM_Config+0x510>)
 8005832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005834:	4613      	mov	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4413      	add	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	3350      	adds	r3, #80	@ 0x50
 800583e:	443b      	add	r3, r7
 8005840:	3b3c      	subs	r3, #60	@ 0x3c
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3b01      	subs	r3, #1
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	6859      	ldr	r1, [r3, #4]
 800584c:	488e      	ldr	r0, [pc, #568]	@ (8005a88 <HAL_OSPIM_Config+0x510>)
 800584e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005850:	4613      	mov	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4413      	add	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	3350      	adds	r3, #80	@ 0x50
 800585a:	443b      	add	r3, r7
 800585c:	3b3c      	subs	r3, #60	@ 0x3c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3b01      	subs	r3, #1
 8005862:	f021 0201 	bic.w	r2, r1, #1
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4403      	add	r3, r0
 800586a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800586c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800586e:	4613      	mov	r3, r2
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	4413      	add	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	3350      	adds	r3, #80	@ 0x50
 8005878:	443b      	add	r3, r7
 800587a:	3b38      	subs	r3, #56	@ 0x38
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01d      	beq.n	80058be <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005882:	4981      	ldr	r1, [pc, #516]	@ (8005a88 <HAL_OSPIM_Config+0x510>)
 8005884:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005886:	4613      	mov	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4413      	add	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	3350      	adds	r3, #80	@ 0x50
 8005890:	443b      	add	r3, r7
 8005892:	3b38      	subs	r3, #56	@ 0x38
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3b01      	subs	r3, #1
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	6859      	ldr	r1, [r3, #4]
 800589e:	487a      	ldr	r0, [pc, #488]	@ (8005a88 <HAL_OSPIM_Config+0x510>)
 80058a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058a2:	4613      	mov	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	3350      	adds	r3, #80	@ 0x50
 80058ac:	443b      	add	r3, r7
 80058ae:	3b38      	subs	r3, #56	@ 0x38
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	f021 0210 	bic.w	r2, r1, #16
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4403      	add	r3, r0
 80058bc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80058be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058c0:	4613      	mov	r3, r2
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	4413      	add	r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	3350      	adds	r3, #80	@ 0x50
 80058ca:	443b      	add	r3, r7
 80058cc:	3b30      	subs	r3, #48	@ 0x30
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d021      	beq.n	8005918 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80058d4:	496c      	ldr	r1, [pc, #432]	@ (8005a88 <HAL_OSPIM_Config+0x510>)
 80058d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058d8:	4613      	mov	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4413      	add	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	3350      	adds	r3, #80	@ 0x50
 80058e2:	443b      	add	r3, r7
 80058e4:	3b30      	subs	r3, #48	@ 0x30
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	6859      	ldr	r1, [r3, #4]
 80058f4:	4864      	ldr	r0, [pc, #400]	@ (8005a88 <HAL_OSPIM_Config+0x510>)
 80058f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f8:	4613      	mov	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	4413      	add	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	3350      	adds	r3, #80	@ 0x50
 8005902:	443b      	add	r3, r7
 8005904:	3b30      	subs	r3, #48	@ 0x30
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3b01      	subs	r3, #1
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4403      	add	r3, r0
 8005916:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005918:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800591a:	4613      	mov	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4413      	add	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	3350      	adds	r3, #80	@ 0x50
 8005924:	443b      	add	r3, r7
 8005926:	3b2c      	subs	r3, #44	@ 0x2c
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d021      	beq.n	8005972 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800592e:	4956      	ldr	r1, [pc, #344]	@ (8005a88 <HAL_OSPIM_Config+0x510>)
 8005930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005932:	4613      	mov	r3, r2
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	4413      	add	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	3350      	adds	r3, #80	@ 0x50
 800593c:	443b      	add	r3, r7
 800593e:	3b2c      	subs	r3, #44	@ 0x2c
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3b01      	subs	r3, #1
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	6859      	ldr	r1, [r3, #4]
 800594e:	484e      	ldr	r0, [pc, #312]	@ (8005a88 <HAL_OSPIM_Config+0x510>)
 8005950:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005952:	4613      	mov	r3, r2
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	4413      	add	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	3350      	adds	r3, #80	@ 0x50
 800595c:	443b      	add	r3, r7
 800595e:	3b2c      	subs	r3, #44	@ 0x2c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3b01      	subs	r3, #1
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4403      	add	r3, r0
 8005970:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6819      	ldr	r1, [r3, #0]
 8005976:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800597a:	4613      	mov	r3, r2
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	4413      	add	r3, r2
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	3350      	adds	r3, #80	@ 0x50
 8005984:	443b      	add	r3, r7
 8005986:	3b3c      	subs	r3, #60	@ 0x3c
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4299      	cmp	r1, r3
 800598c:	d03c      	beq.n	8005a08 <HAL_OSPIM_Config+0x490>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6899      	ldr	r1, [r3, #8]
 8005992:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005996:	4613      	mov	r3, r2
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	4413      	add	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	3350      	adds	r3, #80	@ 0x50
 80059a0:	443b      	add	r3, r7
 80059a2:	3b34      	subs	r3, #52	@ 0x34
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4299      	cmp	r1, r3
 80059a8:	d02e      	beq.n	8005a08 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6859      	ldr	r1, [r3, #4]
 80059ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059b2:	4613      	mov	r3, r2
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	4413      	add	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	3350      	adds	r3, #80	@ 0x50
 80059bc:	443b      	add	r3, r7
 80059be:	3b38      	subs	r3, #56	@ 0x38
 80059c0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80059c2:	4299      	cmp	r1, r3
 80059c4:	d103      	bne.n	80059ce <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d11c      	bne.n	8005a08 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	68d9      	ldr	r1, [r3, #12]
 80059d2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	3350      	adds	r3, #80	@ 0x50
 80059e0:	443b      	add	r3, r7
 80059e2:	3b30      	subs	r3, #48	@ 0x30
 80059e4:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80059e6:	4299      	cmp	r1, r3
 80059e8:	d00e      	beq.n	8005a08 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	6919      	ldr	r1, [r3, #16]
 80059ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059f2:	4613      	mov	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	3350      	adds	r3, #80	@ 0x50
 80059fc:	443b      	add	r3, r7
 80059fe:	3b2c      	subs	r3, #44	@ 0x2c
 8005a00:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005a02:	4299      	cmp	r1, r3
 8005a04:	f040 810e 	bne.w	8005c24 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	6819      	ldr	r1, [r3, #0]
 8005a0c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a10:	4613      	mov	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4413      	add	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	3350      	adds	r3, #80	@ 0x50
 8005a1a:	443b      	add	r3, r7
 8005a1c:	3b3c      	subs	r3, #60	@ 0x3c
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4299      	cmp	r1, r3
 8005a22:	d133      	bne.n	8005a8c <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6859      	ldr	r1, [r3, #4]
 8005a28:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	4413      	add	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	3350      	adds	r3, #80	@ 0x50
 8005a36:	443b      	add	r3, r7
 8005a38:	3b38      	subs	r3, #56	@ 0x38
 8005a3a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005a3c:	4299      	cmp	r1, r3
 8005a3e:	d125      	bne.n	8005a8c <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	68d9      	ldr	r1, [r3, #12]
 8005a44:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a48:	4613      	mov	r3, r2
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	4413      	add	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	3350      	adds	r3, #80	@ 0x50
 8005a52:	443b      	add	r3, r7
 8005a54:	3b30      	subs	r3, #48	@ 0x30
 8005a56:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005a58:	4299      	cmp	r1, r3
 8005a5a:	d117      	bne.n	8005a8c <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6919      	ldr	r1, [r3, #16]
 8005a60:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a64:	4613      	mov	r3, r2
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	4413      	add	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	3350      	adds	r3, #80	@ 0x50
 8005a6e:	443b      	add	r3, r7
 8005a70:	3b2c      	subs	r3, #44	@ 0x2c
 8005a72:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005a74:	4299      	cmp	r1, r3
 8005a76:	d109      	bne.n	8005a8c <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005a78:	4b03      	ldr	r3, [pc, #12]	@ (8005a88 <HAL_OSPIM_Config+0x510>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a02      	ldr	r2, [pc, #8]	@ (8005a88 <HAL_OSPIM_Config+0x510>)
 8005a7e:	f043 0301 	orr.w	r3, r3, #1
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e0ce      	b.n	8005c24 <HAL_OSPIM_Config+0x6ac>
 8005a86:	bf00      	nop
 8005a88:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005a8c:	49a4      	ldr	r1, [pc, #656]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005a8e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	3350      	adds	r3, #80	@ 0x50
 8005a9c:	443b      	add	r3, r7
 8005a9e:	3b3c      	subs	r3, #60	@ 0x3c
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	6859      	ldr	r1, [r3, #4]
 8005aaa:	489d      	ldr	r0, [pc, #628]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005aac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	3350      	adds	r3, #80	@ 0x50
 8005aba:	443b      	add	r3, r7
 8005abc:	3b3c      	subs	r3, #60	@ 0x3c
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	f021 0201 	bic.w	r2, r1, #1
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4403      	add	r3, r0
 8005aca:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005acc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	4413      	add	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	3350      	adds	r3, #80	@ 0x50
 8005ada:	443b      	add	r3, r7
 8005adc:	3b38      	subs	r3, #56	@ 0x38
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01f      	beq.n	8005b24 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005ae4:	498e      	ldr	r1, [pc, #568]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005ae6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	3350      	adds	r3, #80	@ 0x50
 8005af4:	443b      	add	r3, r7
 8005af6:	3b38      	subs	r3, #56	@ 0x38
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	6859      	ldr	r1, [r3, #4]
 8005b02:	4887      	ldr	r0, [pc, #540]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005b04:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b08:	4613      	mov	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4413      	add	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	3350      	adds	r3, #80	@ 0x50
 8005b12:	443b      	add	r3, r7
 8005b14:	3b38      	subs	r3, #56	@ 0x38
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	f021 0210 	bic.w	r2, r1, #16
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4403      	add	r3, r0
 8005b22:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005b24:	497e      	ldr	r1, [pc, #504]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005b26:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4413      	add	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	3350      	adds	r3, #80	@ 0x50
 8005b34:	443b      	add	r3, r7
 8005b36:	3b34      	subs	r3, #52	@ 0x34
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	6859      	ldr	r1, [r3, #4]
 8005b42:	4877      	ldr	r0, [pc, #476]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005b44:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b48:	4613      	mov	r3, r2
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	3350      	adds	r3, #80	@ 0x50
 8005b52:	443b      	add	r3, r7
 8005b54:	3b34      	subs	r3, #52	@ 0x34
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4403      	add	r3, r0
 8005b62:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005b64:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b68:	4613      	mov	r3, r2
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	4413      	add	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	3350      	adds	r3, #80	@ 0x50
 8005b72:	443b      	add	r3, r7
 8005b74:	3b30      	subs	r3, #48	@ 0x30
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d023      	beq.n	8005bc4 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005b7c:	4968      	ldr	r1, [pc, #416]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005b7e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b82:	4613      	mov	r3, r2
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	3350      	adds	r3, #80	@ 0x50
 8005b8c:	443b      	add	r3, r7
 8005b8e:	3b30      	subs	r3, #48	@ 0x30
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	4860      	ldr	r0, [pc, #384]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005ba0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4413      	add	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	3350      	adds	r3, #80	@ 0x50
 8005bae:	443b      	add	r3, r7
 8005bb0:	3b30      	subs	r3, #48	@ 0x30
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4403      	add	r3, r0
 8005bc2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005bc4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005bc8:	4613      	mov	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	4413      	add	r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	3350      	adds	r3, #80	@ 0x50
 8005bd2:	443b      	add	r3, r7
 8005bd4:	3b2c      	subs	r3, #44	@ 0x2c
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d023      	beq.n	8005c24 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005bdc:	4950      	ldr	r1, [pc, #320]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005bde:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005be2:	4613      	mov	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4413      	add	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	3350      	adds	r3, #80	@ 0x50
 8005bec:	443b      	add	r3, r7
 8005bee:	3b2c      	subs	r3, #44	@ 0x2c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	6859      	ldr	r1, [r3, #4]
 8005bfe:	4848      	ldr	r0, [pc, #288]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005c00:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005c04:	4613      	mov	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	3350      	adds	r3, #80	@ 0x50
 8005c0e:	443b      	add	r3, r7
 8005c10:	3b2c      	subs	r3, #44	@ 0x2c
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4403      	add	r3, r0
 8005c22:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005c24:	4a3e      	ldr	r2, [pc, #248]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c38:	025b      	lsls	r3, r3, #9
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	4938      	ldr	r1, [pc, #224]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d018      	beq.n	8005c88 <HAL_OSPIM_Config+0x710>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5e:	d813      	bhi.n	8005c88 <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	1e5a      	subs	r2, r3, #1
 8005c66:	4b2e      	ldr	r3, [pc, #184]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d90a      	bls.n	8005c88 <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8005c72:	4b2b      	ldr	r3, [pc, #172]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	041b      	lsls	r3, r3, #16
 8005c82:	4927      	ldr	r1, [pc, #156]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005c88:	4b25      	ldr	r3, [pc, #148]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 809a 	beq.w	8005dca <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8005c96:	4a22      	ldr	r2, [pc, #136]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f023 0203 	bic.w	r2, r3, #3
 8005ca8:	491d      	ldr	r1, [pc, #116]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	f042 0201 	orr.w	r2, r2, #1
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d011      	beq.n	8005ce6 <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8005cc2:	4a17      	ldr	r2, [pc, #92]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005cd4:	4912      	ldr	r1, [pc, #72]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	f042 0210 	orr.w	r2, r2, #16
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005d08:	4905      	ldr	r1, [pc, #20]	@ (8005d20 <HAL_OSPIM_Config+0x7a8>)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	e01b      	b.n	8005d58 <HAL_OSPIM_Config+0x7e0>
 8005d20:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d015      	beq.n	8005d58 <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d2c:	4a8a      	ldr	r2, [pc, #552]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005d42:	4985      	ldr	r1, [pc, #532]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d016      	beq.n	8005d92 <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d64:	4a7c      	ldr	r2, [pc, #496]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005d7a:	4977      	ldr	r1, [pc, #476]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	605a      	str	r2, [r3, #4]
 8005d90:	e0c3      	b.n	8005f1a <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80bf 	beq.w	8005f1a <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d9c:	4a6e      	ldr	r2, [pc, #440]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005db2:	4969      	ldr	r1, [pc, #420]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	605a      	str	r2, [r3, #4]
 8005dc8:	e0a7      	b.n	8005f1a <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005dca:	4a63      	ldr	r2, [pc, #396]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f023 0203 	bic.w	r2, r3, #3
 8005ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	431a      	orrs	r2, r3
 8005de2:	495d      	ldr	r1, [pc, #372]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d014      	beq.n	8005e26 <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005dfc:	4a56      	ldr	r2, [pc, #344]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e10:	015b      	lsls	r3, r3, #5
 8005e12:	431a      	orrs	r2, r3
 8005e14:	4950      	ldr	r1, [pc, #320]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	f042 0210 	orr.w	r2, r2, #16
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d019      	beq.n	8005e66 <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005e32:	4a49      	ldr	r2, [pc, #292]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005e48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e4a:	049b      	lsls	r3, r3, #18
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	4942      	ldr	r1, [pc, #264]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	440b      	add	r3, r1
 8005e62:	605a      	str	r2, [r3, #4]
 8005e64:	e01c      	b.n	8005ea0 <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d018      	beq.n	8005ea0 <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005e6e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e86:	069b      	lsls	r3, r3, #26
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	4933      	ldr	r1, [pc, #204]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d019      	beq.n	8005ee0 <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005eac:	4a2a      	ldr	r2, [pc, #168]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ec4:	049b      	lsls	r3, r3, #18
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	4923      	ldr	r1, [pc, #140]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	e01c      	b.n	8005f1a <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d018      	beq.n	8005f1a <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f00:	069b      	lsls	r3, r3, #26
 8005f02:	431a      	orrs	r2, r3
 8005f04:	4914      	ldr	r1, [pc, #80]	@ (8005f58 <HAL_OSPIM_Config+0x9e0>)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005f1a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <HAL_OSPIM_Config+0x9e4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f5c <HAL_OSPIM_Config+0x9e4>)
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005f32:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005f3e:	4b08      	ldr	r3, [pc, #32]	@ (8005f60 <HAL_OSPIM_Config+0x9e8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a07      	ldr	r2, [pc, #28]	@ (8005f60 <HAL_OSPIM_Config+0x9e8>)
 8005f44:	f043 0301 	orr.w	r3, r3, #1
 8005f48:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005f4a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3750      	adds	r7, #80	@ 0x50
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	420c4000 	.word	0x420c4000
 8005f5c:	420d1400 	.word	0x420d1400
 8005f60:	420d2400 	.word	0x420d2400

08005f64 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f70:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f80:	d122      	bne.n	8005fc8 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f003 0320 	and.w	r3, r3, #32
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d014      	beq.n	8005fba <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2202      	movs	r2, #2
 8005f96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005fa6:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0202 	orr.w	r2, r2, #2
 8005fb6:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8005fb8:	e00c      	b.n	8005fd4 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7ff fa0f 	bl	80053e4 <HAL_OSPI_AbortCpltCallback>
}
 8005fc6:	e005      	b.n	8005fd4 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff f9fe 	bl	80053d0 <HAL_OSPI_ErrorCallback>
}
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005fec:	e022      	b.n	8006034 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d01e      	beq.n	8006034 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff6:	f7fb ff6f 	bl	8001ed8 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	429a      	cmp	r2, r3
 8006004:	d302      	bcc.n	800600c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d113      	bne.n	8006034 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	401a      	ands	r2, r3
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	429a      	cmp	r2, r3
 800601a:	d00b      	beq.n	8006034 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006022:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006028:	f043 0201 	orr.w	r2, r3, #1
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e00e      	b.n	8006052 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6a1a      	ldr	r2, [r3, #32]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	4013      	ands	r3, r2
 800603e:	2b00      	cmp	r3, #0
 8006040:	bf14      	ite	ne
 8006042:	2301      	movne	r3, #1
 8006044:	2300      	moveq	r3, #0
 8006046:	b2db      	uxtb	r3, r3
 8006048:	461a      	mov	r2, r3
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	429a      	cmp	r2, r3
 800604e:	d1ce      	bne.n	8005fee <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800605c:	b480      	push	{r7}
 800605e:	b089      	sub	sp, #36	@ 0x24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006078:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d114      	bne.n	80060ca <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80060a8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80060b2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80060bc:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e02c      	b.n	8006124 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d114      	bne.n	80060fc <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80060da:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80060e4:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060ee:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	e013      	b.n	8006124 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006104:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800610e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006118:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006122:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800612c:	431a      	orrs	r2, r3
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d012      	beq.n	8006160 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006152:	4319      	orrs	r1, r3
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006158:	430b      	orrs	r3, r1
 800615a:	431a      	orrs	r2, r3
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f023 021f 	bic.w	r2, r3, #31
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616c:	431a      	orrs	r2, r3
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d105      	bne.n	800618e <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3a01      	subs	r2, #1
 800618c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8099 	beq.w	80062ca <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d055      	beq.n	800624c <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01e      	beq.n	80061e6 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	4b67      	ldr	r3, [pc, #412]	@ (800634c <OSPI_ConfigCmd+0x2f0>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	68d1      	ldr	r1, [r2, #12]
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	6952      	ldr	r2, [r2, #20]
 80061b8:	4311      	orrs	r1, r2
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	6912      	ldr	r2, [r2, #16]
 80061be:	4311      	orrs	r1, r2
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	69d2      	ldr	r2, [r2, #28]
 80061c4:	4311      	orrs	r1, r2
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061ca:	4311      	orrs	r1, r2
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	6a12      	ldr	r2, [r2, #32]
 80061d0:	4311      	orrs	r1, r2
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80061d6:	4311      	orrs	r1, r2
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80061dc:	430a      	orrs	r2, r1
 80061de:	431a      	orrs	r2, r3
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e028      	b.n	8006238 <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80061ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	68d1      	ldr	r1, [r2, #12]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	6952      	ldr	r2, [r2, #20]
 80061fa:	4311      	orrs	r1, r2
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	6912      	ldr	r2, [r2, #16]
 8006200:	4311      	orrs	r1, r2
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	69d2      	ldr	r2, [r2, #28]
 8006206:	4311      	orrs	r1, r2
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800620c:	4311      	orrs	r1, r2
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	6a12      	ldr	r2, [r2, #32]
 8006212:	430a      	orrs	r2, r1
 8006214:	431a      	orrs	r2, r3
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006222:	d109      	bne.n	8006238 <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006228:	2b08      	cmp	r3, #8
 800622a:	d105      	bne.n	8006238 <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	6992      	ldr	r2, [r2, #24]
 8006248:	649a      	str	r2, [r3, #72]	@ 0x48
 800624a:	e078      	b.n	800633e <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006250:	2b00      	cmp	r3, #0
 8006252:	d017      	beq.n	8006284 <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800625c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	68d1      	ldr	r1, [r2, #12]
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	6952      	ldr	r2, [r2, #20]
 8006268:	4311      	orrs	r1, r2
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	6912      	ldr	r2, [r2, #16]
 800626e:	4311      	orrs	r1, r2
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006274:	4311      	orrs	r1, r2
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800627a:	430a      	orrs	r2, r1
 800627c:	431a      	orrs	r2, r3
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	e01d      	b.n	80062c0 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68d9      	ldr	r1, [r3, #12]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	4319      	orrs	r1, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	430b      	orrs	r3, r1
 800629c:	431a      	orrs	r2, r3
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062aa:	d109      	bne.n	80062c0 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d105      	bne.n	80062c0 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	e039      	b.n	800633e <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d030      	beq.n	8006334 <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d017      	beq.n	800630a <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80062e2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	69d1      	ldr	r1, [r2, #28]
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062ee:	4311      	orrs	r1, r2
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	6a12      	ldr	r2, [r2, #32]
 80062f4:	4311      	orrs	r1, r2
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80062fa:	4311      	orrs	r1, r2
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006300:	430a      	orrs	r2, r1
 8006302:	431a      	orrs	r2, r3
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e00e      	b.n	8006328 <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	69d9      	ldr	r1, [r3, #28]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	4319      	orrs	r1, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	430b      	orrs	r3, r1
 8006322:	431a      	orrs	r2, r3
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	6992      	ldr	r2, [r2, #24]
 8006330:	649a      	str	r2, [r3, #72]	@ 0x48
 8006332:	e004      	b.n	800633e <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2208      	movs	r2, #8
 800633c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800633e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3724      	adds	r7, #36	@ 0x24
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	f0ffc0c0 	.word	0xf0ffc0c0

08006350 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	6039      	str	r1, [r7, #0]
 800635a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <OSPIM_GetConfig+0x26>
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	2b02      	cmp	r3, #2
 800636e:	d802      	bhi.n	8006376 <OSPIM_GetConfig+0x26>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	75fb      	strb	r3, [r7, #23]
 800637a:	e098      	b.n	80064ae <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2200      	movs	r2, #0
 8006386:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2200      	movs	r2, #0
 800638c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2200      	movs	r2, #0
 8006392:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2200      	movs	r2, #0
 8006398:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	2b02      	cmp	r3, #2
 800639e:	d10b      	bne.n	80063b8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80063a0:	4b46      	ldr	r3, [pc, #280]	@ (80064bc <OSPIM_GetConfig+0x16c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80063ac:	4b44      	ldr	r3, [pc, #272]	@ (80064c0 <OSPIM_GetConfig+0x170>)
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	e002      	b.n	80063b8 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80063b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063b6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	e074      	b.n	80064a8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80063be:	4a3f      	ldr	r2, [pc, #252]	@ (80064bc <OSPIM_GetConfig+0x16c>)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4053      	eors	r3, r2
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d103      	bne.n	80063ea <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f003 0310 	and.w	r3, r3, #16
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4053      	eors	r3, r2
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d103      	bne.n	800640a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4053      	eors	r3, r2
 800641a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800641e:	2b00      	cmp	r3, #0
 8006420:	d103      	bne.n	800642a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d018      	beq.n	8006466 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	4053      	eors	r3, r2
 800643a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d111      	bne.n	8006466 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d106      	bne.n	800645a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	60da      	str	r2, [r3, #12]
 8006458:	e005      	b.n	8006466 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3301      	adds	r3, #1
 800645e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d018      	beq.n	80064a2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	4053      	eors	r3, r2
 8006476:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d111      	bne.n	80064a2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	611a      	str	r2, [r3, #16]
 8006494:	e005      	b.n	80064a2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3301      	adds	r3, #1
 800649a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3301      	adds	r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d987      	bls.n	80063be <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	420c4000 	.word	0x420c4000
 80064c0:	04040222 	.word	0x04040222

080064c4 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0202 	orr.w	r2, r2, #2
 80064e0:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2208      	movs	r2, #8
 80064e6:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a15      	ldr	r2, [pc, #84]	@ (8006544 <HAL_OSPI_DLYB_SetConfig+0x80>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d109      	bne.n	8006506 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 80064f2:	4815      	ldr	r0, [pc, #84]	@ (8006548 <HAL_OSPI_DLYB_SetConfig+0x84>)
 80064f4:	f7fe fc5d 	bl	8004db2 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	4813      	ldr	r0, [pc, #76]	@ (8006548 <HAL_OSPI_DLYB_SetConfig+0x84>)
 80064fc:	f005 fa5c 	bl	800b9b8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]
 8006504:	e00d      	b.n	8006522 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a10      	ldr	r2, [pc, #64]	@ (800654c <HAL_OSPI_DLYB_SetConfig+0x88>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d108      	bne.n	8006522 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8006510:	480f      	ldr	r0, [pc, #60]	@ (8006550 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8006512:	f7fe fc4e 	bl	8004db2 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	480d      	ldr	r0, [pc, #52]	@ (8006550 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800651a:	f005 fa4d 	bl	800b9b8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fe ffa4 	bl	8005470 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0202 	bic.w	r2, r2, #2
 8006536:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	420d1400 	.word	0x420d1400
 8006548:	420cf000 	.word	0x420cf000
 800654c:	420d2400 	.word	0x420d2400
 8006550:	420cf400 	.word	0x420cf400

08006554 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800655c:	4b39      	ldr	r3, [pc, #228]	@ (8006644 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800655e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006560:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006564:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d10b      	bne.n	8006586 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006574:	d905      	bls.n	8006582 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006576:	4b33      	ldr	r3, [pc, #204]	@ (8006644 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	4a32      	ldr	r2, [pc, #200]	@ (8006644 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800657c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006580:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	e057      	b.n	8006636 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800658c:	d90a      	bls.n	80065a4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800658e:	4b2d      	ldr	r3, [pc, #180]	@ (8006644 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4313      	orrs	r3, r2
 800659a:	4a2a      	ldr	r2, [pc, #168]	@ (8006644 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800659c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065a0:	60d3      	str	r3, [r2, #12]
 80065a2:	e007      	b.n	80065b4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80065a4:	4b27      	ldr	r3, [pc, #156]	@ (8006644 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80065ac:	4925      	ldr	r1, [pc, #148]	@ (8006644 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80065b4:	4b24      	ldr	r3, [pc, #144]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a24      	ldr	r2, [pc, #144]	@ (800664c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	099b      	lsrs	r3, r3, #6
 80065c0:	2232      	movs	r2, #50	@ 0x32
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	4a21      	ldr	r2, [pc, #132]	@ (800664c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80065c8:	fba2 2303 	umull	r2, r3, r2, r3
 80065cc:	099b      	lsrs	r3, r3, #6
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80065d2:	e002      	b.n	80065da <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80065da:	4b1a      	ldr	r3, [pc, #104]	@ (8006644 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d102      	bne.n	80065ec <HAL_PWREx_ControlVoltageScaling+0x98>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f3      	bne.n	80065d4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01b      	beq.n	800662a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80065f2:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a15      	ldr	r2, [pc, #84]	@ (800664c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80065f8:	fba2 2303 	umull	r2, r3, r2, r3
 80065fc:	099b      	lsrs	r3, r3, #6
 80065fe:	2232      	movs	r2, #50	@ 0x32
 8006600:	fb02 f303 	mul.w	r3, r2, r3
 8006604:	4a11      	ldr	r2, [pc, #68]	@ (800664c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006606:	fba2 2303 	umull	r2, r3, r2, r3
 800660a:	099b      	lsrs	r3, r3, #6
 800660c:	3301      	adds	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006610:	e002      	b.n	8006618 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3b01      	subs	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006618:	4b0a      	ldr	r3, [pc, #40]	@ (8006644 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800661a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f3      	bne.n	8006612 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e000      	b.n	8006636 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	46020800 	.word	0x46020800
 8006648:	20000004 	.word	0x20000004
 800664c:	10624dd3 	.word	0x10624dd3

08006650 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006654:	4b04      	ldr	r3, [pc, #16]	@ (8006668 <HAL_PWREx_GetVoltageRange+0x18>)
 8006656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800665c:	4618      	mov	r0, r3
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	46020800 	.word	0x46020800

0800666c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08e      	sub	sp, #56	@ 0x38
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006674:	2300      	movs	r3, #0
 8006676:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	f000 bec8 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006686:	4b99      	ldr	r3, [pc, #612]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006690:	4b96      	ldr	r3, [pc, #600]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 816c 	beq.w	8006980 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <HAL_RCC_OscConfig+0x52>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	2b0c      	cmp	r3, #12
 80066b2:	f040 80de 	bne.w	8006872 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80066b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	f040 80da 	bne.w	8006872 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d102      	bne.n	80066cc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	f000 bea5 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066d0:	4b86      	ldr	r3, [pc, #536]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <HAL_RCC_OscConfig+0x7a>
 80066dc:	4b83      	ldr	r3, [pc, #524]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80066e4:	e005      	b.n	80066f2 <HAL_RCC_OscConfig+0x86>
 80066e6:	4b81      	ldr	r3, [pc, #516]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80066e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066ec:	041b      	lsls	r3, r3, #16
 80066ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d255      	bcs.n	80067a2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006700:	4618      	mov	r0, r3
 8006702:	f001 fa11 	bl	8007b28 <RCC_SetFlashLatencyFromMSIRange>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f000 be82 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006712:	4b76      	ldr	r3, [pc, #472]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	4a75      	ldr	r2, [pc, #468]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006718:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800671c:	6093      	str	r3, [r2, #8]
 800671e:	4b73      	ldr	r3, [pc, #460]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672a:	4970      	ldr	r1, [pc, #448]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 800672c:	4313      	orrs	r3, r2
 800672e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006734:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006738:	d309      	bcc.n	800674e <HAL_RCC_OscConfig+0xe2>
 800673a:	4b6c      	ldr	r3, [pc, #432]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f023 021f 	bic.w	r2, r3, #31
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	4969      	ldr	r1, [pc, #420]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006748:	4313      	orrs	r3, r2
 800674a:	60cb      	str	r3, [r1, #12]
 800674c:	e07e      	b.n	800684c <HAL_RCC_OscConfig+0x1e0>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006752:	2b00      	cmp	r3, #0
 8006754:	da0a      	bge.n	800676c <HAL_RCC_OscConfig+0x100>
 8006756:	4b65      	ldr	r3, [pc, #404]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	015b      	lsls	r3, r3, #5
 8006764:	4961      	ldr	r1, [pc, #388]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006766:	4313      	orrs	r3, r2
 8006768:	60cb      	str	r3, [r1, #12]
 800676a:	e06f      	b.n	800684c <HAL_RCC_OscConfig+0x1e0>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006774:	d30a      	bcc.n	800678c <HAL_RCC_OscConfig+0x120>
 8006776:	4b5d      	ldr	r3, [pc, #372]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	029b      	lsls	r3, r3, #10
 8006784:	4959      	ldr	r1, [pc, #356]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006786:	4313      	orrs	r3, r2
 8006788:	60cb      	str	r3, [r1, #12]
 800678a:	e05f      	b.n	800684c <HAL_RCC_OscConfig+0x1e0>
 800678c:	4b57      	ldr	r3, [pc, #348]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	03db      	lsls	r3, r3, #15
 800679a:	4954      	ldr	r1, [pc, #336]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 800679c:	4313      	orrs	r3, r2
 800679e:	60cb      	str	r3, [r1, #12]
 80067a0:	e054      	b.n	800684c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80067a2:	4b52      	ldr	r3, [pc, #328]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	4a51      	ldr	r2, [pc, #324]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80067a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067ac:	6093      	str	r3, [r2, #8]
 80067ae:	4b4f      	ldr	r3, [pc, #316]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	494c      	ldr	r1, [pc, #304]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80067c8:	d309      	bcc.n	80067de <HAL_RCC_OscConfig+0x172>
 80067ca:	4b48      	ldr	r3, [pc, #288]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f023 021f 	bic.w	r2, r3, #31
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	4945      	ldr	r1, [pc, #276]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	60cb      	str	r3, [r1, #12]
 80067dc:	e028      	b.n	8006830 <HAL_RCC_OscConfig+0x1c4>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	da0a      	bge.n	80067fc <HAL_RCC_OscConfig+0x190>
 80067e6:	4b41      	ldr	r3, [pc, #260]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	015b      	lsls	r3, r3, #5
 80067f4:	493d      	ldr	r1, [pc, #244]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60cb      	str	r3, [r1, #12]
 80067fa:	e019      	b.n	8006830 <HAL_RCC_OscConfig+0x1c4>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006804:	d30a      	bcc.n	800681c <HAL_RCC_OscConfig+0x1b0>
 8006806:	4b39      	ldr	r3, [pc, #228]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	029b      	lsls	r3, r3, #10
 8006814:	4935      	ldr	r1, [pc, #212]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006816:	4313      	orrs	r3, r2
 8006818:	60cb      	str	r3, [r1, #12]
 800681a:	e009      	b.n	8006830 <HAL_RCC_OscConfig+0x1c4>
 800681c:	4b33      	ldr	r3, [pc, #204]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	03db      	lsls	r3, r3, #15
 800682a:	4930      	ldr	r1, [pc, #192]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 800682c:	4313      	orrs	r3, r2
 800682e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	4618      	mov	r0, r3
 800683c:	f001 f974 	bl	8007b28 <RCC_SetFlashLatencyFromMSIRange>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f000 bde5 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800684c:	f001 f8de 	bl	8007a0c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006850:	4b27      	ldr	r3, [pc, #156]	@ (80068f0 <HAL_RCC_OscConfig+0x284>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4618      	mov	r0, r3
 8006856:	f7fb f803 	bl	8001860 <HAL_InitTick>
 800685a:	4603      	mov	r3, r0
 800685c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 808a 	beq.w	800697e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800686a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800686e:	f000 bdd2 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d066      	beq.n	8006948 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800687a:	4b1c      	ldr	r3, [pc, #112]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1b      	ldr	r2, [pc, #108]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006886:	f7fb fb27 	bl	8001ed8 <HAL_GetTick>
 800688a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800688c:	e009      	b.n	80068a2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800688e:	f7fb fb23 	bl	8001ed8 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d902      	bls.n	80068a2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	f000 bdba 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80068a2:	4b12      	ldr	r3, [pc, #72]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0ef      	beq.n	800688e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80068ae:	4b0f      	ldr	r3, [pc, #60]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	4a0e      	ldr	r2, [pc, #56]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80068b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80068b8:	6093      	str	r3, [r2, #8]
 80068ba:	4b0c      	ldr	r3, [pc, #48]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	4909      	ldr	r1, [pc, #36]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80068d4:	d30e      	bcc.n	80068f4 <HAL_RCC_OscConfig+0x288>
 80068d6:	4b05      	ldr	r3, [pc, #20]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f023 021f 	bic.w	r2, r3, #31
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	4902      	ldr	r1, [pc, #8]	@ (80068ec <HAL_RCC_OscConfig+0x280>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60cb      	str	r3, [r1, #12]
 80068e8:	e04a      	b.n	8006980 <HAL_RCC_OscConfig+0x314>
 80068ea:	bf00      	nop
 80068ec:	46020c00 	.word	0x46020c00
 80068f0:	20000008 	.word	0x20000008
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	da0a      	bge.n	8006912 <HAL_RCC_OscConfig+0x2a6>
 80068fc:	4b98      	ldr	r3, [pc, #608]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	015b      	lsls	r3, r3, #5
 800690a:	4995      	ldr	r1, [pc, #596]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 800690c:	4313      	orrs	r3, r2
 800690e:	60cb      	str	r3, [r1, #12]
 8006910:	e036      	b.n	8006980 <HAL_RCC_OscConfig+0x314>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800691a:	d30a      	bcc.n	8006932 <HAL_RCC_OscConfig+0x2c6>
 800691c:	4b90      	ldr	r3, [pc, #576]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	029b      	lsls	r3, r3, #10
 800692a:	498d      	ldr	r1, [pc, #564]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 800692c:	4313      	orrs	r3, r2
 800692e:	60cb      	str	r3, [r1, #12]
 8006930:	e026      	b.n	8006980 <HAL_RCC_OscConfig+0x314>
 8006932:	4b8b      	ldr	r3, [pc, #556]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	03db      	lsls	r3, r3, #15
 8006940:	4987      	ldr	r1, [pc, #540]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006942:	4313      	orrs	r3, r2
 8006944:	60cb      	str	r3, [r1, #12]
 8006946:	e01b      	b.n	8006980 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006948:	4b85      	ldr	r3, [pc, #532]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a84      	ldr	r2, [pc, #528]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 800694e:	f023 0301 	bic.w	r3, r3, #1
 8006952:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006954:	f7fb fac0 	bl	8001ed8 <HAL_GetTick>
 8006958:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800695a:	e009      	b.n	8006970 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800695c:	f7fb fabc 	bl	8001ed8 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d902      	bls.n	8006970 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	f000 bd53 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006970:	4b7b      	ldr	r3, [pc, #492]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1ef      	bne.n	800695c <HAL_RCC_OscConfig+0x2f0>
 800697c:	e000      	b.n	8006980 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800697e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 808b 	beq.w	8006aa4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	2b08      	cmp	r3, #8
 8006992:	d005      	beq.n	80069a0 <HAL_RCC_OscConfig+0x334>
 8006994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006996:	2b0c      	cmp	r3, #12
 8006998:	d109      	bne.n	80069ae <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800699a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699c:	2b03      	cmp	r3, #3
 800699e:	d106      	bne.n	80069ae <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d17d      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	f000 bd34 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069b6:	d106      	bne.n	80069c6 <HAL_RCC_OscConfig+0x35a>
 80069b8:	4b69      	ldr	r3, [pc, #420]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a68      	ldr	r2, [pc, #416]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 80069be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e041      	b.n	8006a4a <HAL_RCC_OscConfig+0x3de>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069ce:	d112      	bne.n	80069f6 <HAL_RCC_OscConfig+0x38a>
 80069d0:	4b63      	ldr	r3, [pc, #396]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a62      	ldr	r2, [pc, #392]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 80069d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	4b60      	ldr	r3, [pc, #384]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a5f      	ldr	r2, [pc, #380]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 80069e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	4b5d      	ldr	r3, [pc, #372]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a5c      	ldr	r2, [pc, #368]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 80069ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	e029      	b.n	8006a4a <HAL_RCC_OscConfig+0x3de>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80069fe:	d112      	bne.n	8006a26 <HAL_RCC_OscConfig+0x3ba>
 8006a00:	4b57      	ldr	r3, [pc, #348]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a56      	ldr	r2, [pc, #344]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	4b54      	ldr	r3, [pc, #336]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a53      	ldr	r2, [pc, #332]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	4b51      	ldr	r3, [pc, #324]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a50      	ldr	r2, [pc, #320]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	e011      	b.n	8006a4a <HAL_RCC_OscConfig+0x3de>
 8006a26:	4b4e      	ldr	r3, [pc, #312]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a4d      	ldr	r2, [pc, #308]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	4b4b      	ldr	r3, [pc, #300]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a4a      	ldr	r2, [pc, #296]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	4b48      	ldr	r3, [pc, #288]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a47      	ldr	r2, [pc, #284]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006a48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d014      	beq.n	8006a7c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006a52:	f7fb fa41 	bl	8001ed8 <HAL_GetTick>
 8006a56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a58:	e009      	b.n	8006a6e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a5a:	f7fb fa3d 	bl	8001ed8 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b64      	cmp	r3, #100	@ 0x64
 8006a66:	d902      	bls.n	8006a6e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	f000 bcd4 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0ef      	beq.n	8006a5a <HAL_RCC_OscConfig+0x3ee>
 8006a7a:	e013      	b.n	8006aa4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006a7c:	f7fb fa2c 	bl	8001ed8 <HAL_GetTick>
 8006a80:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a82:	e009      	b.n	8006a98 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a84:	f7fb fa28 	bl	8001ed8 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b64      	cmp	r3, #100	@ 0x64
 8006a90:	d902      	bls.n	8006a98 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	f000 bcbf 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a98:	4b31      	ldr	r3, [pc, #196]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1ef      	bne.n	8006a84 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d05f      	beq.n	8006b70 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d005      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x456>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	2b0c      	cmp	r3, #12
 8006aba:	d114      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d111      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d102      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f000 bca3 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006ad0:	4b23      	ldr	r3, [pc, #140]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	041b      	lsls	r3, r3, #16
 8006ade:	4920      	ldr	r1, [pc, #128]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006ae4:	e044      	b.n	8006b70 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d024      	beq.n	8006b38 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006aee:	4b1c      	ldr	r3, [pc, #112]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006af8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006afa:	f7fb f9ed 	bl	8001ed8 <HAL_GetTick>
 8006afe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b00:	e009      	b.n	8006b16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b02:	f7fb f9e9 	bl	8001ed8 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d902      	bls.n	8006b16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	f000 bc80 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b16:	4b12      	ldr	r3, [pc, #72]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0ef      	beq.n	8006b02 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006b22:	4b0f      	ldr	r3, [pc, #60]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	041b      	lsls	r3, r3, #16
 8006b30:	490b      	ldr	r1, [pc, #44]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	610b      	str	r3, [r1, #16]
 8006b36:	e01b      	b.n	8006b70 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006b38:	4b09      	ldr	r3, [pc, #36]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a08      	ldr	r2, [pc, #32]	@ (8006b60 <HAL_RCC_OscConfig+0x4f4>)
 8006b3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b42:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006b44:	f7fb f9c8 	bl	8001ed8 <HAL_GetTick>
 8006b48:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b4a:	e00b      	b.n	8006b64 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b4c:	f7fb f9c4 	bl	8001ed8 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d904      	bls.n	8006b64 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	f000 bc5b 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
 8006b60:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b64:	4baf      	ldr	r3, [pc, #700]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1ed      	bne.n	8006b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80c8 	beq.w	8006d0e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b84:	4ba7      	ldr	r3, [pc, #668]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d111      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b92:	4ba4      	ldr	r3, [pc, #656]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b98:	4aa2      	ldr	r2, [pc, #648]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006b9a:	f043 0304 	orr.w	r3, r3, #4
 8006b9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006ba2:	4ba0      	ldr	r3, [pc, #640]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006bb6:	4b9c      	ldr	r3, [pc, #624]	@ (8006e28 <HAL_RCC_OscConfig+0x7bc>)
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d119      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006bc2:	4b99      	ldr	r3, [pc, #612]	@ (8006e28 <HAL_RCC_OscConfig+0x7bc>)
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc6:	4a98      	ldr	r2, [pc, #608]	@ (8006e28 <HAL_RCC_OscConfig+0x7bc>)
 8006bc8:	f043 0301 	orr.w	r3, r3, #1
 8006bcc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bce:	f7fb f983 	bl	8001ed8 <HAL_GetTick>
 8006bd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006bd4:	e009      	b.n	8006bea <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bd6:	f7fb f97f 	bl	8001ed8 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d902      	bls.n	8006bea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	f000 bc16 	b.w	8007416 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006bea:	4b8f      	ldr	r3, [pc, #572]	@ (8006e28 <HAL_RCC_OscConfig+0x7bc>)
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0ef      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d05f      	beq.n	8006cbe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006bfe:	4b89      	ldr	r3, [pc, #548]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c04:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d037      	beq.n	8006c84 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d006      	beq.n	8006c2c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e3f4      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01b      	beq.n	8006c6e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006c36:	4b7b      	ldr	r3, [pc, #492]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c3c:	4a79      	ldr	r2, [pc, #484]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006c3e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006c42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006c46:	f7fb f947 	bl	8001ed8 <HAL_GetTick>
 8006c4a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c4e:	f7fb f943 	bl	8001ed8 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b05      	cmp	r3, #5
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e3da      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c60:	4b70      	ldr	r3, [pc, #448]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1ef      	bne.n	8006c4e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	4969      	ldr	r1, [pc, #420]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006c84:	4b67      	ldr	r3, [pc, #412]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c8a:	4a66      	ldr	r2, [pc, #408]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006c8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006c94:	f7fb f920 	bl	8001ed8 <HAL_GetTick>
 8006c98:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c9c:	f7fb f91c 	bl	8001ed8 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b05      	cmp	r3, #5
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e3b3      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006cae:	4b5d      	ldr	r3, [pc, #372]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0ef      	beq.n	8006c9c <HAL_RCC_OscConfig+0x630>
 8006cbc:	e01b      	b.n	8006cf6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006cbe:	4b59      	ldr	r3, [pc, #356]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cc4:	4a57      	ldr	r2, [pc, #348]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006cc6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006cca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006cce:	f7fb f903 	bl	8001ed8 <HAL_GetTick>
 8006cd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006cd4:	e008      	b.n	8006ce8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cd6:	f7fb f8ff 	bl	8001ed8 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b05      	cmp	r3, #5
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e396      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006ce8:	4b4e      	ldr	r3, [pc, #312]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1ef      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cf6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d107      	bne.n	8006d0e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cfe:	4b49      	ldr	r3, [pc, #292]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d04:	4a47      	ldr	r2, [pc, #284]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006d06:	f023 0304 	bic.w	r3, r3, #4
 8006d0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 8111 	beq.w	8006f3e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d22:	4b40      	ldr	r3, [pc, #256]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d111      	bne.n	8006d54 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d30:	4b3c      	ldr	r3, [pc, #240]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d36:	4a3b      	ldr	r2, [pc, #236]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006d38:	f043 0304 	orr.w	r3, r3, #4
 8006d3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006d40:	4b38      	ldr	r3, [pc, #224]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d54:	4b34      	ldr	r3, [pc, #208]	@ (8006e28 <HAL_RCC_OscConfig+0x7bc>)
 8006d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d118      	bne.n	8006d92 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006d60:	4b31      	ldr	r3, [pc, #196]	@ (8006e28 <HAL_RCC_OscConfig+0x7bc>)
 8006d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d64:	4a30      	ldr	r2, [pc, #192]	@ (8006e28 <HAL_RCC_OscConfig+0x7bc>)
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d6c:	f7fb f8b4 	bl	8001ed8 <HAL_GetTick>
 8006d70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d74:	f7fb f8b0 	bl	8001ed8 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e347      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d86:	4b28      	ldr	r3, [pc, #160]	@ (8006e28 <HAL_RCC_OscConfig+0x7bc>)
 8006d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0f0      	beq.n	8006d74 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d01f      	beq.n	8006dde <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d010      	beq.n	8006dcc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006daa:	4b1e      	ldr	r3, [pc, #120]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006db0:	4a1c      	ldr	r2, [pc, #112]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006db2:	f043 0304 	orr.w	r3, r3, #4
 8006db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006dba:	4b1a      	ldr	r3, [pc, #104]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dc0:	4a18      	ldr	r2, [pc, #96]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006dca:	e018      	b.n	8006dfe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006dcc:	4b15      	ldr	r3, [pc, #84]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dd2:	4a14      	ldr	r2, [pc, #80]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006ddc:	e00f      	b.n	8006dfe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006dde:	4b11      	ldr	r3, [pc, #68]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006de4:	4a0f      	ldr	r2, [pc, #60]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006de6:	f023 0301 	bic.w	r3, r3, #1
 8006dea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006dee:	4b0d      	ldr	r3, [pc, #52]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006df4:	4a0b      	ldr	r2, [pc, #44]	@ (8006e24 <HAL_RCC_OscConfig+0x7b8>)
 8006df6:	f023 0304 	bic.w	r3, r3, #4
 8006dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d057      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006e06:	f7fb f867 	bl	8001ed8 <HAL_GetTick>
 8006e0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e0c:	e00e      	b.n	8006e2c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e0e:	f7fb f863 	bl	8001ed8 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d905      	bls.n	8006e2c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e2f8      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
 8006e24:	46020c00 	.word	0x46020c00
 8006e28:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e2c:	4b9c      	ldr	r3, [pc, #624]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0e9      	beq.n	8006e0e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d01b      	beq.n	8006e7e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e46:	4b96      	ldr	r3, [pc, #600]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e4c:	4a94      	ldr	r2, [pc, #592]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006e56:	e00a      	b.n	8006e6e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e58:	f7fb f83e 	bl	8001ed8 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e2d3      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006e6e:	4b8c      	ldr	r3, [pc, #560]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0ed      	beq.n	8006e58 <HAL_RCC_OscConfig+0x7ec>
 8006e7c:	e053      	b.n	8006f26 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e7e:	4b88      	ldr	r3, [pc, #544]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e84:	4a86      	ldr	r2, [pc, #536]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006e86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e8e:	e00a      	b.n	8006ea6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e90:	f7fb f822 	bl	8001ed8 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e2b7      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006ea6:	4b7e      	ldr	r3, [pc, #504]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1ed      	bne.n	8006e90 <HAL_RCC_OscConfig+0x824>
 8006eb4:	e037      	b.n	8006f26 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006eb6:	f7fb f80f 	bl	8001ed8 <HAL_GetTick>
 8006eba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ebc:	e00a      	b.n	8006ed4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ebe:	f7fb f80b 	bl	8001ed8 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e2a0      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ed4:	4b72      	ldr	r3, [pc, #456]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1ed      	bne.n	8006ebe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006ee2:	4b6f      	ldr	r3, [pc, #444]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01a      	beq.n	8006f26 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ef6:	4a6a      	ldr	r2, [pc, #424]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006ef8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006efc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006f00:	e00a      	b.n	8006f18 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f02:	f7fa ffe9 	bl	8001ed8 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e27e      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006f18:	4b61      	ldr	r3, [pc, #388]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1ed      	bne.n	8006f02 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f26:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d107      	bne.n	8006f3e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f34:	4a5a      	ldr	r2, [pc, #360]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006f36:	f023 0304 	bic.w	r3, r3, #4
 8006f3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d036      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d019      	beq.n	8006f86 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006f52:	4b53      	ldr	r3, [pc, #332]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a52      	ldr	r2, [pc, #328]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006f58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f5c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f5e:	f7fa ffbb 	bl	8001ed8 <HAL_GetTick>
 8006f62:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006f64:	e008      	b.n	8006f78 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f66:	f7fa ffb7 	bl	8001ed8 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e24e      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006f78:	4b49      	ldr	r3, [pc, #292]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0f0      	beq.n	8006f66 <HAL_RCC_OscConfig+0x8fa>
 8006f84:	e018      	b.n	8006fb8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006f86:	4b46      	ldr	r3, [pc, #280]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a45      	ldr	r2, [pc, #276]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006f8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f90:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f92:	f7fa ffa1 	bl	8001ed8 <HAL_GetTick>
 8006f96:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006f98:	e008      	b.n	8006fac <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f9a:	f7fa ff9d 	bl	8001ed8 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e234      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006fac:	4b3c      	ldr	r3, [pc, #240]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f0      	bne.n	8006f9a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d036      	beq.n	8007032 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d019      	beq.n	8007000 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006fcc:	4b34      	ldr	r3, [pc, #208]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a33      	ldr	r2, [pc, #204]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006fd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fd6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006fd8:	f7fa ff7e 	bl	8001ed8 <HAL_GetTick>
 8006fdc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006fde:	e008      	b.n	8006ff2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006fe0:	f7fa ff7a 	bl	8001ed8 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e211      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0f0      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x974>
 8006ffe:	e018      	b.n	8007032 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007000:	4b27      	ldr	r3, [pc, #156]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a26      	ldr	r2, [pc, #152]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8007006:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800700a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800700c:	f7fa ff64 	bl	8001ed8 <HAL_GetTick>
 8007010:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007014:	f7fa ff60 	bl	8001ed8 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e1f7      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007026:	4b1e      	ldr	r3, [pc, #120]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f0      	bne.n	8007014 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d07f      	beq.n	800713e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007042:	2b00      	cmp	r3, #0
 8007044:	d062      	beq.n	800710c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8007046:	4b16      	ldr	r3, [pc, #88]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	4a15      	ldr	r2, [pc, #84]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 800704c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007050:	6093      	str	r3, [r2, #8]
 8007052:	4b13      	ldr	r3, [pc, #76]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705e:	4910      	ldr	r1, [pc, #64]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8007060:	4313      	orrs	r3, r2
 8007062:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800706c:	d309      	bcc.n	8007082 <HAL_RCC_OscConfig+0xa16>
 800706e:	4b0c      	ldr	r3, [pc, #48]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f023 021f 	bic.w	r2, r3, #31
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	4909      	ldr	r1, [pc, #36]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 800707c:	4313      	orrs	r3, r2
 800707e:	60cb      	str	r3, [r1, #12]
 8007080:	e02a      	b.n	80070d8 <HAL_RCC_OscConfig+0xa6c>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007086:	2b00      	cmp	r3, #0
 8007088:	da0c      	bge.n	80070a4 <HAL_RCC_OscConfig+0xa38>
 800708a:	4b05      	ldr	r3, [pc, #20]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	015b      	lsls	r3, r3, #5
 8007098:	4901      	ldr	r1, [pc, #4]	@ (80070a0 <HAL_RCC_OscConfig+0xa34>)
 800709a:	4313      	orrs	r3, r2
 800709c:	60cb      	str	r3, [r1, #12]
 800709e:	e01b      	b.n	80070d8 <HAL_RCC_OscConfig+0xa6c>
 80070a0:	46020c00 	.word	0x46020c00
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ac:	d30a      	bcc.n	80070c4 <HAL_RCC_OscConfig+0xa58>
 80070ae:	4ba1      	ldr	r3, [pc, #644]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	029b      	lsls	r3, r3, #10
 80070bc:	499d      	ldr	r1, [pc, #628]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	60cb      	str	r3, [r1, #12]
 80070c2:	e009      	b.n	80070d8 <HAL_RCC_OscConfig+0xa6c>
 80070c4:	4b9b      	ldr	r3, [pc, #620]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	03db      	lsls	r3, r3, #15
 80070d2:	4998      	ldr	r1, [pc, #608]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80070d8:	4b96      	ldr	r3, [pc, #600]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a95      	ldr	r2, [pc, #596]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80070de:	f043 0310 	orr.w	r3, r3, #16
 80070e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80070e4:	f7fa fef8 	bl	8001ed8 <HAL_GetTick>
 80070e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80070ec:	f7fa fef4 	bl	8001ed8 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e18b      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80070fe:	4b8d      	ldr	r3, [pc, #564]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0320 	and.w	r3, r3, #32
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f0      	beq.n	80070ec <HAL_RCC_OscConfig+0xa80>
 800710a:	e018      	b.n	800713e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800710c:	4b89      	ldr	r3, [pc, #548]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a88      	ldr	r2, [pc, #544]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007112:	f023 0310 	bic.w	r3, r3, #16
 8007116:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007118:	f7fa fede 	bl	8001ed8 <HAL_GetTick>
 800711c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007120:	f7fa feda 	bl	8001ed8 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e171      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007132:	4b80      	ldr	r3, [pc, #512]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1f0      	bne.n	8007120 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 8166 	beq.w	8007414 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007148:	2300      	movs	r3, #0
 800714a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800714e:	4b79      	ldr	r3, [pc, #484]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	f003 030c 	and.w	r3, r3, #12
 8007156:	2b0c      	cmp	r3, #12
 8007158:	f000 80f2 	beq.w	8007340 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	2b02      	cmp	r3, #2
 8007162:	f040 80c5 	bne.w	80072f0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007166:	4b73      	ldr	r3, [pc, #460]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a72      	ldr	r2, [pc, #456]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 800716c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007170:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007172:	f7fa feb1 	bl	8001ed8 <HAL_GetTick>
 8007176:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007178:	e008      	b.n	800718c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800717a:	f7fa fead 	bl	8001ed8 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d901      	bls.n	800718c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e144      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800718c:	4b69      	ldr	r3, [pc, #420]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1f0      	bne.n	800717a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007198:	4b66      	ldr	r3, [pc, #408]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 800719a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d111      	bne.n	80071ca <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80071a6:	4b63      	ldr	r3, [pc, #396]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80071a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071ac:	4a61      	ldr	r2, [pc, #388]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80071ae:	f043 0304 	orr.w	r3, r3, #4
 80071b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80071b6:	4b5f      	ldr	r3, [pc, #380]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80071b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80071ca:	4b5b      	ldr	r3, [pc, #364]	@ (8007338 <HAL_RCC_OscConfig+0xccc>)
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071d6:	d102      	bne.n	80071de <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80071de:	4b56      	ldr	r3, [pc, #344]	@ (8007338 <HAL_RCC_OscConfig+0xccc>)
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	4a55      	ldr	r2, [pc, #340]	@ (8007338 <HAL_RCC_OscConfig+0xccc>)
 80071e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071e8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80071ea:	4b52      	ldr	r3, [pc, #328]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80071ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071f2:	f023 0303 	bic.w	r3, r3, #3
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80071fe:	3a01      	subs	r2, #1
 8007200:	0212      	lsls	r2, r2, #8
 8007202:	4311      	orrs	r1, r2
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007208:	430a      	orrs	r2, r1
 800720a:	494a      	ldr	r1, [pc, #296]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 800720c:	4313      	orrs	r3, r2
 800720e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007210:	4b48      	ldr	r3, [pc, #288]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007214:	4b49      	ldr	r3, [pc, #292]	@ (800733c <HAL_RCC_OscConfig+0xcd0>)
 8007216:	4013      	ands	r3, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800721c:	3a01      	subs	r2, #1
 800721e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007226:	3a01      	subs	r2, #1
 8007228:	0252      	lsls	r2, r2, #9
 800722a:	b292      	uxth	r2, r2
 800722c:	4311      	orrs	r1, r2
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007232:	3a01      	subs	r2, #1
 8007234:	0412      	lsls	r2, r2, #16
 8007236:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800723a:	4311      	orrs	r1, r2
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007240:	3a01      	subs	r2, #1
 8007242:	0612      	lsls	r2, r2, #24
 8007244:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007248:	430a      	orrs	r2, r1
 800724a:	493a      	ldr	r1, [pc, #232]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 800724c:	4313      	orrs	r3, r2
 800724e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007250:	4b38      	ldr	r3, [pc, #224]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007254:	4a37      	ldr	r2, [pc, #220]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007256:	f023 0310 	bic.w	r3, r3, #16
 800725a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007260:	4a34      	ldr	r2, [pc, #208]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007262:	00db      	lsls	r3, r3, #3
 8007264:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007266:	4b33      	ldr	r3, [pc, #204]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726a:	4a32      	ldr	r2, [pc, #200]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 800726c:	f043 0310 	orr.w	r3, r3, #16
 8007270:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8007272:	4b30      	ldr	r3, [pc, #192]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007276:	f023 020c 	bic.w	r2, r3, #12
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800727e:	492d      	ldr	r1, [pc, #180]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007280:	4313      	orrs	r3, r2
 8007282:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8007284:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007288:	2b01      	cmp	r3, #1
 800728a:	d105      	bne.n	8007298 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800728c:	4b2a      	ldr	r3, [pc, #168]	@ (8007338 <HAL_RCC_OscConfig+0xccc>)
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	4a29      	ldr	r2, [pc, #164]	@ (8007338 <HAL_RCC_OscConfig+0xccc>)
 8007292:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007296:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007298:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800729c:	2b01      	cmp	r3, #1
 800729e:	d107      	bne.n	80072b0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80072a0:	4b24      	ldr	r3, [pc, #144]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80072a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072a6:	4a23      	ldr	r2, [pc, #140]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80072a8:	f023 0304 	bic.w	r3, r3, #4
 80072ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80072b0:	4b20      	ldr	r3, [pc, #128]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80072b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80072bc:	f7fa fe0c 	bl	8001ed8 <HAL_GetTick>
 80072c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80072c2:	e008      	b.n	80072d6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072c4:	f7fa fe08 	bl	8001ed8 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e09f      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80072d6:	4b17      	ldr	r3, [pc, #92]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0f0      	beq.n	80072c4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80072e2:	4b14      	ldr	r3, [pc, #80]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80072e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e6:	4a13      	ldr	r2, [pc, #76]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80072e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80072ee:	e091      	b.n	8007414 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80072f0:	4b10      	ldr	r3, [pc, #64]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 80072f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80072fc:	f7fa fdec 	bl	8001ed8 <HAL_GetTick>
 8007300:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007304:	f7fa fde8 	bl	8001ed8 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e07f      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007316:	4b07      	ldr	r3, [pc, #28]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f0      	bne.n	8007304 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007322:	4b04      	ldr	r3, [pc, #16]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007326:	4a03      	ldr	r2, [pc, #12]	@ (8007334 <HAL_RCC_OscConfig+0xcc8>)
 8007328:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800732c:	f023 0303 	bic.w	r3, r3, #3
 8007330:	6293      	str	r3, [r2, #40]	@ 0x28
 8007332:	e06f      	b.n	8007414 <HAL_RCC_OscConfig+0xda8>
 8007334:	46020c00 	.word	0x46020c00
 8007338:	46020800 	.word	0x46020800
 800733c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007340:	4b37      	ldr	r3, [pc, #220]	@ (8007420 <HAL_RCC_OscConfig+0xdb4>)
 8007342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007344:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007346:	4b36      	ldr	r3, [pc, #216]	@ (8007420 <HAL_RCC_OscConfig+0xdb4>)
 8007348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800734a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007350:	2b01      	cmp	r3, #1
 8007352:	d039      	beq.n	80073c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	f003 0203 	and.w	r2, r3, #3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800735e:	429a      	cmp	r2, r3
 8007360:	d132      	bne.n	80073c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	0a1b      	lsrs	r3, r3, #8
 8007366:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007370:	429a      	cmp	r2, r3
 8007372:	d129      	bne.n	80073c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800737e:	429a      	cmp	r2, r3
 8007380:	d122      	bne.n	80073c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800738c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800738e:	429a      	cmp	r2, r3
 8007390:	d11a      	bne.n	80073c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	0a5b      	lsrs	r3, r3, #9
 8007396:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800739e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d111      	bne.n	80073c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	0c1b      	lsrs	r3, r3, #16
 80073a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d108      	bne.n	80073c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	0e1b      	lsrs	r3, r3, #24
 80073ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d001      	beq.n	80073cc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e024      	b.n	8007416 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80073cc:	4b14      	ldr	r3, [pc, #80]	@ (8007420 <HAL_RCC_OscConfig+0xdb4>)
 80073ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d0:	08db      	lsrs	r3, r3, #3
 80073d2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80073da:	429a      	cmp	r2, r3
 80073dc:	d01a      	beq.n	8007414 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80073de:	4b10      	ldr	r3, [pc, #64]	@ (8007420 <HAL_RCC_OscConfig+0xdb4>)
 80073e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e2:	4a0f      	ldr	r2, [pc, #60]	@ (8007420 <HAL_RCC_OscConfig+0xdb4>)
 80073e4:	f023 0310 	bic.w	r3, r3, #16
 80073e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ea:	f7fa fd75 	bl	8001ed8 <HAL_GetTick>
 80073ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80073f0:	bf00      	nop
 80073f2:	f7fa fd71 	bl	8001ed8 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d0f9      	beq.n	80073f2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007402:	4a07      	ldr	r2, [pc, #28]	@ (8007420 <HAL_RCC_OscConfig+0xdb4>)
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007408:	4b05      	ldr	r3, [pc, #20]	@ (8007420 <HAL_RCC_OscConfig+0xdb4>)
 800740a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740c:	4a04      	ldr	r2, [pc, #16]	@ (8007420 <HAL_RCC_OscConfig+0xdb4>)
 800740e:	f043 0310 	orr.w	r3, r3, #16
 8007412:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3738      	adds	r7, #56	@ 0x38
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	46020c00 	.word	0x46020c00

08007424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e1d9      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007438:	4b9b      	ldr	r3, [pc, #620]	@ (80076a8 <HAL_RCC_ClockConfig+0x284>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 030f 	and.w	r3, r3, #15
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d910      	bls.n	8007468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007446:	4b98      	ldr	r3, [pc, #608]	@ (80076a8 <HAL_RCC_ClockConfig+0x284>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f023 020f 	bic.w	r2, r3, #15
 800744e:	4996      	ldr	r1, [pc, #600]	@ (80076a8 <HAL_RCC_ClockConfig+0x284>)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	4313      	orrs	r3, r2
 8007454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007456:	4b94      	ldr	r3, [pc, #592]	@ (80076a8 <HAL_RCC_ClockConfig+0x284>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d001      	beq.n	8007468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e1c1      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b00      	cmp	r3, #0
 8007472:	d010      	beq.n	8007496 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	695a      	ldr	r2, [r3, #20]
 8007478:	4b8c      	ldr	r3, [pc, #560]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 800747a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007480:	429a      	cmp	r2, r3
 8007482:	d908      	bls.n	8007496 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007484:	4b89      	ldr	r3, [pc, #548]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 8007486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007488:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	4986      	ldr	r1, [pc, #536]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 8007492:	4313      	orrs	r3, r2
 8007494:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d012      	beq.n	80074c8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	691a      	ldr	r2, [r3, #16]
 80074a6:	4b81      	ldr	r3, [pc, #516]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d909      	bls.n	80074c8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80074b4:	4b7d      	ldr	r3, [pc, #500]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	497a      	ldr	r1, [pc, #488]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d010      	beq.n	80074f6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	4b74      	ldr	r3, [pc, #464]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d908      	bls.n	80074f6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80074e4:	4b71      	ldr	r3, [pc, #452]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	496e      	ldr	r1, [pc, #440]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d010      	beq.n	8007524 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689a      	ldr	r2, [r3, #8]
 8007506:	4b69      	ldr	r3, [pc, #420]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f003 030f 	and.w	r3, r3, #15
 800750e:	429a      	cmp	r2, r3
 8007510:	d908      	bls.n	8007524 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007512:	4b66      	ldr	r3, [pc, #408]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f023 020f 	bic.w	r2, r3, #15
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	4963      	ldr	r1, [pc, #396]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 8007520:	4313      	orrs	r3, r2
 8007522:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 80d2 	beq.w	80076d6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b03      	cmp	r3, #3
 800753c:	d143      	bne.n	80075c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800753e:	4b5b      	ldr	r3, [pc, #364]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 8007540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b00      	cmp	r3, #0
 800754a:	d110      	bne.n	800756e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800754c:	4b57      	ldr	r3, [pc, #348]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 800754e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007552:	4a56      	ldr	r2, [pc, #344]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 8007554:	f043 0304 	orr.w	r3, r3, #4
 8007558:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800755c:	4b53      	ldr	r3, [pc, #332]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 800755e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007562:	f003 0304 	and.w	r3, r3, #4
 8007566:	60bb      	str	r3, [r7, #8]
 8007568:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800756e:	f7fa fcb3 	bl	8001ed8 <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007574:	4b4e      	ldr	r3, [pc, #312]	@ (80076b0 <HAL_RCC_ClockConfig+0x28c>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00f      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007580:	e008      	b.n	8007594 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007582:	f7fa fca9 	bl	8001ed8 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e12b      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007594:	4b46      	ldr	r3, [pc, #280]	@ (80076b0 <HAL_RCC_ClockConfig+0x28c>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0f0      	beq.n	8007582 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d107      	bne.n	80075b6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80075a6:	4b41      	ldr	r3, [pc, #260]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80075a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ac:	4a3f      	ldr	r2, [pc, #252]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80075ae:	f023 0304 	bic.w	r3, r3, #4
 80075b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80075b6:	4b3d      	ldr	r3, [pc, #244]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d121      	bne.n	8007606 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e112      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d107      	bne.n	80075de <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075ce:	4b37      	ldr	r3, [pc, #220]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d115      	bne.n	8007606 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e106      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d107      	bne.n	80075f6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80075e6:	4b31      	ldr	r3, [pc, #196]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e0fa      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075f6:	4b2d      	ldr	r3, [pc, #180]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e0f2      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007606:	4b29      	ldr	r3, [pc, #164]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f023 0203 	bic.w	r2, r3, #3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	4926      	ldr	r1, [pc, #152]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 8007614:	4313      	orrs	r3, r2
 8007616:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007618:	f7fa fc5e 	bl	8001ed8 <HAL_GetTick>
 800761c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b03      	cmp	r3, #3
 8007624:	d112      	bne.n	800764c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007626:	e00a      	b.n	800763e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007628:	f7fa fc56 	bl	8001ed8 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e0d6      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800763e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f003 030c 	and.w	r3, r3, #12
 8007646:	2b0c      	cmp	r3, #12
 8007648:	d1ee      	bne.n	8007628 <HAL_RCC_ClockConfig+0x204>
 800764a:	e044      	b.n	80076d6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b02      	cmp	r3, #2
 8007652:	d112      	bne.n	800767a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007654:	e00a      	b.n	800766c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007656:	f7fa fc3f 	bl	8001ed8 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007664:	4293      	cmp	r3, r2
 8007666:	d901      	bls.n	800766c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e0bf      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800766c:	4b0f      	ldr	r3, [pc, #60]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	f003 030c 	and.w	r3, r3, #12
 8007674:	2b08      	cmp	r3, #8
 8007676:	d1ee      	bne.n	8007656 <HAL_RCC_ClockConfig+0x232>
 8007678:	e02d      	b.n	80076d6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d123      	bne.n	80076ca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007682:	e00a      	b.n	800769a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007684:	f7fa fc28 	bl	8001ed8 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007692:	4293      	cmp	r3, r2
 8007694:	d901      	bls.n	800769a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e0a8      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800769a:	4b04      	ldr	r3, [pc, #16]	@ (80076ac <HAL_RCC_ClockConfig+0x288>)
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	f003 030c 	and.w	r3, r3, #12
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1ee      	bne.n	8007684 <HAL_RCC_ClockConfig+0x260>
 80076a6:	e016      	b.n	80076d6 <HAL_RCC_ClockConfig+0x2b2>
 80076a8:	40022000 	.word	0x40022000
 80076ac:	46020c00 	.word	0x46020c00
 80076b0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076b4:	f7fa fc10 	bl	8001ed8 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e090      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80076ca:	4b4a      	ldr	r3, [pc, #296]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f003 030c 	and.w	r3, r3, #12
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d1ee      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d010      	beq.n	8007704 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	4b43      	ldr	r3, [pc, #268]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d208      	bcs.n	8007704 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80076f2:	4b40      	ldr	r3, [pc, #256]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	f023 020f 	bic.w	r2, r3, #15
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	493d      	ldr	r1, [pc, #244]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 8007700:	4313      	orrs	r3, r2
 8007702:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007704:	4b3c      	ldr	r3, [pc, #240]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d210      	bcs.n	8007734 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007712:	4b39      	ldr	r3, [pc, #228]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d4>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f023 020f 	bic.w	r2, r3, #15
 800771a:	4937      	ldr	r1, [pc, #220]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d4>)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	4313      	orrs	r3, r2
 8007720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007722:	4b35      	ldr	r3, [pc, #212]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d4>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d001      	beq.n	8007734 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e05b      	b.n	80077ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d010      	beq.n	8007762 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	4b2b      	ldr	r3, [pc, #172]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800774c:	429a      	cmp	r2, r3
 800774e:	d208      	bcs.n	8007762 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007750:	4b28      	ldr	r3, [pc, #160]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4925      	ldr	r1, [pc, #148]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 800775e:	4313      	orrs	r3, r2
 8007760:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d012      	beq.n	8007794 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	4b20      	ldr	r3, [pc, #128]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	091b      	lsrs	r3, r3, #4
 8007778:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800777c:	429a      	cmp	r2, r3
 800777e:	d209      	bcs.n	8007794 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007780:	4b1c      	ldr	r3, [pc, #112]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	4919      	ldr	r1, [pc, #100]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 8007790:	4313      	orrs	r3, r2
 8007792:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	2b00      	cmp	r3, #0
 800779e:	d010      	beq.n	80077c2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	695a      	ldr	r2, [r3, #20]
 80077a4:	4b13      	ldr	r3, [pc, #76]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 80077a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d208      	bcs.n	80077c2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80077b0:	4b10      	ldr	r3, [pc, #64]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 80077b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	490d      	ldr	r1, [pc, #52]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80077c2:	f000 f821 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 80077c6:	4602      	mov	r2, r0
 80077c8:	4b0a      	ldr	r3, [pc, #40]	@ (80077f4 <HAL_RCC_ClockConfig+0x3d0>)
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	f003 030f 	and.w	r3, r3, #15
 80077d0:	490a      	ldr	r1, [pc, #40]	@ (80077fc <HAL_RCC_ClockConfig+0x3d8>)
 80077d2:	5ccb      	ldrb	r3, [r1, r3]
 80077d4:	fa22 f303 	lsr.w	r3, r2, r3
 80077d8:	4a09      	ldr	r2, [pc, #36]	@ (8007800 <HAL_RCC_ClockConfig+0x3dc>)
 80077da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80077dc:	4b09      	ldr	r3, [pc, #36]	@ (8007804 <HAL_RCC_ClockConfig+0x3e0>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fa f83d 	bl	8001860 <HAL_InitTick>
 80077e6:	4603      	mov	r3, r0
 80077e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	46020c00 	.word	0x46020c00
 80077f8:	40022000 	.word	0x40022000
 80077fc:	0802e820 	.word	0x0802e820
 8007800:	20000004 	.word	0x20000004
 8007804:	20000008 	.word	0x20000008

08007808 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007808:	b480      	push	{r7}
 800780a:	b08b      	sub	sp, #44	@ 0x2c
 800780c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007816:	4b78      	ldr	r3, [pc, #480]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f003 030c 	and.w	r3, r3, #12
 800781e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007820:	4b75      	ldr	r3, [pc, #468]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_RCC_GetSysClockFreq+0x34>
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	2b0c      	cmp	r3, #12
 8007834:	d121      	bne.n	800787a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d11e      	bne.n	800787a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800783c:	4b6e      	ldr	r3, [pc, #440]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d107      	bne.n	8007858 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007848:	4b6b      	ldr	r3, [pc, #428]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800784a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800784e:	0b1b      	lsrs	r3, r3, #12
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	627b      	str	r3, [r7, #36]	@ 0x24
 8007856:	e005      	b.n	8007864 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007858:	4b67      	ldr	r3, [pc, #412]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	0f1b      	lsrs	r3, r3, #28
 800785e:	f003 030f 	and.w	r3, r3, #15
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007864:	4a65      	ldr	r2, [pc, #404]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800786c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d110      	bne.n	8007896 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007878:	e00d      	b.n	8007896 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800787a:	4b5f      	ldr	r3, [pc, #380]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f003 030c 	and.w	r3, r3, #12
 8007882:	2b04      	cmp	r3, #4
 8007884:	d102      	bne.n	800788c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007886:	4b5e      	ldr	r3, [pc, #376]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007888:	623b      	str	r3, [r7, #32]
 800788a:	e004      	b.n	8007896 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	2b08      	cmp	r3, #8
 8007890:	d101      	bne.n	8007896 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007892:	4b5b      	ldr	r3, [pc, #364]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007894:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b0c      	cmp	r3, #12
 800789a:	f040 80a5 	bne.w	80079e8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800789e:	4b56      	ldr	r3, [pc, #344]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80078a8:	4b53      	ldr	r3, [pc, #332]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ac:	0a1b      	lsrs	r3, r3, #8
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	3301      	adds	r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80078b6:	4b50      	ldr	r3, [pc, #320]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ba:	091b      	lsrs	r3, r3, #4
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80078c2:	4b4d      	ldr	r3, [pc, #308]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c6:	08db      	lsrs	r3, r3, #3
 80078c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	fb02 f303 	mul.w	r3, r2, r3
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d003      	beq.n	80078ec <HAL_RCC_GetSysClockFreq+0xe4>
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d022      	beq.n	8007930 <HAL_RCC_GetSysClockFreq+0x128>
 80078ea:	e043      	b.n	8007974 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007a04 <HAL_RCC_GetSysClockFreq+0x1fc>
 80078fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fe:	4b3e      	ldr	r3, [pc, #248]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800790e:	ed97 6a01 	vldr	s12, [r7, #4]
 8007912:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x200>
 8007916:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800791a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800791e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007922:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800792e:	e046      	b.n	80079be <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007a04 <HAL_RCC_GetSysClockFreq+0x1fc>
 800793e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007942:	4b2d      	ldr	r3, [pc, #180]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007952:	ed97 6a01 	vldr	s12, [r7, #4]
 8007956:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x200>
 800795a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800795e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007966:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800796a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007972:	e024      	b.n	80079be <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	ee07 3a90 	vmov	s15, r3
 8007984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798c:	4b1a      	ldr	r3, [pc, #104]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800798e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007994:	ee07 3a90 	vmov	s15, r3
 8007998:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800799c:	ed97 6a01 	vldr	s12, [r7, #4]
 80079a0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x200>
 80079a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80079a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80079ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80079b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079bc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80079be:	4b0e      	ldr	r3, [pc, #56]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80079c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079c2:	0e1b      	lsrs	r3, r3, #24
 80079c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c8:	3301      	adds	r3, #1
 80079ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e2:	ee17 3a90 	vmov	r3, s15
 80079e6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80079e8:	6a3b      	ldr	r3, [r7, #32]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	372c      	adds	r7, #44	@ 0x2c
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	46020c00 	.word	0x46020c00
 80079fc:	0802e838 	.word	0x0802e838
 8007a00:	00f42400 	.word	0x00f42400
 8007a04:	4b742400 	.word	0x4b742400
 8007a08:	46000000 	.word	0x46000000

08007a0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007a10:	f7ff fefa 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8007a14:	4602      	mov	r2, r0
 8007a16:	4b07      	ldr	r3, [pc, #28]	@ (8007a34 <HAL_RCC_GetHCLKFreq+0x28>)
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	f003 030f 	and.w	r3, r3, #15
 8007a1e:	4906      	ldr	r1, [pc, #24]	@ (8007a38 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007a20:	5ccb      	ldrb	r3, [r1, r3]
 8007a22:	fa22 f303 	lsr.w	r3, r2, r3
 8007a26:	4a05      	ldr	r2, [pc, #20]	@ (8007a3c <HAL_RCC_GetHCLKFreq+0x30>)
 8007a28:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007a2a:	4b04      	ldr	r3, [pc, #16]	@ (8007a3c <HAL_RCC_GetHCLKFreq+0x30>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	46020c00 	.word	0x46020c00
 8007a38:	0802e820 	.word	0x0802e820
 8007a3c:	20000004 	.word	0x20000004

08007a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007a44:	f7ff ffe2 	bl	8007a0c <HAL_RCC_GetHCLKFreq>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	4b05      	ldr	r3, [pc, #20]	@ (8007a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	091b      	lsrs	r3, r3, #4
 8007a50:	f003 0307 	and.w	r3, r3, #7
 8007a54:	4903      	ldr	r1, [pc, #12]	@ (8007a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a56:	5ccb      	ldrb	r3, [r1, r3]
 8007a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	46020c00 	.word	0x46020c00
 8007a64:	0802e830 	.word	0x0802e830

08007a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007a6c:	f7ff ffce 	bl	8007a0c <HAL_RCC_GetHCLKFreq>
 8007a70:	4602      	mov	r2, r0
 8007a72:	4b05      	ldr	r3, [pc, #20]	@ (8007a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	0a1b      	lsrs	r3, r3, #8
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	4903      	ldr	r1, [pc, #12]	@ (8007a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a7e:	5ccb      	ldrb	r3, [r1, r3]
 8007a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	46020c00 	.word	0x46020c00
 8007a8c:	0802e830 	.word	0x0802e830

08007a90 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007a94:	f7ff ffba 	bl	8007a0c <HAL_RCC_GetHCLKFreq>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9e:	091b      	lsrs	r3, r3, #4
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	4903      	ldr	r1, [pc, #12]	@ (8007ab4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007aa6:	5ccb      	ldrb	r3, [r1, r3]
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	46020c00 	.word	0x46020c00
 8007ab4:	0802e830 	.word	0x0802e830

08007ab8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	221f      	movs	r2, #31
 8007ac6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8007ac8:	4b15      	ldr	r3, [pc, #84]	@ (8007b20 <HAL_RCC_GetClockConfig+0x68>)
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f003 0203 	and.w	r2, r3, #3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8007ad4:	4b12      	ldr	r3, [pc, #72]	@ (8007b20 <HAL_RCC_GetClockConfig+0x68>)
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8007b20 <HAL_RCC_GetClockConfig+0x68>)
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8007aec:	4b0c      	ldr	r3, [pc, #48]	@ (8007b20 <HAL_RCC_GetClockConfig+0x68>)
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	091b      	lsrs	r3, r3, #4
 8007af2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8007afa:	4b09      	ldr	r3, [pc, #36]	@ (8007b20 <HAL_RCC_GetClockConfig+0x68>)
 8007afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b06:	4b07      	ldr	r3, [pc, #28]	@ (8007b24 <HAL_RCC_GetClockConfig+0x6c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 020f 	and.w	r2, r3, #15
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	601a      	str	r2, [r3, #0]
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	46020c00 	.word	0x46020c00
 8007b24:	40022000 	.word	0x40022000

08007b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b30:	4b3e      	ldr	r3, [pc, #248]	@ (8007c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b3e:	f7fe fd87 	bl	8006650 <HAL_PWREx_GetVoltageRange>
 8007b42:	6178      	str	r0, [r7, #20]
 8007b44:	e019      	b.n	8007b7a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b46:	4b39      	ldr	r3, [pc, #228]	@ (8007c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b4c:	4a37      	ldr	r2, [pc, #220]	@ (8007c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b4e:	f043 0304 	orr.w	r3, r3, #4
 8007b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007b56:	4b35      	ldr	r3, [pc, #212]	@ (8007c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007b64:	f7fe fd74 	bl	8006650 <HAL_PWREx_GetVoltageRange>
 8007b68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007b6a:	4b30      	ldr	r3, [pc, #192]	@ (8007c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b70:	4a2e      	ldr	r2, [pc, #184]	@ (8007c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b72:	f023 0304 	bic.w	r3, r3, #4
 8007b76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b80:	d003      	beq.n	8007b8a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b88:	d109      	bne.n	8007b9e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b90:	d202      	bcs.n	8007b98 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007b92:	2301      	movs	r3, #1
 8007b94:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007b96:	e033      	b.n	8007c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007b98:	2300      	movs	r3, #0
 8007b9a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007b9c:	e030      	b.n	8007c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ba4:	d208      	bcs.n	8007bb8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bac:	d102      	bne.n	8007bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007bae:	2303      	movs	r3, #3
 8007bb0:	613b      	str	r3, [r7, #16]
 8007bb2:	e025      	b.n	8007c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e035      	b.n	8007c24 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bbe:	d90f      	bls.n	8007be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007bcc:	d902      	bls.n	8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007bce:	2300      	movs	r3, #0
 8007bd0:	613b      	str	r3, [r7, #16]
 8007bd2:	e015      	b.n	8007c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	613b      	str	r3, [r7, #16]
 8007bd8:	e012      	b.n	8007c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007bda:	2300      	movs	r3, #0
 8007bdc:	613b      	str	r3, [r7, #16]
 8007bde:	e00f      	b.n	8007c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007be6:	d109      	bne.n	8007bfc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bee:	d102      	bne.n	8007bf6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	613b      	str	r3, [r7, #16]
 8007bf4:	e004      	b.n	8007c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	613b      	str	r3, [r7, #16]
 8007bfa:	e001      	b.n	8007c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007c00:	4b0b      	ldr	r3, [pc, #44]	@ (8007c30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f023 020f 	bic.w	r2, r3, #15
 8007c08:	4909      	ldr	r1, [pc, #36]	@ (8007c30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007c10:	4b07      	ldr	r3, [pc, #28]	@ (8007c30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 030f 	and.w	r3, r3, #15
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d001      	beq.n	8007c22 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e000      	b.n	8007c24 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	46020c00 	.word	0x46020c00
 8007c30:	40022000 	.word	0x40022000

08007c34 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c38:	b0b8      	sub	sp, #224	@ 0xe0
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c40:	2300      	movs	r3, #0
 8007c42:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c46:	2300      	movs	r3, #0
 8007c48:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f002 0401 	and.w	r4, r2, #1
 8007c58:	2500      	movs	r5, #0
 8007c5a:	ea54 0305 	orrs.w	r3, r4, r5
 8007c5e:	d00b      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007c60:	4bca      	ldr	r3, [pc, #808]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c66:	f023 0103 	bic.w	r1, r3, #3
 8007c6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c70:	4ac6      	ldr	r2, [pc, #792]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007c72:	430b      	orrs	r3, r1
 8007c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f002 0802 	and.w	r8, r2, #2
 8007c84:	f04f 0900 	mov.w	r9, #0
 8007c88:	ea58 0309 	orrs.w	r3, r8, r9
 8007c8c:	d00b      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007c8e:	4bbf      	ldr	r3, [pc, #764]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c94:	f023 010c 	bic.w	r1, r3, #12
 8007c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9e:	4abb      	ldr	r2, [pc, #748]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ca6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	f002 0a04 	and.w	sl, r2, #4
 8007cb2:	f04f 0b00 	mov.w	fp, #0
 8007cb6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007cba:	d00b      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007cbc:	4bb3      	ldr	r3, [pc, #716]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cc2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007cc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ccc:	4aaf      	ldr	r2, [pc, #700]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cce:	430b      	orrs	r3, r1
 8007cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f002 0308 	and.w	r3, r2, #8
 8007ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	d00b      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007cf4:	4ba5      	ldr	r3, [pc, #660]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007cfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d04:	4aa1      	ldr	r2, [pc, #644]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d06:	430b      	orrs	r3, r1
 8007d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f002 0310 	and.w	r3, r2, #16
 8007d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d26:	460b      	mov	r3, r1
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	d00b      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007d2c:	4b97      	ldr	r3, [pc, #604]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d3c:	4a93      	ldr	r2, [pc, #588]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d3e:	430b      	orrs	r3, r1
 8007d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f002 0320 	and.w	r3, r2, #32
 8007d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d54:	2300      	movs	r3, #0
 8007d56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4313      	orrs	r3, r2
 8007d62:	d00b      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007d64:	4b89      	ldr	r3, [pc, #548]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d6a:	f023 0107 	bic.w	r1, r3, #7
 8007d6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d74:	4a85      	ldr	r2, [pc, #532]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d76:	430b      	orrs	r3, r1
 8007d78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007d88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d92:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d96:	460b      	mov	r3, r1
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	d00b      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007d9c:	4b7b      	ldr	r3, [pc, #492]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007da2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007da6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007daa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dac:	4a77      	ldr	r2, [pc, #476]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007dae:	430b      	orrs	r3, r1
 8007db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007dc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007dca:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	d00b      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007dd4:	4b6d      	ldr	r3, [pc, #436]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de4:	4a69      	ldr	r2, [pc, #420]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007de6:	430b      	orrs	r3, r1
 8007de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007dec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007df8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e06:	460b      	mov	r3, r1
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	d00b      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007e0c:	4b5f      	ldr	r3, [pc, #380]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007e16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e1c:	4a5b      	ldr	r2, [pc, #364]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e1e:	430b      	orrs	r3, r1
 8007e20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007e30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e34:	2300      	movs	r3, #0
 8007e36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4313      	orrs	r3, r2
 8007e42:	d00b      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007e44:	4b51      	ldr	r3, [pc, #324]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e4a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007e4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e54:	4a4d      	ldr	r2, [pc, #308]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e56:	430b      	orrs	r3, r1
 8007e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e72:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007e76:	460b      	mov	r3, r1
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	d00b      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007e7c:	4b43      	ldr	r3, [pc, #268]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e82:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e8e:	430b      	orrs	r3, r1
 8007e90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007ea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007eaa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	d00b      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007eb4:	4b35      	ldr	r3, [pc, #212]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007eba:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007ebe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ec2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ec4:	4a31      	ldr	r2, [pc, #196]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007ec6:	430b      	orrs	r3, r1
 8007ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007ecc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007eda:	2300      	movs	r3, #0
 8007edc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ede:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	d00c      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007ee8:	4b28      	ldr	r3, [pc, #160]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007eee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ef2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007efa:	4a24      	ldr	r2, [pc, #144]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007efc:	430b      	orrs	r3, r1
 8007efe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007f0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f10:	2300      	movs	r3, #0
 8007f12:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	d04f      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007f1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f26:	2b80      	cmp	r3, #128	@ 0x80
 8007f28:	d02d      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8007f2a:	2b80      	cmp	r3, #128	@ 0x80
 8007f2c:	d827      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f2e:	2b60      	cmp	r3, #96	@ 0x60
 8007f30:	d02e      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007f32:	2b60      	cmp	r3, #96	@ 0x60
 8007f34:	d823      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f36:	2b40      	cmp	r3, #64	@ 0x40
 8007f38:	d006      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8007f3a:	2b40      	cmp	r3, #64	@ 0x40
 8007f3c:	d81f      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d009      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	d011      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007f46:	e01a      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f48:	4b10      	ldr	r3, [pc, #64]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4c:	4a0f      	ldr	r2, [pc, #60]	@ (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f52:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f54:	e01d      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f002 f9d1 	bl	800a304 <RCCEx_PLL2_Config>
 8007f62:	4603      	mov	r3, r0
 8007f64:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f68:	e013      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f6e:	332c      	adds	r3, #44	@ 0x2c
 8007f70:	4618      	mov	r0, r3
 8007f72:	f002 fa5f 	bl	800a434 <RCCEx_PLL3_Config>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f7c:	e009      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007f84:	e005      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8007f86:	bf00      	nop
 8007f88:	e003      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007f8a:	bf00      	nop
 8007f8c:	46020c00 	.word	0x46020c00
        break;
 8007f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f92:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10d      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007f9a:	4bb6      	ldr	r3, [pc, #728]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007f9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fa0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fac:	4ab1      	ldr	r2, [pc, #708]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007fae:	430b      	orrs	r3, r1
 8007fb0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007fb4:	e003      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007fba:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007fbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007fca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fcc:	2300      	movs	r3, #0
 8007fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fd0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	d053      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007fda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fe6:	d033      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fec:	d82c      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007fee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ff2:	d02f      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007ff4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ff8:	d826      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ffe:	d008      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008004:	d820      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800800a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800800e:	d011      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8008010:	e01a      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008012:	4b98      	ldr	r3, [pc, #608]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008016:	4a97      	ldr	r2, [pc, #604]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800801c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800801e:	e01a      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008020:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008024:	3308      	adds	r3, #8
 8008026:	4618      	mov	r0, r3
 8008028:	f002 f96c 	bl	800a304 <RCCEx_PLL2_Config>
 800802c:	4603      	mov	r3, r0
 800802e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008032:	e010      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008038:	332c      	adds	r3, #44	@ 0x2c
 800803a:	4618      	mov	r0, r3
 800803c:	f002 f9fa 	bl	800a434 <RCCEx_PLL3_Config>
 8008040:	4603      	mov	r3, r0
 8008042:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008046:	e006      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800804e:	e002      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8008050:	bf00      	nop
 8008052:	e000      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8008054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008056:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10d      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800805e:	4b85      	ldr	r3, [pc, #532]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008060:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008064:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800806c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008070:	4a80      	ldr	r2, [pc, #512]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008072:	430b      	orrs	r3, r1
 8008074:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008078:	e003      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800807e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008082:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800808e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008090:	2300      	movs	r3, #0
 8008092:	667b      	str	r3, [r7, #100]	@ 0x64
 8008094:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008098:	460b      	mov	r3, r1
 800809a:	4313      	orrs	r3, r2
 800809c:	d046      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800809e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80080a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80080aa:	d028      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80080ac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80080b0:	d821      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80080b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080b6:	d022      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80080b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080bc:	d81b      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80080be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080c2:	d01c      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80080c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080c8:	d815      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80080ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ce:	d008      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80080d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080d4:	d80f      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d011      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80080da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080de:	d00e      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80080e0:	e009      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080e6:	3308      	adds	r3, #8
 80080e8:	4618      	mov	r0, r3
 80080ea:	f002 f90b 	bl	800a304 <RCCEx_PLL2_Config>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80080f4:	e004      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80080fc:	e000      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80080fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008100:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10d      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008108:	4b5a      	ldr	r3, [pc, #360]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800810a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800810e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008112:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008116:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800811a:	4a56      	ldr	r2, [pc, #344]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800811c:	430b      	orrs	r3, r1
 800811e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008122:	e003      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008124:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008128:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800812c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008138:	65bb      	str	r3, [r7, #88]	@ 0x58
 800813a:	2300      	movs	r3, #0
 800813c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800813e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008142:	460b      	mov	r3, r1
 8008144:	4313      	orrs	r3, r2
 8008146:	d03f      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8008148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008150:	2b04      	cmp	r3, #4
 8008152:	d81e      	bhi.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8008154:	a201      	add	r2, pc, #4	@ (adr r2, 800815c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	0800819b 	.word	0x0800819b
 8008160:	08008171 	.word	0x08008171
 8008164:	0800817f 	.word	0x0800817f
 8008168:	0800819b 	.word	0x0800819b
 800816c:	0800819b 	.word	0x0800819b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008170:	4b40      	ldr	r3, [pc, #256]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008174:	4a3f      	ldr	r2, [pc, #252]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800817a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800817c:	e00e      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800817e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008182:	332c      	adds	r3, #44	@ 0x2c
 8008184:	4618      	mov	r0, r3
 8008186:	f002 f955 	bl	800a434 <RCCEx_PLL3_Config>
 800818a:	4603      	mov	r3, r0
 800818c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008190:	e004      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008198:	e000      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800819a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800819c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10d      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80081a4:	4b33      	ldr	r3, [pc, #204]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80081a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081aa:	f023 0107 	bic.w	r1, r3, #7
 80081ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b6:	4a2f      	ldr	r2, [pc, #188]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80081b8:	430b      	orrs	r3, r1
 80081ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80081be:	e003      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80081c4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80081c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80081d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80081d6:	2300      	movs	r3, #0
 80081d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80081da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80081de:	460b      	mov	r3, r1
 80081e0:	4313      	orrs	r3, r2
 80081e2:	d04d      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80081e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081f0:	d028      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x610>
 80081f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081f6:	d821      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80081f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081fc:	d024      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80081fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008202:	d81b      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008204:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008208:	d00e      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800820a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800820e:	d815      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01b      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008218:	d110      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800821a:	4b16      	ldr	r3, [pc, #88]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800821c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821e:	4a15      	ldr	r2, [pc, #84]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008224:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008226:	e012      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008228:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800822c:	332c      	adds	r3, #44	@ 0x2c
 800822e:	4618      	mov	r0, r3
 8008230:	f002 f900 	bl	800a434 <RCCEx_PLL3_Config>
 8008234:	4603      	mov	r3, r0
 8008236:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800823a:	e008      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008242:	e004      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8008244:	bf00      	nop
 8008246:	e002      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8008248:	bf00      	nop
 800824a:	e000      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800824c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800824e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008252:	2b00      	cmp	r3, #0
 8008254:	d110      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8008256:	4b07      	ldr	r3, [pc, #28]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800825c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008268:	4a02      	ldr	r2, [pc, #8]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800826a:	430b      	orrs	r3, r1
 800826c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008270:	e006      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008272:	bf00      	nop
 8008274:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008278:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800827c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008280:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800828c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800828e:	2300      	movs	r3, #0
 8008290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008292:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008296:	460b      	mov	r3, r1
 8008298:	4313      	orrs	r3, r2
 800829a:	f000 80b5 	beq.w	8008408 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800829e:	2300      	movs	r3, #0
 80082a0:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082a4:	4b9d      	ldr	r3, [pc, #628]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d113      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082b2:	4b9a      	ldr	r3, [pc, #616]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082b8:	4a98      	ldr	r2, [pc, #608]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082ba:	f043 0304 	orr.w	r3, r3, #4
 80082be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80082c2:	4b96      	ldr	r3, [pc, #600]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082c8:	f003 0304 	and.w	r3, r3, #4
 80082cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80082d4:	2301      	movs	r3, #1
 80082d6:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80082da:	4b91      	ldr	r3, [pc, #580]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80082dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082de:	4a90      	ldr	r2, [pc, #576]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80082e0:	f043 0301 	orr.w	r3, r3, #1
 80082e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082e6:	f7f9 fdf7 	bl	8001ed8 <HAL_GetTick>
 80082ea:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80082ee:	e00b      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082f0:	f7f9 fdf2 	bl	8001ed8 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d903      	bls.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008306:	e005      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008308:	4b85      	ldr	r3, [pc, #532]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800830a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0ed      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8008314:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008318:	2b00      	cmp	r3, #0
 800831a:	d165      	bne.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800831c:	4b7f      	ldr	r3, [pc, #508]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800831e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800832a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800832e:	2b00      	cmp	r3, #0
 8008330:	d023      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x746>
 8008332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008336:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800833a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800833e:	4293      	cmp	r3, r2
 8008340:	d01b      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008342:	4b76      	ldr	r3, [pc, #472]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800834c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008350:	4b72      	ldr	r3, [pc, #456]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008356:	4a71      	ldr	r2, [pc, #452]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800835c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008360:	4b6e      	ldr	r3, [pc, #440]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008366:	4a6d      	ldr	r2, [pc, #436]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800836c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008370:	4a6a      	ldr	r2, [pc, #424]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008376:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800837a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d019      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008386:	f7f9 fda7 	bl	8001ed8 <HAL_GetTick>
 800838a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800838e:	e00d      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008390:	f7f9 fda2 	bl	8001ed8 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800839a:	1ad2      	subs	r2, r2, r3
 800839c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d903      	bls.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80083aa:	e006      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083ac:	4b5b      	ldr	r3, [pc, #364]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0ea      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80083ba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10d      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80083c2:	4b56      	ldr	r3, [pc, #344]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80083d4:	4a51      	ldr	r2, [pc, #324]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083d6:	430b      	orrs	r3, r1
 80083d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80083dc:	e008      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083de:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80083e2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80083e6:	e003      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80083ec:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80083f0:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d107      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083f8:	4b48      	ldr	r3, [pc, #288]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083fe:	4a47      	ldr	r2, [pc, #284]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008400:	f023 0304 	bic.w	r3, r3, #4
 8008404:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008414:	643b      	str	r3, [r7, #64]	@ 0x40
 8008416:	2300      	movs	r3, #0
 8008418:	647b      	str	r3, [r7, #68]	@ 0x44
 800841a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800841e:	460b      	mov	r3, r1
 8008420:	4313      	orrs	r3, r2
 8008422:	d042      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008428:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800842c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008430:	d022      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8008432:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008436:	d81b      	bhi.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008438:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800843c:	d011      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800843e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008442:	d815      	bhi.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d019      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8008448:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800844c:	d110      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800844e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008452:	3308      	adds	r3, #8
 8008454:	4618      	mov	r0, r3
 8008456:	f001 ff55 	bl	800a304 <RCCEx_PLL2_Config>
 800845a:	4603      	mov	r3, r0
 800845c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008460:	e00d      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008462:	4b2e      	ldr	r3, [pc, #184]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008466:	4a2d      	ldr	r2, [pc, #180]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800846c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800846e:	e006      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008476:	e002      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8008478:	bf00      	nop
 800847a:	e000      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800847c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800847e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10d      	bne.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8008486:	4b25      	ldr	r3, [pc, #148]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800848c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008494:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008498:	4a20      	ldr	r2, [pc, #128]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800849a:	430b      	orrs	r3, r1
 800849c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80084a0:	e003      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80084a6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80084aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80084b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084b8:	2300      	movs	r3, #0
 80084ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80084c0:	460b      	mov	r3, r1
 80084c2:	4313      	orrs	r3, r2
 80084c4:	d032      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80084c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084d2:	d00b      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80084d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084d8:	d804      	bhi.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80084de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084e2:	d007      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80084ea:	e004      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80084ec:	bf00      	nop
 80084ee:	e002      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80084f0:	bf00      	nop
 80084f2:	e000      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80084f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80084f6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d112      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80084fe:	4b07      	ldr	r3, [pc, #28]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008500:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008504:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800850c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008510:	4a02      	ldr	r2, [pc, #8]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008512:	430b      	orrs	r3, r1
 8008514:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008518:	e008      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800851a:	bf00      	nop
 800851c:	46020c00 	.word	0x46020c00
 8008520:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008524:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008528:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800852c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008538:	633b      	str	r3, [r7, #48]	@ 0x30
 800853a:	2300      	movs	r3, #0
 800853c:	637b      	str	r3, [r7, #52]	@ 0x34
 800853e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008542:	460b      	mov	r3, r1
 8008544:	4313      	orrs	r3, r2
 8008546:	d019      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800854c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008554:	d105      	bne.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008556:	4b88      	ldr	r3, [pc, #544]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855a:	4a87      	ldr	r2, [pc, #540]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800855c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008560:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008562:	4b85      	ldr	r3, [pc, #532]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008564:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008568:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800856c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008570:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008574:	4a80      	ldr	r2, [pc, #512]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008576:	430b      	orrs	r3, r1
 8008578:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800857c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800858a:	2300      	movs	r3, #0
 800858c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800858e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008592:	460b      	mov	r3, r1
 8008594:	4313      	orrs	r3, r2
 8008596:	d00c      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008598:	4b77      	ldr	r3, [pc, #476]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800859a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800859e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80085aa:	4973      	ldr	r1, [pc, #460]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80085b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80085be:	623b      	str	r3, [r7, #32]
 80085c0:	2300      	movs	r3, #0
 80085c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085c8:	460b      	mov	r3, r1
 80085ca:	4313      	orrs	r3, r2
 80085cc:	d00c      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80085ce:	4b6a      	ldr	r3, [pc, #424]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085e0:	4965      	ldr	r1, [pc, #404]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80085e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80085f4:	61bb      	str	r3, [r7, #24]
 80085f6:	2300      	movs	r3, #0
 80085f8:	61fb      	str	r3, [r7, #28]
 80085fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80085fe:	460b      	mov	r3, r1
 8008600:	4313      	orrs	r3, r2
 8008602:	d00c      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008604:	4b5c      	ldr	r3, [pc, #368]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800860a:	f023 0218 	bic.w	r2, r3, #24
 800860e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008612:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008616:	4958      	ldr	r1, [pc, #352]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008618:	4313      	orrs	r3, r2
 800861a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800861e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800862a:	613b      	str	r3, [r7, #16]
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008634:	460b      	mov	r3, r1
 8008636:	4313      	orrs	r3, r2
 8008638:	d032      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800863a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800863e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008642:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008646:	d105      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008648:	4b4b      	ldr	r3, [pc, #300]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800864a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864c:	4a4a      	ldr	r2, [pc, #296]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800864e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008652:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008658:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800865c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008660:	d108      	bne.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008662:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008666:	3308      	adds	r3, #8
 8008668:	4618      	mov	r0, r3
 800866a:	f001 fe4b 	bl	800a304 <RCCEx_PLL2_Config>
 800866e:	4603      	mov	r3, r0
 8008670:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8008674:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10d      	bne.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800867c:	4b3e      	ldr	r3, [pc, #248]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800867e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008682:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800868a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800868e:	493a      	ldr	r1, [pc, #232]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008690:	4313      	orrs	r3, r2
 8008692:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008696:	e003      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008698:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800869c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80086a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80086ac:	60bb      	str	r3, [r7, #8]
 80086ae:	2300      	movs	r3, #0
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086b6:	460b      	mov	r3, r1
 80086b8:	4313      	orrs	r3, r2
 80086ba:	d03a      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80086bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086c8:	d00e      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80086ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086ce:	d815      	bhi.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d017      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80086d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086d8:	d110      	bne.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086da:	4b27      	ldr	r3, [pc, #156]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80086dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086de:	4a26      	ldr	r2, [pc, #152]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80086e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086e4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80086e6:	e00e      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086ec:	3308      	adds	r3, #8
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 fe08 	bl	800a304 <RCCEx_PLL2_Config>
 80086f4:	4603      	mov	r3, r0
 80086f6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80086fa:	e004      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008702:	e000      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8008704:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008706:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10d      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800870e:	4b1a      	ldr	r3, [pc, #104]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008714:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800871c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008720:	4915      	ldr	r1, [pc, #84]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008722:	4313      	orrs	r3, r2
 8008724:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008728:	e003      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800872e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008732:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	2300      	movs	r3, #0
 8008742:	607b      	str	r3, [r7, #4]
 8008744:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008748:	460b      	mov	r3, r1
 800874a:	4313      	orrs	r3, r2
 800874c:	d00c      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800874e:	4b0a      	ldr	r3, [pc, #40]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008754:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800875c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008760:	4905      	ldr	r1, [pc, #20]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008762:	4313      	orrs	r3, r2
 8008764:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8008768:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 800876c:	4618      	mov	r0, r3
 800876e:	37e0      	adds	r7, #224	@ 0xe0
 8008770:	46bd      	mov	sp, r7
 8008772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008776:	bf00      	nop
 8008778:	46020c00 	.word	0x46020c00

0800877c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800877c:	b480      	push	{r7}
 800877e:	b089      	sub	sp, #36	@ 0x24
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008784:	4ba6      	ldr	r3, [pc, #664]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800878e:	4ba4      	ldr	r3, [pc, #656]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008798:	4ba1      	ldr	r3, [pc, #644]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800879a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879c:	0a1b      	lsrs	r3, r3, #8
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	3301      	adds	r3, #1
 80087a4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80087a6:	4b9e      	ldr	r3, [pc, #632]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80087a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087aa:	091b      	lsrs	r3, r3, #4
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80087b2:	4b9b      	ldr	r3, [pc, #620]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80087b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b6:	08db      	lsrs	r3, r3, #3
 80087b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	fb02 f303 	mul.w	r3, r2, r3
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d062      	beq.n	800889a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	f200 8081 	bhi.w	80088de <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d024      	beq.n	800882c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d17a      	bne.n	80088de <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80087f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fa:	4b89      	ldr	r3, [pc, #548]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80087fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800880a:	ed97 6a02 	vldr	s12, [r7, #8]
 800880e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008812:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008816:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800881a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800881e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008826:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800882a:	e08f      	b.n	800894c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800882c:	4b7c      	ldr	r3, [pc, #496]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008838:	4b79      	ldr	r3, [pc, #484]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	0f1b      	lsrs	r3, r3, #28
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	e006      	b.n	8008852 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8008844:	4b76      	ldr	r3, [pc, #472]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008846:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800884a:	041b      	lsls	r3, r3, #16
 800884c:	0f1b      	lsrs	r3, r3, #28
 800884e:	f003 030f 	and.w	r3, r3, #15
 8008852:	4a76      	ldr	r2, [pc, #472]	@ (8008a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	ee07 3a90 	vmov	s15, r3
 8008866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008878:	ed97 6a02 	vldr	s12, [r7, #8]
 800887c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800888c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008894:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008898:	e058      	b.n	800894c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80088a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b4:	ee07 3a90 	vmov	s15, r3
 80088b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80088bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80088c0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80088c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80088cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088dc:	e036      	b.n	800894c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80088de:	4b50      	ldr	r3, [pc, #320]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80088ea:	4b4d      	ldr	r3, [pc, #308]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	0f1b      	lsrs	r3, r3, #28
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	e006      	b.n	8008904 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80088f6:	4b4a      	ldr	r3, [pc, #296]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088fc:	041b      	lsls	r3, r3, #16
 80088fe:	0f1b      	lsrs	r3, r3, #28
 8008900:	f003 030f 	and.w	r3, r3, #15
 8008904:	4a49      	ldr	r2, [pc, #292]	@ (8008a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	ee07 3a90 	vmov	s15, r3
 8008918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892a:	ed97 6a02 	vldr	s12, [r7, #8]
 800892e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800893e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800894a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800894c:	4b34      	ldr	r3, [pc, #208]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800894e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d017      	beq.n	8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008958:	4b31      	ldr	r3, [pc, #196]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800895a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800895c:	0a5b      	lsrs	r3, r3, #9
 800895e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800896a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800896e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008972:	edd7 6a07 	vldr	s13, [r7, #28]
 8008976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800897a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800897e:	ee17 2a90 	vmov	r2, s15
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	e002      	b.n	800898e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800898e:	4b24      	ldr	r3, [pc, #144]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d017      	beq.n	80089ca <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800899a:	4b21      	ldr	r3, [pc, #132]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800899c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800899e:	0c1b      	lsrs	r3, r3, #16
 80089a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089a4:	ee07 3a90 	vmov	s15, r3
 80089a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80089ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089b0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089c0:	ee17 2a90 	vmov	r2, s15
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	605a      	str	r2, [r3, #4]
 80089c8:	e002      	b.n	80089d0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80089d0:	4b13      	ldr	r3, [pc, #76]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d017      	beq.n	8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089dc:	4b10      	ldr	r3, [pc, #64]	@ (8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e0:	0e1b      	lsrs	r3, r3, #24
 80089e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80089ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a02:	ee17 2a90 	vmov	r2, s15
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a0a:	e002      	b.n	8008a12 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	609a      	str	r2, [r3, #8]
}
 8008a12:	bf00      	nop
 8008a14:	3724      	adds	r7, #36	@ 0x24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	46020c00 	.word	0x46020c00
 8008a24:	4b742400 	.word	0x4b742400
 8008a28:	46000000 	.word	0x46000000
 8008a2c:	0802e838 	.word	0x0802e838

08008a30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b089      	sub	sp, #36	@ 0x24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008a38:	4ba6      	ldr	r3, [pc, #664]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a40:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008a42:	4ba4      	ldr	r3, [pc, #656]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a46:	f003 0303 	and.w	r3, r3, #3
 8008a4a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008a4c:	4ba1      	ldr	r3, [pc, #644]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a50:	0a1b      	lsrs	r3, r3, #8
 8008a52:	f003 030f 	and.w	r3, r3, #15
 8008a56:	3301      	adds	r3, #1
 8008a58:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008a5a:	4b9e      	ldr	r3, [pc, #632]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5e:	091b      	lsrs	r3, r3, #4
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008a66:	4b9b      	ldr	r3, [pc, #620]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6a:	08db      	lsrs	r3, r3, #3
 8008a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	fb02 f303 	mul.w	r3, r2, r3
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d062      	beq.n	8008b4e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	f200 8081 	bhi.w	8008b92 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d024      	beq.n	8008ae0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d17a      	bne.n	8008b92 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aae:	4b89      	ldr	r3, [pc, #548]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ac2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ada:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ade:	e08f      	b.n	8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008ae0:	4b7c      	ldr	r3, [pc, #496]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d005      	beq.n	8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008aec:	4b79      	ldr	r3, [pc, #484]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	0f1b      	lsrs	r3, r3, #28
 8008af2:	f003 030f 	and.w	r3, r3, #15
 8008af6:	e006      	b.n	8008b06 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008af8:	4b76      	ldr	r3, [pc, #472]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008afe:	041b      	lsls	r3, r3, #16
 8008b00:	0f1b      	lsrs	r3, r3, #28
 8008b02:	f003 030f 	and.w	r3, r3, #15
 8008b06:	4a76      	ldr	r2, [pc, #472]	@ (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b0c:	ee07 3a90 	vmov	s15, r3
 8008b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	ee07 3a90 	vmov	s15, r3
 8008b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b30:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b4c:	e058      	b.n	8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	ee07 3a90 	vmov	s15, r3
 8008b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b58:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008b5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b60:	4b5c      	ldr	r3, [pc, #368]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b68:	ee07 3a90 	vmov	s15, r3
 8008b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b70:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b74:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008b78:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b90:	e036      	b.n	8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008b92:	4b50      	ldr	r3, [pc, #320]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	0f1b      	lsrs	r3, r3, #28
 8008ba4:	f003 030f 	and.w	r3, r3, #15
 8008ba8:	e006      	b.n	8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8008baa:	4b4a      	ldr	r3, [pc, #296]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008bb0:	041b      	lsls	r3, r3, #16
 8008bb2:	0f1b      	lsrs	r3, r3, #28
 8008bb4:	f003 030f 	and.w	r3, r3, #15
 8008bb8:	4a49      	ldr	r2, [pc, #292]	@ (8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	ee07 3a90 	vmov	s15, r3
 8008bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8008be2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bfe:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008c00:	4b34      	ldr	r3, [pc, #208]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d017      	beq.n	8008c3c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c0c:	4b31      	ldr	r3, [pc, #196]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c10:	0a5b      	lsrs	r3, r3, #9
 8008c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008c1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c22:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c32:	ee17 2a90 	vmov	r2, s15
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e002      	b.n	8008c42 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008c42:	4b24      	ldr	r3, [pc, #144]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d017      	beq.n	8008c7e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c4e:	4b21      	ldr	r3, [pc, #132]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c52:	0c1b      	lsrs	r3, r3, #16
 8008c54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c58:	ee07 3a90 	vmov	s15, r3
 8008c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008c60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c64:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c74:	ee17 2a90 	vmov	r2, s15
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	605a      	str	r2, [r3, #4]
 8008c7c:	e002      	b.n	8008c84 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008c84:	4b13      	ldr	r3, [pc, #76]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d017      	beq.n	8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c90:	4b10      	ldr	r3, [pc, #64]	@ (8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c94:	0e1b      	lsrs	r3, r3, #24
 8008c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008ca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb6:	ee17 2a90 	vmov	r2, s15
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008cbe:	e002      	b.n	8008cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	609a      	str	r2, [r3, #8]
}
 8008cc6:	bf00      	nop
 8008cc8:	3724      	adds	r7, #36	@ 0x24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	46020c00 	.word	0x46020c00
 8008cd8:	4b742400 	.word	0x4b742400
 8008cdc:	46000000 	.word	0x46000000
 8008ce0:	0802e838 	.word	0x0802e838

08008ce4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b089      	sub	sp, #36	@ 0x24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008cec:	4ba6      	ldr	r3, [pc, #664]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008cf6:	4ba4      	ldr	r3, [pc, #656]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008d00:	4ba1      	ldr	r3, [pc, #644]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d04:	0a1b      	lsrs	r3, r3, #8
 8008d06:	f003 030f 	and.w	r3, r3, #15
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008d0e:	4b9e      	ldr	r3, [pc, #632]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d12:	091b      	lsrs	r3, r3, #4
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008d1a:	4b9b      	ldr	r3, [pc, #620]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d1e:	08db      	lsrs	r3, r3, #3
 8008d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	fb02 f303 	mul.w	r3, r2, r3
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d32:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d062      	beq.n	8008e02 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	f200 8081 	bhi.w	8008e46 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d024      	beq.n	8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d17a      	bne.n	8008e46 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d62:	4b89      	ldr	r3, [pc, #548]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d76:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8008d92:	e08f      	b.n	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008d94:	4b7c      	ldr	r3, [pc, #496]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008da0:	4b79      	ldr	r3, [pc, #484]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	0f1b      	lsrs	r3, r3, #28
 8008da6:	f003 030f 	and.w	r3, r3, #15
 8008daa:	e006      	b.n	8008dba <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008dac:	4b76      	ldr	r3, [pc, #472]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008db2:	041b      	lsls	r3, r3, #16
 8008db4:	0f1b      	lsrs	r3, r3, #28
 8008db6:	f003 030f 	and.w	r3, r3, #15
 8008dba:	4a76      	ldr	r2, [pc, #472]	@ (8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dc0:	ee07 3a90 	vmov	s15, r3
 8008dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	ee07 3a90 	vmov	s15, r3
 8008ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de0:	ed97 6a02 	vldr	s12, [r7, #8]
 8008de4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e00:	e058      	b.n	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	ee07 3a90 	vmov	s15, r3
 8008e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e14:	4b5c      	ldr	r3, [pc, #368]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1c:	ee07 3a90 	vmov	s15, r3
 8008e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e24:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e28:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e44:	e036      	b.n	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008e46:	4b50      	ldr	r3, [pc, #320]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008e52:	4b4d      	ldr	r3, [pc, #308]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	0f1b      	lsrs	r3, r3, #28
 8008e58:	f003 030f 	and.w	r3, r3, #15
 8008e5c:	e006      	b.n	8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e64:	041b      	lsls	r3, r3, #16
 8008e66:	0f1b      	lsrs	r3, r3, #28
 8008e68:	f003 030f 	and.w	r3, r3, #15
 8008e6c:	4a49      	ldr	r2, [pc, #292]	@ (8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	ee07 3a90 	vmov	s15, r3
 8008e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e96:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eb2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008eb4:	4b34      	ldr	r3, [pc, #208]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d017      	beq.n	8008ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008ec0:	4b31      	ldr	r3, [pc, #196]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec4:	0a5b      	lsrs	r3, r3, #9
 8008ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eca:	ee07 3a90 	vmov	s15, r3
 8008ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008ed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ee6:	ee17 2a90 	vmov	r2, s15
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	e002      	b.n	8008ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008ef6:	4b24      	ldr	r3, [pc, #144]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d017      	beq.n	8008f32 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f02:	4b21      	ldr	r3, [pc, #132]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f06:	0c1b      	lsrs	r3, r3, #16
 8008f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f0c:	ee07 3a90 	vmov	s15, r3
 8008f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008f14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f18:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f28:	ee17 2a90 	vmov	r2, s15
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]
 8008f30:	e002      	b.n	8008f38 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008f38:	4b13      	ldr	r3, [pc, #76]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d017      	beq.n	8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f44:	4b10      	ldr	r3, [pc, #64]	@ (8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f48:	0e1b      	lsrs	r3, r3, #24
 8008f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008f56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f6a:	ee17 2a90 	vmov	r2, s15
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008f72:	e002      	b.n	8008f7a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	609a      	str	r2, [r3, #8]
}
 8008f7a:	bf00      	nop
 8008f7c:	3724      	adds	r7, #36	@ 0x24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	46020c00 	.word	0x46020c00
 8008f8c:	4b742400 	.word	0x4b742400
 8008f90:	46000000 	.word	0x46000000
 8008f94:	0802e838 	.word	0x0802e838

08008f98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08e      	sub	sp, #56	@ 0x38
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008faa:	430b      	orrs	r3, r1
 8008fac:	d145      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008fae:	4baa      	ldr	r3, [pc, #680]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fb8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008fba:	4ba7      	ldr	r3, [pc, #668]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d108      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fce:	d104      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008fd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd6:	f001 b987 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008fda:	4b9f      	ldr	r3, [pc, #636]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fe4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fe8:	d114      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ff0:	d110      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ff2:	4b99      	ldr	r3, [pc, #612]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009000:	d103      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8009002:	23fa      	movs	r3, #250	@ 0xfa
 8009004:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009006:	f001 b96f 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800900a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800900e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009010:	f001 b96a 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8009014:	4b90      	ldr	r3, [pc, #576]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800901c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009020:	d107      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009028:	d103      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800902a:	4b8c      	ldr	r3, [pc, #560]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800902c:	637b      	str	r3, [r7, #52]	@ 0x34
 800902e:	f001 b95b 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	637b      	str	r3, [r7, #52]	@ 0x34
 8009036:	f001 b957 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800903a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800903e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009042:	430b      	orrs	r3, r1
 8009044:	d151      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009046:	4b84      	ldr	r3, [pc, #528]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009048:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800904c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8009050:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	2b80      	cmp	r3, #128	@ 0x80
 8009056:	d035      	beq.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8009058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905a:	2b80      	cmp	r3, #128	@ 0x80
 800905c:	d841      	bhi.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800905e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009060:	2b60      	cmp	r3, #96	@ 0x60
 8009062:	d02a      	beq.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009066:	2b60      	cmp	r3, #96	@ 0x60
 8009068:	d83b      	bhi.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800906a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906c:	2b40      	cmp	r3, #64	@ 0x40
 800906e:	d009      	beq.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009072:	2b40      	cmp	r3, #64	@ 0x40
 8009074:	d835      	bhi.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00c      	beq.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800907c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907e:	2b20      	cmp	r3, #32
 8009080:	d012      	beq.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009082:	e02e      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009088:	4618      	mov	r0, r3
 800908a:	f7ff fb77 	bl	800877c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009092:	f001 b929 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009096:	f107 0318 	add.w	r3, r7, #24
 800909a:	4618      	mov	r0, r3
 800909c:	f7ff fcc8 	bl	8008a30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090a4:	f001 b920 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090a8:	f107 030c 	add.w	r3, r7, #12
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7ff fe19 	bl	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090b6:	f001 b917 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80090ba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80090be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090c0:	f001 b912 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090c4:	4b64      	ldr	r3, [pc, #400]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090d0:	d103      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80090d2:	4b63      	ldr	r3, [pc, #396]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80090d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80090d6:	f001 b907 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090de:	f001 b903 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090e6:	f001 b8ff 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80090ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ee:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80090f2:	430b      	orrs	r3, r1
 80090f4:	d158      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80090f6:	4b58      	ldr	r3, [pc, #352]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80090f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009100:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009108:	d03b      	beq.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800910a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009110:	d846      	bhi.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009118:	d02e      	beq.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009120:	d83e      	bhi.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009128:	d00b      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009130:	d836      	bhi.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00d      	beq.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800913e:	d012      	beq.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009140:	e02e      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff fb18 	bl	800877c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800914c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009150:	f001 b8ca 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009154:	f107 0318 	add.w	r3, r7, #24
 8009158:	4618      	mov	r0, r3
 800915a:	f7ff fc69 	bl	8008a30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009162:	f001 b8c1 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009166:	f107 030c 	add.w	r3, r7, #12
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fdba 	bl	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009174:	f001 b8b8 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009178:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800917c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800917e:	f001 b8b3 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009182:	4b35      	ldr	r3, [pc, #212]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800918a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800918e:	d103      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009190:	4b33      	ldr	r3, [pc, #204]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009192:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009194:	f001 b8a8 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800919c:	f001 b8a4 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091a4:	f001 b8a0 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80091a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ac:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80091b0:	430b      	orrs	r3, r1
 80091b2:	d16e      	bne.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80091b4:	4b28      	ldr	r3, [pc, #160]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80091b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091ba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80091be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80091c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80091c6:	d034      	beq.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80091c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80091ce:	d85c      	bhi.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80091d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091d6:	d00b      	beq.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80091d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091de:	d854      	bhi.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80091e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d016      	beq.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80091e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091ec:	d009      	beq.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80091ee:	e04c      	b.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7ff fac1 	bl	800877c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80091fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091fe:	f001 b873 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009202:	f107 0318 	add.w	r3, r7, #24
 8009206:	4618      	mov	r0, r3
 8009208:	f7ff fc12 	bl	8008a30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009210:	f001 b86a 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009214:	4b10      	ldr	r3, [pc, #64]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800921c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009220:	d103      	bne.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8009222:	4b10      	ldr	r3, [pc, #64]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009224:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009226:	f001 b85f 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800922e:	f001 b85b 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009232:	4b09      	ldr	r3, [pc, #36]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b20      	cmp	r3, #32
 800923c:	d121      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800923e:	4b06      	ldr	r3, [pc, #24]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00e      	beq.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800924a:	4b03      	ldr	r3, [pc, #12]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	0e1b      	lsrs	r3, r3, #24
 8009250:	f003 030f 	and.w	r3, r3, #15
 8009254:	e00f      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009256:	bf00      	nop
 8009258:	46020c00 	.word	0x46020c00
 800925c:	0007a120 	.word	0x0007a120
 8009260:	00f42400 	.word	0x00f42400
 8009264:	02dc6c00 	.word	0x02dc6c00
 8009268:	4ba7      	ldr	r3, [pc, #668]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800926a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800926e:	041b      	lsls	r3, r3, #16
 8009270:	0e1b      	lsrs	r3, r3, #24
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	4aa5      	ldr	r2, [pc, #660]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800927c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800927e:	f001 b833 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009282:	2300      	movs	r3, #0
 8009284:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009286:	f001 b82f 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800928a:	2300      	movs	r3, #0
 800928c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800928e:	f001 b82b 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009296:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800929a:	430b      	orrs	r3, r1
 800929c:	d17f      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800929e:	4b9a      	ldr	r3, [pc, #616]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80092a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092a8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80092aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d165      	bne.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80092b0:	4b95      	ldr	r3, [pc, #596]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80092b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092b6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80092ba:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80092c2:	d034      	beq.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80092ca:	d853      	bhi.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092d2:	d00b      	beq.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80092d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092da:	d84b      	bhi.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80092dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d016      	beq.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80092e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092e8:	d009      	beq.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80092ea:	e043      	b.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff fa43 	bl	800877c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80092fa:	f000 bff5 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092fe:	f107 0318 	add.w	r3, r7, #24
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff fb94 	bl	8008a30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800930c:	f000 bfec 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009310:	4b7d      	ldr	r3, [pc, #500]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800931c:	d103      	bne.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800931e:	4b7c      	ldr	r3, [pc, #496]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8009320:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009322:	f000 bfe1 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8009326:	2300      	movs	r3, #0
 8009328:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800932a:	f000 bfdd 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800932e:	4b76      	ldr	r3, [pc, #472]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b20      	cmp	r3, #32
 8009338:	d118      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800933a:	4b73      	ldr	r3, [pc, #460]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d005      	beq.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8009346:	4b70      	ldr	r3, [pc, #448]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	0e1b      	lsrs	r3, r3, #24
 800934c:	f003 030f 	and.w	r3, r3, #15
 8009350:	e006      	b.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8009352:	4b6d      	ldr	r3, [pc, #436]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009354:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009358:	041b      	lsls	r3, r3, #16
 800935a:	0e1b      	lsrs	r3, r3, #24
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	4a6a      	ldr	r2, [pc, #424]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009366:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009368:	f000 bfbe 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009370:	f000 bfba 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8009374:	2300      	movs	r3, #0
 8009376:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009378:	f000 bfb6 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009382:	d108      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009388:	4618      	mov	r0, r3
 800938a:	f7ff f9f7 	bl	800877c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009390:	637b      	str	r3, [r7, #52]	@ 0x34
 8009392:	f000 bfa9 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8009396:	2300      	movs	r3, #0
 8009398:	637b      	str	r3, [r7, #52]	@ 0x34
 800939a:	f000 bfa5 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800939e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a2:	1e51      	subs	r1, r2, #1
 80093a4:	430b      	orrs	r3, r1
 80093a6:	d136      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80093a8:	4b57      	ldr	r3, [pc, #348]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80093aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093ae:	f003 0303 	and.w	r3, r3, #3
 80093b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80093b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d104      	bne.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80093ba:	f7fe fb55 	bl	8007a68 <HAL_RCC_GetPCLK2Freq>
 80093be:	6378      	str	r0, [r7, #52]	@ 0x34
 80093c0:	f000 bf92 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d104      	bne.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80093ca:	f7fe fa1d 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 80093ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80093d0:	f000 bf8a 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80093d4:	4b4c      	ldr	r3, [pc, #304]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093e0:	d106      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d103      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80093e8:	4b4a      	ldr	r3, [pc, #296]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80093ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ec:	f000 bf7c 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80093f0:	4b45      	ldr	r3, [pc, #276]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80093f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093f6:	f003 0302 	and.w	r3, r3, #2
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d107      	bne.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	2b03      	cmp	r3, #3
 8009402:	d104      	bne.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8009404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009408:	637b      	str	r3, [r7, #52]	@ 0x34
 800940a:	f000 bf6d 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800940e:	2300      	movs	r3, #0
 8009410:	637b      	str	r3, [r7, #52]	@ 0x34
 8009412:	f000 bf69 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8009416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800941a:	1e91      	subs	r1, r2, #2
 800941c:	430b      	orrs	r3, r1
 800941e:	d136      	bne.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009420:	4b39      	ldr	r3, [pc, #228]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009426:	f003 030c 	and.w	r3, r3, #12
 800942a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800942c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942e:	2b00      	cmp	r3, #0
 8009430:	d104      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009432:	f7fe fb05 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8009436:	6378      	str	r0, [r7, #52]	@ 0x34
 8009438:	f000 bf56 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800943c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943e:	2b04      	cmp	r3, #4
 8009440:	d104      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009442:	f7fe f9e1 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8009446:	6378      	str	r0, [r7, #52]	@ 0x34
 8009448:	f000 bf4e 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800944c:	4b2e      	ldr	r3, [pc, #184]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009458:	d106      	bne.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800945a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945c:	2b08      	cmp	r3, #8
 800945e:	d103      	bne.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8009460:	4b2c      	ldr	r3, [pc, #176]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009462:	637b      	str	r3, [r7, #52]	@ 0x34
 8009464:	f000 bf40 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009468:	4b27      	ldr	r3, [pc, #156]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800946a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b02      	cmp	r3, #2
 8009474:	d107      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8009476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009478:	2b0c      	cmp	r3, #12
 800947a:	d104      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 800947c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009480:	637b      	str	r3, [r7, #52]	@ 0x34
 8009482:	f000 bf31 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	637b      	str	r3, [r7, #52]	@ 0x34
 800948a:	f000 bf2d 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800948e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009492:	1f11      	subs	r1, r2, #4
 8009494:	430b      	orrs	r3, r1
 8009496:	d13f      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009498:	4b1b      	ldr	r3, [pc, #108]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800949a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800949e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80094a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d104      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80094aa:	f7fe fac9 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 80094ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80094b0:	f000 bf1a 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80094b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b6:	2b10      	cmp	r3, #16
 80094b8:	d104      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094ba:	f7fe f9a5 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 80094be:	6378      	str	r0, [r7, #52]	@ 0x34
 80094c0:	f000 bf12 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80094c4:	4b10      	ldr	r3, [pc, #64]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d0:	d106      	bne.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	2b20      	cmp	r3, #32
 80094d6:	d103      	bne.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80094d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80094da:	637b      	str	r3, [r7, #52]	@ 0x34
 80094dc:	f000 bf04 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80094e0:	4b09      	ldr	r3, [pc, #36]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d107      	bne.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80094ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f0:	2b30      	cmp	r3, #48	@ 0x30
 80094f2:	d104      	bne.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80094f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094fa:	f000 bef5 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80094fe:	2300      	movs	r3, #0
 8009500:	637b      	str	r3, [r7, #52]	@ 0x34
 8009502:	f000 bef1 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009506:	bf00      	nop
 8009508:	46020c00 	.word	0x46020c00
 800950c:	0802e838 	.word	0x0802e838
 8009510:	02dc6c00 	.word	0x02dc6c00
 8009514:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800951c:	f1a2 0108 	sub.w	r1, r2, #8
 8009520:	430b      	orrs	r3, r1
 8009522:	d136      	bne.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009524:	4ba4      	ldr	r3, [pc, #656]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800952a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800952e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009532:	2b00      	cmp	r3, #0
 8009534:	d104      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009536:	f7fe fa83 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 800953a:	6378      	str	r0, [r7, #52]	@ 0x34
 800953c:	f000 bed4 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009542:	2b40      	cmp	r3, #64	@ 0x40
 8009544:	d104      	bne.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009546:	f7fe f95f 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 800954a:	6378      	str	r0, [r7, #52]	@ 0x34
 800954c:	f000 becc 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009550:	4b99      	ldr	r3, [pc, #612]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800955c:	d106      	bne.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	2b80      	cmp	r3, #128	@ 0x80
 8009562:	d103      	bne.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8009564:	4b95      	ldr	r3, [pc, #596]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009566:	637b      	str	r3, [r7, #52]	@ 0x34
 8009568:	f000 bebe 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800956c:	4b92      	ldr	r3, [pc, #584]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800956e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b02      	cmp	r3, #2
 8009578:	d107      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	2bc0      	cmp	r3, #192	@ 0xc0
 800957e:	d104      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8009580:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009584:	637b      	str	r3, [r7, #52]	@ 0x34
 8009586:	f000 beaf 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	637b      	str	r3, [r7, #52]	@ 0x34
 800958e:	f000 beab 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8009592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009596:	f1a2 0110 	sub.w	r1, r2, #16
 800959a:	430b      	orrs	r3, r1
 800959c:	d139      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800959e:	4b86      	ldr	r3, [pc, #536]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80095aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d104      	bne.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80095b0:	f7fe fa46 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 80095b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80095b6:	f000 be97 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80095ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095c0:	d104      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80095c2:	f7fe f921 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 80095c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80095c8:	f000 be8e 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80095cc:	4b7a      	ldr	r3, [pc, #488]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095d8:	d107      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80095da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095e0:	d103      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80095e2:	4b76      	ldr	r3, [pc, #472]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80095e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095e6:	f000 be7f 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80095ea:	4b73      	ldr	r3, [pc, #460]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095f0:	f003 0302 	and.w	r3, r3, #2
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d108      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80095f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095fe:	d104      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8009600:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009604:	637b      	str	r3, [r7, #52]	@ 0x34
 8009606:	f000 be6f 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	637b      	str	r3, [r7, #52]	@ 0x34
 800960e:	f000 be6b 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8009612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009616:	f1a2 0120 	sub.w	r1, r2, #32
 800961a:	430b      	orrs	r3, r1
 800961c:	d158      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800961e:	4b66      	ldr	r3, [pc, #408]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009624:	f003 0307 	and.w	r3, r3, #7
 8009628:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800962a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962c:	2b00      	cmp	r3, #0
 800962e:	d104      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8009630:	f7fe fa2e 	bl	8007a90 <HAL_RCC_GetPCLK3Freq>
 8009634:	6378      	str	r0, [r7, #52]	@ 0x34
 8009636:	f000 be57 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800963a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963c:	2b01      	cmp	r3, #1
 800963e:	d104      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009640:	f7fe f8e2 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8009644:	6378      	str	r0, [r7, #52]	@ 0x34
 8009646:	f000 be4f 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800964a:	4b5b      	ldr	r3, [pc, #364]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009656:	d106      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	2b02      	cmp	r3, #2
 800965c:	d103      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800965e:	4b57      	ldr	r3, [pc, #348]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009660:	637b      	str	r3, [r7, #52]	@ 0x34
 8009662:	f000 be41 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009666:	4b54      	ldr	r3, [pc, #336]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b02      	cmp	r3, #2
 8009672:	d107      	bne.n	8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8009674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009676:	2b03      	cmp	r3, #3
 8009678:	d104      	bne.n	8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800967a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800967e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009680:	f000 be32 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009684:	4b4c      	ldr	r3, [pc, #304]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0320 	and.w	r3, r3, #32
 800968c:	2b20      	cmp	r3, #32
 800968e:	d11b      	bne.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8009690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009692:	2b04      	cmp	r3, #4
 8009694:	d118      	bne.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009696:	4b48      	ldr	r3, [pc, #288]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d005      	beq.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80096a2:	4b45      	ldr	r3, [pc, #276]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	0e1b      	lsrs	r3, r3, #24
 80096a8:	f003 030f 	and.w	r3, r3, #15
 80096ac:	e006      	b.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80096ae:	4b42      	ldr	r3, [pc, #264]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096b4:	041b      	lsls	r3, r3, #16
 80096b6:	0e1b      	lsrs	r3, r3, #24
 80096b8:	f003 030f 	and.w	r3, r3, #15
 80096bc:	4a40      	ldr	r2, [pc, #256]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80096be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80096c4:	f000 be10 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80096c8:	2300      	movs	r3, #0
 80096ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80096cc:	f000 be0c 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80096d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096d4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80096d8:	430b      	orrs	r3, r1
 80096da:	d173      	bne.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80096dc:	4b36      	ldr	r3, [pc, #216]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096e2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80096e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80096e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ee:	d104      	bne.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80096f0:	f7fe f88a 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 80096f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80096f6:	f000 bdf7 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009700:	d108      	bne.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009702:	f107 0318 	add.w	r3, r7, #24
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff f992 	bl	8008a30 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009710:	f000 bdea 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009716:	2b00      	cmp	r3, #0
 8009718:	d104      	bne.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800971a:	f7fe f977 	bl	8007a0c <HAL_RCC_GetHCLKFreq>
 800971e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009720:	f000 bde2 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009726:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800972a:	d122      	bne.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800972c:	4b22      	ldr	r3, [pc, #136]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 0320 	and.w	r3, r3, #32
 8009734:	2b20      	cmp	r3, #32
 8009736:	d118      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009738:	4b1f      	ldr	r3, [pc, #124]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8009744:	4b1c      	ldr	r3, [pc, #112]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	0e1b      	lsrs	r3, r3, #24
 800974a:	f003 030f 	and.w	r3, r3, #15
 800974e:	e006      	b.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8009750:	4b19      	ldr	r3, [pc, #100]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009756:	041b      	lsls	r3, r3, #16
 8009758:	0e1b      	lsrs	r3, r3, #24
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	4a18      	ldr	r2, [pc, #96]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8009760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009764:	637b      	str	r3, [r7, #52]	@ 0x34
 8009766:	f000 bdbf 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800976a:	2300      	movs	r3, #0
 800976c:	637b      	str	r3, [r7, #52]	@ 0x34
 800976e:	f000 bdbb 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009772:	4b11      	ldr	r3, [pc, #68]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800977a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800977e:	d107      	bne.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8009780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009782:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009786:	d103      	bne.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8009788:	4b0c      	ldr	r3, [pc, #48]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800978a:	637b      	str	r3, [r7, #52]	@ 0x34
 800978c:	f000 bdac 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009790:	4b09      	ldr	r3, [pc, #36]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800979c:	d107      	bne.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800979e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a4:	d103      	bne.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80097a6:	4b05      	ldr	r3, [pc, #20]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80097a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097aa:	f000 bd9d 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80097ae:	2300      	movs	r3, #0
 80097b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80097b2:	f000 bd99 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80097b6:	bf00      	nop
 80097b8:	46020c00 	.word	0x46020c00
 80097bc:	00f42400 	.word	0x00f42400
 80097c0:	0802e838 	.word	0x0802e838
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80097c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097c8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80097cc:	430b      	orrs	r3, r1
 80097ce:	d158      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80097d0:	4bad      	ldr	r3, [pc, #692]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80097d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80097d6:	f003 0307 	and.w	r3, r3, #7
 80097da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80097dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d84b      	bhi.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80097e2:	a201      	add	r2, pc, #4	@ (adr r2, 80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80097e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e8:	08009821 	.word	0x08009821
 80097ec:	080097fd 	.word	0x080097fd
 80097f0:	0800980f 	.word	0x0800980f
 80097f4:	0800982b 	.word	0x0800982b
 80097f8:	08009835 	.word	0x08009835
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009800:	4618      	mov	r0, r3
 8009802:	f7fe ffbb 	bl	800877c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800980a:	f000 bd6d 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800980e:	f107 030c 	add.w	r3, r7, #12
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff fa66 	bl	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800981c:	f000 bd64 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009820:	f7fe f8f4 	bl	8007a0c <HAL_RCC_GetHCLKFreq>
 8009824:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009826:	f000 bd5f 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800982a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800982e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009830:	f000 bd5a 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009834:	4b94      	ldr	r3, [pc, #592]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0320 	and.w	r3, r3, #32
 800983c:	2b20      	cmp	r3, #32
 800983e:	d118      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009840:	4b91      	ldr	r3, [pc, #580]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d005      	beq.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 800984c:	4b8e      	ldr	r3, [pc, #568]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	0e1b      	lsrs	r3, r3, #24
 8009852:	f003 030f 	and.w	r3, r3, #15
 8009856:	e006      	b.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8009858:	4b8b      	ldr	r3, [pc, #556]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800985a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800985e:	041b      	lsls	r3, r3, #16
 8009860:	0e1b      	lsrs	r3, r3, #24
 8009862:	f003 030f 	and.w	r3, r3, #15
 8009866:	4a89      	ldr	r2, [pc, #548]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800986e:	f000 bd3b 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009872:	2300      	movs	r3, #0
 8009874:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009876:	f000 bd37 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800987e:	f000 bd33 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009882:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009886:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800988a:	430b      	orrs	r3, r1
 800988c:	d167      	bne.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800988e:	4b7e      	ldr	r3, [pc, #504]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009894:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009898:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800989a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098a0:	d036      	beq.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80098a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098a8:	d855      	bhi.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098b0:	d029      	beq.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80098b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098b8:	d84d      	bhi.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098c0:	d013      	beq.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098c8:	d845      	bhi.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d015      	beq.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80098d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098d6:	d13e      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fe ff4d 	bl	800877c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80098e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098e6:	f000 bcff 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ea:	f107 030c 	add.w	r3, r7, #12
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff f9f8 	bl	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098f8:	f000 bcf6 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80098fc:	f7fe f886 	bl	8007a0c <HAL_RCC_GetHCLKFreq>
 8009900:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009902:	f000 bcf1 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009906:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800990a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800990c:	f000 bcec 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009910:	4b5d      	ldr	r3, [pc, #372]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0320 	and.w	r3, r3, #32
 8009918:	2b20      	cmp	r3, #32
 800991a:	d118      	bne.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800991c:	4b5a      	ldr	r3, [pc, #360]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d005      	beq.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8009928:	4b57      	ldr	r3, [pc, #348]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	0e1b      	lsrs	r3, r3, #24
 800992e:	f003 030f 	and.w	r3, r3, #15
 8009932:	e006      	b.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8009934:	4b54      	ldr	r3, [pc, #336]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009936:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800993a:	041b      	lsls	r3, r3, #16
 800993c:	0e1b      	lsrs	r3, r3, #24
 800993e:	f003 030f 	and.w	r3, r3, #15
 8009942:	4a52      	ldr	r2, [pc, #328]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009948:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800994a:	f000 bccd 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800994e:	2300      	movs	r3, #0
 8009950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009952:	f000 bcc9 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009956:	2300      	movs	r3, #0
 8009958:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800995a:	f000 bcc5 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800995e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009962:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009966:	430b      	orrs	r3, r1
 8009968:	d14c      	bne.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800996a:	4b47      	ldr	r3, [pc, #284]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800996c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009970:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009974:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009978:	2b00      	cmp	r3, #0
 800997a:	d104      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800997c:	f7fe f860 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8009980:	6378      	str	r0, [r7, #52]	@ 0x34
 8009982:	f000 bcb1 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800998c:	d104      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800998e:	f7fd ff3b 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8009992:	6378      	str	r0, [r7, #52]	@ 0x34
 8009994:	f000 bca8 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009998:	4b3b      	ldr	r3, [pc, #236]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099a4:	d107      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80099a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099ac:	d103      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80099ae:	4b38      	ldr	r3, [pc, #224]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80099b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099b2:	f000 bc99 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80099b6:	4b34      	ldr	r3, [pc, #208]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0320 	and.w	r3, r3, #32
 80099be:	2b20      	cmp	r3, #32
 80099c0:	d11c      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099c8:	d118      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d005      	beq.n	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80099d6:	4b2c      	ldr	r3, [pc, #176]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	0e1b      	lsrs	r3, r3, #24
 80099dc:	f003 030f 	and.w	r3, r3, #15
 80099e0:	e006      	b.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80099e2:	4b29      	ldr	r3, [pc, #164]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099e8:	041b      	lsls	r3, r3, #16
 80099ea:	0e1b      	lsrs	r3, r3, #24
 80099ec:	f003 030f 	and.w	r3, r3, #15
 80099f0:	4a26      	ldr	r2, [pc, #152]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80099f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f8:	f000 bc76 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80099fc:	2300      	movs	r3, #0
 80099fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a00:	f000 bc72 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a08:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009a0c:	430b      	orrs	r3, r1
 8009a0e:	d152      	bne.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009a10:	4b1d      	ldr	r3, [pc, #116]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009a1a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d104      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009a22:	f7fe f80d 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8009a26:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a28:	f000 bc5e 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a32:	d104      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009a34:	f7fd fee8 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8009a38:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a3a:	f000 bc55 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009a3e:	4b12      	ldr	r3, [pc, #72]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a4a:	d107      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a52:	d103      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8009a54:	4b0e      	ldr	r3, [pc, #56]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a58:	f000 bc46 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 0320 	and.w	r3, r3, #32
 8009a64:	2b20      	cmp	r3, #32
 8009a66:	d122      	bne.n	8009aae <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8009a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009a6e:	d11e      	bne.n	8009aae <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a70:	4b05      	ldr	r3, [pc, #20]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00b      	beq.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8009a7c:	4b02      	ldr	r3, [pc, #8]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	0e1b      	lsrs	r3, r3, #24
 8009a82:	f003 030f 	and.w	r3, r3, #15
 8009a86:	e00c      	b.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8009a88:	46020c00 	.word	0x46020c00
 8009a8c:	0802e838 	.word	0x0802e838
 8009a90:	00f42400 	.word	0x00f42400
 8009a94:	4ba1      	ldr	r3, [pc, #644]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a9a:	041b      	lsls	r3, r3, #16
 8009a9c:	0e1b      	lsrs	r3, r3, #24
 8009a9e:	f003 030f 	and.w	r3, r3, #15
 8009aa2:	4a9f      	ldr	r2, [pc, #636]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aaa:	f000 bc1d 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab2:	f000 bc19 	b.w	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aba:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009abe:	430b      	orrs	r3, r1
 8009ac0:	d151      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009ac2:	4b96      	ldr	r3, [pc, #600]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ac8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009acc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad0:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ad2:	d024      	beq.n	8009b1e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ad8:	d842      	bhi.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009adc:	2b80      	cmp	r3, #128	@ 0x80
 8009ade:	d00d      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae2:	2b80      	cmp	r3, #128	@ 0x80
 8009ae4:	d83c      	bhi.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8009aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aee:	2b40      	cmp	r3, #64	@ 0x40
 8009af0:	d011      	beq.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8009af2:	e035      	b.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009af4:	f7fd ffcc 	bl	8007a90 <HAL_RCC_GetPCLK3Freq>
 8009af8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009afa:	e3f5      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009afc:	4b87      	ldr	r3, [pc, #540]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b08:	d102      	bne.n	8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8009b0a:	4b86      	ldr	r3, [pc, #536]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009b0c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b0e:	e3eb      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b14:	e3e8      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009b16:	f7fd fe77 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8009b1a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b1c:	e3e4      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0320 	and.w	r3, r3, #32
 8009b26:	2b20      	cmp	r3, #32
 8009b28:	d117      	bne.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d005      	beq.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8009b36:	4b79      	ldr	r3, [pc, #484]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	0e1b      	lsrs	r3, r3, #24
 8009b3c:	f003 030f 	and.w	r3, r3, #15
 8009b40:	e006      	b.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8009b42:	4b76      	ldr	r3, [pc, #472]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b48:	041b      	lsls	r3, r3, #16
 8009b4a:	0e1b      	lsrs	r3, r3, #24
 8009b4c:	f003 030f 	and.w	r3, r3, #15
 8009b50:	4a73      	ldr	r2, [pc, #460]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b56:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b58:	e3c6      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b5e:	e3c3      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b64:	e3c0      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b6a:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009b6e:	430b      	orrs	r3, r1
 8009b70:	d147      	bne.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009b72:	4b6a      	ldr	r3, [pc, #424]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009b7c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d103      	bne.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009b84:	f7fd ff5c 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8009b88:	6378      	str	r0, [r7, #52]	@ 0x34
 8009b8a:	e3ad      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b92:	d103      	bne.n	8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009b94:	f7fd fe38 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8009b98:	6378      	str	r0, [r7, #52]	@ 0x34
 8009b9a:	e3a5      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ba8:	d106      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8009baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bb0:	d102      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8009bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bb6:	e397      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009bb8:	4b58      	ldr	r3, [pc, #352]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b20      	cmp	r3, #32
 8009bc2:	d11b      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009bca:	d117      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009bcc:	4b53      	ldr	r3, [pc, #332]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d005      	beq.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8009bd8:	4b50      	ldr	r3, [pc, #320]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	0e1b      	lsrs	r3, r3, #24
 8009bde:	f003 030f 	and.w	r3, r3, #15
 8009be2:	e006      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8009be4:	4b4d      	ldr	r3, [pc, #308]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009bea:	041b      	lsls	r3, r3, #16
 8009bec:	0e1b      	lsrs	r3, r3, #24
 8009bee:	f003 030f 	and.w	r3, r3, #15
 8009bf2:	4a4b      	ldr	r2, [pc, #300]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bfa:	e375      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c00:	e372      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c06:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009c0a:	430b      	orrs	r3, r1
 8009c0c:	d164      	bne.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009c0e:	4b43      	ldr	r3, [pc, #268]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d120      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c20:	4b3e      	ldr	r3, [pc, #248]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 0320 	and.w	r3, r3, #32
 8009c28:	2b20      	cmp	r3, #32
 8009c2a:	d117      	bne.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8009c38:	4b38      	ldr	r3, [pc, #224]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	0e1b      	lsrs	r3, r3, #24
 8009c3e:	f003 030f 	and.w	r3, r3, #15
 8009c42:	e006      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8009c44:	4b35      	ldr	r3, [pc, #212]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c4a:	041b      	lsls	r3, r3, #16
 8009c4c:	0e1b      	lsrs	r3, r3, #24
 8009c4e:	f003 030f 	and.w	r3, r3, #15
 8009c52:	4a33      	ldr	r2, [pc, #204]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c5a:	e345      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c60:	e342      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009c62:	4b2e      	ldr	r3, [pc, #184]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c70:	d112      	bne.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c78:	d10e      	bne.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c7a:	4b28      	ldr	r3, [pc, #160]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c88:	d102      	bne.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8009c8a:	23fa      	movs	r3, #250	@ 0xfa
 8009c8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c8e:	e32b      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009c90:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009c94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c96:	e327      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009c98:	4b20      	ldr	r3, [pc, #128]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ca4:	d106      	bne.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cac:	d102      	bne.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8009cae:	4b1d      	ldr	r3, [pc, #116]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb2:	e319      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009cb4:	4b19      	ldr	r3, [pc, #100]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cba:	f003 0302 	and.w	r3, r3, #2
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d107      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cc8:	d103      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8009cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd0:	e30a      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd6:	e307      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cdc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009ce0:	430b      	orrs	r3, r1
 8009ce2:	d16b      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009cee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d127      	bne.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009cf6:	4b09      	ldr	r3, [pc, #36]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b20      	cmp	r3, #32
 8009d00:	d11e      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d02:	4b06      	ldr	r3, [pc, #24]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00c      	beq.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8009d0e:	4b03      	ldr	r3, [pc, #12]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	0e1b      	lsrs	r3, r3, #24
 8009d14:	f003 030f 	and.w	r3, r3, #15
 8009d18:	e00d      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8009d1a:	bf00      	nop
 8009d1c:	46020c00 	.word	0x46020c00
 8009d20:	0802e838 	.word	0x0802e838
 8009d24:	00f42400 	.word	0x00f42400
 8009d28:	4b94      	ldr	r3, [pc, #592]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d2e:	041b      	lsls	r3, r3, #16
 8009d30:	0e1b      	lsrs	r3, r3, #24
 8009d32:	f003 030f 	and.w	r3, r3, #15
 8009d36:	4a92      	ldr	r2, [pc, #584]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d3e:	e2d3      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d44:	e2d0      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009d46:	4b8d      	ldr	r3, [pc, #564]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d54:	d112      	bne.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8009d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d5c:	d10e      	bne.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d5e:	4b87      	ldr	r3, [pc, #540]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d6c:	d102      	bne.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8009d6e:	23fa      	movs	r3, #250	@ 0xfa
 8009d70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d72:	e2b9      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009d74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d7a:	e2b5      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009d7c:	4b7f      	ldr	r3, [pc, #508]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d88:	d106      	bne.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d90:	d102      	bne.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8009d92:	4b7c      	ldr	r3, [pc, #496]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d96:	e2a7      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009d98:	4b78      	ldr	r3, [pc, #480]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d107      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8009da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009dac:	d103      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8009dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009db4:	e298      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009db6:	2300      	movs	r3, #0
 8009db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dba:	e295      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dc0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009dc4:	430b      	orrs	r3, r1
 8009dc6:	d147      	bne.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009dce:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009dd2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d103      	bne.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009dda:	f7fd fe31 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8009dde:	6378      	str	r0, [r7, #52]	@ 0x34
 8009de0:	e282      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009de2:	4b66      	ldr	r3, [pc, #408]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009df0:	d112      	bne.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8009df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009df8:	d10e      	bne.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009dfa:	4b60      	ldr	r3, [pc, #384]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e08:	d102      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8009e0a:	23fa      	movs	r3, #250	@ 0xfa
 8009e0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e0e:	e26b      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009e10:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009e14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e16:	e267      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009e18:	4b58      	ldr	r3, [pc, #352]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e24:	d106      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8009e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009e2c:	d102      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8009e2e:	4b55      	ldr	r3, [pc, #340]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e32:	e259      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009e34:	4b51      	ldr	r3, [pc, #324]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e3a:	f003 0302 	and.w	r3, r3, #2
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d107      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8009e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009e48:	d103      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8009e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e50:	e24a      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e56:	e247      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e5c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009e60:	430b      	orrs	r3, r1
 8009e62:	d12d      	bne.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009e64:	4b45      	ldr	r3, [pc, #276]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e6a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009e6e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009e70:	4b42      	ldr	r3, [pc, #264]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e7c:	d105      	bne.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d102      	bne.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8009e84:	4b3f      	ldr	r3, [pc, #252]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e88:	e22e      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e90:	d107      	bne.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fe fc70 	bl	800877c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea0:	e222      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ea8:	d107      	bne.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eaa:	f107 0318 	add.w	r3, r7, #24
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe fdbe 	bl	8008a30 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eb8:	e216      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ebe:	e213      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ec4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009ec8:	430b      	orrs	r3, r1
 8009eca:	d15d      	bne.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ed2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009ed6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ede:	d028      	beq.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ee6:	d845      	bhi.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009eee:	d013      	beq.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ef6:	d83d      	bhi.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d004      	beq.n	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8009efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f04:	d004      	beq.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8009f06:	e035      	b.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009f08:	f7fd fdae 	bl	8007a68 <HAL_RCC_GetPCLK2Freq>
 8009f0c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f0e:	e1eb      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009f10:	f7fd fc7a 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8009f14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f16:	e1e7      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f18:	4b18      	ldr	r3, [pc, #96]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f24:	d102      	bne.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8009f26:	4b17      	ldr	r3, [pc, #92]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f28:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f2a:	e1dd      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f30:	e1da      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009f32:	4b12      	ldr	r3, [pc, #72]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0320 	and.w	r3, r3, #32
 8009f3a:	2b20      	cmp	r3, #32
 8009f3c:	d117      	bne.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d005      	beq.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8009f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	0e1b      	lsrs	r3, r3, #24
 8009f50:	f003 030f 	and.w	r3, r3, #15
 8009f54:	e006      	b.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8009f56:	4b09      	ldr	r3, [pc, #36]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009f5c:	041b      	lsls	r3, r3, #16
 8009f5e:	0e1b      	lsrs	r3, r3, #24
 8009f60:	f003 030f 	and.w	r3, r3, #15
 8009f64:	4a06      	ldr	r2, [pc, #24]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f6c:	e1bc      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f72:	e1b9      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f78:	e1b6      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009f7a:	bf00      	nop
 8009f7c:	46020c00 	.word	0x46020c00
 8009f80:	0802e838 	.word	0x0802e838
 8009f84:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f8c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009f90:	430b      	orrs	r3, r1
 8009f92:	d156      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009f94:	4ba5      	ldr	r3, [pc, #660]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009f9e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009fa6:	d028      	beq.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009faa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009fae:	d845      	bhi.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fb6:	d013      	beq.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fbe:	d83d      	bhi.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d004      	beq.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fcc:	d004      	beq.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8009fce:	e035      	b.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009fd0:	f7fd fd36 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8009fd4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009fd6:	e187      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009fd8:	f7fd fc16 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8009fdc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009fde:	e183      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fe0:	4b92      	ldr	r3, [pc, #584]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fec:	d102      	bne.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8009fee:	4b90      	ldr	r3, [pc, #576]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8009ff0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ff2:	e179      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ff8:	e176      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009ffa:	4b8c      	ldr	r3, [pc, #560]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0320 	and.w	r3, r3, #32
 800a002:	2b20      	cmp	r3, #32
 800a004:	d117      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a006:	4b89      	ldr	r3, [pc, #548]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d005      	beq.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800a012:	4b86      	ldr	r3, [pc, #536]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	0e1b      	lsrs	r3, r3, #24
 800a018:	f003 030f 	and.w	r3, r3, #15
 800a01c:	e006      	b.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800a01e:	4b83      	ldr	r3, [pc, #524]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a024:	041b      	lsls	r3, r3, #16
 800a026:	0e1b      	lsrs	r3, r3, #24
 800a028:	f003 030f 	and.w	r3, r3, #15
 800a02c:	4a81      	ldr	r2, [pc, #516]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a032:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a034:	e158      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a03a:	e155      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a040:	e152      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800a042:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a046:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800a04a:	430b      	orrs	r3, r1
 800a04c:	d177      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a04e:	4b77      	ldr	r3, [pc, #476]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a054:	f003 0318 	and.w	r3, r3, #24
 800a058:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05c:	2b18      	cmp	r3, #24
 800a05e:	d86b      	bhi.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800a060:	a201      	add	r2, pc, #4	@ (adr r2, 800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a066:	bf00      	nop
 800a068:	0800a0cd 	.word	0x0800a0cd
 800a06c:	0800a139 	.word	0x0800a139
 800a070:	0800a139 	.word	0x0800a139
 800a074:	0800a139 	.word	0x0800a139
 800a078:	0800a139 	.word	0x0800a139
 800a07c:	0800a139 	.word	0x0800a139
 800a080:	0800a139 	.word	0x0800a139
 800a084:	0800a139 	.word	0x0800a139
 800a088:	0800a0d5 	.word	0x0800a0d5
 800a08c:	0800a139 	.word	0x0800a139
 800a090:	0800a139 	.word	0x0800a139
 800a094:	0800a139 	.word	0x0800a139
 800a098:	0800a139 	.word	0x0800a139
 800a09c:	0800a139 	.word	0x0800a139
 800a0a0:	0800a139 	.word	0x0800a139
 800a0a4:	0800a139 	.word	0x0800a139
 800a0a8:	0800a0dd 	.word	0x0800a0dd
 800a0ac:	0800a139 	.word	0x0800a139
 800a0b0:	0800a139 	.word	0x0800a139
 800a0b4:	0800a139 	.word	0x0800a139
 800a0b8:	0800a139 	.word	0x0800a139
 800a0bc:	0800a139 	.word	0x0800a139
 800a0c0:	0800a139 	.word	0x0800a139
 800a0c4:	0800a139 	.word	0x0800a139
 800a0c8:	0800a0f7 	.word	0x0800a0f7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800a0cc:	f7fd fce0 	bl	8007a90 <HAL_RCC_GetPCLK3Freq>
 800a0d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a0d2:	e109      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a0d4:	f7fd fb98 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 800a0d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a0da:	e105      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0dc:	4b53      	ldr	r3, [pc, #332]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0e8:	d102      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800a0ea:	4b51      	ldr	r3, [pc, #324]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800a0ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a0ee:	e0fb      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0f4:	e0f8      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a0f6:	4b4d      	ldr	r3, [pc, #308]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0320 	and.w	r3, r3, #32
 800a0fe:	2b20      	cmp	r3, #32
 800a100:	d117      	bne.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a102:	4b4a      	ldr	r3, [pc, #296]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d005      	beq.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800a10e:	4b47      	ldr	r3, [pc, #284]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	0e1b      	lsrs	r3, r3, #24
 800a114:	f003 030f 	and.w	r3, r3, #15
 800a118:	e006      	b.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800a11a:	4b44      	ldr	r3, [pc, #272]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a11c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a120:	041b      	lsls	r3, r3, #16
 800a122:	0e1b      	lsrs	r3, r3, #24
 800a124:	f003 030f 	and.w	r3, r3, #15
 800a128:	4a42      	ldr	r2, [pc, #264]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a12a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a12e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a130:	e0da      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a136:	e0d7      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a138:	2300      	movs	r3, #0
 800a13a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a13c:	e0d4      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800a13e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a142:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800a146:	430b      	orrs	r3, r1
 800a148:	d155      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a14a:	4b38      	ldr	r3, [pc, #224]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a14c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a150:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a154:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a158:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a15c:	d013      	beq.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800a15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a160:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a164:	d844      	bhi.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a16c:	d013      	beq.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a174:	d83c      	bhi.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d014      	beq.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a182:	d014      	beq.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800a184:	e034      	b.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a186:	f107 0318 	add.w	r3, r7, #24
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe fc50 	bl	8008a30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a194:	e0a8      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe faee 	bl	800877c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1a4:	e0a0      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a1a6:	f7fd fb2f 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 800a1aa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a1ac:	e09c      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a1ae:	4b1f      	ldr	r3, [pc, #124]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 0320 	and.w	r3, r3, #32
 800a1b6:	2b20      	cmp	r3, #32
 800a1b8:	d117      	bne.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a1ba:	4b1c      	ldr	r3, [pc, #112]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800a1c6:	4b19      	ldr	r3, [pc, #100]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	0e1b      	lsrs	r3, r3, #24
 800a1cc:	f003 030f 	and.w	r3, r3, #15
 800a1d0:	e006      	b.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800a1d2:	4b16      	ldr	r3, [pc, #88]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a1d8:	041b      	lsls	r3, r3, #16
 800a1da:	0e1b      	lsrs	r3, r3, #24
 800a1dc:	f003 030f 	and.w	r3, r3, #15
 800a1e0:	4a14      	ldr	r2, [pc, #80]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a1e8:	e07e      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1ee:	e07b      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1f4:	e078      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800a1f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1fa:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800a1fe:	430b      	orrs	r3, r1
 800a200:	d138      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800a202:	4b0a      	ldr	r3, [pc, #40]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a20c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800a20e:	4b07      	ldr	r3, [pc, #28]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d10d      	bne.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800a21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800a222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a226:	637b      	str	r3, [r7, #52]	@ 0x34
 800a228:	e05e      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800a22a:	bf00      	nop
 800a22c:	46020c00 	.word	0x46020c00
 800a230:	00f42400 	.word	0x00f42400
 800a234:	0802e838 	.word	0x0802e838
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a238:	4b2e      	ldr	r3, [pc, #184]	@ (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a23a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a23e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a246:	d112      	bne.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 800a248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a24e:	d10e      	bne.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a250:	4b28      	ldr	r3, [pc, #160]	@ (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a25a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a25e:	d102      	bne.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800a260:	23fa      	movs	r3, #250	@ 0xfa
 800a262:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a264:	e040      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800a266:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a26a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a26c:	e03c      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	637b      	str	r3, [r7, #52]	@ 0x34
 800a272:	e039      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a274:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a278:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a27c:	430b      	orrs	r3, r1
 800a27e:	d131      	bne.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a280:	4b1c      	ldr	r3, [pc, #112]	@ (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a282:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a286:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a28a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a28c:	4b19      	ldr	r3, [pc, #100]	@ (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a298:	d105      	bne.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d102      	bne.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800a2a0:	4b15      	ldr	r3, [pc, #84]	@ (800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800a2a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2a4:	e020      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a2a6:	4b13      	ldr	r3, [pc, #76]	@ (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2b2:	d106      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2ba:	d102      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a2bc:	4b0f      	ldr	r3, [pc, #60]	@ (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800a2be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2c0:	e012      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a2c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2ce:	d106      	bne.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2d6:	d102      	bne.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 800a2d8:	4b09      	ldr	r3, [pc, #36]	@ (800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800a2da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2dc:	e004      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2e2:	e001      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800a2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3738      	adds	r7, #56	@ 0x38
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	46020c00 	.word	0x46020c00
 800a2f8:	02dc6c00 	.word	0x02dc6c00
 800a2fc:	016e3600 	.word	0x016e3600
 800a300:	00f42400 	.word	0x00f42400

0800a304 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a30c:	4b47      	ldr	r3, [pc, #284]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a46      	ldr	r2, [pc, #280]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a312:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a316:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a318:	f7f7 fdde 	bl	8001ed8 <HAL_GetTick>
 800a31c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a31e:	e008      	b.n	800a332 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a320:	f7f7 fdda 	bl	8001ed8 <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d901      	bls.n	800a332 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e077      	b.n	800a422 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a332:	4b3e      	ldr	r3, [pc, #248]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1f0      	bne.n	800a320 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a33e:	4b3b      	ldr	r3, [pc, #236]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a342:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a346:	f023 0303 	bic.w	r3, r3, #3
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	6811      	ldr	r1, [r2, #0]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	6852      	ldr	r2, [r2, #4]
 800a352:	3a01      	subs	r2, #1
 800a354:	0212      	lsls	r2, r2, #8
 800a356:	430a      	orrs	r2, r1
 800a358:	4934      	ldr	r1, [pc, #208]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a35a:	4313      	orrs	r3, r2
 800a35c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a35e:	4b33      	ldr	r3, [pc, #204]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a360:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a362:	4b33      	ldr	r3, [pc, #204]	@ (800a430 <RCCEx_PLL2_Config+0x12c>)
 800a364:	4013      	ands	r3, r2
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	6892      	ldr	r2, [r2, #8]
 800a36a:	3a01      	subs	r2, #1
 800a36c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	68d2      	ldr	r2, [r2, #12]
 800a374:	3a01      	subs	r2, #1
 800a376:	0252      	lsls	r2, r2, #9
 800a378:	b292      	uxth	r2, r2
 800a37a:	4311      	orrs	r1, r2
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	6912      	ldr	r2, [r2, #16]
 800a380:	3a01      	subs	r2, #1
 800a382:	0412      	lsls	r2, r2, #16
 800a384:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a388:	4311      	orrs	r1, r2
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	6952      	ldr	r2, [r2, #20]
 800a38e:	3a01      	subs	r2, #1
 800a390:	0612      	lsls	r2, r2, #24
 800a392:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a396:	430a      	orrs	r2, r1
 800a398:	4924      	ldr	r1, [pc, #144]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a39a:	4313      	orrs	r3, r2
 800a39c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a39e:	4b23      	ldr	r3, [pc, #140]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a2:	f023 020c 	bic.w	r2, r3, #12
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	4920      	ldr	r1, [pc, #128]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a3b0:	4b1e      	ldr	r3, [pc, #120]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	491c      	ldr	r1, [pc, #112]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a3be:	4b1b      	ldr	r3, [pc, #108]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c2:	4a1a      	ldr	r2, [pc, #104]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3c4:	f023 0310 	bic.w	r3, r3, #16
 800a3c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a3ca:	4b18      	ldr	r3, [pc, #96]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a3d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	69d2      	ldr	r2, [r2, #28]
 800a3da:	00d2      	lsls	r2, r2, #3
 800a3dc:	4913      	ldr	r1, [pc, #76]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a3e2:	4b12      	ldr	r3, [pc, #72]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e6:	4a11      	ldr	r2, [pc, #68]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3e8:	f043 0310 	orr.w	r3, r3, #16
 800a3ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a3ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a0e      	ldr	r2, [pc, #56]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a3f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a3fa:	f7f7 fd6d 	bl	8001ed8 <HAL_GetTick>
 800a3fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a400:	e008      	b.n	800a414 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a402:	f7f7 fd69 	bl	8001ed8 <HAL_GetTick>
 800a406:	4602      	mov	r2, r0
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d901      	bls.n	800a414 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a410:	2303      	movs	r3, #3
 800a412:	e006      	b.n	800a422 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a414:	4b05      	ldr	r3, [pc, #20]	@ (800a42c <RCCEx_PLL2_Config+0x128>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d0f0      	beq.n	800a402 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a420:	2300      	movs	r3, #0

}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	46020c00 	.word	0x46020c00
 800a430:	80800000 	.word	0x80800000

0800a434 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a43c:	4b47      	ldr	r3, [pc, #284]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a46      	ldr	r2, [pc, #280]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a446:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a448:	f7f7 fd46 	bl	8001ed8 <HAL_GetTick>
 800a44c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a44e:	e008      	b.n	800a462 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a450:	f7f7 fd42 	bl	8001ed8 <HAL_GetTick>
 800a454:	4602      	mov	r2, r0
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d901      	bls.n	800a462 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e077      	b.n	800a552 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a462:	4b3e      	ldr	r3, [pc, #248]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1f0      	bne.n	800a450 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a46e:	4b3b      	ldr	r3, [pc, #236]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a472:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a476:	f023 0303 	bic.w	r3, r3, #3
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	6811      	ldr	r1, [r2, #0]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	6852      	ldr	r2, [r2, #4]
 800a482:	3a01      	subs	r2, #1
 800a484:	0212      	lsls	r2, r2, #8
 800a486:	430a      	orrs	r2, r1
 800a488:	4934      	ldr	r1, [pc, #208]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a48a:	4313      	orrs	r3, r2
 800a48c:	630b      	str	r3, [r1, #48]	@ 0x30
 800a48e:	4b33      	ldr	r3, [pc, #204]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a490:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a492:	4b33      	ldr	r3, [pc, #204]	@ (800a560 <RCCEx_PLL3_Config+0x12c>)
 800a494:	4013      	ands	r3, r2
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	6892      	ldr	r2, [r2, #8]
 800a49a:	3a01      	subs	r2, #1
 800a49c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	68d2      	ldr	r2, [r2, #12]
 800a4a4:	3a01      	subs	r2, #1
 800a4a6:	0252      	lsls	r2, r2, #9
 800a4a8:	b292      	uxth	r2, r2
 800a4aa:	4311      	orrs	r1, r2
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	6912      	ldr	r2, [r2, #16]
 800a4b0:	3a01      	subs	r2, #1
 800a4b2:	0412      	lsls	r2, r2, #16
 800a4b4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a4b8:	4311      	orrs	r1, r2
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	6952      	ldr	r2, [r2, #20]
 800a4be:	3a01      	subs	r2, #1
 800a4c0:	0612      	lsls	r2, r2, #24
 800a4c2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	4924      	ldr	r1, [pc, #144]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a4ce:	4b23      	ldr	r3, [pc, #140]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d2:	f023 020c 	bic.w	r2, r3, #12
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	699b      	ldr	r3, [r3, #24]
 800a4da:	4920      	ldr	r1, [pc, #128]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a4e0:	4b1e      	ldr	r3, [pc, #120]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a4e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a1b      	ldr	r3, [r3, #32]
 800a4e8:	491c      	ldr	r1, [pc, #112]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a4ee:	4b1b      	ldr	r3, [pc, #108]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a4f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f2:	4a1a      	ldr	r2, [pc, #104]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a4f4:	f023 0310 	bic.w	r3, r3, #16
 800a4f8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4fa:	4b18      	ldr	r3, [pc, #96]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a4fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a502:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	69d2      	ldr	r2, [r2, #28]
 800a50a:	00d2      	lsls	r2, r2, #3
 800a50c:	4913      	ldr	r1, [pc, #76]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a50e:	4313      	orrs	r3, r2
 800a510:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a512:	4b12      	ldr	r3, [pc, #72]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a516:	4a11      	ldr	r2, [pc, #68]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a518:	f043 0310 	orr.w	r3, r3, #16
 800a51c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a51e:	4b0f      	ldr	r3, [pc, #60]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a0e      	ldr	r2, [pc, #56]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a528:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a52a:	f7f7 fcd5 	bl	8001ed8 <HAL_GetTick>
 800a52e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a530:	e008      	b.n	800a544 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a532:	f7f7 fcd1 	bl	8001ed8 <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d901      	bls.n	800a544 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a540:	2303      	movs	r3, #3
 800a542:	e006      	b.n	800a552 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a544:	4b05      	ldr	r3, [pc, #20]	@ (800a55c <RCCEx_PLL3_Config+0x128>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d0f0      	beq.n	800a532 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	46020c00 	.word	0x46020c00
 800a560:	80800000 	.word	0x80800000

0800a564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e049      	b.n	800a60a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d106      	bne.n	800a590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7f7 fb5a 	bl	8001c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2202      	movs	r2, #2
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	f000 fa4e 	bl	800aa44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
	...

0800a614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b01      	cmp	r3, #1
 800a626:	d001      	beq.n	800a62c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e072      	b.n	800a712 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0201 	orr.w	r2, r2, #1
 800a642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a35      	ldr	r2, [pc, #212]	@ (800a720 <HAL_TIM_Base_Start_IT+0x10c>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d040      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a34      	ldr	r2, [pc, #208]	@ (800a724 <HAL_TIM_Base_Start_IT+0x110>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d03b      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a660:	d036      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a66a:	d031      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a2d      	ldr	r2, [pc, #180]	@ (800a728 <HAL_TIM_Base_Start_IT+0x114>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d02c      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a2c      	ldr	r2, [pc, #176]	@ (800a72c <HAL_TIM_Base_Start_IT+0x118>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d027      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a2a      	ldr	r2, [pc, #168]	@ (800a730 <HAL_TIM_Base_Start_IT+0x11c>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d022      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a29      	ldr	r2, [pc, #164]	@ (800a734 <HAL_TIM_Base_Start_IT+0x120>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d01d      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a27      	ldr	r2, [pc, #156]	@ (800a738 <HAL_TIM_Base_Start_IT+0x124>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d018      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a26      	ldr	r2, [pc, #152]	@ (800a73c <HAL_TIM_Base_Start_IT+0x128>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d013      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a24      	ldr	r2, [pc, #144]	@ (800a740 <HAL_TIM_Base_Start_IT+0x12c>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d00e      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a23      	ldr	r2, [pc, #140]	@ (800a744 <HAL_TIM_Base_Start_IT+0x130>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d009      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a21      	ldr	r2, [pc, #132]	@ (800a748 <HAL_TIM_Base_Start_IT+0x134>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d004      	beq.n	800a6d0 <HAL_TIM_Base_Start_IT+0xbc>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a20      	ldr	r2, [pc, #128]	@ (800a74c <HAL_TIM_Base_Start_IT+0x138>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d115      	bne.n	800a6fc <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	689a      	ldr	r2, [r3, #8]
 800a6d6:	4b1e      	ldr	r3, [pc, #120]	@ (800a750 <HAL_TIM_Base_Start_IT+0x13c>)
 800a6d8:	4013      	ands	r3, r2
 800a6da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2b06      	cmp	r3, #6
 800a6e0:	d015      	beq.n	800a70e <HAL_TIM_Base_Start_IT+0xfa>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6e8:	d011      	beq.n	800a70e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f042 0201 	orr.w	r2, r2, #1
 800a6f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6fa:	e008      	b.n	800a70e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f042 0201 	orr.w	r2, r2, #1
 800a70a:	601a      	str	r2, [r3, #0]
 800a70c:	e000      	b.n	800a710 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a70e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	40012c00 	.word	0x40012c00
 800a724:	50012c00 	.word	0x50012c00
 800a728:	40000400 	.word	0x40000400
 800a72c:	50000400 	.word	0x50000400
 800a730:	40000800 	.word	0x40000800
 800a734:	50000800 	.word	0x50000800
 800a738:	40000c00 	.word	0x40000c00
 800a73c:	50000c00 	.word	0x50000c00
 800a740:	40013400 	.word	0x40013400
 800a744:	50013400 	.word	0x50013400
 800a748:	40014000 	.word	0x40014000
 800a74c:	50014000 	.word	0x50014000
 800a750:	00010007 	.word	0x00010007

0800a754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f003 0302 	and.w	r3, r3, #2
 800a772:	2b00      	cmp	r3, #0
 800a774:	d020      	beq.n	800a7b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01b      	beq.n	800a7b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f06f 0202 	mvn.w	r2, #2
 800a788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f931 	bl	800aa06 <HAL_TIM_IC_CaptureCallback>
 800a7a4:	e005      	b.n	800a7b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f923 	bl	800a9f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f934 	bl	800aa1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f003 0304 	and.w	r3, r3, #4
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d020      	beq.n	800a804 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d01b      	beq.n	800a804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f06f 0204 	mvn.w	r2, #4
 800a7d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2202      	movs	r2, #2
 800a7da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d003      	beq.n	800a7f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f90b 	bl	800aa06 <HAL_TIM_IC_CaptureCallback>
 800a7f0:	e005      	b.n	800a7fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f8fd 	bl	800a9f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f90e 	bl	800aa1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f003 0308 	and.w	r3, r3, #8
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d020      	beq.n	800a850 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f003 0308 	and.w	r3, r3, #8
 800a814:	2b00      	cmp	r3, #0
 800a816:	d01b      	beq.n	800a850 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f06f 0208 	mvn.w	r2, #8
 800a820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2204      	movs	r2, #4
 800a826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	f003 0303 	and.w	r3, r3, #3
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f8e5 	bl	800aa06 <HAL_TIM_IC_CaptureCallback>
 800a83c:	e005      	b.n	800a84a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f8d7 	bl	800a9f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f8e8 	bl	800aa1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f003 0310 	and.w	r3, r3, #16
 800a856:	2b00      	cmp	r3, #0
 800a858:	d020      	beq.n	800a89c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f003 0310 	and.w	r3, r3, #16
 800a860:	2b00      	cmp	r3, #0
 800a862:	d01b      	beq.n	800a89c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f06f 0210 	mvn.w	r2, #16
 800a86c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2208      	movs	r2, #8
 800a872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	69db      	ldr	r3, [r3, #28]
 800a87a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d003      	beq.n	800a88a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f8bf 	bl	800aa06 <HAL_TIM_IC_CaptureCallback>
 800a888:	e005      	b.n	800a896 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f8b1 	bl	800a9f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f8c2 	bl	800aa1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	f003 0301 	and.w	r3, r3, #1
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00c      	beq.n	800a8c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d007      	beq.n	800a8c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f06f 0201 	mvn.w	r2, #1
 800a8b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7f6 fe64 	bl	8001588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d104      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00c      	beq.n	800a8ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d007      	beq.n	800a8ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a8e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fa77 	bl	800addc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00c      	beq.n	800a912 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d007      	beq.n	800a912 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a90a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fa6f 	bl	800adf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00c      	beq.n	800a936 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a922:	2b00      	cmp	r3, #0
 800a924:	d007      	beq.n	800a936 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a92e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f87c 	bl	800aa2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	f003 0320 	and.w	r3, r3, #32
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00c      	beq.n	800a95a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f003 0320 	and.w	r3, r3, #32
 800a946:	2b00      	cmp	r3, #0
 800a948:	d007      	beq.n	800a95a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f06f 0220 	mvn.w	r2, #32
 800a952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fa37 	bl	800adc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00c      	beq.n	800a97e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d007      	beq.n	800a97e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fa43 	bl	800ae04 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00c      	beq.n	800a9a2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d007      	beq.n	800a9a2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a99a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fa3b 	bl	800ae18 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00c      	beq.n	800a9c6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d007      	beq.n	800a9c6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a9be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fa33 	bl	800ae2c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00c      	beq.n	800a9ea <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d007      	beq.n	800a9ea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a9e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fa2b 	bl	800ae40 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9ea:	bf00      	nop
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9fa:	bf00      	nop
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa0e:	bf00      	nop
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa22:	bf00      	nop
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
	...

0800aa44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a6b      	ldr	r2, [pc, #428]	@ (800ac04 <TIM_Base_SetConfig+0x1c0>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d02b      	beq.n	800aab4 <TIM_Base_SetConfig+0x70>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a6a      	ldr	r2, [pc, #424]	@ (800ac08 <TIM_Base_SetConfig+0x1c4>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d027      	beq.n	800aab4 <TIM_Base_SetConfig+0x70>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa6a:	d023      	beq.n	800aab4 <TIM_Base_SetConfig+0x70>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa72:	d01f      	beq.n	800aab4 <TIM_Base_SetConfig+0x70>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a65      	ldr	r2, [pc, #404]	@ (800ac0c <TIM_Base_SetConfig+0x1c8>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d01b      	beq.n	800aab4 <TIM_Base_SetConfig+0x70>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a64      	ldr	r2, [pc, #400]	@ (800ac10 <TIM_Base_SetConfig+0x1cc>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d017      	beq.n	800aab4 <TIM_Base_SetConfig+0x70>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a63      	ldr	r2, [pc, #396]	@ (800ac14 <TIM_Base_SetConfig+0x1d0>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d013      	beq.n	800aab4 <TIM_Base_SetConfig+0x70>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a62      	ldr	r2, [pc, #392]	@ (800ac18 <TIM_Base_SetConfig+0x1d4>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d00f      	beq.n	800aab4 <TIM_Base_SetConfig+0x70>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a61      	ldr	r2, [pc, #388]	@ (800ac1c <TIM_Base_SetConfig+0x1d8>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d00b      	beq.n	800aab4 <TIM_Base_SetConfig+0x70>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a60      	ldr	r2, [pc, #384]	@ (800ac20 <TIM_Base_SetConfig+0x1dc>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d007      	beq.n	800aab4 <TIM_Base_SetConfig+0x70>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a5f      	ldr	r2, [pc, #380]	@ (800ac24 <TIM_Base_SetConfig+0x1e0>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d003      	beq.n	800aab4 <TIM_Base_SetConfig+0x70>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a5e      	ldr	r2, [pc, #376]	@ (800ac28 <TIM_Base_SetConfig+0x1e4>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d108      	bne.n	800aac6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a4e      	ldr	r2, [pc, #312]	@ (800ac04 <TIM_Base_SetConfig+0x1c0>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d043      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a4d      	ldr	r2, [pc, #308]	@ (800ac08 <TIM_Base_SetConfig+0x1c4>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d03f      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aadc:	d03b      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aae4:	d037      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a48      	ldr	r2, [pc, #288]	@ (800ac0c <TIM_Base_SetConfig+0x1c8>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d033      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a47      	ldr	r2, [pc, #284]	@ (800ac10 <TIM_Base_SetConfig+0x1cc>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d02f      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a46      	ldr	r2, [pc, #280]	@ (800ac14 <TIM_Base_SetConfig+0x1d0>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d02b      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a45      	ldr	r2, [pc, #276]	@ (800ac18 <TIM_Base_SetConfig+0x1d4>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d027      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a44      	ldr	r2, [pc, #272]	@ (800ac1c <TIM_Base_SetConfig+0x1d8>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d023      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a43      	ldr	r2, [pc, #268]	@ (800ac20 <TIM_Base_SetConfig+0x1dc>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d01f      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a42      	ldr	r2, [pc, #264]	@ (800ac24 <TIM_Base_SetConfig+0x1e0>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d01b      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a41      	ldr	r2, [pc, #260]	@ (800ac28 <TIM_Base_SetConfig+0x1e4>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d017      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a40      	ldr	r2, [pc, #256]	@ (800ac2c <TIM_Base_SetConfig+0x1e8>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d013      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a3f      	ldr	r2, [pc, #252]	@ (800ac30 <TIM_Base_SetConfig+0x1ec>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d00f      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4a3e      	ldr	r2, [pc, #248]	@ (800ac34 <TIM_Base_SetConfig+0x1f0>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d00b      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a3d      	ldr	r2, [pc, #244]	@ (800ac38 <TIM_Base_SetConfig+0x1f4>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d007      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a3c      	ldr	r2, [pc, #240]	@ (800ac3c <TIM_Base_SetConfig+0x1f8>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d003      	beq.n	800ab56 <TIM_Base_SetConfig+0x112>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a3b      	ldr	r2, [pc, #236]	@ (800ac40 <TIM_Base_SetConfig+0x1fc>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d108      	bne.n	800ab68 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	689a      	ldr	r2, [r3, #8]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a1e      	ldr	r2, [pc, #120]	@ (800ac04 <TIM_Base_SetConfig+0x1c0>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d023      	beq.n	800abd6 <TIM_Base_SetConfig+0x192>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a1d      	ldr	r2, [pc, #116]	@ (800ac08 <TIM_Base_SetConfig+0x1c4>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d01f      	beq.n	800abd6 <TIM_Base_SetConfig+0x192>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a22      	ldr	r2, [pc, #136]	@ (800ac24 <TIM_Base_SetConfig+0x1e0>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d01b      	beq.n	800abd6 <TIM_Base_SetConfig+0x192>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a21      	ldr	r2, [pc, #132]	@ (800ac28 <TIM_Base_SetConfig+0x1e4>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d017      	beq.n	800abd6 <TIM_Base_SetConfig+0x192>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a20      	ldr	r2, [pc, #128]	@ (800ac2c <TIM_Base_SetConfig+0x1e8>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d013      	beq.n	800abd6 <TIM_Base_SetConfig+0x192>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a1f      	ldr	r2, [pc, #124]	@ (800ac30 <TIM_Base_SetConfig+0x1ec>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d00f      	beq.n	800abd6 <TIM_Base_SetConfig+0x192>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a1e      	ldr	r2, [pc, #120]	@ (800ac34 <TIM_Base_SetConfig+0x1f0>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d00b      	beq.n	800abd6 <TIM_Base_SetConfig+0x192>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac38 <TIM_Base_SetConfig+0x1f4>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d007      	beq.n	800abd6 <TIM_Base_SetConfig+0x192>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a1c      	ldr	r2, [pc, #112]	@ (800ac3c <TIM_Base_SetConfig+0x1f8>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d003      	beq.n	800abd6 <TIM_Base_SetConfig+0x192>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a1b      	ldr	r2, [pc, #108]	@ (800ac40 <TIM_Base_SetConfig+0x1fc>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d103      	bne.n	800abde <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	691a      	ldr	r2, [r3, #16]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f043 0204 	orr.w	r2, r3, #4
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	601a      	str	r2, [r3, #0]
}
 800abf6:	bf00      	nop
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	40012c00 	.word	0x40012c00
 800ac08:	50012c00 	.word	0x50012c00
 800ac0c:	40000400 	.word	0x40000400
 800ac10:	50000400 	.word	0x50000400
 800ac14:	40000800 	.word	0x40000800
 800ac18:	50000800 	.word	0x50000800
 800ac1c:	40000c00 	.word	0x40000c00
 800ac20:	50000c00 	.word	0x50000c00
 800ac24:	40013400 	.word	0x40013400
 800ac28:	50013400 	.word	0x50013400
 800ac2c:	40014000 	.word	0x40014000
 800ac30:	50014000 	.word	0x50014000
 800ac34:	40014400 	.word	0x40014400
 800ac38:	50014400 	.word	0x50014400
 800ac3c:	40014800 	.word	0x40014800
 800ac40:	50014800 	.word	0x50014800

0800ac44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d101      	bne.n	800ac5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac58:	2302      	movs	r3, #2
 800ac5a:	e097      	b.n	800ad8c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2202      	movs	r2, #2
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a45      	ldr	r2, [pc, #276]	@ (800ad98 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d00e      	beq.n	800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a44      	ldr	r2, [pc, #272]	@ (800ad9c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d009      	beq.n	800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a42      	ldr	r2, [pc, #264]	@ (800ada0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d004      	beq.n	800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a41      	ldr	r2, [pc, #260]	@ (800ada4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d108      	bne.n	800acb6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800acaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800acbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	4313      	orrs	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a2f      	ldr	r2, [pc, #188]	@ (800ad98 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d040      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a2e      	ldr	r2, [pc, #184]	@ (800ad9c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d03b      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acf0:	d036      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acfa:	d031      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a29      	ldr	r2, [pc, #164]	@ (800ada8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d02c      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a28      	ldr	r2, [pc, #160]	@ (800adac <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d027      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a26      	ldr	r2, [pc, #152]	@ (800adb0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d022      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a25      	ldr	r2, [pc, #148]	@ (800adb4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d01d      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a23      	ldr	r2, [pc, #140]	@ (800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d018      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a22      	ldr	r2, [pc, #136]	@ (800adbc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d013      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a18      	ldr	r2, [pc, #96]	@ (800ada0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d00e      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a17      	ldr	r2, [pc, #92]	@ (800ada4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d009      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a1b      	ldr	r2, [pc, #108]	@ (800adc0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d004      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a1a      	ldr	r2, [pc, #104]	@ (800adc4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d10c      	bne.n	800ad7a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3714      	adds	r7, #20
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	40012c00 	.word	0x40012c00
 800ad9c:	50012c00 	.word	0x50012c00
 800ada0:	40013400 	.word	0x40013400
 800ada4:	50013400 	.word	0x50013400
 800ada8:	40000400 	.word	0x40000400
 800adac:	50000400 	.word	0x50000400
 800adb0:	40000800 	.word	0x40000800
 800adb4:	50000800 	.word	0x50000800
 800adb8:	40000c00 	.word	0x40000c00
 800adbc:	50000c00 	.word	0x50000c00
 800adc0:	40014000 	.word	0x40014000
 800adc4:	50014000 	.word	0x50014000

0800adc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ade4:	bf00      	nop
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d101      	bne.n	800ae66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e042      	b.n	800aeec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d106      	bne.n	800ae7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7f6 ff57 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2224      	movs	r2, #36	@ 0x24
 800ae82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f022 0201 	bic.w	r2, r2, #1
 800ae94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fa68 	bl	800b374 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f8c3 	bl	800b030 <UART_SetConfig>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d101      	bne.n	800aeb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e01b      	b.n	800aeec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	689a      	ldr	r2, [r3, #8]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f042 0201 	orr.w	r2, r2, #1
 800aee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fae7 	bl	800b4b8 <UART_CheckIdleState>
 800aeea:	4603      	mov	r3, r0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08a      	sub	sp, #40	@ 0x28
 800aef8:	af02      	add	r7, sp, #8
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	603b      	str	r3, [r7, #0]
 800af00:	4613      	mov	r3, r2
 800af02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af0a:	2b20      	cmp	r3, #32
 800af0c:	f040 808b 	bne.w	800b026 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d002      	beq.n	800af1c <HAL_UART_Transmit+0x28>
 800af16:	88fb      	ldrh	r3, [r7, #6]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	e083      	b.n	800b028 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af2a:	2b80      	cmp	r3, #128	@ 0x80
 800af2c:	d107      	bne.n	800af3e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af3c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2221      	movs	r2, #33	@ 0x21
 800af4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af4e:	f7f6 ffc3 	bl	8001ed8 <HAL_GetTick>
 800af52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	88fa      	ldrh	r2, [r7, #6]
 800af58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	88fa      	ldrh	r2, [r7, #6]
 800af60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af6c:	d108      	bne.n	800af80 <HAL_UART_Transmit+0x8c>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d104      	bne.n	800af80 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800af76:	2300      	movs	r3, #0
 800af78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	61bb      	str	r3, [r7, #24]
 800af7e:	e003      	b.n	800af88 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af84:	2300      	movs	r3, #0
 800af86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af88:	e030      	b.n	800afec <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2200      	movs	r2, #0
 800af92:	2180      	movs	r1, #128	@ 0x80
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 fb39 	bl	800b60c <UART_WaitOnFlagUntilTimeout>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d005      	beq.n	800afac <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2220      	movs	r2, #32
 800afa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e03d      	b.n	800b028 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10b      	bne.n	800afca <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	881b      	ldrh	r3, [r3, #0]
 800afb6:	461a      	mov	r2, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	3302      	adds	r3, #2
 800afc6:	61bb      	str	r3, [r7, #24]
 800afc8:	e007      	b.n	800afda <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	781a      	ldrb	r2, [r3, #0]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	3301      	adds	r3, #1
 800afd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	3b01      	subs	r3, #1
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1c8      	bne.n	800af8a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	2200      	movs	r2, #0
 800b000:	2140      	movs	r1, #64	@ 0x40
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f000 fb02 	bl	800b60c <UART_WaitOnFlagUntilTimeout>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d005      	beq.n	800b01a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2220      	movs	r2, #32
 800b012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	e006      	b.n	800b028 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2220      	movs	r2, #32
 800b01e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	e000      	b.n	800b028 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b026:	2302      	movs	r3, #2
  }
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3720      	adds	r7, #32
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b034:	b094      	sub	sp, #80	@ 0x50
 800b036:	af00      	add	r7, sp, #0
 800b038:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	4b7e      	ldr	r3, [pc, #504]	@ (800b240 <UART_SetConfig+0x210>)
 800b046:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04a:	689a      	ldr	r2, [r3, #8]
 800b04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	431a      	orrs	r2, r3
 800b052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	431a      	orrs	r2, r3
 800b058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05a:	69db      	ldr	r3, [r3, #28]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4977      	ldr	r1, [pc, #476]	@ (800b244 <UART_SetConfig+0x214>)
 800b068:	4019      	ands	r1, r3
 800b06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b070:	430b      	orrs	r3, r1
 800b072:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b080:	68d9      	ldr	r1, [r3, #12]
 800b082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	ea40 0301 	orr.w	r3, r0, r1
 800b08a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	4b6a      	ldr	r3, [pc, #424]	@ (800b240 <UART_SetConfig+0x210>)
 800b098:	429a      	cmp	r2, r3
 800b09a:	d009      	beq.n	800b0b0 <UART_SetConfig+0x80>
 800b09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	4b69      	ldr	r3, [pc, #420]	@ (800b248 <UART_SetConfig+0x218>)
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d004      	beq.n	800b0b0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a8:	6a1a      	ldr	r2, [r3, #32]
 800b0aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b0ba:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0c4:	430b      	orrs	r3, r1
 800b0c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ce:	f023 000f 	bic.w	r0, r3, #15
 800b0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	ea40 0301 	orr.w	r3, r0, r1
 800b0de:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	4b59      	ldr	r3, [pc, #356]	@ (800b24c <UART_SetConfig+0x21c>)
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d102      	bne.n	800b0f0 <UART_SetConfig+0xc0>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0ee:	e029      	b.n	800b144 <UART_SetConfig+0x114>
 800b0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	4b56      	ldr	r3, [pc, #344]	@ (800b250 <UART_SetConfig+0x220>)
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d102      	bne.n	800b100 <UART_SetConfig+0xd0>
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0fe:	e021      	b.n	800b144 <UART_SetConfig+0x114>
 800b100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	4b53      	ldr	r3, [pc, #332]	@ (800b254 <UART_SetConfig+0x224>)
 800b106:	429a      	cmp	r2, r3
 800b108:	d102      	bne.n	800b110 <UART_SetConfig+0xe0>
 800b10a:	2304      	movs	r3, #4
 800b10c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b10e:	e019      	b.n	800b144 <UART_SetConfig+0x114>
 800b110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	4b50      	ldr	r3, [pc, #320]	@ (800b258 <UART_SetConfig+0x228>)
 800b116:	429a      	cmp	r2, r3
 800b118:	d102      	bne.n	800b120 <UART_SetConfig+0xf0>
 800b11a:	2308      	movs	r3, #8
 800b11c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b11e:	e011      	b.n	800b144 <UART_SetConfig+0x114>
 800b120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	4b4d      	ldr	r3, [pc, #308]	@ (800b25c <UART_SetConfig+0x22c>)
 800b126:	429a      	cmp	r2, r3
 800b128:	d102      	bne.n	800b130 <UART_SetConfig+0x100>
 800b12a:	2310      	movs	r3, #16
 800b12c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b12e:	e009      	b.n	800b144 <UART_SetConfig+0x114>
 800b130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	4b42      	ldr	r3, [pc, #264]	@ (800b240 <UART_SetConfig+0x210>)
 800b136:	429a      	cmp	r2, r3
 800b138:	d102      	bne.n	800b140 <UART_SetConfig+0x110>
 800b13a:	2320      	movs	r3, #32
 800b13c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b13e:	e001      	b.n	800b144 <UART_SetConfig+0x114>
 800b140:	2300      	movs	r3, #0
 800b142:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	4b3d      	ldr	r3, [pc, #244]	@ (800b240 <UART_SetConfig+0x210>)
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d005      	beq.n	800b15a <UART_SetConfig+0x12a>
 800b14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	4b3d      	ldr	r3, [pc, #244]	@ (800b248 <UART_SetConfig+0x218>)
 800b154:	429a      	cmp	r2, r3
 800b156:	f040 8085 	bne.w	800b264 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b15a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b15c:	2200      	movs	r2, #0
 800b15e:	623b      	str	r3, [r7, #32]
 800b160:	627a      	str	r2, [r7, #36]	@ 0x24
 800b162:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b166:	f7fd ff17 	bl	8008f98 <HAL_RCCEx_GetPeriphCLKFreq>
 800b16a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b16c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f000 80e8 	beq.w	800b344 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b178:	4a39      	ldr	r2, [pc, #228]	@ (800b260 <UART_SetConfig+0x230>)
 800b17a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b17e:	461a      	mov	r2, r3
 800b180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b182:	fbb3 f3f2 	udiv	r3, r3, r2
 800b186:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18a:	685a      	ldr	r2, [r3, #4]
 800b18c:	4613      	mov	r3, r2
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	4413      	add	r3, r2
 800b192:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b194:	429a      	cmp	r2, r3
 800b196:	d305      	bcc.n	800b1a4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b19e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d903      	bls.n	800b1ac <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b1aa:	e048      	b.n	800b23e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	61bb      	str	r3, [r7, #24]
 800b1b2:	61fa      	str	r2, [r7, #28]
 800b1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b8:	4a29      	ldr	r2, [pc, #164]	@ (800b260 <UART_SetConfig+0x230>)
 800b1ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	613b      	str	r3, [r7, #16]
 800b1c4:	617a      	str	r2, [r7, #20]
 800b1c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b1ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b1ce:	f7f5 f8a7 	bl	8000320 <__aeabi_uldivmod>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	4619      	mov	r1, r3
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	f04f 0300 	mov.w	r3, #0
 800b1e2:	020b      	lsls	r3, r1, #8
 800b1e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1e8:	0202      	lsls	r2, r0, #8
 800b1ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1ec:	6849      	ldr	r1, [r1, #4]
 800b1ee:	0849      	lsrs	r1, r1, #1
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	eb12 0804 	adds.w	r8, r2, r4
 800b1fa:	eb43 0905 	adc.w	r9, r3, r5
 800b1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	60bb      	str	r3, [r7, #8]
 800b206:	60fa      	str	r2, [r7, #12]
 800b208:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b20c:	4640      	mov	r0, r8
 800b20e:	4649      	mov	r1, r9
 800b210:	f7f5 f886 	bl	8000320 <__aeabi_uldivmod>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	4613      	mov	r3, r2
 800b21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b21c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b21e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b222:	d308      	bcc.n	800b236 <UART_SetConfig+0x206>
 800b224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b22a:	d204      	bcs.n	800b236 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b232:	60da      	str	r2, [r3, #12]
 800b234:	e003      	b.n	800b23e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b23c:	e082      	b.n	800b344 <UART_SetConfig+0x314>
 800b23e:	e081      	b.n	800b344 <UART_SetConfig+0x314>
 800b240:	46002400 	.word	0x46002400
 800b244:	cfff69f3 	.word	0xcfff69f3
 800b248:	56002400 	.word	0x56002400
 800b24c:	40013800 	.word	0x40013800
 800b250:	40004400 	.word	0x40004400
 800b254:	40004800 	.word	0x40004800
 800b258:	40004c00 	.word	0x40004c00
 800b25c:	40005000 	.word	0x40005000
 800b260:	0802e8f8 	.word	0x0802e8f8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b266:	69db      	ldr	r3, [r3, #28]
 800b268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b26c:	d13c      	bne.n	800b2e8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b26e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b270:	2200      	movs	r2, #0
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	607a      	str	r2, [r7, #4]
 800b276:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b27a:	f7fd fe8d 	bl	8008f98 <HAL_RCCEx_GetPeriphCLKFreq>
 800b27e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b282:	2b00      	cmp	r3, #0
 800b284:	d05e      	beq.n	800b344 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b28a:	4a39      	ldr	r2, [pc, #228]	@ (800b370 <UART_SetConfig+0x340>)
 800b28c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b290:	461a      	mov	r2, r3
 800b292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b294:	fbb3 f3f2 	udiv	r3, r3, r2
 800b298:	005a      	lsls	r2, r3, #1
 800b29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	085b      	lsrs	r3, r3, #1
 800b2a0:	441a      	add	r2, r3
 800b2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ae:	2b0f      	cmp	r3, #15
 800b2b0:	d916      	bls.n	800b2e0 <UART_SetConfig+0x2b0>
 800b2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2b8:	d212      	bcs.n	800b2e0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	f023 030f 	bic.w	r3, r3, #15
 800b2c2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c6:	085b      	lsrs	r3, r3, #1
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	f003 0307 	and.w	r3, r3, #7
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b2dc:	60da      	str	r2, [r3, #12]
 800b2de:	e031      	b.n	800b344 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b2e6:	e02d      	b.n	800b344 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b2e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	469a      	mov	sl, r3
 800b2ee:	4693      	mov	fp, r2
 800b2f0:	4650      	mov	r0, sl
 800b2f2:	4659      	mov	r1, fp
 800b2f4:	f7fd fe50 	bl	8008f98 <HAL_RCCEx_GetPeriphCLKFreq>
 800b2f8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b2fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d021      	beq.n	800b344 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b304:	4a1a      	ldr	r2, [pc, #104]	@ (800b370 <UART_SetConfig+0x340>)
 800b306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b30a:	461a      	mov	r2, r3
 800b30c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b30e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	085b      	lsrs	r3, r3, #1
 800b318:	441a      	add	r2, r3
 800b31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b322:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b326:	2b0f      	cmp	r3, #15
 800b328:	d909      	bls.n	800b33e <UART_SetConfig+0x30e>
 800b32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b32c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b330:	d205      	bcs.n	800b33e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b334:	b29a      	uxth	r2, r3
 800b336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	60da      	str	r2, [r3, #12]
 800b33c:	e002      	b.n	800b344 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b346:	2201      	movs	r2, #1
 800b348:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34e:	2201      	movs	r2, #1
 800b350:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b356:	2200      	movs	r2, #0
 800b358:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35c:	2200      	movs	r2, #0
 800b35e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b360:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b364:	4618      	mov	r0, r3
 800b366:	3750      	adds	r7, #80	@ 0x50
 800b368:	46bd      	mov	sp, r7
 800b36a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b36e:	bf00      	nop
 800b370:	0802e8f8 	.word	0x0802e8f8

0800b374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b380:	f003 0308 	and.w	r3, r3, #8
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00a      	beq.n	800b39e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	430a      	orrs	r2, r1
 800b39c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00a      	beq.n	800b3c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c4:	f003 0302 	and.w	r3, r3, #2
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00a      	beq.n	800b3e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	430a      	orrs	r2, r1
 800b3e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3e6:	f003 0304 	and.w	r3, r3, #4
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00a      	beq.n	800b404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	430a      	orrs	r2, r1
 800b402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b408:	f003 0310 	and.w	r3, r3, #16
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00a      	beq.n	800b426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	430a      	orrs	r2, r1
 800b424:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b42a:	f003 0320 	and.w	r3, r3, #32
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00a      	beq.n	800b448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	430a      	orrs	r2, r1
 800b446:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b44c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b450:	2b00      	cmp	r3, #0
 800b452:	d01a      	beq.n	800b48a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	430a      	orrs	r2, r1
 800b468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b46e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b472:	d10a      	bne.n	800b48a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b48e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00a      	beq.n	800b4ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	605a      	str	r2, [r3, #4]
  }
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b098      	sub	sp, #96	@ 0x60
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4c8:	f7f6 fd06 	bl	8001ed8 <HAL_GetTick>
 800b4cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0308 	and.w	r3, r3, #8
 800b4d8:	2b08      	cmp	r3, #8
 800b4da:	d12f      	bne.n	800b53c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 f88e 	bl	800b60c <UART_WaitOnFlagUntilTimeout>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d022      	beq.n	800b53c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fe:	e853 3f00 	ldrex	r3, [r3]
 800b502:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b50a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	461a      	mov	r2, r3
 800b512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b514:	647b      	str	r3, [r7, #68]	@ 0x44
 800b516:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b518:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b51a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b51c:	e841 2300 	strex	r3, r2, [r1]
 800b520:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e6      	bne.n	800b4f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2220      	movs	r2, #32
 800b52c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b538:	2303      	movs	r3, #3
 800b53a:	e063      	b.n	800b604 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 0304 	and.w	r3, r3, #4
 800b546:	2b04      	cmp	r3, #4
 800b548:	d149      	bne.n	800b5de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b54a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b552:	2200      	movs	r2, #0
 800b554:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f857 	bl	800b60c <UART_WaitOnFlagUntilTimeout>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d03c      	beq.n	800b5de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	e853 3f00 	ldrex	r3, [r3]
 800b570:	623b      	str	r3, [r7, #32]
   return(result);
 800b572:	6a3b      	ldr	r3, [r7, #32]
 800b574:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b578:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	461a      	mov	r2, r3
 800b580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b582:	633b      	str	r3, [r7, #48]	@ 0x30
 800b584:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b58a:	e841 2300 	strex	r3, r2, [r1]
 800b58e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1e6      	bne.n	800b564 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3308      	adds	r3, #8
 800b59c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	e853 3f00 	ldrex	r3, [r3]
 800b5a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f023 0301 	bic.w	r3, r3, #1
 800b5ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5b6:	61fa      	str	r2, [r7, #28]
 800b5b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ba:	69b9      	ldr	r1, [r7, #24]
 800b5bc:	69fa      	ldr	r2, [r7, #28]
 800b5be:	e841 2300 	strex	r3, r2, [r1]
 800b5c2:	617b      	str	r3, [r7, #20]
   return(result);
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1e5      	bne.n	800b596 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5da:	2303      	movs	r3, #3
 800b5dc:	e012      	b.n	800b604 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2220      	movs	r2, #32
 800b5ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3758      	adds	r7, #88	@ 0x58
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	603b      	str	r3, [r7, #0]
 800b618:	4613      	mov	r3, r2
 800b61a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b61c:	e04f      	b.n	800b6be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b624:	d04b      	beq.n	800b6be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b626:	f7f6 fc57 	bl	8001ed8 <HAL_GetTick>
 800b62a:	4602      	mov	r2, r0
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	1ad3      	subs	r3, r2, r3
 800b630:	69ba      	ldr	r2, [r7, #24]
 800b632:	429a      	cmp	r2, r3
 800b634:	d302      	bcc.n	800b63c <UART_WaitOnFlagUntilTimeout+0x30>
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d101      	bne.n	800b640 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e04e      	b.n	800b6de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 0304 	and.w	r3, r3, #4
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d037      	beq.n	800b6be <UART_WaitOnFlagUntilTimeout+0xb2>
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	2b80      	cmp	r3, #128	@ 0x80
 800b652:	d034      	beq.n	800b6be <UART_WaitOnFlagUntilTimeout+0xb2>
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2b40      	cmp	r3, #64	@ 0x40
 800b658:	d031      	beq.n	800b6be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	69db      	ldr	r3, [r3, #28]
 800b660:	f003 0308 	and.w	r3, r3, #8
 800b664:	2b08      	cmp	r3, #8
 800b666:	d110      	bne.n	800b68a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2208      	movs	r2, #8
 800b66e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 f838 	bl	800b6e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2208      	movs	r2, #8
 800b67a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	e029      	b.n	800b6de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	69db      	ldr	r3, [r3, #28]
 800b690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b698:	d111      	bne.n	800b6be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 f81e 	bl	800b6e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2220      	movs	r2, #32
 800b6ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e00f      	b.n	800b6de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	69da      	ldr	r2, [r3, #28]
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	bf0c      	ite	eq
 800b6ce:	2301      	moveq	r3, #1
 800b6d0:	2300      	movne	r3, #0
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	79fb      	ldrb	r3, [r7, #7]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d0a0      	beq.n	800b61e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b095      	sub	sp, #84	@ 0x54
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6f6:	e853 3f00 	ldrex	r3, [r3]
 800b6fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	461a      	mov	r2, r3
 800b70a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b70c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b70e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b710:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b712:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b714:	e841 2300 	strex	r3, r2, [r1]
 800b718:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1e6      	bne.n	800b6ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	3308      	adds	r3, #8
 800b726:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	e853 3f00 	ldrex	r3, [r3]
 800b72e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b736:	f023 0301 	bic.w	r3, r3, #1
 800b73a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3308      	adds	r3, #8
 800b742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b744:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b746:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b748:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b74a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b74c:	e841 2300 	strex	r3, r2, [r1]
 800b750:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1e3      	bne.n	800b720 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d118      	bne.n	800b792 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	e853 3f00 	ldrex	r3, [r3]
 800b76c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	f023 0310 	bic.w	r3, r3, #16
 800b774:	647b      	str	r3, [r7, #68]	@ 0x44
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b77e:	61bb      	str	r3, [r7, #24]
 800b780:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b782:	6979      	ldr	r1, [r7, #20]
 800b784:	69ba      	ldr	r2, [r7, #24]
 800b786:	e841 2300 	strex	r3, r2, [r1]
 800b78a:	613b      	str	r3, [r7, #16]
   return(result);
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1e6      	bne.n	800b760 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2220      	movs	r2, #32
 800b796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b7a6:	bf00      	nop
 800b7a8:	3754      	adds	r7, #84	@ 0x54
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b085      	sub	sp, #20
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d101      	bne.n	800b7c8 <HAL_UARTEx_DisableFifoMode+0x16>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	e027      	b.n	800b818 <HAL_UARTEx_DisableFifoMode+0x66>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2224      	movs	r2, #36	@ 0x24
 800b7d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f022 0201 	bic.w	r2, r2, #1
 800b7ee:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b7f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2220      	movs	r2, #32
 800b80a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b834:	2b01      	cmp	r3, #1
 800b836:	d101      	bne.n	800b83c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b838:	2302      	movs	r3, #2
 800b83a:	e02d      	b.n	800b898 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2224      	movs	r2, #36	@ 0x24
 800b848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f022 0201 	bic.w	r2, r2, #1
 800b862:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	430a      	orrs	r2, r1
 800b876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f84f 	bl	800b91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2220      	movs	r2, #32
 800b88a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d101      	bne.n	800b8b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	e02d      	b.n	800b914 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2224      	movs	r2, #36	@ 0x24
 800b8c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f022 0201 	bic.w	r2, r2, #1
 800b8de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	430a      	orrs	r2, r1
 800b8f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 f811 	bl	800b91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2220      	movs	r2, #32
 800b906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d108      	bne.n	800b93e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b93c:	e031      	b.n	800b9a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b93e:	2308      	movs	r3, #8
 800b940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b942:	2308      	movs	r3, #8
 800b944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	0e5b      	lsrs	r3, r3, #25
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	f003 0307 	and.w	r3, r3, #7
 800b954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	0f5b      	lsrs	r3, r3, #29
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	f003 0307 	and.w	r3, r3, #7
 800b964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b966:	7bbb      	ldrb	r3, [r7, #14]
 800b968:	7b3a      	ldrb	r2, [r7, #12]
 800b96a:	4911      	ldr	r1, [pc, #68]	@ (800b9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800b96c:	5c8a      	ldrb	r2, [r1, r2]
 800b96e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b972:	7b3a      	ldrb	r2, [r7, #12]
 800b974:	490f      	ldr	r1, [pc, #60]	@ (800b9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800b976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b978:	fb93 f3f2 	sdiv	r3, r3, r2
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b984:	7bfb      	ldrb	r3, [r7, #15]
 800b986:	7b7a      	ldrb	r2, [r7, #13]
 800b988:	4909      	ldr	r1, [pc, #36]	@ (800b9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800b98a:	5c8a      	ldrb	r2, [r1, r2]
 800b98c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b990:	7b7a      	ldrb	r2, [r7, #13]
 800b992:	4908      	ldr	r1, [pc, #32]	@ (800b9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800b994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b996:	fb93 f3f2 	sdiv	r3, r3, r2
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b9a2:	bf00      	nop
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	0802e910 	.word	0x0802e910
 800b9b4:	0802e918 	.word	0x0802e918

0800b9b8 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f043 0202 	orr.w	r2, r3, #2
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	685a      	ldr	r2, [r3, #4]
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	021b      	lsls	r3, r3, #8
 800b9d8:	431a      	orrs	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f023 0202 	bic.w	r2, r3, #2
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	601a      	str	r2, [r3, #0]
}
 800b9ea:	bf00      	nop
 800b9ec:	370c      	adds	r7, #12
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
	...

0800b9f8 <__NVIC_SetPriority>:
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	4603      	mov	r3, r0
 800ba00:	6039      	str	r1, [r7, #0]
 800ba02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	db0a      	blt.n	800ba22 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	490c      	ldr	r1, [pc, #48]	@ (800ba44 <__NVIC_SetPriority+0x4c>)
 800ba12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba16:	0112      	lsls	r2, r2, #4
 800ba18:	b2d2      	uxtb	r2, r2
 800ba1a:	440b      	add	r3, r1
 800ba1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ba20:	e00a      	b.n	800ba38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	4908      	ldr	r1, [pc, #32]	@ (800ba48 <__NVIC_SetPriority+0x50>)
 800ba28:	79fb      	ldrb	r3, [r7, #7]
 800ba2a:	f003 030f 	and.w	r3, r3, #15
 800ba2e:	3b04      	subs	r3, #4
 800ba30:	0112      	lsls	r2, r2, #4
 800ba32:	b2d2      	uxtb	r2, r2
 800ba34:	440b      	add	r3, r1
 800ba36:	761a      	strb	r2, [r3, #24]
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr
 800ba44:	e000e100 	.word	0xe000e100
 800ba48:	e000ed00 	.word	0xe000ed00

0800ba4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800ba50:	4b05      	ldr	r3, [pc, #20]	@ (800ba68 <SysTick_Handler+0x1c>)
 800ba52:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ba54:	f002 fa82 	bl	800df5c <xTaskGetSchedulerState>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d001      	beq.n	800ba62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ba5e:	f003 f80d 	bl	800ea7c <xPortSysTickHandler>
  }
}
 800ba62:	bf00      	nop
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	e000e010 	.word	0xe000e010

0800ba6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800ba70:	2100      	movs	r1, #0
 800ba72:	f06f 0004 	mvn.w	r0, #4
 800ba76:	f7ff ffbf 	bl	800b9f8 <__NVIC_SetPriority>
#endif
}
 800ba7a:	bf00      	nop
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b086      	sub	sp, #24
 800ba82:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba88:	f3ef 8305 	mrs	r3, IPSR
 800ba8c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba8e:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800ba94:	2301      	movs	r3, #1
 800ba96:	617b      	str	r3, [r7, #20]
 800ba98:	e013      	b.n	800bac2 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800ba9a:	f002 fa5f 	bl	800df5c <xTaskGetSchedulerState>
 800ba9e:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d00d      	beq.n	800bac2 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800baa6:	f3ef 8310 	mrs	r3, PRIMASK
 800baaa:	60bb      	str	r3, [r7, #8]
  return(result);
 800baac:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d105      	bne.n	800babe <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bab2:	f3ef 8311 	mrs	r3, BASEPRI
 800bab6:	607b      	str	r3, [r7, #4]
  return(result);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800babe:	2301      	movs	r3, #1
 800bac0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800bac2:	697b      	ldr	r3, [r7, #20]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3718      	adds	r7, #24
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800bad2:	f7ff ffd4 	bl	800ba7e <IRQ_Context>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d003      	beq.n	800bae4 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800badc:	f06f 0305 	mvn.w	r3, #5
 800bae0:	607b      	str	r3, [r7, #4]
 800bae2:	e012      	b.n	800bb0a <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800bae4:	f002 fa3a 	bl	800df5c <xTaskGetSchedulerState>
 800bae8:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d109      	bne.n	800bb04 <osKernelInitialize+0x38>
 800baf0:	4b08      	ldr	r3, [pc, #32]	@ (800bb14 <osKernelInitialize+0x48>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d105      	bne.n	800bb04 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800baf8:	4b06      	ldr	r3, [pc, #24]	@ (800bb14 <osKernelInitialize+0x48>)
 800bafa:	2201      	movs	r2, #1
 800bafc:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	e002      	b.n	800bb0a <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800bb04:	f04f 33ff 	mov.w	r3, #4294967295
 800bb08:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800bb0a:	687b      	ldr	r3, [r7, #4]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	20045c8c 	.word	0x20045c8c

0800bb18 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800bb1e:	f7ff ffae 	bl	800ba7e <IRQ_Context>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d003      	beq.n	800bb30 <osKernelStart+0x18>
    stat = osErrorISR;
 800bb28:	f06f 0305 	mvn.w	r3, #5
 800bb2c:	607b      	str	r3, [r7, #4]
 800bb2e:	e016      	b.n	800bb5e <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800bb30:	f002 fa14 	bl	800df5c <xTaskGetSchedulerState>
 800bb34:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d10d      	bne.n	800bb58 <osKernelStart+0x40>
 800bb3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb68 <osKernelStart+0x50>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d109      	bne.n	800bb58 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bb44:	f7ff ff92 	bl	800ba6c <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800bb48:	4b07      	ldr	r3, [pc, #28]	@ (800bb68 <osKernelStart+0x50>)
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bb4e:	f001 fcc7 	bl	800d4e0 <vTaskStartScheduler>
      stat = osOK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	607b      	str	r3, [r7, #4]
 800bb56:	e002      	b.n	800bb5e <osKernelStart+0x46>
    } else {
      stat = osError;
 800bb58:	f04f 33ff 	mov.w	r3, #4294967295
 800bb5c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800bb5e:	687b      	ldr	r3, [r7, #4]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20045c8c 	.word	0x20045c8c

0800bb6c <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b08e      	sub	sp, #56	@ 0x38
 800bb70:	af04      	add	r7, sp, #16
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800bb7c:	f7ff ff7f 	bl	800ba7e <IRQ_Context>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d17f      	bne.n	800bc86 <osThreadNew+0x11a>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d07c      	beq.n	800bc86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bb8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bb92:	2318      	movs	r3, #24
 800bb94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d045      	beq.n	800bc32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d002      	beq.n	800bbb4 <osThreadNew+0x48>
        name = attr->name;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d008      	beq.n	800bbda <osThreadNew+0x6e>
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	2b38      	cmp	r3, #56	@ 0x38
 800bbcc:	d805      	bhi.n	800bbda <osThreadNew+0x6e>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	f003 0301 	and.w	r3, r3, #1
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e054      	b.n	800bc88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d003      	beq.n	800bbee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	089b      	lsrs	r3, r3, #2
 800bbec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00e      	beq.n	800bc14 <osThreadNew+0xa8>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	2b5b      	cmp	r3, #91	@ 0x5b
 800bbfc:	d90a      	bls.n	800bc14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d006      	beq.n	800bc14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	61bb      	str	r3, [r7, #24]
 800bc12:	e010      	b.n	800bc36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10c      	bne.n	800bc36 <osThreadNew+0xca>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d108      	bne.n	800bc36 <osThreadNew+0xca>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d104      	bne.n	800bc36 <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	61bb      	str	r3, [r7, #24]
 800bc30:	e001      	b.n	800bc36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bc32:	2300      	movs	r3, #0
 800bc34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d110      	bne.n	800bc5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc44:	9202      	str	r2, [sp, #8]
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	6a3a      	ldr	r2, [r7, #32]
 800bc50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f001 fa74 	bl	800d140 <xTaskCreateStatic>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	617b      	str	r3, [r7, #20]
 800bc5c:	e013      	b.n	800bc86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d110      	bne.n	800bc86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	f107 0314 	add.w	r3, r7, #20
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f001 faaf 	bl	800d1da <xTaskCreate>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d001      	beq.n	800bc86 <osThreadNew+0x11a>
            hTask = NULL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800bc86:	697b      	ldr	r3, [r7, #20]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3728      	adds	r7, #40	@ 0x28
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800bc98:	f7ff fef1 	bl	800ba7e <IRQ_Context>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <osDelay+0x1a>
    stat = osErrorISR;
 800bca2:	f06f 0305 	mvn.w	r3, #5
 800bca6:	60fb      	str	r3, [r7, #12]
 800bca8:	e007      	b.n	800bcba <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d002      	beq.n	800bcba <osDelay+0x2a>
      vTaskDelay(ticks);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f001 fbed 	bl	800d494 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800bcba:	68fb      	ldr	r3, [r7, #12]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b088      	sub	sp, #32
 800bcc8:	af02      	add	r7, sp, #8
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 800bcd4:	f7ff fed3 	bl	800ba7e <IRQ_Context>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d175      	bne.n	800bdca <osSemaphoreNew+0x106>
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d072      	beq.n	800bdca <osSemaphoreNew+0x106>
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d86e      	bhi.n	800bdca <osSemaphoreNew+0x106>
    mem = -1;
 800bcec:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d015      	beq.n	800bd24 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d006      	beq.n	800bd0e <osSemaphoreNew+0x4a>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	2b4f      	cmp	r3, #79	@ 0x4f
 800bd06:	d902      	bls.n	800bd0e <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	613b      	str	r3, [r7, #16]
 800bd0c:	e00c      	b.n	800bd28 <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d108      	bne.n	800bd28 <osSemaphoreNew+0x64>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d104      	bne.n	800bd28 <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	613b      	str	r3, [r7, #16]
 800bd22:	e001      	b.n	800bd28 <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 800bd24:	2300      	movs	r3, #0
 800bd26:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2e:	d04c      	beq.n	800bdca <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d128      	bne.n	800bd88 <osSemaphoreNew+0xc4>
        if (mem == 1) {
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d10a      	bne.n	800bd52 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	2203      	movs	r2, #3
 800bd42:	9200      	str	r2, [sp, #0]
 800bd44:	2200      	movs	r2, #0
 800bd46:	2100      	movs	r1, #0
 800bd48:	2001      	movs	r0, #1
 800bd4a:	f000 fb2e 	bl	800c3aa <xQueueGenericCreateStatic>
 800bd4e:	6178      	str	r0, [r7, #20]
 800bd50:	e005      	b.n	800bd5e <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bd52:	2203      	movs	r2, #3
 800bd54:	2100      	movs	r1, #0
 800bd56:	2001      	movs	r0, #1
 800bd58:	f000 fb70 	bl	800c43c <xQueueGenericCreate>
 800bd5c:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d022      	beq.n	800bdaa <osSemaphoreNew+0xe6>
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d01f      	beq.n	800bdaa <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	2100      	movs	r1, #0
 800bd70:	6978      	ldr	r0, [r7, #20]
 800bd72:	f000 fc23 	bl	800c5bc <xQueueGenericSend>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d016      	beq.n	800bdaa <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 800bd7c:	6978      	ldr	r0, [r7, #20]
 800bd7e:	f000 fff0 	bl	800cd62 <vQueueDelete>
            hSemaphore = NULL;
 800bd82:	2300      	movs	r3, #0
 800bd84:	617b      	str	r3, [r7, #20]
 800bd86:	e010      	b.n	800bdaa <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d108      	bne.n	800bda0 <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	461a      	mov	r2, r3
 800bd94:	68b9      	ldr	r1, [r7, #8]
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f000 fbbe 	bl	800c518 <xQueueCreateCountingSemaphoreStatic>
 800bd9c:	6178      	str	r0, [r7, #20]
 800bd9e:	e004      	b.n	800bdaa <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bda0:	68b9      	ldr	r1, [r7, #8]
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f000 fbe3 	bl	800c56e <xQueueCreateCountingSemaphore>
 800bda8:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00c      	beq.n	800bdca <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d009      	beq.n	800bdca <osSemaphoreNew+0x106>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d005      	beq.n	800bdca <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	6978      	ldr	r0, [r7, #20]
 800bdc6:	f001 f911 	bl	800cfec <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 800bdca:	697b      	ldr	r3, [r7, #20]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d103      	bne.n	800bdf4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bdec:	f06f 0303 	mvn.w	r3, #3
 800bdf0:	617b      	str	r3, [r7, #20]
 800bdf2:	e034      	b.n	800be5e <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 800bdf4:	f7ff fe43 	bl	800ba7e <IRQ_Context>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d01e      	beq.n	800be3c <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d003      	beq.n	800be0c <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 800be04:	f06f 0303 	mvn.w	r3, #3
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	e028      	b.n	800be5e <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 800be0c:	2300      	movs	r3, #0
 800be0e:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800be10:	f107 030c 	add.w	r3, r7, #12
 800be14:	461a      	mov	r2, r3
 800be16:	2100      	movs	r1, #0
 800be18:	6938      	ldr	r0, [r7, #16]
 800be1a:	f000 ff30 	bl	800cc7e <xQueueReceiveFromISR>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b01      	cmp	r3, #1
 800be22:	d003      	beq.n	800be2c <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 800be24:	f06f 0302 	mvn.w	r3, #2
 800be28:	617b      	str	r3, [r7, #20]
 800be2a:	e018      	b.n	800be5e <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d015      	beq.n	800be5e <osSemaphoreAcquire+0x8a>
 800be32:	4b0d      	ldr	r3, [pc, #52]	@ (800be68 <osSemaphoreAcquire+0x94>)
 800be34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be38:	601a      	str	r2, [r3, #0]
 800be3a:	e010      	b.n	800be5e <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6938      	ldr	r0, [r7, #16]
 800be40:	f000 fe43 	bl	800caca <xQueueSemaphoreTake>
 800be44:	4603      	mov	r3, r0
 800be46:	2b01      	cmp	r3, #1
 800be48:	d009      	beq.n	800be5e <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 800be50:	f06f 0301 	mvn.w	r3, #1
 800be54:	617b      	str	r3, [r7, #20]
 800be56:	e002      	b.n	800be5e <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 800be58:	f06f 0302 	mvn.w	r3, #2
 800be5c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800be5e:	697b      	ldr	r3, [r7, #20]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3718      	adds	r7, #24
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	e000ed04 	.word	0xe000ed04

0800be6c <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800be78:	2300      	movs	r3, #0
 800be7a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d103      	bne.n	800be8a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800be82:	f06f 0303 	mvn.w	r3, #3
 800be86:	617b      	str	r3, [r7, #20]
 800be88:	e027      	b.n	800beda <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 800be8a:	f7ff fdf8 	bl	800ba7e <IRQ_Context>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d016      	beq.n	800bec2 <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 800be94:	2300      	movs	r3, #0
 800be96:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800be98:	f107 030c 	add.w	r3, r7, #12
 800be9c:	4619      	mov	r1, r3
 800be9e:	6938      	ldr	r0, [r7, #16]
 800bea0:	f000 fcdf 	bl	800c862 <xQueueGiveFromISR>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d003      	beq.n	800beb2 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800beaa:	f06f 0302 	mvn.w	r3, #2
 800beae:	617b      	str	r3, [r7, #20]
 800beb0:	e013      	b.n	800beda <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d010      	beq.n	800beda <osSemaphoreRelease+0x6e>
 800beb8:	4b0a      	ldr	r3, [pc, #40]	@ (800bee4 <osSemaphoreRelease+0x78>)
 800beba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	e00b      	b.n	800beda <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bec2:	2300      	movs	r3, #0
 800bec4:	2200      	movs	r2, #0
 800bec6:	2100      	movs	r1, #0
 800bec8:	6938      	ldr	r0, [r7, #16]
 800beca:	f000 fb77 	bl	800c5bc <xQueueGenericSend>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d002      	beq.n	800beda <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 800bed4:	f06f 0302 	mvn.w	r3, #2
 800bed8:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 800beda:	697b      	ldr	r3, [r7, #20]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3718      	adds	r7, #24
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	e000ed04 	.word	0xe000ed04

0800bee8 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af02      	add	r7, sp, #8
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800bef4:	2300      	movs	r3, #0
 800bef6:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800bef8:	f7ff fdc1 	bl	800ba7e <IRQ_Context>
 800befc:	4603      	mov	r3, r0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d15f      	bne.n	800bfc2 <osMessageQueueNew+0xda>
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d05c      	beq.n	800bfc2 <osMessageQueueNew+0xda>
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d059      	beq.n	800bfc2 <osMessageQueueNew+0xda>
    mem = -1;
 800bf0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf12:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d029      	beq.n	800bf6e <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d012      	beq.n	800bf48 <osMessageQueueNew+0x60>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	2b4f      	cmp	r3, #79	@ 0x4f
 800bf28:	d90e      	bls.n	800bf48 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00a      	beq.n	800bf48 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	695a      	ldr	r2, [r3, #20]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	68b9      	ldr	r1, [r7, #8]
 800bf3a:	fb01 f303 	mul.w	r3, r1, r3
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d302      	bcc.n	800bf48 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 800bf42:	2301      	movs	r3, #1
 800bf44:	613b      	str	r3, [r7, #16]
 800bf46:	e014      	b.n	800bf72 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d110      	bne.n	800bf72 <osMessageQueueNew+0x8a>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10c      	bne.n	800bf72 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d108      	bne.n	800bf72 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d104      	bne.n	800bf72 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	613b      	str	r3, [r7, #16]
 800bf6c:	e001      	b.n	800bf72 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d10b      	bne.n	800bf90 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	691a      	ldr	r2, [r3, #16]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	2100      	movs	r1, #0
 800bf82:	9100      	str	r1, [sp, #0]
 800bf84:	68b9      	ldr	r1, [r7, #8]
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f000 fa0f 	bl	800c3aa <xQueueGenericCreateStatic>
 800bf8c:	6178      	str	r0, [r7, #20]
 800bf8e:	e008      	b.n	800bfa2 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d105      	bne.n	800bfa2 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bf96:	2200      	movs	r2, #0
 800bf98:	68b9      	ldr	r1, [r7, #8]
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f000 fa4e 	bl	800c43c <xQueueGenericCreate>
 800bfa0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00c      	beq.n	800bfc2 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d009      	beq.n	800bfc2 <osMessageQueueNew+0xda>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d005      	beq.n	800bfc2 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6978      	ldr	r0, [r7, #20]
 800bfbe:	f001 f815 	bl	800cfec <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800bfc2:	697b      	ldr	r3, [r7, #20]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b088      	sub	sp, #32
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	603b      	str	r3, [r7, #0]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800bfe4:	f7ff fd4b 	bl	800ba7e <IRQ_Context>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d024      	beq.n	800c038 <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d005      	beq.n	800c000 <osMessageQueuePut+0x34>
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d002      	beq.n	800c000 <osMessageQueuePut+0x34>
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d003      	beq.n	800c008 <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 800c000:	f06f 0303 	mvn.w	r3, #3
 800c004:	61fb      	str	r3, [r7, #28]
 800c006:	e034      	b.n	800c072 <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 800c008:	2300      	movs	r3, #0
 800c00a:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c00c:	f107 0214 	add.w	r2, r7, #20
 800c010:	2300      	movs	r3, #0
 800c012:	68b9      	ldr	r1, [r7, #8]
 800c014:	69b8      	ldr	r0, [r7, #24]
 800c016:	f000 fb9e 	bl	800c756 <xQueueGenericSendFromISR>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d003      	beq.n	800c028 <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 800c020:	f06f 0302 	mvn.w	r3, #2
 800c024:	61fb      	str	r3, [r7, #28]
 800c026:	e024      	b.n	800c072 <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d021      	beq.n	800c072 <osMessageQueuePut+0xa6>
 800c02e:	4b13      	ldr	r3, [pc, #76]	@ (800c07c <osMessageQueuePut+0xb0>)
 800c030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	e01c      	b.n	800c072 <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d002      	beq.n	800c044 <osMessageQueuePut+0x78>
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d103      	bne.n	800c04c <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 800c044:	f06f 0303 	mvn.w	r3, #3
 800c048:	61fb      	str	r3, [r7, #28]
 800c04a:	e012      	b.n	800c072 <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c04c:	2300      	movs	r3, #0
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	68b9      	ldr	r1, [r7, #8]
 800c052:	69b8      	ldr	r0, [r7, #24]
 800c054:	f000 fab2 	bl	800c5bc <xQueueGenericSend>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d009      	beq.n	800c072 <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d003      	beq.n	800c06c <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 800c064:	f06f 0301 	mvn.w	r3, #1
 800c068:	61fb      	str	r3, [r7, #28]
 800c06a:	e002      	b.n	800c072 <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 800c06c:	f06f 0302 	mvn.w	r3, #2
 800c070:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800c072:	69fb      	ldr	r3, [r7, #28]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3720      	adds	r7, #32
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	e000ed04 	.word	0xe000ed04

0800c080 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c080:	b580      	push	{r7, lr}
 800c082:	b088      	sub	sp, #32
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c092:	2300      	movs	r3, #0
 800c094:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800c096:	f7ff fcf2 	bl	800ba7e <IRQ_Context>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d024      	beq.n	800c0ea <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d005      	beq.n	800c0b2 <osMessageQueueGet+0x32>
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d002      	beq.n	800c0b2 <osMessageQueueGet+0x32>
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d003      	beq.n	800c0ba <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800c0b2:	f06f 0303 	mvn.w	r3, #3
 800c0b6:	61fb      	str	r3, [r7, #28]
 800c0b8:	e033      	b.n	800c122 <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c0be:	f107 0314 	add.w	r3, r7, #20
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	68b9      	ldr	r1, [r7, #8]
 800c0c6:	69b8      	ldr	r0, [r7, #24]
 800c0c8:	f000 fdd9 	bl	800cc7e <xQueueReceiveFromISR>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d003      	beq.n	800c0da <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 800c0d2:	f06f 0302 	mvn.w	r3, #2
 800c0d6:	61fb      	str	r3, [r7, #28]
 800c0d8:	e023      	b.n	800c122 <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d020      	beq.n	800c122 <osMessageQueueGet+0xa2>
 800c0e0:	4b12      	ldr	r3, [pc, #72]	@ (800c12c <osMessageQueueGet+0xac>)
 800c0e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0e6:	601a      	str	r2, [r3, #0]
 800c0e8:	e01b      	b.n	800c122 <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <osMessageQueueGet+0x76>
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d103      	bne.n	800c0fe <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 800c0f6:	f06f 0303 	mvn.w	r3, #3
 800c0fa:	61fb      	str	r3, [r7, #28]
 800c0fc:	e011      	b.n	800c122 <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	68b9      	ldr	r1, [r7, #8]
 800c102:	69b8      	ldr	r0, [r7, #24]
 800c104:	f000 fc25 	bl	800c952 <xQueueReceive>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d009      	beq.n	800c122 <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d003      	beq.n	800c11c <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 800c114:	f06f 0301 	mvn.w	r3, #1
 800c118:	61fb      	str	r3, [r7, #28]
 800c11a:	e002      	b.n	800c122 <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 800c11c:	f06f 0302 	mvn.w	r3, #2
 800c120:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800c122:	69fb      	ldr	r3, [r7, #28]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3720      	adds	r7, #32
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	e000ed04 	.word	0xe000ed04

0800c130 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	4a07      	ldr	r2, [pc, #28]	@ (800c15c <vApplicationGetIdleTaskMemory+0x2c>)
 800c140:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	4a06      	ldr	r2, [pc, #24]	@ (800c160 <vApplicationGetIdleTaskMemory+0x30>)
 800c146:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c14e:	601a      	str	r2, [r3, #0]
}
 800c150:	bf00      	nop
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	20045c90 	.word	0x20045c90
 800c160:	20045cec 	.word	0x20045cec

0800c164 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	4a07      	ldr	r2, [pc, #28]	@ (800c190 <vApplicationGetTimerTaskMemory+0x2c>)
 800c174:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	4a06      	ldr	r2, [pc, #24]	@ (800c194 <vApplicationGetTimerTaskMemory+0x30>)
 800c17a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2280      	movs	r2, #128	@ 0x80
 800c180:	601a      	str	r2, [r3, #0]
}
 800c182:	bf00      	nop
 800c184:	3714      	adds	r7, #20
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	200464ec 	.word	0x200464ec
 800c194:	20046548 	.word	0x20046548

0800c198 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f103 0208 	add.w	r2, r3, #8
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f103 0208 	add.w	r2, r3, #8
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f103 0208 	add.w	r2, r3, #8
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1cc:	bf00      	nop
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b085      	sub	sp, #20
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c208:	d103      	bne.n	800c212 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	60fb      	str	r3, [r7, #12]
 800c210:	e00c      	b.n	800c22c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	3308      	adds	r3, #8
 800c216:	60fb      	str	r3, [r7, #12]
 800c218:	e002      	b.n	800c220 <vListInsert+0x2e>
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	60fb      	str	r3, [r7, #12]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d2f6      	bcs.n	800c21a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	685a      	ldr	r2, [r3, #4]
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	683a      	ldr	r2, [r7, #0]
 800c23a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	683a      	ldr	r2, [r7, #0]
 800c246:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	1c5a      	adds	r2, r3, #1
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	601a      	str	r2, [r3, #0]
}
 800c258:	bf00      	nop
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	6892      	ldr	r2, [r2, #8]
 800c27a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	6852      	ldr	r2, [r2, #4]
 800c284:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d103      	bne.n	800c298 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	689a      	ldr	r2, [r3, #8]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	1e5a      	subs	r2, r3, #1
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3714      	adds	r7, #20
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d103      	bne.n	800c2d8 <xQueueGenericReset+0x20>
 800c2d0:	f002 fd72 	bl	800edb8 <ulSetInterruptMask>
 800c2d4:	bf00      	nop
 800c2d6:	e7fd      	b.n	800c2d4 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d057      	beq.n	800c38e <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d053      	beq.n	800c38e <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	fba3 2302 	umull	r2, r3, r3, r2
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d000      	beq.n	800c2fa <xQueueGenericReset+0x42>
 800c2f8:	2101      	movs	r1, #1
 800c2fa:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d146      	bne.n	800c38e <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800c300:	f002 fb90 	bl	800ea24 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c30c:	68b9      	ldr	r1, [r7, #8]
 800c30e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c310:	fb01 f303 	mul.w	r3, r1, r3
 800c314:	441a      	add	r2, r3
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	2200      	movs	r2, #0
 800c31e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c330:	3b01      	subs	r3, #1
 800c332:	68b9      	ldr	r1, [r7, #8]
 800c334:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c336:	fb01 f303 	mul.w	r3, r1, r3
 800c33a:	441a      	add	r2, r3
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	22ff      	movs	r2, #255	@ 0xff
 800c344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	22ff      	movs	r2, #255	@ 0xff
 800c34c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10e      	bne.n	800c374 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d014      	beq.n	800c388 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	3310      	adds	r3, #16
 800c362:	4618      	mov	r0, r3
 800c364:	f001 fbf0 	bl	800db48 <xTaskRemoveFromEventList>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00c      	beq.n	800c388 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c36e:	f002 fb47 	bl	800ea00 <vPortYield>
 800c372:	e009      	b.n	800c388 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	3310      	adds	r3, #16
 800c378:	4618      	mov	r0, r3
 800c37a:	f7ff ff0d 	bl	800c198 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	3324      	adds	r3, #36	@ 0x24
 800c382:	4618      	mov	r0, r3
 800c384:	f7ff ff08 	bl	800c198 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800c388:	f002 fb5e 	bl	800ea48 <vPortExitCritical>
 800c38c:	e001      	b.n	800c392 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800c38e:	2300      	movs	r3, #0
 800c390:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d103      	bne.n	800c3a0 <xQueueGenericReset+0xe8>
 800c398:	f002 fd0e 	bl	800edb8 <ulSetInterruptMask>
 800c39c:	bf00      	nop
 800c39e:	e7fd      	b.n	800c39c <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b088      	sub	sp, #32
 800c3ae:	af02      	add	r7, sp, #8
 800c3b0:	60f8      	str	r0, [r7, #12]
 800c3b2:	60b9      	str	r1, [r7, #8]
 800c3b4:	607a      	str	r2, [r7, #4]
 800c3b6:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d103      	bne.n	800c3ca <xQueueGenericCreateStatic+0x20>
 800c3c2:	f002 fcf9 	bl	800edb8 <ulSetInterruptMask>
 800c3c6:	bf00      	nop
 800c3c8:	e7fd      	b.n	800c3c6 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d029      	beq.n	800c424 <xQueueGenericCreateStatic+0x7a>
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d026      	beq.n	800c424 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d002      	beq.n	800c3e2 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d020      	beq.n	800c424 <xQueueGenericCreateStatic+0x7a>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d102      	bne.n	800c3ee <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d11a      	bne.n	800c424 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800c3ee:	2350      	movs	r3, #80	@ 0x50
 800c3f0:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	2b50      	cmp	r3, #80	@ 0x50
 800c3f6:	d003      	beq.n	800c400 <xQueueGenericCreateStatic+0x56>
 800c3f8:	f002 fcde 	bl	800edb8 <ulSetInterruptMask>
 800c3fc:	bf00      	nop
 800c3fe:	e7fd      	b.n	800c3fc <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800c400:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	2201      	movs	r2, #1
 800c40a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c40e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	4613      	mov	r3, r2
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	68b9      	ldr	r1, [r7, #8]
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f000 f858 	bl	800c4d2 <prvInitialiseNewQueue>
 800c422:	e006      	b.n	800c432 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d103      	bne.n	800c432 <xQueueGenericCreateStatic+0x88>
 800c42a:	f002 fcc5 	bl	800edb8 <ulSetInterruptMask>
 800c42e:	bf00      	nop
 800c430:	e7fd      	b.n	800c42e <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c432:	697b      	ldr	r3, [r7, #20]
    }
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b08a      	sub	sp, #40	@ 0x28
 800c440:	af02      	add	r7, sp, #8
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	4613      	mov	r3, r2
 800c448:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800c44a:	2300      	movs	r3, #0
 800c44c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d032      	beq.n	800c4ba <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c454:	2100      	movs	r1, #0
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	fba3 2302 	umull	r2, r3, r3, r2
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d000      	beq.n	800c464 <xQueueGenericCreate+0x28>
 800c462:	2101      	movs	r1, #1
 800c464:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c466:	2b00      	cmp	r3, #0
 800c468:	d127      	bne.n	800c4ba <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c472:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800c476:	d820      	bhi.n	800c4ba <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	fb02 f303 	mul.w	r3, r2, r3
 800c480:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	3350      	adds	r3, #80	@ 0x50
 800c486:	4618      	mov	r0, r3
 800c488:	f002 fcfe 	bl	800ee88 <pvPortMalloc>
 800c48c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d019      	beq.n	800c4c8 <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	3350      	adds	r3, #80	@ 0x50
 800c49c:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4a6:	79fa      	ldrb	r2, [r7, #7]
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	9300      	str	r3, [sp, #0]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	697a      	ldr	r2, [r7, #20]
 800c4b0:	68b9      	ldr	r1, [r7, #8]
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f000 f80d 	bl	800c4d2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800c4b8:	e006      	b.n	800c4c8 <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d103      	bne.n	800c4c8 <xQueueGenericCreate+0x8c>
 800c4c0:	f002 fc7a 	bl	800edb8 <ulSetInterruptMask>
 800c4c4:	bf00      	nop
 800c4c6:	e7fd      	b.n	800c4c4 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c4c8:	69fb      	ldr	r3, [r7, #28]
    }
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3720      	adds	r7, #32
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b084      	sub	sp, #16
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	60f8      	str	r0, [r7, #12]
 800c4da:	60b9      	str	r1, [r7, #8]
 800c4dc:	607a      	str	r2, [r7, #4]
 800c4de:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d103      	bne.n	800c4ee <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	69ba      	ldr	r2, [r7, #24]
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	e002      	b.n	800c4f4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c500:	2101      	movs	r1, #1
 800c502:	69b8      	ldr	r0, [r7, #24]
 800c504:	f7ff fed8 	bl	800c2b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	78fa      	ldrb	r2, [r7, #3]
 800c50c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800c510:	bf00      	nop
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 800c518:	b580      	push	{r7, lr}
 800c51a:	b088      	sub	sp, #32
 800c51c:	af02      	add	r7, sp, #8
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 800c524:	2300      	movs	r3, #0
 800c526:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d013      	beq.n	800c556 <xQueueCreateCountingSemaphoreStatic+0x3e>
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	429a      	cmp	r2, r3
 800c534:	d80f      	bhi.n	800c556 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c536:	2302      	movs	r3, #2
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	2100      	movs	r1, #0
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f7ff ff32 	bl	800c3aa <xQueueGenericCreateStatic>
 800c546:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00a      	beq.n	800c564 <xQueueCreateCountingSemaphoreStatic+0x4c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c554:	e006      	b.n	800c564 <xQueueCreateCountingSemaphoreStatic+0x4c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d103      	bne.n	800c564 <xQueueCreateCountingSemaphoreStatic+0x4c>
 800c55c:	f002 fc2c 	bl	800edb8 <ulSetInterruptMask>
 800c560:	bf00      	nop
 800c562:	e7fd      	b.n	800c560 <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c564:	697b      	ldr	r3, [r7, #20]
    }
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800c578:	2300      	movs	r3, #0
 800c57a:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d010      	beq.n	800c5a4 <xQueueCreateCountingSemaphore+0x36>
 800c582:	683a      	ldr	r2, [r7, #0]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	429a      	cmp	r2, r3
 800c588:	d80c      	bhi.n	800c5a4 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c58a:	2202      	movs	r2, #2
 800c58c:	2100      	movs	r1, #0
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7ff ff54 	bl	800c43c <xQueueGenericCreate>
 800c594:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00a      	beq.n	800c5b2 <xQueueCreateCountingSemaphore+0x44>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c5a2:	e006      	b.n	800c5b2 <xQueueCreateCountingSemaphore+0x44>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d103      	bne.n	800c5b2 <xQueueCreateCountingSemaphore+0x44>
 800c5aa:	f002 fc05 	bl	800edb8 <ulSetInterruptMask>
 800c5ae:	bf00      	nop
 800c5b0:	e7fd      	b.n	800c5ae <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
    }
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b08a      	sub	sp, #40	@ 0x28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
 800c5c8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c5d2:	6a3b      	ldr	r3, [r7, #32]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d103      	bne.n	800c5e0 <xQueueGenericSend+0x24>
 800c5d8:	f002 fbee 	bl	800edb8 <ulSetInterruptMask>
 800c5dc:	bf00      	nop
 800c5de:	e7fd      	b.n	800c5dc <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d103      	bne.n	800c5ee <xQueueGenericSend+0x32>
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d101      	bne.n	800c5f2 <xQueueGenericSend+0x36>
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e000      	b.n	800c5f4 <xQueueGenericSend+0x38>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d103      	bne.n	800c600 <xQueueGenericSend+0x44>
 800c5f8:	f002 fbde 	bl	800edb8 <ulSetInterruptMask>
 800c5fc:	bf00      	nop
 800c5fe:	e7fd      	b.n	800c5fc <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2b02      	cmp	r3, #2
 800c604:	d103      	bne.n	800c60e <xQueueGenericSend+0x52>
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d101      	bne.n	800c612 <xQueueGenericSend+0x56>
 800c60e:	2301      	movs	r3, #1
 800c610:	e000      	b.n	800c614 <xQueueGenericSend+0x58>
 800c612:	2300      	movs	r3, #0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d103      	bne.n	800c620 <xQueueGenericSend+0x64>
 800c618:	f002 fbce 	bl	800edb8 <ulSetInterruptMask>
 800c61c:	bf00      	nop
 800c61e:	e7fd      	b.n	800c61c <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c620:	f001 fc9c 	bl	800df5c <xTaskGetSchedulerState>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d102      	bne.n	800c630 <xQueueGenericSend+0x74>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <xQueueGenericSend+0x78>
 800c630:	2301      	movs	r3, #1
 800c632:	e000      	b.n	800c636 <xQueueGenericSend+0x7a>
 800c634:	2300      	movs	r3, #0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d103      	bne.n	800c642 <xQueueGenericSend+0x86>
 800c63a:	f002 fbbd 	bl	800edb8 <ulSetInterruptMask>
 800c63e:	bf00      	nop
 800c640:	e7fd      	b.n	800c63e <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c642:	f002 f9ef 	bl	800ea24 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c646:	6a3b      	ldr	r3, [r7, #32]
 800c648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c64e:	429a      	cmp	r2, r3
 800c650:	d302      	bcc.n	800c658 <xQueueGenericSend+0x9c>
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b02      	cmp	r3, #2
 800c656:	d11d      	bne.n	800c694 <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	68b9      	ldr	r1, [r7, #8]
 800c65c:	6a38      	ldr	r0, [r7, #32]
 800c65e:	f000 fbb4 	bl	800cdca <prvCopyDataToQueue>
 800c662:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c664:	6a3b      	ldr	r3, [r7, #32]
 800c666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00a      	beq.n	800c682 <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	3324      	adds	r3, #36	@ 0x24
 800c670:	4618      	mov	r0, r3
 800c672:	f001 fa69 	bl	800db48 <xTaskRemoveFromEventList>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d007      	beq.n	800c68c <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c67c:	f002 f9c0 	bl	800ea00 <vPortYield>
 800c680:	e004      	b.n	800c68c <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800c688:	f002 f9ba 	bl	800ea00 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c68c:	f002 f9dc 	bl	800ea48 <vPortExitCritical>
                return pdPASS;
 800c690:	2301      	movs	r3, #1
 800c692:	e05c      	b.n	800c74e <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d103      	bne.n	800c6a2 <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c69a:	f002 f9d5 	bl	800ea48 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e055      	b.n	800c74e <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d106      	bne.n	800c6b6 <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c6a8:	f107 0314 	add.w	r3, r7, #20
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f001 fb19 	bl	800dce4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c6b6:	f002 f9c7 	bl	800ea48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c6ba:	f000 ff6d 	bl	800d598 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c6be:	f002 f9b1 	bl	800ea24 <vPortEnterCritical>
 800c6c2:	6a3b      	ldr	r3, [r7, #32]
 800c6c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6c8:	b25b      	sxtb	r3, r3
 800c6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ce:	d103      	bne.n	800c6d8 <xQueueGenericSend+0x11c>
 800c6d0:	6a3b      	ldr	r3, [r7, #32]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c6de:	b25b      	sxtb	r3, r3
 800c6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e4:	d103      	bne.n	800c6ee <xQueueGenericSend+0x132>
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6ee:	f002 f9ab 	bl	800ea48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6f2:	1d3a      	adds	r2, r7, #4
 800c6f4:	f107 0314 	add.w	r3, r7, #20
 800c6f8:	4611      	mov	r1, r2
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f001 fb08 	bl	800dd10 <xTaskCheckForTimeOut>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d11d      	bne.n	800c742 <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c706:	6a38      	ldr	r0, [r7, #32]
 800c708:	f000 fc57 	bl	800cfba <prvIsQueueFull>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d011      	beq.n	800c736 <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	3310      	adds	r3, #16
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	4611      	mov	r1, r2
 800c71a:	4618      	mov	r0, r3
 800c71c:	f001 f9b8 	bl	800da90 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800c720:	6a38      	ldr	r0, [r7, #32]
 800c722:	f000 fbe2 	bl	800ceea <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800c726:	f000 ff45 	bl	800d5b4 <xTaskResumeAll>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d188      	bne.n	800c642 <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 800c730:	f002 f966 	bl	800ea00 <vPortYield>
 800c734:	e785      	b.n	800c642 <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800c736:	6a38      	ldr	r0, [r7, #32]
 800c738:	f000 fbd7 	bl	800ceea <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c73c:	f000 ff3a 	bl	800d5b4 <xTaskResumeAll>
 800c740:	e77f      	b.n	800c642 <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800c742:	6a38      	ldr	r0, [r7, #32]
 800c744:	f000 fbd1 	bl	800ceea <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c748:	f000 ff34 	bl	800d5b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800c74c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3728      	adds	r7, #40	@ 0x28
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b08a      	sub	sp, #40	@ 0x28
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	60f8      	str	r0, [r7, #12]
 800c75e:	60b9      	str	r1, [r7, #8]
 800c760:	607a      	str	r2, [r7, #4]
 800c762:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c768:	6a3b      	ldr	r3, [r7, #32]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d103      	bne.n	800c776 <xQueueGenericSendFromISR+0x20>
 800c76e:	f002 fb23 	bl	800edb8 <ulSetInterruptMask>
 800c772:	bf00      	nop
 800c774:	e7fd      	b.n	800c772 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d103      	bne.n	800c784 <xQueueGenericSendFromISR+0x2e>
 800c77c:	6a3b      	ldr	r3, [r7, #32]
 800c77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c780:	2b00      	cmp	r3, #0
 800c782:	d101      	bne.n	800c788 <xQueueGenericSendFromISR+0x32>
 800c784:	2301      	movs	r3, #1
 800c786:	e000      	b.n	800c78a <xQueueGenericSendFromISR+0x34>
 800c788:	2300      	movs	r3, #0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d103      	bne.n	800c796 <xQueueGenericSendFromISR+0x40>
 800c78e:	f002 fb13 	bl	800edb8 <ulSetInterruptMask>
 800c792:	bf00      	nop
 800c794:	e7fd      	b.n	800c792 <xQueueGenericSendFromISR+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d103      	bne.n	800c7a4 <xQueueGenericSendFromISR+0x4e>
 800c79c:	6a3b      	ldr	r3, [r7, #32]
 800c79e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d101      	bne.n	800c7a8 <xQueueGenericSendFromISR+0x52>
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	e000      	b.n	800c7aa <xQueueGenericSendFromISR+0x54>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d103      	bne.n	800c7b6 <xQueueGenericSendFromISR+0x60>
 800c7ae:	f002 fb03 	bl	800edb8 <ulSetInterruptMask>
 800c7b2:	bf00      	nop
 800c7b4:	e7fd      	b.n	800c7b2 <xQueueGenericSendFromISR+0x5c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7b6:	f002 fa99 	bl	800ecec <vPortValidateInterruptPriority>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7ba:	f002 fafd 	bl	800edb8 <ulSetInterruptMask>
 800c7be:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7c4:	6a3b      	ldr	r3, [r7, #32]
 800c7c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d302      	bcc.n	800c7d2 <xQueueGenericSendFromISR+0x7c>
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d13d      	bne.n	800c84e <xQueueGenericSendFromISR+0xf8>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c7d2:	6a3b      	ldr	r3, [r7, #32]
 800c7d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7d8:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7de:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	68b9      	ldr	r1, [r7, #8]
 800c7e4:	6a38      	ldr	r0, [r7, #32]
 800c7e6:	f000 faf0 	bl	800cdca <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c7ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f2:	d112      	bne.n	800c81a <xQueueGenericSendFromISR+0xc4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d025      	beq.n	800c848 <xQueueGenericSendFromISR+0xf2>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7fc:	6a3b      	ldr	r3, [r7, #32]
 800c7fe:	3324      	adds	r3, #36	@ 0x24
 800c800:	4618      	mov	r0, r3
 800c802:	f001 f9a1 	bl	800db48 <xTaskRemoveFromEventList>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d01d      	beq.n	800c848 <xQueueGenericSendFromISR+0xf2>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d01a      	beq.n	800c848 <xQueueGenericSendFromISR+0xf2>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2201      	movs	r2, #1
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	e016      	b.n	800c848 <xQueueGenericSendFromISR+0xf2>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c81a:	f000 ffc9 	bl	800d7b0 <uxTaskGetNumberOfTasks>
 800c81e:	6138      	str	r0, [r7, #16]
 800c820:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c824:	693a      	ldr	r2, [r7, #16]
 800c826:	429a      	cmp	r2, r3
 800c828:	d90e      	bls.n	800c848 <xQueueGenericSendFromISR+0xf2>
 800c82a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c82e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c830:	d103      	bne.n	800c83a <xQueueGenericSendFromISR+0xe4>
 800c832:	f002 fac1 	bl	800edb8 <ulSetInterruptMask>
 800c836:	bf00      	nop
 800c838:	e7fd      	b.n	800c836 <xQueueGenericSendFromISR+0xe0>
 800c83a:	7efb      	ldrb	r3, [r7, #27]
 800c83c:	3301      	adds	r3, #1
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	b25a      	sxtb	r2, r3
 800c842:	6a3b      	ldr	r3, [r7, #32]
 800c844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c848:	2301      	movs	r3, #1
 800c84a:	627b      	str	r3, [r7, #36]	@ 0x24
        {
 800c84c:	e001      	b.n	800c852 <xQueueGenericSendFromISR+0xfc>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c84e:	2300      	movs	r3, #0
 800c850:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c852:	69f8      	ldr	r0, [r7, #28]
 800c854:	f002 fabd 	bl	800edd2 <vClearInterruptMask>

    return xReturn;
 800c858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3728      	adds	r7, #40	@ 0x28
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b088      	sub	sp, #32
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d103      	bne.n	800c87e <xQueueGiveFromISR+0x1c>
 800c876:	f002 fa9f 	bl	800edb8 <ulSetInterruptMask>
 800c87a:	bf00      	nop
 800c87c:	e7fd      	b.n	800c87a <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c882:	2b00      	cmp	r3, #0
 800c884:	d003      	beq.n	800c88e <xQueueGiveFromISR+0x2c>
 800c886:	f002 fa97 	bl	800edb8 <ulSetInterruptMask>
 800c88a:	bf00      	nop
 800c88c:	e7fd      	b.n	800c88a <xQueueGiveFromISR+0x28>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c88e:	69bb      	ldr	r3, [r7, #24]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d103      	bne.n	800c89e <xQueueGiveFromISR+0x3c>
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d101      	bne.n	800c8a2 <xQueueGiveFromISR+0x40>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e000      	b.n	800c8a4 <xQueueGiveFromISR+0x42>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d103      	bne.n	800c8b0 <xQueueGiveFromISR+0x4e>
 800c8a8:	f002 fa86 	bl	800edb8 <ulSetInterruptMask>
 800c8ac:	bf00      	nop
 800c8ae:	e7fd      	b.n	800c8ac <xQueueGiveFromISR+0x4a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8b0:	f002 fa1c 	bl	800ecec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8b4:	f002 fa80 	bl	800edb8 <ulSetInterruptMask>
 800c8b8:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8be:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d239      	bcs.n	800c93e <xQueueGiveFromISR+0xdc>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8d0:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	1c5a      	adds	r2, r3, #1
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c8da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e2:	d112      	bne.n	800c90a <xQueueGiveFromISR+0xa8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d025      	beq.n	800c938 <xQueueGiveFromISR+0xd6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	3324      	adds	r3, #36	@ 0x24
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f001 f929 	bl	800db48 <xTaskRemoveFromEventList>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d01d      	beq.n	800c938 <xQueueGiveFromISR+0xd6>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d01a      	beq.n	800c938 <xQueueGiveFromISR+0xd6>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	2201      	movs	r2, #1
 800c906:	601a      	str	r2, [r3, #0]
 800c908:	e016      	b.n	800c938 <xQueueGiveFromISR+0xd6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c90a:	f000 ff51 	bl	800d7b0 <uxTaskGetNumberOfTasks>
 800c90e:	60b8      	str	r0, [r7, #8]
 800c910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	429a      	cmp	r2, r3
 800c918:	d90e      	bls.n	800c938 <xQueueGiveFromISR+0xd6>
 800c91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c91e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c920:	d103      	bne.n	800c92a <xQueueGiveFromISR+0xc8>
 800c922:	f002 fa49 	bl	800edb8 <ulSetInterruptMask>
 800c926:	bf00      	nop
 800c928:	e7fd      	b.n	800c926 <xQueueGiveFromISR+0xc4>
 800c92a:	7bfb      	ldrb	r3, [r7, #15]
 800c92c:	3301      	adds	r3, #1
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	b25a      	sxtb	r2, r3
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c938:	2301      	movs	r3, #1
 800c93a:	61fb      	str	r3, [r7, #28]
 800c93c:	e001      	b.n	800c942 <xQueueGiveFromISR+0xe0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c93e:	2300      	movs	r3, #0
 800c940:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c942:	6978      	ldr	r0, [r7, #20]
 800c944:	f002 fa45 	bl	800edd2 <vClearInterruptMask>

    return xReturn;
 800c948:	69fb      	ldr	r3, [r7, #28]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3720      	adds	r7, #32
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b08a      	sub	sp, #40	@ 0x28
 800c956:	af00      	add	r7, sp, #0
 800c958:	60f8      	str	r0, [r7, #12]
 800c95a:	60b9      	str	r1, [r7, #8]
 800c95c:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c95e:	2300      	movs	r3, #0
 800c960:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c966:	6a3b      	ldr	r3, [r7, #32]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d103      	bne.n	800c974 <xQueueReceive+0x22>
 800c96c:	f002 fa24 	bl	800edb8 <ulSetInterruptMask>
 800c970:	bf00      	nop
 800c972:	e7fd      	b.n	800c970 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d103      	bne.n	800c982 <xQueueReceive+0x30>
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d101      	bne.n	800c986 <xQueueReceive+0x34>
 800c982:	2301      	movs	r3, #1
 800c984:	e000      	b.n	800c988 <xQueueReceive+0x36>
 800c986:	2300      	movs	r3, #0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d103      	bne.n	800c994 <xQueueReceive+0x42>
 800c98c:	f002 fa14 	bl	800edb8 <ulSetInterruptMask>
 800c990:	bf00      	nop
 800c992:	e7fd      	b.n	800c990 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c994:	f001 fae2 	bl	800df5c <xTaskGetSchedulerState>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d102      	bne.n	800c9a4 <xQueueReceive+0x52>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <xQueueReceive+0x56>
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e000      	b.n	800c9aa <xQueueReceive+0x58>
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d103      	bne.n	800c9b6 <xQueueReceive+0x64>
 800c9ae:	f002 fa03 	bl	800edb8 <ulSetInterruptMask>
 800c9b2:	bf00      	nop
 800c9b4:	e7fd      	b.n	800c9b2 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c9b6:	f002 f835 	bl	800ea24 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
 800c9bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9be:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d019      	beq.n	800c9fa <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9c6:	68b9      	ldr	r1, [r7, #8]
 800c9c8:	6a38      	ldr	r0, [r7, #32]
 800c9ca:	f000 fa68 	bl	800ce9e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	1e5a      	subs	r2, r3, #1
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9d6:	6a3b      	ldr	r3, [r7, #32]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d009      	beq.n	800c9f2 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	3310      	adds	r3, #16
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f001 f8b0 	bl	800db48 <xTaskRemoveFromEventList>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c9ee:	f002 f807 	bl	800ea00 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c9f2:	f002 f829 	bl	800ea48 <vPortExitCritical>
                return pdPASS;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e063      	b.n	800cac2 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d103      	bne.n	800ca08 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800ca00:	f002 f822 	bl	800ea48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800ca04:	2300      	movs	r3, #0
 800ca06:	e05c      	b.n	800cac2 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800ca08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d106      	bne.n	800ca1c <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800ca0e:	f107 0314 	add.w	r3, r7, #20
 800ca12:	4618      	mov	r0, r3
 800ca14:	f001 f966 	bl	800dce4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800ca1c:	f002 f814 	bl	800ea48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800ca20:	f000 fdba 	bl	800d598 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800ca24:	f001 fffe 	bl	800ea24 <vPortEnterCritical>
 800ca28:	6a3b      	ldr	r3, [r7, #32]
 800ca2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca2e:	b25b      	sxtb	r3, r3
 800ca30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca34:	d103      	bne.n	800ca3e <xQueueReceive+0xec>
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca3e:	6a3b      	ldr	r3, [r7, #32]
 800ca40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca44:	b25b      	sxtb	r3, r3
 800ca46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca4a:	d103      	bne.n	800ca54 <xQueueReceive+0x102>
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca54:	f001 fff8 	bl	800ea48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca58:	1d3a      	adds	r2, r7, #4
 800ca5a:	f107 0314 	add.w	r3, r7, #20
 800ca5e:	4611      	mov	r1, r2
 800ca60:	4618      	mov	r0, r3
 800ca62:	f001 f955 	bl	800dd10 <xTaskCheckForTimeOut>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d11d      	bne.n	800caa8 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca6c:	6a38      	ldr	r0, [r7, #32]
 800ca6e:	f000 fa8e 	bl	800cf8e <prvIsQueueEmpty>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d011      	beq.n	800ca9c <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca78:	6a3b      	ldr	r3, [r7, #32]
 800ca7a:	3324      	adds	r3, #36	@ 0x24
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	4611      	mov	r1, r2
 800ca80:	4618      	mov	r0, r3
 800ca82:	f001 f805 	bl	800da90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800ca86:	6a38      	ldr	r0, [r7, #32]
 800ca88:	f000 fa2f 	bl	800ceea <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800ca8c:	f000 fd92 	bl	800d5b4 <xTaskResumeAll>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d18f      	bne.n	800c9b6 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800ca96:	f001 ffb3 	bl	800ea00 <vPortYield>
 800ca9a:	e78c      	b.n	800c9b6 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800ca9c:	6a38      	ldr	r0, [r7, #32]
 800ca9e:	f000 fa24 	bl	800ceea <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800caa2:	f000 fd87 	bl	800d5b4 <xTaskResumeAll>
 800caa6:	e786      	b.n	800c9b6 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800caa8:	6a38      	ldr	r0, [r7, #32]
 800caaa:	f000 fa1e 	bl	800ceea <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800caae:	f000 fd81 	bl	800d5b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cab2:	6a38      	ldr	r0, [r7, #32]
 800cab4:	f000 fa6b 	bl	800cf8e <prvIsQueueEmpty>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f43f af7b 	beq.w	800c9b6 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800cac0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3728      	adds	r7, #40	@ 0x28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b08a      	sub	sp, #40	@ 0x28
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
 800cad2:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800cad4:	2300      	movs	r3, #0
 800cad6:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800cadc:	2300      	movs	r3, #0
 800cade:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d103      	bne.n	800caee <xQueueSemaphoreTake+0x24>
 800cae6:	f002 f967 	bl	800edb8 <ulSetInterruptMask>
 800caea:	bf00      	nop
 800caec:	e7fd      	b.n	800caea <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800caee:	69fb      	ldr	r3, [r7, #28]
 800caf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d003      	beq.n	800cafe <xQueueSemaphoreTake+0x34>
 800caf6:	f002 f95f 	bl	800edb8 <ulSetInterruptMask>
 800cafa:	bf00      	nop
 800cafc:	e7fd      	b.n	800cafa <xQueueSemaphoreTake+0x30>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cafe:	f001 fa2d 	bl	800df5c <xTaskGetSchedulerState>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d102      	bne.n	800cb0e <xQueueSemaphoreTake+0x44>
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d101      	bne.n	800cb12 <xQueueSemaphoreTake+0x48>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e000      	b.n	800cb14 <xQueueSemaphoreTake+0x4a>
 800cb12:	2300      	movs	r3, #0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d103      	bne.n	800cb20 <xQueueSemaphoreTake+0x56>
 800cb18:	f002 f94e 	bl	800edb8 <ulSetInterruptMask>
 800cb1c:	bf00      	nop
 800cb1e:	e7fd      	b.n	800cb1c <xQueueSemaphoreTake+0x52>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800cb20:	f001 ff80 	bl	800ea24 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb28:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d01e      	beq.n	800cb6e <xQueueSemaphoreTake+0xa4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	1e5a      	subs	r2, r3, #1
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d104      	bne.n	800cb4a <xQueueSemaphoreTake+0x80>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cb40:	f001 fbde 	bl	800e300 <pvTaskIncrementMutexHeldCount>
 800cb44:	4602      	mov	r2, r0
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d009      	beq.n	800cb66 <xQueueSemaphoreTake+0x9c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	3310      	adds	r3, #16
 800cb56:	4618      	mov	r0, r3
 800cb58:	f000 fff6 	bl	800db48 <xTaskRemoveFromEventList>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <xQueueSemaphoreTake+0x9c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800cb62:	f001 ff4d 	bl	800ea00 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800cb66:	f001 ff6f 	bl	800ea48 <vPortExitCritical>
                return pdPASS;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e083      	b.n	800cc76 <xQueueSemaphoreTake+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d103      	bne.n	800cb7c <xQueueSemaphoreTake+0xb2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800cb74:	f001 ff68 	bl	800ea48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	e07c      	b.n	800cc76 <xQueueSemaphoreTake+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d106      	bne.n	800cb90 <xQueueSemaphoreTake+0xc6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800cb82:	f107 030c 	add.w	r3, r7, #12
 800cb86:	4618      	mov	r0, r3
 800cb88:	f001 f8ac 	bl	800dce4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800cb90:	f001 ff5a 	bl	800ea48 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800cb94:	f000 fd00 	bl	800d598 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800cb98:	f001 ff44 	bl	800ea24 <vPortEnterCritical>
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cba2:	b25b      	sxtb	r3, r3
 800cba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba8:	d103      	bne.n	800cbb2 <xQueueSemaphoreTake+0xe8>
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbb8:	b25b      	sxtb	r3, r3
 800cbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbbe:	d103      	bne.n	800cbc8 <xQueueSemaphoreTake+0xfe>
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbc8:	f001 ff3e 	bl	800ea48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbcc:	463a      	mov	r2, r7
 800cbce:	f107 030c 	add.w	r3, r7, #12
 800cbd2:	4611      	mov	r1, r2
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f001 f89b 	bl	800dd10 <xTaskCheckForTimeOut>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d12c      	bne.n	800cc3a <xQueueSemaphoreTake+0x170>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbe0:	69f8      	ldr	r0, [r7, #28]
 800cbe2:	f000 f9d4 	bl	800cf8e <prvIsQueueEmpty>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d020      	beq.n	800cc2e <xQueueSemaphoreTake+0x164>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d109      	bne.n	800cc08 <xQueueSemaphoreTake+0x13e>
                    {
                        taskENTER_CRITICAL();
 800cbf4:	f001 ff16 	bl	800ea24 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f001 f9cb 	bl	800df98 <xTaskPriorityInherit>
 800cc02:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800cc04:	f001 ff20 	bl	800ea48 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	3324      	adds	r3, #36	@ 0x24
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	4618      	mov	r0, r3
 800cc12:	f000 ff3d 	bl	800da90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cc16:	69f8      	ldr	r0, [r7, #28]
 800cc18:	f000 f967 	bl	800ceea <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cc1c:	f000 fcca 	bl	800d5b4 <xTaskResumeAll>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f47f af7c 	bne.w	800cb20 <xQueueSemaphoreTake+0x56>
                {
                    portYIELD_WITHIN_API();
 800cc28:	f001 feea 	bl	800ea00 <vPortYield>
 800cc2c:	e778      	b.n	800cb20 <xQueueSemaphoreTake+0x56>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800cc2e:	69f8      	ldr	r0, [r7, #28]
 800cc30:	f000 f95b 	bl	800ceea <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cc34:	f000 fcbe 	bl	800d5b4 <xTaskResumeAll>
 800cc38:	e772      	b.n	800cb20 <xQueueSemaphoreTake+0x56>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800cc3a:	69f8      	ldr	r0, [r7, #28]
 800cc3c:	f000 f955 	bl	800ceea <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cc40:	f000 fcb8 	bl	800d5b4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc44:	69f8      	ldr	r0, [r7, #28]
 800cc46:	f000 f9a2 	bl	800cf8e <prvIsQueueEmpty>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f43f af67 	beq.w	800cb20 <xQueueSemaphoreTake+0x56>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800cc52:	6a3b      	ldr	r3, [r7, #32]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00d      	beq.n	800cc74 <xQueueSemaphoreTake+0x1aa>
                    {
                        taskENTER_CRITICAL();
 800cc58:	f001 fee4 	bl	800ea24 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cc5c:	69f8      	ldr	r0, [r7, #28]
 800cc5e:	f000 f89c 	bl	800cd9a <prvGetDisinheritPriorityAfterTimeout>
 800cc62:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	6979      	ldr	r1, [r7, #20]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f001 faac 	bl	800e1c8 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800cc70:	f001 feea 	bl	800ea48 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800cc74:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3728      	adds	r7, #40	@ 0x28
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b08a      	sub	sp, #40	@ 0x28
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	60f8      	str	r0, [r7, #12]
 800cc86:	60b9      	str	r1, [r7, #8]
 800cc88:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800cc8e:	6a3b      	ldr	r3, [r7, #32]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d103      	bne.n	800cc9c <xQueueReceiveFromISR+0x1e>
 800cc94:	f002 f890 	bl	800edb8 <ulSetInterruptMask>
 800cc98:	bf00      	nop
 800cc9a:	e7fd      	b.n	800cc98 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d103      	bne.n	800ccaa <xQueueReceiveFromISR+0x2c>
 800cca2:	6a3b      	ldr	r3, [r7, #32]
 800cca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d101      	bne.n	800ccae <xQueueReceiveFromISR+0x30>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e000      	b.n	800ccb0 <xQueueReceiveFromISR+0x32>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d103      	bne.n	800ccbc <xQueueReceiveFromISR+0x3e>
 800ccb4:	f002 f880 	bl	800edb8 <ulSetInterruptMask>
 800ccb8:	bf00      	nop
 800ccba:	e7fd      	b.n	800ccb8 <xQueueReceiveFromISR+0x3a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccbc:	f002 f816 	bl	800ecec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ccc0:	f002 f87a 	bl	800edb8 <ulSetInterruptMask>
 800ccc4:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccc6:	6a3b      	ldr	r3, [r7, #32]
 800ccc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccca:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d03d      	beq.n	800cd4e <xQueueReceiveFromISR+0xd0>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800ccd2:	6a3b      	ldr	r3, [r7, #32]
 800ccd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ccd8:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ccda:	68b9      	ldr	r1, [r7, #8]
 800ccdc:	6a38      	ldr	r0, [r7, #32]
 800ccde:	f000 f8de 	bl	800ce9e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	1e5a      	subs	r2, r3, #1
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800ccea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf2:	d112      	bne.n	800cd1a <xQueueReceiveFromISR+0x9c>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccf4:	6a3b      	ldr	r3, [r7, #32]
 800ccf6:	691b      	ldr	r3, [r3, #16]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d025      	beq.n	800cd48 <xQueueReceiveFromISR+0xca>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccfc:	6a3b      	ldr	r3, [r7, #32]
 800ccfe:	3310      	adds	r3, #16
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 ff21 	bl	800db48 <xTaskRemoveFromEventList>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d01d      	beq.n	800cd48 <xQueueReceiveFromISR+0xca>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d01a      	beq.n	800cd48 <xQueueReceiveFromISR+0xca>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2201      	movs	r2, #1
 800cd16:	601a      	str	r2, [r3, #0]
 800cd18:	e016      	b.n	800cd48 <xQueueReceiveFromISR+0xca>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800cd1a:	f000 fd49 	bl	800d7b0 <uxTaskGetNumberOfTasks>
 800cd1e:	6138      	str	r0, [r7, #16]
 800cd20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd24:	693a      	ldr	r2, [r7, #16]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d90e      	bls.n	800cd48 <xQueueReceiveFromISR+0xca>
 800cd2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd30:	d103      	bne.n	800cd3a <xQueueReceiveFromISR+0xbc>
 800cd32:	f002 f841 	bl	800edb8 <ulSetInterruptMask>
 800cd36:	bf00      	nop
 800cd38:	e7fd      	b.n	800cd36 <xQueueReceiveFromISR+0xb8>
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	b25a      	sxtb	r2, r3
 800cd42:	6a3b      	ldr	r3, [r7, #32]
 800cd44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd4c:	e001      	b.n	800cd52 <xQueueReceiveFromISR+0xd4>
        }
        else
        {
            xReturn = pdFAIL;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	627b      	str	r3, [r7, #36]	@ 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800cd52:	69f8      	ldr	r0, [r7, #28]
 800cd54:	f002 f83d 	bl	800edd2 <vClearInterruptMask>

    return xReturn;
 800cd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3728      	adds	r7, #40	@ 0x28
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b084      	sub	sp, #16
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d103      	bne.n	800cd7c <vQueueDelete+0x1a>
 800cd74:	f002 f820 	bl	800edb8 <ulSetInterruptMask>
 800cd78:	bf00      	nop
 800cd7a:	e7fd      	b.n	800cd78 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f000 f97b 	bl	800d078 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d102      	bne.n	800cd92 <vQueueDelete+0x30>
        {
            vPortFree( pxQueue );
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f002 f937 	bl	800f000 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cd92:	bf00      	nop
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800cd9a:	b480      	push	{r7}
 800cd9c:	b085      	sub	sp, #20
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d006      	beq.n	800cdb8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800cdb4:	60fb      	str	r3, [r7, #12]
 800cdb6:	e001      	b.n	800cdbc <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
    }
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr

0800cdca <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b086      	sub	sp, #24
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	60f8      	str	r0, [r7, #12]
 800cdd2:	60b9      	str	r1, [r7, #8]
 800cdd4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdde:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10d      	bne.n	800ce04 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d14d      	bne.n	800ce8c <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f001 f95f 	bl	800e0b8 <xTaskPriorityDisinherit>
 800cdfa:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	609a      	str	r2, [r3, #8]
 800ce02:	e043      	b.n	800ce8c <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d119      	bne.n	800ce3e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	6858      	ldr	r0, [r3, #4]
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce12:	461a      	mov	r2, r3
 800ce14:	68b9      	ldr	r1, [r7, #8]
 800ce16:	f020 f99c 	bl	802d152 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	685a      	ldr	r2, [r3, #4]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce22:	441a      	add	r2, r3
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d32b      	bcc.n	800ce8c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	605a      	str	r2, [r3, #4]
 800ce3c:	e026      	b.n	800ce8c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	68d8      	ldr	r0, [r3, #12]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce46:	461a      	mov	r2, r3
 800ce48:	68b9      	ldr	r1, [r7, #8]
 800ce4a:	f020 f982 	bl	802d152 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	68da      	ldr	r2, [r3, #12]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce56:	425b      	negs	r3, r3
 800ce58:	441a      	add	r2, r3
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	68da      	ldr	r2, [r3, #12]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d207      	bcs.n	800ce7a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	689a      	ldr	r2, [r3, #8]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce72:	425b      	negs	r3, r3
 800ce74:	441a      	add	r2, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	d105      	bne.n	800ce8c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	1c5a      	adds	r2, r3, #1
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800ce94:	697b      	ldr	r3, [r7, #20]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3718      	adds	r7, #24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b082      	sub	sp, #8
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d018      	beq.n	800cee2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	68da      	ldr	r2, [r3, #12]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceb8:	441a      	add	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	68da      	ldr	r2, [r3, #12]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d303      	bcc.n	800ced2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	68d9      	ldr	r1, [r3, #12]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceda:	461a      	mov	r2, r3
 800cedc:	6838      	ldr	r0, [r7, #0]
 800cede:	f020 f938 	bl	802d152 <memcpy>
    }
}
 800cee2:	bf00      	nop
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800cef2:	f001 fd97 	bl	800ea24 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cefc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cefe:	e011      	b.n	800cf24 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d012      	beq.n	800cf2e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3324      	adds	r3, #36	@ 0x24
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f000 fe1b 	bl	800db48 <xTaskRemoveFromEventList>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d001      	beq.n	800cf1c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800cf18:	f000 ff52 	bl	800ddc0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	dce9      	bgt.n	800cf00 <prvUnlockQueue+0x16>
 800cf2c:	e000      	b.n	800cf30 <prvUnlockQueue+0x46>
                    break;
 800cf2e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	22ff      	movs	r2, #255	@ 0xff
 800cf34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800cf38:	f001 fd86 	bl	800ea48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800cf3c:	f001 fd72 	bl	800ea24 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf46:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf48:	e011      	b.n	800cf6e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d012      	beq.n	800cf78 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	3310      	adds	r3, #16
 800cf56:	4618      	mov	r0, r3
 800cf58:	f000 fdf6 	bl	800db48 <xTaskRemoveFromEventList>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800cf62:	f000 ff2d 	bl	800ddc0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800cf66:	7bbb      	ldrb	r3, [r7, #14]
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	dce9      	bgt.n	800cf4a <prvUnlockQueue+0x60>
 800cf76:	e000      	b.n	800cf7a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800cf78:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	22ff      	movs	r2, #255	@ 0xff
 800cf7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800cf82:	f001 fd61 	bl	800ea48 <vPortExitCritical>
}
 800cf86:	bf00      	nop
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b084      	sub	sp, #16
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cf96:	f001 fd45 	bl	800ea24 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d102      	bne.n	800cfa8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	60fb      	str	r3, [r7, #12]
 800cfa6:	e001      	b.n	800cfac <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cfac:	f001 fd4c 	bl	800ea48 <vPortExitCritical>

    return xReturn;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cfc2:	f001 fd2f 	bl	800ea24 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d102      	bne.n	800cfd8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	60fb      	str	r3, [r7, #12]
 800cfd6:	e001      	b.n	800cfdc <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cfdc:	f001 fd34 	bl	800ea48 <vPortExitCritical>

    return xReturn;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
	...

0800cfec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800cff6:	2300      	movs	r3, #0
 800cff8:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d103      	bne.n	800d008 <vQueueAddToRegistry+0x1c>
 800d000:	f001 feda 	bl	800edb8 <ulSetInterruptMask>
 800d004:	bf00      	nop
 800d006:	e7fd      	b.n	800d004 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d024      	beq.n	800d058 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d00e:	2300      	movs	r3, #0
 800d010:	60fb      	str	r3, [r7, #12]
 800d012:	e01e      	b.n	800d052 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800d014:	4a17      	ldr	r2, [pc, #92]	@ (800d074 <vQueueAddToRegistry+0x88>)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	00db      	lsls	r3, r3, #3
 800d01a:	4413      	add	r3, r2
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	d105      	bne.n	800d030 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	00db      	lsls	r3, r3, #3
 800d028:	4a12      	ldr	r2, [pc, #72]	@ (800d074 <vQueueAddToRegistry+0x88>)
 800d02a:	4413      	add	r3, r2
 800d02c:	60bb      	str	r3, [r7, #8]
                    break;
 800d02e:	e013      	b.n	800d058 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10a      	bne.n	800d04c <vQueueAddToRegistry+0x60>
 800d036:	4a0f      	ldr	r2, [pc, #60]	@ (800d074 <vQueueAddToRegistry+0x88>)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d104      	bne.n	800d04c <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	00db      	lsls	r3, r3, #3
 800d046:	4a0b      	ldr	r2, [pc, #44]	@ (800d074 <vQueueAddToRegistry+0x88>)
 800d048:	4413      	add	r3, r2
 800d04a:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	3301      	adds	r3, #1
 800d050:	60fb      	str	r3, [r7, #12]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2b07      	cmp	r3, #7
 800d056:	d9dd      	bls.n	800d014 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d005      	beq.n	800d06a <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	683a      	ldr	r2, [r7, #0]
 800d062:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800d06a:	bf00      	nop
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	20046748 	.word	0x20046748

0800d078 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d103      	bne.n	800d08e <vQueueUnregisterQueue+0x16>
 800d086:	f001 fe97 	bl	800edb8 <ulSetInterruptMask>
 800d08a:	bf00      	nop
 800d08c:	e7fd      	b.n	800d08a <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d08e:	2300      	movs	r3, #0
 800d090:	60fb      	str	r3, [r7, #12]
 800d092:	e016      	b.n	800d0c2 <vQueueUnregisterQueue+0x4a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d094:	4a0f      	ldr	r2, [pc, #60]	@ (800d0d4 <vQueueUnregisterQueue+0x5c>)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	00db      	lsls	r3, r3, #3
 800d09a:	4413      	add	r3, r2
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d10b      	bne.n	800d0bc <vQueueUnregisterQueue+0x44>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800d0a4:	4a0b      	ldr	r2, [pc, #44]	@ (800d0d4 <vQueueUnregisterQueue+0x5c>)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2100      	movs	r1, #0
 800d0aa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d0ae:	4a09      	ldr	r2, [pc, #36]	@ (800d0d4 <vQueueUnregisterQueue+0x5c>)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	00db      	lsls	r3, r3, #3
 800d0b4:	4413      	add	r3, r2
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	605a      	str	r2, [r3, #4]
                break;
 800d0ba:	e006      	b.n	800d0ca <vQueueUnregisterQueue+0x52>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	60fb      	str	r3, [r7, #12]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2b07      	cmp	r3, #7
 800d0c6:	d9e5      	bls.n	800d094 <vQueueUnregisterQueue+0x1c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d0c8:	bf00      	nop
 800d0ca:	bf00      	nop
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20046748 	.word	0x20046748

0800d0d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800d0e8:	f001 fc9c 	bl	800ea24 <vPortEnterCritical>
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d0f2:	b25b      	sxtb	r3, r3
 800d0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f8:	d103      	bne.n	800d102 <vQueueWaitForMessageRestricted+0x2a>
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d108:	b25b      	sxtb	r3, r3
 800d10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10e:	d103      	bne.n	800d118 <vQueueWaitForMessageRestricted+0x40>
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	2200      	movs	r2, #0
 800d114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d118:	f001 fc96 	bl	800ea48 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d120:	2b00      	cmp	r3, #0
 800d122:	d106      	bne.n	800d132 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	3324      	adds	r3, #36	@ 0x24
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	68b9      	ldr	r1, [r7, #8]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f000 fccd 	bl	800dacc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800d132:	6978      	ldr	r0, [r7, #20]
 800d134:	f7ff fed9 	bl	800ceea <prvUnlockQueue>
    }
 800d138:	bf00      	nop
 800d13a:	3718      	adds	r7, #24
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800d140:	b580      	push	{r7, lr}
 800d142:	b08c      	sub	sp, #48	@ 0x30
 800d144:	af04      	add	r7, sp, #16
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
 800d14c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800d14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d150:	2b00      	cmp	r3, #0
 800d152:	d103      	bne.n	800d15c <xTaskCreateStatic+0x1c>
 800d154:	f001 fe30 	bl	800edb8 <ulSetInterruptMask>
 800d158:	bf00      	nop
 800d15a:	e7fd      	b.n	800d158 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800d15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d103      	bne.n	800d16a <xTaskCreateStatic+0x2a>
 800d162:	f001 fe29 	bl	800edb8 <ulSetInterruptMask>
 800d166:	bf00      	nop
 800d168:	e7fd      	b.n	800d166 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800d16a:	235c      	movs	r3, #92	@ 0x5c
 800d16c:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2b5c      	cmp	r3, #92	@ 0x5c
 800d172:	d003      	beq.n	800d17c <xTaskCreateStatic+0x3c>
 800d174:	f001 fe20 	bl	800edb8 <ulSetInterruptMask>
 800d178:	bf00      	nop
 800d17a:	e7fd      	b.n	800d178 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d17c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d180:	2b00      	cmp	r3, #0
 800d182:	d023      	beq.n	800d1cc <xTaskCreateStatic+0x8c>
 800d184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d186:	2b00      	cmp	r3, #0
 800d188:	d020      	beq.n	800d1cc <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d18c:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d18e:	225c      	movs	r2, #92	@ 0x5c
 800d190:	2100      	movs	r1, #0
 800d192:	69f8      	ldr	r0, [r7, #28]
 800d194:	f01f ff0e 	bl	802cfb4 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d19c:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	2202      	movs	r2, #2
 800d1a2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	9303      	str	r3, [sp, #12]
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	9302      	str	r3, [sp, #8]
 800d1ae:	f107 0318 	add.w	r3, r7, #24
 800d1b2:	9301      	str	r3, [sp, #4]
 800d1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	68b9      	ldr	r1, [r7, #8]
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f000 f855 	bl	800d26e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d1c4:	69f8      	ldr	r0, [r7, #28]
 800d1c6:	f000 f8d5 	bl	800d374 <prvAddNewTaskToReadyList>
 800d1ca:	e001      	b.n	800d1d0 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d1d0:	69bb      	ldr	r3, [r7, #24]
    }
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3720      	adds	r7, #32
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b08c      	sub	sp, #48	@ 0x30
 800d1de:	af04      	add	r7, sp, #16
 800d1e0:	60f8      	str	r0, [r7, #12]
 800d1e2:	60b9      	str	r1, [r7, #8]
 800d1e4:	603b      	str	r3, [r7, #0]
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d1ea:	88fb      	ldrh	r3, [r7, #6]
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f001 fe4a 	bl	800ee88 <pvPortMalloc>
 800d1f4:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d013      	beq.n	800d224 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d1fc:	205c      	movs	r0, #92	@ 0x5c
 800d1fe:	f001 fe43 	bl	800ee88 <pvPortMalloc>
 800d202:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d008      	beq.n	800d21c <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d20a:	225c      	movs	r2, #92	@ 0x5c
 800d20c:	2100      	movs	r1, #0
 800d20e:	69f8      	ldr	r0, [r7, #28]
 800d210:	f01f fed0 	bl	802cfb4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	697a      	ldr	r2, [r7, #20]
 800d218:	631a      	str	r2, [r3, #48]	@ 0x30
 800d21a:	e005      	b.n	800d228 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800d21c:	6978      	ldr	r0, [r7, #20]
 800d21e:	f001 feef 	bl	800f000 <vPortFree>
 800d222:	e001      	b.n	800d228 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800d224:	2300      	movs	r3, #0
 800d226:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d017      	beq.n	800d25e <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	2200      	movs	r2, #0
 800d232:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d236:	88fa      	ldrh	r2, [r7, #6]
 800d238:	2300      	movs	r3, #0
 800d23a:	9303      	str	r3, [sp, #12]
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	9302      	str	r3, [sp, #8]
 800d240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d242:	9301      	str	r3, [sp, #4]
 800d244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	68b9      	ldr	r1, [r7, #8]
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f000 f80e 	bl	800d26e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d252:	69f8      	ldr	r0, [r7, #28]
 800d254:	f000 f88e 	bl	800d374 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800d258:	2301      	movs	r3, #1
 800d25a:	61bb      	str	r3, [r7, #24]
 800d25c:	e002      	b.n	800d264 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d25e:	f04f 33ff 	mov.w	r3, #4294967295
 800d262:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d264:	69bb      	ldr	r3, [r7, #24]
    }
 800d266:	4618      	mov	r0, r3
 800d268:	3720      	adds	r7, #32
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b086      	sub	sp, #24
 800d272:	af00      	add	r7, sp, #0
 800d274:	60f8      	str	r0, [r7, #12]
 800d276:	60b9      	str	r1, [r7, #8]
 800d278:	607a      	str	r2, [r7, #4]
 800d27a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	461a      	mov	r2, r3
 800d286:	21a5      	movs	r1, #165	@ 0xa5
 800d288:	f01f fe94 	bl	802cfb4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d28e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d296:	3b01      	subs	r3, #1
 800d298:	009b      	lsls	r3, r3, #2
 800d29a:	4413      	add	r3, r2
 800d29c:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	f023 0307 	bic.w	r3, r3, #7
 800d2a4:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	f003 0307 	and.w	r3, r3, #7
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d003      	beq.n	800d2b8 <prvInitialiseNewTask+0x4a>
 800d2b0:	f001 fd82 	bl	800edb8 <ulSetInterruptMask>
 800d2b4:	bf00      	nop
 800d2b6:	e7fd      	b.n	800d2b4 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d01e      	beq.n	800d2fc <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2be:	2300      	movs	r3, #0
 800d2c0:	617b      	str	r3, [r7, #20]
 800d2c2:	e012      	b.n	800d2ea <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d2c4:	68ba      	ldr	r2, [r7, #8]
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	7819      	ldrb	r1, [r3, #0]
 800d2cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	3334      	adds	r3, #52	@ 0x34
 800d2d4:	460a      	mov	r2, r1
 800d2d6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	4413      	add	r3, r2
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d006      	beq.n	800d2f2 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	617b      	str	r3, [r7, #20]
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2b0f      	cmp	r3, #15
 800d2ee:	d9e9      	bls.n	800d2c4 <prvInitialiseNewTask+0x56>
 800d2f0:	e000      	b.n	800d2f4 <prvInitialiseNewTask+0x86>
            {
                break;
 800d2f2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d2fc:	6a3b      	ldr	r3, [r7, #32]
 800d2fe:	2b37      	cmp	r3, #55	@ 0x37
 800d300:	d903      	bls.n	800d30a <prvInitialiseNewTask+0x9c>
 800d302:	f001 fd59 	bl	800edb8 <ulSetInterruptMask>
 800d306:	bf00      	nop
 800d308:	e7fd      	b.n	800d306 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d30a:	6a3b      	ldr	r3, [r7, #32]
 800d30c:	2b37      	cmp	r3, #55	@ 0x37
 800d30e:	d901      	bls.n	800d314 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d310:	2337      	movs	r3, #55	@ 0x37
 800d312:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d316:	6a3a      	ldr	r2, [r7, #32]
 800d318:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800d31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d31c:	6a3a      	ldr	r2, [r7, #32]
 800d31e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d322:	3304      	adds	r3, #4
 800d324:	4618      	mov	r0, r3
 800d326:	f7fe ff57 	bl	800c1d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32c:	3318      	adds	r3, #24
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fe ff52 	bl	800c1d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d338:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d33a:	6a3b      	ldr	r3, [r7, #32]
 800d33c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d342:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d348:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d34c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	6938      	ldr	r0, [r7, #16]
 800d354:	f001 fbc6 	bl	800eae4 <pxPortInitialiseStack>
 800d358:	4602      	mov	r2, r0
 800d35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d360:	2b00      	cmp	r3, #0
 800d362:	d002      	beq.n	800d36a <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d368:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d36a:	bf00      	nop
 800d36c:	3718      	adds	r7, #24
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
	...

0800d374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d37c:	f001 fb52 	bl	800ea24 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d380:	4b3e      	ldr	r3, [pc, #248]	@ (800d47c <prvAddNewTaskToReadyList+0x108>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	3301      	adds	r3, #1
 800d386:	4a3d      	ldr	r2, [pc, #244]	@ (800d47c <prvAddNewTaskToReadyList+0x108>)
 800d388:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d38a:	4b3d      	ldr	r3, [pc, #244]	@ (800d480 <prvAddNewTaskToReadyList+0x10c>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d109      	bne.n	800d3a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d392:	4a3b      	ldr	r2, [pc, #236]	@ (800d480 <prvAddNewTaskToReadyList+0x10c>)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d398:	4b38      	ldr	r3, [pc, #224]	@ (800d47c <prvAddNewTaskToReadyList+0x108>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d110      	bne.n	800d3c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d3a0:	f000 fd2a 	bl	800ddf8 <prvInitialiseTaskLists>
 800d3a4:	e00d      	b.n	800d3c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d3a6:	4b37      	ldr	r3, [pc, #220]	@ (800d484 <prvAddNewTaskToReadyList+0x110>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d109      	bne.n	800d3c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d3ae:	4b34      	ldr	r3, [pc, #208]	@ (800d480 <prvAddNewTaskToReadyList+0x10c>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d802      	bhi.n	800d3c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d3bc:	4a30      	ldr	r2, [pc, #192]	@ (800d480 <prvAddNewTaskToReadyList+0x10c>)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d3c2:	4b31      	ldr	r3, [pc, #196]	@ (800d488 <prvAddNewTaskToReadyList+0x114>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	4a2f      	ldr	r2, [pc, #188]	@ (800d488 <prvAddNewTaskToReadyList+0x114>)
 800d3ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d3cc:	4b2e      	ldr	r3, [pc, #184]	@ (800d488 <prvAddNewTaskToReadyList+0x114>)
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3d8:	4b2c      	ldr	r3, [pc, #176]	@ (800d48c <prvAddNewTaskToReadyList+0x118>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d903      	bls.n	800d3e8 <prvAddNewTaskToReadyList+0x74>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e4:	4a29      	ldr	r2, [pc, #164]	@ (800d48c <prvAddNewTaskToReadyList+0x118>)
 800d3e6:	6013      	str	r3, [r2, #0]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3ec:	4928      	ldr	r1, [pc, #160]	@ (800d490 <prvAddNewTaskToReadyList+0x11c>)
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	4413      	add	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	440b      	add	r3, r1
 800d3f8:	3304      	adds	r3, #4
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	60fb      	str	r3, [r7, #12]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	609a      	str	r2, [r3, #8]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	689a      	ldr	r2, [r3, #8]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	60da      	str	r2, [r3, #12]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	3204      	adds	r2, #4
 800d414:	605a      	str	r2, [r3, #4]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	1d1a      	adds	r2, r3, #4
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	609a      	str	r2, [r3, #8]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d422:	4613      	mov	r3, r2
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	4413      	add	r3, r2
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	4a19      	ldr	r2, [pc, #100]	@ (800d490 <prvAddNewTaskToReadyList+0x11c>)
 800d42c:	441a      	add	r2, r3
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	615a      	str	r2, [r3, #20]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d436:	4916      	ldr	r1, [pc, #88]	@ (800d490 <prvAddNewTaskToReadyList+0x11c>)
 800d438:	4613      	mov	r3, r2
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	440b      	add	r3, r1
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	1c59      	adds	r1, r3, #1
 800d446:	4812      	ldr	r0, [pc, #72]	@ (800d490 <prvAddNewTaskToReadyList+0x11c>)
 800d448:	4613      	mov	r3, r2
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	4413      	add	r3, r2
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	4403      	add	r3, r0
 800d452:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d454:	f001 faf8 	bl	800ea48 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d458:	4b0a      	ldr	r3, [pc, #40]	@ (800d484 <prvAddNewTaskToReadyList+0x110>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d008      	beq.n	800d472 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d460:	4b07      	ldr	r3, [pc, #28]	@ (800d480 <prvAddNewTaskToReadyList+0x10c>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d201      	bcs.n	800d472 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d46e:	f001 fac7 	bl	800ea00 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d472:	bf00      	nop
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20046c5c 	.word	0x20046c5c
 800d480:	20046788 	.word	0x20046788
 800d484:	20046c68 	.word	0x20046c68
 800d488:	20046c78 	.word	0x20046c78
 800d48c:	20046c64 	.word	0x20046c64
 800d490:	2004678c 	.word	0x2004678c

0800d494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d49c:	2300      	movs	r3, #0
 800d49e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d010      	beq.n	800d4c8 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 800d4a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d4dc <vTaskDelay+0x48>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d003      	beq.n	800d4b6 <vTaskDelay+0x22>
 800d4ae:	f001 fc83 	bl	800edb8 <ulSetInterruptMask>
 800d4b2:	bf00      	nop
 800d4b4:	e7fd      	b.n	800d4b2 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800d4b6:	f000 f86f 	bl	800d598 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 ff33 	bl	800e328 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d4c2:	f000 f877 	bl	800d5b4 <xTaskResumeAll>
 800d4c6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d101      	bne.n	800d4d2 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800d4ce:	f001 fa97 	bl	800ea00 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d4d2:	bf00      	nop
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	20046c84 	.word	0x20046c84

0800d4e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b088      	sub	sp, #32
 800d4e4:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d4ee:	463a      	mov	r2, r7
 800d4f0:	1d39      	adds	r1, r7, #4
 800d4f2:	f107 0308 	add.w	r3, r7, #8
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fe fe1a 	bl	800c130 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800d4fc:	6839      	ldr	r1, [r7, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	68ba      	ldr	r2, [r7, #8]
 800d502:	9202      	str	r2, [sp, #8]
 800d504:	9301      	str	r3, [sp, #4]
 800d506:	2300      	movs	r3, #0
 800d508:	9300      	str	r3, [sp, #0]
 800d50a:	2300      	movs	r3, #0
 800d50c:	460a      	mov	r2, r1
 800d50e:	491b      	ldr	r1, [pc, #108]	@ (800d57c <vTaskStartScheduler+0x9c>)
 800d510:	481b      	ldr	r0, [pc, #108]	@ (800d580 <vTaskStartScheduler+0xa0>)
 800d512:	f7ff fe15 	bl	800d140 <xTaskCreateStatic>
 800d516:	4603      	mov	r3, r0
 800d518:	4a1a      	ldr	r2, [pc, #104]	@ (800d584 <vTaskStartScheduler+0xa4>)
 800d51a:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800d51c:	4b19      	ldr	r3, [pc, #100]	@ (800d584 <vTaskStartScheduler+0xa4>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d002      	beq.n	800d52a <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800d524:	2301      	movs	r3, #1
 800d526:	60fb      	str	r3, [r7, #12]
 800d528:	e001      	b.n	800d52e <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800d52a:	2300      	movs	r3, #0
 800d52c:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2b01      	cmp	r3, #1
 800d532:	d102      	bne.n	800d53a <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800d534:	f000 ff66 	bl	800e404 <xTimerCreateTimerTask>
 800d538:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d10e      	bne.n	800d55e <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800d540:	f001 fc3a 	bl	800edb8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d544:	4b10      	ldr	r3, [pc, #64]	@ (800d588 <vTaskStartScheduler+0xa8>)
 800d546:	f04f 32ff 	mov.w	r2, #4294967295
 800d54a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d54c:	4b0f      	ldr	r3, [pc, #60]	@ (800d58c <vTaskStartScheduler+0xac>)
 800d54e:	2201      	movs	r2, #1
 800d550:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d552:	4b0f      	ldr	r3, [pc, #60]	@ (800d590 <vTaskStartScheduler+0xb0>)
 800d554:	2200      	movs	r2, #0
 800d556:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800d558:	f001 fb4e 	bl	800ebf8 <xPortStartScheduler>
 800d55c:	e007      	b.n	800d56e <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d564:	d103      	bne.n	800d56e <vTaskStartScheduler+0x8e>
 800d566:	f001 fc27 	bl	800edb8 <ulSetInterruptMask>
 800d56a:	bf00      	nop
 800d56c:	e7fd      	b.n	800d56a <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d56e:	4b09      	ldr	r3, [pc, #36]	@ (800d594 <vTaskStartScheduler+0xb4>)
 800d570:	681b      	ldr	r3, [r3, #0]
}
 800d572:	bf00      	nop
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	0802dbb4 	.word	0x0802dbb4
 800d580:	0800ddd9 	.word	0x0800ddd9
 800d584:	20046c80 	.word	0x20046c80
 800d588:	20046c7c 	.word	0x20046c7c
 800d58c:	20046c68 	.word	0x20046c68
 800d590:	20046c60 	.word	0x20046c60
 800d594:	0802e920 	.word	0x0802e920

0800d598 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d598:	b480      	push	{r7}
 800d59a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d59c:	4b04      	ldr	r3, [pc, #16]	@ (800d5b0 <vTaskSuspendAll+0x18>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	4a03      	ldr	r2, [pc, #12]	@ (800d5b0 <vTaskSuspendAll+0x18>)
 800d5a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d5a6:	bf00      	nop
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr
 800d5b0:	20046c84 	.word	0x20046c84

0800d5b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b086      	sub	sp, #24
 800d5b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800d5c2:	4b6b      	ldr	r3, [pc, #428]	@ (800d770 <xTaskResumeAll+0x1bc>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d103      	bne.n	800d5d2 <xTaskResumeAll+0x1e>
 800d5ca:	f001 fbf5 	bl	800edb8 <ulSetInterruptMask>
 800d5ce:	bf00      	nop
 800d5d0:	e7fd      	b.n	800d5ce <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d5d2:	f001 fa27 	bl	800ea24 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d5d6:	4b66      	ldr	r3, [pc, #408]	@ (800d770 <xTaskResumeAll+0x1bc>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	4a64      	ldr	r2, [pc, #400]	@ (800d770 <xTaskResumeAll+0x1bc>)
 800d5de:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d5e0:	4b63      	ldr	r3, [pc, #396]	@ (800d770 <xTaskResumeAll+0x1bc>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f040 80bb 	bne.w	800d760 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d5ea:	4b62      	ldr	r3, [pc, #392]	@ (800d774 <xTaskResumeAll+0x1c0>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f000 80b6 	beq.w	800d760 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5f4:	e08b      	b.n	800d70e <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5f6:	4b60      	ldr	r3, [pc, #384]	@ (800d778 <xTaskResumeAll+0x1c4>)
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d602:	60bb      	str	r3, [r7, #8]
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	69db      	ldr	r3, [r3, #28]
 800d608:	697a      	ldr	r2, [r7, #20]
 800d60a:	6a12      	ldr	r2, [r2, #32]
 800d60c:	609a      	str	r2, [r3, #8]
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	697a      	ldr	r2, [r7, #20]
 800d614:	69d2      	ldr	r2, [r2, #28]
 800d616:	605a      	str	r2, [r3, #4]
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	685a      	ldr	r2, [r3, #4]
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	3318      	adds	r3, #24
 800d620:	429a      	cmp	r2, r3
 800d622:	d103      	bne.n	800d62c <xTaskResumeAll+0x78>
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	6a1a      	ldr	r2, [r3, #32]
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	605a      	str	r2, [r3, #4]
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	2200      	movs	r2, #0
 800d630:	629a      	str	r2, [r3, #40]	@ 0x28
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	1e5a      	subs	r2, r3, #1
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	695b      	ldr	r3, [r3, #20]
 800d640:	607b      	str	r3, [r7, #4]
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	68d2      	ldr	r2, [r2, #12]
 800d64a:	609a      	str	r2, [r3, #8]
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	697a      	ldr	r2, [r7, #20]
 800d652:	6892      	ldr	r2, [r2, #8]
 800d654:	605a      	str	r2, [r3, #4]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	685a      	ldr	r2, [r3, #4]
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	3304      	adds	r3, #4
 800d65e:	429a      	cmp	r2, r3
 800d660:	d103      	bne.n	800d66a <xTaskResumeAll+0xb6>
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	68da      	ldr	r2, [r3, #12]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	605a      	str	r2, [r3, #4]
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	2200      	movs	r2, #0
 800d66e:	615a      	str	r2, [r3, #20]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	1e5a      	subs	r2, r3, #1
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d67e:	4b3f      	ldr	r3, [pc, #252]	@ (800d77c <xTaskResumeAll+0x1c8>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	429a      	cmp	r2, r3
 800d684:	d903      	bls.n	800d68e <xTaskResumeAll+0xda>
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d68a:	4a3c      	ldr	r2, [pc, #240]	@ (800d77c <xTaskResumeAll+0x1c8>)
 800d68c:	6013      	str	r3, [r2, #0]
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d692:	493b      	ldr	r1, [pc, #236]	@ (800d780 <xTaskResumeAll+0x1cc>)
 800d694:	4613      	mov	r3, r2
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	4413      	add	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	440b      	add	r3, r1
 800d69e:	3304      	adds	r3, #4
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	603b      	str	r3, [r7, #0]
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	683a      	ldr	r2, [r7, #0]
 800d6a8:	609a      	str	r2, [r3, #8]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	689a      	ldr	r2, [r3, #8]
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	60da      	str	r2, [r3, #12]
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	697a      	ldr	r2, [r7, #20]
 800d6b8:	3204      	adds	r2, #4
 800d6ba:	605a      	str	r2, [r3, #4]
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	1d1a      	adds	r2, r3, #4
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	609a      	str	r2, [r3, #8]
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	4413      	add	r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4a2b      	ldr	r2, [pc, #172]	@ (800d780 <xTaskResumeAll+0x1cc>)
 800d6d2:	441a      	add	r2, r3
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	615a      	str	r2, [r3, #20]
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6dc:	4928      	ldr	r1, [pc, #160]	@ (800d780 <xTaskResumeAll+0x1cc>)
 800d6de:	4613      	mov	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	440b      	add	r3, r1
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	1c59      	adds	r1, r3, #1
 800d6ec:	4824      	ldr	r0, [pc, #144]	@ (800d780 <xTaskResumeAll+0x1cc>)
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	009b      	lsls	r3, r3, #2
 800d6f2:	4413      	add	r3, r2
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	4403      	add	r3, r0
 800d6f8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6fe:	4b21      	ldr	r3, [pc, #132]	@ (800d784 <xTaskResumeAll+0x1d0>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d704:	429a      	cmp	r2, r3
 800d706:	d902      	bls.n	800d70e <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800d708:	4b1f      	ldr	r3, [pc, #124]	@ (800d788 <xTaskResumeAll+0x1d4>)
 800d70a:	2201      	movs	r2, #1
 800d70c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d70e:	4b1a      	ldr	r3, [pc, #104]	@ (800d778 <xTaskResumeAll+0x1c4>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	f47f af6f 	bne.w	800d5f6 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d71e:	f000 fc01 	bl	800df24 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d722:	4b1a      	ldr	r3, [pc, #104]	@ (800d78c <xTaskResumeAll+0x1d8>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d010      	beq.n	800d750 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d72e:	f000 f84b 	bl	800d7c8 <xTaskIncrementTick>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800d738:	4b13      	ldr	r3, [pc, #76]	@ (800d788 <xTaskResumeAll+0x1d4>)
 800d73a:	2201      	movs	r2, #1
 800d73c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3b01      	subs	r3, #1
 800d742:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1f1      	bne.n	800d72e <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800d74a:	4b10      	ldr	r3, [pc, #64]	@ (800d78c <xTaskResumeAll+0x1d8>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d750:	4b0d      	ldr	r3, [pc, #52]	@ (800d788 <xTaskResumeAll+0x1d4>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d003      	beq.n	800d760 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800d758:	2301      	movs	r3, #1
 800d75a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d75c:	f001 f950 	bl	800ea00 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d760:	f001 f972 	bl	800ea48 <vPortExitCritical>

    return xAlreadyYielded;
 800d764:	693b      	ldr	r3, [r7, #16]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3718      	adds	r7, #24
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	20046c84 	.word	0x20046c84
 800d774:	20046c5c 	.word	0x20046c5c
 800d778:	20046c1c 	.word	0x20046c1c
 800d77c:	20046c64 	.word	0x20046c64
 800d780:	2004678c 	.word	0x2004678c
 800d784:	20046788 	.word	0x20046788
 800d788:	20046c70 	.word	0x20046c70
 800d78c:	20046c6c 	.word	0x20046c6c

0800d790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d796:	4b05      	ldr	r3, [pc, #20]	@ (800d7ac <xTaskGetTickCount+0x1c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d79c:	687b      	ldr	r3, [r7, #4]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	370c      	adds	r7, #12
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	20046c60 	.word	0x20046c60

0800d7b0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800d7b4:	4b03      	ldr	r3, [pc, #12]	@ (800d7c4 <uxTaskGetNumberOfTasks+0x14>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	20046c5c 	.word	0x20046c5c

0800d7c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b088      	sub	sp, #32
 800d7cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d7d2:	4b7a      	ldr	r3, [pc, #488]	@ (800d9bc <xTaskIncrementTick+0x1f4>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	f040 80e6 	bne.w	800d9a8 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d7dc:	4b78      	ldr	r3, [pc, #480]	@ (800d9c0 <xTaskIncrementTick+0x1f8>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d7e4:	4a76      	ldr	r2, [pc, #472]	@ (800d9c0 <xTaskIncrementTick+0x1f8>)
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d119      	bne.n	800d824 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800d7f0:	4b74      	ldr	r3, [pc, #464]	@ (800d9c4 <xTaskIncrementTick+0x1fc>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d003      	beq.n	800d802 <xTaskIncrementTick+0x3a>
 800d7fa:	f001 fadd 	bl	800edb8 <ulSetInterruptMask>
 800d7fe:	bf00      	nop
 800d800:	e7fd      	b.n	800d7fe <xTaskIncrementTick+0x36>
 800d802:	4b70      	ldr	r3, [pc, #448]	@ (800d9c4 <xTaskIncrementTick+0x1fc>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	617b      	str	r3, [r7, #20]
 800d808:	4b6f      	ldr	r3, [pc, #444]	@ (800d9c8 <xTaskIncrementTick+0x200>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a6d      	ldr	r2, [pc, #436]	@ (800d9c4 <xTaskIncrementTick+0x1fc>)
 800d80e:	6013      	str	r3, [r2, #0]
 800d810:	4a6d      	ldr	r2, [pc, #436]	@ (800d9c8 <xTaskIncrementTick+0x200>)
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	6013      	str	r3, [r2, #0]
 800d816:	4b6d      	ldr	r3, [pc, #436]	@ (800d9cc <xTaskIncrementTick+0x204>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	3301      	adds	r3, #1
 800d81c:	4a6b      	ldr	r2, [pc, #428]	@ (800d9cc <xTaskIncrementTick+0x204>)
 800d81e:	6013      	str	r3, [r2, #0]
 800d820:	f000 fb80 	bl	800df24 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d824:	4b6a      	ldr	r3, [pc, #424]	@ (800d9d0 <xTaskIncrementTick+0x208>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	69ba      	ldr	r2, [r7, #24]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	f0c0 80a7 	bcc.w	800d97e <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d830:	4b64      	ldr	r3, [pc, #400]	@ (800d9c4 <xTaskIncrementTick+0x1fc>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d104      	bne.n	800d844 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d83a:	4b65      	ldr	r3, [pc, #404]	@ (800d9d0 <xTaskIncrementTick+0x208>)
 800d83c:	f04f 32ff 	mov.w	r2, #4294967295
 800d840:	601a      	str	r2, [r3, #0]
                    break;
 800d842:	e09c      	b.n	800d97e <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d844:	4b5f      	ldr	r3, [pc, #380]	@ (800d9c4 <xTaskIncrementTick+0x1fc>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800d854:	69ba      	ldr	r2, [r7, #24]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	429a      	cmp	r2, r3
 800d85a:	d203      	bcs.n	800d864 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d85c:	4a5c      	ldr	r2, [pc, #368]	@ (800d9d0 <xTaskIncrementTick+0x208>)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800d862:	e08c      	b.n	800d97e <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	60bb      	str	r3, [r7, #8]
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	693a      	ldr	r2, [r7, #16]
 800d870:	68d2      	ldr	r2, [r2, #12]
 800d872:	609a      	str	r2, [r3, #8]
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	693a      	ldr	r2, [r7, #16]
 800d87a:	6892      	ldr	r2, [r2, #8]
 800d87c:	605a      	str	r2, [r3, #4]
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	685a      	ldr	r2, [r3, #4]
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	3304      	adds	r3, #4
 800d886:	429a      	cmp	r2, r3
 800d888:	d103      	bne.n	800d892 <xTaskIncrementTick+0xca>
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	68da      	ldr	r2, [r3, #12]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	605a      	str	r2, [r3, #4]
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	2200      	movs	r2, #0
 800d896:	615a      	str	r2, [r3, #20]
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	1e5a      	subs	r2, r3, #1
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d01e      	beq.n	800d8e8 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ae:	607b      	str	r3, [r7, #4]
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	693a      	ldr	r2, [r7, #16]
 800d8b6:	6a12      	ldr	r2, [r2, #32]
 800d8b8:	609a      	str	r2, [r3, #8]
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	693a      	ldr	r2, [r7, #16]
 800d8c0:	69d2      	ldr	r2, [r2, #28]
 800d8c2:	605a      	str	r2, [r3, #4]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	685a      	ldr	r2, [r3, #4]
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	3318      	adds	r3, #24
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d103      	bne.n	800d8d8 <xTaskIncrementTick+0x110>
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	6a1a      	ldr	r2, [r3, #32]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	605a      	str	r2, [r3, #4]
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	629a      	str	r2, [r3, #40]	@ 0x28
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	1e5a      	subs	r2, r3, #1
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ec:	4b39      	ldr	r3, [pc, #228]	@ (800d9d4 <xTaskIncrementTick+0x20c>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d903      	bls.n	800d8fc <xTaskIncrementTick+0x134>
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8f8:	4a36      	ldr	r2, [pc, #216]	@ (800d9d4 <xTaskIncrementTick+0x20c>)
 800d8fa:	6013      	str	r3, [r2, #0]
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d900:	4935      	ldr	r1, [pc, #212]	@ (800d9d8 <xTaskIncrementTick+0x210>)
 800d902:	4613      	mov	r3, r2
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4413      	add	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	440b      	add	r3, r1
 800d90c:	3304      	adds	r3, #4
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	603b      	str	r3, [r7, #0]
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	683a      	ldr	r2, [r7, #0]
 800d916:	609a      	str	r2, [r3, #8]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	689a      	ldr	r2, [r3, #8]
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	60da      	str	r2, [r3, #12]
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	3204      	adds	r2, #4
 800d928:	605a      	str	r2, [r3, #4]
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	1d1a      	adds	r2, r3, #4
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	609a      	str	r2, [r3, #8]
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d936:	4613      	mov	r3, r2
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	4413      	add	r3, r2
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4a26      	ldr	r2, [pc, #152]	@ (800d9d8 <xTaskIncrementTick+0x210>)
 800d940:	441a      	add	r2, r3
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	615a      	str	r2, [r3, #20]
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d94a:	4923      	ldr	r1, [pc, #140]	@ (800d9d8 <xTaskIncrementTick+0x210>)
 800d94c:	4613      	mov	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	440b      	add	r3, r1
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	1c59      	adds	r1, r3, #1
 800d95a:	481f      	ldr	r0, [pc, #124]	@ (800d9d8 <xTaskIncrementTick+0x210>)
 800d95c:	4613      	mov	r3, r2
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	4413      	add	r3, r2
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	4403      	add	r3, r0
 800d966:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d96c:	4b1b      	ldr	r3, [pc, #108]	@ (800d9dc <xTaskIncrementTick+0x214>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d972:	429a      	cmp	r2, r3
 800d974:	f67f af5c 	bls.w	800d830 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800d978:	2301      	movs	r3, #1
 800d97a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d97c:	e758      	b.n	800d830 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d97e:	4b17      	ldr	r3, [pc, #92]	@ (800d9dc <xTaskIncrementTick+0x214>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d984:	4914      	ldr	r1, [pc, #80]	@ (800d9d8 <xTaskIncrementTick+0x210>)
 800d986:	4613      	mov	r3, r2
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	4413      	add	r3, r2
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	440b      	add	r3, r1
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2b01      	cmp	r3, #1
 800d994:	d901      	bls.n	800d99a <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800d996:	2301      	movs	r3, #1
 800d998:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800d99a:	4b11      	ldr	r3, [pc, #68]	@ (800d9e0 <xTaskIncrementTick+0x218>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d007      	beq.n	800d9b2 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	61fb      	str	r3, [r7, #28]
 800d9a6:	e004      	b.n	800d9b2 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800d9a8:	4b0e      	ldr	r3, [pc, #56]	@ (800d9e4 <xTaskIncrementTick+0x21c>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	4a0d      	ldr	r2, [pc, #52]	@ (800d9e4 <xTaskIncrementTick+0x21c>)
 800d9b0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800d9b2:	69fb      	ldr	r3, [r7, #28]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3720      	adds	r7, #32
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	20046c84 	.word	0x20046c84
 800d9c0:	20046c60 	.word	0x20046c60
 800d9c4:	20046c14 	.word	0x20046c14
 800d9c8:	20046c18 	.word	0x20046c18
 800d9cc:	20046c74 	.word	0x20046c74
 800d9d0:	20046c7c 	.word	0x20046c7c
 800d9d4:	20046c64 	.word	0x20046c64
 800d9d8:	2004678c 	.word	0x2004678c
 800d9dc:	20046788 	.word	0x20046788
 800d9e0:	20046c70 	.word	0x20046c70
 800d9e4:	20046c6c 	.word	0x20046c6c

0800d9e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800d9ee:	4b23      	ldr	r3, [pc, #140]	@ (800da7c <vTaskSwitchContext+0x94>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d003      	beq.n	800d9fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800d9f6:	4b22      	ldr	r3, [pc, #136]	@ (800da80 <vTaskSwitchContext+0x98>)
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800d9fc:	e039      	b.n	800da72 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800d9fe:	4b20      	ldr	r3, [pc, #128]	@ (800da80 <vTaskSwitchContext+0x98>)
 800da00:	2200      	movs	r2, #0
 800da02:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da04:	4b1f      	ldr	r3, [pc, #124]	@ (800da84 <vTaskSwitchContext+0x9c>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	607b      	str	r3, [r7, #4]
 800da0a:	e009      	b.n	800da20 <vTaskSwitchContext+0x38>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d103      	bne.n	800da1a <vTaskSwitchContext+0x32>
 800da12:	f001 f9d1 	bl	800edb8 <ulSetInterruptMask>
 800da16:	bf00      	nop
 800da18:	e7fd      	b.n	800da16 <vTaskSwitchContext+0x2e>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	3b01      	subs	r3, #1
 800da1e:	607b      	str	r3, [r7, #4]
 800da20:	4919      	ldr	r1, [pc, #100]	@ (800da88 <vTaskSwitchContext+0xa0>)
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	4613      	mov	r3, r2
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	4413      	add	r3, r2
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	440b      	add	r3, r1
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d0eb      	beq.n	800da0c <vTaskSwitchContext+0x24>
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	4613      	mov	r3, r2
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4413      	add	r3, r2
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	4a12      	ldr	r2, [pc, #72]	@ (800da88 <vTaskSwitchContext+0xa0>)
 800da40:	4413      	add	r3, r2
 800da42:	603b      	str	r3, [r7, #0]
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	685a      	ldr	r2, [r3, #4]
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	605a      	str	r2, [r3, #4]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	685a      	ldr	r2, [r3, #4]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	3308      	adds	r3, #8
 800da56:	429a      	cmp	r2, r3
 800da58:	d103      	bne.n	800da62 <vTaskSwitchContext+0x7a>
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	68da      	ldr	r2, [r3, #12]
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	605a      	str	r2, [r3, #4]
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	4a08      	ldr	r2, [pc, #32]	@ (800da8c <vTaskSwitchContext+0xa4>)
 800da6a:	6013      	str	r3, [r2, #0]
 800da6c:	4a05      	ldr	r2, [pc, #20]	@ (800da84 <vTaskSwitchContext+0x9c>)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6013      	str	r3, [r2, #0]
}
 800da72:	bf00      	nop
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	20046c84 	.word	0x20046c84
 800da80:	20046c70 	.word	0x20046c70
 800da84:	20046c64 	.word	0x20046c64
 800da88:	2004678c 	.word	0x2004678c
 800da8c:	20046788 	.word	0x20046788

0800da90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d103      	bne.n	800daa8 <vTaskPlaceOnEventList+0x18>
 800daa0:	f001 f98a 	bl	800edb8 <ulSetInterruptMask>
 800daa4:	bf00      	nop
 800daa6:	e7fd      	b.n	800daa4 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800daa8:	4b07      	ldr	r3, [pc, #28]	@ (800dac8 <vTaskPlaceOnEventList+0x38>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	3318      	adds	r3, #24
 800daae:	4619      	mov	r1, r3
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f7fe fb9e 	bl	800c1f2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dab6:	2101      	movs	r1, #1
 800dab8:	6838      	ldr	r0, [r7, #0]
 800daba:	f000 fc35 	bl	800e328 <prvAddCurrentTaskToDelayedList>
}
 800dabe:	bf00      	nop
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	20046788 	.word	0x20046788

0800dacc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800dacc:	b580      	push	{r7, lr}
 800dace:	b086      	sub	sp, #24
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d103      	bne.n	800dae6 <vTaskPlaceOnEventListRestricted+0x1a>
 800dade:	f001 f96b 	bl	800edb8 <ulSetInterruptMask>
 800dae2:	bf00      	nop
 800dae4:	e7fd      	b.n	800dae2 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	617b      	str	r3, [r7, #20]
 800daec:	4b15      	ldr	r3, [pc, #84]	@ (800db44 <vTaskPlaceOnEventListRestricted+0x78>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	61da      	str	r2, [r3, #28]
 800daf4:	4b13      	ldr	r3, [pc, #76]	@ (800db44 <vTaskPlaceOnEventListRestricted+0x78>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	6892      	ldr	r2, [r2, #8]
 800dafc:	621a      	str	r2, [r3, #32]
 800dafe:	4b11      	ldr	r3, [pc, #68]	@ (800db44 <vTaskPlaceOnEventListRestricted+0x78>)
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	3218      	adds	r2, #24
 800db08:	605a      	str	r2, [r3, #4]
 800db0a:	4b0e      	ldr	r3, [pc, #56]	@ (800db44 <vTaskPlaceOnEventListRestricted+0x78>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f103 0218 	add.w	r2, r3, #24
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	609a      	str	r2, [r3, #8]
 800db16:	4b0b      	ldr	r3, [pc, #44]	@ (800db44 <vTaskPlaceOnEventListRestricted+0x78>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	629a      	str	r2, [r3, #40]	@ 0x28
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	1c5a      	adds	r2, r3, #1
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d002      	beq.n	800db34 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800db2e:	f04f 33ff 	mov.w	r3, #4294967295
 800db32:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800db34:	6879      	ldr	r1, [r7, #4]
 800db36:	68b8      	ldr	r0, [r7, #8]
 800db38:	f000 fbf6 	bl	800e328 <prvAddCurrentTaskToDelayedList>
    }
 800db3c:	bf00      	nop
 800db3e:	3718      	adds	r7, #24
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	20046788 	.word	0x20046788

0800db48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b088      	sub	sp, #32
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d103      	bne.n	800db66 <xTaskRemoveFromEventList+0x1e>
 800db5e:	f001 f92b 	bl	800edb8 <ulSetInterruptMask>
 800db62:	bf00      	nop
 800db64:	e7fd      	b.n	800db62 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db6a:	617b      	str	r3, [r7, #20]
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	69db      	ldr	r3, [r3, #28]
 800db70:	69ba      	ldr	r2, [r7, #24]
 800db72:	6a12      	ldr	r2, [r2, #32]
 800db74:	609a      	str	r2, [r3, #8]
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	6a1b      	ldr	r3, [r3, #32]
 800db7a:	69ba      	ldr	r2, [r7, #24]
 800db7c:	69d2      	ldr	r2, [r2, #28]
 800db7e:	605a      	str	r2, [r3, #4]
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	685a      	ldr	r2, [r3, #4]
 800db84:	69bb      	ldr	r3, [r7, #24]
 800db86:	3318      	adds	r3, #24
 800db88:	429a      	cmp	r2, r3
 800db8a:	d103      	bne.n	800db94 <xTaskRemoveFromEventList+0x4c>
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	6a1a      	ldr	r2, [r3, #32]
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	605a      	str	r2, [r3, #4]
 800db94:	69bb      	ldr	r3, [r7, #24]
 800db96:	2200      	movs	r2, #0
 800db98:	629a      	str	r2, [r3, #40]	@ 0x28
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	1e5a      	subs	r2, r3, #1
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800dba4:	4b49      	ldr	r3, [pc, #292]	@ (800dccc <xTaskRemoveFromEventList+0x184>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d15f      	bne.n	800dc6c <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	695b      	ldr	r3, [r3, #20]
 800dbb0:	60fb      	str	r3, [r7, #12]
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	69ba      	ldr	r2, [r7, #24]
 800dbb8:	68d2      	ldr	r2, [r2, #12]
 800dbba:	609a      	str	r2, [r3, #8]
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	69ba      	ldr	r2, [r7, #24]
 800dbc2:	6892      	ldr	r2, [r2, #8]
 800dbc4:	605a      	str	r2, [r3, #4]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	685a      	ldr	r2, [r3, #4]
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d103      	bne.n	800dbda <xTaskRemoveFromEventList+0x92>
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	68da      	ldr	r2, [r3, #12]
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	605a      	str	r2, [r3, #4]
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	615a      	str	r2, [r3, #20]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	1e5a      	subs	r2, r3, #1
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbee:	4b38      	ldr	r3, [pc, #224]	@ (800dcd0 <xTaskRemoveFromEventList+0x188>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d903      	bls.n	800dbfe <xTaskRemoveFromEventList+0xb6>
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbfa:	4a35      	ldr	r2, [pc, #212]	@ (800dcd0 <xTaskRemoveFromEventList+0x188>)
 800dbfc:	6013      	str	r3, [r2, #0]
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc02:	4934      	ldr	r1, [pc, #208]	@ (800dcd4 <xTaskRemoveFromEventList+0x18c>)
 800dc04:	4613      	mov	r3, r2
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	4413      	add	r3, r2
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	440b      	add	r3, r1
 800dc0e:	3304      	adds	r3, #4
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	60bb      	str	r3, [r7, #8]
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	609a      	str	r2, [r3, #8]
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	689a      	ldr	r2, [r3, #8]
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	60da      	str	r2, [r3, #12]
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	69ba      	ldr	r2, [r7, #24]
 800dc28:	3204      	adds	r2, #4
 800dc2a:	605a      	str	r2, [r3, #4]
 800dc2c:	69bb      	ldr	r3, [r7, #24]
 800dc2e:	1d1a      	adds	r2, r3, #4
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	609a      	str	r2, [r3, #8]
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc38:	4613      	mov	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	4a24      	ldr	r2, [pc, #144]	@ (800dcd4 <xTaskRemoveFromEventList+0x18c>)
 800dc42:	441a      	add	r2, r3
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	615a      	str	r2, [r3, #20]
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc4c:	4921      	ldr	r1, [pc, #132]	@ (800dcd4 <xTaskRemoveFromEventList+0x18c>)
 800dc4e:	4613      	mov	r3, r2
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4413      	add	r3, r2
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	440b      	add	r3, r1
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	1c59      	adds	r1, r3, #1
 800dc5c:	481d      	ldr	r0, [pc, #116]	@ (800dcd4 <xTaskRemoveFromEventList+0x18c>)
 800dc5e:	4613      	mov	r3, r2
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	4413      	add	r3, r2
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	4403      	add	r3, r0
 800dc68:	6019      	str	r1, [r3, #0]
 800dc6a:	e01b      	b.n	800dca4 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc6c:	4b1a      	ldr	r3, [pc, #104]	@ (800dcd8 <xTaskRemoveFromEventList+0x190>)
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	613b      	str	r3, [r7, #16]
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	693a      	ldr	r2, [r7, #16]
 800dc76:	61da      	str	r2, [r3, #28]
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	689a      	ldr	r2, [r3, #8]
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	621a      	str	r2, [r3, #32]
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	69ba      	ldr	r2, [r7, #24]
 800dc86:	3218      	adds	r2, #24
 800dc88:	605a      	str	r2, [r3, #4]
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	f103 0218 	add.w	r2, r3, #24
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	609a      	str	r2, [r3, #8]
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	4a10      	ldr	r2, [pc, #64]	@ (800dcd8 <xTaskRemoveFromEventList+0x190>)
 800dc98:	629a      	str	r2, [r3, #40]	@ 0x28
 800dc9a:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd8 <xTaskRemoveFromEventList+0x190>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	4a0d      	ldr	r2, [pc, #52]	@ (800dcd8 <xTaskRemoveFromEventList+0x190>)
 800dca2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dca8:	4b0c      	ldr	r3, [pc, #48]	@ (800dcdc <xTaskRemoveFromEventList+0x194>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d905      	bls.n	800dcbe <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800dcb6:	4b0a      	ldr	r3, [pc, #40]	@ (800dce0 <xTaskRemoveFromEventList+0x198>)
 800dcb8:	2201      	movs	r2, #1
 800dcba:	601a      	str	r2, [r3, #0]
 800dcbc:	e001      	b.n	800dcc2 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800dcc2:	69fb      	ldr	r3, [r7, #28]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3720      	adds	r7, #32
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	20046c84 	.word	0x20046c84
 800dcd0:	20046c64 	.word	0x20046c64
 800dcd4:	2004678c 	.word	0x2004678c
 800dcd8:	20046c1c 	.word	0x20046c1c
 800dcdc:	20046788 	.word	0x20046788
 800dce0:	20046c70 	.word	0x20046c70

0800dce4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dcec:	4b06      	ldr	r3, [pc, #24]	@ (800dd08 <vTaskInternalSetTimeOutState+0x24>)
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800dcf4:	4b05      	ldr	r3, [pc, #20]	@ (800dd0c <vTaskInternalSetTimeOutState+0x28>)
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	605a      	str	r2, [r3, #4]
}
 800dcfc:	bf00      	nop
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr
 800dd08:	20046c74 	.word	0x20046c74
 800dd0c:	20046c60 	.word	0x20046c60

0800dd10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b086      	sub	sp, #24
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d103      	bne.n	800dd28 <xTaskCheckForTimeOut+0x18>
 800dd20:	f001 f84a 	bl	800edb8 <ulSetInterruptMask>
 800dd24:	bf00      	nop
 800dd26:	e7fd      	b.n	800dd24 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d103      	bne.n	800dd36 <xTaskCheckForTimeOut+0x26>
 800dd2e:	f001 f843 	bl	800edb8 <ulSetInterruptMask>
 800dd32:	bf00      	nop
 800dd34:	e7fd      	b.n	800dd32 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800dd36:	f000 fe75 	bl	800ea24 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800dd3a:	4b1f      	ldr	r3, [pc, #124]	@ (800ddb8 <xTaskCheckForTimeOut+0xa8>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	693a      	ldr	r2, [r7, #16]
 800dd46:	1ad3      	subs	r3, r2, r3
 800dd48:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd52:	d102      	bne.n	800dd5a <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800dd54:	2300      	movs	r3, #0
 800dd56:	617b      	str	r3, [r7, #20]
 800dd58:	e026      	b.n	800dda8 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	4b17      	ldr	r3, [pc, #92]	@ (800ddbc <xTaskCheckForTimeOut+0xac>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d00a      	beq.n	800dd7c <xTaskCheckForTimeOut+0x6c>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	693a      	ldr	r2, [r7, #16]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d305      	bcc.n	800dd7c <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800dd70:	2301      	movs	r3, #1
 800dd72:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	2200      	movs	r2, #0
 800dd78:	601a      	str	r2, [r3, #0]
 800dd7a:	e015      	b.n	800dda8 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d20b      	bcs.n	800dd9e <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	1ad2      	subs	r2, r2, r3
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7ff ffa6 	bl	800dce4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	617b      	str	r3, [r7, #20]
 800dd9c:	e004      	b.n	800dda8 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2200      	movs	r2, #0
 800dda2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800dda4:	2301      	movs	r3, #1
 800dda6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800dda8:	f000 fe4e 	bl	800ea48 <vPortExitCritical>

    return xReturn;
 800ddac:	697b      	ldr	r3, [r7, #20]
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3718      	adds	r7, #24
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	20046c60 	.word	0x20046c60
 800ddbc:	20046c74 	.word	0x20046c74

0800ddc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800ddc4:	4b03      	ldr	r3, [pc, #12]	@ (800ddd4 <vTaskMissedYield+0x14>)
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	601a      	str	r2, [r3, #0]
}
 800ddca:	bf00      	nop
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr
 800ddd4:	20046c70 	.word	0x20046c70

0800ddd8 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800dde0:	f000 f84a 	bl	800de78 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dde4:	4b03      	ldr	r3, [pc, #12]	@ (800ddf4 <prvIdleTask+0x1c>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d9f9      	bls.n	800dde0 <prvIdleTask+0x8>
            {
                taskYIELD();
 800ddec:	f000 fe08 	bl	800ea00 <vPortYield>
        prvCheckTasksWaitingTermination();
 800ddf0:	e7f6      	b.n	800dde0 <prvIdleTask+0x8>
 800ddf2:	bf00      	nop
 800ddf4:	2004678c 	.word	0x2004678c

0800ddf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ddfe:	2300      	movs	r3, #0
 800de00:	607b      	str	r3, [r7, #4]
 800de02:	e00c      	b.n	800de1e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	4613      	mov	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4413      	add	r3, r2
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	4a12      	ldr	r2, [pc, #72]	@ (800de58 <prvInitialiseTaskLists+0x60>)
 800de10:	4413      	add	r3, r2
 800de12:	4618      	mov	r0, r3
 800de14:	f7fe f9c0 	bl	800c198 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	3301      	adds	r3, #1
 800de1c:	607b      	str	r3, [r7, #4]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2b37      	cmp	r3, #55	@ 0x37
 800de22:	d9ef      	bls.n	800de04 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800de24:	480d      	ldr	r0, [pc, #52]	@ (800de5c <prvInitialiseTaskLists+0x64>)
 800de26:	f7fe f9b7 	bl	800c198 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800de2a:	480d      	ldr	r0, [pc, #52]	@ (800de60 <prvInitialiseTaskLists+0x68>)
 800de2c:	f7fe f9b4 	bl	800c198 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800de30:	480c      	ldr	r0, [pc, #48]	@ (800de64 <prvInitialiseTaskLists+0x6c>)
 800de32:	f7fe f9b1 	bl	800c198 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800de36:	480c      	ldr	r0, [pc, #48]	@ (800de68 <prvInitialiseTaskLists+0x70>)
 800de38:	f7fe f9ae 	bl	800c198 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800de3c:	480b      	ldr	r0, [pc, #44]	@ (800de6c <prvInitialiseTaskLists+0x74>)
 800de3e:	f7fe f9ab 	bl	800c198 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800de42:	4b0b      	ldr	r3, [pc, #44]	@ (800de70 <prvInitialiseTaskLists+0x78>)
 800de44:	4a05      	ldr	r2, [pc, #20]	@ (800de5c <prvInitialiseTaskLists+0x64>)
 800de46:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de48:	4b0a      	ldr	r3, [pc, #40]	@ (800de74 <prvInitialiseTaskLists+0x7c>)
 800de4a:	4a05      	ldr	r2, [pc, #20]	@ (800de60 <prvInitialiseTaskLists+0x68>)
 800de4c:	601a      	str	r2, [r3, #0]
}
 800de4e:	bf00      	nop
 800de50:	3708      	adds	r7, #8
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	2004678c 	.word	0x2004678c
 800de5c:	20046bec 	.word	0x20046bec
 800de60:	20046c00 	.word	0x20046c00
 800de64:	20046c1c 	.word	0x20046c1c
 800de68:	20046c30 	.word	0x20046c30
 800de6c:	20046c48 	.word	0x20046c48
 800de70:	20046c14 	.word	0x20046c14
 800de74:	20046c18 	.word	0x20046c18

0800de78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de7e:	e019      	b.n	800deb4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800de80:	f000 fdd0 	bl	800ea24 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de84:	4b10      	ldr	r3, [pc, #64]	@ (800dec8 <prvCheckTasksWaitingTermination+0x50>)
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	3304      	adds	r3, #4
 800de90:	4618      	mov	r0, r3
 800de92:	f7fe f9e7 	bl	800c264 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800de96:	4b0d      	ldr	r3, [pc, #52]	@ (800decc <prvCheckTasksWaitingTermination+0x54>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	3b01      	subs	r3, #1
 800de9c:	4a0b      	ldr	r2, [pc, #44]	@ (800decc <prvCheckTasksWaitingTermination+0x54>)
 800de9e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800dea0:	4b0b      	ldr	r3, [pc, #44]	@ (800ded0 <prvCheckTasksWaitingTermination+0x58>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	3b01      	subs	r3, #1
 800dea6:	4a0a      	ldr	r2, [pc, #40]	@ (800ded0 <prvCheckTasksWaitingTermination+0x58>)
 800dea8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800deaa:	f000 fdcd 	bl	800ea48 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 f810 	bl	800ded4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800deb4:	4b06      	ldr	r3, [pc, #24]	@ (800ded0 <prvCheckTasksWaitingTermination+0x58>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1e1      	bne.n	800de80 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800debc:	bf00      	nop
 800debe:	bf00      	nop
 800dec0:	3708      	adds	r7, #8
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	20046c30 	.word	0x20046c30
 800decc:	20046c5c 	.word	0x20046c5c
 800ded0:	20046c44 	.word	0x20046c44

0800ded4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d108      	bne.n	800def8 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deea:	4618      	mov	r0, r3
 800deec:	f001 f888 	bl	800f000 <vPortFree>
                vPortFree( pxTCB );
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f001 f885 	bl	800f000 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800def6:	e011      	b.n	800df1c <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800defe:	2b01      	cmp	r3, #1
 800df00:	d103      	bne.n	800df0a <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f001 f87c 	bl	800f000 <vPortFree>
    }
 800df08:	e008      	b.n	800df1c <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800df10:	2b02      	cmp	r3, #2
 800df12:	d003      	beq.n	800df1c <prvDeleteTCB+0x48>
 800df14:	f000 ff50 	bl	800edb8 <ulSetInterruptMask>
 800df18:	bf00      	nop
 800df1a:	e7fd      	b.n	800df18 <prvDeleteTCB+0x44>
    }
 800df1c:	bf00      	nop
 800df1e:	3708      	adds	r7, #8
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df24:	b480      	push	{r7}
 800df26:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df28:	4b0a      	ldr	r3, [pc, #40]	@ (800df54 <prvResetNextTaskUnblockTime+0x30>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d104      	bne.n	800df3c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800df32:	4b09      	ldr	r3, [pc, #36]	@ (800df58 <prvResetNextTaskUnblockTime+0x34>)
 800df34:	f04f 32ff 	mov.w	r2, #4294967295
 800df38:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800df3a:	e005      	b.n	800df48 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800df3c:	4b05      	ldr	r3, [pc, #20]	@ (800df54 <prvResetNextTaskUnblockTime+0x30>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a04      	ldr	r2, [pc, #16]	@ (800df58 <prvResetNextTaskUnblockTime+0x34>)
 800df46:	6013      	str	r3, [r2, #0]
}
 800df48:	bf00      	nop
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	20046c14 	.word	0x20046c14
 800df58:	20046c7c 	.word	0x20046c7c

0800df5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800df62:	4b0b      	ldr	r3, [pc, #44]	@ (800df90 <xTaskGetSchedulerState+0x34>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d102      	bne.n	800df70 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800df6a:	2301      	movs	r3, #1
 800df6c:	607b      	str	r3, [r7, #4]
 800df6e:	e008      	b.n	800df82 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800df70:	4b08      	ldr	r3, [pc, #32]	@ (800df94 <xTaskGetSchedulerState+0x38>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d102      	bne.n	800df7e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800df78:	2302      	movs	r3, #2
 800df7a:	607b      	str	r3, [r7, #4]
 800df7c:	e001      	b.n	800df82 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800df7e:	2300      	movs	r3, #0
 800df80:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800df82:	687b      	ldr	r3, [r7, #4]
    }
 800df84:	4618      	mov	r0, r3
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	20046c68 	.word	0x20046c68
 800df94:	20046c84 	.word	0x20046c84

0800df98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800df98:	b580      	push	{r7, lr}
 800df9a:	b086      	sub	sp, #24
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d079      	beq.n	800e0a2 <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfb2:	4b3e      	ldr	r3, [pc, #248]	@ (800e0ac <xTaskPriorityInherit+0x114>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d269      	bcs.n	800e090 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	699b      	ldr	r3, [r3, #24]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	db06      	blt.n	800dfd2 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfc4:	4b39      	ldr	r3, [pc, #228]	@ (800e0ac <xTaskPriorityInherit+0x114>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	6959      	ldr	r1, [r3, #20]
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfda:	4613      	mov	r3, r2
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	4413      	add	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4a33      	ldr	r2, [pc, #204]	@ (800e0b0 <xTaskPriorityInherit+0x118>)
 800dfe4:	4413      	add	r3, r2
 800dfe6:	4299      	cmp	r1, r3
 800dfe8:	d14a      	bne.n	800e080 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	3304      	adds	r3, #4
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fe f938 	bl	800c264 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dff4:	4b2d      	ldr	r3, [pc, #180]	@ (800e0ac <xTaskPriorityInherit+0x114>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e002:	4b2c      	ldr	r3, [pc, #176]	@ (800e0b4 <xTaskPriorityInherit+0x11c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	429a      	cmp	r2, r3
 800e008:	d903      	bls.n	800e012 <xTaskPriorityInherit+0x7a>
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e00e:	4a29      	ldr	r2, [pc, #164]	@ (800e0b4 <xTaskPriorityInherit+0x11c>)
 800e010:	6013      	str	r3, [r2, #0]
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e016:	4926      	ldr	r1, [pc, #152]	@ (800e0b0 <xTaskPriorityInherit+0x118>)
 800e018:	4613      	mov	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	4413      	add	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	440b      	add	r3, r1
 800e022:	3304      	adds	r3, #4
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	60fb      	str	r3, [r7, #12]
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	68fa      	ldr	r2, [r7, #12]
 800e02c:	609a      	str	r2, [r3, #8]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	689a      	ldr	r2, [r3, #8]
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	60da      	str	r2, [r3, #12]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	693a      	ldr	r2, [r7, #16]
 800e03c:	3204      	adds	r2, #4
 800e03e:	605a      	str	r2, [r3, #4]
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	1d1a      	adds	r2, r3, #4
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	609a      	str	r2, [r3, #8]
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e04c:	4613      	mov	r3, r2
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	4413      	add	r3, r2
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	4a16      	ldr	r2, [pc, #88]	@ (800e0b0 <xTaskPriorityInherit+0x118>)
 800e056:	441a      	add	r2, r3
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	615a      	str	r2, [r3, #20]
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e060:	4913      	ldr	r1, [pc, #76]	@ (800e0b0 <xTaskPriorityInherit+0x118>)
 800e062:	4613      	mov	r3, r2
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4413      	add	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	440b      	add	r3, r1
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	1c59      	adds	r1, r3, #1
 800e070:	480f      	ldr	r0, [pc, #60]	@ (800e0b0 <xTaskPriorityInherit+0x118>)
 800e072:	4613      	mov	r3, r2
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	4413      	add	r3, r2
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	4403      	add	r3, r0
 800e07c:	6019      	str	r1, [r3, #0]
 800e07e:	e004      	b.n	800e08a <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e080:	4b0a      	ldr	r3, [pc, #40]	@ (800e0ac <xTaskPriorityInherit+0x114>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800e08a:	2301      	movs	r3, #1
 800e08c:	617b      	str	r3, [r7, #20]
 800e08e:	e008      	b.n	800e0a2 <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e094:	4b05      	ldr	r3, [pc, #20]	@ (800e0ac <xTaskPriorityInherit+0x114>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d201      	bcs.n	800e0a2 <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e0a2:	697b      	ldr	r3, [r7, #20]
    }
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3718      	adds	r7, #24
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	20046788 	.word	0x20046788
 800e0b0:	2004678c 	.word	0x2004678c
 800e0b4:	20046c64 	.word	0x20046c64

0800e0b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b086      	sub	sp, #24
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d070      	beq.n	800e1b0 <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800e0ce:	4b3b      	ldr	r3, [pc, #236]	@ (800e1bc <xTaskPriorityDisinherit+0x104>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	693a      	ldr	r2, [r7, #16]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d003      	beq.n	800e0e0 <xTaskPriorityDisinherit+0x28>
 800e0d8:	f000 fe6e 	bl	800edb8 <ulSetInterruptMask>
 800e0dc:	bf00      	nop
 800e0de:	e7fd      	b.n	800e0dc <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d103      	bne.n	800e0f0 <xTaskPriorityDisinherit+0x38>
 800e0e8:	f000 fe66 	bl	800edb8 <ulSetInterruptMask>
 800e0ec:	bf00      	nop
 800e0ee:	e7fd      	b.n	800e0ec <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0f4:	1e5a      	subs	r2, r3, #1
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e102:	429a      	cmp	r2, r3
 800e104:	d054      	beq.n	800e1b0 <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d150      	bne.n	800e1b0 <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	3304      	adds	r3, #4
 800e112:	4618      	mov	r0, r3
 800e114:	f7fe f8a6 	bl	800c264 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e124:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e130:	4b23      	ldr	r3, [pc, #140]	@ (800e1c0 <xTaskPriorityDisinherit+0x108>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	429a      	cmp	r2, r3
 800e136:	d903      	bls.n	800e140 <xTaskPriorityDisinherit+0x88>
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e13c:	4a20      	ldr	r2, [pc, #128]	@ (800e1c0 <xTaskPriorityDisinherit+0x108>)
 800e13e:	6013      	str	r3, [r2, #0]
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e144:	491f      	ldr	r1, [pc, #124]	@ (800e1c4 <xTaskPriorityDisinherit+0x10c>)
 800e146:	4613      	mov	r3, r2
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	4413      	add	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	440b      	add	r3, r1
 800e150:	3304      	adds	r3, #4
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	60fb      	str	r3, [r7, #12]
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	609a      	str	r2, [r3, #8]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	689a      	ldr	r2, [r3, #8]
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	60da      	str	r2, [r3, #12]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	693a      	ldr	r2, [r7, #16]
 800e16a:	3204      	adds	r2, #4
 800e16c:	605a      	str	r2, [r3, #4]
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	1d1a      	adds	r2, r3, #4
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	609a      	str	r2, [r3, #8]
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e17a:	4613      	mov	r3, r2
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4413      	add	r3, r2
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4a10      	ldr	r2, [pc, #64]	@ (800e1c4 <xTaskPriorityDisinherit+0x10c>)
 800e184:	441a      	add	r2, r3
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	615a      	str	r2, [r3, #20]
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e18e:	490d      	ldr	r1, [pc, #52]	@ (800e1c4 <xTaskPriorityDisinherit+0x10c>)
 800e190:	4613      	mov	r3, r2
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	4413      	add	r3, r2
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	440b      	add	r3, r1
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	1c59      	adds	r1, r3, #1
 800e19e:	4809      	ldr	r0, [pc, #36]	@ (800e1c4 <xTaskPriorityDisinherit+0x10c>)
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	4413      	add	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4403      	add	r3, r0
 800e1aa:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e1b0:	697b      	ldr	r3, [r7, #20]
    }
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3718      	adds	r7, #24
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	20046788 	.word	0x20046788
 800e1c0:	20046c64 	.word	0x20046c64
 800e1c4:	2004678c 	.word	0x2004678c

0800e1c8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 8085 	beq.w	800e2ec <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d103      	bne.n	800e1f2 <vTaskPriorityDisinheritAfterTimeout+0x2a>
 800e1ea:	f000 fde5 	bl	800edb8 <ulSetInterruptMask>
 800e1ee:	bf00      	nop
 800e1f0:	e7fd      	b.n	800e1ee <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1f6:	683a      	ldr	r2, [r7, #0]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d902      	bls.n	800e202 <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	61fb      	str	r3, [r7, #28]
 800e200:	e002      	b.n	800e208 <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e206:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e20c:	69fa      	ldr	r2, [r7, #28]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d06c      	beq.n	800e2ec <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e212:	69bb      	ldr	r3, [r7, #24]
 800e214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e216:	697a      	ldr	r2, [r7, #20]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d167      	bne.n	800e2ec <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800e21c:	4b35      	ldr	r3, [pc, #212]	@ (800e2f4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	69ba      	ldr	r2, [r7, #24]
 800e222:	429a      	cmp	r2, r3
 800e224:	d103      	bne.n	800e22e <vTaskPriorityDisinheritAfterTimeout+0x66>
 800e226:	f000 fdc7 	bl	800edb8 <ulSetInterruptMask>
 800e22a:	bf00      	nop
 800e22c:	e7fd      	b.n	800e22a <vTaskPriorityDisinheritAfterTimeout+0x62>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e232:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	699b      	ldr	r3, [r3, #24]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	db04      	blt.n	800e24c <vTaskPriorityDisinheritAfterTimeout+0x84>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	6959      	ldr	r1, [r3, #20]
 800e250:	693a      	ldr	r2, [r7, #16]
 800e252:	4613      	mov	r3, r2
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	4413      	add	r3, r2
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	4a27      	ldr	r2, [pc, #156]	@ (800e2f8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e25c:	4413      	add	r3, r2
 800e25e:	4299      	cmp	r1, r3
 800e260:	d144      	bne.n	800e2ec <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	3304      	adds	r3, #4
 800e266:	4618      	mov	r0, r3
 800e268:	f7fd fffc 	bl	800c264 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e270:	4b22      	ldr	r3, [pc, #136]	@ (800e2fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	429a      	cmp	r2, r3
 800e276:	d903      	bls.n	800e280 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e27c:	4a1f      	ldr	r2, [pc, #124]	@ (800e2fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e27e:	6013      	str	r3, [r2, #0]
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e284:	491c      	ldr	r1, [pc, #112]	@ (800e2f8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e286:	4613      	mov	r3, r2
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	4413      	add	r3, r2
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	440b      	add	r3, r1
 800e290:	3304      	adds	r3, #4
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	60fb      	str	r3, [r7, #12]
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	609a      	str	r2, [r3, #8]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	689a      	ldr	r2, [r3, #8]
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	60da      	str	r2, [r3, #12]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	69ba      	ldr	r2, [r7, #24]
 800e2aa:	3204      	adds	r2, #4
 800e2ac:	605a      	str	r2, [r3, #4]
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	1d1a      	adds	r2, r3, #4
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	609a      	str	r2, [r3, #8]
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4413      	add	r3, r2
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	4a0d      	ldr	r2, [pc, #52]	@ (800e2f8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e2c4:	441a      	add	r2, r3
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	615a      	str	r2, [r3, #20]
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ce:	490a      	ldr	r1, [pc, #40]	@ (800e2f8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	4413      	add	r3, r2
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	440b      	add	r3, r1
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	1c59      	adds	r1, r3, #1
 800e2de:	4806      	ldr	r0, [pc, #24]	@ (800e2f8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4413      	add	r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4403      	add	r3, r0
 800e2ea:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800e2ec:	bf00      	nop
 800e2ee:	3720      	adds	r7, #32
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	20046788 	.word	0x20046788
 800e2f8:	2004678c 	.word	0x2004678c
 800e2fc:	20046c64 	.word	0x20046c64

0800e300 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800e300:	b480      	push	{r7}
 800e302:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800e304:	4b07      	ldr	r3, [pc, #28]	@ (800e324 <pvTaskIncrementMutexHeldCount+0x24>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d004      	beq.n	800e316 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800e30c:	4b05      	ldr	r3, [pc, #20]	@ (800e324 <pvTaskIncrementMutexHeldCount+0x24>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e312:	3201      	adds	r2, #1
 800e314:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800e316:	4b03      	ldr	r3, [pc, #12]	@ (800e324 <pvTaskIncrementMutexHeldCount+0x24>)
 800e318:	681b      	ldr	r3, [r3, #0]
    }
 800e31a:	4618      	mov	r0, r3
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr
 800e324:	20046788 	.word	0x20046788

0800e328 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800e332:	4b2e      	ldr	r3, [pc, #184]	@ (800e3ec <prvAddCurrentTaskToDelayedList+0xc4>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e338:	4b2d      	ldr	r3, [pc, #180]	@ (800e3f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	3304      	adds	r3, #4
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fd ff90 	bl	800c264 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34a:	d124      	bne.n	800e396 <prvAddCurrentTaskToDelayedList+0x6e>
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d021      	beq.n	800e396 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e352:	4b28      	ldr	r3, [pc, #160]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	613b      	str	r3, [r7, #16]
 800e358:	4b25      	ldr	r3, [pc, #148]	@ (800e3f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	693a      	ldr	r2, [r7, #16]
 800e35e:	609a      	str	r2, [r3, #8]
 800e360:	4b23      	ldr	r3, [pc, #140]	@ (800e3f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	693a      	ldr	r2, [r7, #16]
 800e366:	6892      	ldr	r2, [r2, #8]
 800e368:	60da      	str	r2, [r3, #12]
 800e36a:	4b21      	ldr	r3, [pc, #132]	@ (800e3f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	689b      	ldr	r3, [r3, #8]
 800e372:	3204      	adds	r2, #4
 800e374:	605a      	str	r2, [r3, #4]
 800e376:	4b1e      	ldr	r3, [pc, #120]	@ (800e3f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	1d1a      	adds	r2, r3, #4
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	609a      	str	r2, [r3, #8]
 800e380:	4b1b      	ldr	r3, [pc, #108]	@ (800e3f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a1b      	ldr	r2, [pc, #108]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e386:	615a      	str	r2, [r3, #20]
 800e388:	4b1a      	ldr	r3, [pc, #104]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	3301      	adds	r3, #1
 800e38e:	4a19      	ldr	r2, [pc, #100]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e390:	6013      	str	r3, [r2, #0]
 800e392:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e394:	e026      	b.n	800e3e4 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800e396:	697a      	ldr	r2, [r7, #20]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4413      	add	r3, r2
 800e39c:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e39e:	4b14      	ldr	r3, [pc, #80]	@ (800e3f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d209      	bcs.n	800e3c2 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3ae:	4b12      	ldr	r3, [pc, #72]	@ (800e3f8 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	4610      	mov	r0, r2
 800e3bc:	f7fd ff19 	bl	800c1f2 <vListInsert>
}
 800e3c0:	e010      	b.n	800e3e4 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3c2:	4b0e      	ldr	r3, [pc, #56]	@ (800e3fc <prvAddCurrentTaskToDelayedList+0xd4>)
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	4b0a      	ldr	r3, [pc, #40]	@ (800e3f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	3304      	adds	r3, #4
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	4610      	mov	r0, r2
 800e3d0:	f7fd ff0f 	bl	800c1f2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800e3d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e400 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d202      	bcs.n	800e3e4 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800e3de:	4a08      	ldr	r2, [pc, #32]	@ (800e400 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	6013      	str	r3, [r2, #0]
}
 800e3e4:	bf00      	nop
 800e3e6:	3718      	adds	r7, #24
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	20046c60 	.word	0x20046c60
 800e3f0:	20046788 	.word	0x20046788
 800e3f4:	20046c48 	.word	0x20046c48
 800e3f8:	20046c18 	.word	0x20046c18
 800e3fc:	20046c14 	.word	0x20046c14
 800e400:	20046c7c 	.word	0x20046c7c

0800e404 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800e404:	b580      	push	{r7, lr}
 800e406:	b088      	sub	sp, #32
 800e408:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800e40a:	2300      	movs	r3, #0
 800e40c:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800e40e:	f000 fa5f 	bl	800e8d0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800e412:	4b18      	ldr	r3, [pc, #96]	@ (800e474 <xTimerCreateTimerTask+0x70>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d020      	beq.n	800e45c <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800e41e:	2300      	movs	r3, #0
 800e420:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e422:	463a      	mov	r2, r7
 800e424:	1d39      	adds	r1, r7, #4
 800e426:	f107 0308 	add.w	r3, r7, #8
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7fd fe9a 	bl	800c164 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e430:	6839      	ldr	r1, [r7, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	68ba      	ldr	r2, [r7, #8]
 800e436:	9202      	str	r2, [sp, #8]
 800e438:	9301      	str	r3, [sp, #4]
 800e43a:	2302      	movs	r3, #2
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	2300      	movs	r3, #0
 800e440:	460a      	mov	r2, r1
 800e442:	490d      	ldr	r1, [pc, #52]	@ (800e478 <xTimerCreateTimerTask+0x74>)
 800e444:	480d      	ldr	r0, [pc, #52]	@ (800e47c <xTimerCreateTimerTask+0x78>)
 800e446:	f7fe fe7b 	bl	800d140 <xTaskCreateStatic>
 800e44a:	4603      	mov	r3, r0
 800e44c:	4a0c      	ldr	r2, [pc, #48]	@ (800e480 <xTimerCreateTimerTask+0x7c>)
 800e44e:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800e450:	4b0b      	ldr	r3, [pc, #44]	@ (800e480 <xTimerCreateTimerTask+0x7c>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d001      	beq.n	800e45c <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800e458:	2301      	movs	r3, #1
 800e45a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d103      	bne.n	800e46a <xTimerCreateTimerTask+0x66>
 800e462:	f000 fca9 	bl	800edb8 <ulSetInterruptMask>
 800e466:	bf00      	nop
 800e468:	e7fd      	b.n	800e466 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800e46a:	68fb      	ldr	r3, [r7, #12]
    }
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	20046cb8 	.word	0x20046cb8
 800e478:	0802dbbc 	.word	0x0802dbbc
 800e47c:	0800e529 	.word	0x0800e529
 800e480:	20046cbc 	.word	0x20046cbc

0800e484 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e490:	e008      	b.n	800e4a4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	68ba      	ldr	r2, [r7, #8]
 800e498:	4413      	add	r3, r2
 800e49a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6a1b      	ldr	r3, [r3, #32]
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	699a      	ldr	r2, [r3, #24]
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	18d1      	adds	r1, r2, r3
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f000 f8d7 	bl	800e664 <prvInsertTimerInActiveList>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1ea      	bne.n	800e492 <prvReloadTimer+0xe>
        }
    }
 800e4bc:	bf00      	nop
 800e4be:	bf00      	nop
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
	...

0800e4c8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4d2:	4b14      	ldr	r3, [pc, #80]	@ (800e524 <prvProcessExpiredTimer+0x5c>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	3304      	adds	r3, #4
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fd febf 	bl	800c264 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e4ec:	f003 0304 	and.w	r3, r3, #4
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d005      	beq.n	800e500 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800e4f4:	683a      	ldr	r2, [r7, #0]
 800e4f6:	6879      	ldr	r1, [r7, #4]
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f7ff ffc3 	bl	800e484 <prvReloadTimer>
 800e4fe:	e008      	b.n	800e512 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e506:	f023 0301 	bic.w	r3, r3, #1
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6a1b      	ldr	r3, [r3, #32]
 800e516:	68f8      	ldr	r0, [r7, #12]
 800e518:	4798      	blx	r3
    }
 800e51a:	bf00      	nop
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	20046cb0 	.word	0x20046cb0

0800e528 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e530:	f107 0308 	add.w	r3, r7, #8
 800e534:	4618      	mov	r0, r3
 800e536:	f000 f851 	bl	800e5dc <prvGetNextExpireTime>
 800e53a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	4619      	mov	r1, r3
 800e540:	68f8      	ldr	r0, [r7, #12]
 800e542:	f000 f805 	bl	800e550 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e546:	f000 f8cf 	bl	800e6e8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e54a:	bf00      	nop
 800e54c:	e7f0      	b.n	800e530 <prvTimerTask+0x8>
	...

0800e550 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e55a:	f7ff f81d 	bl	800d598 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e55e:	f107 0308 	add.w	r3, r7, #8
 800e562:	4618      	mov	r0, r3
 800e564:	f000 f85e 	bl	800e624 <prvSampleTimeNow>
 800e568:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d12a      	bne.n	800e5c6 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d10a      	bne.n	800e58c <prvProcessTimerOrBlockTask+0x3c>
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d806      	bhi.n	800e58c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800e57e:	f7ff f819 	bl	800d5b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e582:	68f9      	ldr	r1, [r7, #12]
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7ff ff9f 	bl	800e4c8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800e58a:	e01e      	b.n	800e5ca <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d008      	beq.n	800e5a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e592:	4b10      	ldr	r3, [pc, #64]	@ (800e5d4 <prvProcessTimerOrBlockTask+0x84>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d101      	bne.n	800e5a0 <prvProcessTimerOrBlockTask+0x50>
 800e59c:	2301      	movs	r3, #1
 800e59e:	e000      	b.n	800e5a2 <prvProcessTimerOrBlockTask+0x52>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e5d8 <prvProcessTimerOrBlockTask+0x88>)
 800e5a6:	6818      	ldr	r0, [r3, #0]
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	f7fe fd91 	bl	800d0d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800e5b6:	f7fe fffd 	bl	800d5b4 <xTaskResumeAll>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d104      	bne.n	800e5ca <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800e5c0:	f000 fa1e 	bl	800ea00 <vPortYield>
    }
 800e5c4:	e001      	b.n	800e5ca <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800e5c6:	f7fe fff5 	bl	800d5b4 <xTaskResumeAll>
    }
 800e5ca:	bf00      	nop
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	20046cb4 	.word	0x20046cb4
 800e5d8:	20046cb8 	.word	0x20046cb8

0800e5dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800e5dc:	b480      	push	{r7}
 800e5de:	b085      	sub	sp, #20
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5e4:	4b0e      	ldr	r3, [pc, #56]	@ (800e620 <prvGetNextExpireTime+0x44>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d101      	bne.n	800e5f2 <prvGetNextExpireTime+0x16>
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	e000      	b.n	800e5f4 <prvGetNextExpireTime+0x18>
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d105      	bne.n	800e60c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e600:	4b07      	ldr	r3, [pc, #28]	@ (800e620 <prvGetNextExpireTime+0x44>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	60fb      	str	r3, [r7, #12]
 800e60a:	e001      	b.n	800e610 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800e60c:	2300      	movs	r3, #0
 800e60e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800e610:	68fb      	ldr	r3, [r7, #12]
    }
 800e612:	4618      	mov	r0, r3
 800e614:	3714      	adds	r7, #20
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	20046cb0 	.word	0x20046cb0

0800e624 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800e62c:	f7ff f8b0 	bl	800d790 <xTaskGetTickCount>
 800e630:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800e632:	4b0b      	ldr	r3, [pc, #44]	@ (800e660 <prvSampleTimeNow+0x3c>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	68fa      	ldr	r2, [r7, #12]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d205      	bcs.n	800e648 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800e63c:	f000 f922 	bl	800e884 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2201      	movs	r2, #1
 800e644:	601a      	str	r2, [r3, #0]
 800e646:	e002      	b.n	800e64e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800e64e:	4a04      	ldr	r2, [pc, #16]	@ (800e660 <prvSampleTimeNow+0x3c>)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e654:	68fb      	ldr	r3, [r7, #12]
    }
 800e656:	4618      	mov	r0, r3
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	20046cc0 	.word	0x20046cc0

0800e664 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
 800e670:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e672:	2300      	movs	r3, #0
 800e674:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	68ba      	ldr	r2, [r7, #8]
 800e67a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	429a      	cmp	r2, r3
 800e688:	d812      	bhi.n	800e6b0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	1ad2      	subs	r2, r2, r3
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	699b      	ldr	r3, [r3, #24]
 800e694:	429a      	cmp	r2, r3
 800e696:	d302      	bcc.n	800e69e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e698:	2301      	movs	r3, #1
 800e69a:	617b      	str	r3, [r7, #20]
 800e69c:	e01b      	b.n	800e6d6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e69e:	4b10      	ldr	r3, [pc, #64]	@ (800e6e0 <prvInsertTimerInActiveList+0x7c>)
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	f7fd fda2 	bl	800c1f2 <vListInsert>
 800e6ae:	e012      	b.n	800e6d6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d206      	bcs.n	800e6c6 <prvInsertTimerInActiveList+0x62>
 800e6b8:	68ba      	ldr	r2, [r7, #8]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d302      	bcc.n	800e6c6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	617b      	str	r3, [r7, #20]
 800e6c4:	e007      	b.n	800e6d6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6c6:	4b07      	ldr	r3, [pc, #28]	@ (800e6e4 <prvInsertTimerInActiveList+0x80>)
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	3304      	adds	r3, #4
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	4610      	mov	r0, r2
 800e6d2:	f7fd fd8e 	bl	800c1f2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e6d6:	697b      	ldr	r3, [r7, #20]
    }
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3718      	adds	r7, #24
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	20046cb4 	.word	0x20046cb4
 800e6e4:	20046cb0 	.word	0x20046cb0

0800e6e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b088      	sub	sp, #32
 800e6ec:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6ee:	e0b7      	b.n	800e860 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	da11      	bge.n	800e71a <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e6f6:	1d3b      	adds	r3, r7, #4
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d103      	bne.n	800e70a <prvProcessReceivedCommands+0x22>
 800e702:	f000 fb59 	bl	800edb8 <ulSetInterruptMask>
 800e706:	bf00      	nop
 800e708:	e7fd      	b.n	800e706 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	69fa      	ldr	r2, [r7, #28]
 800e710:	6850      	ldr	r0, [r2, #4]
 800e712:	69fa      	ldr	r2, [r7, #28]
 800e714:	6892      	ldr	r2, [r2, #8]
 800e716:	4611      	mov	r1, r2
 800e718:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	f2c0 809f 	blt.w	800e860 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	695b      	ldr	r3, [r3, #20]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d004      	beq.n	800e738 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	3304      	adds	r3, #4
 800e732:	4618      	mov	r0, r3
 800e734:	f7fd fd96 	bl	800c264 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e738:	463b      	mov	r3, r7
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7ff ff72 	bl	800e624 <prvSampleTimeNow>
 800e740:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	3b01      	subs	r3, #1
 800e746:	2b08      	cmp	r3, #8
 800e748:	f200 8087 	bhi.w	800e85a <prvProcessReceivedCommands+0x172>
 800e74c:	a201      	add	r2, pc, #4	@ (adr r2, 800e754 <prvProcessReceivedCommands+0x6c>)
 800e74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e752:	bf00      	nop
 800e754:	0800e779 	.word	0x0800e779
 800e758:	0800e779 	.word	0x0800e779
 800e75c:	0800e7e1 	.word	0x0800e7e1
 800e760:	0800e7f5 	.word	0x0800e7f5
 800e764:	0800e831 	.word	0x0800e831
 800e768:	0800e779 	.word	0x0800e779
 800e76c:	0800e779 	.word	0x0800e779
 800e770:	0800e7e1 	.word	0x0800e7e1
 800e774:	0800e7f5 	.word	0x0800e7f5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e77e:	f043 0301 	orr.w	r3, r3, #1
 800e782:	b2da      	uxtb	r2, r3
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e78a:	68ba      	ldr	r2, [r7, #8]
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	699b      	ldr	r3, [r3, #24]
 800e790:	18d1      	adds	r1, r2, r3
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	697a      	ldr	r2, [r7, #20]
 800e796:	69b8      	ldr	r0, [r7, #24]
 800e798:	f7ff ff64 	bl	800e664 <prvInsertTimerInActiveList>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d05d      	beq.n	800e85e <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7a8:	f003 0304 	and.w	r3, r3, #4
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d009      	beq.n	800e7c4 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	699b      	ldr	r3, [r3, #24]
 800e7b6:	4413      	add	r3, r2
 800e7b8:	697a      	ldr	r2, [r7, #20]
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	69b8      	ldr	r0, [r7, #24]
 800e7be:	f7ff fe61 	bl	800e484 <prvReloadTimer>
 800e7c2:	e008      	b.n	800e7d6 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7ca:	f023 0301 	bic.w	r3, r3, #1
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	69b8      	ldr	r0, [r7, #24]
 800e7dc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800e7de:	e03e      	b.n	800e85e <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7e6:	f023 0301 	bic.w	r3, r3, #1
 800e7ea:	b2da      	uxtb	r2, r3
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e7f2:	e035      	b.n	800e860 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7fa:	f043 0301 	orr.w	r3, r3, #1
 800e7fe:	b2da      	uxtb	r2, r3
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e806:	68ba      	ldr	r2, [r7, #8]
 800e808:	69bb      	ldr	r3, [r7, #24]
 800e80a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	699b      	ldr	r3, [r3, #24]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d103      	bne.n	800e81c <prvProcessReceivedCommands+0x134>
 800e814:	f000 fad0 	bl	800edb8 <ulSetInterruptMask>
 800e818:	bf00      	nop
 800e81a:	e7fd      	b.n	800e818 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	699a      	ldr	r2, [r3, #24]
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	18d1      	adds	r1, r2, r3
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	697a      	ldr	r2, [r7, #20]
 800e828:	69b8      	ldr	r0, [r7, #24]
 800e82a:	f7ff ff1b 	bl	800e664 <prvInsertTimerInActiveList>
                        break;
 800e82e:	e017      	b.n	800e860 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e836:	f003 0302 	and.w	r3, r3, #2
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d103      	bne.n	800e846 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800e83e:	69b8      	ldr	r0, [r7, #24]
 800e840:	f000 fbde 	bl	800f000 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e844:	e00c      	b.n	800e860 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e84c:	f023 0301 	bic.w	r3, r3, #1
 800e850:	b2da      	uxtb	r2, r3
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e858:	e002      	b.n	800e860 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e85a:	bf00      	nop
 800e85c:	e000      	b.n	800e860 <prvProcessReceivedCommands+0x178>
                        break;
 800e85e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e860:	4b07      	ldr	r3, [pc, #28]	@ (800e880 <prvProcessReceivedCommands+0x198>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	1d39      	adds	r1, r7, #4
 800e866:	2200      	movs	r2, #0
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fe f872 	bl	800c952 <xQueueReceive>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	f47f af3d 	bne.w	800e6f0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800e876:	bf00      	nop
 800e878:	bf00      	nop
 800e87a:	3720      	adds	r7, #32
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	20046cb8 	.word	0x20046cb8

0800e884 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e88a:	e009      	b.n	800e8a0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e88c:	4b0e      	ldr	r3, [pc, #56]	@ (800e8c8 <prvSwitchTimerLists+0x44>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800e896:	f04f 31ff 	mov.w	r1, #4294967295
 800e89a:	6838      	ldr	r0, [r7, #0]
 800e89c:	f7ff fe14 	bl	800e4c8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8a0:	4b09      	ldr	r3, [pc, #36]	@ (800e8c8 <prvSwitchTimerLists+0x44>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1f0      	bne.n	800e88c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800e8aa:	4b07      	ldr	r3, [pc, #28]	@ (800e8c8 <prvSwitchTimerLists+0x44>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800e8b0:	4b06      	ldr	r3, [pc, #24]	@ (800e8cc <prvSwitchTimerLists+0x48>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a04      	ldr	r2, [pc, #16]	@ (800e8c8 <prvSwitchTimerLists+0x44>)
 800e8b6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800e8b8:	4a04      	ldr	r2, [pc, #16]	@ (800e8cc <prvSwitchTimerLists+0x48>)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6013      	str	r3, [r2, #0]
    }
 800e8be:	bf00      	nop
 800e8c0:	3708      	adds	r7, #8
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	20046cb0 	.word	0x20046cb0
 800e8cc:	20046cb4 	.word	0x20046cb4

0800e8d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800e8d6:	f000 f8a5 	bl	800ea24 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800e8da:	4b15      	ldr	r3, [pc, #84]	@ (800e930 <prvCheckForValidListAndQueue+0x60>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d120      	bne.n	800e924 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800e8e2:	4814      	ldr	r0, [pc, #80]	@ (800e934 <prvCheckForValidListAndQueue+0x64>)
 800e8e4:	f7fd fc58 	bl	800c198 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800e8e8:	4813      	ldr	r0, [pc, #76]	@ (800e938 <prvCheckForValidListAndQueue+0x68>)
 800e8ea:	f7fd fc55 	bl	800c198 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800e8ee:	4b13      	ldr	r3, [pc, #76]	@ (800e93c <prvCheckForValidListAndQueue+0x6c>)
 800e8f0:	4a10      	ldr	r2, [pc, #64]	@ (800e934 <prvCheckForValidListAndQueue+0x64>)
 800e8f2:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800e8f4:	4b12      	ldr	r3, [pc, #72]	@ (800e940 <prvCheckForValidListAndQueue+0x70>)
 800e8f6:	4a10      	ldr	r2, [pc, #64]	@ (800e938 <prvCheckForValidListAndQueue+0x68>)
 800e8f8:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	9300      	str	r3, [sp, #0]
 800e8fe:	4b11      	ldr	r3, [pc, #68]	@ (800e944 <prvCheckForValidListAndQueue+0x74>)
 800e900:	4a11      	ldr	r2, [pc, #68]	@ (800e948 <prvCheckForValidListAndQueue+0x78>)
 800e902:	2110      	movs	r1, #16
 800e904:	200a      	movs	r0, #10
 800e906:	f7fd fd50 	bl	800c3aa <xQueueGenericCreateStatic>
 800e90a:	4603      	mov	r3, r0
 800e90c:	4a08      	ldr	r2, [pc, #32]	@ (800e930 <prvCheckForValidListAndQueue+0x60>)
 800e90e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800e910:	4b07      	ldr	r3, [pc, #28]	@ (800e930 <prvCheckForValidListAndQueue+0x60>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d005      	beq.n	800e924 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e918:	4b05      	ldr	r3, [pc, #20]	@ (800e930 <prvCheckForValidListAndQueue+0x60>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	490b      	ldr	r1, [pc, #44]	@ (800e94c <prvCheckForValidListAndQueue+0x7c>)
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe fb64 	bl	800cfec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e924:	f000 f890 	bl	800ea48 <vPortExitCritical>
    }
 800e928:	bf00      	nop
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	20046cb8 	.word	0x20046cb8
 800e934:	20046c88 	.word	0x20046c88
 800e938:	20046c9c 	.word	0x20046c9c
 800e93c:	20046cb0 	.word	0x20046cb0
 800e940:	20046cb4 	.word	0x20046cb4
 800e944:	20046d64 	.word	0x20046d64
 800e948:	20046cc4 	.word	0x20046cc4
 800e94c:	0802dbc4 	.word	0x0802dbc4

0800e950 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800e950:	b480      	push	{r7}
 800e952:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e954:	4b0b      	ldr	r3, [pc, #44]	@ (800e984 <vPortSetupTimerInterrupt+0x34>)
 800e956:	2200      	movs	r2, #0
 800e958:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e95a:	4b0b      	ldr	r3, [pc, #44]	@ (800e988 <vPortSetupTimerInterrupt+0x38>)
 800e95c:	2200      	movs	r2, #0
 800e95e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e960:	4b0a      	ldr	r3, [pc, #40]	@ (800e98c <vPortSetupTimerInterrupt+0x3c>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a0a      	ldr	r2, [pc, #40]	@ (800e990 <vPortSetupTimerInterrupt+0x40>)
 800e966:	fba2 2303 	umull	r2, r3, r2, r3
 800e96a:	099b      	lsrs	r3, r3, #6
 800e96c:	4a09      	ldr	r2, [pc, #36]	@ (800e994 <vPortSetupTimerInterrupt+0x44>)
 800e96e:	3b01      	subs	r3, #1
 800e970:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800e972:	4b04      	ldr	r3, [pc, #16]	@ (800e984 <vPortSetupTimerInterrupt+0x34>)
 800e974:	2207      	movs	r2, #7
 800e976:	601a      	str	r2, [r3, #0]
}
 800e978:	bf00      	nop
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr
 800e982:	bf00      	nop
 800e984:	e000e010 	.word	0xe000e010
 800e988:	e000e018 	.word	0xe000e018
 800e98c:	20000004 	.word	0x20000004
 800e990:	10624dd3 	.word	0x10624dd3
 800e994:	e000e014 	.word	0xe000e014

0800e998 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800e9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800e9cc <prvTaskExitError+0x34>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9aa:	d003      	beq.n	800e9b4 <prvTaskExitError+0x1c>
 800e9ac:	f000 fa04 	bl	800edb8 <ulSetInterruptMask>
 800e9b0:	bf00      	nop
 800e9b2:	e7fd      	b.n	800e9b0 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800e9b4:	f000 fa00 	bl	800edb8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800e9b8:	bf00      	nop
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d0fc      	beq.n	800e9ba <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800e9c0:	bf00      	nop
 800e9c2:	bf00      	nop
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20000010 	.word	0x20000010

0800e9d0 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if ( configENABLE_FPU == 1 )
    static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
    {
 800e9d0:	b480      	push	{r7}
 800e9d2:	af00      	add	r7, sp, #0
        #endif /* configENABLE_TRUSTZONE */

        /* CP10 = 11 ==> Full access to FPU i.e. both privileged and
         * unprivileged code should be able to access FPU. CP11 should be
         * programmed to the same value as CP10. */
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800e9d4:	4b08      	ldr	r3, [pc, #32]	@ (800e9f8 <prvSetupFPU+0x28>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a07      	ldr	r2, [pc, #28]	@ (800e9f8 <prvSetupFPU+0x28>)
 800e9da:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e9de:	6013      	str	r3, [r2, #0]
                            );

        /* ASPEN = 1 ==> Hardware should automatically preserve floating point
         * context on exception entry and restore on exception return.
         * LSPEN = 1 ==> Enable lazy context save of FP state. */
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800e9e0:	4b06      	ldr	r3, [pc, #24]	@ (800e9fc <prvSetupFPU+0x2c>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a05      	ldr	r2, [pc, #20]	@ (800e9fc <prvSetupFPU+0x2c>)
 800e9e6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e9ea:	6013      	str	r3, [r2, #0]
    }
 800e9ec:	bf00      	nop
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr
 800e9f6:	bf00      	nop
 800e9f8:	e000ed88 	.word	0xe000ed88
 800e9fc:	e000ef34 	.word	0xe000ef34

0800ea00 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800ea00:	b480      	push	{r7}
 800ea02:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea04:	4b06      	ldr	r3, [pc, #24]	@ (800ea20 <vPortYield+0x20>)
 800ea06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea0a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ea0c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ea10:	f3bf 8f6f 	isb	sy
}
 800ea14:	bf00      	nop
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop
 800ea20:	e000ed04 	.word	0xe000ed04

0800ea24 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800ea28:	f000 f9c6 	bl	800edb8 <ulSetInterruptMask>
    ulCriticalNesting++;
 800ea2c:	4b05      	ldr	r3, [pc, #20]	@ (800ea44 <vPortEnterCritical+0x20>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	3301      	adds	r3, #1
 800ea32:	4a04      	ldr	r2, [pc, #16]	@ (800ea44 <vPortEnterCritical+0x20>)
 800ea34:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ea36:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ea3a:	f3bf 8f6f 	isb	sy
}
 800ea3e:	bf00      	nop
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20000010 	.word	0x20000010

0800ea48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800ea4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea78 <vPortExitCritical+0x30>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d103      	bne.n	800ea5c <vPortExitCritical+0x14>
 800ea54:	f000 f9b0 	bl	800edb8 <ulSetInterruptMask>
 800ea58:	bf00      	nop
 800ea5a:	e7fd      	b.n	800ea58 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800ea5c:	4b06      	ldr	r3, [pc, #24]	@ (800ea78 <vPortExitCritical+0x30>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	3b01      	subs	r3, #1
 800ea62:	4a05      	ldr	r2, [pc, #20]	@ (800ea78 <vPortExitCritical+0x30>)
 800ea64:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800ea66:	4b04      	ldr	r3, [pc, #16]	@ (800ea78 <vPortExitCritical+0x30>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d102      	bne.n	800ea74 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800ea6e:	2000      	movs	r0, #0
 800ea70:	f000 f9af 	bl	800edd2 <vClearInterruptMask>
    }
}
 800ea74:	bf00      	nop
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	20000010 	.word	0x20000010

0800ea7c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea82:	f000 f999 	bl	800edb8 <ulSetInterruptMask>
 800ea86:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800ea88:	f7fe fe9e 	bl	800d7c8 <xTaskIncrementTick>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d003      	beq.n	800ea9a <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea92:	4b05      	ldr	r3, [pc, #20]	@ (800eaa8 <xPortSysTickHandler+0x2c>)
 800ea94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea98:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f999 	bl	800edd2 <vClearInterruptMask>
}
 800eaa0:	bf00      	nop
 800eaa2:	3708      	adds	r7, #8
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	e000ed04 	.word	0xe000ed04

0800eaac <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	699b      	ldr	r3, [r3, #24]
 800eab8:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	3b02      	subs	r3, #2
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800eac2:	7afb      	ldrb	r3, [r7, #11]
 800eac4:	2b66      	cmp	r3, #102	@ 0x66
 800eac6:	d104      	bne.n	800ead2 <vPortSVCHandler_C+0x26>
            #endif /* configENABLE_TRUSTZONE */

            #if ( configENABLE_FPU == 1 )
            {
                /* Setup the Floating Point Unit (FPU). */
                prvSetupFPU();
 800eac8:	f7ff ff82 	bl	800e9d0 <prvSetupFPU>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800eacc:	f000 f940 	bl	800ed50 <vRestoreContextOfFirstTask>
            break;
 800ead0:	e003      	b.n	800eada <vPortSVCHandler_C+0x2e>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800ead2:	f000 f971 	bl	800edb8 <ulSetInterruptMask>
 800ead6:	bf00      	nop
 800ead8:	e7fd      	b.n	800ead6 <vPortSVCHandler_C+0x2a>
    }
}
 800eada:	bf00      	nop
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
	...

0800eae4 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800eae4:	b480      	push	{r7}
 800eae6:	b085      	sub	sp, #20
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	607a      	str	r2, [r7, #4]
 800eaf0:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	3b04      	subs	r3, #4
 800eaf6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800eafe:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	3b04      	subs	r3, #4
 800eb04:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3b04      	subs	r3, #4
 800eb10:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 800eb12:	4a38      	ldr	r2, [pc, #224]	@ (800ebf4 <pxPortInitialiseStack+0x110>)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	3b04      	subs	r3, #4
 800eb1c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800eb24:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	3b04      	subs	r3, #4
 800eb2a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800eb32:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	3b04      	subs	r3, #4
 800eb38:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800eb40:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	3b04      	subs	r3, #4
 800eb46:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800eb4e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	3b04      	subs	r3, #4
 800eb54:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	3b04      	subs	r3, #4
 800eb60:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800eb68:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	3b04      	subs	r3, #4
 800eb6e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800eb76:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	3b04      	subs	r3, #4
 800eb7c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800eb84:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	3b04      	subs	r3, #4
 800eb8a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800eb92:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	3b04      	subs	r3, #4
 800eb98:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800eba0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3b04      	subs	r3, #4
 800eba6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800ebae:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3b04      	subs	r3, #4
 800ebb4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800ebbc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3b04      	subs	r3, #4
 800ebc2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800ebca:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	3b04      	subs	r3, #4
 800ebd0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800ebd8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	3b04      	subs	r3, #4
 800ebde:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800ebe0:	68ba      	ldr	r2, [r7, #8]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
    }
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3714      	adds	r7, #20
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	0800e999 	.word	0x0800e999

0800ebf8 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 800ec02:	4b35      	ldr	r3, [pc, #212]	@ (800ecd8 <xPortStartScheduler+0xe0>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 800ec08:	4b33      	ldr	r3, [pc, #204]	@ (800ecd8 <xPortStartScheduler+0xe0>)
 800ec0a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800ec0e:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800ec10:	4b31      	ldr	r3, [pc, #196]	@ (800ecd8 <xPortStartScheduler+0xe0>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	0e1b      	lsrs	r3, r3, #24
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec1a:	79fb      	ldrb	r3, [r7, #7]
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ec22:	b2da      	uxtb	r2, r3
 800ec24:	4b2d      	ldr	r3, [pc, #180]	@ (800ecdc <xPortStartScheduler+0xe4>)
 800ec26:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800ec28:	4b2c      	ldr	r3, [pc, #176]	@ (800ecdc <xPortStartScheduler+0xe4>)
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d103      	bne.n	800ec38 <xPortStartScheduler+0x40>
 800ec30:	f000 f8c2 	bl	800edb8 <ulSetInterruptMask>
 800ec34:	bf00      	nop
 800ec36:	e7fd      	b.n	800ec34 <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800ec38:	79fb      	ldrb	r3, [r7, #7]
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	43db      	mvns	r3, r3
 800ec3e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d00b      	beq.n	800ec5e <xPortStartScheduler+0x66>
 800ec46:	f000 f8b7 	bl	800edb8 <ulSetInterruptMask>
 800ec4a:	bf00      	nop
 800ec4c:	e7fd      	b.n	800ec4a <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	3301      	adds	r3, #1
 800ec52:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ec54:	79fb      	ldrb	r3, [r7, #7]
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	005b      	lsls	r3, r3, #1
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec5e:	79fb      	ldrb	r3, [r7, #7]
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec66:	2b80      	cmp	r3, #128	@ 0x80
 800ec68:	d0f1      	beq.n	800ec4e <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	2b08      	cmp	r3, #8
 800ec6e:	d103      	bne.n	800ec78 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800ec70:	4b1b      	ldr	r3, [pc, #108]	@ (800ece0 <xPortStartScheduler+0xe8>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	601a      	str	r2, [r3, #0]
 800ec76:	e004      	b.n	800ec82 <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	f1c3 0307 	rsb	r3, r3, #7
 800ec7e:	4a18      	ldr	r2, [pc, #96]	@ (800ece0 <xPortStartScheduler+0xe8>)
 800ec80:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ec82:	4b17      	ldr	r3, [pc, #92]	@ (800ece0 <xPortStartScheduler+0xe8>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	021b      	lsls	r3, r3, #8
 800ec88:	4a15      	ldr	r2, [pc, #84]	@ (800ece0 <xPortStartScheduler+0xe8>)
 800ec8a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ec8c:	4b14      	ldr	r3, [pc, #80]	@ (800ece0 <xPortStartScheduler+0xe8>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ec94:	4a12      	ldr	r2, [pc, #72]	@ (800ece0 <xPortStartScheduler+0xe8>)
 800ec96:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 800ec98:	4a0f      	ldr	r2, [pc, #60]	@ (800ecd8 <xPortStartScheduler+0xe0>)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800ec9e:	4b11      	ldr	r3, [pc, #68]	@ (800ece4 <xPortStartScheduler+0xec>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a10      	ldr	r2, [pc, #64]	@ (800ece4 <xPortStartScheduler+0xec>)
 800eca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eca8:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800ecaa:	4b0e      	ldr	r3, [pc, #56]	@ (800ece4 <xPortStartScheduler+0xec>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4a0d      	ldr	r2, [pc, #52]	@ (800ece4 <xPortStartScheduler+0xec>)
 800ecb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ecb4:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800ecb6:	f7ff fe4b 	bl	800e950 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800ecba:	4b0b      	ldr	r3, [pc, #44]	@ (800ece8 <xPortStartScheduler+0xf0>)
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 800ecc0:	f000 f866 	bl	800ed90 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800ecc4:	f7fe fe90 	bl	800d9e8 <vTaskSwitchContext>
    prvTaskExitError();
 800ecc8:	f7ff fe66 	bl	800e998 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	e000ed1c 	.word	0xe000ed1c
 800ecdc:	20046db4 	.word	0x20046db4
 800ece0:	20046db8 	.word	0x20046db8
 800ece4:	e000ed20 	.word	0xe000ed20
 800ece8:	20000010 	.word	0x20000010

0800ecec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )

    void vPortValidateInterruptPriority( void )
    {
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800ecf2:	f3ef 8305 	mrs	r3, IPSR
 800ecf6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b0f      	cmp	r3, #15
 800ecfc:	d90d      	bls.n	800ed1a <vPortValidateInterruptPriority+0x2e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ecfe:	4a0f      	ldr	r2, [pc, #60]	@ (800ed3c <vPortValidateInterruptPriority+0x50>)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	4413      	add	r3, r2
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ed08:	4b0d      	ldr	r3, [pc, #52]	@ (800ed40 <vPortValidateInterruptPriority+0x54>)
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	78fa      	ldrb	r2, [r7, #3]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d203      	bcs.n	800ed1a <vPortValidateInterruptPriority+0x2e>
 800ed12:	f000 f851 	bl	800edb8 <ulSetInterruptMask>
 800ed16:	bf00      	nop
 800ed18:	e7fd      	b.n	800ed16 <vPortValidateInterruptPriority+0x2a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ed1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ed44 <vPortValidateInterruptPriority+0x58>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ed22:	4b09      	ldr	r3, [pc, #36]	@ (800ed48 <vPortValidateInterruptPriority+0x5c>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d903      	bls.n	800ed32 <vPortValidateInterruptPriority+0x46>
 800ed2a:	f000 f845 	bl	800edb8 <ulSetInterruptMask>
 800ed2e:	bf00      	nop
 800ed30:	e7fd      	b.n	800ed2e <vPortValidateInterruptPriority+0x42>
    }
 800ed32:	bf00      	nop
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	e000e3f0 	.word	0xe000e3f0
 800ed40:	20046db4 	.word	0x20046db4
 800ed44:	e000ed0c 	.word	0xe000ed0c
 800ed48:	20046db8 	.word	0x20046db8
 800ed4c:	00000000 	.word	0x00000000

0800ed50 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800ed50:	4a0b      	ldr	r2, [pc, #44]	@ (800ed80 <pxCurrentTCBConst2>)
 800ed52:	6811      	ldr	r1, [r2, #0]
 800ed54:	6808      	ldr	r0, [r1, #0]
 800ed56:	c806      	ldmia	r0!, {r1, r2}
 800ed58:	f381 880b 	msr	PSPLIM, r1
 800ed5c:	2102      	movs	r1, #2
 800ed5e:	f381 8814 	msr	CONTROL, r1
 800ed62:	3020      	adds	r0, #32
 800ed64:	f380 8809 	msr	PSP, r0
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f04f 0000 	mov.w	r0, #0
 800ed70:	f380 8811 	msr	BASEPRI, r0
 800ed74:	4710      	bx	r2
 800ed76:	bf00      	nop
 800ed78:	f3af 8000 	nop.w
 800ed7c:	f3af 8000 	nop.w

0800ed80 <pxCurrentTCBConst2>:
 800ed80:	20046788 	.word	0x20046788
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 800ed84:	bf00      	nop
 800ed86:	bf00      	nop
	...

0800ed90 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ed90:	4807      	ldr	r0, [pc, #28]	@ (800edb0 <xVTORConst>)
 800ed92:	6800      	ldr	r0, [r0, #0]
 800ed94:	6800      	ldr	r0, [r0, #0]
 800ed96:	f380 8808 	msr	MSP, r0
 800ed9a:	b662      	cpsie	i
 800ed9c:	b661      	cpsie	f
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	f3bf 8f6f 	isb	sy
 800eda6:	df66      	svc	102	@ 0x66
 800eda8:	bf00      	nop
 800edaa:	bf00      	nop
 800edac:	f3af 8000 	nop.w

0800edb0 <xVTORConst>:
 800edb0:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800edb4:	bf00      	nop
 800edb6:	bf00      	nop

0800edb8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800edb8:	f3ef 8011 	mrs	r0, BASEPRI
 800edbc:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800edc0:	f381 8811 	msr	BASEPRI, r1
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800edce:	bf00      	nop
 800edd0:	4618      	mov	r0, r3

0800edd2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800edd2:	f380 8811 	msr	BASEPRI, r0
 800edd6:	f3bf 8f4f 	dsb	sy
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 800ede0:	bf00      	nop
	...

0800edf0 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800edf0:	f3ef 8009 	mrs	r0, PSP
 800edf4:	f01e 0f10 	tst.w	lr, #16
 800edf8:	bf08      	it	eq
 800edfa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800edfe:	f3ef 820b 	mrs	r2, PSPLIM
 800ee02:	4673      	mov	r3, lr
 800ee04:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ee08:	4a11      	ldr	r2, [pc, #68]	@ (800ee50 <pxCurrentTCBConst>)
 800ee0a:	6811      	ldr	r1, [r2, #0]
 800ee0c:	6008      	str	r0, [r1, #0]
 800ee0e:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ee12:	f380 8811 	msr	BASEPRI, r0
 800ee16:	f3bf 8f4f 	dsb	sy
 800ee1a:	f3bf 8f6f 	isb	sy
 800ee1e:	f7fe fde3 	bl	800d9e8 <vTaskSwitchContext>
 800ee22:	f04f 0000 	mov.w	r0, #0
 800ee26:	f380 8811 	msr	BASEPRI, r0
 800ee2a:	4a09      	ldr	r2, [pc, #36]	@ (800ee50 <pxCurrentTCBConst>)
 800ee2c:	6811      	ldr	r1, [r2, #0]
 800ee2e:	6808      	ldr	r0, [r1, #0]
 800ee30:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ee34:	f013 0f10 	tst.w	r3, #16
 800ee38:	bf08      	it	eq
 800ee3a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ee3e:	f382 880b 	msr	PSPLIM, r2
 800ee42:	f380 8809 	msr	PSP, r0
 800ee46:	4718      	bx	r3
 800ee48:	f3af 8000 	nop.w
 800ee4c:	f3af 8000 	nop.w

0800ee50 <pxCurrentTCBConst>:
 800ee50:	20046788 	.word	0x20046788
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800ee54:	bf00      	nop
 800ee56:	bf00      	nop
	...

0800ee60 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800ee60:	f01e 0f04 	tst.w	lr, #4
 800ee64:	bf0c      	ite	eq
 800ee66:	f3ef 8008 	mrseq	r0, MSP
 800ee6a:	f3ef 8009 	mrsne	r0, PSP
 800ee6e:	4904      	ldr	r1, [pc, #16]	@ (800ee80 <svchandler_address_const>)
 800ee70:	4708      	bx	r1
 800ee72:	bf00      	nop
 800ee74:	f3af 8000 	nop.w
 800ee78:	f3af 8000 	nop.w
 800ee7c:	f3af 8000 	nop.w

0800ee80 <svchandler_address_const>:
 800ee80:	0800eaad 	.word	0x0800eaad
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 800ee84:	bf00      	nop
 800ee86:	bf00      	nop

0800ee88 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b088      	sub	sp, #32
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800ee90:	2300      	movs	r3, #0
 800ee92:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800ee94:	f7fe fb80 	bl	800d598 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800ee98:	4b54      	ldr	r3, [pc, #336]	@ (800efec <pvPortMalloc+0x164>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d101      	bne.n	800eea4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800eea0:	f000 f8f8 	bl	800f094 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d022      	beq.n	800eef0 <pvPortMalloc+0x68>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800eeaa:	2308      	movs	r3, #8
 800eeac:	43db      	mvns	r3, r3
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d81b      	bhi.n	800eeec <pvPortMalloc+0x64>
            {
                xWantedSize += xHeapStructSize;
 800eeb4:	2208      	movs	r2, #8
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	4413      	add	r3, r2
 800eeba:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f003 0307 	and.w	r3, r3, #7
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d014      	beq.n	800eef0 <pvPortMalloc+0x68>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f003 0307 	and.w	r3, r3, #7
 800eecc:	f1c3 0308 	rsb	r3, r3, #8
 800eed0:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	43db      	mvns	r3, r3
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d804      	bhi.n	800eee6 <pvPortMalloc+0x5e>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	4413      	add	r3, r2
 800eee2:	607b      	str	r3, [r7, #4]
 800eee4:	e004      	b.n	800eef0 <pvPortMalloc+0x68>
                    }
                    else
                    {
                        xWantedSize = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	607b      	str	r3, [r7, #4]
 800eeea:	e001      	b.n	800eef0 <pvPortMalloc+0x68>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800eeec:	2300      	movs	r3, #0
 800eeee:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	db69      	blt.n	800efca <pvPortMalloc+0x142>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d066      	beq.n	800efca <pvPortMalloc+0x142>
 800eefc:	4b3c      	ldr	r3, [pc, #240]	@ (800eff0 <pvPortMalloc+0x168>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d861      	bhi.n	800efca <pvPortMalloc+0x142>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ef06:	4b3b      	ldr	r3, [pc, #236]	@ (800eff4 <pvPortMalloc+0x16c>)
 800ef08:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800ef0a:	4b3a      	ldr	r3, [pc, #232]	@ (800eff4 <pvPortMalloc+0x16c>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef10:	e004      	b.n	800ef1c <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d903      	bls.n	800ef2e <pvPortMalloc+0xa6>
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1f1      	bne.n	800ef12 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ef2e:	4b2f      	ldr	r3, [pc, #188]	@ (800efec <pvPortMalloc+0x164>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	69fa      	ldr	r2, [r7, #28]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d048      	beq.n	800efca <pvPortMalloc+0x142>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2208      	movs	r2, #8
 800ef3e:	4413      	add	r3, r2
 800ef40:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	1ad2      	subs	r2, r2, r3
 800ef52:	2308      	movs	r3, #8
 800ef54:	005b      	lsls	r3, r3, #1
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d918      	bls.n	800ef8c <pvPortMalloc+0x104>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef5a:	69fa      	ldr	r2, [r7, #28]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	4413      	add	r3, r2
 800ef60:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f003 0307 	and.w	r3, r3, #7
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d003      	beq.n	800ef74 <pvPortMalloc+0xec>
 800ef6c:	f7ff ff24 	bl	800edb8 <ulSetInterruptMask>
 800ef70:	bf00      	nop
 800ef72:	e7fd      	b.n	800ef70 <pvPortMalloc+0xe8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	685a      	ldr	r2, [r3, #4]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	1ad2      	subs	r2, r2, r3
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f000 f8e2 	bl	800f150 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef8c:	4b18      	ldr	r3, [pc, #96]	@ (800eff0 <pvPortMalloc+0x168>)
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	1ad3      	subs	r3, r2, r3
 800ef96:	4a16      	ldr	r2, [pc, #88]	@ (800eff0 <pvPortMalloc+0x168>)
 800ef98:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef9a:	4b15      	ldr	r3, [pc, #84]	@ (800eff0 <pvPortMalloc+0x168>)
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	4b16      	ldr	r3, [pc, #88]	@ (800eff8 <pvPortMalloc+0x170>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d203      	bcs.n	800efae <pvPortMalloc+0x126>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800efa6:	4b12      	ldr	r3, [pc, #72]	@ (800eff0 <pvPortMalloc+0x168>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4a13      	ldr	r2, [pc, #76]	@ (800eff8 <pvPortMalloc+0x170>)
 800efac:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	2200      	movs	r2, #0
 800efbe:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800efc0:	4b0e      	ldr	r3, [pc, #56]	@ (800effc <pvPortMalloc+0x174>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	3301      	adds	r3, #1
 800efc6:	4a0d      	ldr	r2, [pc, #52]	@ (800effc <pvPortMalloc+0x174>)
 800efc8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800efca:	f7fe faf3 	bl	800d5b4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	f003 0307 	and.w	r3, r3, #7
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d003      	beq.n	800efe0 <pvPortMalloc+0x158>
 800efd8:	f7ff feee 	bl	800edb8 <ulSetInterruptMask>
 800efdc:	bf00      	nop
 800efde:	e7fd      	b.n	800efdc <pvPortMalloc+0x154>
    return pvReturn;
 800efe0:	697b      	ldr	r3, [r7, #20]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3720      	adds	r7, #32
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	2005a644 	.word	0x2005a644
 800eff0:	2005a648 	.word	0x2005a648
 800eff4:	2005a63c 	.word	0x2005a63c
 800eff8:	2005a64c 	.word	0x2005a64c
 800effc:	2005a650 	.word	0x2005a650

0800f000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d037      	beq.n	800f082 <vPortFree+0x82>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800f012:	2308      	movs	r3, #8
 800f014:	425b      	negs	r3, r3
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	4413      	add	r3, r2
 800f01a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	2b00      	cmp	r3, #0
 800f026:	db03      	blt.n	800f030 <vPortFree+0x30>
 800f028:	f7ff fec6 	bl	800edb8 <ulSetInterruptMask>
 800f02c:	bf00      	nop
 800f02e:	e7fd      	b.n	800f02c <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d003      	beq.n	800f040 <vPortFree+0x40>
 800f038:	f7ff febe 	bl	800edb8 <ulSetInterruptMask>
 800f03c:	bf00      	nop
 800f03e:	e7fd      	b.n	800f03c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	da1c      	bge.n	800f082 <vPortFree+0x82>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d118      	bne.n	800f082 <vPortFree+0x82>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800f05c:	f7fe fa9c 	bl	800d598 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	685a      	ldr	r2, [r3, #4]
 800f064:	4b09      	ldr	r3, [pc, #36]	@ (800f08c <vPortFree+0x8c>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4413      	add	r3, r2
 800f06a:	4a08      	ldr	r2, [pc, #32]	@ (800f08c <vPortFree+0x8c>)
 800f06c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f06e:	68b8      	ldr	r0, [r7, #8]
 800f070:	f000 f86e 	bl	800f150 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800f074:	4b06      	ldr	r3, [pc, #24]	@ (800f090 <vPortFree+0x90>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	3301      	adds	r3, #1
 800f07a:	4a05      	ldr	r2, [pc, #20]	@ (800f090 <vPortFree+0x90>)
 800f07c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800f07e:	f7fe fa99 	bl	800d5b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800f082:	bf00      	nop
 800f084:	3710      	adds	r7, #16
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	2005a648 	.word	0x2005a648
 800f090:	2005a654 	.word	0x2005a654

0800f094 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f09a:	4b27      	ldr	r3, [pc, #156]	@ (800f138 <prvHeapInit+0xa4>)
 800f09c:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800f09e:	4b27      	ldr	r3, [pc, #156]	@ (800f13c <prvHeapInit+0xa8>)
 800f0a0:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f003 0307 	and.w	r3, r3, #7
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00c      	beq.n	800f0c6 <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	3307      	adds	r3, #7
 800f0b0:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f023 0307 	bic.w	r3, r3, #7
 800f0b8:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	1ad3      	subs	r3, r2, r3
 800f0c0:	4a1e      	ldr	r2, [pc, #120]	@ (800f13c <prvHeapInit+0xa8>)
 800f0c2:	4413      	add	r3, r2
 800f0c4:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0ca:	4a1d      	ldr	r2, [pc, #116]	@ (800f140 <prvHeapInit+0xac>)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800f0d0:	4b1b      	ldr	r3, [pc, #108]	@ (800f140 <prvHeapInit+0xac>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	4413      	add	r3, r2
 800f0dc:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800f0de:	2208      	movs	r2, #8
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	1a9b      	subs	r3, r3, r2
 800f0e4:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f023 0307 	bic.w	r3, r3, #7
 800f0ec:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	4a14      	ldr	r2, [pc, #80]	@ (800f144 <prvHeapInit+0xb0>)
 800f0f2:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800f0f4:	4b13      	ldr	r3, [pc, #76]	@ (800f144 <prvHeapInit+0xb0>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800f0fc:	4b11      	ldr	r3, [pc, #68]	@ (800f144 <prvHeapInit+0xb0>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2200      	movs	r2, #0
 800f102:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	68fa      	ldr	r2, [r7, #12]
 800f10c:	1ad2      	subs	r2, r2, r3
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f112:	4b0c      	ldr	r3, [pc, #48]	@ (800f144 <prvHeapInit+0xb0>)
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	4a0a      	ldr	r2, [pc, #40]	@ (800f148 <prvHeapInit+0xb4>)
 800f120:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	4a09      	ldr	r2, [pc, #36]	@ (800f14c <prvHeapInit+0xb8>)
 800f128:	6013      	str	r3, [r2, #0]
}
 800f12a:	bf00      	nop
 800f12c:	3714      	adds	r7, #20
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop
 800f138:	00013880 	.word	0x00013880
 800f13c:	20046dbc 	.word	0x20046dbc
 800f140:	2005a63c 	.word	0x2005a63c
 800f144:	2005a644 	.word	0x2005a644
 800f148:	2005a64c 	.word	0x2005a64c
 800f14c:	2005a648 	.word	0x2005a648

0800f150 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800f150:	b480      	push	{r7}
 800f152:	b085      	sub	sp, #20
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f158:	4b28      	ldr	r3, [pc, #160]	@ (800f1fc <prvInsertBlockIntoFreeList+0xac>)
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	e002      	b.n	800f164 <prvInsertBlockIntoFreeList+0x14>
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	60fb      	str	r3, [r7, #12]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d8f7      	bhi.n	800f15e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	68ba      	ldr	r2, [r7, #8]
 800f178:	4413      	add	r3, r2
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d108      	bne.n	800f192 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	685a      	ldr	r2, [r3, #4]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	441a      	add	r2, r3
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	441a      	add	r2, r3
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d118      	bne.n	800f1d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	4b15      	ldr	r3, [pc, #84]	@ (800f200 <prvInsertBlockIntoFreeList+0xb0>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d00d      	beq.n	800f1ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	685a      	ldr	r2, [r3, #4]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	441a      	add	r2, r3
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	601a      	str	r2, [r3, #0]
 800f1cc:	e008      	b.n	800f1e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f1ce:	4b0c      	ldr	r3, [pc, #48]	@ (800f200 <prvInsertBlockIntoFreeList+0xb0>)
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	601a      	str	r2, [r3, #0]
 800f1d6:	e003      	b.n	800f1e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d002      	beq.n	800f1ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800f1ee:	bf00      	nop
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	2005a63c 	.word	0x2005a63c
 800f200:	2005a644 	.word	0x2005a644

0800f204 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800f204:	b480      	push	{r7}
 800f206:	af00      	add	r7, sp, #0
}
 800f208:	bf00      	nop
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800f216:	f003 feab 	bl	8012f70 <touchgfx_components_init>
    touchgfx_init();
 800f21a:	f003 fe77 	bl	8012f0c <touchgfx_init>
}
 800f21e:	bf00      	nop
 800f220:	bd80      	pop	{r7, pc}

0800f222 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800f226:	f003 feab 	bl	8012f80 <touchgfx_taskEntry>
}
 800f22a:	bf00      	nop
 800f22c:	bd80      	pop	{r7, pc}
	...

0800f230 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
    {
 800f238:	4a04      	ldr	r2, [pc, #16]	@ (800f24c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	601a      	str	r2, [r3, #0]
    }
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4618      	mov	r0, r3
 800f242:	370c      	adds	r7, #12
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	0802e940 	.word	0x0802e940

0800f250 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
    }
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff ffe9 	bl	800f230 <_ZN8touchgfx12FontProviderD1Ev>
 800f25e:	2104      	movs	r1, #4
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f01c fca6 	bl	802bbb2 <_ZdlPvj>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4618      	mov	r0, r3
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	460b      	mov	r3, r1
 800f27a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f27c:	887b      	ldrh	r3, [r7, #2]
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d010      	beq.n	800f2a4 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f282:	2b02      	cmp	r3, #2
 800f284:	dc13      	bgt.n	800f2ae <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f286:	2b00      	cmp	r3, #0
 800f288:	d002      	beq.n	800f290 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d005      	beq.n	800f29a <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f28e:	e00e      	b.n	800f2ae <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f290:	f001 feca 	bl	8011028 <_ZN17TypedTextDatabase8getFontsEv>
 800f294:	4603      	mov	r3, r0
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	e00a      	b.n	800f2b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f29a:	f001 fec5 	bl	8011028 <_ZN17TypedTextDatabase8getFontsEv>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	e005      	b.n	800f2b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f2a4:	f001 fec0 	bl	8011028 <_ZN17TypedTextDatabase8getFontsEv>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	e000      	b.n	800f2b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f2ae:	2300      	movs	r3, #0
    }
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	4a05      	ldr	r2, [pc, #20]	@ (800f2d8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	601a      	str	r2, [r3, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7ff ffb1 	bl	800f230 <_ZN8touchgfx12FontProviderD1Ev>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	0802e92c 	.word	0x0802e92c

0800f2dc <_ZN23ApplicationFontProviderD0Ev>:
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff ffe7 	bl	800f2b8 <_ZN23ApplicationFontProviderD1Ev>
 800f2ea:	2104      	movs	r1, #4
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f01c fc60 	bl	802bbb2 <_ZdlPvj>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3708      	adds	r7, #8
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
    {
 800f304:	4a04      	ldr	r2, [pc, #16]	@ (800f318 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	601a      	str	r2, [r3, #0]
    }
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4618      	mov	r0, r3
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr
 800f318:	0802ebfc 	.word	0x0802ebfc

0800f31c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
    }
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7ff ffe9 	bl	800f2fc <_ZN8touchgfx4FontD1Ev>
 800f32a:	2114      	movs	r1, #20
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f01c fc40 	bl	802bbb2 <_ZdlPvj>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4618      	mov	r0, r3
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b087      	sub	sp, #28
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	460b      	mov	r3, r1
 800f346:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f348:	887b      	ldrh	r3, [r7, #2]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f34e:	2300      	movs	r3, #0
 800f350:	e010      	b.n	800f374 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f352:	2300      	movs	r3, #0
 800f354:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f356:	2300      	movs	r3, #0
 800f358:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	3308      	adds	r3, #8
 800f360:	681c      	ldr	r4, [r3, #0]
 800f362:	f107 030f 	add.w	r3, r7, #15
 800f366:	f107 0210 	add.w	r2, r7, #16
 800f36a:	8879      	ldrh	r1, [r7, #2]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	47a0      	blx	r4
 800f370:	6178      	str	r0, [r7, #20]
        return glyph;
 800f372:	697b      	ldr	r3, [r7, #20]
    }
 800f374:	4618      	mov	r0, r3
 800f376:	371c      	adds	r7, #28
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd90      	pop	{r4, r7, pc}

0800f37c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f37c:	b480      	push	{r7}
 800f37e:	b083      	sub	sp, #12
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	89db      	ldrh	r3, [r3, #14]
    }
 800f388:	4618      	mov	r0, r3
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	8a1b      	ldrh	r3, [r3, #16]
    }
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	88db      	ldrh	r3, [r3, #6]
    }
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	889b      	ldrh	r3, [r3, #4]
    }
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	7a9b      	ldrb	r3, [r3, #10]
 800f3e8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f3ec:	b2db      	uxtb	r3, r3
    }
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	370c      	adds	r7, #12
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800f3fa:	b480      	push	{r7}
 800f3fc:	b083      	sub	sp, #12
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	7a9b      	ldrb	r3, [r3, #10]
 800f406:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f40a:	b2db      	uxtb	r3, r3
    }
 800f40c:	4618      	mov	r0, r3
 800f40e:	370c      	adds	r7, #12
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr

0800f418 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
    {
        return false;
 800f420:	2300      	movs	r3, #0
    }
 800f422:	4618      	mov	r0, r3
 800f424:	370c      	adds	r7, #12
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr

0800f42e <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800f42e:	b480      	push	{r7}
 800f430:	b083      	sub	sp, #12
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f436:	f04f 0300 	mov.w	r3, #0
 800f43a:	ee07 3a90 	vmov	s15, r3
    }
 800f43e:	eeb0 0a67 	vmov.f32	s0, s15
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	4a05      	ldr	r2, [pc, #20]	@ (800f46c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	601a      	str	r2, [r3, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7ff ff4d 	bl	800f2fc <_ZN8touchgfx4FontD1Ev>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	4618      	mov	r0, r3
 800f466:	3708      	adds	r7, #8
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	0802f9f0 	.word	0x0802f9f0

0800f470 <_ZN8touchgfx9ConstFontD0Ev>:
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f7ff ffe7 	bl	800f44c <_ZN8touchgfx9ConstFontD1Ev>
 800f47e:	211c      	movs	r1, #28
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f01c fb96 	bl	802bbb2 <_ZdlPvj>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4618      	mov	r0, r3
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	4a05      	ldr	r2, [pc, #20]	@ (800f4b0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	601a      	str	r2, [r3, #0]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7ff ffd3 	bl	800f44c <_ZN8touchgfx9ConstFontD1Ev>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3708      	adds	r7, #8
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	0802e954 	.word	0x0802e954

0800f4b4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7ff ffe7 	bl	800f490 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4c2:	212c      	movs	r1, #44	@ 0x2c
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f01c fb74 	bl	802bbb2 <_ZdlPvj>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f4d4:	b480      	push	{r7}
 800f4d6:	af00      	add	r7, sp, #0
    {
        return instance;
 800f4d8:	4b03      	ldr	r3, [pc, #12]	@ (800f4e8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f4da:	681b      	ldr	r3, [r3, #0]
    }
 800f4dc:	4618      	mov	r0, r3
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr
 800f4e6:	bf00      	nop
 800f4e8:	2005baa4 	.word	0x2005baa4

0800f4ec <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800f510:	4618      	mov	r0, r3
 800f512:	370c      	adds	r7, #12
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr

0800f51c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b08e      	sub	sp, #56	@ 0x38
 800f520:	af0a      	add	r7, sp, #40	@ 0x28
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	4611      	mov	r1, r2
 800f528:	461a      	mov	r2, r3
 800f52a:	460b      	mov	r3, r1
 800f52c:	80fb      	strh	r3, [r7, #6]
 800f52e:	4613      	mov	r3, r2
 800f530:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800f532:	68f8      	ldr	r0, [r7, #12]
 800f534:	88b9      	ldrh	r1, [r7, #4]
 800f536:	88fa      	ldrh	r2, [r7, #6]
 800f538:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f53c:	9308      	str	r3, [sp, #32]
 800f53e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f540:	9307      	str	r3, [sp, #28]
 800f542:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800f546:	9306      	str	r3, [sp, #24]
 800f548:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f54c:	9305      	str	r3, [sp, #20]
 800f54e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f552:	9304      	str	r3, [sp, #16]
 800f554:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f558:	9303      	str	r3, [sp, #12]
 800f55a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f55e:	9302      	str	r3, [sp, #8]
 800f560:	7f3b      	ldrb	r3, [r7, #28]
 800f562:	9301      	str	r3, [sp, #4]
 800f564:	8b3b      	ldrh	r3, [r7, #24]
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	460b      	mov	r3, r1
 800f56a:	68b9      	ldr	r1, [r7, #8]
 800f56c:	f00b fee4 	bl	801b338 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800f570:	4a09      	ldr	r2, [pc, #36]	@ (800f598 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f57a:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f580:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f586:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f58c:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	4618      	mov	r0, r3
 800f592:	3710      	adds	r7, #16
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	0802e954 	.word	0x0802e954

0800f59c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f59c:	b480      	push	{r7}
 800f59e:	b087      	sub	sp, #28
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	881b      	ldrh	r3, [r3, #0]
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	3302      	adds	r3, #2
 800f5b6:	881b      	ldrh	r3, [r3, #0]
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	041b      	lsls	r3, r3, #16
 800f5bc:	461a      	mov	r2, r3
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	69db      	ldr	r3, [r3, #28]
 800f5c8:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	889b      	ldrh	r3, [r3, #4]
 800f5ce:	0adb      	lsrs	r3, r3, #11
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	009b      	lsls	r3, r3, #2
 800f5d4:	68fa      	ldr	r2, [r7, #12]
 800f5d6:	4413      	add	r3, r2
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 800f5dc:	68ba      	ldr	r2, [r7, #8]
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	4413      	add	r3, r2
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	371c      	adds	r7, #28
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr

0800f5ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f5ee:	b480      	push	{r7}
 800f5f0:	b089      	sub	sp, #36	@ 0x24
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	60f8      	str	r0, [r7, #12]
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	607a      	str	r2, [r7, #4]
 800f5fa:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d003      	beq.n	800f60a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	7b1b      	ldrb	r3, [r3, #12]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	e032      	b.n	800f674 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6a1a      	ldr	r2, [r3, #32]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	7b5b      	ldrb	r3, [r3, #13]
 800f61a:	b21b      	sxth	r3, r3
 800f61c:	021b      	lsls	r3, r3, #8
 800f61e:	b21b      	sxth	r3, r3
 800f620:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f624:	b219      	sxth	r1, r3
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	7adb      	ldrb	r3, [r3, #11]
 800f62a:	b21b      	sxth	r3, r3
 800f62c:	430b      	orrs	r3, r1
 800f62e:	b21b      	sxth	r3, r3
 800f630:	b29b      	uxth	r3, r3
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	4413      	add	r3, r2
 800f636:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	7b1b      	ldrb	r3, [r3, #12]
 800f63c:	837b      	strh	r3, [r7, #26]
 800f63e:	e013      	b.n	800f668 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f640:	69fb      	ldr	r3, [r7, #28]
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	897a      	ldrh	r2, [r7, #10]
 800f646:	429a      	cmp	r2, r3
 800f648:	d103      	bne.n	800f652 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f650:	e010      	b.n	800f674 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	881b      	ldrh	r3, [r3, #0]
 800f656:	897a      	ldrh	r2, [r7, #10]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d309      	bcc.n	800f670 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f65c:	8b7b      	ldrh	r3, [r7, #26]
 800f65e:	3b01      	subs	r3, #1
 800f660:	837b      	strh	r3, [r7, #26]
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	3304      	adds	r3, #4
 800f666:	61fb      	str	r3, [r7, #28]
 800f668:	8b7b      	ldrh	r3, [r7, #26]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1e8      	bne.n	800f640 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800f66e:	e000      	b.n	800f672 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800f670:	bf00      	nop
        }
    }
    return 0;
 800f672:	2300      	movs	r3, #0
}
 800f674:	4618      	mov	r0, r3
 800f676:	3724      	adds	r7, #36	@ 0x24
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f680:	b580      	push	{r7, lr}
 800f682:	af00      	add	r7, sp, #0
 800f684:	4801      	ldr	r0, [pc, #4]	@ (800f68c <__tcf_0+0xc>)
 800f686:	f7ff ff03 	bl	800f490 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	2005a658 	.word	0x2005a658

0800f690 <_Z23getFont_verdana_10_4bppv>:
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b08e      	sub	sp, #56	@ 0x38
 800f694:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f696:	4b20      	ldr	r3, [pc, #128]	@ (800f718 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f698:	e8d3 3faf 	lda	r3, [r3]
 800f69c:	f003 0301 	and.w	r3, r3, #1
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	bf0c      	ite	eq
 800f6a4:	2301      	moveq	r3, #1
 800f6a6:	2300      	movne	r3, #0
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d030      	beq.n	800f710 <_Z23getFont_verdana_10_4bppv+0x80>
 800f6ae:	481a      	ldr	r0, [pc, #104]	@ (800f718 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f6b0:	f01c fa81 	bl	802bbb6 <__cxa_guard_acquire>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	bf14      	ite	ne
 800f6ba:	2301      	movne	r3, #1
 800f6bc:	2300      	moveq	r3, #0
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d025      	beq.n	800f710 <_Z23getFont_verdana_10_4bppv+0x80>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6d0:	233f      	movs	r3, #63	@ 0x3f
 800f6d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6d4:	4b11      	ldr	r3, [pc, #68]	@ (800f71c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800f6d6:	9308      	str	r3, [sp, #32]
 800f6d8:	4b11      	ldr	r3, [pc, #68]	@ (800f720 <_Z23getFont_verdana_10_4bppv+0x90>)
 800f6da:	9307      	str	r3, [sp, #28]
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9306      	str	r3, [sp, #24]
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	9305      	str	r3, [sp, #20]
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	9304      	str	r3, [sp, #16]
 800f6e8:	2304      	movs	r3, #4
 800f6ea:	9303      	str	r3, [sp, #12]
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	9302      	str	r3, [sp, #8]
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	9301      	str	r3, [sp, #4]
 800f6f4:	230a      	movs	r3, #10
 800f6f6:	9300      	str	r3, [sp, #0]
 800f6f8:	230a      	movs	r3, #10
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	4909      	ldr	r1, [pc, #36]	@ (800f724 <_Z23getFont_verdana_10_4bppv+0x94>)
 800f6fe:	480a      	ldr	r0, [pc, #40]	@ (800f728 <_Z23getFont_verdana_10_4bppv+0x98>)
 800f700:	f7ff ff0c 	bl	800f51c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f704:	4809      	ldr	r0, [pc, #36]	@ (800f72c <_Z23getFont_verdana_10_4bppv+0x9c>)
 800f706:	f01d f967 	bl	802c9d8 <atexit>
 800f70a:	4803      	ldr	r0, [pc, #12]	@ (800f718 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f70c:	f01c fa5f 	bl	802bbce <__cxa_guard_release>
    return verdana_10_4bpp;
 800f710:	4b05      	ldr	r3, [pc, #20]	@ (800f728 <_Z23getFont_verdana_10_4bppv+0x98>)
}
 800f712:	4618      	mov	r0, r3
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	2005a684 	.word	0x2005a684
 800f71c:	080303ec 	.word	0x080303ec
 800f720:	080303f8 	.word	0x080303f8
 800f724:	080303bc 	.word	0x080303bc
 800f728:	2005a658 	.word	0x2005a658
 800f72c:	0800f681 	.word	0x0800f681

0800f730 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f730:	b580      	push	{r7, lr}
 800f732:	af00      	add	r7, sp, #0
 800f734:	4801      	ldr	r0, [pc, #4]	@ (800f73c <__tcf_0+0xc>)
 800f736:	f7ff feab 	bl	800f490 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	2005a688 	.word	0x2005a688

0800f740 <_Z23getFont_verdana_20_4bppv>:
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b08e      	sub	sp, #56	@ 0x38
 800f744:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f746:	4b20      	ldr	r3, [pc, #128]	@ (800f7c8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f748:	e8d3 3faf 	lda	r3, [r3]
 800f74c:	f003 0301 	and.w	r3, r3, #1
 800f750:	2b00      	cmp	r3, #0
 800f752:	bf0c      	ite	eq
 800f754:	2301      	moveq	r3, #1
 800f756:	2300      	movne	r3, #0
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d030      	beq.n	800f7c0 <_Z23getFont_verdana_20_4bppv+0x80>
 800f75e:	481a      	ldr	r0, [pc, #104]	@ (800f7c8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f760:	f01c fa29 	bl	802bbb6 <__cxa_guard_acquire>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	bf14      	ite	ne
 800f76a:	2301      	movne	r3, #1
 800f76c:	2300      	moveq	r3, #0
 800f76e:	b2db      	uxtb	r3, r3
 800f770:	2b00      	cmp	r3, #0
 800f772:	d025      	beq.n	800f7c0 <_Z23getFont_verdana_20_4bppv+0x80>
 800f774:	2300      	movs	r3, #0
 800f776:	930c      	str	r3, [sp, #48]	@ 0x30
 800f778:	2300      	movs	r3, #0
 800f77a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f77c:	2300      	movs	r3, #0
 800f77e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f780:	233f      	movs	r3, #63	@ 0x3f
 800f782:	9309      	str	r3, [sp, #36]	@ 0x24
 800f784:	4b11      	ldr	r3, [pc, #68]	@ (800f7cc <_Z23getFont_verdana_20_4bppv+0x8c>)
 800f786:	9308      	str	r3, [sp, #32]
 800f788:	4b11      	ldr	r3, [pc, #68]	@ (800f7d0 <_Z23getFont_verdana_20_4bppv+0x90>)
 800f78a:	9307      	str	r3, [sp, #28]
 800f78c:	2300      	movs	r3, #0
 800f78e:	9306      	str	r3, [sp, #24]
 800f790:	2300      	movs	r3, #0
 800f792:	9305      	str	r3, [sp, #20]
 800f794:	2301      	movs	r3, #1
 800f796:	9304      	str	r3, [sp, #16]
 800f798:	2304      	movs	r3, #4
 800f79a:	9303      	str	r3, [sp, #12]
 800f79c:	2300      	movs	r3, #0
 800f79e:	9302      	str	r3, [sp, #8]
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	9301      	str	r3, [sp, #4]
 800f7a4:	2314      	movs	r3, #20
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	2314      	movs	r3, #20
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	4909      	ldr	r1, [pc, #36]	@ (800f7d4 <_Z23getFont_verdana_20_4bppv+0x94>)
 800f7ae:	480a      	ldr	r0, [pc, #40]	@ (800f7d8 <_Z23getFont_verdana_20_4bppv+0x98>)
 800f7b0:	f7ff feb4 	bl	800f51c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f7b4:	4809      	ldr	r0, [pc, #36]	@ (800f7dc <_Z23getFont_verdana_20_4bppv+0x9c>)
 800f7b6:	f01d f90f 	bl	802c9d8 <atexit>
 800f7ba:	4803      	ldr	r0, [pc, #12]	@ (800f7c8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f7bc:	f01c fa07 	bl	802bbce <__cxa_guard_release>
    return verdana_20_4bpp;
 800f7c0:	4b05      	ldr	r3, [pc, #20]	@ (800f7d8 <_Z23getFont_verdana_20_4bppv+0x98>)
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}
 800f7c8:	2005a6b4 	.word	0x2005a6b4
 800f7cc:	080303f0 	.word	0x080303f0
 800f7d0:	080303fc 	.word	0x080303fc
 800f7d4:	080303cc 	.word	0x080303cc
 800f7d8:	2005a688 	.word	0x2005a688
 800f7dc:	0800f731 	.word	0x0800f731

0800f7e0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	4801      	ldr	r0, [pc, #4]	@ (800f7ec <__tcf_0+0xc>)
 800f7e6:	f7ff fe53 	bl	800f490 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	2005a6b8 	.word	0x2005a6b8

0800f7f0 <_Z23getFont_verdana_40_4bppv>:
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b08e      	sub	sp, #56	@ 0x38
 800f7f4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f7f6:	4b20      	ldr	r3, [pc, #128]	@ (800f878 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f7f8:	e8d3 3faf 	lda	r3, [r3]
 800f7fc:	f003 0301 	and.w	r3, r3, #1
 800f800:	2b00      	cmp	r3, #0
 800f802:	bf0c      	ite	eq
 800f804:	2301      	moveq	r3, #1
 800f806:	2300      	movne	r3, #0
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d030      	beq.n	800f870 <_Z23getFont_verdana_40_4bppv+0x80>
 800f80e:	481a      	ldr	r0, [pc, #104]	@ (800f878 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f810:	f01c f9d1 	bl	802bbb6 <__cxa_guard_acquire>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	bf14      	ite	ne
 800f81a:	2301      	movne	r3, #1
 800f81c:	2300      	moveq	r3, #0
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	2b00      	cmp	r3, #0
 800f822:	d025      	beq.n	800f870 <_Z23getFont_verdana_40_4bppv+0x80>
 800f824:	2300      	movs	r3, #0
 800f826:	930c      	str	r3, [sp, #48]	@ 0x30
 800f828:	2300      	movs	r3, #0
 800f82a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f82c:	2300      	movs	r3, #0
 800f82e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f830:	233f      	movs	r3, #63	@ 0x3f
 800f832:	9309      	str	r3, [sp, #36]	@ 0x24
 800f834:	4b11      	ldr	r3, [pc, #68]	@ (800f87c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800f836:	9308      	str	r3, [sp, #32]
 800f838:	4b11      	ldr	r3, [pc, #68]	@ (800f880 <_Z23getFont_verdana_40_4bppv+0x90>)
 800f83a:	9307      	str	r3, [sp, #28]
 800f83c:	2300      	movs	r3, #0
 800f83e:	9306      	str	r3, [sp, #24]
 800f840:	2300      	movs	r3, #0
 800f842:	9305      	str	r3, [sp, #20]
 800f844:	2301      	movs	r3, #1
 800f846:	9304      	str	r3, [sp, #16]
 800f848:	2304      	movs	r3, #4
 800f84a:	9303      	str	r3, [sp, #12]
 800f84c:	2300      	movs	r3, #0
 800f84e:	9302      	str	r3, [sp, #8]
 800f850:	2300      	movs	r3, #0
 800f852:	9301      	str	r3, [sp, #4]
 800f854:	2328      	movs	r3, #40	@ 0x28
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	2328      	movs	r3, #40	@ 0x28
 800f85a:	2201      	movs	r2, #1
 800f85c:	4909      	ldr	r1, [pc, #36]	@ (800f884 <_Z23getFont_verdana_40_4bppv+0x94>)
 800f85e:	480a      	ldr	r0, [pc, #40]	@ (800f888 <_Z23getFont_verdana_40_4bppv+0x98>)
 800f860:	f7ff fe5c 	bl	800f51c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f864:	4809      	ldr	r0, [pc, #36]	@ (800f88c <_Z23getFont_verdana_40_4bppv+0x9c>)
 800f866:	f01d f8b7 	bl	802c9d8 <atexit>
 800f86a:	4803      	ldr	r0, [pc, #12]	@ (800f878 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f86c:	f01c f9af 	bl	802bbce <__cxa_guard_release>
    return verdana_40_4bpp;
 800f870:	4b05      	ldr	r3, [pc, #20]	@ (800f888 <_Z23getFont_verdana_40_4bppv+0x98>)
}
 800f872:	4618      	mov	r0, r3
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	2005a6e4 	.word	0x2005a6e4
 800f87c:	080303f4 	.word	0x080303f4
 800f880:	08030400 	.word	0x08030400
 800f884:	080303dc 	.word	0x080303dc
 800f888:	2005a6b8 	.word	0x2005a6b8
 800f88c:	0800f7e1 	.word	0x0800f7e1

0800f890 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	607a      	str	r2, [r7, #4]
 800f89c:	603b      	str	r3, [r7, #0]
    pointArray = 0;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	601a      	str	r2, [r3, #0]
    pointArraySize = 0;
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	601a      	str	r2, [r3, #0]
    commandArray = 0;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	601a      	str	r2, [r3, #0]
    commandArraySize = 0;
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	601a      	str	r2, [r3, #0]
}
 800f8b6:	bf00      	nop
 800f8b8:	3714      	adds	r7, #20
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr

0800f8c2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f8c2:	b480      	push	{r7}
 800f8c4:	b083      	sub	sp, #12
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	6078      	str	r0, [r7, #4]
 800f8ca:	6039      	str	r1, [r7, #0]
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	370c      	adds	r7, #12
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr

0800f8da <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f8da:	b480      	push	{r7}
 800f8dc:	b083      	sub	sp, #12
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
 800f8e2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f8e4:	bf00      	nop
 800f8e6:	370c      	adds	r7, #12
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f8f0:	b480      	push	{r7}
 800f8f2:	b083      	sub	sp, #12
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f8fa:	bf00      	nop
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f906:	b480      	push	{r7}
 800f908:	b083      	sub	sp, #12
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f910:	bf00      	nop
 800f912:	370c      	adds	r7, #12
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	460b      	mov	r3, r1
 800f926:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800f928:	bf00      	nop
 800f92a:	370c      	adds	r7, #12
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
    {
    }
 800f93c:	bf00      	nop
 800f93e:	370c      	adds	r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
    {
    }
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
    {
 800f964:	4a04      	ldr	r2, [pc, #16]	@ (800f978 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	601a      	str	r2, [r3, #0]
    }
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4618      	mov	r0, r3
 800f96e:	370c      	adds	r7, #12
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr
 800f978:	0802eadc 	.word	0x0802eadc

0800f97c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
    }
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f7ff ffe9 	bl	800f95c <_ZN8touchgfx15UIEventListenerD1Ev>
 800f98a:	2104      	movs	r1, #4
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f01c f910 	bl	802bbb2 <_ZdlPvj>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	4618      	mov	r0, r3
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
    {
    }
 800f9a4:	bf00      	nop
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f9b0:	b480      	push	{r7}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800f9bc:	bf00      	nop
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	683a      	ldr	r2, [r7, #0]
 800f9d6:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f9da:	6810      	ldr	r0, [r2, #0]
 800f9dc:	6851      	ldr	r1, [r2, #4]
 800f9de:	c303      	stmia	r3!, {r0, r1}
    }
 800f9e0:	bf00      	nop
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr

0800f9ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	3304      	adds	r3, #4
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f009 fe8f 	bl	801971c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800f9fe:	bf00      	nop
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
	...

0800fa08 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
    {
 800fa10:	4a04      	ldr	r2, [pc, #16]	@ (800fa24 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	601a      	str	r2, [r3, #0]
    }
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr
 800fa24:	0802eac4 	.word	0x0802eac4

0800fa28 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
    }
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f7ff ffe9 	bl	800fa08 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fa36:	2104      	movs	r1, #4
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f01c f8ba 	bl	802bbb2 <_ZdlPvj>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4618      	mov	r0, r3
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800fa48:	b480      	push	{r7}
 800fa4a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800fa4c:	4b0b      	ldr	r3, [pc, #44]	@ (800fa7c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d008      	beq.n	800fa6a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fa58:	4b08      	ldr	r3, [pc, #32]	@ (800fa7c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d003      	beq.n	800fa6a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fa62:	4b06      	ldr	r3, [pc, #24]	@ (800fa7c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa68:	e002      	b.n	800fa70 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800fa6a:	4b04      	ldr	r3, [pc, #16]	@ (800fa7c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	689b      	ldr	r3, [r3, #8]
    }
 800fa70:	4618      	mov	r0, r3
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr
 800fa7a:	bf00      	nop
 800fa7c:	2005baa4 	.word	0x2005baa4

0800fa80 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800fa88:	4a07      	ldr	r2, [pc, #28]	@ (800faa8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	601a      	str	r2, [r3, #0]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2200      	movs	r2, #0
 800fa92:	605a      	str	r2, [r3, #4]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2200      	movs	r2, #0
 800fa98:	721a      	strb	r2, [r3, #8]
    {
    }
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	370c      	adds	r7, #12
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr
 800faa8:	0802eaa0 	.word	0x0802eaa0

0800faac <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
    {
 800fab4:	4a04      	ldr	r2, [pc, #16]	@ (800fac8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	601a      	str	r2, [r3, #0]
    }
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4618      	mov	r0, r3
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr
 800fac8:	0802eaa0 	.word	0x0802eaa0

0800facc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
    }
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7ff ffe9 	bl	800faac <_ZN8touchgfx10TransitionD1Ev>
 800fada:	210c      	movs	r1, #12
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f01c f868 	bl	802bbb2 <_ZdlPvj>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4618      	mov	r0, r3
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
    {
    }
 800faf4:	bf00      	nop
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
    {
    }
 800fb08:	bf00      	nop
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr

0800fb14 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
    {
    }
 800fb1c:	bf00      	nop
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800fb30:	f009 fdb6 	bl	80196a0 <_ZN8touchgfx11Application11getInstanceEv>
 800fb34:	4603      	mov	r3, r0
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	323c      	adds	r2, #60	@ 0x3c
 800fb3a:	6812      	ldr	r2, [r2, #0]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	4790      	blx	r2
    }
 800fb40:	bf00      	nop
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800fb48:	b480      	push	{r7}
 800fb4a:	b083      	sub	sp, #12
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	683a      	ldr	r2, [r7, #0]
 800fb56:	605a      	str	r2, [r3, #4]
    }
 800fb58:	bf00      	nop
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	4a05      	ldr	r2, [pc, #20]	@ (800fb84 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7ff fef1 	bl	800f95c <_ZN8touchgfx15UIEventListenerD1Ev>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	0802f920 	.word	0x0802f920

0800fb88 <_ZN8touchgfx11ApplicationD0Ev>:
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f7ff ffe7 	bl	800fb64 <_ZN8touchgfx11ApplicationD1Ev>
 800fb96:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f01c f809 	bl	802bbb2 <_ZdlPvj>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	4618      	mov	r0, r3
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
	...

0800fbac <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f009 fe7e 	bl	80198b8 <_ZN8touchgfx11ApplicationC1Ev>
 800fbbc:	4a09      	ldr	r2, [pc, #36]	@ (800fbe4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4a04      	ldr	r2, [pc, #16]	@ (800fbe8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fbd6:	6013      	str	r3, [r2, #0]
    }
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3708      	adds	r7, #8
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	0802ea4c 	.word	0x0802ea4c
 800fbe8:	2005baf8 	.word	0x2005baf8

0800fbec <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 f804 	bl	800fc02 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fbfa:	bf00      	nop
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b082      	sub	sp, #8
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00f      	beq.n	800fc34 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	330c      	adds	r3, #12
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4610      	mov	r0, r2
 800fc28:	4798      	blx	r3
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d001      	beq.n	800fc34 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fc30:	2301      	movs	r3, #1
 800fc32:	e000      	b.n	800fc36 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fc34:	2300      	movs	r3, #0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d00e      	beq.n	800fc58 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	3308      	adds	r3, #8
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	4610      	mov	r0, r2
 800fc4e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800fc58:	bf00      	nop
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	683a      	ldr	r2, [r7, #0]
 800fc6e:	601a      	str	r2, [r3, #0]
    }
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	4a05      	ldr	r2, [pc, #20]	@ (800fc9c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	601a      	str	r2, [r3, #0]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7ff ff69 	bl	800fb64 <_ZN8touchgfx11ApplicationD1Ev>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	4618      	mov	r0, r3
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	0802ea4c 	.word	0x0802ea4c

0800fca0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7ff ffe7 	bl	800fc7c <_ZN8touchgfx14MVPApplicationD1Ev>
 800fcae:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f01b ff7d 	bl	802bbb2 <_ZdlPvj>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
	...

0800fcc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	4a05      	ldr	r2, [pc, #20]	@ (800fce4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	601a      	str	r2, [r3, #0]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7ff fe97 	bl	800fa08 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3708      	adds	r7, #8
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	0802ea34 	.word	0x0802ea34

0800fce8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7ff ffe7 	bl	800fcc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fcf6:	2110      	movs	r1, #16
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f01b ff5a 	bl	802bbb2 <_ZdlPvj>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	4618      	mov	r0, r3
 800fd02:	3708      	adds	r7, #8
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	4a08      	ldr	r2, [pc, #32]	@ (800fd34 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	601a      	str	r2, [r3, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff ffd1 	bl	800fcc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7ff ffa9 	bl	800fc7c <_ZN8touchgfx14MVPApplicationD1Ev>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3708      	adds	r7, #8
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	0802e9e0 	.word	0x0802e9e0

0800fd38 <_ZN23FrontendApplicationBaseD0Ev>:
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7ff ffe1 	bl	800fd08 <_ZN23FrontendApplicationBaseD1Ev>
 800fd46:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f01b ff31 	bl	802bbb2 <_ZdlPvj>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4618      	mov	r0, r3
 800fd54:	3708      	adds	r7, #8
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b082      	sub	sp, #8
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f000 f886 	bl	800fe74 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800fd68:	bf00      	nop
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800fd70:	b480      	push	{r7}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	721a      	strb	r2, [r3, #8]
    }
 800fd7e:	bf00      	nop
 800fd80:	370c      	adds	r7, #12
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr

0800fd8a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800fd8a:	b480      	push	{r7}
 800fd8c:	b083      	sub	sp, #12
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
 800fd92:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	683a      	ldr	r2, [r7, #0]
 800fd98:	605a      	str	r2, [r3, #4]
    }
 800fd9a:	bf00      	nop
 800fd9c:	370c      	adds	r7, #12
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
	...

0800fda8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b084      	sub	sp, #16
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	60f8      	str	r0, [r7, #12]
 800fdb0:	60b9      	str	r1, [r7, #8]
 800fdb2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7ff fef8 	bl	800fbac <_ZN8touchgfx14MVPApplicationC1Ev>
 800fdbc:	4a18      	ldr	r2, [pc, #96]	@ (800fe20 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f000 f8a9 	bl	800ff20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	68ba      	ldr	r2, [r7, #8]
 800fdda:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800fdde:	f7ff fb79 	bl	800f4d4 <_ZN8touchgfx3HAL11getInstanceEv>
 800fde2:	4603      	mov	r3, r0
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	3208      	adds	r2, #8
 800fde8:	6812      	ldr	r2, [r2, #0]
 800fdea:	2101      	movs	r1, #1
 800fdec:	4618      	mov	r0, r3
 800fdee:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fdf0:	f7ff fe2a 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f013 fe01 	bl	80239fe <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800fdfc:	f7ff fe24 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 800fe00:	4603      	mov	r3, r0
 800fe02:	4618      	mov	r0, r3
 800fe04:	f013 fe72 	bl	8023aec <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800fe08:	f7ff fe1e 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f013 fe78 	bl	8023b04 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	0802e9e0 	.word	0x0802e9e0

0800fe24 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	6039      	str	r1, [r7, #0]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4618      	mov	r0, r3
 800fe32:	370c      	adds	r7, #12
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr

0800fe3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	683a      	ldr	r2, [r7, #0]
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7ff ffe9 	bl	800fe24 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	685a      	ldr	r2, [r3, #4]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	605a      	str	r2, [r3, #4]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	683a      	ldr	r2, [r7, #0]
 800fe5e:	3308      	adds	r3, #8
 800fe60:	3208      	adds	r2, #8
 800fe62:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe66:	e883 0003 	stmia.w	r3, {r0, r1}
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800fe74:	b590      	push	{r4, r7, lr}
 800fe76:	b089      	sub	sp, #36	@ 0x24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800fe82:	4b10      	ldr	r3, [pc, #64]	@ (800fec4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800fe84:	61bb      	str	r3, [r7, #24]
 800fe86:	2300      	movs	r3, #0
 800fe88:	61fb      	str	r3, [r7, #28]
 800fe8a:	f107 0008 	add.w	r0, r7, #8
 800fe8e:	f107 0318 	add.w	r3, r7, #24
 800fe92:	cb0c      	ldmia	r3, {r2, r3}
 800fe94:	6879      	ldr	r1, [r7, #4]
 800fe96:	f000 f85f 	bl	800ff58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fe9a:	f107 0308 	add.w	r3, r7, #8
 800fe9e:	4619      	mov	r1, r3
 800fea0:	4620      	mov	r0, r4
 800fea2:	f7ff ffcb 	bl	800fe3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fea6:	f107 0308 	add.w	r3, r7, #8
 800feaa:	4618      	mov	r0, r3
 800feac:	f7ff ff0a 	bl	800fcc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800febc:	bf00      	nop
 800febe:	3724      	adds	r7, #36	@ 0x24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd90      	pop	{r4, r7, pc}
 800fec4:	0800fec9 	.word	0x0800fec9

0800fec8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af02      	add	r7, sp, #8
 800fece:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800fedc:	461a      	mov	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800fee4:	9300      	str	r3, [sp, #0]
 800fee6:	4b04      	ldr	r3, [pc, #16]	@ (800fef8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800fee8:	4804      	ldr	r0, [pc, #16]	@ (800fefc <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800feea:	f000 f867 	bl	800ffbc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800feee:	bf00      	nop
 800fef0:	3708      	adds	r7, #8
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	2005baec 	.word	0x2005baec
 800fefc:	2005bae8 	.word	0x2005bae8

0800ff00 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	4a04      	ldr	r2, [pc, #16]	@ (800ff1c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4618      	mov	r0, r3
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr
 800ff1c:	0802eac4 	.word	0x0802eac4

0800ff20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b082      	sub	sp, #8
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7ff ffe8 	bl	800ff00 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ff30:	4a08      	ldr	r2, [pc, #32]	@ (800ff54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	601a      	str	r2, [r3, #0]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	605a      	str	r2, [r3, #4]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	609a      	str	r2, [r3, #8]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	60da      	str	r2, [r3, #12]
    {
    }
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3708      	adds	r7, #8
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	0802ea34 	.word	0x0802ea34

0800ff58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	4639      	mov	r1, r7
 800ff64:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7ff ffc8 	bl	800ff00 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ff70:	4a08      	ldr	r2, [pc, #32]	@ (800ff94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	601a      	str	r2, [r3, #0]
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	605a      	str	r2, [r3, #4]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	3308      	adds	r3, #8
 800ff80:	463a      	mov	r2, r7
 800ff82:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff86:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}
 800ff94:	0802ea34 	.word	0x0802ea34

0800ff98 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff fd6c 	bl	800fa80 <_ZN8touchgfx10TransitionC1Ev>
 800ffa8:	4a03      	ldr	r2, [pc, #12]	@ (800ffb8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	601a      	str	r2, [r3, #0]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	0802e9bc 	.word	0x0802e9bc

0800ffbc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ffbc:	b590      	push	{r4, r7, lr}
 800ffbe:	b08f      	sub	sp, #60	@ 0x3c
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	607a      	str	r2, [r7, #4]
 800ffc8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	689a      	ldr	r2, [r3, #8]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	689b      	ldr	r3, [r3, #8]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3320      	adds	r3, #32
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4610      	mov	r0, r2
 800ffda:	4798      	blx	r3
 800ffdc:	4603      	mov	r3, r0
 800ffde:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800ffe2:	d205      	bcs.n	800fff0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800ffe4:	4b7d      	ldr	r3, [pc, #500]	@ (80101dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800ffe6:	4a7e      	ldr	r2, [pc, #504]	@ (80101e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ffe8:	21a3      	movs	r1, #163	@ 0xa3
 800ffea:	487e      	ldr	r0, [pc, #504]	@ (80101e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ffec:	f01c fcd6 	bl	802c99c <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	685a      	ldr	r2, [r3, #4]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	3320      	adds	r3, #32
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	4610      	mov	r0, r2
 8010000:	4798      	blx	r3
 8010002:	4603      	mov	r3, r0
 8010004:	2b0f      	cmp	r3, #15
 8010006:	d805      	bhi.n	8010014 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8010008:	4b77      	ldr	r3, [pc, #476]	@ (80101e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801000a:	4a75      	ldr	r2, [pc, #468]	@ (80101e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 801000c:	21a4      	movs	r1, #164	@ 0xa4
 801000e:	4875      	ldr	r0, [pc, #468]	@ (80101e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010010:	f01c fcc4 	bl	802c99c <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	68da      	ldr	r2, [r3, #12]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	3320      	adds	r3, #32
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4610      	mov	r0, r2
 8010024:	4798      	blx	r3
 8010026:	4603      	mov	r3, r0
 8010028:	2b0b      	cmp	r3, #11
 801002a:	d805      	bhi.n	8010038 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 801002c:	4b6f      	ldr	r3, [pc, #444]	@ (80101ec <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 801002e:	4a6c      	ldr	r2, [pc, #432]	@ (80101e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8010030:	21a5      	movs	r1, #165	@ 0xa5
 8010032:	486c      	ldr	r0, [pc, #432]	@ (80101e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010034:	f01c fcb2 	bl	802c99c <__assert_func>
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010044:	f009 fb2c 	bl	80196a0 <_ZN8touchgfx11Application11getInstanceEv>
 8010048:	4603      	mov	r3, r0
 801004a:	4618      	mov	r0, r3
 801004c:	f7ff fcce 	bl	800f9ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010050:	6a3b      	ldr	r3, [r7, #32]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d008      	beq.n	801006a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8010058:	6a3b      	ldr	r3, [r7, #32]
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	6a3b      	ldr	r3, [r7, #32]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	330c      	adds	r3, #12
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	4610      	mov	r0, r2
 8010068:	4798      	blx	r3
    if (*currentTrans)
 801006a:	6a3b      	ldr	r3, [r7, #32]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d007      	beq.n	8010082 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8010072:	6a3b      	ldr	r3, [r7, #32]
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4610      	mov	r0, r2
 8010080:	4798      	blx	r3
    if (*currentScreen)
 8010082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d008      	beq.n	801009c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 801008a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	3314      	adds	r3, #20
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4610      	mov	r0, r2
 801009a:	4798      	blx	r3
    if (*currentPresenter)
 801009c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d008      	beq.n	80100b6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 80100a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	3304      	adds	r3, #4
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	4610      	mov	r0, r2
 80100b4:	4798      	blx	r3
    if (*currentScreen)
 80100b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d007      	beq.n	80100ce <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 80100be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	4610      	mov	r0, r2
 80100cc:	4798      	blx	r3
    if (*currentPresenter)
 80100ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d008      	beq.n	80100e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 80100d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	3308      	adds	r3, #8
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4610      	mov	r0, r2
 80100e6:	4798      	blx	r3
}
 80100e8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	2100      	movs	r1, #0
 80100f0:	4618      	mov	r0, r3
 80100f2:	f000 f87d 	bl	80101f0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80100f6:	4603      	mov	r3, r0
 80100f8:	4619      	mov	r1, r3
 80100fa:	200c      	movs	r0, #12
 80100fc:	f7ff fbe1 	bl	800f8c2 <_ZnwjPv>
 8010100:	4604      	mov	r4, r0
 8010102:	4620      	mov	r0, r4
 8010104:	f7ff ff48 	bl	800ff98 <_ZN8touchgfx12NoTransitionC1Ev>
 8010108:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	2100      	movs	r1, #0
 8010110:	4618      	mov	r0, r3
 8010112:	f000 f880 	bl	8010216 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8010116:	4603      	mov	r3, r0
 8010118:	4619      	mov	r1, r3
 801011a:	f44f 7010 	mov.w	r0, #576	@ 0x240
 801011e:	f7ff fbd0 	bl	800f8c2 <_ZnwjPv>
 8010122:	4604      	mov	r4, r0
 8010124:	4620      	mov	r0, r4
 8010126:	f001 f90d 	bl	8011344 <_ZN10screenViewC1Ev>
 801012a:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	2100      	movs	r1, #0
 8010132:	4618      	mov	r0, r3
 8010134:	f000 f882 	bl	801023c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8010138:	4603      	mov	r3, r0
 801013a:	4619      	mov	r1, r3
 801013c:	2010      	movs	r0, #16
 801013e:	f7ff fbc0 	bl	800f8c2 <_ZnwjPv>
 8010142:	4604      	mov	r4, r0
 8010144:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010146:	4620      	mov	r0, r4
 8010148:	f001 f8a4 	bl	8011294 <_ZN15screenPresenterC1ER10screenView>
 801014c:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010152:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010158:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801015e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010162:	2b00      	cmp	r3, #0
 8010164:	d002      	beq.n	801016c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8010166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010168:	3304      	adds	r3, #4
 801016a:	e000      	b.n	801016e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 801016c:	2300      	movs	r3, #0
 801016e:	4619      	mov	r1, r3
 8010170:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010172:	f7ff fd75 	bl	800fc60 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010178:	3304      	adds	r3, #4
 801017a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801017c:	4618      	mov	r0, r3
 801017e:	f7ff fe04 	bl	800fd8a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010184:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010186:	4618      	mov	r0, r3
 8010188:	f000 f86b 	bl	8010262 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 801018c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801018e:	61fb      	str	r3, [r7, #28]
 8010190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010192:	61bb      	str	r3, [r7, #24]
 8010194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010196:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	330c      	adds	r3, #12
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	69f8      	ldr	r0, [r7, #28]
 80101a2:	4798      	blx	r3
    newPresenter->activate();
 80101a4:	69bb      	ldr	r3, [r7, #24]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	69b8      	ldr	r0, [r7, #24]
 80101ac:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80101ae:	6979      	ldr	r1, [r7, #20]
 80101b0:	69f8      	ldr	r0, [r7, #28]
 80101b2:	f00b fc5f 	bl	801ba74 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3310      	adds	r3, #16
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	6978      	ldr	r0, [r7, #20]
 80101c0:	4798      	blx	r3
    newTransition->invalidate();
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	3314      	adds	r3, #20
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	6978      	ldr	r0, [r7, #20]
 80101cc:	4798      	blx	r3
}
 80101ce:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80101d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	373c      	adds	r7, #60	@ 0x3c
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd90      	pop	{r4, r7, pc}
 80101da:	bf00      	nop
 80101dc:	0802dbcc 	.word	0x0802dbcc
 80101e0:	0802dc5c 	.word	0x0802dc5c
 80101e4:	0802dd2c 	.word	0x0802dd2c
 80101e8:	0802dd70 	.word	0x0802dd70
 80101ec:	0802de14 	.word	0x0802de14

080101f0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	460b      	mov	r3, r1
 80101fa:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	3324      	adds	r3, #36	@ 0x24
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	887a      	ldrh	r2, [r7, #2]
 8010206:	4611      	mov	r1, r2
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	4798      	blx	r3
 801020c:	4603      	mov	r3, r0
    }
 801020e:	4618      	mov	r0, r3
 8010210:	3708      	adds	r7, #8
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}

08010216 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8010216:	b580      	push	{r7, lr}
 8010218:	b082      	sub	sp, #8
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
 801021e:	460b      	mov	r3, r1
 8010220:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	3324      	adds	r3, #36	@ 0x24
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	887a      	ldrh	r2, [r7, #2]
 801022c:	4611      	mov	r1, r2
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	4798      	blx	r3
 8010232:	4603      	mov	r3, r0
    }
 8010234:	4618      	mov	r0, r3
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	460b      	mov	r3, r1
 8010246:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	3324      	adds	r3, #36	@ 0x24
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	887a      	ldrh	r2, [r7, #2]
 8010252:	4611      	mov	r1, r2
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	4798      	blx	r3
 8010258:	4603      	mov	r3, r0
    }
 801025a:	4618      	mov	r0, r3
 801025c:	3708      	adds	r7, #8
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}

08010262 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8010262:	b480      	push	{r7}
 8010264:	b083      	sub	sp, #12
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
 801026a:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	683a      	ldr	r2, [r7, #0]
 8010270:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010272:	bf00      	nop
 8010274:	370c      	adds	r7, #12
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr
	...

08010280 <_ZN8touchgfx12NoTransitionD1Ev>:
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	4a05      	ldr	r2, [pc, #20]	@ (80102a0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	601a      	str	r2, [r3, #0]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4618      	mov	r0, r3
 8010292:	f7ff fc0b 	bl	800faac <_ZN8touchgfx10TransitionD1Ev>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	4618      	mov	r0, r3
 801029a:	3708      	adds	r7, #8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	0802e9bc 	.word	0x0802e9bc

080102a4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f7ff ffe7 	bl	8010280 <_ZN8touchgfx12NoTransitionD1Ev>
 80102b2:	210c      	movs	r1, #12
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f01b fc7c 	bl	802bbb2 <_ZdlPvj>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4618      	mov	r0, r3
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	68d2      	ldr	r2, [r2, #12]
 80102d4:	1052      	asrs	r2, r2, #1
 80102d6:	1899      	adds	r1, r3, r2
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	f003 0301 	and.w	r3, r3, #1
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d102      	bne.n	80102ea <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	e00a      	b.n	8010300 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	687a      	ldr	r2, [r7, #4]
 80102f0:	68d2      	ldr	r2, [r2, #12]
 80102f2:	1052      	asrs	r2, r2, #1
 80102f4:	4413      	add	r3, r2
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	6892      	ldr	r2, [r2, #8]
 80102fc:	4413      	add	r3, r2
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	4608      	mov	r0, r1
 8010302:	4798      	blx	r3
    }
 8010304:	bf00      	nop
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801030c:	b480      	push	{r7}
 801030e:	b083      	sub	sp, #12
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d010      	beq.n	801033e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d107      	bne.n	8010334 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	f003 0301 	and.w	r3, r3, #1
 801032c:	2b00      	cmp	r3, #0
 801032e:	d101      	bne.n	8010334 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010330:	2301      	movs	r3, #1
 8010332:	e000      	b.n	8010336 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010334:	2300      	movs	r3, #0
 8010336:	2b01      	cmp	r3, #1
 8010338:	d001      	beq.n	801033e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801033a:	2301      	movs	r3, #1
 801033c:	e000      	b.n	8010340 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801033e:	2300      	movs	r3, #0
    }
 8010340:	4618      	mov	r0, r3
 8010342:	370c      	adds	r7, #12
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr

0801034c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 801034c:	b480      	push	{r7}
 801034e:	b083      	sub	sp, #12
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
        : color(col)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	683a      	ldr	r2, [r7, #0]
 801035a:	601a      	str	r2, [r3, #0]
    {
    }
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4618      	mov	r0, r3
 8010360:	370c      	adds	r7, #12
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr

0801036a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 801036a:	b480      	push	{r7}
 801036c:	b083      	sub	sp, #12
 801036e:	af00      	add	r7, sp, #0
 8010370:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	801a      	strh	r2, [r3, #0]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	805a      	strh	r2, [r3, #2]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2200      	movs	r2, #0
 8010382:	809a      	strh	r2, [r3, #4]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2200      	movs	r2, #0
 8010388:	80da      	strh	r2, [r3, #6]
    {
    }
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4618      	mov	r0, r3
 801038e:	370c      	adds	r7, #12
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr

08010398 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80103a0:	4a14      	ldr	r2, [pc, #80]	@ (80103f4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	601a      	str	r2, [r3, #0]
        : rect(),
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	3304      	adds	r3, #4
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7ff ffdd 	bl	801036a <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	330c      	adds	r3, #12
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7ff ffd8 	bl	801036a <_ZN8touchgfx4RectC1Ev>
          parent(0),
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2200      	movs	r2, #0
 80103be:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2200      	movs	r2, #0
 80103c4:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2200      	movs	r2, #0
 80103ca:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2200      	movs	r2, #0
 80103d0:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2200      	movs	r2, #0
 80103dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2201      	movs	r2, #1
 80103e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	4618      	mov	r0, r3
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	0802f974 	.word	0x0802f974

080103f8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80103f8:	b480      	push	{r7}
 80103fa:	b083      	sub	sp, #12
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
    {
 8010400:	4a04      	ldr	r2, [pc, #16]	@ (8010414 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	601a      	str	r2, [r3, #0]
    }
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4618      	mov	r0, r3
 801040a:	370c      	adds	r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr
 8010414:	0802f974 	.word	0x0802f974

08010418 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
    }
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f7ff ffe9 	bl	80103f8 <_ZN8touchgfx8DrawableD1Ev>
 8010426:	2128      	movs	r1, #40	@ 0x28
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f01b fbc2 	bl	802bbb2 <_ZdlPvj>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4618      	mov	r0, r3
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8010446:	2b00      	cmp	r3, #0
 8010448:	d005      	beq.n	8010456 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	3314      	adds	r3, #20
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	4798      	blx	r3
        }
    }
 8010456:	bf00      	nop
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 801045e:	b480      	push	{r7}
 8010460:	b083      	sub	sp, #12
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010466:	2300      	movs	r3, #0
    }
 8010468:	4618      	mov	r0, r3
 801046a:	370c      	adds	r7, #12
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr

08010474 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	4608      	mov	r0, r1
 801047e:	4611      	mov	r1, r2
 8010480:	461a      	mov	r2, r3
 8010482:	4603      	mov	r3, r0
 8010484:	817b      	strh	r3, [r7, #10]
 8010486:	460b      	mov	r3, r1
 8010488:	813b      	strh	r3, [r7, #8]
 801048a:	4613      	mov	r3, r2
 801048c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 801048e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010492:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010496:	4619      	mov	r1, r3
 8010498:	68f8      	ldr	r0, [r7, #12]
 801049a:	f000 f82a 	bl	80104f2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 801049e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80104a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104a6:	4619      	mov	r1, r3
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f000 f87e 	bl	80105aa <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80104ae:	bf00      	nop
 80104b0:	3710      	adds	r7, #16
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80104b6:	b480      	push	{r7}
 80104b8:	b083      	sub	sp, #12
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
 80104be:	460b      	mov	r3, r1
 80104c0:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	887a      	ldrh	r2, [r7, #2]
 80104c6:	809a      	strh	r2, [r3, #4]
    }
 80104c8:	bf00      	nop
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	460b      	mov	r3, r1
 80104de:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	887a      	ldrh	r2, [r7, #2]
 80104e4:	80da      	strh	r2, [r3, #6]
    }
 80104e6:	bf00      	nop
 80104e8:	370c      	adds	r7, #12
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr

080104f2 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b082      	sub	sp, #8
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	460b      	mov	r3, r1
 80104fc:	807b      	strh	r3, [r7, #2]
 80104fe:	4613      	mov	r3, r2
 8010500:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	3330      	adds	r3, #48	@ 0x30
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801050e:	4611      	mov	r1, r2
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	4798      	blx	r3
        setY(y);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	3334      	adds	r3, #52	@ 0x34
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010520:	4611      	mov	r1, r2
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	4798      	blx	r3
    }
 8010526:	bf00      	nop
 8010528:	3708      	adds	r7, #8
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 801052e:	b480      	push	{r7}
 8010530:	b083      	sub	sp, #12
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
 8010536:	460b      	mov	r3, r1
 8010538:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	887a      	ldrh	r2, [r7, #2]
 801053e:	811a      	strh	r2, [r3, #8]
    }
 8010540:	bf00      	nop
 8010542:	370c      	adds	r7, #12
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr

0801054c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 801054c:	b480      	push	{r7}
 801054e:	b083      	sub	sp, #12
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	460b      	mov	r3, r1
 8010556:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	887a      	ldrh	r2, [r7, #2]
 801055c:	815a      	strh	r2, [r3, #10]
    }
 801055e:	bf00      	nop
 8010560:	370c      	adds	r7, #12
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr

0801056a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 801056a:	b480      	push	{r7}
 801056c:	b083      	sub	sp, #12
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
    {
    }
 8010572:	bf00      	nop
 8010574:	370c      	adds	r7, #12
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr

0801057e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 801057e:	b480      	push	{r7}
 8010580:	b083      	sub	sp, #12
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
 8010586:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010588:	bf00      	nop
 801058a:	370c      	adds	r7, #12
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr

08010594 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 801059e:	bf00      	nop
 80105a0:	370c      	adds	r7, #12
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr

080105aa <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b082      	sub	sp, #8
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
 80105b2:	460b      	mov	r3, r1
 80105b4:	807b      	strh	r3, [r7, #2]
 80105b6:	4613      	mov	r3, r2
 80105b8:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	3338      	adds	r3, #56	@ 0x38
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80105c6:	4611      	mov	r1, r2
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	4798      	blx	r3
        setHeight(height);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	333c      	adds	r3, #60	@ 0x3c
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80105d8:	4611      	mov	r1, r2
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	4798      	blx	r3
    }
 80105de:	bf00      	nop
 80105e0:	3708      	adds	r7, #8
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}

080105e6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80105e6:	b480      	push	{r7}
 80105e8:	b083      	sub	sp, #12
 80105ea:	af00      	add	r7, sp, #0
 80105ec:	6078      	str	r0, [r7, #4]
 80105ee:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80105f0:	bf00      	nop
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr

080105fc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80105fc:	b480      	push	{r7}
 80105fe:	b083      	sub	sp, #12
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
    {
    }
 8010604:	bf00      	nop
 8010606:	370c      	adds	r7, #12
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 801061e:	4618      	mov	r0, r3
 8010620:	370c      	adds	r7, #12
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr

0801062a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 801062a:	b480      	push	{r7}
 801062c:	b083      	sub	sp, #12
 801062e:	af00      	add	r7, sp, #0
 8010630:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 8010638:	4618      	mov	r0, r3
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	460b      	mov	r3, r1
 801064e:	807b      	strh	r3, [r7, #2]
 8010650:	4613      	mov	r3, r2
 8010652:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	3354      	adds	r3, #84	@ 0x54
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	8879      	ldrh	r1, [r7, #2]
 801065e:	687a      	ldr	r2, [r7, #4]
 8010660:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010664:	b292      	uxth	r2, r2
 8010666:	1a8a      	subs	r2, r1, r2
 8010668:	b292      	uxth	r2, r2
 801066a:	b210      	sxth	r0, r2
 801066c:	8839      	ldrh	r1, [r7, #0]
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010674:	b292      	uxth	r2, r2
 8010676:	1a8a      	subs	r2, r1, r2
 8010678:	b292      	uxth	r2, r2
 801067a:	b212      	sxth	r2, r2
 801067c:	4601      	mov	r1, r0
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	4798      	blx	r3
    }
 8010682:	bf00      	nop
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}

0801068a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 801068a:	b480      	push	{r7}
 801068c:	b083      	sub	sp, #12
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010698:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106a0:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106a8:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 80106aa:	bf00      	nop
 80106ac:	370c      	adds	r7, #12
 80106ae:	46bd      	mov	sp, r7
 80106b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b4:	4770      	bx	lr

080106b6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b084      	sub	sp, #16
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	60f8      	str	r0, [r7, #12]
 80106be:	60b9      	str	r1, [r7, #8]
 80106c0:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 80106c2:	68f8      	ldr	r0, [r7, #12]
 80106c4:	f7ff ffe1 	bl	801068a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	68fa      	ldr	r2, [r7, #12]
 80106d4:	601a      	str	r2, [r3, #0]
    }
 80106d6:	bf00      	nop
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80106de:	b580      	push	{r7, lr}
 80106e0:	b084      	sub	sp, #16
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	60f8      	str	r0, [r7, #12]
 80106e6:	607b      	str	r3, [r7, #4]
 80106e8:	460b      	mov	r3, r1
 80106ea:	817b      	strh	r3, [r7, #10]
 80106ec:	4613      	mov	r3, r2
 80106ee:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7ff ff8c 	bl	8010610 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d008      	beq.n	8010710 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	4618      	mov	r0, r3
 8010702:	f7ff ff92 	bl	801062a <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010706:	4603      	mov	r3, r0
 8010708:	2b00      	cmp	r3, #0
 801070a:	d001      	beq.n	8010710 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801070c:	2301      	movs	r3, #1
 801070e:	e000      	b.n	8010712 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010710:	2300      	movs	r3, #0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d002      	beq.n	801071c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010716:	68fa      	ldr	r2, [r7, #12]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	601a      	str	r2, [r3, #0]
        }
    }
 801071c:	bf00      	nop
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	4618      	mov	r0, r3
 8010730:	f7ff fe32 	bl	8010398 <_ZN8touchgfx8DrawableC1Ev>
 8010734:	4a05      	ldr	r2, [pc, #20]	@ (801074c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	601a      	str	r2, [r3, #0]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2200      	movs	r2, #0
 801073e:	629a      	str	r2, [r3, #40]	@ 0x28
    {
    }
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	4618      	mov	r0, r3
 8010744:	3708      	adds	r7, #8
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	0802f248 	.word	0x0802f248

08010750 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	4a05      	ldr	r2, [pc, #20]	@ (8010770 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	601a      	str	r2, [r3, #0]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	4618      	mov	r0, r3
 8010762:	f7ff fe49 	bl	80103f8 <_ZN8touchgfx8DrawableD1Ev>
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	4618      	mov	r0, r3
 801076a:	3708      	adds	r7, #8
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	0802f248 	.word	0x0802f248

08010774 <_ZN8touchgfx9ContainerD0Ev>:
 8010774:	b580      	push	{r7, lr}
 8010776:	b082      	sub	sp, #8
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7ff ffe7 	bl	8010750 <_ZN8touchgfx9ContainerD1Ev>
 8010782:	212c      	movs	r1, #44	@ 0x2c
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f01b fa14 	bl	802bbb2 <_ZdlPvj>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	4618      	mov	r0, r3
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
    {
 801079c:	4a06      	ldr	r2, [pc, #24]	@ (80107b8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	601a      	str	r2, [r3, #0]
    }
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	3304      	adds	r3, #4
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7ff ffd2 	bl	8010750 <_ZN8touchgfx9ContainerD1Ev>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4618      	mov	r0, r3
 80107b0:	3708      	adds	r7, #8
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	bf00      	nop
 80107b8:	0802fa94 	.word	0x0802fa94

080107bc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
    }
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f7ff ffe5 	bl	8010794 <_ZN8touchgfx6ScreenD1Ev>
 80107ca:	213c      	movs	r1, #60	@ 0x3c
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f01b f9f0 	bl	802bbb2 <_ZdlPvj>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	4618      	mov	r0, r3
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
    {
    }
 80107e4:	bf00      	nop
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
    {
    }
 80107f8:	bf00      	nop
 80107fa:	370c      	adds	r7, #12
 80107fc:	46bd      	mov	sp, r7
 80107fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010802:	4770      	bx	lr

08010804 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
    {
    }
 801080c:	bf00      	nop
 801080e:	370c      	adds	r7, #12
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
    {
    }
 8010820:	bf00      	nop
 8010822:	370c      	adds	r7, #12
 8010824:	46bd      	mov	sp, r7
 8010826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082a:	4770      	bx	lr

0801082c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	460b      	mov	r3, r1
 8010836:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8010838:	bf00      	nop
 801083a:	370c      	adds	r7, #12
 801083c:	46bd      	mov	sp, r7
 801083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010842:	4770      	bx	lr

08010844 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	3304      	adds	r3, #4
 8010852:	6839      	ldr	r1, [r7, #0]
 8010854:	4618      	mov	r0, r3
 8010856:	f003 fa85 	bl	8013d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801085a:	bf00      	nop
 801085c:	3708      	adds	r7, #8
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
	...

08010864 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	4618      	mov	r0, r3
 8010870:	f7ff fd92 	bl	8010398 <_ZN8touchgfx8DrawableC1Ev>
 8010874:	4a03      	ldr	r2, [pc, #12]	@ (8010884 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	601a      	str	r2, [r3, #0]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	4618      	mov	r0, r3
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	0802eb6c 	.word	0x0802eb6c

08010888 <_ZN8touchgfx6WidgetD1Ev>:
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	4a05      	ldr	r2, [pc, #20]	@ (80108a8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	601a      	str	r2, [r3, #0]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	f7ff fdad 	bl	80103f8 <_ZN8touchgfx8DrawableD1Ev>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	4618      	mov	r0, r3
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	0802eb6c 	.word	0x0802eb6c

080108ac <_ZN8touchgfx6WidgetD0Ev>:
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f7ff ffe7 	bl	8010888 <_ZN8touchgfx6WidgetD1Ev>
 80108ba:	2128      	movs	r1, #40	@ 0x28
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f01b f978 	bl	802bbb2 <_ZdlPvj>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4618      	mov	r0, r3
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4618      	mov	r0, r3
 80108d8:	2326      	movs	r3, #38	@ 0x26
 80108da:	461a      	mov	r2, r3
 80108dc:	2100      	movs	r1, #0
 80108de:	f01c fb69 	bl	802cfb4 <memset>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7ff ffbd 	bl	8010864 <_ZN8touchgfx6WidgetC1Ev>
 80108ea:	4a09      	ldr	r2, [pc, #36]	@ (8010910 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	601a      	str	r2, [r3, #0]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	22ff      	movs	r2, #255	@ 0xff
 80108f4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	3328      	adds	r3, #40	@ 0x28
 80108fc:	2100      	movs	r1, #0
 80108fe:	4618      	mov	r0, r3
 8010900:	f7ff fd24 	bl	801034c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	4618      	mov	r0, r3
 8010908:	3708      	adds	r7, #8
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	0802f760 	.word	0x0802f760

08010914 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	683a      	ldr	r2, [r7, #0]
 8010922:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8010924:	bf00      	nop
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	4a05      	ldr	r2, [pc, #20]	@ (8010950 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	601a      	str	r2, [r3, #0]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	4618      	mov	r0, r3
 8010942:	f7ff ff27 	bl	8010794 <_ZN8touchgfx6ScreenD1Ev>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4618      	mov	r0, r3
 801094a:	3708      	adds	r7, #8
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}
 8010950:	0802eb38 	.word	0x0802eb38

08010954 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f7ff ffe7 	bl	8010930 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8010962:	2140      	movs	r1, #64	@ 0x40
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f01b f924 	bl	802bbb2 <_ZdlPvj>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	4618      	mov	r0, r3
 801096e:	3708      	adds	r7, #8
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	4a05      	ldr	r2, [pc, #20]	@ (8010994 <_ZN8touchgfx3BoxD1Ev+0x20>)
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	601a      	str	r2, [r3, #0]
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	4618      	mov	r0, r3
 8010986:	f7ff ff7f 	bl	8010888 <_ZN8touchgfx6WidgetD1Ev>
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	4618      	mov	r0, r3
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	0802f760 	.word	0x0802f760

08010998 <_ZN8touchgfx3BoxD0Ev>:
 8010998:	b580      	push	{r7, lr}
 801099a:	b082      	sub	sp, #8
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f7ff ffe7 	bl	8010974 <_ZN8touchgfx3BoxD1Ev>
 80109a6:	212c      	movs	r1, #44	@ 0x2c
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f01b f902 	bl	802bbb2 <_ZdlPvj>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	4618      	mov	r0, r3
 80109b2:	3708      	adds	r7, #8
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

screenViewBase::screenViewBase()
 80109b8:	b590      	push	{r4, r7, lr}
 80109ba:	b08b      	sub	sp, #44	@ 0x2c
 80109bc:	af02      	add	r7, sp, #8
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	4618      	mov	r0, r3
 80109c4:	f000 f986 	bl	8010cd4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 80109c8:	4a96      	ldr	r2, [pc, #600]	@ (8010c24 <_ZN14screenViewBaseC1Ev+0x26c>)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	601a      	str	r2, [r3, #0]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	3340      	adds	r3, #64	@ 0x40
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7ff ff7a 	bl	80108cc <_ZN8touchgfx3BoxC1Ev>
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	336c      	adds	r3, #108	@ 0x6c
 80109dc:	4618      	mov	r0, r3
 80109de:	f003 fd75 	bl	80144cc <_ZN8touchgfx14SwipeContainerC1Ev>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7ff fe9b 	bl	8010724 <_ZN8touchgfx9ContainerC1Ev>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7ff fe95 	bl	8010724 <_ZN8touchgfx9ContainerC1Ev>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7ff ff63 	bl	80108cc <_ZN8touchgfx3BoxC1Ev>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7ff fe89 	bl	8010724 <_ZN8touchgfx9ContainerC1Ev>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7ff ff57 	bl	80108cc <_ZN8touchgfx3BoxC1Ev>
{
    __background.setPosition(0, 0, 240, 296);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8010a24:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8010a28:	9300      	str	r3, [sp, #0]
 8010a2a:	23f0      	movs	r3, #240	@ 0xf0
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	2100      	movs	r1, #0
 8010a30:	f7ff fd20 	bl	8010474 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	767b      	strb	r3, [r7, #25]
 8010a3e:	2300      	movs	r3, #0
 8010a40:	763b      	strb	r3, [r7, #24]
 8010a42:	2300      	movs	r3, #0
 8010a44:	75fb      	strb	r3, [r7, #23]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8010a46:	7e7b      	ldrb	r3, [r7, #25]
 8010a48:	041a      	lsls	r2, r3, #16
 8010a4a:	7e3b      	ldrb	r3, [r7, #24]
 8010a4c:	021b      	lsls	r3, r3, #8
 8010a4e:	431a      	orrs	r2, r3
 8010a50:	7dfb      	ldrb	r3, [r7, #23]
 8010a52:	4313      	orrs	r3, r2
 8010a54:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010a58:	f107 0310 	add.w	r3, r7, #16
 8010a5c:	4611      	mov	r1, r2
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7ff fc74 	bl	801034c <_ZN8touchgfx9colortypeC1Em>
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	4619      	mov	r1, r3
 8010a68:	4620      	mov	r0, r4
 8010a6a:	f7ff ff53 	bl	8010914 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	3340      	adds	r3, #64	@ 0x40
 8010a74:	4619      	mov	r1, r3
 8010a76:	4610      	mov	r0, r2
 8010a78:	f7ff fee4 	bl	8010844 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    swipeContainer1.setXY(0, 0);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	336c      	adds	r3, #108	@ 0x6c
 8010a80:	2200      	movs	r2, #0
 8010a82:	2100      	movs	r1, #0
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7ff fd34 	bl	80104f2 <_ZN8touchgfx8Drawable5setXYEss>
    swipeContainer1.setSwipeCutoff(50);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	336c      	adds	r3, #108	@ 0x6c
 8010a8e:	2132      	movs	r1, #50	@ 0x32
 8010a90:	4618      	mov	r0, r3
 8010a92:	f003 fbe6 	bl	8014262 <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    swipeContainer1.setEndSwipeElasticWidth(50);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	336c      	adds	r3, #108	@ 0x6c
 8010a9a:	2132      	movs	r1, #50	@ 0x32
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f003 fc65 	bl	801436c <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>

    swipeContainer1Page1.setWidth(240);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010aa8:	21f0      	movs	r1, #240	@ 0xf0
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7ff fd3f 	bl	801052e <_ZN8touchgfx8Drawable8setWidthEs>
    swipeContainer1Page1.setHeight(296);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010ab6:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7ff fd46 	bl	801054c <_ZN8touchgfx8Drawable9setHeightEs>
    swipeContainer1.add(swipeContainer1Page1);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010acc:	4619      	mov	r1, r3
 8010ace:	4610      	mov	r0, r2
 8010ad0:	f003 fdfd 	bl	80146ce <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    swipeContainer1Page2.setWidth(240);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8010ada:	21f0      	movs	r1, #240	@ 0xf0
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7ff fd26 	bl	801052e <_ZN8touchgfx8Drawable8setWidthEs>
    swipeContainer1Page2.setHeight(296);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8010ae8:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7ff fd2d 	bl	801054c <_ZN8touchgfx8Drawable9setHeightEs>
    box1.setPosition(0, 0, 240, 296);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8010af8:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	23f0      	movs	r3, #240	@ 0xf0
 8010b00:	2200      	movs	r2, #0
 8010b02:	2100      	movs	r1, #0
 8010b04:	f7ff fcb6 	bl	8010474 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f503 74de 	add.w	r4, r3, #444	@ 0x1bc
 8010b0e:	23ff      	movs	r3, #255	@ 0xff
 8010b10:	773b      	strb	r3, [r7, #28]
 8010b12:	23ff      	movs	r3, #255	@ 0xff
 8010b14:	76fb      	strb	r3, [r7, #27]
 8010b16:	23ff      	movs	r3, #255	@ 0xff
 8010b18:	76bb      	strb	r3, [r7, #26]
 8010b1a:	7f3b      	ldrb	r3, [r7, #28]
 8010b1c:	041a      	lsls	r2, r3, #16
 8010b1e:	7efb      	ldrb	r3, [r7, #27]
 8010b20:	021b      	lsls	r3, r3, #8
 8010b22:	431a      	orrs	r2, r3
 8010b24:	7ebb      	ldrb	r3, [r7, #26]
 8010b26:	4313      	orrs	r3, r2
 8010b28:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010b2c:	f107 030c 	add.w	r3, r7, #12
 8010b30:	4611      	mov	r1, r2
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7ff fc0a 	bl	801034c <_ZN8touchgfx9colortypeC1Em>
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f7ff fee9 	bl	8010914 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    swipeContainer1Page2.add(box1);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f503 72c8 	add.w	r2, r3, #400	@ 0x190
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010b4e:	4619      	mov	r1, r3
 8010b50:	4610      	mov	r0, r2
 8010b52:	f003 f907 	bl	8013d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    swipeContainer1.add(swipeContainer1Page2);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8010b62:	4619      	mov	r1, r3
 8010b64:	4610      	mov	r0, r2
 8010b66:	f003 fdb2 	bl	80146ce <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    swipeContainer1Page3.setWidth(240);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010b70:	21f0      	movs	r1, #240	@ 0xf0
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7ff fcdb 	bl	801052e <_ZN8touchgfx8Drawable8setWidthEs>
    swipeContainer1Page3.setHeight(296);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010b7e:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7ff fce2 	bl	801054c <_ZN8touchgfx8Drawable9setHeightEs>
    box2.setPosition(0, 0, 240, 296);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 8010b8e:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8010b92:	9300      	str	r3, [sp, #0]
 8010b94:	23f0      	movs	r3, #240	@ 0xf0
 8010b96:	2200      	movs	r2, #0
 8010b98:	2100      	movs	r1, #0
 8010b9a:	f7ff fc6b 	bl	8010474 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFromRGB(250, 25, 25));
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f503 7405 	add.w	r4, r3, #532	@ 0x214
 8010ba4:	23fa      	movs	r3, #250	@ 0xfa
 8010ba6:	77fb      	strb	r3, [r7, #31]
 8010ba8:	2319      	movs	r3, #25
 8010baa:	77bb      	strb	r3, [r7, #30]
 8010bac:	2319      	movs	r3, #25
 8010bae:	777b      	strb	r3, [r7, #29]
 8010bb0:	7ffb      	ldrb	r3, [r7, #31]
 8010bb2:	041a      	lsls	r2, r3, #16
 8010bb4:	7fbb      	ldrb	r3, [r7, #30]
 8010bb6:	021b      	lsls	r3, r3, #8
 8010bb8:	431a      	orrs	r2, r3
 8010bba:	7f7b      	ldrb	r3, [r7, #29]
 8010bbc:	4313      	orrs	r3, r2
 8010bbe:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010bc2:	f107 0308 	add.w	r3, r7, #8
 8010bc6:	4611      	mov	r1, r2
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7ff fbbf 	bl	801034c <_ZN8touchgfx9colortypeC1Em>
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	f7ff fe9e 	bl	8010914 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    swipeContainer1Page3.add(box2);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8010be4:	4619      	mov	r1, r3
 8010be6:	4610      	mov	r0, r2
 8010be8:	f003 f8bc 	bl	8013d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    swipeContainer1.add(swipeContainer1Page3);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	4610      	mov	r0, r2
 8010bfc:	f003 fd67 	bl	80146ce <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    swipeContainer1.setSelectedPage(1);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	336c      	adds	r3, #108	@ 0x6c
 8010c04:	2101      	movs	r1, #1
 8010c06:	4618      	mov	r0, r3
 8010c08:	f003 fd52 	bl	80146b0 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
    add(swipeContainer1);
 8010c0c:	687a      	ldr	r2, [r7, #4]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	336c      	adds	r3, #108	@ 0x6c
 8010c12:	4619      	mov	r1, r3
 8010c14:	4610      	mov	r0, r2
 8010c16:	f7ff fe15 	bl	8010844 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3724      	adds	r7, #36	@ 0x24
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd90      	pop	{r4, r7, pc}
 8010c24:	0802eb04 	.word	0x0802eb04

08010c28 <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	4a19      	ldr	r2, [pc, #100]	@ (8010c98 <_ZN14screenViewBaseD1Ev+0x70>)
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	601a      	str	r2, [r3, #0]
{

}
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7ff fe99 	bl	8010974 <_ZN8touchgfx3BoxD1Ev>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7ff fd81 	bl	8010750 <_ZN8touchgfx9ContainerD1Ev>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7ff fe8d 	bl	8010974 <_ZN8touchgfx3BoxD1Ev>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7ff fd75 	bl	8010750 <_ZN8touchgfx9ContainerD1Ev>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7ff fd6f 	bl	8010750 <_ZN8touchgfx9ContainerD1Ev>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	336c      	adds	r3, #108	@ 0x6c
 8010c76:	4618      	mov	r0, r3
 8010c78:	f003 fafe 	bl	8014278 <_ZN8touchgfx14SwipeContainerD1Ev>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	3340      	adds	r3, #64	@ 0x40
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7ff fe77 	bl	8010974 <_ZN8touchgfx3BoxD1Ev>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7ff fe51 	bl	8010930 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	4618      	mov	r0, r3
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	0802eb04 	.word	0x0802eb04

08010c9c <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
}
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f7ff ffbf 	bl	8010c28 <_ZN14screenViewBaseD1Ev>
 8010caa:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f01a ff7f 	bl	802bbb2 <_ZdlPvj>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3708      	adds	r7, #8
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8010cbe:	b480      	push	{r7}
 8010cc0:	b083      	sub	sp, #12
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]

}
 8010cc6:	bf00      	nop
 8010cc8:	370c      	adds	r7, #12
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr
	...

08010cd4 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f00a fd1c 	bl	801b71c <_ZN8touchgfx6ScreenC1Ev>
 8010ce4:	4a05      	ldr	r2, [pc, #20]	@ (8010cfc <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	601a      	str	r2, [r3, #0]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2200      	movs	r2, #0
 8010cee:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3708      	adds	r7, #8
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	0802eb38 	.word	0x0802eb38

08010d00 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8010d00:	b480      	push	{r7}
 8010d02:	af00      	add	r7, sp, #0
    return bitmap_database;
 8010d04:	4b02      	ldr	r3, [pc, #8]	@ (8010d10 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr
 8010d10:	0802ebcc 	.word	0x0802ebcc

08010d14 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8010d14:	b480      	push	{r7}
 8010d16:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8010d18:	2302      	movs	r3, #2
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d22:	4770      	bx	lr

08010d24 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8010d24:	b480      	push	{r7}
 8010d26:	b085      	sub	sp, #20
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	607a      	str	r2, [r7, #4]
 8010d30:	817b      	strh	r3, [r7, #10]
        return 0;
 8010d32:	2300      	movs	r3, #0
    }
 8010d34:	4618      	mov	r0, r3
 8010d36:	3714      	adds	r7, #20
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
        return 0;
 8010d48:	2300      	movs	r3, #0
    }
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	370c      	adds	r7, #12
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr

08010d56 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8010d56:	b480      	push	{r7}
 8010d58:	b083      	sub	sp, #12
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
        return 0;
 8010d5e:	2300      	movs	r3, #0
    }
 8010d60:	4618      	mov	r0, r3
 8010d62:	370c      	adds	r7, #12
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	4613      	mov	r3, r2
 8010d78:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8010d7a:	4a07      	ldr	r2, [pc, #28]	@ (8010d98 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010d80:	4a06      	ldr	r2, [pc, #24]	@ (8010d9c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8010d86:	4a06      	ldr	r2, [pc, #24]	@ (8010da0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010d88:	88fb      	ldrh	r3, [r7, #6]
 8010d8a:	8013      	strh	r3, [r2, #0]
    }
 8010d8c:	bf00      	nop
 8010d8e:	3714      	adds	r7, #20
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr
 8010d98:	2005bafc 	.word	0x2005bafc
 8010d9c:	2005bb04 	.word	0x2005bb04
 8010da0:	2005bb00 	.word	0x2005bb00

08010da4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010da4:	b40e      	push	{r1, r2, r3}
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b085      	sub	sp, #20
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8010dae:	f107 0320 	add.w	r3, r7, #32
 8010db2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	69fa      	ldr	r2, [r7, #28]
 8010db8:	2100      	movs	r1, #0
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f009 fd42 	bl	801a844 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010dc4:	89fb      	ldrh	r3, [r7, #14]
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3714      	adds	r7, #20
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010dd0:	b003      	add	sp, #12
 8010dd2:	4770      	bx	lr

08010dd4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010dd4:	b40c      	push	{r2, r3}
 8010dd6:	b580      	push	{r7, lr}
 8010dd8:	b084      	sub	sp, #16
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	6078      	str	r0, [r7, #4]
 8010dde:	460b      	mov	r3, r1
 8010de0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8010de2:	f107 031c 	add.w	r3, r7, #28
 8010de6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8010de8:	78f9      	ldrb	r1, [r7, #3]
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	69ba      	ldr	r2, [r7, #24]
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f009 fd28 	bl	801a844 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010df4:	4603      	mov	r3, r0
 8010df6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010df8:	89fb      	ldrh	r3, [r7, #14]
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3710      	adds	r7, #16
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010e04:	b002      	add	sp, #8
 8010e06:	4770      	bx	lr

08010e08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b08a      	sub	sp, #40	@ 0x28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	460b      	mov	r3, r1
 8010e12:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d016      	beq.n	8010e4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	3322      	adds	r3, #34	@ 0x22
 8010e20:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8010e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e24:	8adb      	ldrh	r3, [r3, #22]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d105      	bne.n	8010e36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010e2a:	4b43      	ldr	r3, [pc, #268]	@ (8010f38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010e2c:	4a43      	ldr	r2, [pc, #268]	@ (8010f3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010e2e:	21c5      	movs	r1, #197	@ 0xc5
 8010e30:	4843      	ldr	r0, [pc, #268]	@ (8010f40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010e32:	f01b fdb3 	bl	802c99c <__assert_func>
            return buffer[pos];
 8010e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e38:	8a9b      	ldrh	r3, [r3, #20]
 8010e3a:	461a      	mov	r2, r3
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d001      	beq.n	8010e4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010e46:	2301      	movs	r3, #1
 8010e48:	e000      	b.n	8010e4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d06a      	beq.n	8010f26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f00b fb74 	bl	801c53e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	3322      	adds	r3, #34	@ 0x22
 8010e5a:	623b      	str	r3, [r7, #32]
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8010e60:	6a3b      	ldr	r3, [r7, #32]
 8010e62:	8adb      	ldrh	r3, [r3, #22]
 8010e64:	8bfa      	ldrh	r2, [r7, #30]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d305      	bcc.n	8010e76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8010e6a:	4b36      	ldr	r3, [pc, #216]	@ (8010f44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8010e6c:	4a36      	ldr	r2, [pc, #216]	@ (8010f48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8010e6e:	21cb      	movs	r1, #203	@ 0xcb
 8010e70:	4833      	ldr	r0, [pc, #204]	@ (8010f40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010e72:	f01b fd93 	bl	802c99c <__assert_func>
            const uint16_t index = pos + offset;
 8010e76:	6a3b      	ldr	r3, [r7, #32]
 8010e78:	8a9a      	ldrh	r2, [r3, #20]
 8010e7a:	8bfb      	ldrh	r3, [r7, #30]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8010e80:	8bbb      	ldrh	r3, [r7, #28]
 8010e82:	2b09      	cmp	r3, #9
 8010e84:	d801      	bhi.n	8010e8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8010e86:	8bbb      	ldrh	r3, [r7, #28]
 8010e88:	e001      	b.n	8010e8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8010e8a:	8bbb      	ldrh	r3, [r7, #28]
 8010e8c:	3b0a      	subs	r3, #10
 8010e8e:	6a3a      	ldr	r2, [r7, #32]
 8010e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e94:	f640 123f 	movw	r2, #2367	@ 0x93f
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	bf0c      	ite	eq
 8010e9c:	2301      	moveq	r3, #1
 8010e9e:	2300      	movne	r3, #0
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d03f      	beq.n	8010f26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	3322      	adds	r3, #34	@ 0x22
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	3222      	adds	r2, #34	@ 0x22
 8010eae:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8010eb0:	68ba      	ldr	r2, [r7, #8]
 8010eb2:	8ad2      	ldrh	r2, [r2, #22]
 8010eb4:	2a00      	cmp	r2, #0
 8010eb6:	d105      	bne.n	8010ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8010f38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010eba:	4a20      	ldr	r2, [pc, #128]	@ (8010f3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010ebc:	21c5      	movs	r1, #197	@ 0xc5
 8010ebe:	4820      	ldr	r0, [pc, #128]	@ (8010f40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010ec0:	f01b fd6c 	bl	802c99c <__assert_func>
            return buffer[pos];
 8010ec4:	68ba      	ldr	r2, [r7, #8]
 8010ec6:	8a92      	ldrh	r2, [r2, #20]
 8010ec8:	4611      	mov	r1, r2
 8010eca:	68ba      	ldr	r2, [r7, #8]
 8010ecc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8010ed0:	613b      	str	r3, [r7, #16]
 8010ed2:	4613      	mov	r3, r2
 8010ed4:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	8adb      	ldrh	r3, [r3, #22]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d806      	bhi.n	8010eec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8010ede:	4b1b      	ldr	r3, [pc, #108]	@ (8010f4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8010ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8010f50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8010ee2:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8010ee6:	4816      	ldr	r0, [pc, #88]	@ (8010f40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010ee8:	f01b fd58 	bl	802c99c <__assert_func>
            const uint16_t index = pos + 1;
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	8a9b      	ldrh	r3, [r3, #20]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010ef4:	89bb      	ldrh	r3, [r7, #12]
 8010ef6:	2b09      	cmp	r3, #9
 8010ef8:	d801      	bhi.n	8010efe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8010efa:	89bb      	ldrh	r3, [r7, #12]
 8010efc:	e000      	b.n	8010f00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8010efe:	2300      	movs	r3, #0
 8010f00:	693a      	ldr	r2, [r7, #16]
 8010f02:	89f9      	ldrh	r1, [r7, #14]
 8010f04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8010f08:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	3322      	adds	r3, #34	@ 0x22
 8010f0e:	61bb      	str	r3, [r7, #24]
 8010f10:	f640 133f 	movw	r3, #2367	@ 0x93f
 8010f14:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8010f16:	69bb      	ldr	r3, [r7, #24]
 8010f18:	8a9b      	ldrh	r3, [r3, #20]
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	69bb      	ldr	r3, [r7, #24]
 8010f1e:	8afa      	ldrh	r2, [r7, #22]
 8010f20:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8010f24:	bf00      	nop
        }
    }
    return getNextChar();
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f00b fa0c 	bl	801c344 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010f2c:	4603      	mov	r3, r0
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3728      	adds	r7, #40	@ 0x28
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	0802deb8 	.word	0x0802deb8
 8010f3c:	0802dec4 	.word	0x0802dec4
 8010f40:	0802df70 	.word	0x0802df70
 8010f44:	0802dfb8 	.word	0x0802dfb8
 8010f48:	0802dfc8 	.word	0x0802dfc8
 8010f4c:	0802e09c 	.word	0x0802e09c
 8010f50:	0802e0a8 	.word	0x0802e0a8

08010f54 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f00b f9b8 	bl	801c2d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8010f62:	bf00      	nop
 8010f64:	3708      	adds	r7, #8
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
	...

08010f6c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8010f6c:	b590      	push	{r4, r7, lr}
 8010f6e:	b085      	sub	sp, #20
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	4603      	mov	r3, r0
 8010f74:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8010f76:	2300      	movs	r3, #0
 8010f78:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8010f7a:	88fb      	ldrh	r3, [r7, #6]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d127      	bne.n	8010fd0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8010f80:	88fb      	ldrh	r3, [r7, #6]
 8010f82:	4a1e      	ldr	r2, [pc, #120]	@ (8010ffc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d016      	beq.n	8010fba <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8010f8c:	88fb      	ldrh	r3, [r7, #6]
 8010f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8010ffc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f94:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	68ba      	ldr	r2, [r7, #8]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	4a18      	ldr	r2, [pc, #96]	@ (8011000 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010fa0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	685b      	ldr	r3, [r3, #4]
 8010fa6:	68ba      	ldr	r2, [r7, #8]
 8010fa8:	4413      	add	r3, r2
 8010faa:	4a16      	ldr	r2, [pc, #88]	@ (8011004 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010fac:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	689b      	ldr	r3, [r3, #8]
 8010fb2:	68ba      	ldr	r2, [r7, #8]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	60fb      	str	r3, [r7, #12]
 8010fb8:	e00a      	b.n	8010fd0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8010fba:	4b11      	ldr	r3, [pc, #68]	@ (8011000 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010fbc:	4a12      	ldr	r2, [pc, #72]	@ (8011008 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8010fbe:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8010fc0:	4a12      	ldr	r2, [pc, #72]	@ (801100c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8010fc2:	4b10      	ldr	r3, [pc, #64]	@ (8011004 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010fc4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010fc6:	88fb      	ldrh	r3, [r7, #6]
 8010fc8:	4a11      	ldr	r2, [pc, #68]	@ (8011010 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fce:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d00d      	beq.n	8010ff2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8010fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8011014 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8010fd8:	88fb      	ldrh	r3, [r7, #6]
 8010fda:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010fdc:	f000 f824 	bl	8011028 <_ZN17TypedTextDatabase8getFontsEv>
 8010fe0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8010fe2:	f000 f819 	bl	8011018 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	461a      	mov	r2, r3
 8010fea:	4621      	mov	r1, r4
 8010fec:	68f8      	ldr	r0, [r7, #12]
 8010fee:	f7ff febd 	bl	8010d6c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8010ff2:	bf00      	nop
 8010ff4:	3714      	adds	r7, #20
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd90      	pop	{r4, r7, pc}
 8010ffa:	bf00      	nop
 8010ffc:	2005a6e8 	.word	0x2005a6e8
 8011000:	2005a6f0 	.word	0x2005a6f0
 8011004:	2005a6f4 	.word	0x2005a6f4
 8011008:	08031088 	.word	0x08031088
 801100c:	08031084 	.word	0x08031084
 8011010:	08031090 	.word	0x08031090
 8011014:	2005a6ec 	.word	0x2005a6ec

08011018 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011018:	b480      	push	{r7}
 801101a:	af00      	add	r7, sp, #0
    return 0;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr

08011028 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011028:	b480      	push	{r7}
 801102a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 801102c:	4b02      	ldr	r3, [pc, #8]	@ (8011038 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801102e:	4618      	mov	r0, r3
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr
 8011038:	2005a6f8 	.word	0x2005a6f8

0801103c <_Z41__static_initialization_and_destruction_0v>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 801103c:	b580      	push	{r7, lr}
 801103e:	af00      	add	r7, sp, #0
    &(getFont_verdana_20_4bpp()),
 8011040:	f7fe fb7e 	bl	800f740 <_Z23getFont_verdana_20_4bppv>
 8011044:	4603      	mov	r3, r0
};
 8011046:	4a07      	ldr	r2, [pc, #28]	@ (8011064 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8011048:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 801104a:	f7fe fbd1 	bl	800f7f0 <_Z23getFont_verdana_40_4bppv>
 801104e:	4603      	mov	r3, r0
};
 8011050:	4a04      	ldr	r2, [pc, #16]	@ (8011064 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8011052:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8011054:	f7fe fb1c 	bl	800f690 <_Z23getFont_verdana_10_4bppv>
 8011058:	4603      	mov	r3, r0
};
 801105a:	4a02      	ldr	r2, [pc, #8]	@ (8011064 <_Z41__static_initialization_and_destruction_0v+0x28>)
 801105c:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 801105e:	bf00      	nop
 8011060:	bd80      	pop	{r7, pc}
 8011062:	bf00      	nop
 8011064:	2005a6f8 	.word	0x2005a6f8

08011068 <_GLOBAL__sub_I_touchgfx_fonts>:
 8011068:	b580      	push	{r7, lr}
 801106a:	af00      	add	r7, sp, #0
 801106c:	f7ff ffe6 	bl	801103c <_Z41__static_initialization_and_destruction_0v>
 8011070:	bd80      	pop	{r7, pc}
	...

08011074 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011074:	b580      	push	{r7, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	4a05      	ldr	r2, [pc, #20]	@ (8011094 <_ZN19FrontendApplicationD1Ev+0x20>)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	601a      	str	r2, [r3, #0]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4618      	mov	r0, r3
 8011086:	f7fe fe3f 	bl	800fd08 <_ZN23FrontendApplicationBaseD1Ev>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4618      	mov	r0, r3
 801108e:	3708      	adds	r7, #8
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	0802ec60 	.word	0x0802ec60

08011098 <_ZN19FrontendApplicationD0Ev>:
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f7ff ffe7 	bl	8011074 <_ZN19FrontendApplicationD1Ev>
 80110a6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f01a fd81 	bl	802bbb2 <_ZdlPvj>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4618      	mov	r0, r3
 80110b4:	3708      	adds	r7, #8
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}

080110ba <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80110ba:	b580      	push	{r7, lr}
 80110bc:	b082      	sub	sp, #8
 80110be:	af00      	add	r7, sp, #0
 80110c0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80110c8:	4618      	mov	r0, r3
 80110ca:	f000 f82d 	bl	8011128 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	4618      	mov	r0, r3
 80110d2:	f008 fb81 	bl	80197d8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80110d6:	bf00      	nop
 80110d8:	3708      	adds	r7, #8
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
	...

080110e0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	687a      	ldr	r2, [r7, #4]
 80110f0:	68b9      	ldr	r1, [r7, #8]
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7fe fe58 	bl	800fda8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80110f8:	4a03      	ldr	r2, [pc, #12]	@ (8011108 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	601a      	str	r2, [r3, #0]
{

}
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	4618      	mov	r0, r3
 8011102:	3710      	adds	r7, #16
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}
 8011108:	0802ec60 	.word	0x0802ec60

0801110c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801110c:	b480      	push	{r7}
 801110e:	b083      	sub	sp, #12
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2200      	movs	r2, #0
 8011118:	601a      	str	r2, [r3, #0]
{

}
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	4618      	mov	r0, r3
 801111e:	370c      	adds	r7, #12
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr

08011128 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011128:	b480      	push	{r7}
 801112a:	b083      	sub	sp, #12
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]

}
 8011130:	bf00      	nop
 8011132:	370c      	adds	r7, #12
 8011134:	46bd      	mov	sp, r7
 8011136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113a:	4770      	bx	lr

0801113c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801113c:	b480      	push	{r7}
 801113e:	b083      	sub	sp, #12
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
    {
    }
 8011144:	bf00      	nop
 8011146:	370c      	adds	r7, #12
 8011148:	46bd      	mov	sp, r7
 801114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114e:	4770      	bx	lr

08011150 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011150:	b480      	push	{r7}
 8011152:	b083      	sub	sp, #12
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
    {
    }
 8011158:	bf00      	nop
 801115a:	370c      	adds	r7, #12
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr

08011164 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8011164:	b480      	push	{r7}
 8011166:	b083      	sub	sp, #12
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
    {
 801116c:	4a04      	ldr	r2, [pc, #16]	@ (8011180 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	601a      	str	r2, [r3, #0]
    }
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	4618      	mov	r0, r3
 8011176:	370c      	adds	r7, #12
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr
 8011180:	0802ecec 	.word	0x0802ecec

08011184 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
    }
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f7ff ffe9 	bl	8011164 <_ZN8touchgfx9PresenterD1Ev>
 8011192:	2104      	movs	r1, #4
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f01a fd0c 	bl	802bbb2 <_ZdlPvj>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4618      	mov	r0, r3
 801119e:	3708      	adds	r7, #8
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
    {
 80111ac:	4a04      	ldr	r2, [pc, #16]	@ (80111c0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	601a      	str	r2, [r3, #0]
    }
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	4618      	mov	r0, r3
 80111b6:	370c      	adds	r7, #12
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr
 80111c0:	0802ecec 	.word	0x0802ecec

080111c4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80111c4:	b480      	push	{r7}
 80111c6:	b083      	sub	sp, #12
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	4a06      	ldr	r2, [pc, #24]	@ (80111e8 <_ZN13ModelListenerC1Ev+0x24>)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	601a      	str	r2, [r3, #0]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2200      	movs	r2, #0
 80111d6:	605a      	str	r2, [r3, #4]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4618      	mov	r0, r3
 80111dc:	370c      	adds	r7, #12
 80111de:	46bd      	mov	sp, r7
 80111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e4:	4770      	bx	lr
 80111e6:	bf00      	nop
 80111e8:	0802ecdc 	.word	0x0802ecdc

080111ec <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80111ec:	b480      	push	{r7}
 80111ee:	b083      	sub	sp, #12
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	4a04      	ldr	r2, [pc, #16]	@ (8011208 <_ZN13ModelListenerD1Ev+0x1c>)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	601a      	str	r2, [r3, #0]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4618      	mov	r0, r3
 80111fe:	370c      	adds	r7, #12
 8011200:	46bd      	mov	sp, r7
 8011202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011206:	4770      	bx	lr
 8011208:	0802ecdc 	.word	0x0802ecdc

0801120c <_ZN13ModelListenerD0Ev>:
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f7ff ffe9 	bl	80111ec <_ZN13ModelListenerD1Ev>
 801121a:	2108      	movs	r1, #8
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f01a fcc8 	bl	802bbb2 <_ZdlPvj>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	4618      	mov	r0, r3
 8011226:	3708      	adds	r7, #8
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}

0801122c <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	4a09      	ldr	r2, [pc, #36]	@ (801125c <_ZN15screenPresenterD1Ev+0x30>)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	601a      	str	r2, [r3, #0]
 801123a:	4a09      	ldr	r2, [pc, #36]	@ (8011260 <_ZN15screenPresenterD1Ev+0x34>)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	605a      	str	r2, [r3, #4]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	3304      	adds	r3, #4
 8011244:	4618      	mov	r0, r3
 8011246:	f7ff ffd1 	bl	80111ec <_ZN13ModelListenerD1Ev>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	4618      	mov	r0, r3
 801124e:	f7ff ff89 	bl	8011164 <_ZN8touchgfx9PresenterD1Ev>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	4618      	mov	r0, r3
 8011256:	3708      	adds	r7, #8
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	0802ecb4 	.word	0x0802ecb4
 8011260:	0802eccc 	.word	0x0802eccc

08011264 <_ZThn4_N15screenPresenterD1Ev>:
 8011264:	f1a0 0004 	sub.w	r0, r0, #4
 8011268:	e7e0      	b.n	801122c <_ZN15screenPresenterD1Ev>
 801126a:	bf00      	nop

0801126c <_ZN15screenPresenterD0Ev>:
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7ff ffd9 	bl	801122c <_ZN15screenPresenterD1Ev>
 801127a:	2110      	movs	r1, #16
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f01a fc98 	bl	802bbb2 <_ZdlPvj>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4618      	mov	r0, r3
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <_ZThn4_N15screenPresenterD0Ev>:
 801128c:	f1a0 0004 	sub.w	r0, r0, #4
 8011290:	e7ec      	b.n	801126c <_ZN15screenPresenterD0Ev>
	...

08011294 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
    : view(v)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7ff ff7f 	bl	80111a4 <_ZN8touchgfx9PresenterC1Ev>
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	3304      	adds	r3, #4
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ff ff8a 	bl	80111c4 <_ZN13ModelListenerC1Ev>
 80112b0:	4a06      	ldr	r2, [pc, #24]	@ (80112cc <_ZN15screenPresenterC1ER10screenView+0x38>)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	601a      	str	r2, [r3, #0]
 80112b6:	4a06      	ldr	r2, [pc, #24]	@ (80112d0 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	605a      	str	r2, [r3, #4]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	683a      	ldr	r2, [r7, #0]
 80112c0:	60da      	str	r2, [r3, #12]
{

}
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	4618      	mov	r0, r3
 80112c6:	3708      	adds	r7, #8
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}
 80112cc:	0802ecb4 	.word	0x0802ecb4
 80112d0:	0802eccc 	.word	0x0802eccc

080112d4 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]

}
 80112dc:	bf00      	nop
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]

}
 80112f0:	bf00      	nop
 80112f2:	370c      	adds	r7, #12
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr

080112fc <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b082      	sub	sp, #8
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	4a05      	ldr	r2, [pc, #20]	@ (801131c <_ZN10screenViewD1Ev+0x20>)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	601a      	str	r2, [r3, #0]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	4618      	mov	r0, r3
 801130e:	f7ff fc8b 	bl	8010c28 <_ZN14screenViewBaseD1Ev>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	4618      	mov	r0, r3
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	0802ed04 	.word	0x0802ed04

08011320 <_ZN10screenViewD0Ev>:
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f7ff ffe7 	bl	80112fc <_ZN10screenViewD1Ev>
 801132e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f01a fc3d 	bl	802bbb2 <_ZdlPvj>
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	4618      	mov	r0, r3
 801133c:	3708      	adds	r7, #8
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}
	...

08011344 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	4618      	mov	r0, r3
 8011350:	f7ff fb32 	bl	80109b8 <_ZN14screenViewBaseC1Ev>
 8011354:	4a03      	ldr	r2, [pc, #12]	@ (8011364 <_ZN10screenViewC1Ev+0x20>)
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	601a      	str	r2, [r3, #0]
{

}
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4618      	mov	r0, r3
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	0802ed04 	.word	0x0802ed04

08011368 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	4618      	mov	r0, r3
 8011374:	f7ff fca3 	bl	8010cbe <_ZN14screenViewBase11setupScreenEv>
}
 8011378:	bf00      	nop
 801137a:	3708      	adds	r7, #8
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	4618      	mov	r0, r3
 801138c:	f7ff fa3a 	bl	8010804 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011390:	bf00      	nop
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8011398:	b480      	push	{r7}
 801139a:	b083      	sub	sp, #12
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
    {
 80113a0:	4a04      	ldr	r2, [pc, #16]	@ (80113b4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	601a      	str	r2, [r3, #0]
    }
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	4618      	mov	r0, r3
 80113aa:	370c      	adds	r7, #12
 80113ac:	46bd      	mov	sp, r7
 80113ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b2:	4770      	bx	lr
 80113b4:	0802ed50 	.word	0x0802ed50

080113b8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
    }
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	f7ff ffe9 	bl	8011398 <_ZN8touchgfx15TouchControllerD1Ev>
 80113c6:	2104      	movs	r1, #4
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f01a fbf2 	bl	802bbb2 <_ZdlPvj>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	4618      	mov	r0, r3
 80113d2:	3708      	adds	r7, #8
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <_ZN20STM32TouchController4initEv>:

// 触摸状态获取函数声明
static bool myTouchController_GetState(TouchControllerState *state);

void STM32TouchController::init()
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    CST816D_Init();
 80113e0:	f7ef f994 	bl	800070c <CST816D_Init>
    uint8_t irq_setting = EnTouch | EnChange | EnMotion;
 80113e4:	2370      	movs	r3, #112	@ 0x70
 80113e6:	73fb      	strb	r3, [r7, #15]
    CST816D_SetIrqCtl(irq_setting);
 80113e8:	7bfb      	ldrb	r3, [r7, #15]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7ef fa5c 	bl	80008a8 <CST816D_SetIrqCtl>
    CST816D_SetMotionMask(0x07);
 80113f0:	2007      	movs	r0, #7
 80113f2:	f7ef fa49 	bl	8000888 <CST816D_SetMotionMask>
    printf("cst816d init\n");
 80113f6:	4803      	ldr	r0, [pc, #12]	@ (8011404 <_ZN20STM32TouchController4initEv+0x2c>)
 80113f8:	f01b fcfc 	bl	802cdf4 <puts>
}
 80113fc:	bf00      	nop
 80113fe:	3710      	adds	r7, #16
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	0802e15c 	.word	0x0802e15c

08011408 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t &x, int32_t &y)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b086      	sub	sp, #24
 801140c:	af00      	add	r7, sp, #0
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TouchControllerState state;
    if (myTouchController_GetState(&state))
 8011414:	f107 0310 	add.w	r3, r7, #16
 8011418:	4618      	mov	r0, r3
 801141a:	f000 f813 	bl	8011444 <_ZL26myTouchController_GetStateP20TouchControllerState>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d009      	beq.n	8011438 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>
    {
        x = state.touchX;
 8011424:	8a3b      	ldrh	r3, [r7, #16]
 8011426:	461a      	mov	r2, r3
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	601a      	str	r2, [r3, #0]
        y = state.touchY;
 801142c:	8a7b      	ldrh	r3, [r7, #18]
 801142e:	461a      	mov	r2, r3
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	601a      	str	r2, [r3, #0]
        return true;
 8011434:	2301      	movs	r3, #1
 8011436:	e000      	b.n	801143a <_ZN20STM32TouchController11sampleTouchERlS0_+0x32>
    }
    return false; // 无触摸
 8011438:	2300      	movs	r3, #0
}
 801143a:	4618      	mov	r0, r3
 801143c:	3718      	adds	r7, #24
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
	...

08011444 <_ZL26myTouchController_GetStateP20TouchControllerState>:

static bool myTouchController_GetState(TouchControllerState *state)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
    static int32_t lastY = 0;
    static bool wasTouched = false;
    static bool justReleased = false;

    // 检查触摸状态
    if (CST816D_IsTouched())
 801144c:	f7ef fa0a 	bl	8000864 <CST816D_IsTouched>
 8011450:	4603      	mov	r3, r0
 8011452:	2b00      	cmp	r3, #0
 8011454:	bf14      	ite	ne
 8011456:	2301      	movne	r3, #1
 8011458:	2300      	moveq	r3, #0
 801145a:	b2db      	uxtb	r3, r3
 801145c:	2b00      	cmp	r3, #0
 801145e:	d02a      	beq.n	80114b6 <_ZL26myTouchController_GetStateP20TouchControllerState+0x72>
    {
        CST816D_TouchData touchData;

        if (CST816D_GetTouchData(&touchData) == HAL_OK && touchData.finger_num > 0)
 8011460:	f107 0308 	add.w	r3, r7, #8
 8011464:	4618      	mov	r0, r3
 8011466:	f7ef f9b3 	bl	80007d0 <CST816D_GetTouchData>
 801146a:	4603      	mov	r3, r0
 801146c:	2b00      	cmp	r3, #0
 801146e:	d104      	bne.n	801147a <_ZL26myTouchController_GetStateP20TouchControllerState+0x36>
 8011470:	7a7b      	ldrb	r3, [r7, #9]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d001      	beq.n	801147a <_ZL26myTouchController_GetStateP20TouchControllerState+0x36>
 8011476:	2301      	movs	r3, #1
 8011478:	e000      	b.n	801147c <_ZL26myTouchController_GetStateP20TouchControllerState+0x38>
 801147a:	2300      	movs	r3, #0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d03d      	beq.n	80114fc <_ZL26myTouchController_GetStateP20TouchControllerState+0xb8>
        {
            // 获取坐标
            state->touchX = touchData.x;
 8011480:	897a      	ldrh	r2, [r7, #10]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	801a      	strh	r2, [r3, #0]
            state->touchY = touchData.y;
 8011486:	89ba      	ldrh	r2, [r7, #12]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	805a      	strh	r2, [r3, #2]
            lastX = state->touchX;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	881b      	ldrh	r3, [r3, #0]
 8011490:	461a      	mov	r2, r3
 8011492:	4b1e      	ldr	r3, [pc, #120]	@ (801150c <_ZL26myTouchController_GetStateP20TouchControllerState+0xc8>)
 8011494:	601a      	str	r2, [r3, #0]
            lastY = state->touchY;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	885b      	ldrh	r3, [r3, #2]
 801149a:	461a      	mov	r2, r3
 801149c:	4b1c      	ldr	r3, [pc, #112]	@ (8011510 <_ZL26myTouchController_GetStateP20TouchControllerState+0xcc>)
 801149e:	601a      	str	r2, [r3, #0]

            wasTouched = true;
 80114a0:	4b1c      	ldr	r3, [pc, #112]	@ (8011514 <_ZL26myTouchController_GetStateP20TouchControllerState+0xd0>)
 80114a2:	2201      	movs	r2, #1
 80114a4:	701a      	strb	r2, [r3, #0]
            justReleased = false;
 80114a6:	4b1c      	ldr	r3, [pc, #112]	@ (8011518 <_ZL26myTouchController_GetStateP20TouchControllerState+0xd4>)
 80114a8:	2200      	movs	r2, #0
 80114aa:	701a      	strb	r2, [r3, #0]
            state->touched = true;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2201      	movs	r2, #1
 80114b0:	711a      	strb	r2, [r3, #4]

            return true;
 80114b2:	2301      	movs	r3, #1
 80114b4:	e026      	b.n	8011504 <_ZL26myTouchController_GetStateP20TouchControllerState+0xc0>
        }
    }
    else if (wasTouched)
 80114b6:	4b17      	ldr	r3, [pc, #92]	@ (8011514 <_ZL26myTouchController_GetStateP20TouchControllerState+0xd0>)
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d01e      	beq.n	80114fc <_ZL26myTouchController_GetStateP20TouchControllerState+0xb8>
    {
        // 触摸刚刚结束
        if (!justReleased)
 80114be:	4b16      	ldr	r3, [pc, #88]	@ (8011518 <_ZL26myTouchController_GetStateP20TouchControllerState+0xd4>)
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	f083 0301 	eor.w	r3, r3, #1
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d011      	beq.n	80114f0 <_ZL26myTouchController_GetStateP20TouchControllerState+0xac>
        {
            // 发送最后一个触摸位置
            state->touchX = lastX;
 80114cc:	4b0f      	ldr	r3, [pc, #60]	@ (801150c <_ZL26myTouchController_GetStateP20TouchControllerState+0xc8>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	b29a      	uxth	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	801a      	strh	r2, [r3, #0]
            state->touchY = lastY;
 80114d6:	4b0e      	ldr	r3, [pc, #56]	@ (8011510 <_ZL26myTouchController_GetStateP20TouchControllerState+0xcc>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	b29a      	uxth	r2, r3
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	805a      	strh	r2, [r3, #2]
            state->touched = true;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2201      	movs	r2, #1
 80114e4:	711a      	strb	r2, [r3, #4]
            justReleased = true;
 80114e6:	4b0c      	ldr	r3, [pc, #48]	@ (8011518 <_ZL26myTouchController_GetStateP20TouchControllerState+0xd4>)
 80114e8:	2201      	movs	r2, #1
 80114ea:	701a      	strb	r2, [r3, #0]

            return true;
 80114ec:	2301      	movs	r3, #1
 80114ee:	e009      	b.n	8011504 <_ZL26myTouchController_GetStateP20TouchControllerState+0xc0>
        }
        else
        {
            // 恢复到未触摸状态
            justReleased = false;
 80114f0:	4b09      	ldr	r3, [pc, #36]	@ (8011518 <_ZL26myTouchController_GetStateP20TouchControllerState+0xd4>)
 80114f2:	2200      	movs	r2, #0
 80114f4:	701a      	strb	r2, [r3, #0]
            wasTouched = false;
 80114f6:	4b07      	ldr	r3, [pc, #28]	@ (8011514 <_ZL26myTouchController_GetStateP20TouchControllerState+0xd0>)
 80114f8:	2200      	movs	r2, #0
 80114fa:	701a      	strb	r2, [r3, #0]
        }
    }

    state->touched = false;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2200      	movs	r2, #0
 8011500:	711a      	strb	r2, [r3, #4]
    return false;
 8011502:	2300      	movs	r3, #0
}
 8011504:	4618      	mov	r0, r3
 8011506:	3710      	adds	r7, #16
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	2005a704 	.word	0x2005a704
 8011510:	2005a708 	.word	0x2005a708
 8011514:	2005a70c 	.word	0x2005a70c
 8011518:	2005a70d 	.word	0x2005a70d

0801151c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	4a05      	ldr	r2, [pc, #20]	@ (801153c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	601a      	str	r2, [r3, #0]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4618      	mov	r0, r3
 801152e:	f7ff ff33 	bl	8011398 <_ZN8touchgfx15TouchControllerD1Ev>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4618      	mov	r0, r3
 8011536:	3708      	adds	r7, #8
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	0802ed38 	.word	0x0802ed38

08011540 <_ZN20STM32TouchControllerD0Ev>:
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7ff ffe7 	bl	801151c <_ZN20STM32TouchControllerD1Ev>
 801154e:	2104      	movs	r1, #4
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f01a fb2e 	bl	802bbb2 <_ZdlPvj>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	4618      	mov	r0, r3
 801155a:	3708      	adds	r7, #8
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8011560:	b480      	push	{r7}
 8011562:	af00      	add	r7, sp, #0

}
 8011564:	bf00      	nop
 8011566:	46bd      	mov	sp, r7
 8011568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156c:	4770      	bx	lr
	...

08011570 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8011570:	b480      	push	{r7}
 8011572:	b083      	sub	sp, #12
 8011574:	af00      	add	r7, sp, #0
 8011576:	4603      	mov	r3, r0
 8011578:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801157a:	79fb      	ldrb	r3, [r7, #7]
 801157c:	2b03      	cmp	r3, #3
 801157e:	d80c      	bhi.n	801159a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8011580:	a201      	add	r2, pc, #4	@ (adr r2, 8011588 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8011582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011586:	bf00      	nop
 8011588:	08011599 	.word	0x08011599
 801158c:	08011599 	.word	0x08011599
 8011590:	08011599 	.word	0x08011599
 8011594:	08011599 	.word	0x08011599
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8011598:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 801159a:	bf00      	nop
 801159c:	370c      	adds	r7, #12
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr
 80115a6:	bf00      	nop

080115a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b083      	sub	sp, #12
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	4603      	mov	r3, r0
 80115b0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80115b2:	79fb      	ldrb	r3, [r7, #7]
 80115b4:	2b03      	cmp	r3, #3
 80115b6:	d80c      	bhi.n	80115d2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 80115b8:	a201      	add	r2, pc, #4	@ (adr r2, 80115c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80115ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115be:	bf00      	nop
 80115c0:	080115d1 	.word	0x080115d1
 80115c4:	080115d1 	.word	0x080115d1
 80115c8:	080115d1 	.word	0x080115d1
 80115cc:	080115d1 	.word	0x080115d1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 80115d0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 80115d2:	bf00      	nop
 80115d4:	370c      	adds	r7, #12
 80115d6:	46bd      	mov	sp, r7
 80115d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115dc:	4770      	bx	lr
 80115de:	bf00      	nop

080115e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80115e0:	b480      	push	{r7}
 80115e2:	b083      	sub	sp, #12
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	4603      	mov	r3, r0
 80115e8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80115ea:	79fb      	ldrb	r3, [r7, #7]
 80115ec:	2b03      	cmp	r3, #3
 80115ee:	d80c      	bhi.n	801160a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80115f0:	a201      	add	r2, pc, #4	@ (adr r2, 80115f8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80115f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115f6:	bf00      	nop
 80115f8:	08011609 	.word	0x08011609
 80115fc:	08011609 	.word	0x08011609
 8011600:	08011609 	.word	0x08011609
 8011604:	08011609 	.word	0x08011609
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8011608:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 801160a:	bf00      	nop
 801160c:	370c      	adds	r7, #12
 801160e:	46bd      	mov	sp, r7
 8011610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011614:	4770      	bx	lr
 8011616:	bf00      	nop

08011618 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8011618:	b480      	push	{r7}
 801161a:	b083      	sub	sp, #12
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
    {
 8011620:	4a04      	ldr	r2, [pc, #16]	@ (8011634 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	601a      	str	r2, [r3, #0]
    }
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4618      	mov	r0, r3
 801162a:	370c      	adds	r7, #12
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr
 8011634:	0802f4d0 	.word	0x0802f4d0

08011638 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
    }
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f7ff ffe9 	bl	8011618 <_ZN8touchgfx3HALD1Ev>
 8011646:	2184      	movs	r1, #132	@ 0x84
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f01a fab2 	bl	802bbb2 <_ZdlPvj>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4618      	mov	r0, r3
 8011652:	3708      	adds	r7, #8
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8011658:	b480      	push	{r7}
 801165a:	b083      	sub	sp, #12
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	460b      	mov	r3, r1
 8011662:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	78fa      	ldrb	r2, [r7, #3]
 8011668:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2201      	movs	r2, #1
 8011670:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8011674:	bf00      	nop
 8011676:	370c      	adds	r7, #12
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr

08011680 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	460b      	mov	r3, r1
 801168a:	807b      	strh	r3, [r7, #2]
 801168c:	4613      	mov	r3, r2
 801168e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8011690:	4b0c      	ldr	r3, [pc, #48]	@ (80116c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8011692:	881b      	ldrh	r3, [r3, #0]
 8011694:	887a      	ldrh	r2, [r7, #2]
 8011696:	429a      	cmp	r2, r3
 8011698:	d304      	bcc.n	80116a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801169a:	4b0b      	ldr	r3, [pc, #44]	@ (80116c8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 801169c:	881b      	ldrh	r3, [r3, #0]
 801169e:	883a      	ldrh	r2, [r7, #0]
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d205      	bcs.n	80116b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80116a4:	4b09      	ldr	r3, [pc, #36]	@ (80116cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80116a6:	4a0a      	ldr	r2, [pc, #40]	@ (80116d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80116a8:	21a3      	movs	r1, #163	@ 0xa3
 80116aa:	480a      	ldr	r0, [pc, #40]	@ (80116d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80116ac:	f01b f976 	bl	802c99c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80116b0:	4a09      	ldr	r2, [pc, #36]	@ (80116d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80116b2:	887b      	ldrh	r3, [r7, #2]
 80116b4:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80116b6:	4a09      	ldr	r2, [pc, #36]	@ (80116dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80116b8:	883b      	ldrh	r3, [r7, #0]
 80116ba:	8013      	strh	r3, [r2, #0]
    }
 80116bc:	bf00      	nop
 80116be:	3708      	adds	r7, #8
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	2005ba98 	.word	0x2005ba98
 80116c8:	2005ba9a 	.word	0x2005ba9a
 80116cc:	0802e16c 	.word	0x0802e16c
 80116d0:	0802e1d0 	.word	0x0802e1d0
 80116d4:	0802e214 	.word	0x0802e214
 80116d8:	2005ba9e 	.word	0x2005ba9e
 80116dc:	2005baa0 	.word	0x2005baa0

080116e0 <_ZN8touchgfx3HAL11submitGPU2DEv>:
    virtual void submitGPU2D()
 80116e0:	b480      	push	{r7}
 80116e2:	b083      	sub	sp, #12
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
    }
 80116e8:	bf00      	nop
 80116ea:	370c      	adds	r7, #12
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr

080116f4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8011702:	2b00      	cmp	r3, #0
 8011704:	d009      	beq.n	801171a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	685a      	ldr	r2, [r3, #4]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	685b      	ldr	r3, [r3, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	4610      	mov	r0, r2
 8011714:	4798      	blx	r3
 8011716:	4603      	mov	r3, r0
 8011718:	e000      	b.n	801171c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 801171a:	2300      	movs	r3, #0
    }
 801171c:	4618      	mov	r0, r3
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    }

    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f004 f861 	bl	80157f4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	33bc      	adds	r3, #188	@ 0xbc
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	4798      	blx	r3
    }
 801173e:	bf00      	nop
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}

08011746 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8011746:	b480      	push	{r7}
 8011748:	b083      	sub	sp, #12
 801174a:	af00      	add	r7, sp, #0
 801174c:	6078      	str	r0, [r7, #4]
 801174e:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8011750:	2300      	movs	r3, #0
    }
 8011752:	4618      	mov	r0, r3
 8011754:	370c      	adds	r7, #12
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr
	...

08011760 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8011760:	b580      	push	{r7, lr}
 8011762:	b084      	sub	sp, #16
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	607a      	str	r2, [r7, #4]
 801176c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d106      	bne.n	8011782 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8011774:	4b0f      	ldr	r3, [pc, #60]	@ (80117b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8011776:	4a10      	ldr	r2, [pc, #64]	@ (80117b8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8011778:	f240 21ff 	movw	r1, #767	@ 0x2ff
 801177c:	480f      	ldr	r0, [pc, #60]	@ (80117bc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801177e:	f01b f90d 	bl	802c99c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	68ba      	ldr	r2, [r7, #8]
 8011786:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	bf14      	ite	ne
 8011794:	2301      	movne	r3, #1
 8011796:	2300      	moveq	r3, #0
 8011798:	b2da      	uxtb	r2, r3
 801179a:	4b09      	ldr	r3, [pc, #36]	@ (80117c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801179c:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	3390      	adds	r3, #144	@ 0x90
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	6839      	ldr	r1, [r7, #0]
 80117a8:	68f8      	ldr	r0, [r7, #12]
 80117aa:	4798      	blx	r3
    }
 80117ac:	bf00      	nop
 80117ae:	3710      	adds	r7, #16
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	0802e258 	.word	0x0802e258
 80117b8:	0802e290 	.word	0x0802e290
 80117bc:	0802e214 	.word	0x0802e214
 80117c0:	2005baa2 	.word	0x2005baa2

080117c4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 80117c4:	b480      	push	{r7}
 80117c6:	b083      	sub	sp, #12
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	683a      	ldr	r2, [r7, #0]
 80117d2:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	bf14      	ite	ne
 80117da:	2301      	movne	r3, #1
 80117dc:	2300      	moveq	r3, #0
 80117de:	b2da      	uxtb	r2, r3
 80117e0:	4b03      	ldr	r3, [pc, #12]	@ (80117f0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80117e2:	701a      	strb	r2, [r3, #0]
    }
 80117e4:	bf00      	nop
 80117e6:	370c      	adds	r7, #12
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr
 80117f0:	2005baa3 	.word	0x2005baa3

080117f4 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     * Only applicable on LTDC systems and when the partial framebuffer strategy is
     * enabled.
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	460b      	mov	r3, r1
 80117fe:	807b      	strh	r3, [r7, #2]
    {
    }
 8011800:	bf00      	nop
 8011802:	370c      	adds	r7, #12
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr

0801180c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 801180c:	b480      	push	{r7}
 801180e:	b083      	sub	sp, #12
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011814:	2300      	movs	r3, #0
    }
 8011816:	4618      	mov	r0, r3
 8011818:	370c      	adds	r7, #12
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr

08011822 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8011822:	b580      	push	{r7, lr}
 8011824:	b082      	sub	sp, #8
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
 801182a:	460b      	mov	r3, r1
 801182c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011832:	2b00      	cmp	r3, #0
 8011834:	d004      	beq.n	8011840 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801183a:	887a      	ldrh	r2, [r7, #2]
 801183c:	4610      	mov	r0, r2
 801183e:	4798      	blx	r3
        }
    }
 8011840:	bf00      	nop
 8011842:	3708      	adds	r7, #8
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}

08011848 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8011848:	b480      	push	{r7}
 801184a:	b083      	sub	sp, #12
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8011850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 8011854:	4618      	mov	r0, r3
 8011856:	370c      	adds	r7, #12
 8011858:	46bd      	mov	sp, r7
 801185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185e:	4770      	bx	lr

08011860 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	685a      	ldr	r2, [r3, #4]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	3318      	adds	r3, #24
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	4610      	mov	r0, r2
 8011878:	4798      	blx	r3
 801187a:	4603      	mov	r3, r0
    }
 801187c:	4618      	mov	r0, r3
 801187e:	3708      	adds	r7, #8
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}

08011884 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This occurrence will lead to tearing on the display.
     *
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
 8011884:	b480      	push	{r7}
 8011886:	b083      	sub	sp, #12
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
    {
    }
 801188c:	bf00      	nop
 801188e:	370c      	adds	r7, #12
 8011890:	46bd      	mov	sp, r7
 8011892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011896:	4770      	bx	lr

08011898 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 80118a0:	4b0e      	ldr	r3, [pc, #56]	@ (80118dc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d00c      	beq.n	80118c2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	3334      	adds	r3, #52	@ 0x34
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	4798      	blx	r3
 80118b4:	4602      	mov	r2, r0
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d101      	bne.n	80118c2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 80118be:	2301      	movs	r3, #1
 80118c0:	e000      	b.n	80118c4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 80118c2:	2300      	movs	r3, #0
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d002      	beq.n	80118ce <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118cc:	e001      	b.n	80118d2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80118d2:	4618      	mov	r0, r3
 80118d4:	3708      	adds	r7, #8
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}
 80118da:	bf00      	nop
 80118dc:	2005baa2 	.word	0x2005baa2

080118e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80118e0:	b480      	push	{r7}
 80118e2:	b085      	sub	sp, #20
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d011      	beq.n	801191c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80118f8:	4b14      	ldr	r3, [pc, #80]	@ (801194c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d11e      	bne.n	801193e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8011900:	4b13      	ldr	r3, [pc, #76]	@ (8011950 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011902:	881b      	ldrh	r3, [r3, #0]
 8011904:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8011906:	4b13      	ldr	r3, [pc, #76]	@ (8011954 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011908:	881a      	ldrh	r2, [r3, #0]
 801190a:	4b11      	ldr	r3, [pc, #68]	@ (8011950 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801190c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801190e:	4a11      	ldr	r2, [pc, #68]	@ (8011954 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011910:	89bb      	ldrh	r3, [r7, #12]
 8011912:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8011914:	4b0d      	ldr	r3, [pc, #52]	@ (801194c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011916:	2201      	movs	r2, #1
 8011918:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801191a:	e010      	b.n	801193e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801191c:	4b0b      	ldr	r3, [pc, #44]	@ (801194c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d00c      	beq.n	801193e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8011924:	4b0a      	ldr	r3, [pc, #40]	@ (8011950 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011926:	881b      	ldrh	r3, [r3, #0]
 8011928:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801192a:	4b0a      	ldr	r3, [pc, #40]	@ (8011954 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801192c:	881a      	ldrh	r2, [r3, #0]
 801192e:	4b08      	ldr	r3, [pc, #32]	@ (8011950 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011930:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8011932:	4a08      	ldr	r2, [pc, #32]	@ (8011954 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011934:	89fb      	ldrh	r3, [r7, #14]
 8011936:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8011938:	4b04      	ldr	r3, [pc, #16]	@ (801194c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801193a:	2200      	movs	r2, #0
 801193c:	701a      	strb	r2, [r3, #0]
    }
 801193e:	bf00      	nop
 8011940:	3714      	adds	r7, #20
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop
 801194c:	2005ba9c 	.word	0x2005ba9c
 8011950:	2005ba9a 	.word	0x2005ba9a
 8011954:	2005ba98 	.word	0x2005ba98

08011958 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
    {
    }
 8011960:	bf00      	nop
 8011962:	370c      	adds	r7, #12
 8011964:	46bd      	mov	sp, r7
 8011966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196a:	4770      	bx	lr

0801196c <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
    {
    }
 8011974:	bf00      	nop
 8011976:	370c      	adds	r7, #12
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr

08011980 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Invalidate texture cache(s).
     *
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
 8011980:	b480      	push	{r7}
 8011982:	b083      	sub	sp, #12
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
    {
    }
 8011988:	bf00      	nop
 801198a:	370c      	adds	r7, #12
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	4618      	mov	r0, r3
 80119a0:	f003 f955 	bl	8014c4e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80119a4:	bf00      	nop
 80119a6:	3708      	adds	r7, #8
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}

080119ac <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b082      	sub	sp, #8
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	4a05      	ldr	r2, [pc, #20]	@ (80119cc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	601a      	str	r2, [r3, #0]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	4618      	mov	r0, r3
 80119be:	f7ff fe2b 	bl	8011618 <_ZN8touchgfx3HALD1Ev>
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	4618      	mov	r0, r3
 80119c6:	3708      	adds	r7, #8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	0802f0e8 	.word	0x0802f0e8

080119d0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f7ff ffe7 	bl	80119ac <_ZN20TouchGFXGeneratedHALD1Ev>
 80119de:	2184      	movs	r1, #132	@ 0x84
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f01a f8e6 	bl	802bbb2 <_ZdlPvj>
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	4618      	mov	r0, r3
 80119ea:	3708      	adds	r7, #8
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7ff ffca 	bl	8011994 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8011a00:	bf00      	nop
 8011a02:	3708      	adds	r7, #8
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <_ZN11TouchGFXHAL10initializeEv>:
#include <touchgfx/hal/GPIO.hpp>

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    printf("ICNA3306_Init\r\n");
 8011a10:	4806      	ldr	r0, [pc, #24]	@ (8011a2c <_ZN11TouchGFXHAL10initializeEv+0x24>)
 8011a12:	f01b f9ef 	bl	802cdf4 <puts>

    TouchGFXGeneratedHAL::initialize();
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f002 f8c7 	bl	8013bac <_ZN20TouchGFXGeneratedHAL10initializeEv>
    // setAnimationStorage((void *)animationBuffer); // Add animation storage
    ICNA3306_Init();
 8011a1e:	f7ef fa4b 	bl	8000eb8 <ICNA3306_Init>
}
 8011a22:	bf00      	nop
 8011a24:	3708      	adds	r7, #8
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
 8011a2a:	bf00      	nop
 8011a2c:	0802e2e0 	.word	0x0802e2e0

08011a30 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f002 f920 	bl	8013c80 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011a40:	4603      	mov	r3, r0
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	3708      	adds	r7, #8
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}

08011a4a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8011a4a:	b580      	push	{r7, lr}
 8011a4c:	b082      	sub	sp, #8
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
 8011a52:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6839      	ldr	r1, [r7, #0]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f002 f91f 	bl	8013c9c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8011a5e:	bf00      	nop
 8011a60:	3708      	adds	r7, #8
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
	...

08011a68 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b08a      	sub	sp, #40	@ 0x28
 8011a6c:	af02      	add	r7, sp, #8
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp
	printf("fluashBuffer\r\n");
 8011a72:	482b      	ldr	r0, [pc, #172]	@ (8011b20 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0xb8>)
 8011a74:	f01b f9be 	bl	802cdf4 <puts>
    uint8_t *fbPtr = (uint8_t *)getClientFrameBuffer();
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7ff ff0c 	bl	8011898 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011a80:	6138      	str	r0, [r7, #16]
    for (size_t row = 0; row < rect.height; row++)
 8011a82:	2300      	movs	r3, #0
 8011a84:	61fb      	str	r3, [r7, #28]
 8011a86:	e030      	b.n	8011aea <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x82>
    {
        uint8_t *pixel = fbPtr + ((rect.y + row) * 240 + rect.x) * 2;
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011a8e:	461a      	mov	r2, r3
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	441a      	add	r2, r3
 8011a94:	4613      	mov	r3, r2
 8011a96:	011b      	lsls	r3, r3, #4
 8011a98:	1a9b      	subs	r3, r3, r2
 8011a9a:	011b      	lsls	r3, r3, #4
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011aa4:	4413      	add	r3, r2
 8011aa6:	005b      	lsls	r3, r3, #1
 8011aa8:	693a      	ldr	r2, [r7, #16]
 8011aaa:	4413      	add	r3, r2
 8011aac:	61bb      	str	r3, [r7, #24]
        for (size_t col = 0; col < rect.width; col++)
 8011aae:	2300      	movs	r3, #0
 8011ab0:	617b      	str	r3, [r7, #20]
 8011ab2:	e010      	b.n	8011ad6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x6e>
        {
            uint8_t temp = pixel[0];
 8011ab4:	69bb      	ldr	r3, [r7, #24]
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	73fb      	strb	r3, [r7, #15]
            pixel[0] = pixel[1];
 8011aba:	69bb      	ldr	r3, [r7, #24]
 8011abc:	785a      	ldrb	r2, [r3, #1]
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	701a      	strb	r2, [r3, #0]
            pixel[1] = temp;
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	7bfa      	ldrb	r2, [r7, #15]
 8011ac8:	701a      	strb	r2, [r3, #0]
            pixel += 2;
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	3302      	adds	r3, #2
 8011ace:	61bb      	str	r3, [r7, #24]
        for (size_t col = 0; col < rect.width; col++)
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	617b      	str	r3, [r7, #20]
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011adc:	461a      	mov	r2, r3
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d3e7      	bcc.n	8011ab4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>
    for (size_t row = 0; row < rect.height; row++)
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	61fb      	str	r3, [r7, #28]
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011af0:	461a      	mov	r2, r3
 8011af2:	69fb      	ldr	r3, [r7, #28]
 8011af4:	4293      	cmp	r3, r2
 8011af6:	d3c7      	bcc.n	8011a88 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
        }
    }
    //printf("fluashBuffer\r\n");
    ICNA3306_DrawBuffer(0, 0, 240, 296, fbPtr, (240 * 296) * 2);
 8011af8:	4b0a      	ldr	r3, [pc, #40]	@ (8011b24 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0xbc>)
 8011afa:	9301      	str	r3, [sp, #4]
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	9300      	str	r3, [sp, #0]
 8011b00:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8011b04:	22f0      	movs	r2, #240	@ 0xf0
 8011b06:	2100      	movs	r1, #0
 8011b08:	2000      	movs	r0, #0
 8011b0a:	f7ef f977 	bl	8000dfc <ICNA3306_DrawBuffer>

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6839      	ldr	r1, [r7, #0]
 8011b12:	4618      	mov	r0, r3
 8011b14:	f002 f8cd 	bl	8013cb2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8011b18:	bf00      	nop
 8011b1a:	3720      	adds	r7, #32
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}
 8011b20:	0802e2f0 	.word	0x0802e2f0
 8011b24:	00022b00 	.word	0x00022b00

08011b28 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b084      	sub	sp, #16
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	607a      	str	r2, [r7, #4]
 8011b34:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8011b36:	68f8      	ldr	r0, [r7, #12]
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	687a      	ldr	r2, [r7, #4]
 8011b3c:	68b9      	ldr	r1, [r7, #8]
 8011b3e:	f002 f8c6 	bl	8013cce <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8011b42:	4603      	mov	r3, r0
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3710      	adds	r7, #16
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	4618      	mov	r0, r3
 8011b58:	f002 f84c 	bl	8013bf4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011b5c:	bf00      	nop
 8011b5e:	3708      	adds	r7, #8
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}

08011b64 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f002 f84c 	bl	8013c0c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8011b74:	bf00      	nop
 8011b76:	3708      	adds	r7, #8
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}

08011b7c <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b082      	sub	sp, #8
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	4618      	mov	r0, r3
 8011b88:	f002 f84b 	bl	8013c22 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8011b8c:	bf00      	nop
 8011b8e:	3708      	adds	r7, #8
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}

08011b94 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f002 f84a 	bl	8013c38 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011ba4:	bf00      	nop
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f002 f848 	bl	8013c4c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8011bbc:	4603      	mov	r3, r0
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3708      	adds	r7, #8
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b082      	sub	sp, #8
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f002 f848 	bl	8013c66 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8011bd6:	bf00      	nop
 8011bd8:	3708      	adds	r7, #8
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}

08011bde <touchgfx_tim_vsync>:
extern "C" void touchgfx_tim_vsync(void)
{
 8011bde:	b580      	push	{r7, lr}
 8011be0:	af00      	add	r7, sp, #0
    OSWrappers::signalVSync();
 8011be2:	f000 f88b 	bl	8011cfc <_ZN8touchgfx10OSWrappers11signalVSyncEv>
    //printf("5555\r\n");
}
 8011be6:	bf00      	nop
 8011be8:	bd80      	pop	{r7, pc}
	...

08011bec <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	4a05      	ldr	r2, [pc, #20]	@ (8011c0c <_ZN11TouchGFXHALD1Ev+0x20>)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	601a      	str	r2, [r3, #0]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7ff fed5 	bl	80119ac <_ZN20TouchGFXGeneratedHALD1Ev>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	4618      	mov	r0, r3
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	0802ed68 	.word	0x0802ed68

08011c10 <_ZN11TouchGFXHALD0Ev>:
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f7ff ffe7 	bl	8011bec <_ZN11TouchGFXHALD1Ev>
 8011c1e:	2184      	movs	r1, #132	@ 0x84
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f019 ffc6 	bl	802bbb2 <_ZdlPvj>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3708      	adds	r7, #8
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8011c34:	2200      	movs	r2, #0
 8011c36:	2101      	movs	r1, #1
 8011c38:	2001      	movs	r0, #1
 8011c3a:	f7fa f843 	bl	800bcc4 <osSemaphoreNew>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	4a0f      	ldr	r2, [pc, #60]	@ (8011c80 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011c42:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8011c44:	4b0e      	ldr	r3, [pc, #56]	@ (8011c80 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d105      	bne.n	8011c58 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8011c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8011c84 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8011c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8011c88 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011c50:	2128      	movs	r1, #40	@ 0x28
 8011c52:	480e      	ldr	r0, [pc, #56]	@ (8011c8c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011c54:	f01a fea2 	bl	802c99c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8011c58:	2200      	movs	r2, #0
 8011c5a:	2104      	movs	r1, #4
 8011c5c:	2001      	movs	r0, #1
 8011c5e:	f7fa f943 	bl	800bee8 <osMessageQueueNew>
 8011c62:	4603      	mov	r3, r0
 8011c64:	4a0a      	ldr	r2, [pc, #40]	@ (8011c90 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8011c66:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8011c68:	4b09      	ldr	r3, [pc, #36]	@ (8011c90 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d105      	bne.n	8011c7c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8011c70:	4b08      	ldr	r3, [pc, #32]	@ (8011c94 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8011c72:	4a05      	ldr	r2, [pc, #20]	@ (8011c88 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011c74:	212c      	movs	r1, #44	@ 0x2c
 8011c76:	4805      	ldr	r0, [pc, #20]	@ (8011c8c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011c78:	f01a fe90 	bl	802c99c <__assert_func>
}
 8011c7c:	bf00      	nop
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	2005a710 	.word	0x2005a710
 8011c84:	0802e300 	.word	0x0802e300
 8011c88:	0802e34c 	.word	0x0802e34c
 8011c8c:	0802e37c 	.word	0x0802e37c
 8011c90:	2005a714 	.word	0x2005a714
 8011c94:	0802e3a8 	.word	0x0802e3a8

08011c98 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8011c9c:	4b04      	ldr	r3, [pc, #16]	@ (8011cb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7fa f895 	bl	800bdd4 <osSemaphoreAcquire>
}
 8011caa:	bf00      	nop
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	2005a710 	.word	0x2005a710

08011cb4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011cb8:	4b03      	ldr	r3, [pc, #12]	@ (8011cc8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fa f8d5 	bl	800be6c <osSemaphoreRelease>
}
 8011cc2:	bf00      	nop
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	2005a710 	.word	0x2005a710

08011ccc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8011cd0:	4b03      	ldr	r3, [pc, #12]	@ (8011ce0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	2100      	movs	r1, #0
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7fa f87c 	bl	800bdd4 <osSemaphoreAcquire>
}
 8011cdc:	bf00      	nop
 8011cde:	bd80      	pop	{r7, pc}
 8011ce0:	2005a710 	.word	0x2005a710

08011ce4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011ce8:	4b03      	ldr	r3, [pc, #12]	@ (8011cf8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7fa f8bd 	bl	800be6c <osSemaphoreRelease>
}
 8011cf2:	bf00      	nop
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	2005a710 	.word	0x2005a710

08011cfc <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8011d00:	4b04      	ldr	r3, [pc, #16]	@ (8011d14 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8011d02:	6818      	ldr	r0, [r3, #0]
 8011d04:	2300      	movs	r3, #0
 8011d06:	2200      	movs	r2, #0
 8011d08:	4903      	ldr	r1, [pc, #12]	@ (8011d18 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8011d0a:	f7fa f95f 	bl	800bfcc <osMessageQueuePut>
}
 8011d0e:	bf00      	nop
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	2005a714 	.word	0x2005a714
 8011d18:	20000014 	.word	0x20000014

08011d1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8011d22:	4b09      	ldr	r3, [pc, #36]	@ (8011d48 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011d24:	6818      	ldr	r0, [r3, #0]
 8011d26:	1d39      	adds	r1, r7, #4
 8011d28:	2300      	movs	r3, #0
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f7fa f9a8 	bl	800c080 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8011d30:	4b05      	ldr	r3, [pc, #20]	@ (8011d48 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011d32:	6818      	ldr	r0, [r3, #0]
 8011d34:	1d39      	adds	r1, r7, #4
 8011d36:	f04f 33ff 	mov.w	r3, #4294967295
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	f7fa f9a0 	bl	800c080 <osMessageQueueGet>
}
 8011d40:	bf00      	nop
 8011d42:	3708      	adds	r7, #8
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	2005a714 	.word	0x2005a714

08011d4c <__NVIC_EnableIRQ>:
{
 8011d4c:	b480      	push	{r7}
 8011d4e:	b083      	sub	sp, #12
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	4603      	mov	r3, r0
 8011d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	db0b      	blt.n	8011d76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011d5e:	79fb      	ldrb	r3, [r7, #7]
 8011d60:	f003 021f 	and.w	r2, r3, #31
 8011d64:	4907      	ldr	r1, [pc, #28]	@ (8011d84 <__NVIC_EnableIRQ+0x38>)
 8011d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d6a:	095b      	lsrs	r3, r3, #5
 8011d6c:	2001      	movs	r0, #1
 8011d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8011d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011d76:	bf00      	nop
 8011d78:	370c      	adds	r7, #12
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop
 8011d84:	e000e100 	.word	0xe000e100

08011d88 <__NVIC_DisableIRQ>:
{
 8011d88:	b480      	push	{r7}
 8011d8a:	b083      	sub	sp, #12
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	4603      	mov	r3, r0
 8011d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	db12      	blt.n	8011dc0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011d9a:	79fb      	ldrb	r3, [r7, #7]
 8011d9c:	f003 021f 	and.w	r2, r3, #31
 8011da0:	490a      	ldr	r1, [pc, #40]	@ (8011dcc <__NVIC_DisableIRQ+0x44>)
 8011da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011da6:	095b      	lsrs	r3, r3, #5
 8011da8:	2001      	movs	r0, #1
 8011daa:	fa00 f202 	lsl.w	r2, r0, r2
 8011dae:	3320      	adds	r3, #32
 8011db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011db4:	f3bf 8f4f 	dsb	sy
}
 8011db8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011dba:	f3bf 8f6f 	isb	sy
}
 8011dbe:	bf00      	nop
}
 8011dc0:	bf00      	nop
 8011dc2:	370c      	adds	r7, #12
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr
 8011dcc:	e000e100 	.word	0xe000e100

08011dd0 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8011dd0:	b480      	push	{r7}
 8011dd2:	b083      	sub	sp, #12
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
        : color(0)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	601a      	str	r2, [r3, #0]
    }
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	4618      	mov	r0, r3
 8011de2:	370c      	adds	r7, #12
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr

08011dec <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8011dec:	b480      	push	{r7}
 8011dee:	b083      	sub	sp, #12
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
        return color;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
    }
 8011df8:	4618      	mov	r0, r3
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
    {
 8011e0c:	4a04      	ldr	r2, [pc, #16]	@ (8011e20 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	601a      	str	r2, [r3, #0]
    }
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	4618      	mov	r0, r3
 8011e16:	370c      	adds	r7, #12
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1e:	4770      	bx	lr
 8011e20:	0802eea4 	.word	0x0802eea4

08011e24 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
    }
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f7ff ffe9 	bl	8011e04 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011e32:	2104      	movs	r1, #4
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f019 febc 	bl	802bbb2 <_ZdlPvj>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3708      	adds	r7, #8
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	3344      	adds	r3, #68	@ 0x44
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	4798      	blx	r3
    }
 8011e58:	bf00      	nop
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8011e60:	b480      	push	{r7}
 8011e62:	b083      	sub	sp, #12
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
    {
 8011e68:	4a04      	ldr	r2, [pc, #16]	@ (8011e7c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	601a      	str	r2, [r3, #0]
    }
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	4618      	mov	r0, r3
 8011e72:	370c      	adds	r7, #12
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr
 8011e7c:	0802f5bc 	.word	0x0802f5bc

08011e80 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b082      	sub	sp, #8
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
    }
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7ff ffe9 	bl	8011e60 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011e8e:	210c      	movs	r1, #12
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f019 fe8e 	bl	802bbb2 <_ZdlPvj>
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3708      	adds	r7, #8
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}

08011ea0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8011eaa:	4a09      	ldr	r2, [pc, #36]	@ (8011ed0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	601a      	str	r2, [r3, #0]
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	683a      	ldr	r2, [r7, #0]
 8011eb4:	605a      	str	r2, [r3, #4]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	721a      	strb	r2, [r3, #8]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	725a      	strb	r2, [r3, #9]
    {
    }
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	370c      	adds	r7, #12
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ece:	4770      	bx	lr
 8011ed0:	0802f5bc 	.word	0x0802f5bc

08011ed4 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8011edc:	2301      	movs	r3, #1
    }
 8011ede:	4618      	mov	r0, r3
 8011ee0:	370c      	adds	r7, #12
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr

08011eea <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8011eea:	b580      	push	{r7, lr}
 8011eec:	b082      	sub	sp, #8
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	3328      	adds	r3, #40	@ 0x28
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	4610      	mov	r0, r2
 8011efe:	4798      	blx	r3
    }
 8011f00:	bf00      	nop
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}

08011f08 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	685a      	ldr	r2, [r3, #4]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	3314      	adds	r3, #20
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	4610      	mov	r0, r2
 8011f20:	4798      	blx	r3
    }
 8011f22:	bf00      	nop
 8011f24:	3708      	adds	r7, #8
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}

08011f2a <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8011f2a:	b580      	push	{r7, lr}
 8011f2c:	b082      	sub	sp, #8
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8011f32:	f7fd facf 	bl	800f4d4 <_ZN8touchgfx3HAL11getInstanceEv>
 8011f36:	4603      	mov	r3, r0
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7ff ffe5 	bl	8011f08 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8011f3e:	bf00      	nop
 8011f40:	3708      	adds	r7, #8
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 8011f46:	b480      	push	{r7}
 8011f48:	b083      	sub	sp, #12
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        while (1)
 8011f4e:	bf00      	nop
 8011f50:	e7fd      	b.n	8011f4e <DMA2D_XferErrorCallback+0x8>
	...

08011f54 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	4a05      	ldr	r2, [pc, #20]	@ (8011f74 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	601a      	str	r2, [r3, #0]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7ff ff4d 	bl	8011e04 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	0802f60c 	.word	0x0802f60c

08011f78 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f7ff ffe7 	bl	8011f54 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011f86:	2114      	movs	r1, #20
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f019 fe12 	bl	802bbb2 <_ZdlPvj>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	4618      	mov	r0, r3
 8011f92:	3708      	adds	r7, #8
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b082      	sub	sp, #8
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	330c      	adds	r3, #12
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7ff ff13 	bl	8011dd0 <_ZN8touchgfx9colortypeC1Ev>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	4618      	mov	r0, r3
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <_ZN8STM32DMAC1Ev>:

        }
    }
}

STM32DMA::STM32DMA()
 8011fb4:	b5b0      	push	{r4, r5, r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	330c      	adds	r3, #12
 8011fc2:	4619      	mov	r1, r3
 8011fc4:	4610      	mov	r0, r2
 8011fc6:	f7ff ff6b 	bl	8011ea0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8011fca:	4a0e      	ldr	r2, [pc, #56]	@ (8012004 <_ZN8STM32DMAC1Ev+0x50>)
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	601a      	str	r2, [r3, #0]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f103 000c 	add.w	r0, r3, #12
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	3320      	adds	r3, #32
 8011fda:	2260      	movs	r2, #96	@ 0x60
 8011fdc:	4619      	mov	r1, r3
 8011fde:	f003 fd5b 	bl	8015a98 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	3320      	adds	r3, #32
 8011fe6:	245f      	movs	r4, #95	@ 0x5f
 8011fe8:	461d      	mov	r5, r3
 8011fea:	e004      	b.n	8011ff6 <_ZN8STM32DMAC1Ev+0x42>
 8011fec:	4628      	mov	r0, r5
 8011fee:	f7ff ffd3 	bl	8011f98 <_ZN8touchgfx6BlitOpC1Ev>
 8011ff2:	3c01      	subs	r4, #1
 8011ff4:	3524      	adds	r5, #36	@ 0x24
 8011ff6:	2c00      	cmp	r4, #0
 8011ff8:	daf8      	bge.n	8011fec <_ZN8STM32DMAC1Ev+0x38>
{
}
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3708      	adds	r7, #8
 8012000:	46bd      	mov	sp, r7
 8012002:	bdb0      	pop	{r4, r5, r7, pc}
 8012004:	0802ee54 	.word	0x0802ee54

08012008 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	4a09      	ldr	r2, [pc, #36]	@ (8012038 <_ZN8STM32DMAD1Ev+0x30>)
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012016:	2076      	movs	r0, #118	@ 0x76
 8012018:	f7ff feb6 	bl	8011d88 <__NVIC_DisableIRQ>
}
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	330c      	adds	r3, #12
 8012020:	4618      	mov	r0, r3
 8012022:	f7ff ff97 	bl	8011f54 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4618      	mov	r0, r3
 801202a:	f7ff ff19 	bl	8011e60 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	4618      	mov	r0, r3
 8012032:	3708      	adds	r7, #8
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	0802ee54 	.word	0x0802ee54

0801203c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
}
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7ff ffdf 	bl	8012008 <_ZN8STM32DMAD1Ev>
 801204a:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f019 fdaf 	bl	802bbb2 <_ZdlPvj>
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	4618      	mov	r0, r3
 8012058:	3708      	adds	r7, #8
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
	...

08012060 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8012068:	4b13      	ldr	r3, [pc, #76]	@ (80120b8 <_ZN8STM32DMA10initializeEv+0x58>)
 801206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801206e:	4a12      	ldr	r2, [pc, #72]	@ (80120b8 <_ZN8STM32DMA10initializeEv+0x58>)
 8012070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012074:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8012078:	4b0f      	ldr	r3, [pc, #60]	@ (80120b8 <_ZN8STM32DMA10initializeEv+0x58>)
 801207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801207e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012082:	60fb      	str	r3, [r7, #12]
 8012084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8012086:	4b0c      	ldr	r3, [pc, #48]	@ (80120b8 <_ZN8STM32DMA10initializeEv+0x58>)
 8012088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801208a:	4a0b      	ldr	r2, [pc, #44]	@ (80120b8 <_ZN8STM32DMA10initializeEv+0x58>)
 801208c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012090:	6613      	str	r3, [r2, #96]	@ 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8012092:	4b09      	ldr	r3, [pc, #36]	@ (80120b8 <_ZN8STM32DMA10initializeEv+0x58>)
 8012094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012096:	4a08      	ldr	r2, [pc, #32]	@ (80120b8 <_ZN8STM32DMA10initializeEv+0x58>)
 8012098:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801209c:	6613      	str	r3, [r2, #96]	@ 0x60

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801209e:	4b07      	ldr	r3, [pc, #28]	@ (80120bc <_ZN8STM32DMA10initializeEv+0x5c>)
 80120a0:	4a07      	ldr	r2, [pc, #28]	@ (80120c0 <_ZN8STM32DMA10initializeEv+0x60>)
 80120a2:	621a      	str	r2, [r3, #32]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80120a4:	4b05      	ldr	r3, [pc, #20]	@ (80120bc <_ZN8STM32DMA10initializeEv+0x5c>)
 80120a6:	4a07      	ldr	r2, [pc, #28]	@ (80120c4 <_ZN8STM32DMA10initializeEv+0x64>)
 80120a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80120aa:	2076      	movs	r0, #118	@ 0x76
 80120ac:	f7ff fe4e 	bl	8011d4c <__NVIC_EnableIRQ>
}
 80120b0:	bf00      	nop
 80120b2:	3710      	adds	r7, #16
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	46020c00 	.word	0x46020c00
 80120bc:	200459d0 	.word	0x200459d0
 80120c0:	08011f2b 	.word	0x08011f2b
 80120c4:	08011f47 	.word	0x08011f47

080120c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b084      	sub	sp, #16
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	460b      	mov	r3, r1
 80120d2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80120d4:	2300      	movs	r3, #0
 80120d6:	60fb      	str	r3, [r7, #12]

    switch (format)
 80120d8:	78fb      	ldrb	r3, [r7, #3]
 80120da:	2b0b      	cmp	r3, #11
 80120dc:	d826      	bhi.n	801212c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80120de:	a201      	add	r2, pc, #4	@ (adr r2, 80120e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80120e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120e4:	08012121 	.word	0x08012121
 80120e8:	0801211b 	.word	0x0801211b
 80120ec:	08012115 	.word	0x08012115
 80120f0:	0801212d 	.word	0x0801212d
 80120f4:	0801212d 	.word	0x0801212d
 80120f8:	0801212d 	.word	0x0801212d
 80120fc:	0801212d 	.word	0x0801212d
 8012100:	08012127 	.word	0x08012127
 8012104:	08012127 	.word	0x08012127
 8012108:	08012127 	.word	0x08012127
 801210c:	08012127 	.word	0x08012127
 8012110:	08012127 	.word	0x08012127
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012114:	2300      	movs	r3, #0
 8012116:	60fb      	str	r3, [r7, #12]
        break;
 8012118:	e00e      	b.n	8012138 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 801211a:	2301      	movs	r3, #1
 801211c:	60fb      	str	r3, [r7, #12]
        break;
 801211e:	e00b      	b.n	8012138 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8012120:	2302      	movs	r3, #2
 8012122:	60fb      	str	r3, [r7, #12]
        break;
 8012124:	e008      	b.n	8012138 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8012126:	2305      	movs	r3, #5
 8012128:	60fb      	str	r3, [r7, #12]
        break;
 801212a:	e005      	b.n	8012138 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 801212c:	4b05      	ldr	r3, [pc, #20]	@ (8012144 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 801212e:	4a06      	ldr	r2, [pc, #24]	@ (8012148 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8012130:	216f      	movs	r1, #111	@ 0x6f
 8012132:	4806      	ldr	r0, [pc, #24]	@ (801214c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8012134:	f01a fc32 	bl	802c99c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012138:	68fb      	ldr	r3, [r7, #12]
}
 801213a:	4618      	mov	r0, r3
 801213c:	3710      	adds	r7, #16
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	0802e3ec 	.word	0x0802e3ec
 8012148:	0802e408 	.word	0x0802e408
 801214c:	0802e454 	.word	0x0802e454

08012150 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	460b      	mov	r3, r1
 801215a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 801215c:	2300      	movs	r3, #0
 801215e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012160:	78fb      	ldrb	r3, [r7, #3]
 8012162:	2b0a      	cmp	r3, #10
 8012164:	d821      	bhi.n	80121aa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8012166:	a201      	add	r2, pc, #4	@ (adr r2, 801216c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801216c:	080121a5 	.word	0x080121a5
 8012170:	0801219f 	.word	0x0801219f
 8012174:	08012199 	.word	0x08012199
 8012178:	080121ab 	.word	0x080121ab
 801217c:	080121ab 	.word	0x080121ab
 8012180:	080121ab 	.word	0x080121ab
 8012184:	080121ab 	.word	0x080121ab
 8012188:	0801219f 	.word	0x0801219f
 801218c:	0801219f 	.word	0x0801219f
 8012190:	0801219f 	.word	0x0801219f
 8012194:	0801219f 	.word	0x0801219f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012198:	2300      	movs	r3, #0
 801219a:	60fb      	str	r3, [r7, #12]
        break;
 801219c:	e00b      	b.n	80121b6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 801219e:	2301      	movs	r3, #1
 80121a0:	60fb      	str	r3, [r7, #12]
        break;
 80121a2:	e008      	b.n	80121b6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80121a4:	2302      	movs	r3, #2
 80121a6:	60fb      	str	r3, [r7, #12]
        break;
 80121a8:	e005      	b.n	80121b6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80121aa:	4b05      	ldr	r3, [pc, #20]	@ (80121c0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80121ac:	4a05      	ldr	r2, [pc, #20]	@ (80121c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80121ae:	2190      	movs	r1, #144	@ 0x90
 80121b0:	4805      	ldr	r0, [pc, #20]	@ (80121c8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80121b2:	f01a fbf3 	bl	802c99c <__assert_func>
        break;
    }

    return dma2dColorMode;
 80121b6:	68fb      	ldr	r3, [r7, #12]
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3710      	adds	r7, #16
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	0802e3ec 	.word	0x0802e3ec
 80121c4:	0802e480 	.word	0x0802e480
 80121c8:	0802e454 	.word	0x0802e454

080121cc <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80121d4:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 80121d8:	4618      	mov	r0, r3
 80121da:	370c      	adds	r7, #12
 80121dc:	46bd      	mov	sp, r7
 80121de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e2:	4770      	bx	lr

080121e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80121e4:	b590      	push	{r4, r7, lr}
 80121e6:	b089      	sub	sp, #36	@ 0x24
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	7f5b      	ldrb	r3, [r3, #29]
 80121f2:	4619      	mov	r1, r3
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f7ff ff67 	bl	80120c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80121fa:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	7f9b      	ldrb	r3, [r3, #30]
 8012200:	4619      	mov	r1, r3
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f7ff ff60 	bl	80120c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012208:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	7f9b      	ldrb	r3, [r3, #30]
 801220e:	4619      	mov	r1, r3
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f7ff ff9d 	bl	8012150 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012216:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	8b5b      	ldrh	r3, [r3, #26]
 801221c:	461a      	mov	r2, r3
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	8a9b      	ldrh	r3, [r3, #20]
 8012222:	1ad2      	subs	r2, r2, r3
 8012224:	4b97      	ldr	r3, [pc, #604]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012226:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	8b5b      	ldrh	r3, [r3, #26]
 801222c:	461a      	mov	r2, r3
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	8a9b      	ldrh	r3, [r3, #20]
 8012232:	1ad2      	subs	r2, r2, r3
 8012234:	4b93      	ldr	r3, [pc, #588]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012236:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	8b1b      	ldrh	r3, [r3, #24]
 801223c:	461a      	mov	r2, r3
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	8a9b      	ldrh	r3, [r3, #20]
 8012242:	1ad2      	subs	r2, r2, r3
 8012244:	4b8f      	ldr	r3, [pc, #572]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012246:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012248:	4a8e      	ldr	r2, [pc, #568]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	8adb      	ldrh	r3, [r3, #22]
 8012252:	461a      	mov	r2, r3
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	8a9b      	ldrh	r3, [r3, #20]
 8012258:	041b      	lsls	r3, r3, #16
 801225a:	431a      	orrs	r2, r3
 801225c:	4b89      	ldr	r3, [pc, #548]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801225e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	691a      	ldr	r2, [r3, #16]
 8012264:	4b87      	ldr	r3, [pc, #540]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012266:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	685a      	ldr	r2, [r3, #4]
 801226c:	4b85      	ldr	r3, [pc, #532]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801226e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012278:	d037      	beq.n	80122ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 801227a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801227e:	f200 80e4 	bhi.w	801244a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8012282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012286:	d014      	beq.n	80122b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8012288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801228c:	f200 80dd 	bhi.w	801244a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8012290:	2b80      	cmp	r3, #128	@ 0x80
 8012292:	d05a      	beq.n	801234a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
 8012294:	2b80      	cmp	r3, #128	@ 0x80
 8012296:	f200 80d8 	bhi.w	801244a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 801229a:	2b40      	cmp	r3, #64	@ 0x40
 801229c:	f000 80c1 	beq.w	8012422 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
 80122a0:	2b40      	cmp	r3, #64	@ 0x40
 80122a2:	f200 80d2 	bhi.w	801244a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 80122a6:	2b04      	cmp	r3, #4
 80122a8:	d03b      	beq.n	8012322 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 80122aa:	2b20      	cmp	r3, #32
 80122ac:	f000 80b9 	beq.w	8012422 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
 80122b0:	e0cb      	b.n	801244a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	7f1b      	ldrb	r3, [r3, #28]
 80122b6:	061b      	lsls	r3, r3, #24
 80122b8:	4a72      	ldr	r2, [pc, #456]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122be:	f043 030a 	orr.w	r3, r3, #10
 80122c2:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	330c      	adds	r3, #12
 80122c8:	4c6e      	ldr	r4, [pc, #440]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7ff fd8e 	bl	8011dec <_ZNK8touchgfx9colortypecvmEv>
 80122d0:	4603      	mov	r3, r0
 80122d2:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80122d4:	4a6b      	ldr	r2, [pc, #428]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	691a      	ldr	r2, [r3, #16]
 80122de:	4b69      	ldr	r3, [pc, #420]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122e0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80122e2:	4b68      	ldr	r3, [pc, #416]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122e4:	4a68      	ldr	r2, [pc, #416]	@ (8012488 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80122e6:	601a      	str	r2, [r3, #0]
        break;
 80122e8:	e0c7      	b.n	801247a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	7f1b      	ldrb	r3, [r3, #28]
 80122ee:	061b      	lsls	r3, r3, #24
 80122f0:	4a64      	ldr	r2, [pc, #400]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122f6:	f043 0309 	orr.w	r3, r3, #9
 80122fa:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	330c      	adds	r3, #12
 8012300:	4c60      	ldr	r4, [pc, #384]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012302:	4618      	mov	r0, r3
 8012304:	f7ff fd72 	bl	8011dec <_ZNK8touchgfx9colortypecvmEv>
 8012308:	4603      	mov	r3, r0
 801230a:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801230c:	4a5d      	ldr	r2, [pc, #372]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	691a      	ldr	r2, [r3, #16]
 8012316:	4b5b      	ldr	r3, [pc, #364]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012318:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801231a:	4b5a      	ldr	r3, [pc, #360]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801231c:	4a5a      	ldr	r2, [pc, #360]	@ (8012488 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801231e:	601a      	str	r2, [r3, #0]
        break;
 8012320:	e0ab      	b.n	801247a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	7f1b      	ldrb	r3, [r3, #28]
 8012326:	061a      	lsls	r2, r3, #24
 8012328:	69bb      	ldr	r3, [r7, #24]
 801232a:	4313      	orrs	r3, r2
 801232c:	4a55      	ldr	r2, [pc, #340]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801232e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012332:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012334:	4a53      	ldr	r2, [pc, #332]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	691a      	ldr	r2, [r3, #16]
 801233e:	4b51      	ldr	r3, [pc, #324]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012340:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012342:	4b50      	ldr	r3, [pc, #320]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012344:	4a50      	ldr	r2, [pc, #320]	@ (8012488 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012346:	601a      	str	r2, [r3, #0]
        break;
 8012348:	e097      	b.n	801247a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 801234a:	2301      	movs	r3, #1
 801234c:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	689b      	ldr	r3, [r3, #8]
 8012352:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	1d1a      	adds	r2, r3, #4
 8012358:	4b4a      	ldr	r3, [pc, #296]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801235a:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	7f1b      	ldrb	r3, [r3, #28]
 8012360:	061a      	lsls	r2, r3, #24
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	4313      	orrs	r3, r2
 8012366:	4a47      	ldr	r2, [pc, #284]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801236c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801236e:	4a45      	ldr	r2, [pc, #276]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	691a      	ldr	r2, [r3, #16]
 8012378:	4b42      	ldr	r3, [pc, #264]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801237a:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	b2db      	uxtb	r3, r3
 8012382:	2b00      	cmp	r3, #0
 8012384:	d002      	beq.n	801238c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8012386:	2b01      	cmp	r3, #1
 8012388:	d00e      	beq.n	80123a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>
 801238a:	e023      	b.n	80123d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 801238c:	4b3d      	ldr	r3, [pc, #244]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801238e:	69db      	ldr	r3, [r3, #28]
 8012390:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012394:	f023 0310 	bic.w	r3, r3, #16
 8012398:	68fa      	ldr	r2, [r7, #12]
 801239a:	8852      	ldrh	r2, [r2, #2]
 801239c:	3a01      	subs	r2, #1
 801239e:	0212      	lsls	r2, r2, #8
 80123a0:	4938      	ldr	r1, [pc, #224]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123a2:	4313      	orrs	r3, r2
 80123a4:	61cb      	str	r3, [r1, #28]
                break;
 80123a6:	e01c      	b.n	80123e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	7f1b      	ldrb	r3, [r3, #28]
 80123ac:	2bff      	cmp	r3, #255	@ 0xff
 80123ae:	d101      	bne.n	80123b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
                {
                    blend = false;
 80123b0:	2300      	movs	r3, #0
 80123b2:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80123b4:	4b33      	ldr	r3, [pc, #204]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123b6:	69db      	ldr	r3, [r3, #28]
 80123b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80123bc:	f023 0310 	bic.w	r3, r3, #16
 80123c0:	68fa      	ldr	r2, [r7, #12]
 80123c2:	8852      	ldrh	r2, [r2, #2]
 80123c4:	3a01      	subs	r2, #1
 80123c6:	0212      	lsls	r2, r2, #8
 80123c8:	4313      	orrs	r3, r2
 80123ca:	4a2e      	ldr	r2, [pc, #184]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123cc:	f043 0310 	orr.w	r3, r3, #16
 80123d0:	61d3      	str	r3, [r2, #28]
                break;
 80123d2:	e006      	b.n	80123e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80123d4:	4b2d      	ldr	r3, [pc, #180]	@ (801248c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80123d6:	4a2e      	ldr	r2, [pc, #184]	@ (8012490 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80123d8:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80123dc:	482d      	ldr	r0, [pc, #180]	@ (8012494 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80123de:	f01a fadd 	bl	802c99c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80123e2:	4b28      	ldr	r3, [pc, #160]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123e4:	69db      	ldr	r3, [r3, #28]
 80123e6:	4a27      	ldr	r2, [pc, #156]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123e8:	f043 0320 	orr.w	r3, r3, #32
 80123ec:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80123ee:	bf00      	nop
 80123f0:	4b24      	ldr	r3, [pc, #144]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80123f2:	69db      	ldr	r3, [r3, #28]
 80123f4:	f003 0320 	and.w	r3, r3, #32
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	bf14      	ite	ne
 80123fc:	2301      	movne	r3, #1
 80123fe:	2300      	moveq	r3, #0
 8012400:	b2db      	uxtb	r3, r3
 8012402:	2b00      	cmp	r3, #0
 8012404:	d1f4      	bne.n	80123f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8012406:	4b1f      	ldr	r3, [pc, #124]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012408:	2210      	movs	r2, #16
 801240a:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 801240c:	7ffb      	ldrb	r3, [r7, #31]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d003      	beq.n	801241a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x236>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012412:	4b1c      	ldr	r3, [pc, #112]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012414:	4a1c      	ldr	r2, [pc, #112]	@ (8012488 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012416:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 8012418:	e02f      	b.n	801247a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801241a:	4b1a      	ldr	r3, [pc, #104]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801241c:	4a1e      	ldr	r2, [pc, #120]	@ (8012498 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 801241e:	601a      	str	r2, [r3, #0]
        break;
 8012420:	e02b      	b.n	801247a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	7f1b      	ldrb	r3, [r3, #28]
 8012426:	061a      	lsls	r2, r3, #24
 8012428:	69bb      	ldr	r3, [r7, #24]
 801242a:	4313      	orrs	r3, r2
 801242c:	4a15      	ldr	r2, [pc, #84]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801242e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012432:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012434:	4a13      	ldr	r2, [pc, #76]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	691a      	ldr	r2, [r3, #16]
 801243e:	4b11      	ldr	r3, [pc, #68]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012440:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012442:	4b10      	ldr	r3, [pc, #64]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012444:	4a10      	ldr	r2, [pc, #64]	@ (8012488 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012446:	601a      	str	r2, [r3, #0]
        break;
 8012448:	e017      	b.n	801247a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	7f1b      	ldrb	r3, [r3, #28]
 801244e:	061a      	lsls	r2, r3, #24
 8012450:	69bb      	ldr	r3, [r7, #24]
 8012452:	4313      	orrs	r3, r2
 8012454:	4a0b      	ldr	r2, [pc, #44]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801245a:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	7f5a      	ldrb	r2, [r3, #29]
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	7f9b      	ldrb	r3, [r3, #30]
 8012464:	429a      	cmp	r2, r3
 8012466:	d003      	beq.n	8012470 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012468:	4b06      	ldr	r3, [pc, #24]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801246a:	4a0b      	ldr	r2, [pc, #44]	@ (8012498 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 801246c:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }
        break;
 801246e:	e003      	b.n	8012478 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012470:	4b04      	ldr	r3, [pc, #16]	@ (8012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012472:	f242 3201 	movw	r2, #8961	@ 0x2301
 8012476:	601a      	str	r2, [r3, #0]
        break;
 8012478:	bf00      	nop
    }
}
 801247a:	bf00      	nop
 801247c:	3724      	adds	r7, #36	@ 0x24
 801247e:	46bd      	mov	sp, r7
 8012480:	bd90      	pop	{r4, r7, pc}
 8012482:	bf00      	nop
 8012484:	4002b000 	.word	0x4002b000
 8012488:	00022301 	.word	0x00022301
 801248c:	0802e4cc 	.word	0x0802e4cc
 8012490:	0802e4e8 	.word	0x0802e4e8
 8012494:	0802e454 	.word	0x0802e454
 8012498:	00012301 	.word	0x00012301

0801249c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 801249c:	b590      	push	{r4, r7, lr}
 801249e:	b085      	sub	sp, #20
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	7f9b      	ldrb	r3, [r3, #30]
 80124aa:	4619      	mov	r1, r3
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f7ff fe4f 	bl	8012150 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80124b2:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80124b4:	4a3b      	ldr	r2, [pc, #236]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	8adb      	ldrh	r3, [r3, #22]
 80124be:	461a      	mov	r2, r3
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	8a9b      	ldrh	r3, [r3, #20]
 80124c4:	041b      	lsls	r3, r3, #16
 80124c6:	431a      	orrs	r2, r3
 80124c8:	4b36      	ldr	r3, [pc, #216]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	691a      	ldr	r2, [r3, #16]
 80124d0:	4b34      	ldr	r3, [pc, #208]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	8b5b      	ldrh	r3, [r3, #26]
 80124d8:	461a      	mov	r2, r3
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	8a9b      	ldrh	r3, [r3, #20]
 80124de:	1ad2      	subs	r2, r2, r3
 80124e0:	4b30      	ldr	r3, [pc, #192]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124e2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	2b08      	cmp	r3, #8
 80124ea:	d12f      	bne.n	801254c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	8b5b      	ldrh	r3, [r3, #26]
 80124f0:	461a      	mov	r2, r3
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	8a9b      	ldrh	r3, [r3, #20]
 80124f6:	1ad2      	subs	r2, r2, r3
 80124f8:	4b2a      	ldr	r3, [pc, #168]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124fa:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	8b5b      	ldrh	r3, [r3, #26]
 8012500:	461a      	mov	r2, r3
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	8a9b      	ldrh	r3, [r3, #20]
 8012506:	1ad2      	subs	r2, r2, r3
 8012508:	4b26      	ldr	r3, [pc, #152]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801250a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801250c:	4a25      	ldr	r2, [pc, #148]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	7f1b      	ldrb	r3, [r3, #28]
 8012516:	061b      	lsls	r3, r3, #24
 8012518:	4a22      	ldr	r2, [pc, #136]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801251a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801251e:	f043 0309 	orr.w	r3, r3, #9
 8012522:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	330c      	adds	r3, #12
 8012528:	4c1e      	ldr	r4, [pc, #120]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801252a:	4618      	mov	r0, r3
 801252c:	f7ff fc5e 	bl	8011dec <_ZNK8touchgfx9colortypecvmEv>
 8012530:	4603      	mov	r3, r0
 8012532:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	691a      	ldr	r2, [r3, #16]
 8012538:	4b1a      	ldr	r3, [pc, #104]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801253a:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	691a      	ldr	r2, [r3, #16]
 8012540:	4b18      	ldr	r3, [pc, #96]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012542:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8012544:	4b17      	ldr	r3, [pc, #92]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012546:	4a18      	ldr	r2, [pc, #96]	@ (80125a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8012548:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 801254a:	e027      	b.n	801259c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 801254c:	4a15      	ldr	r2, [pc, #84]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8012552:	4b14      	ldr	r3, [pc, #80]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012554:	2200      	movs	r2, #0
 8012556:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	330c      	adds	r3, #12
 801255c:	4618      	mov	r0, r3
 801255e:	f7ff fc45 	bl	8011dec <_ZNK8touchgfx9colortypecvmEv>
 8012562:	4603      	mov	r3, r0
 8012564:	0a1b      	lsrs	r3, r3, #8
 8012566:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	330c      	adds	r3, #12
 801256e:	4618      	mov	r0, r3
 8012570:	f7ff fc3c 	bl	8011dec <_ZNK8touchgfx9colortypecvmEv>
 8012574:	4603      	mov	r3, r0
 8012576:	095b      	lsrs	r3, r3, #5
 8012578:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801257c:	431c      	orrs	r4, r3
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	330c      	adds	r3, #12
 8012582:	4618      	mov	r0, r3
 8012584:	f7ff fc32 	bl	8011dec <_ZNK8touchgfx9colortypecvmEv>
 8012588:	4603      	mov	r3, r0
 801258a:	08db      	lsrs	r3, r3, #3
 801258c:	f003 031f 	and.w	r3, r3, #31
 8012590:	4a04      	ldr	r2, [pc, #16]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012592:	4323      	orrs	r3, r4
 8012594:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8012596:	4b03      	ldr	r3, [pc, #12]	@ (80125a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012598:	4a04      	ldr	r2, [pc, #16]	@ (80125ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801259a:	601a      	str	r2, [r3, #0]
}
 801259c:	bf00      	nop
 801259e:	3714      	adds	r7, #20
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd90      	pop	{r4, r7, pc}
 80125a4:	4002b000 	.word	0x4002b000
 80125a8:	00022301 	.word	0x00022301
 80125ac:	00032301 	.word	0x00032301

080125b0 <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 80125b0:	b480      	push	{r7}
 80125b2:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80125b4:	bf00      	nop
 80125b6:	4b09      	ldr	r3, [pc, #36]	@ (80125dc <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	f003 0301 	and.w	r3, r3, #1
 80125be:	2b00      	cmp	r3, #0
 80125c0:	bf14      	ite	ne
 80125c2:	2301      	movne	r3, #1
 80125c4:	2300      	moveq	r3, #0
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d1f4      	bne.n	80125b6 <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80125cc:	4b03      	ldr	r3, [pc, #12]	@ (80125dc <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 80125ce:	2223      	movs	r2, #35	@ 0x23
 80125d0:	609a      	str	r2, [r3, #8]
}
 80125d2:	bf00      	nop
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr
 80125dc:	4002b000 	.word	0x4002b000

080125e0 <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 80125e0:	b480      	push	{r7}
 80125e2:	b083      	sub	sp, #12
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	6039      	str	r1, [r7, #0]
}
 80125ea:	bf00      	nop
 80125ec:	370c      	adds	r7, #12
 80125ee:	46bd      	mov	sp, r7
 80125f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f4:	4770      	bx	lr
	...

080125f8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 80125f8:	b480      	push	{r7}
 80125fa:	b085      	sub	sp, #20
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	607a      	str	r2, [r7, #4]
 8012604:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012606:	bf00      	nop
 8012608:	4b21      	ldr	r3, [pc, #132]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f003 0301 	and.w	r3, r3, #1
 8012610:	2b00      	cmp	r3, #0
 8012612:	bf14      	ite	ne
 8012614:	2301      	movne	r3, #1
 8012616:	2300      	moveq	r3, #0
 8012618:	b2db      	uxtb	r3, r3
 801261a:	2b00      	cmp	r3, #0
 801261c:	d1f4      	bne.n	8012608 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 801261e:	4b1c      	ldr	r3, [pc, #112]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012620:	2223      	movs	r2, #35	@ 0x23
 8012622:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8012624:	4b1a      	ldr	r3, [pc, #104]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012626:	2202      	movs	r2, #2
 8012628:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	041b      	lsls	r3, r3, #16
 801262e:	4a18      	ldr	r2, [pc, #96]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012630:	f043 0301 	orr.w	r3, r3, #1
 8012634:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8012636:	4a16      	ldr	r2, [pc, #88]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (alpha < 0xFF)
 801263c:	78fb      	ldrb	r3, [r7, #3]
 801263e:	2bff      	cmp	r3, #255	@ 0xff
 8012640:	d017      	beq.n	8012672 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012642:	4b13      	ldr	r3, [pc, #76]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012644:	2202      	movs	r2, #2
 8012646:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8012648:	78fb      	ldrb	r3, [r7, #3]
 801264a:	061b      	lsls	r3, r3, #24
 801264c:	4a10      	ldr	r2, [pc, #64]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801264e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012652:	f043 0309 	orr.w	r3, r3, #9
 8012656:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color);
 8012658:	4a0d      	ldr	r2, [pc, #52]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 801265e:	4a0c      	ldr	r2, [pc, #48]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8012664:	4a0a      	ldr	r2, [pc, #40]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 801266a:	4b09      	ldr	r3, [pc, #36]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801266c:	4a09      	ldr	r2, [pc, #36]	@ (8012694 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 801266e:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 8012670:	e008      	b.n	8012684 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012672:	4b07      	ldr	r3, [pc, #28]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012674:	2202      	movs	r2, #2
 8012676:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 8012678:	4a05      	ldr	r2, [pc, #20]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801267a:	69bb      	ldr	r3, [r7, #24]
 801267c:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 801267e:	4b04      	ldr	r3, [pc, #16]	@ (8012690 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012680:	4a05      	ldr	r2, [pc, #20]	@ (8012698 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 8012682:	601a      	str	r2, [r3, #0]
}
 8012684:	bf00      	nop
 8012686:	3714      	adds	r7, #20
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr
 8012690:	4002b000 	.word	0x4002b000
 8012694:	00020001 	.word	0x00020001
 8012698:	00030001 	.word	0x00030001

0801269c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 801269c:	b480      	push	{r7}
 801269e:	b085      	sub	sp, #20
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
 80126a8:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80126aa:	bf00      	nop
 80126ac:	4b1f      	ldr	r3, [pc, #124]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f003 0301 	and.w	r3, r3, #1
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	bf14      	ite	ne
 80126b8:	2301      	movne	r3, #1
 80126ba:	2300      	moveq	r3, #0
 80126bc:	b2db      	uxtb	r3, r3
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d1f4      	bne.n	80126ac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80126c2:	4b1a      	ldr	r3, [pc, #104]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126c4:	2223      	movs	r2, #35	@ 0x23
 80126c6:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 80126c8:	4b18      	ldr	r3, [pc, #96]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126ca:	2202      	movs	r2, #2
 80126cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	041b      	lsls	r3, r3, #16
 80126d2:	4a16      	ldr	r2, [pc, #88]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126d4:	f043 0301 	orr.w	r3, r3, #1
 80126d8:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80126da:	4a14      	ldr	r2, [pc, #80]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80126e0:	4a12      	ldr	r2, [pc, #72]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 80126e6:	78fb      	ldrb	r3, [r7, #3]
 80126e8:	2bff      	cmp	r3, #255	@ 0xff
 80126ea:	d00f      	beq.n	801270c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x70>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80126ec:	78fb      	ldrb	r3, [r7, #3]
 80126ee:	061b      	lsls	r3, r3, #24
 80126f0:	4a0e      	ldr	r2, [pc, #56]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126f2:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 80126f6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80126f8:	4b0c      	ldr	r3, [pc, #48]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80126fa:	2202      	movs	r2, #2
 80126fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80126fe:	4a0b      	ldr	r2, [pc, #44]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8012704:	4b09      	ldr	r3, [pc, #36]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012706:	4a0a      	ldr	r2, [pc, #40]	@ (8012730 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x94>)
 8012708:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 801270a:	e008      	b.n	801271e <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 801270c:	78fb      	ldrb	r3, [r7, #3]
 801270e:	061b      	lsls	r3, r3, #24
 8012710:	4a06      	ldr	r2, [pc, #24]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012712:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 8012716:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8012718:	4b04      	ldr	r3, [pc, #16]	@ (801272c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801271a:	2201      	movs	r2, #1
 801271c:	601a      	str	r2, [r3, #0]
}
 801271e:	bf00      	nop
 8012720:	3714      	adds	r7, #20
 8012722:	46bd      	mov	sp, r7
 8012724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012728:	4770      	bx	lr
 801272a:	bf00      	nop
 801272c:	4002b000 	.word	0x4002b000
 8012730:	00020001 	.word	0x00020001

08012734 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8012734:	b480      	push	{r7}
 8012736:	b085      	sub	sp, #20
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	607a      	str	r2, [r7, #4]
 8012740:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012742:	bf00      	nop
 8012744:	4b18      	ldr	r3, [pc, #96]	@ (80127a8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	f003 0301 	and.w	r3, r3, #1
 801274c:	2b00      	cmp	r3, #0
 801274e:	bf14      	ite	ne
 8012750:	2301      	movne	r3, #1
 8012752:	2300      	moveq	r3, #0
 8012754:	b2db      	uxtb	r3, r3
 8012756:	2b00      	cmp	r3, #0
 8012758:	d1f4      	bne.n	8012744 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 801275a:	4b13      	ldr	r3, [pc, #76]	@ (80127a8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801275c:	2223      	movs	r2, #35	@ 0x23
 801275e:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8012760:	4b11      	ldr	r3, [pc, #68]	@ (80127a8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012762:	2202      	movs	r2, #2
 8012764:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	041b      	lsls	r3, r3, #16
 801276a:	4a0f      	ldr	r2, [pc, #60]	@ (80127a8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801276c:	f043 0301 	orr.w	r3, r3, #1
 8012770:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8012772:	4a0d      	ldr	r2, [pc, #52]	@ (80127a8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8012778:	4a0b      	ldr	r2, [pc, #44]	@ (80127a8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	60d3      	str	r3, [r2, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 801277e:	78fb      	ldrb	r3, [r7, #3]
 8012780:	061b      	lsls	r3, r3, #24
 8012782:	4a09      	ldr	r2, [pc, #36]	@ (80127a8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012788:	61d3      	str	r3, [r2, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801278a:	4b07      	ldr	r3, [pc, #28]	@ (80127a8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801278c:	2202      	movs	r2, #2
 801278e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8012790:	4a05      	ldr	r2, [pc, #20]	@ (80127a8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	6153      	str	r3, [r2, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8012796:	4b04      	ldr	r3, [pc, #16]	@ (80127a8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012798:	4a04      	ldr	r2, [pc, #16]	@ (80127ac <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x78>)
 801279a:	601a      	str	r2, [r3, #0]
}
 801279c:	bf00      	nop
 801279e:	3714      	adds	r7, #20
 80127a0:	46bd      	mov	sp, r7
 80127a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a6:	4770      	bx	lr
 80127a8:	4002b000 	.word	0x4002b000
 80127ac:	00020001 	.word	0x00020001

080127b0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80127b0:	b480      	push	{r7}
 80127b2:	b083      	sub	sp, #12
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80127b8:	4a04      	ldr	r2, [pc, #16]	@ (80127cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6013      	str	r3, [r2, #0]
    }
 80127be:	bf00      	nop
 80127c0:	370c      	adds	r7, #12
 80127c2:	46bd      	mov	sp, r7
 80127c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop
 80127cc:	2005bb08 	.word	0x2005bb08

080127d0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80127d0:	b480      	push	{r7}
 80127d2:	b085      	sub	sp, #20
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	607a      	str	r2, [r7, #4]
 80127dc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80127de:	4a0b      	ldr	r2, [pc, #44]	@ (801280c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	68ba      	ldr	r2, [r7, #8]
 80127e8:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	683a      	ldr	r2, [r7, #0]
 80127f4:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	69ba      	ldr	r2, [r7, #24]
 80127fa:	611a      	str	r2, [r3, #16]
    {
    }
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	4618      	mov	r0, r3
 8012800:	3714      	adds	r7, #20
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr
 801280a:	bf00      	nop
 801280c:	0802efa0 	.word	0x0802efa0

08012810 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8012810:	b480      	push	{r7}
 8012812:	b083      	sub	sp, #12
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
    {
 8012818:	4a04      	ldr	r2, [pc, #16]	@ (801282c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	601a      	str	r2, [r3, #0]
    }
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	370c      	adds	r7, #12
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr
 801282c:	0802efa0 	.word	0x0802efa0

08012830 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
    }
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f7ff ffe9 	bl	8012810 <_ZN8touchgfx7MVPHeapD1Ev>
 801283e:	2114      	movs	r1, #20
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f019 f9b6 	bl	802bbb2 <_ZdlPvj>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	4618      	mov	r0, r3
 801284a:	3708      	adds	r7, #8
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}

08012850 <_ZN8touchgfx18VectorFontRendererD1Ev>:
 */
class VectorFontRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorFontRenderer()
 8012850:	b480      	push	{r7}
 8012852:	b083      	sub	sp, #12
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
    {
 8012858:	4a04      	ldr	r2, [pc, #16]	@ (801286c <_ZN8touchgfx18VectorFontRendererD1Ev+0x1c>)
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	601a      	str	r2, [r3, #0]
    }
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4618      	mov	r0, r3
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr
 801286c:	0802ef8c 	.word	0x0802ef8c

08012870 <_ZN8touchgfx18VectorFontRendererD0Ev>:
    virtual ~VectorFontRenderer()
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
    }
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f7ff ffe9 	bl	8012850 <_ZN8touchgfx18VectorFontRendererD1Ev>
 801287e:	2104      	movs	r1, #4
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f019 f996 	bl	802bbb2 <_ZdlPvj>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	4618      	mov	r0, r3
 801288a:	3708      	adds	r7, #8
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}

08012890 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8012890:	b480      	push	{r7}
 8012892:	b083      	sub	sp, #12
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
    {
 8012898:	4a04      	ldr	r2, [pc, #16]	@ (80128ac <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	601a      	str	r2, [r3, #0]
    }
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	4618      	mov	r0, r3
 80128a2:	370c      	adds	r7, #12
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr
 80128ac:	0802f8c8 	.word	0x0802f8c8

080128b0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b082      	sub	sp, #8
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
    }
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f7ff ffe9 	bl	8012890 <_ZN8touchgfx3LCDD1Ev>
 80128be:	210c      	movs	r1, #12
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f019 f976 	bl	802bbb2 <_ZdlPvj>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	4618      	mov	r0, r3
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>:
    /**
     * Set the vector font renderer
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
 80128d0:	b480      	push	{r7}
 80128d2:	b083      	sub	sp, #12
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	6039      	str	r1, [r7, #0]
    {
        vectorFontRenderer = renderer;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	683a      	ldr	r2, [r7, #0]
 80128de:	609a      	str	r2, [r3, #8]
    }
 80128e0:	bf00      	nop
 80128e2:	370c      	adds	r7, #12
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr

080128ec <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80128ec:	b480      	push	{r7}
 80128ee:	b083      	sub	sp, #12
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
            : startX(0),
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2200      	movs	r2, #0
 80128f8:	801a      	strh	r2, [r3, #0]
              startY(0),
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2200      	movs	r2, #0
 80128fe:	805a      	strh	r2, [r3, #2]
              downX(0),
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2200      	movs	r2, #0
 8012904:	809a      	strh	r2, [r3, #4]
              downY(0),
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2200      	movs	r2, #0
 801290a:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2200      	movs	r2, #0
 8012910:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2200      	movs	r2, #0
 8012916:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2200      	movs	r2, #0
 801291c:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2200      	movs	r2, #0
 8012922:	739a      	strb	r2, [r3, #14]
        {
        }
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	4618      	mov	r0, r3
 8012928:	370c      	adds	r7, #12
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr

08012932 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8012932:	b580      	push	{r7, lr}
 8012934:	b082      	sub	sp, #8
 8012936:	af00      	add	r7, sp, #0
 8012938:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	4618      	mov	r0, r3
 801293e:	f7ff ffd5 	bl	80128ec <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2200      	movs	r2, #0
 8012946:	611a      	str	r2, [r3, #16]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2200      	movs	r2, #0
 801294c:	829a      	strh	r2, [r3, #20]
    {
    }
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	4618      	mov	r0, r3
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	607a      	str	r2, [r7, #4]
 8012964:	603b      	str	r3, [r7, #0]
          maxBlockLines(20)
 8012966:	4a65      	ldr	r2, [pc, #404]	@ (8012afc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a4>)
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	68ba      	ldr	r2, [r7, #8]
 8012970:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	683a      	ldr	r2, [r7, #0]
 801297c:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2200      	movs	r2, #0
 8012982:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2200      	movs	r2, #0
 8012988:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	2200      	movs	r2, #0
 801298e:	619a      	str	r2, [r3, #24]
          gestures(),
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	331c      	adds	r3, #28
 8012994:	4618      	mov	r0, r3
 8012996:	f7ff ffcc 	bl	8012932 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	2200      	movs	r2, #0
 801299e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	2200      	movs	r2, #0
 80129a6:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2200      	movs	r2, #0
 80129ac:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2200      	movs	r2, #0
 80129b2:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	2200      	movs	r2, #0
 80129b8:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	2200      	movs	r2, #0
 80129be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	2201      	movs	r2, #1
 80129c6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	2200      	movs	r2, #0
 80129ce:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2200      	movs	r2, #0
 80129d6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2200      	movs	r2, #0
 80129de:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	3350      	adds	r3, #80	@ 0x50
 80129e4:	4618      	mov	r0, r3
 80129e6:	f7fd fcc0 	bl	801036a <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	2200      	movs	r2, #0
 80129ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2200      	movs	r2, #0
 80129f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2200      	movs	r2, #0
 80129fc:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2200      	movs	r2, #0
 8012a02:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	2201      	movs	r2, #1
 8012a08:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	2200      	movs	r2, #0
 8012a18:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	2201      	movs	r2, #1
 8012a20:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	2200      	movs	r2, #0
 8012a28:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	2200      	movs	r2, #0
 8012a38:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	2200      	movs	r2, #0
 8012a40:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	2200      	movs	r2, #0
 8012a48:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	2200      	movs	r2, #0
 8012a50:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2200      	movs	r2, #0
 8012a56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	2201      	movs	r2, #1
 8012a66:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE),
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	2201      	movs	r2, #1
 8012a6e:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
          isFrontPorchEntered(false),
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	2200      	movs	r2, #0
 8012a76:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          numberOfBlocks(4),
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	2204      	movs	r2, #4
 8012a7e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 8012a82:	8bbb      	ldrh	r3, [r7, #28]
 8012a84:	68fa      	ldr	r2, [r7, #12]
 8012a86:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 8012a8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a8e:	b29a      	uxth	r2, r3
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8012a9c:	4a18      	ldr	r2, [pc, #96]	@ (8012b00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a8>)
 8012a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8012aa2:	085b      	lsrs	r3, r3, #1
 8012aa4:	b29a      	uxth	r2, r3
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
          maxBlockLines(20)
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	2214      	movs	r2, #20
 8012ab0:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
        instance = this;
 8012ab4:	4a13      	ldr	r2, [pc, #76]	@ (8012b04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1ac>)
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8012aba:	4a13      	ldr	r2, [pc, #76]	@ (8012b08 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 8012abc:	8b3b      	ldrh	r3, [r7, #24]
 8012abe:	8013      	strh	r3, [r2, #0]
 8012ac0:	4b11      	ldr	r3, [pc, #68]	@ (8012b08 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 8012ac2:	881a      	ldrh	r2, [r3, #0]
 8012ac4:	4b11      	ldr	r3, [pc, #68]	@ (8012b0c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b4>)
 8012ac6:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8012ac8:	4a11      	ldr	r2, [pc, #68]	@ (8012b10 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 8012aca:	8bbb      	ldrh	r3, [r7, #28]
 8012acc:	8013      	strh	r3, [r2, #0]
 8012ace:	4b10      	ldr	r3, [pc, #64]	@ (8012b10 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 8012ad0:	881a      	ldrh	r2, [r3, #0]
 8012ad2:	4b10      	ldr	r3, [pc, #64]	@ (8012b14 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1bc>)
 8012ad4:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8012ad6:	4b10      	ldr	r3, [pc, #64]	@ (8012b18 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1c0>)
 8012ad8:	2200      	movs	r2, #0
 8012ada:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8012adc:	8b3a      	ldrh	r2, [r7, #24]
 8012ade:	8bbb      	ldrh	r3, [r7, #28]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	bf34      	ite	cc
 8012ae4:	2301      	movcc	r3, #1
 8012ae6:	2300      	movcs	r3, #0
 8012ae8:	b2db      	uxtb	r3, r3
 8012aea:	461a      	mov	r2, r3
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	4618      	mov	r0, r3
 8012af6:	3710      	adds	r7, #16
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}
 8012afc:	0802f4d0 	.word	0x0802f4d0
 8012b00:	aaaaaaab 	.word	0xaaaaaaab
 8012b04:	2005baa4 	.word	0x2005baa4
 8012b08:	2005ba98 	.word	0x2005ba98
 8012b0c:	2005ba9e 	.word	0x2005ba9e
 8012b10:	2005ba9a 	.word	0x2005ba9a
 8012b14:	2005baa0 	.word	0x2005baa0
 8012b18:	2005ba9c 	.word	0x2005ba9c

08012b1c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7fd f9a3 	bl	800fe74 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8012b2e:	bf00      	nop
 8012b30:	3708      	adds	r7, #8
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}
	...

08012b38 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b086      	sub	sp, #24
 8012b3c:	af02      	add	r7, sp, #8
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	607a      	str	r2, [r7, #4]
 8012b44:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8012b46:	68f8      	ldr	r0, [r7, #12]
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	9300      	str	r3, [sp, #0]
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	687a      	ldr	r2, [r7, #4]
 8012b50:	68b9      	ldr	r1, [r7, #8]
 8012b52:	f7ff fe3d 	bl	80127d0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8012b56:	4a04      	ldr	r2, [pc, #16]	@ (8012b68 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	601a      	str	r2, [r3, #0]
    {

    }
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3710      	adds	r7, #16
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}
 8012b66:	bf00      	nop
 8012b68:	0802ef78 	.word	0x0802ef78

08012b6c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b082      	sub	sp, #8
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	4a05      	ldr	r2, [pc, #20]	@ (8012b8c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	601a      	str	r2, [r3, #0]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7ff fe47 	bl	8012810 <_ZN8touchgfx7MVPHeapD1Ev>
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	4618      	mov	r0, r3
 8012b86:	3708      	adds	r7, #8
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	0802ef78 	.word	0x0802ef78

08012b90 <_ZN16FrontendHeapBaseD0Ev>:
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f7ff ffe7 	bl	8012b6c <_ZN16FrontendHeapBaseD1Ev>
 8012b9e:	2114      	movs	r1, #20
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f019 f806 	bl	802bbb2 <_ZdlPvj>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3708      	adds	r7, #8
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	4a05      	ldr	r2, [pc, #20]	@ (8012bd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	601a      	str	r2, [r3, #0]
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f001 f8b9 	bl	8013d38 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3708      	adds	r7, #8
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}
 8012bd0:	0802ef44 	.word	0x0802ef44

08012bd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b082      	sub	sp, #8
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f7ff ffe7 	bl	8012bb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012be2:	2118      	movs	r1, #24
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f018 ffe4 	bl	802bbb2 <_ZdlPvj>
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	4618      	mov	r0, r3
 8012bee:	3708      	adds	r7, #8
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	4a05      	ldr	r2, [pc, #20]	@ (8012c14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	601a      	str	r2, [r3, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	4618      	mov	r0, r3
 8012c06:	f001 f897 	bl	8013d38 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	0802ef10 	.word	0x0802ef10

08012c18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f7ff ffe7 	bl	8012bf4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012c26:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f018 ffc1 	bl	802bbb2 <_ZdlPvj>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	4618      	mov	r0, r3
 8012c34:	3708      	adds	r7, #8
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}
	...

08012c3c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	4a05      	ldr	r2, [pc, #20]	@ (8012c5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	601a      	str	r2, [r3, #0]
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f001 f873 	bl	8013d38 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	4618      	mov	r0, r3
 8012c56:	3708      	adds	r7, #8
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}
 8012c5c:	0802eedc 	.word	0x0802eedc

08012c60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b082      	sub	sp, #8
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f7ff ffe7 	bl	8012c3c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012c6e:	2114      	movs	r1, #20
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f018 ff9e 	bl	802bbb2 <_ZdlPvj>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3708      	adds	r7, #8
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}

08012c80 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b082      	sub	sp, #8
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	4a10      	ldr	r2, [pc, #64]	@ (8012ccc <_ZN12FrontendHeapD1Ev+0x4c>)
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	601a      	str	r2, [r3, #0]
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8012c94:	4618      	mov	r0, r3
 8012c96:	f7fe f9ed 	bl	8011074 <_ZN19FrontendApplicationD1Ev>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7ff ffcb 	bl	8012c3c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	332c      	adds	r3, #44	@ 0x2c
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7ff ffa2 	bl	8012bf4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	3314      	adds	r3, #20
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7ff ff7b 	bl	8012bb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7ff ff55 	bl	8012b6c <_ZN16FrontendHeapBaseD1Ev>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3708      	adds	r7, #8
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	0802eec8 	.word	0x0802eec8

08012cd0 <_ZN12FrontendHeapD0Ev>:
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b082      	sub	sp, #8
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f7ff ffd1 	bl	8012c80 <_ZN12FrontendHeapD1Ev>
 8012cde:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f018 ff65 	bl	802bbb2 <_ZdlPvj>
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	4618      	mov	r0, r3
 8012cec:	3708      	adds	r7, #8
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
	...

08012cf4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	4801      	ldr	r0, [pc, #4]	@ (8012d00 <__tcf_0+0xc>)
 8012cfa:	f7ff ffc1 	bl	8012c80 <_ZN12FrontendHeapD1Ev>
 8012cfe:	bd80      	pop	{r7, pc}
 8012d00:	2005a718 	.word	0x2005a718

08012d04 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012d04:	b580      	push	{r7, lr}
 8012d06:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012d08:	4b11      	ldr	r3, [pc, #68]	@ (8012d50 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012d0a:	e8d3 3faf 	lda	r3, [r3]
 8012d0e:	f003 0301 	and.w	r3, r3, #1
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	bf0c      	ite	eq
 8012d16:	2301      	moveq	r3, #1
 8012d18:	2300      	movne	r3, #0
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d013      	beq.n	8012d48 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8012d20:	480b      	ldr	r0, [pc, #44]	@ (8012d50 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012d22:	f018 ff48 	bl	802bbb6 <__cxa_guard_acquire>
 8012d26:	4603      	mov	r3, r0
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	bf14      	ite	ne
 8012d2c:	2301      	movne	r3, #1
 8012d2e:	2300      	moveq	r3, #0
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d008      	beq.n	8012d48 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8012d36:	4807      	ldr	r0, [pc, #28]	@ (8012d54 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8012d38:	f000 f846 	bl	8012dc8 <_ZN12FrontendHeapC1Ev>
 8012d3c:	4806      	ldr	r0, [pc, #24]	@ (8012d58 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8012d3e:	f019 fe4b 	bl	802c9d8 <atexit>
 8012d42:	4803      	ldr	r0, [pc, #12]	@ (8012d50 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012d44:	f018 ff43 	bl	802bbce <__cxa_guard_release>
        return instance;
 8012d48:	4b02      	ldr	r3, [pc, #8]	@ (8012d54 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	bf00      	nop
 8012d50:	2005ab00 	.word	0x2005ab00
 8012d54:	2005a718 	.word	0x2005a718
 8012d58:	08012cf5 	.word	0x08012cf5

08012d5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b082      	sub	sp, #8
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	4618      	mov	r0, r3
 8012d68:	f000 ffe8 	bl	8013d3c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012d6c:	4a03      	ldr	r2, [pc, #12]	@ (8012d7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	601a      	str	r2, [r3, #0]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	4618      	mov	r0, r3
 8012d76:	3708      	adds	r7, #8
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}
 8012d7c:	0802ef44 	.word	0x0802ef44

08012d80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f000 ffd6 	bl	8013d3c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012d90:	4a03      	ldr	r2, [pc, #12]	@ (8012da0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	601a      	str	r2, [r3, #0]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3708      	adds	r7, #8
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	0802ef10 	.word	0x0802ef10

08012da4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	4618      	mov	r0, r3
 8012db0:	f000 ffc4 	bl	8013d3c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012db4:	4a03      	ldr	r2, [pc, #12]	@ (8012dc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	601a      	str	r2, [r3, #0]
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	0802eedc 	.word	0x0802eedc

08012dc8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012dc8:	b590      	push	{r4, r7, lr}
 8012dca:	b085      	sub	sp, #20
 8012dcc:	af02      	add	r7, sp, #8
 8012dce:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f103 0114 	add.w	r1, r3, #20
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	f503 741d 	add.w	r4, r3, #628	@ 0x274
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
                     app(model, *this)
 8012dea:	9300      	str	r3, [sp, #0]
 8012dec:	4623      	mov	r3, r4
 8012dee:	f7ff fea3 	bl	8012b38 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8012df2:	4a18      	ldr	r2, [pc, #96]	@ (8012e54 <_ZN12FrontendHeapC1Ev+0x8c>)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	601a      	str	r2, [r3, #0]
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	3314      	adds	r3, #20
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7ff ffad 	bl	8012d5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	332c      	adds	r3, #44	@ 0x2c
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7ff ffba 	bl	8012d80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ff ffc6 	bl	8012da4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7fe f974 	bl	801110c <_ZN5ModelC1Ev>
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f503 7023 	add.w	r0, r3, #652	@ 0x28c
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8012e30:	687a      	ldr	r2, [r7, #4]
 8012e32:	4619      	mov	r1, r3
 8012e34:	f7fe f954 	bl	80110e0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8012e40:	4619      	mov	r1, r3
 8012e42:	4610      	mov	r0, r2
 8012e44:	f7ff fe6a 	bl	8012b1c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	370c      	adds	r7, #12
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd90      	pop	{r4, r7, pc}
 8012e52:	bf00      	nop
 8012e54:	0802eec8 	.word	0x0802eec8

08012e58 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b086      	sub	sp, #24
 8012e5c:	af02      	add	r7, sp, #8
 8012e5e:	60f8      	str	r0, [r7, #12]
 8012e60:	60b9      	str	r1, [r7, #8]
 8012e62:	607a      	str	r2, [r7, #4]
 8012e64:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8012e66:	68f8      	ldr	r0, [r7, #12]
 8012e68:	8bbb      	ldrh	r3, [r7, #28]
 8012e6a:	9301      	str	r3, [sp, #4]
 8012e6c:	8b3b      	ldrh	r3, [r7, #24]
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	687a      	ldr	r2, [r7, #4]
 8012e74:	68b9      	ldr	r1, [r7, #8]
 8012e76:	f7ff fd6f 	bl	8012958 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8012e7a:	4a04      	ldr	r2, [pc, #16]	@ (8012e8c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	601a      	str	r2, [r3, #0]
    }
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	4618      	mov	r0, r3
 8012e84:	3710      	adds	r7, #16
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
 8012e8a:	bf00      	nop
 8012e8c:	0802f0e8 	.word	0x0802f0e8

08012e90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b086      	sub	sp, #24
 8012e94:	af02      	add	r7, sp, #8
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	607a      	str	r2, [r7, #4]
 8012e9c:	603b      	str	r3, [r7, #0]
 8012e9e:	68f8      	ldr	r0, [r7, #12]
 8012ea0:	8bbb      	ldrh	r3, [r7, #28]
 8012ea2:	9301      	str	r3, [sp, #4]
 8012ea4:	8b3b      	ldrh	r3, [r7, #24]
 8012ea6:	9300      	str	r3, [sp, #0]
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	68b9      	ldr	r1, [r7, #8]
 8012eae:	f7ff ffd3 	bl	8012e58 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012eb2:	4a04      	ldr	r2, [pc, #16]	@ (8012ec4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	601a      	str	r2, [r3, #0]
    }
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3710      	adds	r7, #16
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	0802ed68 	.word	0x0802ed68

08012ec8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8012ec8:	b480      	push	{r7}
 8012eca:	b083      	sub	sp, #12
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
 8012ed0:	4a04      	ldr	r2, [pc, #16]	@ (8012ee4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	601a      	str	r2, [r3, #0]
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	4618      	mov	r0, r3
 8012eda:	370c      	adds	r7, #12
 8012edc:	46bd      	mov	sp, r7
 8012ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee2:	4770      	bx	lr
 8012ee4:	0802ed50 	.word	0x0802ed50

08012ee8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7ff ffe8 	bl	8012ec8 <_ZN8touchgfx15TouchControllerC1Ev>
 8012ef8:	4a03      	ldr	r2, [pc, #12]	@ (8012f08 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	601a      	str	r2, [r3, #0]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	4618      	mov	r0, r3
 8012f02:	3708      	adds	r7, #8
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	0802ed38 	.word	0x0802ed38

08012f0c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 296);

void touchgfx_init()
{
 8012f0c:	b590      	push	{r4, r7, lr}
 8012f0e:	b085      	sub	sp, #20
 8012f10:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8012f12:	f7fd fef5 	bl	8010d00 <_ZN14BitmapDatabase11getInstanceEv>
 8012f16:	4604      	mov	r4, r0
 8012f18:	f7fd fefc 	bl	8010d14 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	4619      	mov	r1, r3
 8012f20:	2300      	movs	r3, #0
 8012f22:	9300      	str	r3, [sp, #0]
 8012f24:	2300      	movs	r3, #0
 8012f26:	2200      	movs	r2, #0
 8012f28:	4620      	mov	r0, r4
 8012f2a:	f009 fddd 	bl	801cae8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8012f2e:	480b      	ldr	r0, [pc, #44]	@ (8012f5c <touchgfx_init+0x50>)
 8012f30:	f7ff fc3e 	bl	80127b0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8012f34:	2000      	movs	r0, #0
 8012f36:	f7fe f819 	bl	8010f6c <_ZN8touchgfx5Texts11setLanguageEt>

    display.setVectorFontRenderer(&vectorFontRenderer);
 8012f3a:	4909      	ldr	r1, [pc, #36]	@ (8012f60 <touchgfx_init+0x54>)
 8012f3c:	4809      	ldr	r0, [pc, #36]	@ (8012f64 <touchgfx_init+0x58>)
 8012f3e:	f7ff fcc7 	bl	80128d0 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>

    FontManager::setFontProvider(&fontProvider);
 8012f42:	4809      	ldr	r0, [pc, #36]	@ (8012f68 <touchgfx_init+0x5c>)
 8012f44:	f009 fd38 	bl	801c9b8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8012f48:	f7ff fedc 	bl	8012d04 <_ZN12FrontendHeap11getInstanceEv>
 8012f4c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8012f4e:	4807      	ldr	r0, [pc, #28]	@ (8012f6c <touchgfx_init+0x60>)
 8012f50:	f7fe fd5a 	bl	8011a08 <_ZN11TouchGFXHAL10initializeEv>
}
 8012f54:	bf00      	nop
 8012f56:	370c      	adds	r7, #12
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd90      	pop	{r4, r7, pc}
 8012f5c:	2005b950 	.word	0x2005b950
 8012f60:	2005b934 	.word	0x2005b934
 8012f64:	2005b8a8 	.word	0x2005b8a8
 8012f68:	20000018 	.word	0x20000018
 8012f6c:	2005b954 	.word	0x2005b954

08012f70 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8012f70:	b480      	push	{r7}
 8012f72:	af00      	add	r7, sp, #0
}
 8012f74:	bf00      	nop
 8012f76:	46bd      	mov	sp, r7
 8012f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7c:	4770      	bx	lr
	...

08012f80 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8012f84:	4802      	ldr	r0, [pc, #8]	@ (8012f90 <touchgfx_taskEntry+0x10>)
 8012f86:	f001 fecc 	bl	8014d22 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8012f8a:	bf00      	nop
 8012f8c:	bd80      	pop	{r7, pc}
 8012f8e:	bf00      	nop
 8012f90:	2005b954 	.word	0x2005b954

08012f94 <_Z41__static_initialization_and_destruction_0v>:
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af02      	add	r7, sp, #8
static STM32TouchController tc;
 8012f9a:	480d      	ldr	r0, [pc, #52]	@ (8012fd0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8012f9c:	f7ff ffa4 	bl	8012ee8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8012fa0:	480c      	ldr	r0, [pc, #48]	@ (8012fd4 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8012fa2:	f7ff f807 	bl	8011fb4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8012fa6:	480c      	ldr	r0, [pc, #48]	@ (8012fd8 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8012fa8:	f00e fe9e 	bl	8021ce8 <_ZN8touchgfx8LCD16bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8012fac:	480b      	ldr	r0, [pc, #44]	@ (8012fdc <_Z41__static_initialization_and_destruction_0v+0x48>)
 8012fae:	f007 fe21 	bl	801abf4 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 296);
 8012fb2:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8012fb6:	9301      	str	r3, [sp, #4]
 8012fb8:	23f0      	movs	r3, #240	@ 0xf0
 8012fba:	9300      	str	r3, [sp, #0]
 8012fbc:	4b04      	ldr	r3, [pc, #16]	@ (8012fd0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8012fbe:	4a06      	ldr	r2, [pc, #24]	@ (8012fd8 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8012fc0:	4904      	ldr	r1, [pc, #16]	@ (8012fd4 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8012fc2:	4807      	ldr	r0, [pc, #28]	@ (8012fe0 <_Z41__static_initialization_and_destruction_0v+0x4c>)
 8012fc4:	f7ff ff64 	bl	8012e90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8012fc8:	bf00      	nop
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	2005ab04 	.word	0x2005ab04
 8012fd4:	2005ab08 	.word	0x2005ab08
 8012fd8:	2005b8a8 	.word	0x2005b8a8
 8012fdc:	2005b934 	.word	0x2005b934
 8012fe0:	2005b954 	.word	0x2005b954

08012fe4 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
namespace touchgfx
{
/**
 * Implementation of the VectorFontRenderer interface
 */
class VectorFontRendererImpl : public VectorFontRenderer
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	4a05      	ldr	r2, [pc, #20]	@ (8013004 <_ZN8touchgfx22VectorFontRendererImplD1Ev+0x20>)
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	601a      	str	r2, [r3, #0]
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7ff fc2b 	bl	8012850 <_ZN8touchgfx18VectorFontRendererD1Ev>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3708      	adds	r7, #8
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}
 8013004:	0802f9dc 	.word	0x0802f9dc

08013008 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f7ff ffe7 	bl	8012fe4 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
 8013016:	211c      	movs	r1, #28
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f018 fdca 	bl	802bbb2 <_ZdlPvj>
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	4618      	mov	r0, r3
 8013022:	3708      	adds	r7, #8
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	4a05      	ldr	r2, [pc, #20]	@ (8013048 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	601a      	str	r2, [r3, #0]
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	4618      	mov	r0, r3
 801303a:	f7ff fc29 	bl	8012890 <_ZN8touchgfx3LCDD1Ev>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	4618      	mov	r0, r3
 8013042:	3708      	adds	r7, #8
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}
 8013048:	0802fd64 	.word	0x0802fd64

0801304c <_ZN8touchgfx8LCD16bppD0Ev>:
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f7ff ffe7 	bl	8013028 <_ZN8touchgfx8LCD16bppD1Ev>
 801305a:	218c      	movs	r1, #140	@ 0x8c
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f018 fda8 	bl	802bbb2 <_ZdlPvj>
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	4618      	mov	r0, r3
 8013066:	3708      	adds	r7, #8
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}

0801306c <_Z41__static_initialization_and_destruction_1v>:
 801306c:	b580      	push	{r7, lr}
 801306e:	af00      	add	r7, sp, #0
static TouchGFXHAL hal(dma, display, tc, 240, 296);
 8013070:	4809      	ldr	r0, [pc, #36]	@ (8013098 <_Z41__static_initialization_and_destruction_1v+0x2c>)
 8013072:	f7fe fdbb 	bl	8011bec <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013076:	4809      	ldr	r0, [pc, #36]	@ (801309c <_Z41__static_initialization_and_destruction_1v+0x30>)
 8013078:	f7fc f91e 	bl	800f2b8 <_ZN23ApplicationFontProviderD1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 801307c:	4808      	ldr	r0, [pc, #32]	@ (80130a0 <_Z41__static_initialization_and_destruction_1v+0x34>)
 801307e:	f7ff ffb1 	bl	8012fe4 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
static LCD16bpp display;
 8013082:	4808      	ldr	r0, [pc, #32]	@ (80130a4 <_Z41__static_initialization_and_destruction_1v+0x38>)
 8013084:	f7ff ffd0 	bl	8013028 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8013088:	4807      	ldr	r0, [pc, #28]	@ (80130a8 <_Z41__static_initialization_and_destruction_1v+0x3c>)
 801308a:	f7fe ffbd 	bl	8012008 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801308e:	4807      	ldr	r0, [pc, #28]	@ (80130ac <_Z41__static_initialization_and_destruction_1v+0x40>)
 8013090:	f7fe fa44 	bl	801151c <_ZN20STM32TouchControllerD1Ev>
}
 8013094:	bf00      	nop
 8013096:	bd80      	pop	{r7, pc}
 8013098:	2005b954 	.word	0x2005b954
 801309c:	20000018 	.word	0x20000018
 80130a0:	2005b934 	.word	0x2005b934
 80130a4:	2005b8a8 	.word	0x2005b8a8
 80130a8:	2005ab08 	.word	0x2005ab08
 80130ac:	2005ab04 	.word	0x2005ab04

080130b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80130b0:	b480      	push	{r7}
 80130b2:	b083      	sub	sp, #12
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80130b8:	2301      	movs	r3, #1
    }
 80130ba:	4618      	mov	r0, r3
 80130bc:	370c      	adds	r7, #12
 80130be:	46bd      	mov	sp, r7
 80130c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c4:	4770      	bx	lr

080130c6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80130c6:	b480      	push	{r7}
 80130c8:	b083      	sub	sp, #12
 80130ca:	af00      	add	r7, sp, #0
 80130cc:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80130ce:	230c      	movs	r3, #12
    }
 80130d0:	4618      	mov	r0, r3
 80130d2:	370c      	adds	r7, #12
 80130d4:	46bd      	mov	sp, r7
 80130d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130da:	4770      	bx	lr

080130dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80130dc:	b480      	push	{r7}
 80130de:	b083      	sub	sp, #12
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	460b      	mov	r3, r1
 80130e6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80130e8:	887a      	ldrh	r2, [r7, #2]
 80130ea:	4613      	mov	r3, r2
 80130ec:	005b      	lsls	r3, r3, #1
 80130ee:	4413      	add	r3, r2
 80130f0:	009b      	lsls	r3, r3, #2
 80130f2:	3308      	adds	r3, #8
 80130f4:	687a      	ldr	r2, [r7, #4]
 80130f6:	4413      	add	r3, r2
    }
 80130f8:	4618      	mov	r0, r3
 80130fa:	370c      	adds	r7, #12
 80130fc:	46bd      	mov	sp, r7
 80130fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013102:	4770      	bx	lr

08013104 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8013104:	b480      	push	{r7}
 8013106:	b083      	sub	sp, #12
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	460b      	mov	r3, r1
 801310e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013110:	887a      	ldrh	r2, [r7, #2]
 8013112:	4613      	mov	r3, r2
 8013114:	005b      	lsls	r3, r3, #1
 8013116:	4413      	add	r3, r2
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	3308      	adds	r3, #8
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	4413      	add	r3, r2
    }
 8013120:	4618      	mov	r0, r3
 8013122:	370c      	adds	r7, #12
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr

0801312c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801312c:	b480      	push	{r7}
 801312e:	b083      	sub	sp, #12
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013134:	2301      	movs	r3, #1
    }
 8013136:	4618      	mov	r0, r3
 8013138:	370c      	adds	r7, #12
 801313a:	46bd      	mov	sp, r7
 801313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013140:	4770      	bx	lr

08013142 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013142:	b480      	push	{r7}
 8013144:	b083      	sub	sp, #12
 8013146:	af00      	add	r7, sp, #0
 8013148:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801314a:	f44f 7310 	mov.w	r3, #576	@ 0x240
    }
 801314e:	4618      	mov	r0, r3
 8013150:	370c      	adds	r7, #12
 8013152:	46bd      	mov	sp, r7
 8013154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013158:	4770      	bx	lr

0801315a <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801315a:	b480      	push	{r7}
 801315c:	b083      	sub	sp, #12
 801315e:	af00      	add	r7, sp, #0
 8013160:	6078      	str	r0, [r7, #4]
 8013162:	460b      	mov	r3, r1
 8013164:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013166:	887a      	ldrh	r2, [r7, #2]
 8013168:	4613      	mov	r3, r2
 801316a:	00db      	lsls	r3, r3, #3
 801316c:	4413      	add	r3, r2
 801316e:	019b      	lsls	r3, r3, #6
 8013170:	3308      	adds	r3, #8
 8013172:	687a      	ldr	r2, [r7, #4]
 8013174:	4413      	add	r3, r2
    }
 8013176:	4618      	mov	r0, r3
 8013178:	370c      	adds	r7, #12
 801317a:	46bd      	mov	sp, r7
 801317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013180:	4770      	bx	lr

08013182 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013182:	b480      	push	{r7}
 8013184:	b083      	sub	sp, #12
 8013186:	af00      	add	r7, sp, #0
 8013188:	6078      	str	r0, [r7, #4]
 801318a:	460b      	mov	r3, r1
 801318c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801318e:	887a      	ldrh	r2, [r7, #2]
 8013190:	4613      	mov	r3, r2
 8013192:	00db      	lsls	r3, r3, #3
 8013194:	4413      	add	r3, r2
 8013196:	019b      	lsls	r3, r3, #6
 8013198:	3308      	adds	r3, #8
 801319a:	687a      	ldr	r2, [r7, #4]
 801319c:	4413      	add	r3, r2
    }
 801319e:	4618      	mov	r0, r3
 80131a0:	370c      	adds	r7, #12
 80131a2:	46bd      	mov	sp, r7
 80131a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a8:	4770      	bx	lr

080131aa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80131aa:	b480      	push	{r7}
 80131ac:	b083      	sub	sp, #12
 80131ae:	af00      	add	r7, sp, #0
 80131b0:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80131b2:	2301      	movs	r3, #1
    }
 80131b4:	4618      	mov	r0, r3
 80131b6:	370c      	adds	r7, #12
 80131b8:	46bd      	mov	sp, r7
 80131ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131be:	4770      	bx	lr

080131c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80131c0:	b480      	push	{r7}
 80131c2:	b083      	sub	sp, #12
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80131c8:	2310      	movs	r3, #16
    }
 80131ca:	4618      	mov	r0, r3
 80131cc:	370c      	adds	r7, #12
 80131ce:	46bd      	mov	sp, r7
 80131d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d4:	4770      	bx	lr

080131d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80131d6:	b480      	push	{r7}
 80131d8:	b083      	sub	sp, #12
 80131da:	af00      	add	r7, sp, #0
 80131dc:	6078      	str	r0, [r7, #4]
 80131de:	460b      	mov	r3, r1
 80131e0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80131e2:	887b      	ldrh	r3, [r7, #2]
 80131e4:	011b      	lsls	r3, r3, #4
 80131e6:	3308      	adds	r3, #8
 80131e8:	687a      	ldr	r2, [r7, #4]
 80131ea:	4413      	add	r3, r2
    }
 80131ec:	4618      	mov	r0, r3
 80131ee:	370c      	adds	r7, #12
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr

080131f8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80131f8:	b480      	push	{r7}
 80131fa:	b083      	sub	sp, #12
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	460b      	mov	r3, r1
 8013202:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013204:	887b      	ldrh	r3, [r7, #2]
 8013206:	011b      	lsls	r3, r3, #4
 8013208:	3308      	adds	r3, #8
 801320a:	687a      	ldr	r2, [r7, #4]
 801320c:	4413      	add	r3, r2
    }
 801320e:	4618      	mov	r0, r3
 8013210:	370c      	adds	r7, #12
 8013212:	46bd      	mov	sp, r7
 8013214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013218:	4770      	bx	lr

0801321a <_GLOBAL__sub_I_touchgfx_init>:
 801321a:	b580      	push	{r7, lr}
 801321c:	af00      	add	r7, sp, #0
 801321e:	f7ff feb9 	bl	8012f94 <_Z41__static_initialization_and_destruction_0v>
 8013222:	bd80      	pop	{r7, pc}

08013224 <_GLOBAL__sub_D_touchgfx_init>:
 8013224:	b580      	push	{r7, lr}
 8013226:	af00      	add	r7, sp, #0
 8013228:	f7ff ff20 	bl	801306c <_Z41__static_initialization_and_destruction_1v>
 801322c:	bd80      	pop	{r7, pc}

0801322e <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 801322e:	b480      	push	{r7}
 8013230:	b085      	sub	sp, #20
 8013232:	af00      	add	r7, sp, #0
 8013234:	60f8      	str	r0, [r7, #12]
 8013236:	4608      	mov	r0, r1
 8013238:	4611      	mov	r1, r2
 801323a:	461a      	mov	r2, r3
 801323c:	4603      	mov	r3, r0
 801323e:	817b      	strh	r3, [r7, #10]
 8013240:	460b      	mov	r3, r1
 8013242:	813b      	strh	r3, [r7, #8]
 8013244:	4613      	mov	r3, r2
 8013246:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	897a      	ldrh	r2, [r7, #10]
 801324c:	801a      	strh	r2, [r3, #0]
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	893a      	ldrh	r2, [r7, #8]
 8013252:	805a      	strh	r2, [r3, #2]
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	88fa      	ldrh	r2, [r7, #6]
 8013258:	809a      	strh	r2, [r3, #4]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	8b3a      	ldrh	r2, [r7, #24]
 801325e:	80da      	strh	r2, [r3, #6]
    {
    }
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	4618      	mov	r0, r3
 8013264:	3714      	adds	r7, #20
 8013266:	46bd      	mov	sp, r7
 8013268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326c:	4770      	bx	lr

0801326e <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 801326e:	b480      	push	{r7}
 8013270:	b083      	sub	sp, #12
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
        return rect.width;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 801327c:	4618      	mov	r0, r3
 801327e:	370c      	adds	r7, #12
 8013280:	46bd      	mov	sp, r7
 8013282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013286:	4770      	bx	lr

08013288 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8013288:	b480      	push	{r7}
 801328a:	b083      	sub	sp, #12
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
        return rect.height;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8013296:	4618      	mov	r0, r3
 8013298:	370c      	adds	r7, #12
 801329a:	46bd      	mov	sp, r7
 801329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a0:	4770      	bx	lr
	...

080132a4 <_ZN8touchgfx14VectorRendererD1Ev>:
 */
class VectorRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorRenderer()
 80132a4:	b480      	push	{r7}
 80132a6:	b083      	sub	sp, #12
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
    {
 80132ac:	4a04      	ldr	r2, [pc, #16]	@ (80132c0 <_ZN8touchgfx14VectorRendererD1Ev+0x1c>)
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	601a      	str	r2, [r3, #0]
    }
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	4618      	mov	r0, r3
 80132b6:	370c      	adds	r7, #12
 80132b8:	46bd      	mov	sp, r7
 80132ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132be:	4770      	bx	lr
 80132c0:	0802f1d4 	.word	0x0802f1d4

080132c4 <_ZN8touchgfx14VectorRendererD0Ev>:
    virtual ~VectorRenderer()
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b082      	sub	sp, #8
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
    }
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f7ff ffe9 	bl	80132a4 <_ZN8touchgfx14VectorRendererD1Ev>
 80132d2:	2104      	movs	r1, #4
 80132d4:	6878      	ldr	r0, [r7, #4]
 80132d6:	f018 fc6c 	bl	802bbb2 <_ZdlPvj>
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	4618      	mov	r0, r3
 80132de:	3708      	adds	r7, #8
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 80132e4:	b480      	push	{r7}
 80132e6:	b083      	sub	sp, #12
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 80132f0:	4618      	mov	r0, r3
 80132f2:	370c      	adds	r7, #12
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr

080132fc <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b082      	sub	sp, #8
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
 8013304:	6039      	str	r1, [r7, #0]
    {
 8013306:	4a08      	ldr	r2, [pc, #32]	@ (8013328 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	601a      	str	r2, [r3, #0]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	3304      	adds	r3, #4
 8013310:	4618      	mov	r0, r3
 8013312:	f7fe fd5d 	bl	8011dd0 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 8013316:	6839      	ldr	r1, [r7, #0]
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f000 f827 	bl	801336c <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	4618      	mov	r0, r3
 8013322:	3708      	adds	r7, #8
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}
 8013328:	0802f0d4 	.word	0x0802f0d4

0801332c <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 801332c:	b480      	push	{r7}
 801332e:	b083      	sub	sp, #12
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
    {
 8013334:	4a04      	ldr	r2, [pc, #16]	@ (8013348 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	601a      	str	r2, [r3, #0]
    }
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	4618      	mov	r0, r3
 801333e:	370c      	adds	r7, #12
 8013340:	46bd      	mov	sp, r7
 8013342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013346:	4770      	bx	lr
 8013348:	0802f0d4 	.word	0x0802f0d4

0801334c <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
    }
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	f7ff ffe9 	bl	801332c <_ZN8touchgfx20AbstractPainterColorD1Ev>
 801335a:	2108      	movs	r1, #8
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f018 fc28 	bl	802bbb2 <_ZdlPvj>
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	4618      	mov	r0, r3
 8013366:	3708      	adds	r7, #8
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}

0801336c <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 801336c:	b480      	push	{r7}
 801336e:	b083      	sub	sp, #12
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
 8013374:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	683a      	ldr	r2, [r7, #0]
 801337a:	605a      	str	r2, [r3, #4]
    }
 801337c:	bf00      	nop
 801337e:	370c      	adds	r7, #12
 8013380:	46bd      	mov	sp, r7
 8013382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013386:	4770      	bx	lr

08013388 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8013388:	b480      	push	{r7}
 801338a:	b083      	sub	sp, #12
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 8013390:	4a06      	ldr	r2, [pc, #24]	@ (80133ac <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	601a      	str	r2, [r3, #0]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2200      	movs	r2, #0
 801339a:	809a      	strh	r2, [r3, #4]
    {
    }
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	4618      	mov	r0, r3
 80133a0:	370c      	adds	r7, #12
 80133a2:	46bd      	mov	sp, r7
 80133a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a8:	4770      	bx	lr
 80133aa:	bf00      	nop
 80133ac:	0802f0b4 	.word	0x0802f0b4

080133b0 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 80133b0:	b480      	push	{r7}
 80133b2:	b083      	sub	sp, #12
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
    {
 80133b8:	4a04      	ldr	r2, [pc, #16]	@ (80133cc <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	601a      	str	r2, [r3, #0]
    }
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	4618      	mov	r0, r3
 80133c2:	370c      	adds	r7, #12
 80133c4:	46bd      	mov	sp, r7
 80133c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ca:	4770      	bx	lr
 80133cc:	0802f0b4 	.word	0x0802f0b4

080133d0 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
    }
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f7ff ffe9 	bl	80133b0 <_ZN8touchgfx15AbstractPainterD1Ev>
 80133de:	2108      	movs	r1, #8
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f018 fbe6 	bl	802bbb2 <_ZdlPvj>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	4618      	mov	r0, r3
 80133ea:	3708      	adds	r7, #8
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd80      	pop	{r7, pc}

080133f0 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 80133f8:	2300      	movs	r3, #0
    }
 80133fa:	4618      	mov	r0, r3
 80133fc:	370c      	adds	r7, #12
 80133fe:	46bd      	mov	sp, r7
 8013400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013404:	4770      	bx	lr

08013406 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 8013406:	b480      	push	{r7}
 8013408:	b083      	sub	sp, #12
 801340a:	af00      	add	r7, sp, #0
 801340c:	6078      	str	r0, [r7, #4]
 801340e:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	809a      	strh	r2, [r3, #4]
        return true;
 801341a:	2301      	movs	r3, #1
    }
 801341c:	4618      	mov	r0, r3
 801341e:	370c      	adds	r7, #12
 8013420:	46bd      	mov	sp, r7
 8013422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013426:	4770      	bx	lr

08013428 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 8013428:	b480      	push	{r7}
 801342a:	b083      	sub	sp, #12
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
    {
        return;
 8013430:	bf00      	nop
    }
 8013432:	370c      	adds	r7, #12
 8013434:	46bd      	mov	sp, r7
 8013436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343a:	4770      	bx	lr

0801343c <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>:
 */
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
 801343c:	b580      	push	{r7, lr}
 801343e:	b082      	sub	sp, #8
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
        : AbstractPainter(),
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	4618      	mov	r0, r3
 8013448:	f7ff ff9e 	bl	8013388 <_ZN8touchgfx15AbstractPainterC1Ev>
 801344c:	4a14      	ldr	r2, [pc, #80]	@ (80134a0 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev+0x64>)
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	601a      	str	r2, [r3, #0]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2200      	movs	r2, #0
 8013456:	811a      	strh	r2, [r3, #8]
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2264      	movs	r2, #100	@ 0x64
 801345c:	815a      	strh	r2, [r3, #10]
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	2200      	movs	r2, #0
 8013462:	60da      	str	r2, [r3, #12]
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2200      	movs	r2, #0
 8013468:	741a      	strb	r2, [r3, #16]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	2200      	movs	r2, #0
 801346e:	745a      	strb	r2, [r3, #17]
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2200      	movs	r2, #0
 8013474:	749a      	strb	r2, [r3, #18]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f04f 0200 	mov.w	r2, #0
 801347c:	615a      	str	r2, [r3, #20]
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f04f 0200 	mov.w	r2, #0
 8013484:	619a      	str	r2, [r3, #24]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f04f 0200 	mov.w	r2, #0
 801348c:	61da      	str	r2, [r3, #28]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f04f 0200 	mov.w	r2, #0
 8013494:	621a      	str	r2, [r3, #32]
    {
    }
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	4618      	mov	r0, r3
 801349a:	3708      	adds	r7, #8
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	0802f094 	.word	0x0802f094

080134a4 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterLinearGradient()
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
    {
 80134ac:	4a05      	ldr	r2, [pc, #20]	@ (80134c4 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev+0x20>)
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	601a      	str	r2, [r3, #0]
    }
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7ff ff7b 	bl	80133b0 <_ZN8touchgfx15AbstractPainterD1Ev>
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	4618      	mov	r0, r3
 80134be:	3708      	adds	r7, #8
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}
 80134c4:	0802f094 	.word	0x0802f094

080134c8 <_ZN8touchgfx29AbstractPainterLinearGradientD0Ev>:
    virtual ~AbstractPainterLinearGradient()
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b082      	sub	sp, #8
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
    }
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f7ff ffe7 	bl	80134a4 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 80134d6:	2124      	movs	r1, #36	@ 0x24
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f018 fb6a 	bl	802bbb2 <_ZdlPvj>
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	4618      	mov	r0, r3
 80134e2:	3708      	adds	r7, #8
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 80134e8:	b480      	push	{r7}
 80134ea:	b083      	sub	sp, #12
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	460b      	mov	r3, r1
 80134f2:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	78fa      	ldrb	r2, [r7, #3]
 80134f8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 80134fc:	bf00      	nop
 80134fe:	370c      	adds	r7, #12
 8013500:	46bd      	mov	sp, r7
 8013502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013506:	4770      	bx	lr

08013508 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 8013508:	b480      	push	{r7}
 801350a:	b083      	sub	sp, #12
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 8013516:	4618      	mov	r0, r3
 8013518:	370c      	adds	r7, #12
 801351a:	46bd      	mov	sp, r7
 801351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013520:	4770      	bx	lr

08013522 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8013522:	b590      	push	{r4, r7, lr}
 8013524:	b085      	sub	sp, #20
 8013526:	af02      	add	r7, sp, #8
 8013528:	6078      	str	r0, [r7, #4]
 801352a:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	4618      	mov	r0, r3
 8013530:	f7ff fe9d 	bl	801326e <_ZNK8touchgfx8Drawable8getWidthEv>
 8013534:	4603      	mov	r3, r0
 8013536:	461c      	mov	r4, r3
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	4618      	mov	r0, r3
 801353c:	f7ff fea4 	bl	8013288 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013540:	4603      	mov	r3, r0
 8013542:	9300      	str	r3, [sp, #0]
 8013544:	4623      	mov	r3, r4
 8013546:	2200      	movs	r2, #0
 8013548:	2100      	movs	r1, #0
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f7ff fe6f 	bl	801322e <_ZN8touchgfx4RectC1Essss>
    }
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	370c      	adds	r7, #12
 8013554:	46bd      	mov	sp, r7
 8013556:	bd90      	pop	{r4, r7, pc}

08013558 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f7fc ff01 	bl	801036a <_ZN8touchgfx4RectC1Ev>
    }
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	3708      	adds	r7, #8
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8013570:	b580      	push	{r7, lr}
 8013572:	b084      	sub	sp, #16
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	4618      	mov	r0, r3
 801357c:	f7ff ff04 	bl	8013388 <_ZN8touchgfx15AbstractPainterC1Ev>
 8013580:	4a26      	ldr	r2, [pc, #152]	@ (801361c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	601a      	str	r2, [r3, #0]
 8013586:	2300      	movs	r3, #0
 8013588:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 801358a:	f7fc fa5d 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 801358e:	4603      	mov	r3, r0
 8013590:	681a      	ldr	r2, [r3, #0]
 8013592:	322c      	adds	r2, #44	@ 0x2c
 8013594:	6812      	ldr	r2, [r2, #0]
 8013596:	4618      	mov	r0, r3
 8013598:	4790      	blx	r2
 801359a:	4603      	mov	r3, r0
 801359c:	461a      	mov	r2, r3
 801359e:	7bfb      	ldrb	r3, [r7, #15]
 80135a0:	4293      	cmp	r3, r2
 80135a2:	bf0c      	ite	eq
 80135a4:	2301      	moveq	r3, #1
 80135a6:	2300      	movne	r3, #0
 80135a8:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80135aa:	f7fb ff93 	bl	800f4d4 <_ZN8touchgfx3HAL11getInstanceEv>
 80135ae:	4603      	mov	r3, r0
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7ff fe97 	bl	80132e4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80135b6:	4603      	mov	r3, r0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	bf14      	ite	ne
 80135bc:	2301      	movne	r3, #1
 80135be:	2300      	moveq	r3, #0
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d01b      	beq.n	80135fe <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80135c6:	f7fb ff85 	bl	800f4d4 <_ZN8touchgfx3HAL11getInstanceEv>
 80135ca:	4603      	mov	r3, r0
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7ff fe89 	bl	80132e4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80135d2:	4603      	mov	r3, r0
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	322c      	adds	r2, #44	@ 0x2c
 80135d8:	6812      	ldr	r2, [r2, #0]
 80135da:	4618      	mov	r0, r3
 80135dc:	4790      	blx	r2
 80135de:	4603      	mov	r3, r0
 80135e0:	461a      	mov	r2, r3
 80135e2:	7bfb      	ldrb	r3, [r7, #15]
 80135e4:	4293      	cmp	r3, r2
 80135e6:	bf0c      	ite	eq
 80135e8:	2301      	moveq	r3, #1
 80135ea:	2300      	movne	r3, #0
 80135ec:	b2da      	uxtb	r2, r3
 80135ee:	7bbb      	ldrb	r3, [r7, #14]
 80135f0:	4313      	orrs	r3, r2
 80135f2:	b2db      	uxtb	r3, r3
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	bf14      	ite	ne
 80135f8:	2301      	movne	r3, #1
 80135fa:	2300      	moveq	r3, #0
 80135fc:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 80135fe:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8013600:	2b00      	cmp	r3, #0
 8013602:	d105      	bne.n	8013610 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 8013604:	4b06      	ldr	r3, [pc, #24]	@ (8013620 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 8013606:	4a07      	ldr	r2, [pc, #28]	@ (8013624 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 8013608:	212c      	movs	r1, #44	@ 0x2c
 801360a:	4807      	ldr	r0, [pc, #28]	@ (8013628 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 801360c:	f019 f9c6 	bl	802c99c <__assert_func>
    }
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	4618      	mov	r0, r3
 8013614:	3710      	adds	r7, #16
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}
 801361a:	bf00      	nop
 801361c:	0802f074 	.word	0x0802f074
 8013620:	0802e69c 	.word	0x0802e69c
 8013624:	0802e6fc 	.word	0x0802e6fc
 8013628:	0802e738 	.word	0x0802e738

0801362c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 801362c:	b580      	push	{r7, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	4a05      	ldr	r2, [pc, #20]	@ (801364c <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	601a      	str	r2, [r3, #0]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	4618      	mov	r0, r3
 801363e:	f7ff feb7 	bl	80133b0 <_ZN8touchgfx15AbstractPainterD1Ev>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	4618      	mov	r0, r3
 8013646:	3708      	adds	r7, #8
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}
 801364c:	0802f074 	.word	0x0802f074

08013650 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 8013650:	b580      	push	{r7, lr}
 8013652:	b082      	sub	sp, #8
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f7ff ffe7 	bl	801362c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 801365e:	2108      	movs	r1, #8
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f018 faa6 	bl	802bbb2 <_ZdlPvj>
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	4618      	mov	r0, r3
 801366a:	3708      	adds	r7, #8
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}

08013670 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 8013670:	b580      	push	{r7, lr}
 8013672:	b082      	sub	sp, #8
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	4618      	mov	r0, r3
 801367e:	f7ff ff77 	bl	8013570 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	3308      	adds	r3, #8
 8013686:	6839      	ldr	r1, [r7, #0]
 8013688:	4618      	mov	r0, r3
 801368a:	f7ff fe37 	bl	80132fc <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 801368e:	4a05      	ldr	r2, [pc, #20]	@ (80136a4 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	601a      	str	r2, [r3, #0]
 8013694:	4a04      	ldr	r2, [pc, #16]	@ (80136a8 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	609a      	str	r2, [r3, #8]
    {
    }
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	4618      	mov	r0, r3
 801369e:	3708      	adds	r7, #8
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}
 80136a4:	0802f650 	.word	0x0802f650
 80136a8:	0802f674 	.word	0x0802f674

080136ac <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * The default mode is non-zero filling.
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
 80136ac:	b480      	push	{r7}
 80136ae:	b083      	sub	sp, #12
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	460b      	mov	r3, r1
 80136b6:	70fb      	strb	r3, [r7, #3]
    {
        drawMode = mode;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	78fa      	ldrb	r2, [r7, #3]
 80136bc:	771a      	strb	r2, [r3, #28]
    }
 80136be:	bf00      	nop
 80136c0:	370c      	adds	r7, #12
 80136c2:	46bd      	mov	sp, r7
 80136c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c8:	4770      	bx	lr

080136ca <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
 80136ca:	b480      	push	{r7}
 80136cc:	b083      	sub	sp, #12
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	6078      	str	r0, [r7, #4]
 80136d2:	ed87 0a00 	vstr	s0, [r7]
    {
        strokeMiterLimit = miterLimit;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	683a      	ldr	r2, [r7, #0]
 80136da:	621a      	str	r2, [r3, #32]
    }
 80136dc:	bf00      	nop
 80136de:	370c      	adds	r7, #12
 80136e0:	46bd      	mov	sp, r7
 80136e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e6:	4770      	bx	lr

080136e8 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
 80136e8:	b480      	push	{r7}
 80136ea:	b083      	sub	sp, #12
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	460b      	mov	r3, r1
 80136f2:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineJoin = lineJoin;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	78fa      	ldrb	r2, [r7, #3]
 80136f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 80136fc:	bf00      	nop
 80136fe:	370c      	adds	r7, #12
 8013700:	46bd      	mov	sp, r7
 8013702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013706:	4770      	bx	lr

08013708 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
 8013708:	b480      	push	{r7}
 801370a:	b083      	sub	sp, #12
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
 8013710:	460b      	mov	r3, r1
 8013712:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineCap = lineCap;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	78fa      	ldrb	r2, [r7, #3]
 8013718:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 801371c:	bf00      	nop
 801371e:	370c      	adds	r7, #12
 8013720:	46bd      	mov	sp, r7
 8013722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013726:	4770      	bx	lr

08013728 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    void drawStrokeBackwards(uint32_t cmdInxPathStart, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points, bool drawLineCaps, StrokeCanvas& canvas) const;
    void getPreviousDestination(float& positionX, float& positionY, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points) const;

    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
 8013728:	b480      	push	{r7}
 801372a:	b083      	sub	sp, #12
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	6039      	str	r1, [r7, #0]
        {
            return true;
 8013732:	2301      	movs	r3, #1
        }
 8013734:	4618      	mov	r0, r3
 8013736:	370c      	adds	r7, #12
 8013738:	46bd      	mov	sp, r7
 801373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373e:	4770      	bx	lr

08013740 <_ZN8touchgfx23CWRVectorRendererRGB56516getLinearPainterEv>:
 * Implementation of the CWRVectorRendererInterface
 * for the RGB565 framebuffer format.
 */
class CWRVectorRendererRGB565 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
 8013740:	b480      	push	{r7}
 8013742:	b083      	sub	sp, #12
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
    {
        return linearPainter;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	3398      	adds	r3, #152	@ 0x98
    }
 801374c:	4618      	mov	r0, r3
 801374e:	370c      	adds	r7, #12
 8013750:	46bd      	mov	sp, r7
 8013752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013756:	4770      	bx	lr

08013758 <_ZN8touchgfx23CWRVectorRendererRGB56520getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	338c      	adds	r3, #140	@ 0x8c
    }
 8013764:	4618      	mov	r0, r3
 8013766:	370c      	adds	r7, #12
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr

08013770 <_ZN8touchgfx23CWRVectorRendererRGB56515getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
 8013770:	b480      	push	{r7}
 8013772:	b083      	sub	sp, #12
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	3384      	adds	r3, #132	@ 0x84
    }
 801377c:	4618      	mov	r0, r3
 801377e:	370c      	adds	r7, #12
 8013780:	46bd      	mov	sp, r7
 8013782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013786:	4770      	bx	lr

08013788 <_ZN8touchgfx14VectorRendererC1Ev>:
class VectorRenderer
 8013788:	b480      	push	{r7}
 801378a:	b083      	sub	sp, #12
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	4a04      	ldr	r2, [pc, #16]	@ (80137a4 <_ZN8touchgfx14VectorRendererC1Ev+0x1c>)
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	601a      	str	r2, [r3, #0]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	4618      	mov	r0, r3
 801379a:	370c      	adds	r7, #12
 801379c:	46bd      	mov	sp, r7
 801379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a2:	4770      	bx	lr
 80137a4:	0802f1d4 	.word	0x0802f1d4

080137a8 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b082      	sub	sp, #8
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
 80137b0:	4a05      	ldr	r2, [pc, #20]	@ (80137c8 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	601a      	str	r2, [r3, #0]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7fd f865 	bl	8010888 <_ZN8touchgfx6WidgetD1Ev>
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	4618      	mov	r0, r3
 80137c2:	3708      	adds	r7, #8
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	0802f6e8 	.word	0x0802f6e8

080137cc <_ZN8touchgfx12CanvasWidgetD0Ev>:
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f7ff ffe7 	bl	80137a8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80137da:	212c      	movs	r1, #44	@ 0x2c
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f018 f9e8 	bl	802bbb2 <_ZdlPvj>
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	4618      	mov	r0, r3
 80137e6:	3708      	adds	r7, #8
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}

080137ec <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b082      	sub	sp, #8
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	4618      	mov	r0, r3
 80137f8:	f003 fdec 	bl	80173d4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80137fc:	4a03      	ldr	r2, [pc, #12]	@ (801380c <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev+0x20>)
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	601a      	str	r2, [r3, #0]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	4618      	mov	r0, r3
 8013806:	3708      	adds	r7, #8
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}
 801380c:	0802effc 	.word	0x0802effc

08013810 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	4a05      	ldr	r2, [pc, #20]	@ (8013830 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev+0x20>)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	601a      	str	r2, [r3, #0]
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	4618      	mov	r0, r3
 8013822:	f7ff ffc1 	bl	80137a8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	4618      	mov	r0, r3
 801382a:	3708      	adds	r7, #8
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}
 8013830:	0802effc 	.word	0x0802effc

08013834 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f7ff ffe7 	bl	8013810 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 8013842:	212c      	movs	r1, #44	@ 0x2c
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f018 f9b4 	bl	802bbb2 <_ZdlPvj>
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	4618      	mov	r0, r3
 801384e:	3708      	adds	r7, #8
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}

08013854 <_ZN8touchgfx17CWRVectorRendererC1Ev>:
class CWRVectorRenderer : public VectorRenderer
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	4618      	mov	r0, r3
 8013860:	f7ff ff92 	bl	8013788 <_ZN8touchgfx14VectorRendererC1Ev>
 8013864:	4a10      	ldr	r2, [pc, #64]	@ (80138a8 <_ZN8touchgfx17CWRVectorRendererC1Ev+0x54>)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	601a      	str	r2, [r3, #0]
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	3304      	adds	r3, #4
 801386e:	4618      	mov	r0, r3
 8013870:	f7fc fd7b 	bl	801036a <_ZN8touchgfx4RectC1Ev>
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	330c      	adds	r3, #12
 8013878:	4618      	mov	r0, r3
 801387a:	f7fc fd76 	bl	801036a <_ZN8touchgfx4RectC1Ev>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	3326      	adds	r3, #38	@ 0x26
 8013882:	4618      	mov	r0, r3
 8013884:	f7fc fd71 	bl	801036a <_ZN8touchgfx4RectC1Ev>
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	3334      	adds	r3, #52	@ 0x34
 801388c:	4618      	mov	r0, r3
 801388e:	f007 fc96 	bl	801b1be <_ZN8touchgfx9Matrix3x3C1Ev>
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	3358      	adds	r3, #88	@ 0x58
 8013896:	4618      	mov	r0, r3
 8013898:	f7ff ffa8 	bl	80137ec <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	4618      	mov	r0, r3
 80138a0:	3708      	adds	r7, #8
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	0802f69c 	.word	0x0802f69c

080138ac <_ZN8touchgfx17CWRVectorRendererD1Ev>:
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b082      	sub	sp, #8
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	4a08      	ldr	r2, [pc, #32]	@ (80138d8 <_ZN8touchgfx17CWRVectorRendererD1Ev+0x2c>)
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	601a      	str	r2, [r3, #0]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	3358      	adds	r3, #88	@ 0x58
 80138be:	4618      	mov	r0, r3
 80138c0:	f7ff ffa6 	bl	8013810 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7ff fcec 	bl	80132a4 <_ZN8touchgfx14VectorRendererD1Ev>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4618      	mov	r0, r3
 80138d0:	3708      	adds	r7, #8
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
 80138d6:	bf00      	nop
 80138d8:	0802f69c 	.word	0x0802f69c

080138dc <_ZN8touchgfx17CWRVectorRendererD0Ev>:
 80138dc:	b580      	push	{r7, lr}
 80138de:	b082      	sub	sp, #8
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f7ff ffe1 	bl	80138ac <_ZN8touchgfx17CWRVectorRendererD1Ev>
 80138ea:	2184      	movs	r1, #132	@ 0x84
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f018 f960 	bl	802bbb2 <_ZdlPvj>
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	4618      	mov	r0, r3
 80138f6:	3708      	adds	r7, #8
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}

080138fc <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	4a09      	ldr	r2, [pc, #36]	@ (801392c <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	601a      	str	r2, [r3, #0]
 801390a:	4a09      	ldr	r2, [pc, #36]	@ (8013930 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	609a      	str	r2, [r3, #8]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	3308      	adds	r3, #8
 8013914:	4618      	mov	r0, r3
 8013916:	f7ff fd09 	bl	801332c <_ZN8touchgfx20AbstractPainterColorD1Ev>
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	4618      	mov	r0, r3
 801391e:	f7ff fe85 	bl	801362c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	4618      	mov	r0, r3
 8013926:	3708      	adds	r7, #8
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}
 801392c:	0802f650 	.word	0x0802f650
 8013930:	0802f674 	.word	0x0802f674

08013934 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8013934:	f1a0 0008 	sub.w	r0, r0, #8
 8013938:	e7e0      	b.n	80138fc <_ZN8touchgfx13PainterRGB565D1Ev>
 801393a:	bf00      	nop

0801393c <_ZN8touchgfx13PainterRGB565D0Ev>:
 801393c:	b580      	push	{r7, lr}
 801393e:	b082      	sub	sp, #8
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f7ff ffd9 	bl	80138fc <_ZN8touchgfx13PainterRGB565D1Ev>
 801394a:	2114      	movs	r1, #20
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f018 f930 	bl	802bbb2 <_ZdlPvj>
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	4618      	mov	r0, r3
 8013956:	3708      	adds	r7, #8
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}

0801395c <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 801395c:	f1a0 0008 	sub.w	r0, r0, #8
 8013960:	e7ec      	b.n	801393c <_ZN8touchgfx13PainterRGB565D0Ev>
	...

08013964 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>:
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB565LinearGradient : public AbstractPainterLinearGradient
 8013964:	b580      	push	{r7, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	4618      	mov	r0, r3
 8013970:	f7ff fd64 	bl	801343c <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>
 8013974:	4a03      	ldr	r2, [pc, #12]	@ (8013984 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev+0x20>)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	601a      	str	r2, [r3, #0]
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	4618      	mov	r0, r3
 801397e:	3708      	adds	r7, #8
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}
 8013984:	0802f630 	.word	0x0802f630

08013988 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>:
 8013988:	b580      	push	{r7, lr}
 801398a:	b082      	sub	sp, #8
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	4a05      	ldr	r2, [pc, #20]	@ (80139a8 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev+0x20>)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	601a      	str	r2, [r3, #0]
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	4618      	mov	r0, r3
 801399a:	f7ff fd83 	bl	80134a4 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	4618      	mov	r0, r3
 80139a2:	3708      	adds	r7, #8
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}
 80139a8:	0802f630 	.word	0x0802f630

080139ac <_ZN8touchgfx27PainterRGB565LinearGradientD0Ev>:
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7ff ffe7 	bl	8013988 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 80139ba:	2124      	movs	r1, #36	@ 0x24
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f018 f8f8 	bl	802bbb2 <_ZdlPvj>
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	4618      	mov	r0, r3
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 80139cc:	b590      	push	{r4, r7, lr}
 80139ce:	b085      	sub	sp, #20
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7ff ff3c 	bl	8013854 <_ZN8touchgfx17CWRVectorRendererC1Ev>
 80139dc:	4a0c      	ldr	r2, [pc, #48]	@ (8013a10 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev+0x44>)
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	601a      	str	r2, [r3, #0]
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 80139e8:	f107 030c 	add.w	r3, r7, #12
 80139ec:	2100      	movs	r1, #0
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7fc fcac 	bl	801034c <_ZN8touchgfx9colortypeC1Em>
 80139f4:	68f9      	ldr	r1, [r7, #12]
 80139f6:	4620      	mov	r0, r4
 80139f8:	f7ff fe3a 	bl	8013670 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	3398      	adds	r3, #152	@ 0x98
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7ff ffaf 	bl	8013964 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3714      	adds	r7, #20
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd90      	pop	{r4, r7, pc}
 8013a10:	0802efb0 	.word	0x0802efb0

08013a14 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>:
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b082      	sub	sp, #8
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8013a48 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev+0x34>)
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	601a      	str	r2, [r3, #0]
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	3398      	adds	r3, #152	@ 0x98
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7ff ffae 	bl	8013988 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	3384      	adds	r3, #132	@ 0x84
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7ff ff63 	bl	80138fc <_ZN8touchgfx13PainterRGB565D1Ev>
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7ff ff37 	bl	80138ac <_ZN8touchgfx17CWRVectorRendererD1Ev>
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	4618      	mov	r0, r3
 8013a42:	3708      	adds	r7, #8
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}
 8013a48:	0802efb0 	.word	0x0802efb0

08013a4c <_ZN8touchgfx23CWRVectorRendererRGB565D0Ev>:
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b082      	sub	sp, #8
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f7ff ffdd 	bl	8013a14 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 8013a5a:	21bc      	movs	r1, #188	@ 0xbc
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f018 f8a8 	bl	802bbb2 <_ZdlPvj>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	4618      	mov	r0, r3
 8013a66:	3708      	adds	r7, #8
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB565 renderer;
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	4801      	ldr	r0, [pc, #4]	@ (8013a78 <__tcf_1+0xc>)
 8013a72:	f7ff ffcf 	bl	8013a14 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 8013a76:	bd80      	pop	{r7, pc}
 8013a78:	2005b9d8 	.word	0x2005b9d8

08013a7c <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	af00      	add	r7, sp, #0
    static CWRVectorRendererRGB565 renderer;
 8013a80:	4b11      	ldr	r3, [pc, #68]	@ (8013ac8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8013a82:	e8d3 3faf 	lda	r3, [r3]
 8013a86:	f003 0301 	and.w	r3, r3, #1
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	bf0c      	ite	eq
 8013a8e:	2301      	moveq	r3, #1
 8013a90:	2300      	movne	r3, #0
 8013a92:	b2db      	uxtb	r3, r3
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d013      	beq.n	8013ac0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x44>
 8013a98:	480b      	ldr	r0, [pc, #44]	@ (8013ac8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8013a9a:	f018 f88c 	bl	802bbb6 <__cxa_guard_acquire>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	bf14      	ite	ne
 8013aa4:	2301      	movne	r3, #1
 8013aa6:	2300      	moveq	r3, #0
 8013aa8:	b2db      	uxtb	r3, r3
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d008      	beq.n	8013ac0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x44>
 8013aae:	4807      	ldr	r0, [pc, #28]	@ (8013acc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
 8013ab0:	f7ff ff8c 	bl	80139cc <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>
 8013ab4:	4806      	ldr	r0, [pc, #24]	@ (8013ad0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x54>)
 8013ab6:	f018 ff8f 	bl	802c9d8 <atexit>
 8013aba:	4803      	ldr	r0, [pc, #12]	@ (8013ac8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8013abc:	f018 f887 	bl	802bbce <__cxa_guard_release>

    return &renderer;
 8013ac0:	4b02      	ldr	r3, [pc, #8]	@ (8013acc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	bd80      	pop	{r7, pc}
 8013ac6:	bf00      	nop
 8013ac8:	2005ba94 	.word	0x2005ba94
 8013acc:	2005b9d8 	.word	0x2005b9d8
 8013ad0:	08013a6d 	.word	0x08013a6d

08013ad4 <__NVIC_EnableIRQ>:
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	b083      	sub	sp, #12
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	4603      	mov	r3, r0
 8013adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	db0b      	blt.n	8013afe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013ae6:	79fb      	ldrb	r3, [r7, #7]
 8013ae8:	f003 021f 	and.w	r2, r3, #31
 8013aec:	4907      	ldr	r1, [pc, #28]	@ (8013b0c <__NVIC_EnableIRQ+0x38>)
 8013aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013af2:	095b      	lsrs	r3, r3, #5
 8013af4:	2001      	movs	r0, #1
 8013af6:	fa00 f202 	lsl.w	r2, r0, r2
 8013afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013afe:	bf00      	nop
 8013b00:	370c      	adds	r7, #12
 8013b02:	46bd      	mov	sp, r7
 8013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b08:	4770      	bx	lr
 8013b0a:	bf00      	nop
 8013b0c:	e000e100 	.word	0xe000e100

08013b10 <__NVIC_DisableIRQ>:
{
 8013b10:	b480      	push	{r7}
 8013b12:	b083      	sub	sp, #12
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	4603      	mov	r3, r0
 8013b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	db12      	blt.n	8013b48 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013b22:	79fb      	ldrb	r3, [r7, #7]
 8013b24:	f003 021f 	and.w	r2, r3, #31
 8013b28:	490a      	ldr	r1, [pc, #40]	@ (8013b54 <__NVIC_DisableIRQ+0x44>)
 8013b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b2e:	095b      	lsrs	r3, r3, #5
 8013b30:	2001      	movs	r0, #1
 8013b32:	fa00 f202 	lsl.w	r2, r0, r2
 8013b36:	3320      	adds	r3, #32
 8013b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013b3c:	f3bf 8f4f 	dsb	sy
}
 8013b40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013b42:	f3bf 8f6f 	isb	sy
}
 8013b46:	bf00      	nop
}
 8013b48:	bf00      	nop
 8013b4a:	370c      	adds	r7, #12
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b52:	4770      	bx	lr
 8013b54:	e000e100 	.word	0xe000e100

08013b58 <__NVIC_SetPriority>:
{
 8013b58:	b480      	push	{r7}
 8013b5a:	b083      	sub	sp, #12
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	4603      	mov	r3, r0
 8013b60:	6039      	str	r1, [r7, #0]
 8013b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	db0a      	blt.n	8013b82 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	b2da      	uxtb	r2, r3
 8013b70:	490c      	ldr	r1, [pc, #48]	@ (8013ba4 <__NVIC_SetPriority+0x4c>)
 8013b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b76:	0112      	lsls	r2, r2, #4
 8013b78:	b2d2      	uxtb	r2, r2
 8013b7a:	440b      	add	r3, r1
 8013b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013b80:	e00a      	b.n	8013b98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	b2da      	uxtb	r2, r3
 8013b86:	4908      	ldr	r1, [pc, #32]	@ (8013ba8 <__NVIC_SetPriority+0x50>)
 8013b88:	79fb      	ldrb	r3, [r7, #7]
 8013b8a:	f003 030f 	and.w	r3, r3, #15
 8013b8e:	3b04      	subs	r3, #4
 8013b90:	0112      	lsls	r2, r2, #4
 8013b92:	b2d2      	uxtb	r2, r2
 8013b94:	440b      	add	r3, r1
 8013b96:	761a      	strb	r2, [r3, #24]
}
 8013b98:	bf00      	nop
 8013b9a:	370c      	adds	r7, #12
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba2:	4770      	bx	lr
 8013ba4:	e000e100 	.word	0xe000e100
 8013ba8:	e000ed00 	.word	0xe000ed00

08013bac <_ZN20TouchGFXGeneratedHAL10initializeEv>:
LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
uint32_t frameBuf[(240 * 296 * 2 + 3) / 4 * 2] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 8013bac:	b5b0      	push	{r4, r5, r7, lr}
 8013bae:	b082      	sub	sp, #8
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f001 f89f 	bl	8014cfa <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8013bbc:	687d      	ldr	r5, [r7, #4]
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	3368      	adds	r3, #104	@ 0x68
 8013bc4:	681c      	ldr	r4, [r3, #0]
 8013bc6:	f005 fd6b 	bl	80196a0 <_ZN8touchgfx11Application11getInstanceEv>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	4619      	mov	r1, r3
 8013bce:	4628      	mov	r0, r5
 8013bd0:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	338c      	adds	r3, #140	@ 0x8c
 8013bda:	681c      	ldr	r4, [r3, #0]
 8013bdc:	4a03      	ldr	r2, [pc, #12]	@ (8013bec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8013bde:	2300      	movs	r3, #0
 8013be0:	4903      	ldr	r1, [pc, #12]	@ (8013bf0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8013be2:	47a0      	blx	r4
}
 8013be4:	bf00      	nop
 8013be6:	3708      	adds	r7, #8
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bdb0      	pop	{r4, r5, r7, pc}
 8013bec:	20022bfc 	.word	0x20022bfc
 8013bf0:	200000fc 	.word	0x200000fc

08013bf4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013bfc:	2109      	movs	r1, #9
 8013bfe:	2076      	movs	r0, #118	@ 0x76
 8013c00:	f7ff ffaa 	bl	8013b58 <__NVIC_SetPriority>
}
 8013c04:	bf00      	nop
 8013c06:	3708      	adds	r7, #8
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013c14:	2076      	movs	r0, #118	@ 0x76
 8013c16:	f7ff ff5d 	bl	8013ad4 <__NVIC_EnableIRQ>
}
 8013c1a:	bf00      	nop
 8013c1c:	3708      	adds	r7, #8
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}

08013c22 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013c22:	b580      	push	{r7, lr}
 8013c24:	b082      	sub	sp, #8
 8013c26:	af00      	add	r7, sp, #0
 8013c28:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013c2a:	2076      	movs	r0, #118	@ 0x76
 8013c2c:	f7ff ff70 	bl	8013b10 <__NVIC_DisableIRQ>
}
 8013c30:	bf00      	nop
 8013c32:	3708      	adds	r7, #8
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}

08013c38 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013c38:	b480      	push	{r7}
 8013c3a:	b083      	sub	sp, #12
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
}
 8013c40:	bf00      	nop
 8013c42:	370c      	adds	r7, #12
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	4618      	mov	r0, r3
 8013c58:	f001 f836 	bl	8014cc8 <_ZN8touchgfx3HAL10beginFrameEv>
 8013c5c:	4603      	mov	r3, r0
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3708      	adds	r7, #8
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}

08013c66 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8013c66:	b580      	push	{r7, lr}
 8013c68:	b082      	sub	sp, #8
 8013c6a:	af00      	add	r7, sp, #0
 8013c6c:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	4618      	mov	r0, r3
 8013c72:	f001 f835 	bl	8014ce0 <_ZN8touchgfx3HAL8endFrameEv>
}
 8013c76:	bf00      	nop
 8013c78:	3708      	adds	r7, #8
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}
	...

08013c80 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013c80:	b480      	push	{r7}
 8013c82:	b083      	sub	sp, #12
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8013c88:	4b03      	ldr	r3, [pc, #12]	@ (8013c98 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	370c      	adds	r7, #12
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop
 8013c98:	200000fc 	.word	0x200000fc

08013c9c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013c9c:	b480      	push	{r7}
 8013c9e:	b083      	sub	sp, #12
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8013ca6:	bf00      	nop
 8013ca8:	370c      	adds	r7, #12
 8013caa:	46bd      	mov	sp, r7
 8013cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb0:	4770      	bx	lr

08013cb2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013cb2:	b580      	push	{r7, lr}
 8013cb4:	b082      	sub	sp, #8
 8013cb6:	af00      	add	r7, sp, #0
 8013cb8:	6078      	str	r0, [r7, #4]
 8013cba:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6839      	ldr	r1, [r7, #0]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f000 ffca 	bl	8014c5a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013cc6:	bf00      	nop
 8013cc8:	3708      	adds	r7, #8
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}

08013cce <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013cce:	b580      	push	{r7, lr}
 8013cd0:	b084      	sub	sp, #16
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	60f8      	str	r0, [r7, #12]
 8013cd6:	60b9      	str	r1, [r7, #8]
 8013cd8:	607a      	str	r2, [r7, #4]
 8013cda:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8013cdc:	68f8      	ldr	r0, [r7, #12]
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	687a      	ldr	r2, [r7, #4]
 8013ce2:	68b9      	ldr	r1, [r7, #8]
 8013ce4:	f001 f93d 	bl	8014f62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013ce8:	4603      	mov	r3, r0
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3710      	adds	r7, #16
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}

08013cf2 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013cf2:	8880      	ldrh	r0, [r0, #4]
 8013cf4:	4770      	bx	lr

08013cf6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013cf6:	b570      	push	{r4, r5, r6, lr}
 8013cf8:	6803      	ldr	r3, [r0, #0]
 8013cfa:	4605      	mov	r5, r0
 8013cfc:	460c      	mov	r4, r1
 8013cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d00:	2100      	movs	r1, #0
 8013d02:	4798      	blx	r3
 8013d04:	682b      	ldr	r3, [r5, #0]
 8013d06:	4606      	mov	r6, r0
 8013d08:	6a1b      	ldr	r3, [r3, #32]
 8013d0a:	4628      	mov	r0, r5
 8013d0c:	4798      	blx	r3
 8013d0e:	1ba4      	subs	r4, r4, r6
 8013d10:	b2a4      	uxth	r4, r4
 8013d12:	fbb4 f0f0 	udiv	r0, r4, r0
 8013d16:	bd70      	pop	{r4, r5, r6, pc}

08013d18 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013d18:	2300      	movs	r3, #0
 8013d1a:	8083      	strh	r3, [r0, #4]
 8013d1c:	4770      	bx	lr

08013d1e <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013d1e:	b510      	push	{r4, lr}
 8013d20:	4604      	mov	r4, r0
 8013d22:	6803      	ldr	r3, [r0, #0]
 8013d24:	8881      	ldrh	r1, [r0, #4]
 8013d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d28:	4798      	blx	r3
 8013d2a:	88a3      	ldrh	r3, [r4, #4]
 8013d2c:	3301      	adds	r3, #1
 8013d2e:	80a3      	strh	r3, [r4, #4]
 8013d30:	bd10      	pop	{r4, pc}

08013d32 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013d32:	6803      	ldr	r3, [r0, #0]
 8013d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d36:	4718      	bx	r3

08013d38 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013d38:	4770      	bx	lr
	...

08013d3c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013d3c:	4a02      	ldr	r2, [pc, #8]	@ (8013d48 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013d3e:	6002      	str	r2, [r0, #0]
 8013d40:	2200      	movs	r2, #0
 8013d42:	8082      	strh	r2, [r0, #4]
 8013d44:	4770      	bx	lr
 8013d46:	bf00      	nop
 8013d48:	0802f214 	.word	0x0802f214

08013d4c <_ZN8touchgfx9Container13getFirstChildEv>:
 8013d4c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8013d4e:	4770      	bx	lr

08013d50 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013d50:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013d52:	2000      	movs	r0, #0
 8013d54:	b12b      	cbz	r3, 8013d62 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013d56:	b920      	cbnz	r0, 8013d62 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013d58:	1a5a      	subs	r2, r3, r1
 8013d5a:	4250      	negs	r0, r2
 8013d5c:	4150      	adcs	r0, r2
 8013d5e:	699b      	ldr	r3, [r3, #24]
 8013d60:	e7f8      	b.n	8013d54 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8013d62:	4770      	bx	lr

08013d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013d64:	2300      	movs	r3, #0
 8013d66:	6148      	str	r0, [r1, #20]
 8013d68:	618b      	str	r3, [r1, #24]
 8013d6a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013d6c:	b913      	cbnz	r3, 8013d74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8013d6e:	6281      	str	r1, [r0, #40]	@ 0x28
 8013d70:	4770      	bx	lr
 8013d72:	4613      	mov	r3, r2
 8013d74:	699a      	ldr	r2, [r3, #24]
 8013d76:	2a00      	cmp	r2, #0
 8013d78:	d1fb      	bne.n	8013d72 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8013d7a:	6199      	str	r1, [r3, #24]
 8013d7c:	4770      	bx	lr

08013d7e <_ZN8touchgfx9Container9removeAllEv>:
 8013d7e:	2200      	movs	r2, #0
 8013d80:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013d82:	b123      	cbz	r3, 8013d8e <_ZN8touchgfx9Container9removeAllEv+0x10>
 8013d84:	6999      	ldr	r1, [r3, #24]
 8013d86:	6281      	str	r1, [r0, #40]	@ 0x28
 8013d88:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013d8c:	e7f8      	b.n	8013d80 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013d8e:	4770      	bx	lr

08013d90 <_ZN8touchgfx9Container6unlinkEv>:
 8013d90:	2300      	movs	r3, #0
 8013d92:	6283      	str	r3, [r0, #40]	@ 0x28
 8013d94:	4770      	bx	lr

08013d96 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013d96:	2200      	movs	r2, #0
 8013d98:	8002      	strh	r2, [r0, #0]
 8013d9a:	8042      	strh	r2, [r0, #2]
 8013d9c:	8082      	strh	r2, [r0, #4]
 8013d9e:	80c2      	strh	r2, [r0, #6]
 8013da0:	4770      	bx	lr

08013da2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013da2:	b570      	push	{r4, r5, r6, lr}
 8013da4:	460d      	mov	r5, r1
 8013da6:	4616      	mov	r6, r2
 8013da8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013daa:	b13c      	cbz	r4, 8013dbc <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013dac:	6823      	ldr	r3, [r4, #0]
 8013dae:	4620      	mov	r0, r4
 8013db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013db2:	4632      	mov	r2, r6
 8013db4:	4629      	mov	r1, r5
 8013db6:	4798      	blx	r3
 8013db8:	69a4      	ldr	r4, [r4, #24]
 8013dba:	e7f6      	b.n	8013daa <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013dbc:	bd70      	pop	{r4, r5, r6, pc}

08013dbe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013dbe:	b538      	push	{r3, r4, r5, lr}
 8013dc0:	460d      	mov	r5, r1
 8013dc2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013dc4:	b134      	cbz	r4, 8013dd4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013dc6:	682b      	ldr	r3, [r5, #0]
 8013dc8:	4621      	mov	r1, r4
 8013dca:	689b      	ldr	r3, [r3, #8]
 8013dcc:	4628      	mov	r0, r5
 8013dce:	4798      	blx	r3
 8013dd0:	69a4      	ldr	r4, [r4, #24]
 8013dd2:	e7f7      	b.n	8013dc4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013dd4:	bd38      	pop	{r3, r4, r5, pc}

08013dd6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013dd6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013dd8:	b19b      	cbz	r3, 8013e02 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013dda:	428b      	cmp	r3, r1
 8013ddc:	d109      	bne.n	8013df2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013dde:	2100      	movs	r1, #0
 8013de0:	699a      	ldr	r2, [r3, #24]
 8013de2:	6159      	str	r1, [r3, #20]
 8013de4:	6282      	str	r2, [r0, #40]	@ 0x28
 8013de6:	b902      	cbnz	r2, 8013dea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013de8:	4770      	bx	lr
 8013dea:	6199      	str	r1, [r3, #24]
 8013dec:	4770      	bx	lr
 8013dee:	4613      	mov	r3, r2
 8013df0:	b13a      	cbz	r2, 8013e02 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013df2:	699a      	ldr	r2, [r3, #24]
 8013df4:	428a      	cmp	r2, r1
 8013df6:	d1fa      	bne.n	8013dee <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013df8:	698a      	ldr	r2, [r1, #24]
 8013dfa:	619a      	str	r2, [r3, #24]
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013e02:	4770      	bx	lr

08013e04 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013e04:	b410      	push	{r4}
 8013e06:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013e08:	4604      	mov	r4, r0
 8013e0a:	b92b      	cbnz	r3, 8013e18 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013e0c:	6803      	ldr	r3, [r0, #0]
 8013e0e:	4611      	mov	r1, r2
 8013e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e16:	4718      	bx	r3
 8013e18:	b941      	cbnz	r1, 8013e2c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013e1a:	6193      	str	r3, [r2, #24]
 8013e1c:	6282      	str	r2, [r0, #40]	@ 0x28
 8013e1e:	6154      	str	r4, [r2, #20]
 8013e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e24:	4770      	bx	lr
 8013e26:	4603      	mov	r3, r0
 8013e28:	2800      	cmp	r0, #0
 8013e2a:	d0f9      	beq.n	8013e20 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013e2c:	4299      	cmp	r1, r3
 8013e2e:	6998      	ldr	r0, [r3, #24]
 8013e30:	d1f9      	bne.n	8013e26 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013e32:	6190      	str	r0, [r2, #24]
 8013e34:	618a      	str	r2, [r1, #24]
 8013e36:	e7f2      	b.n	8013e1e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08013e38 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e3c:	461f      	mov	r7, r3
 8013e3e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8013e42:	460d      	mov	r5, r1
 8013e44:	4616      	mov	r6, r2
 8013e46:	b103      	cbz	r3, 8013e4a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013e48:	6038      	str	r0, [r7, #0]
 8013e4a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013e4c:	b314      	cbz	r4, 8013e94 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013e4e:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8013e52:	b1eb      	cbz	r3, 8013e90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e54:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013e58:	428d      	cmp	r5, r1
 8013e5a:	db19      	blt.n	8013e90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e5c:	8923      	ldrh	r3, [r4, #8]
 8013e5e:	b289      	uxth	r1, r1
 8013e60:	440b      	add	r3, r1
 8013e62:	b21b      	sxth	r3, r3
 8013e64:	429d      	cmp	r5, r3
 8013e66:	da13      	bge.n	8013e90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e68:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013e6c:	4296      	cmp	r6, r2
 8013e6e:	db0f      	blt.n	8013e90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e70:	8963      	ldrh	r3, [r4, #10]
 8013e72:	b292      	uxth	r2, r2
 8013e74:	4413      	add	r3, r2
 8013e76:	b21b      	sxth	r3, r3
 8013e78:	429e      	cmp	r6, r3
 8013e7a:	da09      	bge.n	8013e90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e7c:	6823      	ldr	r3, [r4, #0]
 8013e7e:	1ab2      	subs	r2, r6, r2
 8013e80:	1a69      	subs	r1, r5, r1
 8013e82:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8013e86:	b212      	sxth	r2, r2
 8013e88:	463b      	mov	r3, r7
 8013e8a:	b209      	sxth	r1, r1
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	47c0      	blx	r8
 8013e90:	69a4      	ldr	r4, [r4, #24]
 8013e92:	e7db      	b.n	8013e4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e9c:	4c6c      	ldr	r4, [pc, #432]	@ (8014050 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8013e9e:	b0a1      	sub	sp, #132	@ 0x84
 8013ea0:	6824      	ldr	r4, [r4, #0]
 8013ea2:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8013ea4:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8013ea8:	2400      	movs	r4, #0
 8013eaa:	802c      	strh	r4, [r5, #0]
 8013eac:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8013eae:	4606      	mov	r6, r0
 8013eb0:	802c      	strh	r4, [r5, #0]
 8013eb2:	601c      	str	r4, [r3, #0]
 8013eb4:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013eb8:	9303      	str	r3, [sp, #12]
 8013eba:	f7ff ffbd 	bl	8013e38 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013ebe:	f1b9 0f03 	cmp.w	r9, #3
 8013ec2:	f340 80bf 	ble.w	8014044 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8013ec6:	4631      	mov	r1, r6
 8013ec8:	a80c      	add	r0, sp, #48	@ 0x30
 8013eca:	f006 fe81 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013ece:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8013ed2:	9306      	str	r3, [sp, #24]
 8013ed4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013ed8:	9307      	str	r3, [sp, #28]
 8013eda:	9b03      	ldr	r3, [sp, #12]
 8013edc:	f8d3 a000 	ldr.w	sl, [r3]
 8013ee0:	f1ba 0f00 	cmp.w	sl, #0
 8013ee4:	f000 80b1 	beq.w	801404a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8013ee8:	4651      	mov	r1, sl
 8013eea:	a810      	add	r0, sp, #64	@ 0x40
 8013eec:	f006 fe70 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013ef0:	2002      	movs	r0, #2
 8013ef2:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8013ef6:	9b01      	ldr	r3, [sp, #4]
 8013ef8:	fb91 f1f0 	sdiv	r1, r1, r0
 8013efc:	9a06      	ldr	r2, [sp, #24]
 8013efe:	189d      	adds	r5, r3, r2
 8013f00:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8013f04:	9a07      	ldr	r2, [sp, #28]
 8013f06:	4419      	add	r1, r3
 8013f08:	9b02      	ldr	r3, [sp, #8]
 8013f0a:	1a6d      	subs	r5, r5, r1
 8013f0c:	4413      	add	r3, r2
 8013f0e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8013f12:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8013f16:	fb92 f2f0 	sdiv	r2, r2, r0
 8013f1a:	440a      	add	r2, r1
 8013f1c:	1a9b      	subs	r3, r3, r2
 8013f1e:	435b      	muls	r3, r3
 8013f20:	fb05 3505 	mla	r5, r5, r5, r3
 8013f24:	4f4b      	ldr	r7, [pc, #300]	@ (8014054 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013f26:	ac10      	add	r4, sp, #64	@ 0x40
 8013f28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f2c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f30:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f34:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8013f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013f3c:	2303      	movs	r3, #3
 8013f3e:	f1b9 0f0c 	cmp.w	r9, #12
 8013f42:	bfda      	itte	le
 8013f44:	f109 32ff 	addle.w	r2, r9, #4294967295
 8013f48:	fb92 f8f3 	sdivle	r8, r2, r3
 8013f4c:	4698      	movgt	r8, r3
 8013f4e:	2400      	movs	r4, #0
 8013f50:	f8cd 9000 	str.w	r9, [sp]
 8013f54:	1c63      	adds	r3, r4, #1
 8013f56:	9308      	str	r3, [sp, #32]
 8013f58:	9b00      	ldr	r3, [sp, #0]
 8013f5a:	f04f 0b00 	mov.w	fp, #0
 8013f5e:	fb93 f3f8 	sdiv	r3, r3, r8
 8013f62:	f004 0401 	and.w	r4, r4, #1
 8013f66:	aa10      	add	r2, sp, #64	@ 0x40
 8013f68:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8013f6c:	b29b      	uxth	r3, r3
 8013f6e:	3404      	adds	r4, #4
 8013f70:	9304      	str	r3, [sp, #16]
 8013f72:	9a04      	ldr	r2, [sp, #16]
 8013f74:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013f78:	fb13 f302 	smulbb	r3, r3, r2
 8013f7c:	9a01      	ldr	r2, [sp, #4]
 8013f7e:	b29b      	uxth	r3, r3
 8013f80:	1899      	adds	r1, r3, r2
 8013f82:	9305      	str	r3, [sp, #20]
 8013f84:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013f88:	b209      	sxth	r1, r1
 8013f8a:	4299      	cmp	r1, r3
 8013f8c:	db4d      	blt.n	801402a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f8e:	8932      	ldrh	r2, [r6, #8]
 8013f90:	4413      	add	r3, r2
 8013f92:	b21b      	sxth	r3, r3
 8013f94:	4299      	cmp	r1, r3
 8013f96:	da48      	bge.n	801402a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013f98:	9b04      	ldr	r3, [sp, #16]
 8013f9a:	6827      	ldr	r7, [r4, #0]
 8013f9c:	fb17 f703 	smulbb	r7, r7, r3
 8013fa0:	9b02      	ldr	r3, [sp, #8]
 8013fa2:	b2bf      	uxth	r7, r7
 8013fa4:	18fa      	adds	r2, r7, r3
 8013fa6:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013faa:	b212      	sxth	r2, r2
 8013fac:	429a      	cmp	r2, r3
 8013fae:	db3c      	blt.n	801402a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013fb0:	8970      	ldrh	r0, [r6, #10]
 8013fb2:	4403      	add	r3, r0
 8013fb4:	b21b      	sxth	r3, r3
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	da37      	bge.n	801402a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013fba:	2300      	movs	r3, #0
 8013fbc:	4630      	mov	r0, r6
 8013fbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013fc0:	ab0b      	add	r3, sp, #44	@ 0x2c
 8013fc2:	f7ff ff39 	bl	8013e38 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013fc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013fc8:	b37a      	cbz	r2, 801402a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013fca:	4552      	cmp	r2, sl
 8013fcc:	d02d      	beq.n	801402a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013fce:	4611      	mov	r1, r2
 8013fd0:	a80e      	add	r0, sp, #56	@ 0x38
 8013fd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8013fd4:	f006 fdfc 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013fd8:	f04f 0e02 	mov.w	lr, #2
 8013fdc:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8013fe0:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8013fe4:	fb91 f1fe 	sdiv	r1, r1, lr
 8013fe8:	fb9c fcfe 	sdiv	ip, ip, lr
 8013fec:	9a06      	ldr	r2, [sp, #24]
 8013fee:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8013ff2:	9b01      	ldr	r3, [sp, #4]
 8013ff4:	4401      	add	r1, r0
 8013ff6:	4413      	add	r3, r2
 8013ff8:	1a58      	subs	r0, r3, r1
 8013ffa:	9a07      	ldr	r2, [sp, #28]
 8013ffc:	9b02      	ldr	r3, [sp, #8]
 8013ffe:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8014002:	4413      	add	r3, r2
 8014004:	448c      	add	ip, r1
 8014006:	eba3 030c 	sub.w	r3, r3, ip
 801400a:	435b      	muls	r3, r3
 801400c:	fb00 3300 	mla	r3, r0, r0, r3
 8014010:	42ab      	cmp	r3, r5
 8014012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014014:	d208      	bcs.n	8014028 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8014016:	461d      	mov	r5, r3
 8014018:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801401a:	9803      	ldr	r0, [sp, #12]
 801401c:	6001      	str	r1, [r0, #0]
 801401e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8014020:	9805      	ldr	r0, [sp, #20]
 8014022:	8008      	strh	r0, [r1, #0]
 8014024:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8014026:	800f      	strh	r7, [r1, #0]
 8014028:	4692      	mov	sl, r2
 801402a:	f10b 0b01 	add.w	fp, fp, #1
 801402e:	f1bb 0f04 	cmp.w	fp, #4
 8014032:	f104 0408 	add.w	r4, r4, #8
 8014036:	d19c      	bne.n	8013f72 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8014038:	9b00      	ldr	r3, [sp, #0]
 801403a:	9c08      	ldr	r4, [sp, #32]
 801403c:	444b      	add	r3, r9
 801403e:	4544      	cmp	r4, r8
 8014040:	9300      	str	r3, [sp, #0]
 8014042:	d187      	bne.n	8013f54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8014044:	b021      	add	sp, #132	@ 0x84
 8014046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801404a:	f04f 35ff 	mov.w	r5, #4294967295
 801404e:	e769      	b.n	8013f24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8014050:	2005baa4 	.word	0x2005baa4
 8014054:	0802e798 	.word	0x0802e798

08014058 <_ZN8touchgfx4RectaNERKS0_>:
 8014058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801405c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8014060:	888c      	ldrh	r4, [r1, #4]
 8014062:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014066:	443c      	add	r4, r7
 8014068:	b2a4      	uxth	r4, r4
 801406a:	fa0f f884 	sxth.w	r8, r4
 801406e:	45c1      	cmp	r9, r8
 8014070:	da2f      	bge.n	80140d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014072:	8882      	ldrh	r2, [r0, #4]
 8014074:	444a      	add	r2, r9
 8014076:	b292      	uxth	r2, r2
 8014078:	fa0f fe82 	sxth.w	lr, r2
 801407c:	4577      	cmp	r7, lr
 801407e:	da28      	bge.n	80140d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014080:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014084:	88cb      	ldrh	r3, [r1, #6]
 8014086:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801408a:	442b      	add	r3, r5
 801408c:	b21b      	sxth	r3, r3
 801408e:	429e      	cmp	r6, r3
 8014090:	da1f      	bge.n	80140d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014092:	88c3      	ldrh	r3, [r0, #6]
 8014094:	4433      	add	r3, r6
 8014096:	b29b      	uxth	r3, r3
 8014098:	fa0f fc83 	sxth.w	ip, r3
 801409c:	4565      	cmp	r5, ip
 801409e:	da18      	bge.n	80140d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80140a0:	454f      	cmp	r7, r9
 80140a2:	bfb8      	it	lt
 80140a4:	464f      	movlt	r7, r9
 80140a6:	42b5      	cmp	r5, r6
 80140a8:	bfb8      	it	lt
 80140aa:	4635      	movlt	r5, r6
 80140ac:	45f0      	cmp	r8, lr
 80140ae:	bfd8      	it	le
 80140b0:	4622      	movle	r2, r4
 80140b2:	1bd2      	subs	r2, r2, r7
 80140b4:	8082      	strh	r2, [r0, #4]
 80140b6:	884a      	ldrh	r2, [r1, #2]
 80140b8:	88c9      	ldrh	r1, [r1, #6]
 80140ba:	8007      	strh	r7, [r0, #0]
 80140bc:	440a      	add	r2, r1
 80140be:	b292      	uxth	r2, r2
 80140c0:	b211      	sxth	r1, r2
 80140c2:	458c      	cmp	ip, r1
 80140c4:	bfa8      	it	ge
 80140c6:	4613      	movge	r3, r2
 80140c8:	1b5b      	subs	r3, r3, r5
 80140ca:	80c3      	strh	r3, [r0, #6]
 80140cc:	8045      	strh	r5, [r0, #2]
 80140ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140d2:	2300      	movs	r3, #0
 80140d4:	8003      	strh	r3, [r0, #0]
 80140d6:	8043      	strh	r3, [r0, #2]
 80140d8:	8083      	strh	r3, [r0, #4]
 80140da:	80c3      	strh	r3, [r0, #6]
 80140dc:	e7f7      	b.n	80140ce <_ZN8touchgfx4RectaNERKS0_+0x76>

080140de <_ZNK8touchgfx4Rect7isEmptyEv>:
 80140de:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	dd06      	ble.n	80140f4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80140e6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80140ea:	2800      	cmp	r0, #0
 80140ec:	bfcc      	ite	gt
 80140ee:	2000      	movgt	r0, #0
 80140f0:	2001      	movle	r0, #1
 80140f2:	4770      	bx	lr
 80140f4:	2001      	movs	r0, #1
 80140f6:	4770      	bx	lr

080140f8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80140f8:	2300      	movs	r3, #0
 80140fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140fe:	4604      	mov	r4, r0
 8014100:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8014102:	8003      	strh	r3, [r0, #0]
 8014104:	8043      	strh	r3, [r0, #2]
 8014106:	8083      	strh	r3, [r0, #4]
 8014108:	80c3      	strh	r3, [r0, #6]
 801410a:	2d00      	cmp	r5, #0
 801410c:	d040      	beq.n	8014190 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801410e:	1d28      	adds	r0, r5, #4
 8014110:	f7ff ffe5 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 8014114:	b988      	cbnz	r0, 801413a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014116:	4620      	mov	r0, r4
 8014118:	f7ff ffe1 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 801411c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014120:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014124:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014128:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801412c:	b138      	cbz	r0, 801413e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801412e:	8022      	strh	r2, [r4, #0]
 8014130:	8063      	strh	r3, [r4, #2]
 8014132:	f8a4 e004 	strh.w	lr, [r4, #4]
 8014136:	f8a4 c006 	strh.w	ip, [r4, #6]
 801413a:	69ad      	ldr	r5, [r5, #24]
 801413c:	e7e5      	b.n	801410a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801413e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014142:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014146:	4290      	cmp	r0, r2
 8014148:	4607      	mov	r7, r0
 801414a:	bfa8      	it	ge
 801414c:	4617      	movge	r7, r2
 801414e:	4299      	cmp	r1, r3
 8014150:	460e      	mov	r6, r1
 8014152:	bfa8      	it	ge
 8014154:	461e      	movge	r6, r3
 8014156:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801415a:	4472      	add	r2, lr
 801415c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014160:	4440      	add	r0, r8
 8014162:	4471      	add	r1, lr
 8014164:	4463      	add	r3, ip
 8014166:	b200      	sxth	r0, r0
 8014168:	b212      	sxth	r2, r2
 801416a:	b209      	sxth	r1, r1
 801416c:	b21b      	sxth	r3, r3
 801416e:	4290      	cmp	r0, r2
 8014170:	bfac      	ite	ge
 8014172:	ebc7 0200 	rsbge	r2, r7, r0
 8014176:	ebc7 0202 	rsblt	r2, r7, r2
 801417a:	4299      	cmp	r1, r3
 801417c:	bfac      	ite	ge
 801417e:	ebc6 0301 	rsbge	r3, r6, r1
 8014182:	ebc6 0303 	rsblt	r3, r6, r3
 8014186:	8027      	strh	r7, [r4, #0]
 8014188:	8066      	strh	r6, [r4, #2]
 801418a:	80a2      	strh	r2, [r4, #4]
 801418c:	80e3      	strh	r3, [r4, #6]
 801418e:	e7d4      	b.n	801413a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014190:	4620      	mov	r0, r4
 8014192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014196 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014196:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801419a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801419e:	b383      	cbz	r3, 8014202 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80141a0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80141a2:	b374      	cbz	r4, 8014202 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80141a4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80141a8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80141ac:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80141b0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80141b4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80141b8:	b303      	cbz	r3, 80141fc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80141ba:	4668      	mov	r0, sp
 80141bc:	1d21      	adds	r1, r4, #4
 80141be:	f8ad 5000 	strh.w	r5, [sp]
 80141c2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80141c6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80141ca:	f8ad 8006 	strh.w	r8, [sp, #6]
 80141ce:	f7ff ff43 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 80141d2:	4668      	mov	r0, sp
 80141d4:	f7ff ff83 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 80141d8:	b980      	cbnz	r0, 80141fc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80141da:	f8bd 3000 	ldrh.w	r3, [sp]
 80141de:	88a2      	ldrh	r2, [r4, #4]
 80141e0:	4669      	mov	r1, sp
 80141e2:	1a9b      	subs	r3, r3, r2
 80141e4:	f8ad 3000 	strh.w	r3, [sp]
 80141e8:	88e2      	ldrh	r2, [r4, #6]
 80141ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80141ee:	4620      	mov	r0, r4
 80141f0:	1a9b      	subs	r3, r3, r2
 80141f2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80141f6:	6823      	ldr	r3, [r4, #0]
 80141f8:	689b      	ldr	r3, [r3, #8]
 80141fa:	4798      	blx	r3
 80141fc:	69a4      	ldr	r4, [r4, #24]
 80141fe:	2c00      	cmp	r4, #0
 8014200:	d1d8      	bne.n	80141b4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014202:	b002      	add	sp, #8
 8014204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014208 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014208:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801420a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801420e:	460d      	mov	r5, r1
 8014210:	4616      	mov	r6, r2
 8014212:	b323      	cbz	r3, 801425e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014214:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014216:	b314      	cbz	r4, 801425e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014218:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801421c:	b1eb      	cbz	r3, 801425a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801421e:	466b      	mov	r3, sp
 8014220:	6828      	ldr	r0, [r5, #0]
 8014222:	6869      	ldr	r1, [r5, #4]
 8014224:	c303      	stmia	r3!, {r0, r1}
 8014226:	4668      	mov	r0, sp
 8014228:	1d21      	adds	r1, r4, #4
 801422a:	f7ff ff15 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 801422e:	4668      	mov	r0, sp
 8014230:	f7ff ff55 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 8014234:	b988      	cbnz	r0, 801425a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014236:	f8bd 3000 	ldrh.w	r3, [sp]
 801423a:	88a2      	ldrh	r2, [r4, #4]
 801423c:	4669      	mov	r1, sp
 801423e:	1a9b      	subs	r3, r3, r2
 8014240:	f8ad 3000 	strh.w	r3, [sp]
 8014244:	88e2      	ldrh	r2, [r4, #6]
 8014246:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801424a:	4620      	mov	r0, r4
 801424c:	1a9b      	subs	r3, r3, r2
 801424e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014252:	6823      	ldr	r3, [r4, #0]
 8014254:	4632      	mov	r2, r6
 8014256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014258:	4798      	blx	r3
 801425a:	69a4      	ldr	r4, [r4, #24]
 801425c:	e7db      	b.n	8014216 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801425e:	b002      	add	sp, #8
 8014260:	bd70      	pop	{r4, r5, r6, pc}

08014262 <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>:
 8014262:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8014264:	4770      	bx	lr

08014266 <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>:
 8014266:	4770      	bx	lr

08014268 <_ZN8touchgfx14SwipeContainer13PageIndicatorD0Ev>:
 8014268:	b510      	push	{r4, lr}
 801426a:	4604      	mov	r4, r0
 801426c:	218c      	movs	r1, #140	@ 0x8c
 801426e:	f017 fca0 	bl	802bbb2 <_ZdlPvj>
 8014272:	4620      	mov	r0, r4
 8014274:	bd10      	pop	{r4, pc}
	...

08014278 <_ZN8touchgfx14SwipeContainerD1Ev>:
 8014278:	4b05      	ldr	r3, [pc, #20]	@ (8014290 <_ZN8touchgfx14SwipeContainerD1Ev+0x18>)
 801427a:	b510      	push	{r4, lr}
 801427c:	6003      	str	r3, [r0, #0]
 801427e:	4604      	mov	r4, r0
 8014280:	f005 fa0e 	bl	80196a0 <_ZN8touchgfx11Application11getInstanceEv>
 8014284:	4621      	mov	r1, r4
 8014286:	3004      	adds	r0, #4
 8014288:	f005 fa2f 	bl	80196ea <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 801428c:	4620      	mov	r0, r4
 801428e:	bd10      	pop	{r4, pc}
 8014290:	0802f368 	.word	0x0802f368

08014294 <_ZN8touchgfx14SwipeContainerD0Ev>:
 8014294:	b510      	push	{r4, lr}
 8014296:	4604      	mov	r4, r0
 8014298:	f7ff ffee 	bl	8014278 <_ZN8touchgfx14SwipeContainerD1Ev>
 801429c:	4620      	mov	r0, r4
 801429e:	21f8      	movs	r1, #248	@ 0xf8
 80142a0:	f017 fc87 	bl	802bbb2 <_ZdlPvj>
 80142a4:	4620      	mov	r0, r4
 80142a6:	bd10      	pop	{r4, pc}

080142a8 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE>:
 80142a8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80142ac:	2b07      	cmp	r3, #7
 80142ae:	d118      	bne.n	80142e2 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 80142b0:	790b      	ldrb	r3, [r1, #4]
 80142b2:	2b01      	cmp	r3, #1
 80142b4:	d115      	bne.n	80142e2 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 80142b6:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 80142ba:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 80142be:	2b00      	cmp	r3, #0
 80142c0:	8643      	strh	r3, [r0, #50]	@ 0x32
 80142c2:	8682      	strh	r2, [r0, #52]	@ 0x34
 80142c4:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 80142c8:	da0e      	bge.n	80142e8 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x40>
 80142ca:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 80142ce:	3a01      	subs	r2, #1
 80142d0:	4291      	cmp	r1, r2
 80142d2:	d007      	beq.n	80142e4 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 80142d4:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 80142d6:	4252      	negs	r2, r2
 80142d8:	4293      	cmp	r3, r2
 80142da:	dc03      	bgt.n	80142e4 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 80142dc:	2302      	movs	r3, #2
 80142de:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80142e2:	4770      	bx	lr
 80142e4:	2300      	movs	r3, #0
 80142e6:	e7fa      	b.n	80142de <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 80142e8:	d0fb      	beq.n	80142e2 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 80142ea:	b111      	cbz	r1, 80142f2 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4a>
 80142ec:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 80142ee:	4293      	cmp	r3, r2
 80142f0:	da01      	bge.n	80142f6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4e>
 80142f2:	2301      	movs	r3, #1
 80142f4:	e7f3      	b.n	80142de <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 80142f6:	2303      	movs	r3, #3
 80142f8:	e7f1      	b.n	80142de <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>

080142fa <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE>:
 80142fa:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80142fe:	2b07      	cmp	r3, #7
 8014300:	d114      	bne.n	801432c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8014302:	790b      	ldrb	r3, [r1, #4]
 8014304:	b993      	cbnz	r3, 801432c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8014306:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8014308:	f890 20f5 	ldrb.w	r2, [r0, #245]	@ 0xf5
 801430c:	8643      	strh	r3, [r0, #50]	@ 0x32
 801430e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8014312:	8683      	strh	r3, [r0, #52]	@ 0x34
 8014314:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014318:	2b00      	cmp	r3, #0
 801431a:	da08      	bge.n	801432e <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x34>
 801431c:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 8014320:	3b01      	subs	r3, #1
 8014322:	429a      	cmp	r2, r3
 8014324:	da02      	bge.n	801432c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8014326:	2302      	movs	r3, #2
 8014328:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 801432c:	4770      	bx	lr
 801432e:	d0fd      	beq.n	801432c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8014330:	2a00      	cmp	r2, #0
 8014332:	d0fb      	beq.n	801432c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8014334:	2303      	movs	r3, #3
 8014336:	e7f7      	b.n	8014328 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x2e>

08014338 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 8014338:	b538      	push	{r3, r4, r5, lr}
 801433a:	4604      	mov	r4, r0
 801433c:	460d      	mov	r5, r1
 801433e:	2226      	movs	r2, #38	@ 0x26
 8014340:	2100      	movs	r1, #0
 8014342:	f018 fe37 	bl	802cfb4 <memset>
 8014346:	4620      	mov	r0, r4
 8014348:	f7fc f826 	bl	8010398 <_ZN8touchgfx8DrawableC1Ev>
 801434c:	4b06      	ldr	r3, [pc, #24]	@ (8014368 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 801434e:	4620      	mov	r0, r4
 8014350:	6023      	str	r3, [r4, #0]
 8014352:	882b      	ldrh	r3, [r5, #0]
 8014354:	4629      	mov	r1, r5
 8014356:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8014358:	23ff      	movs	r3, #255	@ 0xff
 801435a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801435e:	f003 fa64 	bl	801782a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014362:	4620      	mov	r0, r4
 8014364:	bd38      	pop	{r3, r4, r5, pc}
 8014366:	bf00      	nop
 8014368:	0802f84c 	.word	0x0802f84c

0801436c <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>:
 801436c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801436e:	4770      	bx	lr

08014370 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>:
 8014370:	b508      	push	{r3, lr}
 8014372:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 8014374:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 8014378:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801437c:	303c      	adds	r0, #60	@ 0x3c
 801437e:	fb03 2111 	mls	r1, r3, r1, r2
 8014382:	2200      	movs	r2, #0
 8014384:	b209      	sxth	r1, r1
 8014386:	f7fc f95d 	bl	8010644 <_ZN8touchgfx8Drawable6moveToEss>
 801438a:	bd08      	pop	{r3, pc}

0801438c <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE>:
 801438c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014390:	2b07      	cmp	r3, #7
 8014392:	d119      	bne.n	80143c8 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x3c>
 8014394:	88ca      	ldrh	r2, [r1, #6]
 8014396:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8014398:	1a9b      	subs	r3, r3, r2
 801439a:	894a      	ldrh	r2, [r1, #10]
 801439c:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 80143a0:	4413      	add	r3, r2
 80143a2:	b21b      	sxth	r3, r3
 80143a4:	8603      	strh	r3, [r0, #48]	@ 0x30
 80143a6:	b921      	cbnz	r1, 80143b2 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 80143a8:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 80143aa:	4293      	cmp	r3, r2
 80143ac:	dd01      	ble.n	80143b2 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 80143ae:	8602      	strh	r2, [r0, #48]	@ 0x30
 80143b0:	e008      	b.n	80143c4 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 80143b2:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 80143b6:	3a01      	subs	r2, #1
 80143b8:	4291      	cmp	r1, r2
 80143ba:	d103      	bne.n	80143c4 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 80143bc:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 80143be:	4252      	negs	r2, r2
 80143c0:	4293      	cmp	r3, r2
 80143c2:	dbf4      	blt.n	80143ae <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x22>
 80143c4:	f7ff bfd4 	b.w	8014370 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80143c8:	4770      	bx	lr

080143ca <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>:
 80143ca:	b538      	push	{r3, r4, r5, lr}
 80143cc:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 80143d0:	4604      	mov	r4, r0
 80143d2:	2d0e      	cmp	r5, #14
 80143d4:	d813      	bhi.n	80143fe <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x34>
 80143d6:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 80143d8:	230e      	movs	r3, #14
 80143da:	4252      	negs	r2, r2
 80143dc:	b212      	sxth	r2, r2
 80143de:	2100      	movs	r1, #0
 80143e0:	4628      	mov	r0, r5
 80143e2:	f007 fb4d 	bl	801ba80 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 80143e6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80143e8:	4418      	add	r0, r3
 80143ea:	8620      	strh	r0, [r4, #48]	@ 0x30
 80143ec:	4620      	mov	r0, r4
 80143ee:	f7ff ffbf 	bl	8014370 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80143f2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80143f6:	3301      	adds	r3, #1
 80143f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80143fc:	bd38      	pop	{r3, r4, r5, pc}
 80143fe:	2307      	movs	r3, #7
 8014400:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8014404:	2300      	movs	r3, #0
 8014406:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 801440a:	8603      	strh	r3, [r0, #48]	@ 0x30
 801440c:	e7ef      	b.n	80143ee <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x24>

0801440e <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>:
 801440e:	b538      	push	{r3, r4, r5, lr}
 8014410:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 8014414:	4604      	mov	r4, r0
 8014416:	2d0e      	cmp	r5, #14
 8014418:	d812      	bhi.n	8014440 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x32>
 801441a:	230e      	movs	r3, #14
 801441c:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 8014420:	2100      	movs	r1, #0
 8014422:	4628      	mov	r0, r5
 8014424:	f007 fb2c 	bl	801ba80 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 8014428:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801442a:	1a18      	subs	r0, r3, r0
 801442c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801442e:	4620      	mov	r0, r4
 8014430:	f7ff ff9e 	bl	8014370 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014434:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014438:	3301      	adds	r3, #1
 801443a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801443e:	bd38      	pop	{r3, r4, r5, pc}
 8014440:	2307      	movs	r3, #7
 8014442:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8014446:	2300      	movs	r3, #0
 8014448:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 801444c:	8603      	strh	r3, [r0, #48]	@ 0x30
 801444e:	e7ef      	b.n	8014430 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x22>

08014450 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>:
 8014450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014454:	4604      	mov	r4, r0
 8014456:	2500      	movs	r5, #0
 8014458:	4626      	mov	r6, r4
 801445a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801445e:	f7fb ff9b 	bl	8010398 <_ZN8touchgfx8DrawableC1Ev>
 8014462:	4b18      	ldr	r3, [pc, #96]	@ (80144c4 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x74>)
 8014464:	af02      	add	r7, sp, #8
 8014466:	f827 9d04 	strh.w	r9, [r7, #-4]!
 801446a:	62a5      	str	r5, [r4, #40]	@ 0x28
 801446c:	f846 3b2c 	str.w	r3, [r6], #44
 8014470:	4639      	mov	r1, r7
 8014472:	4630      	mov	r0, r6
 8014474:	f7ff ff60 	bl	8014338 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014478:	4b13      	ldr	r3, [pc, #76]	@ (80144c8 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x78>)
 801447a:	f104 085c 	add.w	r8, r4, #92	@ 0x5c
 801447e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014480:	4639      	mov	r1, r7
 8014482:	f8a4 5056 	strh.w	r5, [r4, #86]	@ 0x56
 8014486:	f8a4 5058 	strh.w	r5, [r4, #88]	@ 0x58
 801448a:	4640      	mov	r0, r8
 801448c:	f8ad 9004 	strh.w	r9, [sp, #4]
 8014490:	f7ff ff52 	bl	8014338 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014494:	462a      	mov	r2, r5
 8014496:	4629      	mov	r1, r5
 8014498:	4630      	mov	r0, r6
 801449a:	f8a4 5088 	strh.w	r5, [r4, #136]	@ 0x88
 801449e:	f7fc f828 	bl	80104f2 <_ZN8touchgfx8Drawable5setXYEss>
 80144a2:	462a      	mov	r2, r5
 80144a4:	4629      	mov	r1, r5
 80144a6:	4640      	mov	r0, r8
 80144a8:	f7fc f823 	bl	80104f2 <_ZN8touchgfx8Drawable5setXYEss>
 80144ac:	4631      	mov	r1, r6
 80144ae:	4620      	mov	r0, r4
 80144b0:	f7ff fc58 	bl	8013d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80144b4:	4620      	mov	r0, r4
 80144b6:	4641      	mov	r1, r8
 80144b8:	f7ff fc54 	bl	8013d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80144bc:	4620      	mov	r0, r4
 80144be:	b003      	add	sp, #12
 80144c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144c4:	0802f2d8 	.word	0x0802f2d8
 80144c8:	0802f7c8 	.word	0x0802f7c8

080144cc <_ZN8touchgfx14SwipeContainerC1Ev>:
 80144cc:	b570      	push	{r4, r5, r6, lr}
 80144ce:	4604      	mov	r4, r0
 80144d0:	f7fb ff62 	bl	8010398 <_ZN8touchgfx8DrawableC1Ev>
 80144d4:	4b1c      	ldr	r3, [pc, #112]	@ (8014548 <_ZN8touchgfx14SwipeContainerC1Ev+0x7c>)
 80144d6:	2500      	movs	r5, #0
 80144d8:	6023      	str	r3, [r4, #0]
 80144da:	2307      	movs	r3, #7
 80144dc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80144e0:	2350      	movs	r3, #80	@ 0x50
 80144e2:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80144e4:	231e      	movs	r3, #30
 80144e6:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80144e8:	2314      	movs	r3, #20
 80144ea:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 80144ee:	62a5      	str	r5, [r4, #40]	@ 0x28
 80144f0:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 80144f4:	8625      	strh	r5, [r4, #48]	@ 0x30
 80144f6:	8665      	strh	r5, [r4, #50]	@ 0x32
 80144f8:	86a5      	strh	r5, [r4, #52]	@ 0x34
 80144fa:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 80144fe:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 8014502:	4630      	mov	r0, r6
 8014504:	f7fb ff48 	bl	8010398 <_ZN8touchgfx8DrawableC1Ev>
 8014508:	4b10      	ldr	r3, [pc, #64]	@ (801454c <_ZN8touchgfx14SwipeContainerC1Ev+0x80>)
 801450a:	6665      	str	r5, [r4, #100]	@ 0x64
 801450c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801450e:	2302      	movs	r3, #2
 8014510:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
 8014514:	f104 056c 	add.w	r5, r4, #108	@ 0x6c
 8014518:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 801451c:	4628      	mov	r0, r5
 801451e:	f7ff ff97 	bl	8014450 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>
 8014522:	f005 f8bd 	bl	80196a0 <_ZN8touchgfx11Application11getInstanceEv>
 8014526:	4621      	mov	r1, r4
 8014528:	3004      	adds	r0, #4
 801452a:	f005 f987 	bl	801983c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 801452e:	2301      	movs	r3, #1
 8014530:	4631      	mov	r1, r6
 8014532:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8014536:	4620      	mov	r0, r4
 8014538:	f7ff fc14 	bl	8013d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801453c:	4620      	mov	r0, r4
 801453e:	4629      	mov	r1, r5
 8014540:	f7ff fc10 	bl	8013d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014544:	4620      	mov	r0, r4
 8014546:	bd70      	pop	{r4, r5, r6, pc}
 8014548:	0802f368 	.word	0x0802f368
 801454c:	0802f42c 	.word	0x0802f42c

08014550 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>:
 8014550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014552:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 8014556:	4604      	mov	r4, r0
 8014558:	428b      	cmp	r3, r1
 801455a:	460d      	mov	r5, r1
 801455c:	d915      	bls.n	801458a <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 801455e:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 8014562:	428b      	cmp	r3, r1
 8014564:	d011      	beq.n	801458a <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 8014566:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 801456a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 801456e:	a802      	add	r0, sp, #8
 8014570:	f820 3d04 	strh.w	r3, [r0, #-4]!
 8014574:	f008 facc 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014578:	fb15 f100 	smulbb	r1, r5, r0
 801457c:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	@ 0x62
 8014580:	b209      	sxth	r1, r1
 8014582:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8014586:	f7fc f85d 	bl	8010644 <_ZN8touchgfx8Drawable6moveToEss>
 801458a:	b003      	add	sp, #12
 801458c:	bd30      	pop	{r4, r5, pc}

0801458e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>:
 801458e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014590:	4604      	mov	r4, r0
 8014592:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014596:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 801459a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 801459e:	460d      	mov	r5, r1
 80145a0:	4293      	cmp	r3, r2
 80145a2:	d01e      	beq.n	80145e2 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x54>
 80145a4:	a802      	add	r0, sp, #8
 80145a6:	f820 3d04 	strh.w	r3, [r0, #-4]!
 80145aa:	f008 fab1 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80145ae:	fb15 f000 	smulbb	r0, r5, r0
 80145b2:	6823      	ldr	r3, [r4, #0]
 80145b4:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80145b6:	695b      	ldr	r3, [r3, #20]
 80145b8:	4620      	mov	r0, r4
 80145ba:	4798      	blx	r3
 80145bc:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 80145c0:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 80145c4:	4620      	mov	r0, r4
 80145c6:	f7fb fff0 	bl	80105aa <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80145ca:	f894 1089 	ldrb.w	r1, [r4, #137]	@ 0x89
 80145ce:	4620      	mov	r0, r4
 80145d0:	42a9      	cmp	r1, r5
 80145d2:	bf28      	it	cs
 80145d4:	4629      	movcs	r1, r5
 80145d6:	f7ff ffbb 	bl	8014550 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 80145da:	6823      	ldr	r3, [r4, #0]
 80145dc:	4620      	mov	r0, r4
 80145de:	695b      	ldr	r3, [r3, #20]
 80145e0:	4798      	blx	r3
 80145e2:	b003      	add	sp, #12
 80145e4:	bd30      	pop	{r4, r5, pc}

080145e6 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>:
 80145e6:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 80145ea:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 80145ee:	3101      	adds	r1, #1
 80145f0:	fb91 f3f2 	sdiv	r3, r1, r2
 80145f4:	fb02 1113 	mls	r1, r2, r3, r1
 80145f8:	b2c9      	uxtb	r1, r1
 80145fa:	f7ff bfa9 	b.w	8014550 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

080145fe <_ZN8touchgfx14SwipeContainer11animateLeftEv>:
 80145fe:	b510      	push	{r4, lr}
 8014600:	4604      	mov	r4, r0
 8014602:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8014606:	280a      	cmp	r0, #10
 8014608:	d813      	bhi.n	8014632 <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x34>
 801460a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801460c:	8922      	ldrh	r2, [r4, #8]
 801460e:	2100      	movs	r1, #0
 8014610:	441a      	add	r2, r3
 8014612:	b212      	sxth	r2, r2
 8014614:	230a      	movs	r3, #10
 8014616:	f007 fa71 	bl	801bafc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801461a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801461c:	1a18      	subs	r0, r3, r0
 801461e:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014620:	4620      	mov	r0, r4
 8014622:	f7ff fea5 	bl	8014370 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014626:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801462a:	3301      	adds	r3, #1
 801462c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014630:	bd10      	pop	{r4, pc}
 8014632:	2307      	movs	r3, #7
 8014634:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014638:	2300      	movs	r3, #0
 801463a:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801463e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014642:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014644:	f7ff ffcf 	bl	80145e6 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 8014648:	e7ea      	b.n	8014620 <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x22>

0801464a <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>:
 801464a:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 801464e:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 8014652:	4411      	add	r1, r2
 8014654:	3901      	subs	r1, #1
 8014656:	fb91 f3f2 	sdiv	r3, r1, r2
 801465a:	fb02 1113 	mls	r1, r2, r3, r1
 801465e:	b2c9      	uxtb	r1, r1
 8014660:	f7ff bf76 	b.w	8014550 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

08014664 <_ZN8touchgfx14SwipeContainer12animateRightEv>:
 8014664:	b510      	push	{r4, lr}
 8014666:	4604      	mov	r4, r0
 8014668:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 801466c:	280a      	cmp	r0, #10
 801466e:	d813      	bhi.n	8014698 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x34>
 8014670:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014672:	8922      	ldrh	r2, [r4, #8]
 8014674:	2100      	movs	r1, #0
 8014676:	1ad2      	subs	r2, r2, r3
 8014678:	b212      	sxth	r2, r2
 801467a:	230a      	movs	r3, #10
 801467c:	f007 fa3e 	bl	801bafc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8014680:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014682:	4418      	add	r0, r3
 8014684:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014686:	4620      	mov	r0, r4
 8014688:	f7ff fe72 	bl	8014370 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801468c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014690:	3301      	adds	r3, #1
 8014692:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014696:	bd10      	pop	{r4, pc}
 8014698:	2307      	movs	r3, #7
 801469a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801469e:	2300      	movs	r3, #0
 80146a0:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80146a4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80146a8:	8623      	strh	r3, [r4, #48]	@ 0x30
 80146aa:	f7ff ffce 	bl	801464a <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 80146ae:	e7ea      	b.n	8014686 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x22>

080146b0 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>:
 80146b0:	b510      	push	{r4, lr}
 80146b2:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 80146b6:	4604      	mov	r4, r0
 80146b8:	428b      	cmp	r3, r1
 80146ba:	d907      	bls.n	80146cc <_ZN8touchgfx14SwipeContainer15setSelectedPageEh+0x1c>
 80146bc:	306c      	adds	r0, #108	@ 0x6c
 80146be:	f7ff ff47 	bl	8014550 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 80146c2:	4620      	mov	r0, r4
 80146c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146c8:	f7ff be52 	b.w	8014370 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80146cc:	bd10      	pop	{r4, pc}

080146ce <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>:
 80146ce:	b538      	push	{r3, r4, r5, lr}
 80146d0:	4604      	mov	r4, r0
 80146d2:	460d      	mov	r5, r1
 80146d4:	303c      	adds	r0, #60	@ 0x3c
 80146d6:	f000 f9fd 	bl	8014ad4 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
 80146da:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 80146de:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80146e2:	3101      	adds	r1, #1
 80146e4:	b2c9      	uxtb	r1, r1
 80146e6:	f7ff ff52 	bl	801458e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 80146ea:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 80146ee:	4620      	mov	r0, r4
 80146f0:	f7ff ffde 	bl	80146b0 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 80146f4:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 80146f8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80146fc:	4620      	mov	r0, r4
 80146fe:	f7fb ff54 	bl	80105aa <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014702:	bd38      	pop	{r3, r4, r5, pc}

08014704 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE>:
 8014704:	b538      	push	{r3, r4, r5, lr}
 8014706:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 801470a:	4604      	mov	r4, r0
 801470c:	b1e3      	cbz	r3, 8014748 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 801470e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8014710:	b1d3      	cbz	r3, 8014748 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 8014712:	428b      	cmp	r3, r1
 8014714:	d125      	bne.n	8014762 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x5e>
 8014716:	4619      	mov	r1, r3
 8014718:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 801471c:	f000 fa5a 	bl	8014bd4 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>
 8014720:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 8014724:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8014728:	3901      	subs	r1, #1
 801472a:	b2c9      	uxtb	r1, r1
 801472c:	f7ff ff2f 	bl	801458e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 8014730:	f894 50f4 	ldrb.w	r5, [r4, #244]	@ 0xf4
 8014734:	b94d      	cbnz	r5, 801474a <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x46>
 8014736:	6823      	ldr	r3, [r4, #0]
 8014738:	4620      	mov	r0, r4
 801473a:	695b      	ldr	r3, [r3, #20]
 801473c:	4798      	blx	r3
 801473e:	462a      	mov	r2, r5
 8014740:	4629      	mov	r1, r5
 8014742:	4620      	mov	r0, r4
 8014744:	f7fb ff31 	bl	80105aa <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014748:	bd38      	pop	{r3, r4, r5, pc}
 801474a:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 801474e:	3d01      	subs	r5, #1
 8014750:	42a9      	cmp	r1, r5
 8014752:	bfa8      	it	ge
 8014754:	4629      	movge	r1, r5
 8014756:	4620      	mov	r0, r4
 8014758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801475c:	b2c9      	uxtb	r1, r1
 801475e:	f7ff bfa7 	b.w	80146b0 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 8014762:	699b      	ldr	r3, [r3, #24]
 8014764:	e7d4      	b.n	8014710 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0xc>

08014766 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>:
 8014766:	b510      	push	{r4, lr}
 8014768:	4604      	mov	r4, r0
 801476a:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 801476e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014772:	4298      	cmp	r0, r3
 8014774:	d812      	bhi.n	801479c <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x36>
 8014776:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 8014778:	8922      	ldrh	r2, [r4, #8]
 801477a:	440a      	add	r2, r1
 801477c:	b212      	sxth	r2, r2
 801477e:	2100      	movs	r1, #0
 8014780:	f007 f9bc 	bl	801bafc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8014784:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014786:	1a18      	subs	r0, r3, r0
 8014788:	8620      	strh	r0, [r4, #48]	@ 0x30
 801478a:	4620      	mov	r0, r4
 801478c:	f7ff fdf0 	bl	8014370 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014790:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014794:	3301      	adds	r3, #1
 8014796:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801479a:	bd10      	pop	{r4, pc}
 801479c:	2307      	movs	r3, #7
 801479e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80147a2:	2300      	movs	r3, #0
 80147a4:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80147a8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80147ac:	8623      	strh	r3, [r4, #48]	@ 0x30
 80147ae:	f7ff ff1a 	bl	80145e6 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 80147b2:	e7ea      	b.n	801478a <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x24>

080147b4 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>:
 80147b4:	b510      	push	{r4, lr}
 80147b6:	4604      	mov	r4, r0
 80147b8:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80147bc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80147c0:	4298      	cmp	r0, r3
 80147c2:	d812      	bhi.n	80147ea <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x36>
 80147c4:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 80147c6:	8922      	ldrh	r2, [r4, #8]
 80147c8:	1a52      	subs	r2, r2, r1
 80147ca:	b212      	sxth	r2, r2
 80147cc:	2100      	movs	r1, #0
 80147ce:	f007 f995 	bl	801bafc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80147d2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80147d4:	4418      	add	r0, r3
 80147d6:	8620      	strh	r0, [r4, #48]	@ 0x30
 80147d8:	4620      	mov	r0, r4
 80147da:	f7ff fdc9 	bl	8014370 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80147de:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80147e2:	3301      	adds	r3, #1
 80147e4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80147e8:	bd10      	pop	{r4, pc}
 80147ea:	2307      	movs	r3, #7
 80147ec:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80147f0:	2300      	movs	r3, #0
 80147f2:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80147f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80147fa:	8623      	strh	r3, [r4, #48]	@ 0x30
 80147fc:	f7ff ff25 	bl	801464a <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 8014800:	e7ea      	b.n	80147d8 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x24>

08014802 <_ZN8touchgfx14SwipeContainer13animateToPageEv>:
 8014802:	b538      	push	{r3, r4, r5, lr}
 8014804:	4604      	mov	r4, r0
 8014806:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 801480a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801480e:	f994 1039 	ldrsb.w	r1, [r4, #57]	@ 0x39
 8014812:	4298      	cmp	r0, r3
 8014814:	d814      	bhi.n	8014840 <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x3e>
 8014816:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 801481a:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 801481c:	fb05 2201 	mla	r2, r5, r1, r2
 8014820:	2100      	movs	r1, #0
 8014822:	b212      	sxth	r2, r2
 8014824:	f007 f96a 	bl	801bafc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8014828:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801482a:	1a18      	subs	r0, r3, r0
 801482c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801482e:	4620      	mov	r0, r4
 8014830:	f7ff fd9e 	bl	8014370 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014834:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014838:	3301      	adds	r3, #1
 801483a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801483e:	bd38      	pop	{r3, r4, r5, pc}
 8014840:	2307      	movs	r3, #7
 8014842:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014846:	2300      	movs	r3, #0
 8014848:	f894 20f5 	ldrb.w	r2, [r4, #245]	@ 0xf5
 801484c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014850:	4411      	add	r1, r2
 8014852:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014854:	b2c9      	uxtb	r1, r1
 8014856:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801485a:	f7ff fe79 	bl	8014550 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 801485e:	e7e6      	b.n	801482e <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x2c>

08014860 <_ZN8touchgfx14SwipeContainer15handleTickEventEv>:
 8014860:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014864:	b90b      	cbnz	r3, 801486a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0xa>
 8014866:	f7ff bdb0 	b.w	80143ca <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>
 801486a:	2b01      	cmp	r3, #1
 801486c:	d101      	bne.n	8014872 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x12>
 801486e:	f7ff bdce 	b.w	801440e <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>
 8014872:	2b02      	cmp	r3, #2
 8014874:	d101      	bne.n	801487a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x1a>
 8014876:	f7ff bec2 	b.w	80145fe <_ZN8touchgfx14SwipeContainer11animateLeftEv>
 801487a:	2b03      	cmp	r3, #3
 801487c:	d101      	bne.n	8014882 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x22>
 801487e:	f7ff bef1 	b.w	8014664 <_ZN8touchgfx14SwipeContainer12animateRightEv>
 8014882:	2b04      	cmp	r3, #4
 8014884:	d101      	bne.n	801488a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x2a>
 8014886:	f7ff bf6e 	b.w	8014766 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>
 801488a:	2b05      	cmp	r3, #5
 801488c:	d101      	bne.n	8014892 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x32>
 801488e:	f7ff bf91 	b.w	80147b4 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>
 8014892:	2b06      	cmp	r3, #6
 8014894:	d101      	bne.n	801489a <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x3a>
 8014896:	f7ff bfb4 	b.w	8014802 <_ZN8touchgfx14SwipeContainer13animateToPageEv>
 801489a:	4770      	bx	lr

0801489c <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 801489c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80148a0:	4770      	bx	lr

080148a2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 80148a2:	b538      	push	{r3, r4, r5, lr}
 80148a4:	7882      	ldrb	r2, [r0, #2]
 80148a6:	4604      	mov	r4, r0
 80148a8:	460d      	mov	r5, r1
 80148aa:	6843      	ldr	r3, [r0, #4]
 80148ac:	b98a      	cbnz	r2, 80148d2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 80148ae:	4299      	cmp	r1, r3
 80148b0:	d101      	bne.n	80148b6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 80148b2:	2301      	movs	r3, #1
 80148b4:	7083      	strb	r3, [r0, #2]
 80148b6:	6863      	ldr	r3, [r4, #4]
 80148b8:	42ab      	cmp	r3, r5
 80148ba:	d009      	beq.n	80148d0 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 80148bc:	7a23      	ldrb	r3, [r4, #8]
 80148be:	2b01      	cmp	r3, #1
 80148c0:	d11b      	bne.n	80148fa <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 80148c2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80148c6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	bfb8      	it	lt
 80148ce:	8023      	strhlt	r3, [r4, #0]
 80148d0:	bd38      	pop	{r3, r4, r5, pc}
 80148d2:	7a02      	ldrb	r2, [r0, #8]
 80148d4:	2a01      	cmp	r2, #1
 80148d6:	d108      	bne.n	80148ea <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 80148d8:	895b      	ldrh	r3, [r3, #10]
 80148da:	88c9      	ldrh	r1, [r1, #6]
 80148dc:	1ac9      	subs	r1, r1, r3
 80148de:	682b      	ldr	r3, [r5, #0]
 80148e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148e2:	b209      	sxth	r1, r1
 80148e4:	4628      	mov	r0, r5
 80148e6:	4798      	blx	r3
 80148e8:	e7e5      	b.n	80148b6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 80148ea:	2a02      	cmp	r2, #2
 80148ec:	d1e3      	bne.n	80148b6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 80148ee:	891b      	ldrh	r3, [r3, #8]
 80148f0:	8889      	ldrh	r1, [r1, #4]
 80148f2:	1ac9      	subs	r1, r1, r3
 80148f4:	682b      	ldr	r3, [r5, #0]
 80148f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148f8:	e7f3      	b.n	80148e2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 80148fa:	2b02      	cmp	r3, #2
 80148fc:	d1e8      	bne.n	80148d0 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 80148fe:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8014902:	e7e0      	b.n	80148c6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

08014904 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 8014904:	4770      	bx	lr

08014906 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 8014906:	4770      	bx	lr

08014908 <_ZN8touchgfx10ListLayoutD1Ev>:
 8014908:	4770      	bx	lr

0801490a <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 801490a:	4603      	mov	r3, r0
 801490c:	b430      	push	{r4, r5}
 801490e:	68c5      	ldr	r5, [r0, #12]
 8014910:	6844      	ldr	r4, [r0, #4]
 8014912:	106a      	asrs	r2, r5, #1
 8014914:	07ed      	lsls	r5, r5, #31
 8014916:	eb04 0002 	add.w	r0, r4, r2
 801491a:	689b      	ldr	r3, [r3, #8]
 801491c:	bf48      	it	mi
 801491e:	58a2      	ldrmi	r2, [r4, r2]
 8014920:	bc30      	pop	{r4, r5}
 8014922:	bf48      	it	mi
 8014924:	58d3      	ldrmi	r3, [r2, r3]
 8014926:	4718      	bx	r3

08014928 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 8014928:	6843      	ldr	r3, [r0, #4]
 801492a:	b12b      	cbz	r3, 8014938 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 801492c:	6883      	ldr	r3, [r0, #8]
 801492e:	b92b      	cbnz	r3, 801493c <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 8014930:	68c0      	ldr	r0, [r0, #12]
 8014932:	f000 0001 	and.w	r0, r0, #1
 8014936:	4770      	bx	lr
 8014938:	4618      	mov	r0, r3
 801493a:	4770      	bx	lr
 801493c:	2001      	movs	r0, #1
 801493e:	4770      	bx	lr

08014940 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 8014940:	4603      	mov	r3, r0
 8014942:	b430      	push	{r4, r5}
 8014944:	68c5      	ldr	r5, [r0, #12]
 8014946:	6844      	ldr	r4, [r0, #4]
 8014948:	106a      	asrs	r2, r5, #1
 801494a:	07ed      	lsls	r5, r5, #31
 801494c:	eb04 0002 	add.w	r0, r4, r2
 8014950:	689b      	ldr	r3, [r3, #8]
 8014952:	bf48      	it	mi
 8014954:	58a2      	ldrmi	r2, [r4, r2]
 8014956:	bc30      	pop	{r4, r5}
 8014958:	bf48      	it	mi
 801495a:	58d3      	ldrmi	r3, [r2, r3]
 801495c:	4718      	bx	r3

0801495e <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 801495e:	6843      	ldr	r3, [r0, #4]
 8014960:	b12b      	cbz	r3, 801496e <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 8014962:	6883      	ldr	r3, [r0, #8]
 8014964:	b92b      	cbnz	r3, 8014972 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 8014966:	68c0      	ldr	r0, [r0, #12]
 8014968:	f000 0001 	and.w	r0, r0, #1
 801496c:	4770      	bx	lr
 801496e:	4618      	mov	r0, r3
 8014970:	4770      	bx	lr
 8014972:	2001      	movs	r0, #1
 8014974:	4770      	bx	lr

08014976 <_ZN8touchgfx10ListLayoutD0Ev>:
 8014976:	b510      	push	{r4, lr}
 8014978:	4604      	mov	r4, r0
 801497a:	2130      	movs	r1, #48	@ 0x30
 801497c:	f017 f919 	bl	802bbb2 <_ZdlPvj>
 8014980:	4620      	mov	r0, r4
 8014982:	bd10      	pop	{r4, pc}

08014984 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 8014984:	b510      	push	{r4, lr}
 8014986:	4604      	mov	r4, r0
 8014988:	2110      	movs	r1, #16
 801498a:	f017 f912 	bl	802bbb2 <_ZdlPvj>
 801498e:	4620      	mov	r0, r4
 8014990:	bd10      	pop	{r4, pc}

08014992 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 8014992:	b510      	push	{r4, lr}
 8014994:	4604      	mov	r4, r0
 8014996:	2110      	movs	r1, #16
 8014998:	f017 f90b 	bl	802bbb2 <_ZdlPvj>
 801499c:	4620      	mov	r0, r4
 801499e:	bd10      	pop	{r4, pc}

080149a0 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 80149a0:	4603      	mov	r3, r0
 80149a2:	789a      	ldrb	r2, [r3, #2]
 80149a4:	4608      	mov	r0, r1
 80149a6:	b992      	cbnz	r2, 80149ce <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 80149a8:	685a      	ldr	r2, [r3, #4]
 80149aa:	428a      	cmp	r2, r1
 80149ac:	d102      	bne.n	80149b4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 80149ae:	2201      	movs	r2, #1
 80149b0:	709a      	strb	r2, [r3, #2]
 80149b2:	4770      	bx	lr
 80149b4:	7a1a      	ldrb	r2, [r3, #8]
 80149b6:	2a01      	cmp	r2, #1
 80149b8:	d104      	bne.n	80149c4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 80149ba:	88ca      	ldrh	r2, [r1, #6]
 80149bc:	8949      	ldrh	r1, [r1, #10]
 80149be:	440a      	add	r2, r1
 80149c0:	801a      	strh	r2, [r3, #0]
 80149c2:	4770      	bx	lr
 80149c4:	2a02      	cmp	r2, #2
 80149c6:	d116      	bne.n	80149f6 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 80149c8:	888a      	ldrh	r2, [r1, #4]
 80149ca:	8909      	ldrh	r1, [r1, #8]
 80149cc:	e7f7      	b.n	80149be <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 80149ce:	7a1a      	ldrb	r2, [r3, #8]
 80149d0:	2a01      	cmp	r2, #1
 80149d2:	d107      	bne.n	80149e4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	8959      	ldrh	r1, [r3, #10]
 80149d8:	88c3      	ldrh	r3, [r0, #6]
 80149da:	4419      	add	r1, r3
 80149dc:	6803      	ldr	r3, [r0, #0]
 80149de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80149e0:	b209      	sxth	r1, r1
 80149e2:	4718      	bx	r3
 80149e4:	2a02      	cmp	r2, #2
 80149e6:	d106      	bne.n	80149f6 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 80149e8:	685b      	ldr	r3, [r3, #4]
 80149ea:	8919      	ldrh	r1, [r3, #8]
 80149ec:	8883      	ldrh	r3, [r0, #4]
 80149ee:	4419      	add	r1, r3
 80149f0:	6803      	ldr	r3, [r0, #0]
 80149f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80149f4:	e7f4      	b.n	80149e0 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 80149f6:	4770      	bx	lr

080149f8 <_ZN8touchgfx10ListLayout9removeAllEv>:
 80149f8:	2200      	movs	r2, #0
 80149fa:	b510      	push	{r4, lr}
 80149fc:	4604      	mov	r4, r0
 80149fe:	85c2      	strh	r2, [r0, #46]	@ 0x2e
 8014a00:	4611      	mov	r1, r2
 8014a02:	f7fb fdd2 	bl	80105aa <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014a06:	4620      	mov	r0, r4
 8014a08:	f7ff f9b9 	bl	8013d7e <_ZN8touchgfx9Container9removeAllEv>
 8014a0c:	6960      	ldr	r0, [r4, #20]
 8014a0e:	b120      	cbz	r0, 8014a1a <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 8014a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a14:	6803      	ldr	r3, [r0, #0]
 8014a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a18:	4718      	bx	r3
 8014a1a:	bd10      	pop	{r4, pc}

08014a1c <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 8014a1c:	b530      	push	{r4, r5, lr}
 8014a1e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014a22:	b085      	sub	sp, #20
 8014a24:	428b      	cmp	r3, r1
 8014a26:	4604      	mov	r4, r0
 8014a28:	d017      	beq.n	8014a5a <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8014a2a:	2500      	movs	r5, #0
 8014a2c:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8014a30:	85c5      	strh	r5, [r0, #46]	@ 0x2e
 8014a32:	462a      	mov	r2, r5
 8014a34:	4629      	mov	r1, r5
 8014a36:	f7fb fdb8 	bl	80105aa <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014a3a:	4b09      	ldr	r3, [pc, #36]	@ (8014a60 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x44>)
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	e9cd 3400 	strd	r3, r4, [sp]
 8014a42:	4b08      	ldr	r3, [pc, #32]	@ (8014a64 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x48>)
 8014a44:	4669      	mov	r1, sp
 8014a46:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8014a4a:	6823      	ldr	r3, [r4, #0]
 8014a4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014a4e:	4798      	blx	r3
 8014a50:	6960      	ldr	r0, [r4, #20]
 8014a52:	b110      	cbz	r0, 8014a5a <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8014a54:	6803      	ldr	r3, [r0, #0]
 8014a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a58:	4798      	blx	r3
 8014a5a:	b005      	add	sp, #20
 8014a5c:	bd30      	pop	{r4, r5, pc}
 8014a5e:	bf00      	nop
 8014a60:	0802f3fc 	.word	0x0802f3fc
 8014a64:	08014acd 	.word	0x08014acd

08014a68 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 8014a68:	b538      	push	{r3, r4, r5, lr}
 8014a6a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014a6e:	460d      	mov	r5, r1
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	4604      	mov	r4, r0
 8014a74:	4611      	mov	r1, r2
 8014a76:	d002      	beq.n	8014a7e <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 8014a78:	2b02      	cmp	r3, #2
 8014a7a:	d015      	beq.n	8014aa8 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 8014a7c:	bd38      	pop	{r3, r4, r5, pc}
 8014a7e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8014a82:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	bfb8      	it	lt
 8014a8a:	8103      	strhlt	r3, [r0, #8]
 8014a8c:	896a      	ldrh	r2, [r5, #10]
 8014a8e:	8943      	ldrh	r3, [r0, #10]
 8014a90:	4413      	add	r3, r2
 8014a92:	8143      	strh	r3, [r0, #10]
 8014a94:	460a      	mov	r2, r1
 8014a96:	4628      	mov	r0, r5
 8014a98:	2100      	movs	r1, #0
 8014a9a:	f7fb fd2a 	bl	80104f2 <_ZN8touchgfx8Drawable5setXYEss>
 8014a9e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014aa0:	896a      	ldrh	r2, [r5, #10]
 8014aa2:	4413      	add	r3, r2
 8014aa4:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8014aa6:	e7e9      	b.n	8014a7c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 8014aa8:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8014aac:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	bfb8      	it	lt
 8014ab4:	8143      	strhlt	r3, [r0, #10]
 8014ab6:	892a      	ldrh	r2, [r5, #8]
 8014ab8:	8903      	ldrh	r3, [r0, #8]
 8014aba:	4413      	add	r3, r2
 8014abc:	8103      	strh	r3, [r0, #8]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	4628      	mov	r0, r5
 8014ac2:	f7fb fd16 	bl	80104f2 <_ZN8touchgfx8Drawable5setXYEss>
 8014ac6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014ac8:	892a      	ldrh	r2, [r5, #8]
 8014aca:	e7ea      	b.n	8014aa2 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

08014acc <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 8014acc:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	@ 0x2e
 8014ad0:	f7ff bfca 	b.w	8014a68 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

08014ad4 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 8014ad4:	b570      	push	{r4, r5, r6, lr}
 8014ad6:	4604      	mov	r4, r0
 8014ad8:	460d      	mov	r5, r1
 8014ada:	f7ff fff7 	bl	8014acc <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 8014ade:	4620      	mov	r0, r4
 8014ae0:	4629      	mov	r1, r5
 8014ae2:	f7ff f93f 	bl	8013d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014ae6:	6960      	ldr	r0, [r4, #20]
 8014ae8:	b120      	cbz	r0, 8014af4 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 8014aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014aee:	6803      	ldr	r3, [r0, #0]
 8014af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014af2:	4718      	bx	r3
 8014af4:	bd70      	pop	{r4, r5, r6, pc}
	...

08014af8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 8014af8:	b530      	push	{r4, r5, lr}
 8014afa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014afc:	b089      	sub	sp, #36	@ 0x24
 8014afe:	4604      	mov	r4, r0
 8014b00:	4615      	mov	r5, r2
 8014b02:	b92b      	cbnz	r3, 8014b10 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 8014b04:	6803      	ldr	r3, [r0, #0]
 8014b06:	4611      	mov	r1, r2
 8014b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014b0a:	4798      	blx	r3
 8014b0c:	b009      	add	sp, #36	@ 0x24
 8014b0e:	bd30      	pop	{r4, r5, pc}
 8014b10:	f7ff f978 	bl	8013e04 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 8014b14:	2300      	movs	r3, #0
 8014b16:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8014b1a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014b1e:	f88d 200c 	strb.w	r2, [sp, #12]
 8014b22:	4a0e      	ldr	r2, [pc, #56]	@ (8014b5c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8014b24:	f88d 3006 	strb.w	r3, [sp, #6]
 8014b28:	9204      	str	r2, [sp, #16]
 8014b2a:	aa01      	add	r2, sp, #4
 8014b2c:	9205      	str	r2, [sp, #20]
 8014b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8014b60 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8014b30:	a904      	add	r1, sp, #16
 8014b32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014b36:	6823      	ldr	r3, [r4, #0]
 8014b38:	4620      	mov	r0, r4
 8014b3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b3c:	9502      	str	r5, [sp, #8]
 8014b3e:	4798      	blx	r3
 8014b40:	4620      	mov	r0, r4
 8014b42:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014b46:	4629      	mov	r1, r5
 8014b48:	f7ff ff8e 	bl	8014a68 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 8014b4c:	6960      	ldr	r0, [r4, #20]
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d0dc      	beq.n	8014b0c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8014b52:	6803      	ldr	r3, [r0, #0]
 8014b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b56:	4798      	blx	r3
 8014b58:	e7d8      	b.n	8014b0c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8014b5a:	bf00      	nop
 8014b5c:	0802f414 	.word	0x0802f414
 8014b60:	080149a1 	.word	0x080149a1

08014b64 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 8014b64:	b538      	push	{r3, r4, r5, lr}
 8014b66:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014b6a:	4604      	mov	r4, r0
 8014b6c:	2b01      	cmp	r3, #1
 8014b6e:	460d      	mov	r5, r1
 8014b70:	d002      	beq.n	8014b78 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 8014b72:	2b02      	cmp	r3, #2
 8014b74:	d018      	beq.n	8014ba8 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 8014b76:	bd38      	pop	{r3, r4, r5, pc}
 8014b78:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014b7c:	4293      	cmp	r3, r2
 8014b7e:	bfc8      	it	gt
 8014b80:	8102      	strhgt	r2, [r0, #8]
 8014b82:	894a      	ldrh	r2, [r1, #10]
 8014b84:	8943      	ldrh	r3, [r0, #10]
 8014b86:	1a9b      	subs	r3, r3, r2
 8014b88:	8143      	strh	r3, [r0, #10]
 8014b8a:	680b      	ldr	r3, [r1, #0]
 8014b8c:	4628      	mov	r0, r5
 8014b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b90:	2100      	movs	r1, #0
 8014b92:	4798      	blx	r3
 8014b94:	682b      	ldr	r3, [r5, #0]
 8014b96:	2100      	movs	r1, #0
 8014b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b9a:	4628      	mov	r0, r5
 8014b9c:	4798      	blx	r3
 8014b9e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014ba0:	896a      	ldrh	r2, [r5, #10]
 8014ba2:	1a9b      	subs	r3, r3, r2
 8014ba4:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8014ba6:	e7e6      	b.n	8014b76 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 8014ba8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014bac:	4293      	cmp	r3, r2
 8014bae:	bfc8      	it	gt
 8014bb0:	8142      	strhgt	r2, [r0, #10]
 8014bb2:	890a      	ldrh	r2, [r1, #8]
 8014bb4:	8903      	ldrh	r3, [r0, #8]
 8014bb6:	1a9b      	subs	r3, r3, r2
 8014bb8:	8103      	strh	r3, [r0, #8]
 8014bba:	680b      	ldr	r3, [r1, #0]
 8014bbc:	4628      	mov	r0, r5
 8014bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014bc0:	2100      	movs	r1, #0
 8014bc2:	4798      	blx	r3
 8014bc4:	682b      	ldr	r3, [r5, #0]
 8014bc6:	2100      	movs	r1, #0
 8014bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014bca:	4628      	mov	r0, r5
 8014bcc:	4798      	blx	r3
 8014bce:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014bd0:	892a      	ldrh	r2, [r5, #8]
 8014bd2:	e7e6      	b.n	8014ba2 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08014bd4 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	b530      	push	{r4, r5, lr}
 8014bd8:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8014bdc:	b089      	sub	sp, #36	@ 0x24
 8014bde:	f88d 200c 	strb.w	r2, [sp, #12]
 8014be2:	4a13      	ldr	r2, [pc, #76]	@ (8014c30 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8014be4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014be8:	9204      	str	r2, [sp, #16]
 8014bea:	aa01      	add	r2, sp, #4
 8014bec:	9205      	str	r2, [sp, #20]
 8014bee:	4a11      	ldr	r2, [pc, #68]	@ (8014c34 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 8014bf0:	f88d 3006 	strb.w	r3, [sp, #6]
 8014bf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014bf8:	6803      	ldr	r3, [r0, #0]
 8014bfa:	9102      	str	r1, [sp, #8]
 8014bfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014bfe:	460d      	mov	r5, r1
 8014c00:	a904      	add	r1, sp, #16
 8014c02:	4604      	mov	r4, r0
 8014c04:	4798      	blx	r3
 8014c06:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014c0a:	b14b      	cbz	r3, 8014c20 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 8014c0c:	4629      	mov	r1, r5
 8014c0e:	4620      	mov	r0, r4
 8014c10:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014c14:	f7ff ffa6 	bl	8014b64 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8014c18:	4629      	mov	r1, r5
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f7ff f8db 	bl	8013dd6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8014c20:	6960      	ldr	r0, [r4, #20]
 8014c22:	b110      	cbz	r0, 8014c2a <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8014c24:	6803      	ldr	r3, [r0, #0]
 8014c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c28:	4798      	blx	r3
 8014c2a:	b009      	add	sp, #36	@ 0x24
 8014c2c:	bd30      	pop	{r4, r5, pc}
 8014c2e:	bf00      	nop
 8014c30:	0802f414 	.word	0x0802f414
 8014c34:	080148a3 	.word	0x080148a3

08014c38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014c38:	b513      	push	{r0, r1, r4, lr}
 8014c3a:	6803      	ldr	r3, [r0, #0]
 8014c3c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8014c40:	2300      	movs	r3, #0
 8014c42:	e9cd 3300 	strd	r3, r3, [sp]
 8014c46:	466b      	mov	r3, sp
 8014c48:	47a0      	blx	r4
 8014c4a:	b002      	add	sp, #8
 8014c4c:	bd10      	pop	{r4, pc}

08014c4e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014c4e:	2301      	movs	r3, #1
 8014c50:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014c54:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014c58:	4770      	bx	lr

08014c5a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014c60:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014c64:	4770      	bx	lr

08014c66 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014c66:	2201      	movs	r2, #1
 8014c68:	6843      	ldr	r3, [r0, #4]
 8014c6a:	725a      	strb	r2, [r3, #9]
 8014c6c:	6840      	ldr	r0, [r0, #4]
 8014c6e:	6803      	ldr	r3, [r0, #0]
 8014c70:	691b      	ldr	r3, [r3, #16]
 8014c72:	4718      	bx	r3

08014c74 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014c74:	6840      	ldr	r0, [r0, #4]
 8014c76:	6803      	ldr	r3, [r0, #0]
 8014c78:	689b      	ldr	r3, [r3, #8]
 8014c7a:	4718      	bx	r3

08014c7c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8014c7c:	b530      	push	{r4, r5, lr}
 8014c7e:	b08b      	sub	sp, #44	@ 0x2c
 8014c80:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8014c84:	6804      	ldr	r4, [r0, #0]
 8014c86:	9509      	str	r5, [sp, #36]	@ 0x24
 8014c88:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8014c8c:	9508      	str	r5, [sp, #32]
 8014c8e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8014c92:	9507      	str	r5, [sp, #28]
 8014c94:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8014c98:	9506      	str	r5, [sp, #24]
 8014c9a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8014c9e:	9505      	str	r5, [sp, #20]
 8014ca0:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8014ca4:	9504      	str	r5, [sp, #16]
 8014ca6:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8014caa:	9503      	str	r5, [sp, #12]
 8014cac:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8014cb0:	9502      	str	r5, [sp, #8]
 8014cb2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8014cb6:	e9cd 3500 	strd	r3, r5, [sp]
 8014cba:	4613      	mov	r3, r2
 8014cbc:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	47a0      	blx	r4
 8014cc2:	b00b      	add	sp, #44	@ 0x2c
 8014cc4:	bd30      	pop	{r4, r5, pc}
	...

08014cc8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014cc8:	4b04      	ldr	r3, [pc, #16]	@ (8014cdc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	b123      	cbz	r3, 8014cd8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014cce:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8014cd2:	f080 0001 	eor.w	r0, r0, #1
 8014cd6:	4770      	bx	lr
 8014cd8:	2001      	movs	r0, #1
 8014cda:	4770      	bx	lr
 8014cdc:	2005baa2 	.word	0x2005baa2

08014ce0 <_ZN8touchgfx3HAL8endFrameEv>:
 8014ce0:	b510      	push	{r4, lr}
 8014ce2:	4604      	mov	r4, r0
 8014ce4:	6840      	ldr	r0, [r0, #4]
 8014ce6:	6803      	ldr	r3, [r0, #0]
 8014ce8:	689b      	ldr	r3, [r3, #8]
 8014cea:	4798      	blx	r3
 8014cec:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8014cf0:	b113      	cbz	r3, 8014cf8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8014cf8:	bd10      	pop	{r4, pc}

08014cfa <_ZN8touchgfx3HAL10initializeEv>:
 8014cfa:	b510      	push	{r4, lr}
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	f7fc ff97 	bl	8011c30 <_ZN8touchgfx10OSWrappers10initializeEv>
 8014d02:	f7fc fc2d 	bl	8011560 <_ZN8touchgfx4GPIO4initEv>
 8014d06:	6860      	ldr	r0, [r4, #4]
 8014d08:	6803      	ldr	r3, [r0, #0]
 8014d0a:	68db      	ldr	r3, [r3, #12]
 8014d0c:	4798      	blx	r3
 8014d0e:	68e0      	ldr	r0, [r4, #12]
 8014d10:	6803      	ldr	r3, [r0, #0]
 8014d12:	689b      	ldr	r3, [r3, #8]
 8014d14:	4798      	blx	r3
 8014d16:	6823      	ldr	r3, [r4, #0]
 8014d18:	4620      	mov	r0, r4
 8014d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014d20:	4718      	bx	r3

08014d22 <_ZN8touchgfx3HAL9taskEntryEv>:
 8014d22:	4604      	mov	r4, r0
 8014d24:	b508      	push	{r3, lr}
 8014d26:	6803      	ldr	r3, [r0, #0]
 8014d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d2c:	4798      	blx	r3
 8014d2e:	6823      	ldr	r3, [r4, #0]
 8014d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014d32:	4620      	mov	r0, r4
 8014d34:	4798      	blx	r3
 8014d36:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014d3a:	2b02      	cmp	r3, #2
 8014d3c:	d001      	beq.n	8014d42 <_ZN8touchgfx3HAL9taskEntryEv+0x20>
 8014d3e:	f7fc ffed 	bl	8011d1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014d42:	6823      	ldr	r3, [r4, #0]
 8014d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014d46:	e7f4      	b.n	8014d32 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08014d48 <_ZN8touchgfx3HAL4tickEv>:
 8014d48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014d4a:	6803      	ldr	r3, [r0, #0]
 8014d4c:	4604      	mov	r4, r0
 8014d4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014d52:	4798      	blx	r3
 8014d54:	4d60      	ldr	r5, [pc, #384]	@ (8014ed8 <_ZN8touchgfx3HAL4tickEv+0x190>)
 8014d56:	2800      	cmp	r0, #0
 8014d58:	f000 809e 	beq.w	8014e98 <_ZN8touchgfx3HAL4tickEv+0x150>
 8014d5c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014d60:	2b02      	cmp	r3, #2
 8014d62:	d002      	beq.n	8014d6a <_ZN8touchgfx3HAL4tickEv+0x22>
 8014d64:	2001      	movs	r0, #1
 8014d66:	f7fc fc03 	bl	8011570 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014d6a:	2600      	movs	r6, #0
 8014d6c:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8014d70:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8014d74:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014d78:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8014d7c:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8014d80:	b133      	cbz	r3, 8014d90 <_ZN8touchgfx3HAL4tickEv+0x48>
 8014d82:	6823      	ldr	r3, [r4, #0]
 8014d84:	4620      	mov	r0, r4
 8014d86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8014d8a:	4798      	blx	r3
 8014d8c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8014d90:	2601      	movs	r6, #1
 8014d92:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8014d96:	6862      	ldr	r2, [r4, #4]
 8014d98:	f083 0301 	eor.w	r3, r3, #1
 8014d9c:	7253      	strb	r3, [r2, #9]
 8014d9e:	702e      	strb	r6, [r5, #0]
 8014da0:	f004 fc7e 	bl	80196a0 <_ZN8touchgfx11Application11getInstanceEv>
 8014da4:	6803      	ldr	r3, [r0, #0]
 8014da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014da8:	4798      	blx	r3
 8014daa:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014dae:	b90b      	cbnz	r3, 8014db4 <_ZN8touchgfx3HAL4tickEv+0x6c>
 8014db0:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8014db4:	f004 fc74 	bl	80196a0 <_ZN8touchgfx11Application11getInstanceEv>
 8014db8:	6803      	ldr	r3, [r0, #0]
 8014dba:	695b      	ldr	r3, [r3, #20]
 8014dbc:	4798      	blx	r3
 8014dbe:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014dc0:	6803      	ldr	r3, [r0, #0]
 8014dc2:	691b      	ldr	r3, [r3, #16]
 8014dc4:	4798      	blx	r3
 8014dc6:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014dca:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8014dce:	3b01      	subs	r3, #1
 8014dd0:	b2db      	uxtb	r3, r3
 8014dd2:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014dd6:	b10a      	cbz	r2, 8014ddc <_ZN8touchgfx3HAL4tickEv+0x94>
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d1eb      	bne.n	8014db4 <_ZN8touchgfx3HAL4tickEv+0x6c>
 8014ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8014edc <_ZN8touchgfx3HAL4tickEv+0x194>)
 8014dde:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8014de2:	7813      	ldrb	r3, [r2, #0]
 8014de4:	3301      	adds	r3, #1
 8014de6:	b25b      	sxtb	r3, r3
 8014de8:	4299      	cmp	r1, r3
 8014dea:	7013      	strb	r3, [r2, #0]
 8014dec:	dc10      	bgt.n	8014e10 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8014dee:	2300      	movs	r3, #0
 8014df0:	68e0      	ldr	r0, [r4, #12]
 8014df2:	7013      	strb	r3, [r2, #0]
 8014df4:	6803      	ldr	r3, [r0, #0]
 8014df6:	aa03      	add	r2, sp, #12
 8014df8:	68db      	ldr	r3, [r3, #12]
 8014dfa:	a902      	add	r1, sp, #8
 8014dfc:	4798      	blx	r3
 8014dfe:	6823      	ldr	r3, [r4, #0]
 8014e00:	2800      	cmp	r0, #0
 8014e02:	d059      	beq.n	8014eb8 <_ZN8touchgfx3HAL4tickEv+0x170>
 8014e04:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014e08:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	4798      	blx	r3
 8014e10:	2300      	movs	r3, #0
 8014e12:	6960      	ldr	r0, [r4, #20]
 8014e14:	f88d 3007 	strb.w	r3, [sp, #7]
 8014e18:	b158      	cbz	r0, 8014e32 <_ZN8touchgfx3HAL4tickEv+0xea>
 8014e1a:	6803      	ldr	r3, [r0, #0]
 8014e1c:	f10d 0107 	add.w	r1, sp, #7
 8014e20:	68db      	ldr	r3, [r3, #12]
 8014e22:	4798      	blx	r3
 8014e24:	b128      	cbz	r0, 8014e32 <_ZN8touchgfx3HAL4tickEv+0xea>
 8014e26:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014e28:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014e2c:	6803      	ldr	r3, [r0, #0]
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	4798      	blx	r3
 8014e32:	f104 001c 	add.w	r0, r4, #28
 8014e36:	f016 f8bf 	bl	802afb8 <_ZN8touchgfx8Gestures4tickEv>
 8014e3a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8014e3e:	b30b      	cbz	r3, 8014e84 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8014e40:	6920      	ldr	r0, [r4, #16]
 8014e42:	6803      	ldr	r3, [r0, #0]
 8014e44:	691b      	ldr	r3, [r3, #16]
 8014e46:	4798      	blx	r3
 8014e48:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014e4a:	4606      	mov	r6, r0
 8014e4c:	b903      	cbnz	r3, 8014e50 <_ZN8touchgfx3HAL4tickEv+0x108>
 8014e4e:	6760      	str	r0, [r4, #116]	@ 0x74
 8014e50:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014e52:	4a23      	ldr	r2, [pc, #140]	@ (8014ee0 <_ZN8touchgfx3HAL4tickEv+0x198>)
 8014e54:	1af3      	subs	r3, r6, r3
 8014e56:	4293      	cmp	r3, r2
 8014e58:	d914      	bls.n	8014e84 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8014e5a:	6920      	ldr	r0, [r4, #16]
 8014e5c:	6803      	ldr	r3, [r0, #0]
 8014e5e:	699b      	ldr	r3, [r3, #24]
 8014e60:	4798      	blx	r3
 8014e62:	2264      	movs	r2, #100	@ 0x64
 8014e64:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014e66:	1af3      	subs	r3, r6, r3
 8014e68:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8014e70:	2800      	cmp	r0, #0
 8014e72:	dc26      	bgt.n	8014ec2 <_ZN8touchgfx3HAL4tickEv+0x17a>
 8014e74:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8014e78:	6920      	ldr	r0, [r4, #16]
 8014e7a:	2100      	movs	r1, #0
 8014e7c:	6803      	ldr	r3, [r0, #0]
 8014e7e:	69db      	ldr	r3, [r3, #28]
 8014e80:	4798      	blx	r3
 8014e82:	6766      	str	r6, [r4, #116]	@ 0x74
 8014e84:	6823      	ldr	r3, [r4, #0]
 8014e86:	4620      	mov	r0, r4
 8014e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014e8c:	4798      	blx	r3
 8014e8e:	f004 fc07 	bl	80196a0 <_ZN8touchgfx11Application11getInstanceEv>
 8014e92:	6803      	ldr	r3, [r0, #0]
 8014e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e96:	4798      	blx	r3
 8014e98:	6823      	ldr	r3, [r4, #0]
 8014e9a:	4620      	mov	r0, r4
 8014e9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8014ea0:	4798      	blx	r3
 8014ea2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014ea6:	2b02      	cmp	r3, #2
 8014ea8:	d002      	beq.n	8014eb0 <_ZN8touchgfx3HAL4tickEv+0x168>
 8014eaa:	2001      	movs	r0, #1
 8014eac:	f7fc fb7c 	bl	80115a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	702b      	strb	r3, [r5, #0]
 8014eb4:	b004      	add	sp, #16
 8014eb6:	bd70      	pop	{r4, r5, r6, pc}
 8014eb8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	4798      	blx	r3
 8014ec0:	e7a6      	b.n	8014e10 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8014ec2:	2863      	cmp	r0, #99	@ 0x63
 8014ec4:	bfcb      	itete	gt
 8014ec6:	2300      	movgt	r3, #0
 8014ec8:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8014ecc:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8014ed0:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8014ed4:	e7d0      	b.n	8014e78 <_ZN8touchgfx3HAL4tickEv+0x130>
 8014ed6:	bf00      	nop
 8014ed8:	2005baa8 	.word	0x2005baa8
 8014edc:	2005baa9 	.word	0x2005baa9
 8014ee0:	05f5e100 	.word	0x05f5e100

08014ee4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014ee4:	b510      	push	{r4, lr}
 8014ee6:	4604      	mov	r4, r0
 8014ee8:	f7fc fee4 	bl	8011cb4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8014eec:	2200      	movs	r2, #0
 8014eee:	6863      	ldr	r3, [r4, #4]
 8014ef0:	729a      	strb	r2, [r3, #10]
 8014ef2:	bd10      	pop	{r4, pc}

08014ef4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014ef4:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8014ef6:	301c      	adds	r0, #28
 8014ef8:	f016 b85c 	b.w	802afb4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014efc <_ZN8touchgfx3HAL5touchEll>:
 8014efc:	b530      	push	{r4, r5, lr}
 8014efe:	4604      	mov	r4, r0
 8014f00:	b087      	sub	sp, #28
 8014f02:	a804      	add	r0, sp, #16
 8014f04:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014f08:	f004 f9bc 	bl	8019284 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014f0c:	9b04      	ldr	r3, [sp, #16]
 8014f0e:	a906      	add	r1, sp, #24
 8014f10:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014f14:	9b05      	ldr	r3, [sp, #20]
 8014f16:	a803      	add	r0, sp, #12
 8014f18:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014f1c:	f004 fa04 	bl	8019328 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014f20:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8014f24:	f104 001c 	add.w	r0, r4, #28
 8014f28:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014f2c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014f30:	b189      	cbz	r1, 8014f56 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014f32:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8014f36:	9300      	str	r3, [sp, #0]
 8014f38:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8014f3c:	4613      	mov	r3, r2
 8014f3e:	462a      	mov	r2, r5
 8014f40:	f016 f848 	bl	802afd4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014f44:	b128      	cbz	r0, 8014f52 <_ZN8touchgfx3HAL5touchEll+0x56>
 8014f46:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014f4a:	6623      	str	r3, [r4, #96]	@ 0x60
 8014f4c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014f50:	6663      	str	r3, [r4, #100]	@ 0x64
 8014f52:	b007      	add	sp, #28
 8014f54:	bd30      	pop	{r4, r5, pc}
 8014f56:	f016 f87d 	bl	802b054 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8014f60:	e7f1      	b.n	8014f46 <_ZN8touchgfx3HAL5touchEll+0x4a>

08014f62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8014f62:	b510      	push	{r4, lr}
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d046      	beq.n	8014ff6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014f68:	ea81 0002 	eor.w	r0, r1, r2
 8014f6c:	07c4      	lsls	r4, r0, #31
 8014f6e:	d508      	bpl.n	8014f82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8014f70:	440b      	add	r3, r1
 8014f72:	3a01      	subs	r2, #1
 8014f74:	428b      	cmp	r3, r1
 8014f76:	d93e      	bls.n	8014ff6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014f78:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014f7c:	f801 0b01 	strb.w	r0, [r1], #1
 8014f80:	e7f8      	b.n	8014f74 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8014f82:	07d0      	lsls	r0, r2, #31
 8014f84:	bf42      	ittt	mi
 8014f86:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014f8a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8014f8e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8014f92:	2b01      	cmp	r3, #1
 8014f94:	d911      	bls.n	8014fba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014f96:	ea81 0402 	eor.w	r4, r1, r2
 8014f9a:	07a4      	lsls	r4, r4, #30
 8014f9c:	4610      	mov	r0, r2
 8014f9e:	d022      	beq.n	8014fe6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8014fa0:	f023 0401 	bic.w	r4, r3, #1
 8014fa4:	440c      	add	r4, r1
 8014fa6:	428c      	cmp	r4, r1
 8014fa8:	4602      	mov	r2, r0
 8014faa:	d904      	bls.n	8014fb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8014fac:	8812      	ldrh	r2, [r2, #0]
 8014fae:	3002      	adds	r0, #2
 8014fb0:	f821 2b02 	strh.w	r2, [r1], #2
 8014fb4:	e7f7      	b.n	8014fa6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014fb6:	f003 0301 	and.w	r3, r3, #1
 8014fba:	f023 0003 	bic.w	r0, r3, #3
 8014fbe:	4408      	add	r0, r1
 8014fc0:	4288      	cmp	r0, r1
 8014fc2:	4614      	mov	r4, r2
 8014fc4:	d904      	bls.n	8014fd0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014fc6:	6824      	ldr	r4, [r4, #0]
 8014fc8:	3204      	adds	r2, #4
 8014fca:	f841 4b04 	str.w	r4, [r1], #4
 8014fce:	e7f7      	b.n	8014fc0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014fd0:	f003 0303 	and.w	r3, r3, #3
 8014fd4:	440b      	add	r3, r1
 8014fd6:	3a01      	subs	r2, #1
 8014fd8:	428b      	cmp	r3, r1
 8014fda:	d90c      	bls.n	8014ff6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014fdc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014fe0:	f801 0b01 	strb.w	r0, [r1], #1
 8014fe4:	e7f8      	b.n	8014fd8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014fe6:	0790      	lsls	r0, r2, #30
 8014fe8:	d0e7      	beq.n	8014fba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014fea:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014fee:	3b02      	subs	r3, #2
 8014ff0:	f821 0b02 	strh.w	r0, [r1], #2
 8014ff4:	e7e1      	b.n	8014fba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014ff6:	2001      	movs	r0, #1
 8014ff8:	bd10      	pop	{r4, pc}

08014ffa <_ZN8touchgfx3HAL7noTouchEv>:
 8014ffa:	b510      	push	{r4, lr}
 8014ffc:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8015000:	4604      	mov	r4, r0
 8015002:	b153      	cbz	r3, 801501a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015004:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8015008:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 801500c:	2101      	movs	r1, #1
 801500e:	301c      	adds	r0, #28
 8015010:	f016 f820 	bl	802b054 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015014:	2300      	movs	r3, #0
 8015016:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 801501a:	bd10      	pop	{r4, pc}

0801501c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801501c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015020:	4604      	mov	r4, r0
 8015022:	2000      	movs	r0, #0
 8015024:	b085      	sub	sp, #20
 8015026:	ad04      	add	r5, sp, #16
 8015028:	f845 0d04 	str.w	r0, [r5, #-4]!
 801502c:	69a0      	ldr	r0, [r4, #24]
 801502e:	4699      	mov	r9, r3
 8015030:	6806      	ldr	r6, [r0, #0]
 8015032:	9501      	str	r5, [sp, #4]
 8015034:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8015038:	460f      	mov	r7, r1
 801503a:	9500      	str	r5, [sp, #0]
 801503c:	6835      	ldr	r5, [r6, #0]
 801503e:	4690      	mov	r8, r2
 8015040:	47a8      	blx	r5
 8015042:	4d10      	ldr	r5, [pc, #64]	@ (8015084 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8015044:	4606      	mov	r6, r0
 8015046:	f8a5 9000 	strh.w	r9, [r5]
 801504a:	f7fa fcfd 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 801504e:	6803      	ldr	r3, [r0, #0]
 8015050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015052:	4798      	blx	r3
 8015054:	b128      	cbz	r0, 8015062 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8015056:	2801      	cmp	r0, #1
 8015058:	d00b      	beq.n	8015072 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801505a:	4630      	mov	r0, r6
 801505c:	b005      	add	sp, #20
 801505e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015062:	882b      	ldrh	r3, [r5, #0]
 8015064:	fb08 7203 	mla	r2, r8, r3, r7
 8015068:	9b03      	ldr	r3, [sp, #12]
 801506a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801506e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8015070:	e7f3      	b.n	801505a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015072:	882a      	ldrh	r2, [r5, #0]
 8015074:	9b03      	ldr	r3, [sp, #12]
 8015076:	fb08 7202 	mla	r2, r8, r2, r7
 801507a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801507e:	1a9a      	subs	r2, r3, r2
 8015080:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8015082:	e7ea      	b.n	801505a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015084:	2005ba9e 	.word	0x2005ba9e

08015088 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 8015088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801508a:	4b15      	ldr	r3, [pc, #84]	@ (80150e0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 801508c:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 8015090:	881b      	ldrh	r3, [r3, #0]
 8015092:	460f      	mov	r7, r1
 8015094:	fb93 f4f4 	sdiv	r4, r3, r4
 8015098:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 801509a:	4606      	mov	r6, r0
 801509c:	f7fa fcd4 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 80150a0:	6803      	ldr	r3, [r0, #0]
 80150a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150a4:	4798      	blx	r3
 80150a6:	2801      	cmp	r0, #1
 80150a8:	d00b      	beq.n	80150c2 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 80150aa:	d303      	bcc.n	80150b4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 80150ac:	2802      	cmp	r0, #2
 80150ae:	d010      	beq.n	80150d2 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 80150b0:	63f5      	str	r5, [r6, #60]	@ 0x3c
 80150b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150b4:	437c      	muls	r4, r7
 80150b6:	4b0b      	ldr	r3, [pc, #44]	@ (80150e4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 80150b8:	8819      	ldrh	r1, [r3, #0]
 80150ba:	434c      	muls	r4, r1
 80150bc:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 80150c0:	e7f6      	b.n	80150b0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 80150c2:	437c      	muls	r4, r7
 80150c4:	4b07      	ldr	r3, [pc, #28]	@ (80150e4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 80150c6:	8819      	ldrh	r1, [r3, #0]
 80150c8:	434c      	muls	r4, r1
 80150ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80150ce:	1b2d      	subs	r5, r5, r4
 80150d0:	e7ee      	b.n	80150b0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 80150d2:	437c      	muls	r4, r7
 80150d4:	4b03      	ldr	r3, [pc, #12]	@ (80150e4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 80150d6:	8819      	ldrh	r1, [r3, #0]
 80150d8:	434c      	muls	r4, r1
 80150da:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 80150de:	e7e7      	b.n	80150b0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 80150e0:	2005baa0 	.word	0x2005baa0
 80150e4:	2005ba9e 	.word	0x2005ba9e

080150e8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80150e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150ea:	b08b      	sub	sp, #44	@ 0x2c
 80150ec:	4617      	mov	r7, r2
 80150ee:	4604      	mov	r4, r0
 80150f0:	460e      	mov	r6, r1
 80150f2:	461d      	mov	r5, r3
 80150f4:	f7fa fca8 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 80150f8:	6803      	ldr	r3, [r0, #0]
 80150fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150fc:	4798      	blx	r3
 80150fe:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8015102:	9007      	str	r0, [sp, #28]
 8015104:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015108:	4b0d      	ldr	r3, [pc, #52]	@ (8015140 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801510a:	6822      	ldr	r2, [r4, #0]
 801510c:	881b      	ldrh	r3, [r3, #0]
 801510e:	4631      	mov	r1, r6
 8015110:	9306      	str	r3, [sp, #24]
 8015112:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015116:	4620      	mov	r0, r4
 8015118:	9305      	str	r3, [sp, #20]
 801511a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 801511e:	9304      	str	r3, [sp, #16]
 8015120:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015124:	9303      	str	r3, [sp, #12]
 8015126:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801512a:	9302      	str	r3, [sp, #8]
 801512c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015130:	e9cd 5300 	strd	r5, r3, [sp]
 8015134:	463b      	mov	r3, r7
 8015136:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015138:	2200      	movs	r2, #0
 801513a:	47a8      	blx	r5
 801513c:	b00b      	add	sp, #44	@ 0x2c
 801513e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015140:	2005ba9e 	.word	0x2005ba9e

08015144 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8015144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015148:	4698      	mov	r8, r3
 801514a:	6803      	ldr	r3, [r0, #0]
 801514c:	b08b      	sub	sp, #44	@ 0x2c
 801514e:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8015150:	4b14      	ldr	r3, [pc, #80]	@ (80151a4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8015152:	4617      	mov	r7, r2
 8015154:	f8b3 9000 	ldrh.w	r9, [r3]
 8015158:	460e      	mov	r6, r1
 801515a:	4604      	mov	r4, r0
 801515c:	f7fa fc74 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 8015160:	6803      	ldr	r3, [r0, #0]
 8015162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015164:	4798      	blx	r3
 8015166:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801516a:	2200      	movs	r2, #0
 801516c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015170:	2302      	movs	r3, #2
 8015172:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8015176:	2301      	movs	r3, #1
 8015178:	9305      	str	r3, [sp, #20]
 801517a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801517e:	4631      	mov	r1, r6
 8015180:	9304      	str	r3, [sp, #16]
 8015182:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8015186:	4620      	mov	r0, r4
 8015188:	9303      	str	r3, [sp, #12]
 801518a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801518e:	9302      	str	r3, [sp, #8]
 8015190:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015194:	e9cd 8300 	strd	r8, r3, [sp]
 8015198:	463b      	mov	r3, r7
 801519a:	47a8      	blx	r5
 801519c:	b00b      	add	sp, #44	@ 0x2c
 801519e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151a2:	bf00      	nop
 80151a4:	2005ba9e 	.word	0x2005ba9e

080151a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80151a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151ac:	4698      	mov	r8, r3
 80151ae:	6803      	ldr	r3, [r0, #0]
 80151b0:	b087      	sub	sp, #28
 80151b2:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 80151b4:	4b10      	ldr	r3, [pc, #64]	@ (80151f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80151b6:	460e      	mov	r6, r1
 80151b8:	f8b3 9000 	ldrh.w	r9, [r3]
 80151bc:	4617      	mov	r7, r2
 80151be:	4604      	mov	r4, r0
 80151c0:	f7fa fc42 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 80151c4:	6803      	ldr	r3, [r0, #0]
 80151c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151c8:	4798      	blx	r3
 80151ca:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 80151ce:	f8cd 900c 	str.w	r9, [sp, #12]
 80151d2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80151d6:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 80151da:	463a      	mov	r2, r7
 80151dc:	9302      	str	r3, [sp, #8]
 80151de:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80151e2:	4631      	mov	r1, r6
 80151e4:	9301      	str	r3, [sp, #4]
 80151e6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80151ea:	4620      	mov	r0, r4
 80151ec:	9300      	str	r3, [sp, #0]
 80151ee:	4643      	mov	r3, r8
 80151f0:	47a8      	blx	r5
 80151f2:	b007      	add	sp, #28
 80151f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151f8:	2005ba9e 	.word	0x2005ba9e

080151fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80151fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015200:	4604      	mov	r4, r0
 8015202:	b08f      	sub	sp, #60	@ 0x3c
 8015204:	4610      	mov	r0, r2
 8015206:	460d      	mov	r5, r1
 8015208:	4691      	mov	r9, r2
 801520a:	461e      	mov	r6, r3
 801520c:	f007 fbec 	bl	801c9e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015210:	2800      	cmp	r0, #0
 8015212:	f000 809d 	beq.w	8015350 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8015216:	6823      	ldr	r3, [r4, #0]
 8015218:	4620      	mov	r0, r4
 801521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801521c:	4798      	blx	r3
 801521e:	6823      	ldr	r3, [r4, #0]
 8015220:	f8df b190 	ldr.w	fp, [pc, #400]	@ 80153b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8015224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015226:	4620      	mov	r0, r4
 8015228:	4798      	blx	r3
 801522a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80153b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801522e:	f8bb 3000 	ldrh.w	r3, [fp]
 8015232:	4f5d      	ldr	r7, [pc, #372]	@ (80153a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015234:	9301      	str	r3, [sp, #4]
 8015236:	f8ba 3000 	ldrh.w	r3, [sl]
 801523a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 801523e:	9302      	str	r3, [sp, #8]
 8015240:	883b      	ldrh	r3, [r7, #0]
 8015242:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8015246:	9303      	str	r3, [sp, #12]
 8015248:	4b58      	ldr	r3, [pc, #352]	@ (80153ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801524a:	4640      	mov	r0, r8
 801524c:	881a      	ldrh	r2, [r3, #0]
 801524e:	9305      	str	r3, [sp, #20]
 8015250:	9204      	str	r2, [sp, #16]
 8015252:	f007 fc5d 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015256:	8038      	strh	r0, [r7, #0]
 8015258:	4640      	mov	r0, r8
 801525a:	f007 fc8d 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801525e:	9b05      	ldr	r3, [sp, #20]
 8015260:	b280      	uxth	r0, r0
 8015262:	8018      	strh	r0, [r3, #0]
 8015264:	4b52      	ldr	r3, [pc, #328]	@ (80153b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8015266:	781b      	ldrb	r3, [r3, #0]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d174      	bne.n	8015356 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801526c:	883b      	ldrh	r3, [r7, #0]
 801526e:	f8aa 0000 	strh.w	r0, [sl]
 8015272:	f8ab 3000 	strh.w	r3, [fp]
 8015276:	4648      	mov	r0, r9
 8015278:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 801527c:	f007 fbb4 	bl	801c9e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015280:	2200      	movs	r2, #0
 8015282:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8015286:	4611      	mov	r1, r2
 8015288:	4628      	mov	r0, r5
 801528a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801528e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8015292:	f7fb f92e 	bl	80104f2 <_ZN8touchgfx8Drawable5setXYEss>
 8015296:	2301      	movs	r3, #1
 8015298:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 801529c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80152a0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	dd5c      	ble.n	8015362 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80152a8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	dd58      	ble.n	8015362 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80152b0:	462a      	mov	r2, r5
 80152b2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80152b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80152b8:	6851      	ldr	r1, [r2, #4]
 80152ba:	c303      	stmia	r3!, {r0, r1}
 80152bc:	4631      	mov	r1, r6
 80152be:	a80a      	add	r0, sp, #40	@ 0x28
 80152c0:	f7fe feca 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 80152c4:	2100      	movs	r1, #0
 80152c6:	4b38      	ldr	r3, [pc, #224]	@ (80153a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80152c8:	910c      	str	r1, [sp, #48]	@ 0x30
 80152ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80152ce:	4b37      	ldr	r3, [pc, #220]	@ (80153ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80152d0:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80152d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152d8:	aa0a      	add	r2, sp, #40	@ 0x28
 80152da:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80152de:	ab08      	add	r3, sp, #32
 80152e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80152e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80152e8:	4618      	mov	r0, r3
 80152ea:	a90c      	add	r1, sp, #48	@ 0x30
 80152ec:	f7fe feb4 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 80152f0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d13c      	bne.n	8015370 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80152f6:	2000      	movs	r0, #0
 80152f8:	2600      	movs	r6, #0
 80152fa:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 80152fe:	696b      	ldr	r3, [r5, #20]
 8015300:	682a      	ldr	r2, [r5, #0]
 8015302:	616e      	str	r6, [r5, #20]
 8015304:	9305      	str	r3, [sp, #20]
 8015306:	6892      	ldr	r2, [r2, #8]
 8015308:	a908      	add	r1, sp, #32
 801530a:	4628      	mov	r0, r5
 801530c:	4790      	blx	r2
 801530e:	9b05      	ldr	r3, [sp, #20]
 8015310:	4652      	mov	r2, sl
 8015312:	616b      	str	r3, [r5, #20]
 8015314:	4649      	mov	r1, r9
 8015316:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 801531a:	4628      	mov	r0, r5
 801531c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8015320:	f7fb f8e7 	bl	80104f2 <_ZN8touchgfx8Drawable5setXYEss>
 8015324:	9a01      	ldr	r2, [sp, #4]
 8015326:	4b23      	ldr	r3, [pc, #140]	@ (80153b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8015328:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 801532c:	801a      	strh	r2, [r3, #0]
 801532e:	9a02      	ldr	r2, [sp, #8]
 8015330:	4b21      	ldr	r3, [pc, #132]	@ (80153b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8015332:	4620      	mov	r0, r4
 8015334:	801a      	strh	r2, [r3, #0]
 8015336:	9a03      	ldr	r2, [sp, #12]
 8015338:	4b1b      	ldr	r3, [pc, #108]	@ (80153a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801533a:	801a      	strh	r2, [r3, #0]
 801533c:	4b1b      	ldr	r3, [pc, #108]	@ (80153ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801533e:	9a04      	ldr	r2, [sp, #16]
 8015340:	801a      	strh	r2, [r3, #0]
 8015342:	6823      	ldr	r3, [r4, #0]
 8015344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015346:	4798      	blx	r3
 8015348:	6823      	ldr	r3, [r4, #0]
 801534a:	4620      	mov	r0, r4
 801534c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801534e:	4798      	blx	r3
 8015350:	b00f      	add	sp, #60	@ 0x3c
 8015352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015356:	883b      	ldrh	r3, [r7, #0]
 8015358:	f8ab 0000 	strh.w	r0, [fp]
 801535c:	f8aa 3000 	strh.w	r3, [sl]
 8015360:	e789      	b.n	8015276 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8015362:	462a      	mov	r2, r5
 8015364:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015368:	ab0a      	add	r3, sp, #40	@ 0x28
 801536a:	6851      	ldr	r1, [r2, #4]
 801536c:	c303      	stmia	r3!, {r0, r1}
 801536e:	e7a9      	b.n	80152c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8015370:	a807      	add	r0, sp, #28
 8015372:	f007 fd43 	bl	801cdfc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015376:	4606      	mov	r6, r0
 8015378:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801537a:	6803      	ldr	r3, [r0, #0]
 801537c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801537e:	4798      	blx	r3
 8015380:	4286      	cmp	r6, r0
 8015382:	d1b8      	bne.n	80152f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8015384:	f7fa fb60 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 8015388:	6803      	ldr	r3, [r0, #0]
 801538a:	4606      	mov	r6, r0
 801538c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801538e:	a807      	add	r0, sp, #28
 8015390:	9305      	str	r3, [sp, #20]
 8015392:	f007 fd33 	bl	801cdfc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015396:	9b05      	ldr	r3, [sp, #20]
 8015398:	4601      	mov	r1, r0
 801539a:	4630      	mov	r0, r6
 801539c:	4798      	blx	r3
 801539e:	f080 0001 	eor.w	r0, r0, #1
 80153a2:	b2c0      	uxtb	r0, r0
 80153a4:	e7a8      	b.n	80152f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80153a6:	bf00      	nop
 80153a8:	2005ba98 	.word	0x2005ba98
 80153ac:	2005ba9a 	.word	0x2005ba9a
 80153b0:	2005ba9c 	.word	0x2005ba9c
 80153b4:	2005ba9e 	.word	0x2005ba9e
 80153b8:	2005baa0 	.word	0x2005baa0

080153bc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80153bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153c0:	461d      	mov	r5, r3
 80153c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80153c6:	2400      	movs	r4, #0
 80153c8:	b08a      	sub	sp, #40	@ 0x28
 80153ca:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80153ce:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80153d2:	4690      	mov	r8, r2
 80153d4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80153d8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80153dc:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 80153e0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80153e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80153e8:	4607      	mov	r7, r0
 80153ea:	f8ad 301c 	strh.w	r3, [sp, #28]
 80153ee:	9404      	str	r4, [sp, #16]
 80153f0:	f88d 4020 	strb.w	r4, [sp, #32]
 80153f4:	f7fc fa50 	bl	8011898 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80153f8:	fb06 8505 	mla	r5, r6, r5, r8
 80153fc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	9505      	str	r5, [sp, #20]
 8015404:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015408:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801540c:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8015410:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8015414:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8015418:	6803      	ldr	r3, [r0, #0]
 801541a:	a901      	add	r1, sp, #4
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	4798      	blx	r3
 8015420:	b00a      	add	sp, #40	@ 0x28
 8015422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015426 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8015426:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801542a:	2400      	movs	r4, #0
 801542c:	461d      	mov	r5, r3
 801542e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015432:	4691      	mov	r9, r2
 8015434:	b08b      	sub	sp, #44	@ 0x2c
 8015436:	4688      	mov	r8, r1
 8015438:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801543c:	4607      	mov	r7, r0
 801543e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015442:	9404      	str	r4, [sp, #16]
 8015444:	f7fc fa28 	bl	8011898 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015448:	fb06 9505 	mla	r5, r6, r5, r9
 801544c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015450:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015454:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015458:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801545c:	6878      	ldr	r0, [r7, #4]
 801545e:	9505      	str	r5, [sp, #20]
 8015460:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015464:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015468:	f8ad 601e 	strh.w	r6, [sp, #30]
 801546c:	f8cd 8010 	str.w	r8, [sp, #16]
 8015470:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015474:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015478:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801547c:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8015480:	6803      	ldr	r3, [r0, #0]
 8015482:	a901      	add	r1, sp, #4
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	4798      	blx	r3
 8015488:	b00b      	add	sp, #44	@ 0x2c
 801548a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015490 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8015490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015494:	4698      	mov	r8, r3
 8015496:	2300      	movs	r3, #0
 8015498:	b08a      	sub	sp, #40	@ 0x28
 801549a:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801549e:	4606      	mov	r6, r0
 80154a0:	2d0b      	cmp	r5, #11
 80154a2:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80154a6:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80154aa:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80154ae:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80154b2:	9304      	str	r3, [sp, #16]
 80154b4:	d137      	bne.n	8015526 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80154b6:	2380      	movs	r3, #128	@ 0x80
 80154b8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80154bc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80154c0:	f88d 0020 	strb.w	r0, [sp, #32]
 80154c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80154c8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80154cc:	4630      	mov	r0, r6
 80154ce:	f8ad 301a 	strh.w	r3, [sp, #26]
 80154d2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80154d6:	9203      	str	r2, [sp, #12]
 80154d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80154dc:	f7fc f9dc 	bl	8011898 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80154e0:	2c0b      	cmp	r4, #11
 80154e2:	bf8c      	ite	hi
 80154e4:	2100      	movhi	r1, #0
 80154e6:	4b1b      	ldrls	r3, [pc, #108]	@ (8015554 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80154e8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80154ec:	bf98      	it	ls
 80154ee:	5d19      	ldrbls	r1, [r3, r4]
 80154f0:	fb02 8307 	mla	r3, r2, r7, r8
 80154f4:	10c9      	asrs	r1, r1, #3
 80154f6:	fb01 0003 	mla	r0, r1, r3, r0
 80154fa:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80154fe:	9005      	str	r0, [sp, #20]
 8015500:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8015504:	2300      	movs	r3, #0
 8015506:	6870      	ldr	r0, [r6, #4]
 8015508:	f8ad 701e 	strh.w	r7, [sp, #30]
 801550c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8015510:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015514:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015518:	6803      	ldr	r3, [r0, #0]
 801551a:	a901      	add	r1, sp, #4
 801551c:	685b      	ldr	r3, [r3, #4]
 801551e:	4798      	blx	r3
 8015520:	b00a      	add	sp, #40	@ 0x28
 8015522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015526:	2d02      	cmp	r5, #2
 8015528:	d109      	bne.n	801553e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801552a:	28ff      	cmp	r0, #255	@ 0xff
 801552c:	d105      	bne.n	801553a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801552e:	f1bc 0f00 	cmp.w	ip, #0
 8015532:	bf14      	ite	ne
 8015534:	2340      	movne	r3, #64	@ 0x40
 8015536:	2320      	moveq	r3, #32
 8015538:	e7be      	b.n	80154b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801553a:	2340      	movs	r3, #64	@ 0x40
 801553c:	e7bc      	b.n	80154b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801553e:	28ff      	cmp	r0, #255	@ 0xff
 8015540:	d105      	bne.n	801554e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8015542:	f1bc 0f00 	cmp.w	ip, #0
 8015546:	bf14      	ite	ne
 8015548:	2304      	movne	r3, #4
 801554a:	2301      	moveq	r3, #1
 801554c:	e7b4      	b.n	80154b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801554e:	2304      	movs	r3, #4
 8015550:	e7b2      	b.n	80154b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015552:	bf00      	nop
 8015554:	0802f4bc 	.word	0x0802f4bc

08015558 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8015558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801555c:	b08b      	sub	sp, #44	@ 0x2c
 801555e:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8015562:	461d      	mov	r5, r3
 8015564:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8015568:	bf14      	ite	ne
 801556a:	2308      	movne	r3, #8
 801556c:	2302      	moveq	r3, #2
 801556e:	2400      	movs	r4, #0
 8015570:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8015574:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015578:	4688      	mov	r8, r1
 801557a:	4693      	mov	fp, r2
 801557c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8015580:	9404      	str	r4, [sp, #16]
 8015582:	4607      	mov	r7, r0
 8015584:	f7fc f988 	bl	8011898 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015588:	2e0b      	cmp	r6, #11
 801558a:	bf98      	it	ls
 801558c:	4b15      	ldrls	r3, [pc, #84]	@ (80155e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801558e:	fb05 b50a 	mla	r5, r5, sl, fp
 8015592:	bf98      	it	ls
 8015594:	5d9c      	ldrbls	r4, [r3, r6]
 8015596:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801559a:	10e4      	asrs	r4, r4, #3
 801559c:	f8ad 3018 	strh.w	r3, [sp, #24]
 80155a0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80155a4:	fb04 0405 	mla	r4, r4, r5, r0
 80155a8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80155ac:	2300      	movs	r3, #0
 80155ae:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80155b2:	6878      	ldr	r0, [r7, #4]
 80155b4:	9405      	str	r4, [sp, #20]
 80155b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80155ba:	f8ad a01e 	strh.w	sl, [sp, #30]
 80155be:	f8cd 8010 	str.w	r8, [sp, #16]
 80155c2:	f88d 9020 	strb.w	r9, [sp, #32]
 80155c6:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80155ca:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80155ce:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 80155d2:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80155d6:	6803      	ldr	r3, [r0, #0]
 80155d8:	a901      	add	r1, sp, #4
 80155da:	685b      	ldr	r3, [r3, #4]
 80155dc:	4798      	blx	r3
 80155de:	b00b      	add	sp, #44	@ 0x2c
 80155e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155e4:	0802f4bc 	.word	0x0802f4bc

080155e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80155e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155ec:	461e      	mov	r6, r3
 80155ee:	4b0a      	ldr	r3, [pc, #40]	@ (8015618 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80155f0:	460f      	mov	r7, r1
 80155f2:	881d      	ldrh	r5, [r3, #0]
 80155f4:	4690      	mov	r8, r2
 80155f6:	f7fa fa27 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 80155fa:	6803      	ldr	r3, [r0, #0]
 80155fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155fe:	4798      	blx	r3
 8015600:	280b      	cmp	r0, #11
 8015602:	bf8e      	itee	hi
 8015604:	2400      	movhi	r4, #0
 8015606:	4b05      	ldrls	r3, [pc, #20]	@ (801561c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015608:	5c1c      	ldrbls	r4, [r3, r0]
 801560a:	fb08 7005 	mla	r0, r8, r5, r7
 801560e:	10e4      	asrs	r4, r4, #3
 8015610:	fb04 6000 	mla	r0, r4, r0, r6
 8015614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015618:	2005ba9e 	.word	0x2005ba9e
 801561c:	0802f4bc 	.word	0x0802f4bc

08015620 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8015620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015622:	2500      	movs	r5, #0
 8015624:	b08b      	sub	sp, #44	@ 0x2c
 8015626:	461f      	mov	r7, r3
 8015628:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801562c:	4604      	mov	r4, r0
 801562e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015632:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015636:	4616      	mov	r6, r2
 8015638:	f8ad 3018 	strh.w	r3, [sp, #24]
 801563c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015640:	9504      	str	r5, [sp, #16]
 8015642:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015646:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801564a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801564e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015652:	f88d 3020 	strb.w	r3, [sp, #32]
 8015656:	f7fc f91f 	bl	8011898 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801565a:	463a      	mov	r2, r7
 801565c:	4631      	mov	r1, r6
 801565e:	4603      	mov	r3, r0
 8015660:	4620      	mov	r0, r4
 8015662:	f7ff ffc1 	bl	80155e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015666:	4b0e      	ldr	r3, [pc, #56]	@ (80156a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8015668:	9005      	str	r0, [sp, #20]
 801566a:	881b      	ldrh	r3, [r3, #0]
 801566c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015670:	f7fa f9ea 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 8015674:	6803      	ldr	r3, [r0, #0]
 8015676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015678:	4798      	blx	r3
 801567a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801567c:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8015680:	9304      	str	r3, [sp, #16]
 8015682:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8015686:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801568a:	6860      	ldr	r0, [r4, #4]
 801568c:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8015690:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8015694:	6803      	ldr	r3, [r0, #0]
 8015696:	a901      	add	r1, sp, #4
 8015698:	685b      	ldr	r3, [r3, #4]
 801569a:	4798      	blx	r3
 801569c:	b00b      	add	sp, #44	@ 0x2c
 801569e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156a0:	2005ba9e 	.word	0x2005ba9e

080156a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80156a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156a6:	b08d      	sub	sp, #52	@ 0x34
 80156a8:	466b      	mov	r3, sp
 80156aa:	e883 0006 	stmia.w	r3, {r1, r2}
 80156ae:	2300      	movs	r3, #0
 80156b0:	2501      	movs	r5, #1
 80156b2:	9306      	str	r3, [sp, #24]
 80156b4:	6803      	ldr	r3, [r0, #0]
 80156b6:	9503      	str	r5, [sp, #12]
 80156b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156ba:	4604      	mov	r4, r0
 80156bc:	f8bd 6000 	ldrh.w	r6, [sp]
 80156c0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80156c4:	4798      	blx	r3
 80156c6:	463a      	mov	r2, r7
 80156c8:	4631      	mov	r1, r6
 80156ca:	4603      	mov	r3, r0
 80156cc:	4620      	mov	r0, r4
 80156ce:	f7ff ff8b 	bl	80155e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80156d2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80156d4:	9004      	str	r0, [sp, #16]
 80156d6:	9307      	str	r3, [sp, #28]
 80156d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80156dc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80156e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80156e4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80156e8:	4b0e      	ldr	r3, [pc, #56]	@ (8015724 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80156ea:	881b      	ldrh	r3, [r3, #0]
 80156ec:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80156f0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80156f4:	f7fa f9a8 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 80156f8:	6803      	ldr	r3, [r0, #0]
 80156fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156fc:	4798      	blx	r3
 80156fe:	23ff      	movs	r3, #255	@ 0xff
 8015700:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015704:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015708:	6860      	ldr	r0, [r4, #4]
 801570a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801570e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015712:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8015716:	6803      	ldr	r3, [r0, #0]
 8015718:	a903      	add	r1, sp, #12
 801571a:	685b      	ldr	r3, [r3, #4]
 801571c:	4798      	blx	r3
 801571e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8015720:	b00d      	add	sp, #52	@ 0x34
 8015722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015724:	2005ba9e 	.word	0x2005ba9e

08015728 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801572c:	b08c      	sub	sp, #48	@ 0x30
 801572e:	466d      	mov	r5, sp
 8015730:	461e      	mov	r6, r3
 8015732:	2300      	movs	r3, #0
 8015734:	e885 0006 	stmia.w	r5, {r1, r2}
 8015738:	2501      	movs	r5, #1
 801573a:	9306      	str	r3, [sp, #24]
 801573c:	6803      	ldr	r3, [r0, #0]
 801573e:	9503      	str	r5, [sp, #12]
 8015740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015742:	4604      	mov	r4, r0
 8015744:	f8bd 7000 	ldrh.w	r7, [sp]
 8015748:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801574c:	4798      	blx	r3
 801574e:	4642      	mov	r2, r8
 8015750:	4639      	mov	r1, r7
 8015752:	4603      	mov	r3, r0
 8015754:	4620      	mov	r0, r4
 8015756:	f7ff ff47 	bl	80155e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801575a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801575e:	9004      	str	r0, [sp, #16]
 8015760:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015764:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015768:	9607      	str	r6, [sp, #28]
 801576a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801576e:	4b10      	ldr	r3, [pc, #64]	@ (80157b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8015770:	881b      	ldrh	r3, [r3, #0]
 8015772:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015776:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015778:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801577c:	f7fa f964 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 8015780:	6803      	ldr	r3, [r0, #0]
 8015782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015784:	4798      	blx	r3
 8015786:	23ff      	movs	r3, #255	@ 0xff
 8015788:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 801578c:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015790:	6860      	ldr	r0, [r4, #4]
 8015792:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8015796:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801579a:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801579e:	6803      	ldr	r3, [r0, #0]
 80157a0:	a903      	add	r1, sp, #12
 80157a2:	685b      	ldr	r3, [r3, #4]
 80157a4:	4798      	blx	r3
 80157a6:	4630      	mov	r0, r6
 80157a8:	b00c      	add	sp, #48	@ 0x30
 80157aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ae:	bf00      	nop
 80157b0:	2005ba9e 	.word	0x2005ba9e

080157b4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80157b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157b6:	b085      	sub	sp, #20
 80157b8:	ac02      	add	r4, sp, #8
 80157ba:	e884 0006 	stmia.w	r4, {r1, r2}
 80157be:	4605      	mov	r5, r0
 80157c0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80157c4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80157c8:	f7fc f866 	bl	8011898 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80157cc:	463a      	mov	r2, r7
 80157ce:	4603      	mov	r3, r0
 80157d0:	4631      	mov	r1, r6
 80157d2:	4628      	mov	r0, r5
 80157d4:	f7ff ff08 	bl	80155e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80157d8:	4a05      	ldr	r2, [pc, #20]	@ (80157f0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80157da:	682b      	ldr	r3, [r5, #0]
 80157dc:	8812      	ldrh	r2, [r2, #0]
 80157de:	9200      	str	r2, [sp, #0]
 80157e0:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 80157e2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80157e6:	4603      	mov	r3, r0
 80157e8:	4628      	mov	r0, r5
 80157ea:	47b0      	blx	r6
 80157ec:	b005      	add	sp, #20
 80157ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157f0:	2005ba9e 	.word	0x2005ba9e

080157f4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80157f4:	b570      	push	{r4, r5, r6, lr}
 80157f6:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 80157fa:	4604      	mov	r4, r0
 80157fc:	b19b      	cbz	r3, 8015826 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80157fe:	2002      	movs	r0, #2
 8015800:	f7fb feee 	bl	80115e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015804:	2300      	movs	r3, #0
 8015806:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 801580a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 801580e:	6823      	ldr	r3, [r4, #0]
 8015810:	4620      	mov	r0, r4
 8015812:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 8015816:	f7fc f83f 	bl	8011898 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801581a:	462b      	mov	r3, r5
 801581c:	4601      	mov	r1, r0
 801581e:	4620      	mov	r0, r4
 8015820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015824:	4718      	bx	r3
 8015826:	bd70      	pop	{r4, r5, r6, pc}

08015828 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8015828:	b538      	push	{r3, r4, r5, lr}
 801582a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 801582e:	4604      	mov	r4, r0
 8015830:	428b      	cmp	r3, r1
 8015832:	460d      	mov	r5, r1
 8015834:	d006      	beq.n	8015844 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8015836:	6803      	ldr	r3, [r0, #0]
 8015838:	b929      	cbnz	r1, 8015846 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801583a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801583e:	4798      	blx	r3
 8015840:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8015844:	bd38      	pop	{r3, r4, r5, pc}
 8015846:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801584a:	e7f8      	b.n	801583e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801584c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801584c:	b510      	push	{r4, lr}
 801584e:	4b0c      	ldr	r3, [pc, #48]	@ (8015880 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 8015850:	4604      	mov	r4, r0
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	b953      	cbnz	r3, 801586c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8015856:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801585a:	b93b      	cbnz	r3, 801586c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 801585c:	6840      	ldr	r0, [r0, #4]
 801585e:	f000 f927 	bl	8015ab0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015862:	b118      	cbz	r0, 801586c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8015864:	6862      	ldr	r2, [r4, #4]
 8015866:	7a53      	ldrb	r3, [r2, #9]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d0fc      	beq.n	8015866 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 801586c:	f7fc fa14 	bl	8011c98 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015870:	4620      	mov	r0, r4
 8015872:	2100      	movs	r1, #0
 8015874:	f7ff ffd8 	bl	8015828 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015878:	4620      	mov	r0, r4
 801587a:	f7fc f80d 	bl	8011898 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801587e:	bd10      	pop	{r4, pc}
 8015880:	2005baa2 	.word	0x2005baa2

08015884 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8015884:	b570      	push	{r4, r5, r6, lr}
 8015886:	4604      	mov	r4, r0
 8015888:	6803      	ldr	r3, [r0, #0]
 801588a:	b919      	cbnz	r1, 8015894 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 801588c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015892:	4718      	bx	r3
 8015894:	2200      	movs	r2, #0
 8015896:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 801589a:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 801589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158a0:	4798      	blx	r3
 80158a2:	2101      	movs	r1, #1
 80158a4:	4605      	mov	r5, r0
 80158a6:	6863      	ldr	r3, [r4, #4]
 80158a8:	4620      	mov	r0, r4
 80158aa:	7299      	strb	r1, [r3, #10]
 80158ac:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 80158b0:	f7ff ffba 	bl	8015828 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80158b4:	4628      	mov	r0, r5
 80158b6:	bd70      	pop	{r4, r5, r6, pc}

080158b8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80158b8:	4770      	bx	lr

080158ba <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80158ba:	2000      	movs	r0, #0
 80158bc:	4770      	bx	lr

080158be <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80158be:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80158c2:	1a13      	subs	r3, r2, r0
 80158c4:	4258      	negs	r0, r3
 80158c6:	4158      	adcs	r0, r3
 80158c8:	4770      	bx	lr

080158ca <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80158ca:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80158ce:	1a9b      	subs	r3, r3, r2
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	bfdc      	itt	le
 80158d4:	6882      	ldrle	r2, [r0, #8]
 80158d6:	189b      	addle	r3, r3, r2
 80158d8:	2b01      	cmp	r3, #1
 80158da:	bfcc      	ite	gt
 80158dc:	2000      	movgt	r0, #0
 80158de:	2001      	movle	r0, #1
 80158e0:	4770      	bx	lr

080158e2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80158e2:	6902      	ldr	r2, [r0, #16]
 80158e4:	6843      	ldr	r3, [r0, #4]
 80158e6:	2024      	movs	r0, #36	@ 0x24
 80158e8:	fb00 3002 	mla	r0, r0, r2, r3
 80158ec:	4770      	bx	lr

080158ee <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80158ee:	6803      	ldr	r3, [r0, #0]
 80158f0:	691b      	ldr	r3, [r3, #16]
 80158f2:	4718      	bx	r3

080158f4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80158f4:	2301      	movs	r3, #1
 80158f6:	b570      	push	{r4, r5, r6, lr}
 80158f8:	7203      	strb	r3, [r0, #8]
 80158fa:	4604      	mov	r4, r0
 80158fc:	6840      	ldr	r0, [r0, #4]
 80158fe:	6803      	ldr	r3, [r0, #0]
 8015900:	699b      	ldr	r3, [r3, #24]
 8015902:	4798      	blx	r3
 8015904:	6803      	ldr	r3, [r0, #0]
 8015906:	4605      	mov	r5, r0
 8015908:	2b40      	cmp	r3, #64	@ 0x40
 801590a:	d00c      	beq.n	8015926 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801590c:	d810      	bhi.n	8015930 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801590e:	2b04      	cmp	r3, #4
 8015910:	d01d      	beq.n	801594e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8015912:	d804      	bhi.n	801591e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8015914:	2b01      	cmp	r3, #1
 8015916:	d006      	beq.n	8015926 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015918:	2b02      	cmp	r3, #2
 801591a:	d02c      	beq.n	8015976 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801591c:	bd70      	pop	{r4, r5, r6, pc}
 801591e:	2b08      	cmp	r3, #8
 8015920:	d01d      	beq.n	801595e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8015922:	2b20      	cmp	r3, #32
 8015924:	d1fa      	bne.n	801591c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8015926:	6823      	ldr	r3, [r4, #0]
 8015928:	4620      	mov	r0, r4
 801592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801592c:	4798      	blx	r3
 801592e:	e013      	b.n	8015958 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015934:	d0f7      	beq.n	8015926 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015936:	d804      	bhi.n	8015942 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8015938:	2b80      	cmp	r3, #128	@ 0x80
 801593a:	d0f4      	beq.n	8015926 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801593c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015940:	e7f0      	b.n	8015924 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8015942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015946:	d0ee      	beq.n	8015926 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801594c:	e7e5      	b.n	801591a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801594e:	6823      	ldr	r3, [r4, #0]
 8015950:	7f01      	ldrb	r1, [r0, #28]
 8015952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015954:	4620      	mov	r0, r4
 8015956:	4798      	blx	r3
 8015958:	6823      	ldr	r3, [r4, #0]
 801595a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801595c:	e006      	b.n	801596c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801595e:	6823      	ldr	r3, [r4, #0]
 8015960:	7f01      	ldrb	r1, [r0, #28]
 8015962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015964:	4620      	mov	r0, r4
 8015966:	4798      	blx	r3
 8015968:	6823      	ldr	r3, [r4, #0]
 801596a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801596c:	4629      	mov	r1, r5
 801596e:	4620      	mov	r0, r4
 8015970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015974:	4718      	bx	r3
 8015976:	6823      	ldr	r3, [r4, #0]
 8015978:	4620      	mov	r0, r4
 801597a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801597c:	4798      	blx	r3
 801597e:	e7f3      	b.n	8015968 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08015980 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015980:	4770      	bx	lr

08015982 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015982:	4770      	bx	lr

08015984 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015984:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015988:	1ad2      	subs	r2, r2, r3
 801598a:	2a00      	cmp	r2, #0
 801598c:	b510      	push	{r4, lr}
 801598e:	bfdc      	itt	le
 8015990:	6884      	ldrle	r4, [r0, #8]
 8015992:	1912      	addle	r2, r2, r4
 8015994:	2a01      	cmp	r2, #1
 8015996:	dd16      	ble.n	80159c6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015998:	2424      	movs	r4, #36	@ 0x24
 801599a:	6842      	ldr	r2, [r0, #4]
 801599c:	fb04 2303 	mla	r3, r4, r3, r2
 80159a0:	f101 0220 	add.w	r2, r1, #32
 80159a4:	f851 4b04 	ldr.w	r4, [r1], #4
 80159a8:	4291      	cmp	r1, r2
 80159aa:	f843 4b04 	str.w	r4, [r3], #4
 80159ae:	d1f9      	bne.n	80159a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80159b0:	780a      	ldrb	r2, [r1, #0]
 80159b2:	701a      	strb	r2, [r3, #0]
 80159b4:	68c3      	ldr	r3, [r0, #12]
 80159b6:	6882      	ldr	r2, [r0, #8]
 80159b8:	3301      	adds	r3, #1
 80159ba:	429a      	cmp	r2, r3
 80159bc:	bfd8      	it	le
 80159be:	1a9b      	suble	r3, r3, r2
 80159c0:	f3bf 8f5b 	dmb	ish
 80159c4:	60c3      	str	r3, [r0, #12]
 80159c6:	bd10      	pop	{r4, pc}

080159c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80159c8:	6903      	ldr	r3, [r0, #16]
 80159ca:	6882      	ldr	r2, [r0, #8]
 80159cc:	3301      	adds	r3, #1
 80159ce:	429a      	cmp	r2, r3
 80159d0:	bfd8      	it	le
 80159d2:	1a9b      	suble	r3, r3, r2
 80159d4:	f3bf 8f5b 	dmb	ish
 80159d8:	6103      	str	r3, [r0, #16]
 80159da:	4770      	bx	lr

080159dc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80159dc:	b570      	push	{r4, r5, r6, lr}
 80159de:	4604      	mov	r4, r0
 80159e0:	460e      	mov	r6, r1
 80159e2:	6860      	ldr	r0, [r4, #4]
 80159e4:	6803      	ldr	r3, [r0, #0]
 80159e6:	685b      	ldr	r3, [r3, #4]
 80159e8:	4798      	blx	r3
 80159ea:	2800      	cmp	r0, #0
 80159ec:	d1f9      	bne.n	80159e2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80159ee:	4d0d      	ldr	r5, [pc, #52]	@ (8015a24 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80159f0:	6828      	ldr	r0, [r5, #0]
 80159f2:	6803      	ldr	r3, [r0, #0]
 80159f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80159f8:	4798      	blx	r3
 80159fa:	f7fc f967 	bl	8011ccc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80159fe:	6828      	ldr	r0, [r5, #0]
 8015a00:	2101      	movs	r1, #1
 8015a02:	f7ff ff11 	bl	8015828 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015a06:	6860      	ldr	r0, [r4, #4]
 8015a08:	4631      	mov	r1, r6
 8015a0a:	6803      	ldr	r3, [r0, #0]
 8015a0c:	689b      	ldr	r3, [r3, #8]
 8015a0e:	4798      	blx	r3
 8015a10:	6823      	ldr	r3, [r4, #0]
 8015a12:	4620      	mov	r0, r4
 8015a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a16:	4798      	blx	r3
 8015a18:	6828      	ldr	r0, [r5, #0]
 8015a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a1e:	6803      	ldr	r3, [r0, #0]
 8015a20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015a22:	4718      	bx	r3
 8015a24:	2005baa4 	.word	0x2005baa4

08015a28 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015a28:	b508      	push	{r3, lr}
 8015a2a:	f7fc f935 	bl	8011c98 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015a32:	f7fc b93f 	b.w	8011cb4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015a36 <_ZN8touchgfx13DMA_Interface5startEv>:
 8015a36:	b510      	push	{r4, lr}
 8015a38:	4604      	mov	r4, r0
 8015a3a:	6840      	ldr	r0, [r0, #4]
 8015a3c:	6803      	ldr	r3, [r0, #0]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	4798      	blx	r3
 8015a42:	b948      	cbnz	r0, 8015a58 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015a44:	7a63      	ldrb	r3, [r4, #9]
 8015a46:	b13b      	cbz	r3, 8015a58 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015a48:	7a23      	ldrb	r3, [r4, #8]
 8015a4a:	b92b      	cbnz	r3, 8015a58 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015a4c:	6823      	ldr	r3, [r4, #0]
 8015a4e:	4620      	mov	r0, r4
 8015a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a56:	4718      	bx	r3
 8015a58:	bd10      	pop	{r4, pc}

08015a5a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015a5a:	b570      	push	{r4, r5, r6, lr}
 8015a5c:	4604      	mov	r4, r0
 8015a5e:	6840      	ldr	r0, [r0, #4]
 8015a60:	6803      	ldr	r3, [r0, #0]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	4798      	blx	r3
 8015a66:	4605      	mov	r5, r0
 8015a68:	b930      	cbnz	r0, 8015a78 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015a6a:	7a23      	ldrb	r3, [r4, #8]
 8015a6c:	b123      	cbz	r3, 8015a78 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015a6e:	6860      	ldr	r0, [r4, #4]
 8015a70:	6803      	ldr	r3, [r0, #0]
 8015a72:	695b      	ldr	r3, [r3, #20]
 8015a74:	4798      	blx	r3
 8015a76:	7225      	strb	r5, [r4, #8]
 8015a78:	6860      	ldr	r0, [r4, #4]
 8015a7a:	6803      	ldr	r3, [r0, #0]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	4798      	blx	r3
 8015a80:	b928      	cbnz	r0, 8015a8e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015a82:	6823      	ldr	r3, [r4, #0]
 8015a84:	4620      	mov	r0, r4
 8015a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a8c:	4718      	bx	r3
 8015a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a92:	f7fc b927 	b.w	8011ce4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08015a98 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015a98:	6082      	str	r2, [r0, #8]
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	b510      	push	{r4, lr}
 8015a9e:	4c03      	ldr	r4, [pc, #12]	@ (8015aac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015aa0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015aa4:	e9c0 4100 	strd	r4, r1, [r0]
 8015aa8:	bd10      	pop	{r4, pc}
 8015aaa:	bf00      	nop
 8015aac:	0802f60c 	.word	0x0802f60c

08015ab0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015ab0:	6840      	ldr	r0, [r0, #4]
 8015ab2:	6803      	ldr	r3, [r0, #0]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	4718      	bx	r3

08015ab8 <_ZN8touchgfxL10applyNoiseEiihhh>:
 8015ab8:	fb80 0101 	smull	r0, r1, r0, r1
 8015abc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8015ac0:	4f1f      	ldr	r7, [pc, #124]	@ (8015b40 <_ZN8touchgfxL10applyNoiseEiihhh+0x88>)
 8015ac2:	461c      	mov	r4, r3
 8015ac4:	fba0 bc07 	umull	fp, ip, r0, r7
 8015ac8:	fb07 cc01 	mla	ip, r7, r1, ip
 8015acc:	fbab 010b 	umull	r0, r1, fp, fp
 8015ad0:	fb0b f70c 	mul.w	r7, fp, ip
 8015ad4:	fb00 f30c 	mul.w	r3, r0, ip
 8015ad8:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8015adc:	fb0b 3301 	mla	r3, fp, r1, r3
 8015ae0:	fba0 010b 	umull	r0, r1, r0, fp
 8015ae4:	4616      	mov	r6, r2
 8015ae6:	4419      	add	r1, r3
 8015ae8:	a313      	add	r3, pc, #76	@ (adr r3, 8015b38 <_ZN8touchgfxL10applyNoiseEiihhh+0x80>)
 8015aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aee:	f7ea fbc7 	bl	8000280 <__aeabi_ldivmod>
 8015af2:	2ef7      	cmp	r6, #247	@ 0xf7
 8015af4:	b290      	uxth	r0, r2
 8015af6:	bf9e      	ittt	ls
 8015af8:	f002 0207 	andls.w	r2, r2, #7
 8015afc:	18b6      	addls	r6, r6, r2
 8015afe:	b2f6      	uxtbls	r6, r6
 8015b00:	2cfb      	cmp	r4, #251	@ 0xfb
 8015b02:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8015b06:	bf9e      	ittt	ls
 8015b08:	f3c0 03c1 	ubfxls	r3, r0, #3, #2
 8015b0c:	18e4      	addls	r4, r4, r3
 8015b0e:	b2e4      	uxtbls	r4, r4
 8015b10:	2df7      	cmp	r5, #247	@ 0xf7
 8015b12:	bf9c      	itt	ls
 8015b14:	f3c0 1042 	ubfxls	r0, r0, #5, #3
 8015b18:	182d      	addls	r5, r5, r0
 8015b1a:	480a      	ldr	r0, [pc, #40]	@ (8015b44 <_ZN8touchgfxL10applyNoiseEiihhh+0x8c>)
 8015b1c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8015b20:	ea00 2006 	and.w	r0, r0, r6, lsl #8
 8015b24:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8015b28:	bf98      	it	ls
 8015b2a:	b2ed      	uxtbls	r5, r5
 8015b2c:	4304      	orrs	r4, r0
 8015b2e:	ea44 00d5 	orr.w	r0, r4, r5, lsr #3
 8015b32:	b280      	uxth	r0, r0
 8015b34:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8015b38:	797a8d77 	.word	0x797a8d77
 8015b3c:	00000000 	.word	0x00000000
 8015b40:	00ec4ba7 	.word	0x00ec4ba7
 8015b44:	fffff800 	.word	0xfffff800

08015b48 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh>:
 8015b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b4c:	ed2d 8b02 	vpush	{d8}
 8015b50:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8015b54:	7c41      	ldrb	r1, [r0, #17]
 8015b56:	b087      	sub	sp, #28
 8015b58:	4605      	mov	r5, r0
 8015b5a:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	@ 0x48
 8015b5e:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	@ 0x4c
 8015b62:	f89d a050 	ldrb.w	sl, [sp, #80]	@ 0x50
 8015b66:	2900      	cmp	r1, #0
 8015b68:	f000 809a 	beq.w	8015ca0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x158>
 8015b6c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015b70:	ed90 7a08 	vldr	s14, [r0, #32]
 8015b74:	454a      	cmp	r2, r9
 8015b76:	68c0      	ldr	r0, [r0, #12]
 8015b78:	db25      	blt.n	8015bc6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x7e>
 8015b7a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b82:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8015b86:	bfc8      	it	gt
 8015b88:	2200      	movgt	r2, #0
 8015b8a:	2100      	movs	r1, #0
 8015b8c:	5882      	ldr	r2, [r0, r2]
 8015b8e:	7c2d      	ldrb	r5, [r5, #16]
 8015b90:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8015b94:	0950      	lsrs	r0, r2, #5
 8015b96:	f408 4e78 	and.w	lr, r8, #63488	@ 0xf800
 8015b9a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8015b9e:	f3c2 0cc4 	ubfx	ip, r2, #3, #5
 8015ba2:	eb04 0746 	add.w	r7, r4, r6, lsl #1
 8015ba6:	2d00      	cmp	r5, #0
 8015ba8:	d044      	beq.n	8015c34 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8015baa:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015bae:	d141      	bne.n	8015c34 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8015bb0:	bb61      	cbnz	r1, 8015c0c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xc4>
 8015bb2:	ea4e 0000 	orr.w	r0, lr, r0
 8015bb6:	ea4c 0500 	orr.w	r5, ip, r0
 8015bba:	42bc      	cmp	r4, r7
 8015bbc:	f080 8216 	bcs.w	8015fec <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015bc0:	f824 5b02 	strh.w	r5, [r4], #2
 8015bc4:	e7f9      	b.n	8015bba <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x72>
 8015bc6:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8015bca:	454f      	cmp	r7, r9
 8015bcc:	dc08      	bgt.n	8015be0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x98>
 8015bce:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bd6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8015bda:	bfd8      	it	le
 8015bdc:	2200      	movle	r2, #0
 8015bde:	e7d4      	b.n	8015b8a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42>
 8015be0:	eba9 0202 	sub.w	r2, r9, r2
 8015be4:	ee07 2a90 	vmov	s15, r2
 8015be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015bf0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bfc:	ee17 2a90 	vmov	r2, s15
 8015c00:	bfd8      	it	le
 8015c02:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8015c06:	0092      	lsls	r2, r2, #2
 8015c08:	5882      	ldr	r2, [r0, r2]
 8015c0a:	e7c0      	b.n	8015b8e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x46>
 8015c0c:	461e      	mov	r6, r3
 8015c0e:	b2d5      	uxtb	r5, r2
 8015c10:	fa5f f888 	uxtb.w	r8, r8
 8015c14:	f3c2 4a07 	ubfx	sl, r2, #16, #8
 8015c18:	42bc      	cmp	r4, r7
 8015c1a:	f080 81e7 	bcs.w	8015fec <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015c1e:	4630      	mov	r0, r6
 8015c20:	9500      	str	r5, [sp, #0]
 8015c22:	4643      	mov	r3, r8
 8015c24:	4652      	mov	r2, sl
 8015c26:	4649      	mov	r1, r9
 8015c28:	f7ff ff46 	bl	8015ab8 <_ZN8touchgfxL10applyNoiseEiihhh>
 8015c2c:	3601      	adds	r6, #1
 8015c2e:	f824 0b02 	strh.w	r0, [r4], #2
 8015c32:	e7f1      	b.n	8015c18 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xd0>
 8015c34:	0e12      	lsrs	r2, r2, #24
 8015c36:	fb02 f20a 	mul.w	r2, r2, sl
 8015c3a:	1c53      	adds	r3, r2, #1
 8015c3c:	eb03 2222 	add.w	r2, r3, r2, asr #8
 8015c40:	1212      	asrs	r2, r2, #8
 8015c42:	fb02 f50c 	mul.w	r5, r2, ip
 8015c46:	fb02 f10e 	mul.w	r1, r2, lr
 8015c4a:	4350      	muls	r0, r2
 8015c4c:	43d2      	mvns	r2, r2
 8015c4e:	26ff      	movs	r6, #255	@ 0xff
 8015c50:	f8df c3ac 	ldr.w	ip, [pc, #940]	@ 8016000 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015c54:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015c58:	42bc      	cmp	r4, r7
 8015c5a:	f080 81c7 	bcs.w	8015fec <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015c5e:	f8b4 e000 	ldrh.w	lr, [r4]
 8015c62:	ea0e 030c 	and.w	r3, lr, ip
 8015c66:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 8015c6a:	fb02 1303 	mla	r3, r2, r3, r1
 8015c6e:	fb02 0808 	mla	r8, r2, r8, r0
 8015c72:	f00e 0e1f 	and.w	lr, lr, #31
 8015c76:	fb02 5e0e 	mla	lr, r2, lr, r5
 8015c7a:	fb93 f3f6 	sdiv	r3, r3, r6
 8015c7e:	fb98 f8f6 	sdiv	r8, r8, r6
 8015c82:	fb9e fef6 	sdiv	lr, lr, r6
 8015c86:	ea03 030c 	and.w	r3, r3, ip
 8015c8a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8015c8e:	ea43 0308 	orr.w	r3, r3, r8
 8015c92:	f00e 0e1f 	and.w	lr, lr, #31
 8015c96:	ea43 030e 	orr.w	r3, r3, lr
 8015c9a:	f824 3b02 	strh.w	r3, [r4], #2
 8015c9e:	e7db      	b.n	8015c58 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x110>
 8015ca0:	7c82      	ldrb	r2, [r0, #18]
 8015ca2:	2a00      	cmp	r2, #0
 8015ca4:	d050      	beq.n	8015d48 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x200>
 8015ca6:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015caa:	ee07 2a90 	vmov	s15, r2
 8015cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015cb2:	ee07 3a10 	vmov	s14, r3
 8015cb6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015cba:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cc2:	461f      	mov	r7, r3
 8015cc4:	f200 8096 	bhi.w	8015df4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2ac>
 8015cc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015cd0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015cd4:	ee06 6a90 	vmov	s13, r6
 8015cd8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015cdc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce4:	bf44      	itt	mi
 8015ce6:	eebd 7ac7 	vcvtmi.s32.f32	s14, s14
 8015cea:	ed8d 7a02 	vstrmi	s14, [sp, #8]
 8015cee:	ed95 7a08 	vldr	s14, [r5, #32]
 8015cf2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015cf6:	bf58      	it	pl
 8015cf8:	9602      	strpl	r6, [sp, #8]
 8015cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cfe:	f640 71fc 	movw	r1, #4092	@ 0xffc
 8015d02:	bfc8      	it	gt
 8015d04:	2100      	movgt	r1, #0
 8015d06:	68ea      	ldr	r2, [r5, #12]
 8015d08:	f895 c010 	ldrb.w	ip, [r5, #16]
 8015d0c:	5852      	ldr	r2, [r2, r1]
 8015d0e:	9902      	ldr	r1, [sp, #8]
 8015d10:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8015d14:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015d18:	0950      	lsrs	r0, r2, #5
 8015d1a:	9103      	str	r1, [sp, #12]
 8015d1c:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8015d20:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8015d24:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 8015d28:	f1bc 0f00 	cmp.w	ip, #0
 8015d2c:	d024      	beq.n	8015d78 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x230>
 8015d2e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015d32:	d121      	bne.n	8015d78 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x230>
 8015d34:	ea4b 0b00 	orr.w	fp, fp, r0
 8015d38:	ea41 010b 	orr.w	r1, r1, fp
 8015d3c:	9a03      	ldr	r2, [sp, #12]
 8015d3e:	4294      	cmp	r4, r2
 8015d40:	d255      	bcs.n	8015dee <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a6>
 8015d42:	f824 1b02 	strh.w	r1, [r4], #2
 8015d46:	e7f9      	b.n	8015d3c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x1f4>
 8015d48:	ee07 9a10 	vmov	s14, r9
 8015d4c:	edd0 7a06 	vldr	s15, [r0, #24]
 8015d50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015d54:	edd0 6a05 	vldr	s13, [r0, #20]
 8015d58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015d5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015d60:	ed90 7a08 	vldr	s14, [r0, #32]
 8015d64:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d6c:	bf44      	itt	mi
 8015d6e:	ed90 7a07 	vldrmi	s14, [r0, #28]
 8015d72:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
 8015d76:	e79c      	b.n	8015cb2 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x16a>
 8015d78:	0e12      	lsrs	r2, r2, #24
 8015d7a:	fb02 f20a 	mul.w	r2, r2, sl
 8015d7e:	f102 0c01 	add.w	ip, r2, #1
 8015d82:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8015d86:	1212      	asrs	r2, r2, #8
 8015d88:	4350      	muls	r0, r2
 8015d8a:	4351      	muls	r1, r2
 8015d8c:	fb02 fb0b 	mul.w	fp, r2, fp
 8015d90:	43d2      	mvns	r2, r2
 8015d92:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 8015d96:	f8df 8268 	ldr.w	r8, [pc, #616]	@ 8016000 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015d9a:	9004      	str	r0, [sp, #16]
 8015d9c:	9105      	str	r1, [sp, #20]
 8015d9e:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015da2:	9903      	ldr	r1, [sp, #12]
 8015da4:	428c      	cmp	r4, r1
 8015da6:	d222      	bcs.n	8015dee <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a6>
 8015da8:	8820      	ldrh	r0, [r4, #0]
 8015daa:	f400 61fc 	and.w	r1, r0, #2016	@ 0x7e0
 8015dae:	460f      	mov	r7, r1
 8015db0:	9904      	ldr	r1, [sp, #16]
 8015db2:	ea00 0c08 	and.w	ip, r0, r8
 8015db6:	fb02 bc0c 	mla	ip, r2, ip, fp
 8015dba:	fb02 1107 	mla	r1, r2, r7, r1
 8015dbe:	fb9c fcfe 	sdiv	ip, ip, lr
 8015dc2:	fb91 f1fe 	sdiv	r1, r1, lr
 8015dc6:	ea0c 0c08 	and.w	ip, ip, r8
 8015dca:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8015dce:	ea4c 0101 	orr.w	r1, ip, r1
 8015dd2:	f000 0c1f 	and.w	ip, r0, #31
 8015dd6:	9805      	ldr	r0, [sp, #20]
 8015dd8:	fb02 0c0c 	mla	ip, r2, ip, r0
 8015ddc:	fb9c fcfe 	sdiv	ip, ip, lr
 8015de0:	f00c 0c1f 	and.w	ip, ip, #31
 8015de4:	ea41 010c 	orr.w	r1, r1, ip
 8015de8:	f824 1b02 	strh.w	r1, [r4], #2
 8015dec:	e7d9      	b.n	8015da2 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x25a>
 8015dee:	9a02      	ldr	r2, [sp, #8]
 8015df0:	441a      	add	r2, r3
 8015df2:	4617      	mov	r7, r2
 8015df4:	441e      	add	r6, r3
 8015df6:	b236      	sxth	r6, r6
 8015df8:	42be      	cmp	r6, r7
 8015dfa:	f340 80f7 	ble.w	8015fec <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015dfe:	ed95 7a07 	vldr	s14, [r5, #28]
 8015e02:	ee06 7a90 	vmov	s13, r7
 8015e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015e0a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015e0e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e16:	f340 80b3 	ble.w	8015f80 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x438>
 8015e1a:	ee06 6a10 	vmov	s12, r6
 8015e1e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015e22:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e2a:	bfdc      	itt	le
 8015e2c:	eebd 7ac7 	vcvtle.s32.f32	s14, s14
 8015e30:	ee17 8a10 	vmovle	r8, s14
 8015e34:	ed95 7a08 	vldr	s14, [r5, #32]
 8015e38:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015e3c:	bfc8      	it	gt
 8015e3e:	46b0      	movgt	r8, r6
 8015e40:	ed9f 8a6d 	vldr	s16, [pc, #436]	@ 8015ff8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b0>
 8015e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e48:	ed9f 6a6c 	vldr	s12, [pc, #432]	@ 8015ffc <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8015e4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015e50:	7c2b      	ldrb	r3, [r5, #16]
 8015e52:	eba8 0707 	sub.w	r7, r8, r7
 8015e56:	fe38 8a06 	vselgt.f32	s16, s16, s12
 8015e5a:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8015e5e:	eea7 8a27 	vfma.f32	s16, s14, s15
 8015e62:	b1db      	cbz	r3, 8015e9c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x354>
 8015e64:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015e68:	d118      	bne.n	8015e9c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x354>
 8015e6a:	42bc      	cmp	r4, r7
 8015e6c:	d262      	bcs.n	8015f34 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 8015e6e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015e72:	ee17 0a90 	vmov	r0, s15
 8015e76:	68eb      	ldr	r3, [r5, #12]
 8015e78:	4649      	mov	r1, r9
 8015e7a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8015e7e:	b2d3      	uxtb	r3, r2
 8015e80:	9300      	str	r3, [sp, #0]
 8015e82:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8015e86:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8015e8a:	f7ff fe15 	bl	8015ab8 <_ZN8touchgfxL10applyNoiseEiihhh>
 8015e8e:	f824 0b02 	strh.w	r0, [r4], #2
 8015e92:	edd5 7a08 	vldr	s15, [r5, #32]
 8015e96:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015e9a:	e7e6      	b.n	8015e6a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x322>
 8015e9c:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8015ea0:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 8016000 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015ea4:	42bc      	cmp	r4, r7
 8015ea6:	d245      	bcs.n	8015f34 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 8015ea8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015eac:	ee17 2a90 	vmov	r2, s15
 8015eb0:	68eb      	ldr	r3, [r5, #12]
 8015eb2:	f8b4 e000 	ldrh.w	lr, [r4]
 8015eb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015eba:	0e13      	lsrs	r3, r2, #24
 8015ebc:	fb03 f30a 	mul.w	r3, r3, sl
 8015ec0:	1c58      	adds	r0, r3, #1
 8015ec2:	eb00 2023 	add.w	r0, r0, r3, asr #8
 8015ec6:	1200      	asrs	r0, r0, #8
 8015ec8:	ea6f 0c00 	mvn.w	ip, r0
 8015ecc:	ea0e 030b 	and.w	r3, lr, fp
 8015ed0:	fa5f fc8c 	uxtb.w	ip, ip
 8015ed4:	fb0c f303 	mul.w	r3, ip, r3
 8015ed8:	ea0b 2112 	and.w	r1, fp, r2, lsr #8
 8015edc:	b289      	uxth	r1, r1
 8015ede:	fb00 3101 	mla	r1, r0, r1, r3
 8015ee2:	fb91 f1f9 	sdiv	r1, r1, r9
 8015ee6:	ea01 030b 	and.w	r3, r1, fp
 8015eea:	9302      	str	r3, [sp, #8]
 8015eec:	0953      	lsrs	r3, r2, #5
 8015eee:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	f40e 63fc 	and.w	r3, lr, #2016	@ 0x7e0
 8015ef8:	fb0c f303 	mul.w	r3, ip, r3
 8015efc:	f00e 0e1f 	and.w	lr, lr, #31
 8015f00:	fb0c fc0e 	mul.w	ip, ip, lr
 8015f04:	fb00 3301 	mla	r3, r0, r1, r3
 8015f08:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8015f0c:	fb00 c002 	mla	r0, r0, r2, ip
 8015f10:	fb93 f3f9 	sdiv	r3, r3, r9
 8015f14:	fb90 f0f9 	sdiv	r0, r0, r9
 8015f18:	9902      	ldr	r1, [sp, #8]
 8015f1a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8015f1e:	4319      	orrs	r1, r3
 8015f20:	f000 001f 	and.w	r0, r0, #31
 8015f24:	4301      	orrs	r1, r0
 8015f26:	f824 1b02 	strh.w	r1, [r4], #2
 8015f2a:	edd5 7a08 	vldr	s15, [r5, #32]
 8015f2e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015f32:	e7b7      	b.n	8015ea4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x35c>
 8015f34:	4546      	cmp	r6, r8
 8015f36:	dd59      	ble.n	8015fec <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015f38:	edd5 7a08 	vldr	s15, [r5, #32]
 8015f3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8015f48:	bfd8      	it	le
 8015f4a:	2300      	movle	r3, #0
 8015f4c:	68ea      	ldr	r2, [r5, #12]
 8015f4e:	7c29      	ldrb	r1, [r5, #16]
 8015f50:	58d2      	ldr	r2, [r2, r3]
 8015f52:	eba6 0608 	sub.w	r6, r6, r8
 8015f56:	0a10      	lsrs	r0, r2, #8
 8015f58:	0953      	lsrs	r3, r2, #5
 8015f5a:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8015f5e:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8015f62:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8015f66:	f3c2 07c4 	ubfx	r7, r2, #3, #5
 8015f6a:	b159      	cbz	r1, 8015f84 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43c>
 8015f6c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015f70:	d108      	bne.n	8015f84 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43c>
 8015f72:	4318      	orrs	r0, r3
 8015f74:	4338      	orrs	r0, r7
 8015f76:	42b4      	cmp	r4, r6
 8015f78:	d238      	bcs.n	8015fec <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015f7a:	f824 0b02 	strh.w	r0, [r4], #2
 8015f7e:	e7fa      	b.n	8015f76 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42e>
 8015f80:	46b8      	mov	r8, r7
 8015f82:	e7d9      	b.n	8015f38 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3f0>
 8015f84:	0e12      	lsrs	r2, r2, #24
 8015f86:	fb02 f10a 	mul.w	r1, r2, sl
 8015f8a:	1c4a      	adds	r2, r1, #1
 8015f8c:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8015f90:	1212      	asrs	r2, r2, #8
 8015f92:	fb02 f507 	mul.w	r5, r2, r7
 8015f96:	4350      	muls	r0, r2
 8015f98:	4353      	muls	r3, r2
 8015f9a:	43d2      	mvns	r2, r2
 8015f9c:	27ff      	movs	r7, #255	@ 0xff
 8015f9e:	f8df c060 	ldr.w	ip, [pc, #96]	@ 8016000 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015fa2:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015fa6:	42b4      	cmp	r4, r6
 8015fa8:	d220      	bcs.n	8015fec <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015faa:	f8b4 e000 	ldrh.w	lr, [r4]
 8015fae:	ea0e 010c 	and.w	r1, lr, ip
 8015fb2:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 8015fb6:	fb02 0101 	mla	r1, r2, r1, r0
 8015fba:	fb02 3808 	mla	r8, r2, r8, r3
 8015fbe:	f00e 0e1f 	and.w	lr, lr, #31
 8015fc2:	fb02 5e0e 	mla	lr, r2, lr, r5
 8015fc6:	fb91 f1f7 	sdiv	r1, r1, r7
 8015fca:	fb98 f8f7 	sdiv	r8, r8, r7
 8015fce:	fb9e fef7 	sdiv	lr, lr, r7
 8015fd2:	ea01 010c 	and.w	r1, r1, ip
 8015fd6:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8015fda:	ea41 0108 	orr.w	r1, r1, r8
 8015fde:	f00e 0e1f 	and.w	lr, lr, #31
 8015fe2:	ea41 010e 	orr.w	r1, r1, lr
 8015fe6:	f824 1b02 	strh.w	r1, [r4], #2
 8015fea:	e7dc      	b.n	8015fa6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x45e>
 8015fec:	b007      	add	sp, #28
 8015fee:	ecbd 8b02 	vpop	{d8}
 8015ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff6:	bf00      	nop
 8015ff8:	00000000 	.word	0x00000000
 8015ffc:	447ffffe 	.word	0x447ffffe
 8016000:	fffff800 	.word	0xfffff800

08016004 <_ZNK8touchgfx27PainterRGB565LinearGradient8tearDownEv>:
 8016004:	4770      	bx	lr
	...

08016008 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8016008:	4b06      	ldr	r3, [pc, #24]	@ (8016024 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 801600a:	094a      	lsrs	r2, r1, #5
 801600c:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8016010:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8016014:	60c1      	str	r1, [r0, #12]
 8016016:	4313      	orrs	r3, r2
 8016018:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801601c:	4319      	orrs	r1, r3
 801601e:	8201      	strh	r1, [r0, #16]
 8016020:	4770      	bx	lr
 8016022:	bf00      	nop
 8016024:	fffff800 	.word	0xfffff800

08016028 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8016028:	f1a0 0008 	sub.w	r0, r0, #8
 801602c:	e7ec      	b.n	8016008 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 801602e:	bf00      	nop

08016030 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8016030:	b508      	push	{r3, lr}
 8016032:	4b05      	ldr	r3, [pc, #20]	@ (8016048 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8016034:	6818      	ldr	r0, [r3, #0]
 8016036:	6803      	ldr	r3, [r0, #0]
 8016038:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801603c:	4798      	blx	r3
 801603e:	1e43      	subs	r3, r0, #1
 8016040:	4258      	negs	r0, r3
 8016042:	4158      	adcs	r0, r3
 8016044:	bd08      	pop	{r3, pc}
 8016046:	bf00      	nop
 8016048:	2005baa4 	.word	0x2005baa4

0801604c <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 801604c:	b430      	push	{r4, r5}
 801604e:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8016052:	8a02      	ldrh	r2, [r0, #16]
 8016054:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8016058:	9202      	str	r2, [sp, #8]
 801605a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801605e:	68c2      	ldr	r2, [r0, #12]
 8016060:	4629      	mov	r1, r5
 8016062:	4620      	mov	r0, r4
 8016064:	bc30      	pop	{r4, r5}
 8016066:	f7fc bac7 	b.w	80125f8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

0801606a <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 801606a:	f7fc baa1 	b.w	80125b0 <_ZN8touchgfx5paint8tearDownEv>

0801606e <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 801606e:	2300      	movs	r3, #0
 8016070:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8016072:	8503      	strh	r3, [r0, #40]	@ 0x28
 8016074:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8016076:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8016078:	6980      	ldr	r0, [r0, #24]
 801607a:	b110      	cbz	r0, 8016082 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 801607c:	6803      	ldr	r3, [r0, #0]
 801607e:	691b      	ldr	r3, [r3, #16]
 8016080:	4718      	bx	r3
 8016082:	4770      	bx	lr

08016084 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8016084:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8016088:	4770      	bx	lr

0801608a <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 801608a:	b538      	push	{r3, r4, r5, lr}
 801608c:	0e0b      	lsrs	r3, r1, #24
 801608e:	7783      	strb	r3, [r0, #30]
 8016090:	6803      	ldr	r3, [r0, #0]
 8016092:	4604      	mov	r4, r0
 8016094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016096:	460d      	mov	r5, r1
 8016098:	4798      	blx	r3
 801609a:	6803      	ldr	r3, [r0, #0]
 801609c:	4629      	mov	r1, r5
 801609e:	689b      	ldr	r3, [r3, #8]
 80160a0:	4798      	blx	r3
 80160a2:	6823      	ldr	r3, [r4, #0]
 80160a4:	4620      	mov	r0, r4
 80160a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160a8:	4798      	blx	r3
 80160aa:	61a0      	str	r0, [r4, #24]
 80160ac:	bd38      	pop	{r3, r4, r5, pc}

080160ae <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 80160ae:	7741      	strb	r1, [r0, #29]
 80160b0:	4770      	bx	lr

080160b2 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 80160b2:	b530      	push	{r4, r5, lr}
 80160b4:	460d      	mov	r5, r1
 80160b6:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 80160ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80160bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80160be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80160c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80160c2:	682b      	ldr	r3, [r5, #0]
 80160c4:	6023      	str	r3, [r4, #0]
 80160c6:	bd30      	pop	{r4, r5, pc}

080160c8 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 80160c8:	b538      	push	{r3, r4, r5, lr}
 80160ca:	4604      	mov	r4, r0
 80160cc:	2500      	movs	r5, #0
 80160ce:	1d03      	adds	r3, r0, #4
 80160d0:	6808      	ldr	r0, [r1, #0]
 80160d2:	6849      	ldr	r1, [r1, #4]
 80160d4:	c303      	stmia	r3!, {r0, r1}
 80160d6:	6813      	ldr	r3, [r2, #0]
 80160d8:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80160dc:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 80160e0:	6853      	ldr	r3, [r2, #4]
 80160e2:	61a5      	str	r5, [r4, #24]
 80160e4:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 80160e8:	f005 f85c 	bl	801b1a4 <_ZN8touchgfx9Matrix3x35resetEv>
 80160ec:	23ff      	movs	r3, #255	@ 0xff
 80160ee:	7763      	strb	r3, [r4, #29]
 80160f0:	77a3      	strb	r3, [r4, #30]
 80160f2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80160f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80160f8:	2301      	movs	r3, #1
 80160fa:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 80160fe:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8016102:	bd38      	pop	{r3, r4, r5, pc}

08016104 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8016104:	ee70 7a41 	vsub.f32	s15, s0, s2
 8016108:	eef5 7a40 	vcmp.f32	s15, #0.0
 801610c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016110:	ed2d 8b0a 	vpush	{d8-d12}
 8016114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016118:	b087      	sub	sp, #28
 801611a:	4605      	mov	r5, r0
 801611c:	eef0 9a40 	vmov.f32	s19, s0
 8016120:	eeb0 aa60 	vmov.f32	s20, s1
 8016124:	eeb0 9a41 	vmov.f32	s18, s2
 8016128:	eef0 8a61 	vmov.f32	s17, s3
 801612c:	eeb0 ca42 	vmov.f32	s24, s4
 8016130:	eef0 ca62 	vmov.f32	s25, s5
 8016134:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8016138:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801613a:	6802      	ldr	r2, [r0, #0]
 801613c:	d112      	bne.n	8016164 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 801613e:	ee70 7ae1 	vsub.f32	s15, s1, s3
 8016142:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801614a:	d10b      	bne.n	8016164 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 801614c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8016150:	3901      	subs	r1, #1
 8016152:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8016154:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8016158:	b007      	add	sp, #28
 801615a:	ecbd 8b0a 	vpop	{d8-d12}
 801615e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016162:	4710      	bx	r2
 8016164:	23ff      	movs	r3, #255	@ 0xff
 8016166:	77ab      	strb	r3, [r5, #30]
 8016168:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801616a:	4628      	mov	r0, r5
 801616c:	4798      	blx	r3
 801616e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8016172:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8016176:	80c3      	strh	r3, [r0, #6]
 8016178:	eef0 0a4a 	vmov.f32	s1, s20
 801617c:	eeb0 0a69 	vmov.f32	s0, s19
 8016180:	4604      	mov	r4, r0
 8016182:	4640      	mov	r0, r8
 8016184:	f005 f8bd 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016188:	4640      	mov	r0, r8
 801618a:	eeb0 ba40 	vmov.f32	s22, s0
 801618e:	eef0 ba60 	vmov.f32	s23, s1
 8016192:	ed8d 0a00 	vstr	s0, [sp]
 8016196:	edcd 0a01 	vstr	s1, [sp, #4]
 801619a:	eeb0 0a49 	vmov.f32	s0, s18
 801619e:	eef0 0a68 	vmov.f32	s1, s17
 80161a2:	f005 f8ae 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80161a6:	eeb4 ba40 	vcmp.f32	s22, s0
 80161aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ae:	eef4 ba60 	vcmp.f32	s23, s1
 80161b2:	bf0c      	ite	eq
 80161b4:	2301      	moveq	r3, #1
 80161b6:	2300      	movne	r3, #0
 80161b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161bc:	eeb4 ba40 	vcmp.f32	s22, s0
 80161c0:	7463      	strb	r3, [r4, #17]
 80161c2:	bf0c      	ite	eq
 80161c4:	2301      	moveq	r3, #1
 80161c6:	2300      	movne	r3, #0
 80161c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161cc:	eeb0 8a40 	vmov.f32	s16, s0
 80161d0:	eef0 aa60 	vmov.f32	s21, s1
 80161d4:	ed8d 0a02 	vstr	s0, [sp, #8]
 80161d8:	edcd 0a03 	vstr	s1, [sp, #12]
 80161dc:	74a3      	strb	r3, [r4, #18]
 80161de:	f8df 9250 	ldr.w	r9, [pc, #592]	@ 8016430 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 80161e2:	d030      	beq.n	8016246 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 80161e4:	eef4 ba60 	vcmp.f32	s23, s1
 80161e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ec:	d02b      	beq.n	8016246 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 80161ee:	ee39 9a69 	vsub.f32	s18, s18, s19
 80161f2:	ee78 8aca 	vsub.f32	s17, s17, s20
 80161f6:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 80161fa:	eec8 7aac 	vdiv.f32	s15, s17, s25
 80161fe:	eef0 0a4a 	vmov.f32	s1, s20
 8016202:	eeb0 0a69 	vmov.f32	s0, s19
 8016206:	eeec 0a87 	vfma.f32	s1, s25, s14
 801620a:	eea7 0acc 	vfms.f32	s0, s15, s24
 801620e:	4640      	mov	r0, r8
 8016210:	f005 f877 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016214:	edcd 0a05 	vstr	s1, [sp, #20]
 8016218:	ee70 0aeb 	vsub.f32	s1, s1, s23
 801621c:	f899 3000 	ldrb.w	r3, [r9]
 8016220:	ed8d 0a04 	vstr	s0, [sp, #16]
 8016224:	2b01      	cmp	r3, #1
 8016226:	ee30 0a4b 	vsub.f32	s0, s0, s22
 801622a:	bf02      	ittt	eq
 801622c:	eef1 7a60 	vnegeq.f32	s15, s1
 8016230:	eef0 0a40 	vmoveq.f32	s1, s0
 8016234:	eeb0 0a67 	vmoveq.f32	s0, s15
 8016238:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801623c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016240:	d134      	bne.n	80162ac <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 8016242:	2301      	movs	r3, #1
 8016244:	74a3      	strb	r3, [r4, #18]
 8016246:	f899 2000 	ldrb.w	r2, [r9]
 801624a:	7c63      	ldrb	r3, [r4, #17]
 801624c:	2a01      	cmp	r2, #1
 801624e:	f040 80a4 	bne.w	801639a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 8016252:	2b00      	cmp	r3, #0
 8016254:	d072      	beq.n	801633c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x238>
 8016256:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 801625a:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8016428 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 801625e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016262:	edc4 7a08 	vstr	s15, [r4, #32]
 8016266:	eefd 7aea 	vcvt.s32.f32	s15, s21
 801626a:	ee17 3a90 	vmov	r3, s15
 801626e:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8016272:	eef4 baea 	vcmpe.f32	s23, s21
 8016276:	b21a      	sxth	r2, r3
 8016278:	ee17 3a90 	vmov	r3, s15
 801627c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016280:	b21b      	sxth	r3, r3
 8016282:	bf47      	ittee	mi
 8016284:	8123      	strhmi	r3, [r4, #8]
 8016286:	8162      	strhmi	r2, [r4, #10]
 8016288:	8122      	strhpl	r2, [r4, #8]
 801628a:	8163      	strhpl	r3, [r4, #10]
 801628c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016290:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8016294:	1a9b      	subs	r3, r3, r2
 8016296:	ee07 3a90 	vmov	s15, r3
 801629a:	2300      	movs	r3, #0
 801629c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162a0:	7463      	strb	r3, [r4, #17]
 80162a2:	edc4 7a07 	vstr	s15, [r4, #28]
 80162a6:	2301      	movs	r3, #1
 80162a8:	74a3      	strb	r3, [r4, #18]
 80162aa:	e03f      	b.n	801632c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 80162ac:	ee80 7a80 	vdiv.f32	s14, s1, s0
 80162b0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80162b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162b8:	ed84 7a05 	vstr	s14, [r4, #20]
 80162bc:	d102      	bne.n	80162c4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c0>
 80162be:	2301      	movs	r3, #1
 80162c0:	7463      	strb	r3, [r4, #17]
 80162c2:	e7c0      	b.n	8016246 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 80162c4:	2b01      	cmp	r3, #1
 80162c6:	bf09      	itett	eq
 80162c8:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 80162cc:	eef0 7a6b 	vmovne.f32	s15, s23
 80162d0:	ee07 2a90 	vmoveq	s15, r2
 80162d4:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 80162d8:	bf0a      	itet	eq
 80162da:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 80162de:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 80162e2:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 80162e6:	ee38 8a4b 	vsub.f32	s16, s16, s22
 80162ea:	2b01      	cmp	r3, #1
 80162ec:	ee7a aaeb 	vsub.f32	s21, s21, s23
 80162f0:	edc4 7a06 	vstr	s15, [r4, #24]
 80162f4:	bf02      	ittt	eq
 80162f6:	eef1 7a48 	vnegeq.f32	s15, s16
 80162fa:	eeb0 8a6a 	vmoveq.f32	s16, s21
 80162fe:	eef0 aa67 	vmoveq.f32	s21, s15
 8016302:	eeca 7a87 	vdiv.f32	s15, s21, s14
 8016306:	ee38 8a67 	vsub.f32	s16, s16, s15
 801630a:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801642c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 801630e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016312:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8016316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801631a:	ed84 8a07 	vstr	s16, [r4, #28]
 801631e:	edc4 7a08 	vstr	s15, [r4, #32]
 8016322:	d503      	bpl.n	801632c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8016324:	eeb1 8a48 	vneg.f32	s16, s16
 8016328:	ed84 8a07 	vstr	s16, [r4, #28]
 801632c:	60e7      	str	r7, [r4, #12]
 801632e:	7426      	strb	r6, [r4, #16]
 8016330:	61ac      	str	r4, [r5, #24]
 8016332:	b007      	add	sp, #28
 8016334:	ecbd 8b0a 	vpop	{d8-d12}
 8016338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801633c:	7ca3      	ldrb	r3, [r4, #18]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d0f4      	beq.n	801632c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8016342:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016346:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8016428 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 801634a:	ee00 3a10 	vmov	s0, r3
 801634e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8016352:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016356:	ee30 0a4b 	vsub.f32	s0, s0, s22
 801635a:	ee38 7a40 	vsub.f32	s14, s16, s0
 801635e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016362:	edc4 7a08 	vstr	s15, [r4, #32]
 8016366:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801636a:	ee17 3a90 	vmov	r3, s15
 801636e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016372:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8016376:	b21a      	sxth	r2, r3
 8016378:	ee17 3a90 	vmov	r3, s15
 801637c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016380:	b21b      	sxth	r3, r3
 8016382:	bfcc      	ite	gt
 8016384:	8123      	strhgt	r3, [r4, #8]
 8016386:	8163      	strhle	r3, [r4, #10]
 8016388:	f04f 0301 	mov.w	r3, #1
 801638c:	bfc8      	it	gt
 801638e:	8162      	strhgt	r2, [r4, #10]
 8016390:	7463      	strb	r3, [r4, #17]
 8016392:	bfd8      	it	le
 8016394:	8122      	strhle	r2, [r4, #8]
 8016396:	2300      	movs	r3, #0
 8016398:	e786      	b.n	80162a8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a4>
 801639a:	b1db      	cbz	r3, 80163d4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d0>
 801639c:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 80163a0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8016428 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 80163a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80163a8:	edc4 7a08 	vstr	s15, [r4, #32]
 80163ac:	eefd 7aea 	vcvt.s32.f32	s15, s21
 80163b0:	ee17 3a90 	vmov	r3, s15
 80163b4:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 80163b8:	eef4 baea 	vcmpe.f32	s23, s21
 80163bc:	b21a      	sxth	r2, r3
 80163be:	ee17 3a90 	vmov	r3, s15
 80163c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163c6:	b21b      	sxth	r3, r3
 80163c8:	bf47      	ittee	mi
 80163ca:	8123      	strhmi	r3, [r4, #8]
 80163cc:	8162      	strhmi	r2, [r4, #10]
 80163ce:	8122      	strhpl	r2, [r4, #8]
 80163d0:	8163      	strhpl	r3, [r4, #10]
 80163d2:	e7ab      	b.n	801632c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 80163d4:	7ca3      	ldrb	r3, [r4, #18]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d0a8      	beq.n	801632c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 80163da:	ee38 7a4b 	vsub.f32	s14, s16, s22
 80163de:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8016428 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 80163e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80163e6:	edc4 7a08 	vstr	s15, [r4, #32]
 80163ea:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80163ee:	ee17 3a90 	vmov	r3, s15
 80163f2:	eefd 7acb 	vcvt.s32.f32	s15, s22
 80163f6:	eeb4 bac8 	vcmpe.f32	s22, s16
 80163fa:	b21a      	sxth	r2, r3
 80163fc:	ee17 3a90 	vmov	r3, s15
 8016400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016404:	b21b      	sxth	r3, r3
 8016406:	bf47      	ittee	mi
 8016408:	8123      	strhmi	r3, [r4, #8]
 801640a:	8162      	strhmi	r2, [r4, #10]
 801640c:	8122      	strhpl	r2, [r4, #8]
 801640e:	8163      	strhpl	r3, [r4, #10]
 8016410:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016414:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8016418:	1a9b      	subs	r3, r3, r2
 801641a:	ee07 3a90 	vmov	s15, r3
 801641e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016422:	edc4 7a07 	vstr	s15, [r4, #28]
 8016426:	e781      	b.n	801632c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8016428:	447ffffe 	.word	0x447ffffe
 801642c:	44800000 	.word	0x44800000
 8016430:	2005ba9c 	.word	0x2005ba9c

08016434 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8016434:	b510      	push	{r4, lr}
 8016436:	ed2d 8b02 	vpush	{d8}
 801643a:	eef0 8a62 	vmov.f32	s17, s5
 801643e:	2100      	movs	r1, #0
 8016440:	4604      	mov	r4, r0
 8016442:	eeb0 8a42 	vmov.f32	s16, s4
 8016446:	f015 f945 	bl	802b6d4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801644a:	eef0 7a68 	vmov.f32	s15, s17
 801644e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016452:	ee17 2a90 	vmov	r2, s15
 8016456:	eef0 7a48 	vmov.f32	s15, s16
 801645a:	ecbd 8b02 	vpop	{d8}
 801645e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016462:	6823      	ldr	r3, [r4, #0]
 8016464:	4620      	mov	r0, r4
 8016466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801646a:	689b      	ldr	r3, [r3, #8]
 801646c:	ee17 1a90 	vmov	r1, s15
 8016470:	4718      	bx	r3

08016472 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8016472:	b510      	push	{r4, lr}
 8016474:	ed2d 8b02 	vpush	{d8}
 8016478:	eef0 8a63 	vmov.f32	s17, s7
 801647c:	2100      	movs	r1, #0
 801647e:	4604      	mov	r4, r0
 8016480:	eeb0 8a43 	vmov.f32	s16, s6
 8016484:	f015 f9e8 	bl	802b858 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8016488:	eef0 7a68 	vmov.f32	s15, s17
 801648c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016490:	ee17 2a90 	vmov	r2, s15
 8016494:	eef0 7a48 	vmov.f32	s15, s16
 8016498:	ecbd 8b02 	vpop	{d8}
 801649c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80164a0:	6823      	ldr	r3, [r4, #0]
 80164a2:	4620      	mov	r0, r4
 80164a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164a8:	689b      	ldr	r3, [r3, #8]
 80164aa:	ee17 1a90 	vmov	r1, s15
 80164ae:	4718      	bx	r3

080164b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 80164b0:	b513      	push	{r0, r1, r4, lr}
 80164b2:	4604      	mov	r4, r0
 80164b4:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80164b6:	f004 ff24 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80164ba:	eef0 7a60 	vmov.f32	s15, s1
 80164be:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80164c2:	ee17 2a90 	vmov	r2, s15
 80164c6:	eef0 7a40 	vmov.f32	s15, s0
 80164ca:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80164ce:	4620      	mov	r0, r4
 80164d0:	ee17 1a90 	vmov	r1, s15
 80164d4:	b002      	add	sp, #8
 80164d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164da:	f015 b855 	b.w	802b588 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

080164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 80164de:	b513      	push	{r0, r1, r4, lr}
 80164e0:	4604      	mov	r4, r0
 80164e2:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80164e4:	f004 ff0d 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80164e8:	eef0 7a60 	vmov.f32	s15, s1
 80164ec:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80164f0:	ee17 2a90 	vmov	r2, s15
 80164f4:	eef0 7a40 	vmov.f32	s15, s0
 80164f8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80164fc:	4620      	mov	r0, r4
 80164fe:	ee17 1a90 	vmov	r1, s15
 8016502:	b002      	add	sp, #8
 8016504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016508:	f015 b88b 	b.w	802b622 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0801650c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 801650c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801650e:	2400      	movs	r4, #0
 8016510:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8016514:	4626      	mov	r6, r4
 8016516:	f04f 0e01 	mov.w	lr, #1
 801651a:	9f07      	ldr	r7, [sp, #28]
 801651c:	4463      	add	r3, ip
 801651e:	4563      	cmp	r3, ip
 8016520:	d02d      	beq.n	801657e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8016522:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8016526:	2d06      	cmp	r5, #6
 8016528:	d8f9      	bhi.n	801651e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801652a:	fa0e f505 	lsl.w	r5, lr, r5
 801652e:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8016532:	d10d      	bne.n	8016550 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8016534:	f015 0f10 	tst.w	r5, #16
 8016538:	d117      	bne.n	801656a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 801653a:	072d      	lsls	r5, r5, #28
 801653c:	d5ef      	bpl.n	801651e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801653e:	3801      	subs	r0, #1
 8016540:	b91e      	cbnz	r6, 801654a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8016542:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8016546:	682d      	ldr	r5, [r5, #0]
 8016548:	600d      	str	r5, [r1, #0]
 801654a:	b96c      	cbnz	r4, 8016568 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801654c:	2601      	movs	r6, #1
 801654e:	e7e6      	b.n	801651e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8016550:	b926      	cbnz	r6, 801655c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8016552:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8016556:	f853 3c08 	ldr.w	r3, [r3, #-8]
 801655a:	600b      	str	r3, [r1, #0]
 801655c:	b924      	cbnz	r4, 8016568 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801655e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8016562:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016566:	6013      	str	r3, [r2, #0]
 8016568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801656a:	3801      	subs	r0, #1
 801656c:	b91c      	cbnz	r4, 8016576 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801656e:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8016572:	6824      	ldr	r4, [r4, #0]
 8016574:	6014      	str	r4, [r2, #0]
 8016576:	2e00      	cmp	r6, #0
 8016578:	d1f6      	bne.n	8016568 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801657a:	2401      	movs	r4, #1
 801657c:	e7cf      	b.n	801651e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801657e:	b90e      	cbnz	r6, 8016584 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8016580:	2300      	movs	r3, #0
 8016582:	600b      	str	r3, [r1, #0]
 8016584:	2c00      	cmp	r4, #0
 8016586:	d1ef      	bne.n	8016568 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8016588:	2300      	movs	r3, #0
 801658a:	e7ec      	b.n	8016566 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0801658c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 801658c:	b538      	push	{r3, r4, r5, lr}
 801658e:	4604      	mov	r4, r0
 8016590:	ed2d 8b0a 	vpush	{d8-d12}
 8016594:	460d      	mov	r5, r1
 8016596:	eef0 ba40 	vmov.f32	s23, s0
 801659a:	eeb0 ca60 	vmov.f32	s24, s1
 801659e:	eef0 aa41 	vmov.f32	s21, s2
 80165a2:	eeb0 ba61 	vmov.f32	s22, s3
 80165a6:	eeb0 9a42 	vmov.f32	s18, s4
 80165aa:	eef0 9a62 	vmov.f32	s19, s5
 80165ae:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 80165b2:	ee7b 8a29 	vadd.f32	s17, s22, s19
 80165b6:	ee3a 8a89 	vadd.f32	s16, s21, s18
 80165ba:	ee68 8a8a 	vmul.f32	s17, s17, s20
 80165be:	ee28 8a0a 	vmul.f32	s16, s16, s20
 80165c2:	ee3c 0a68 	vsub.f32	s0, s24, s17
 80165c6:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 80165ca:	ee20 0a00 	vmul.f32	s0, s0, s0
 80165ce:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80165d2:	f015 fb17 	bl	802bc04 <sqrtf>
 80165d6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80165da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165de:	d12e      	bne.n	801663e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 80165e0:	ee79 7a6a 	vsub.f32	s15, s18, s21
 80165e4:	ee39 7acb 	vsub.f32	s14, s19, s22
 80165e8:	eeb0 8a6a 	vmov.f32	s16, s21
 80165ec:	eef0 8a4b 	vmov.f32	s17, s22
 80165f0:	eea7 8a8a 	vfma.f32	s16, s15, s20
 80165f4:	eee7 8a0a 	vfma.f32	s17, s14, s20
 80165f8:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80165fc:	eee7 8aca 	vfms.f32	s17, s15, s20
 8016600:	2d02      	cmp	r5, #2
 8016602:	dc2f      	bgt.n	8016664 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8016604:	3501      	adds	r5, #1
 8016606:	eef0 1a4b 	vmov.f32	s3, s22
 801660a:	eeb0 1a6a 	vmov.f32	s2, s21
 801660e:	4629      	mov	r1, r5
 8016610:	eef0 2a68 	vmov.f32	s5, s17
 8016614:	eeb0 2a48 	vmov.f32	s4, s16
 8016618:	eef0 0a4c 	vmov.f32	s1, s24
 801661c:	eeb0 0a6b 	vmov.f32	s0, s23
 8016620:	4620      	mov	r0, r4
 8016622:	f7ff ffb3 	bl	801658c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8016626:	eef0 0a68 	vmov.f32	s1, s17
 801662a:	eeb0 0a48 	vmov.f32	s0, s16
 801662e:	4620      	mov	r0, r4
 8016630:	f7ff ff55 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016634:	eeb0 ba68 	vmov.f32	s22, s17
 8016638:	eef0 aa48 	vmov.f32	s21, s16
 801663c:	e7b9      	b.n	80165b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 801663e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8016642:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8016646:	ee78 8acc 	vsub.f32	s17, s17, s24
 801664a:	ee28 7a27 	vmul.f32	s14, s16, s15
 801664e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016652:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8016656:	eec7 8a80 	vdiv.f32	s17, s15, s0
 801665a:	ee3b 8a88 	vadd.f32	s16, s23, s16
 801665e:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8016662:	e7cd      	b.n	8016600 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8016664:	eef0 0a68 	vmov.f32	s1, s17
 8016668:	eeb0 0a48 	vmov.f32	s0, s16
 801666c:	4620      	mov	r0, r4
 801666e:	f7ff ff36 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016672:	ecbd 8b0a 	vpop	{d8-d12}
 8016676:	bd38      	pop	{r3, r4, r5, pc}

08016678 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8016678:	b510      	push	{r4, lr}
 801667a:	ed2d 8b0a 	vpush	{d8-d12}
 801667e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8016682:	4604      	mov	r4, r0
 8016684:	2b02      	cmp	r3, #2
 8016686:	eeb0 ca40 	vmov.f32	s24, s0
 801668a:	eeb0 9a60 	vmov.f32	s18, s1
 801668e:	eef0 9a41 	vmov.f32	s19, s2
 8016692:	eef0 8a61 	vmov.f32	s17, s3
 8016696:	eeb0 ba42 	vmov.f32	s22, s4
 801669a:	eef0 ba62 	vmov.f32	s23, s5
 801669e:	eeb0 aa43 	vmov.f32	s20, s6
 80166a2:	eef0 aa63 	vmov.f32	s21, s7
 80166a6:	eeb0 8a44 	vmov.f32	s16, s8
 80166aa:	eef0 ca64 	vmov.f32	s25, s9
 80166ae:	d12c      	bne.n	801670a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 80166b0:	eef0 0a62 	vmov.f32	s1, s5
 80166b4:	eeb0 0a42 	vmov.f32	s0, s4
 80166b8:	f7ff ff11 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80166bc:	ee79 9acb 	vsub.f32	s19, s19, s22
 80166c0:	ee7a caec 	vsub.f32	s25, s21, s25
 80166c4:	ee78 8aeb 	vsub.f32	s17, s17, s23
 80166c8:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80166cc:	ee69 9aac 	vmul.f32	s19, s19, s25
 80166d0:	ee28 8a88 	vmul.f32	s16, s17, s16
 80166d4:	eef4 9ac8 	vcmpe.f32	s19, s16
 80166d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166dc:	db0f      	blt.n	80166fe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 80166de:	2101      	movs	r1, #1
 80166e0:	eef0 2a6a 	vmov.f32	s5, s21
 80166e4:	eeb0 2a4a 	vmov.f32	s4, s20
 80166e8:	eef0 1a6b 	vmov.f32	s3, s23
 80166ec:	eeb0 1a4b 	vmov.f32	s2, s22
 80166f0:	eef0 0a49 	vmov.f32	s1, s18
 80166f4:	eeb0 0a4c 	vmov.f32	s0, s24
 80166f8:	4620      	mov	r0, r4
 80166fa:	f7ff ff47 	bl	801658c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80166fe:	eef0 0a6a 	vmov.f32	s1, s21
 8016702:	eeb0 0a4a 	vmov.f32	s0, s20
 8016706:	4620      	mov	r0, r4
 8016708:	e035      	b.n	8016776 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 801670a:	2b01      	cmp	r3, #1
 801670c:	d138      	bne.n	8016780 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801670e:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8016712:	ee33 6a48 	vsub.f32	s12, s6, s16
 8016716:	ee71 7a42 	vsub.f32	s15, s2, s4
 801671a:	ee73 6ae4 	vsub.f32	s13, s7, s9
 801671e:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8016722:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016726:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801672a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801672e:	d027      	beq.n	8016780 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8016730:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8016734:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8016738:	eea4 8a83 	vfma.f32	s16, s9, s6
 801673c:	eee1 8a22 	vfma.f32	s17, s2, s5
 8016740:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8016744:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8016748:	eea6 8aa8 	vfma.f32	s16, s13, s17
 801674c:	eee6 7a28 	vfma.f32	s15, s12, s17
 8016750:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8016754:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8016758:	ee39 9a60 	vsub.f32	s18, s18, s1
 801675c:	ee3c ca40 	vsub.f32	s24, s24, s0
 8016760:	ee29 9a09 	vmul.f32	s18, s18, s18
 8016764:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8016768:	eeac 9a0c 	vfma.f32	s18, s24, s24
 801676c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8016770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016774:	db04      	blt.n	8016780 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8016776:	f7ff feb2 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801677a:	ecbd 8b0a 	vpop	{d8-d12}
 801677e:	bd10      	pop	{r4, pc}
 8016780:	eef0 0a6b 	vmov.f32	s1, s23
 8016784:	eeb0 0a4b 	vmov.f32	s0, s22
 8016788:	4620      	mov	r0, r4
 801678a:	f7ff fea8 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801678e:	e7b6      	b.n	80166fe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08016790 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8016790:	b510      	push	{r4, lr}
 8016792:	ed2d 8b0c 	vpush	{d8-d13}
 8016796:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801679a:	4604      	mov	r4, r0
 801679c:	eeb0 9a40 	vmov.f32	s18, s0
 80167a0:	eef0 9a60 	vmov.f32	s19, s1
 80167a4:	eef0 aa41 	vmov.f32	s21, s2
 80167a8:	eeb0 ba61 	vmov.f32	s22, s3
 80167ac:	b933      	cbnz	r3, 80167bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 80167ae:	f7ff fe96 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80167b2:	eef0 0a4b 	vmov.f32	s1, s22
 80167b6:	eeb0 0a6a 	vmov.f32	s0, s21
 80167ba:	e015      	b.n	80167e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 80167bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80167c0:	ee71 8a40 	vsub.f32	s17, s2, s0
 80167c4:	ee31 8ae0 	vsub.f32	s16, s3, s1
 80167c8:	2b02      	cmp	r3, #2
 80167ca:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80167ce:	ee28 8a27 	vmul.f32	s16, s16, s15
 80167d2:	d10f      	bne.n	80167f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 80167d4:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80167d8:	ee30 0a08 	vadd.f32	s0, s0, s16
 80167dc:	f7ff fe7f 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80167e0:	ee7b 0a68 	vsub.f32	s1, s22, s17
 80167e4:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80167e8:	4620      	mov	r0, r4
 80167ea:	f7ff fe78 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80167ee:	ecbd 8b0c 	vpop	{d8-d13}
 80167f2:	bd10      	pop	{r4, pc}
 80167f4:	f7ff fe73 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80167f8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8016930 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80167fc:	eef0 0a69 	vmov.f32	s1, s19
 8016800:	eeb0 0a49 	vmov.f32	s0, s18
 8016804:	eeb1 aa68 	vneg.f32	s20, s17
 8016808:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8016934 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 801680c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8016810:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016814:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8016818:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801681c:	4620      	mov	r0, r4
 801681e:	f7ff fe5e 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016822:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8016938 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8016826:	eef0 0a69 	vmov.f32	s1, s19
 801682a:	eeb0 0a49 	vmov.f32	s0, s18
 801682e:	ed9f ca43 	vldr	s24, [pc, #268]	@ 801693c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8016832:	eee8 0a27 	vfma.f32	s1, s16, s15
 8016836:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801683a:	eeea 0a0c 	vfma.f32	s1, s20, s24
 801683e:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8016842:	4620      	mov	r0, r4
 8016844:	f7ff fe4b 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016848:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8016940 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 801684c:	eef0 0a69 	vmov.f32	s1, s19
 8016850:	eeb0 0a49 	vmov.f32	s0, s18
 8016854:	eddf ca3b 	vldr	s25, [pc, #236]	@ 8016944 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8016858:	eee8 0a27 	vfma.f32	s1, s16, s15
 801685c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016860:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8016864:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8016868:	4620      	mov	r0, r4
 801686a:	f7ff fe38 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801686e:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8016948 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8016872:	eef0 0a69 	vmov.f32	s1, s19
 8016876:	eeb0 0a49 	vmov.f32	s0, s18
 801687a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801687e:	ed9f da33 	vldr	s26, [pc, #204]	@ 801694c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8016882:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016886:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801688a:	eea8 0a0d 	vfma.f32	s0, s16, s26
 801688e:	4620      	mov	r0, r4
 8016890:	f7ff fe25 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016894:	ee79 0a88 	vadd.f32	s1, s19, s16
 8016898:	ee39 0a28 	vadd.f32	s0, s18, s17
 801689c:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80168a0:	ee30 0a08 	vadd.f32	s0, s0, s16
 80168a4:	4620      	mov	r0, r4
 80168a6:	f7ff fe1a 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80168aa:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8016950 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 80168ae:	eef0 0a69 	vmov.f32	s1, s19
 80168b2:	eeb0 0a49 	vmov.f32	s0, s18
 80168b6:	eee8 0a27 	vfma.f32	s1, s16, s15
 80168ba:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80168be:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80168c2:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80168c6:	4620      	mov	r0, r4
 80168c8:	f7ff fe09 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80168cc:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8016954 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 80168d0:	eef0 0a69 	vmov.f32	s1, s19
 80168d4:	eeb0 0a49 	vmov.f32	s0, s18
 80168d8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80168dc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80168e0:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80168e4:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80168e8:	4620      	mov	r0, r4
 80168ea:	f7ff fdf8 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80168ee:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8016958 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80168f2:	eef0 0a69 	vmov.f32	s1, s19
 80168f6:	eeb0 0a49 	vmov.f32	s0, s18
 80168fa:	eee8 0a27 	vfma.f32	s1, s16, s15
 80168fe:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016902:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8016906:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801690a:	4620      	mov	r0, r4
 801690c:	f7ff fde7 	bl	80164de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8016910:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801695c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8016914:	eef0 0a69 	vmov.f32	s1, s19
 8016918:	eeb0 0a49 	vmov.f32	s0, s18
 801691c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8016920:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016924:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8016928:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801692c:	4620      	mov	r0, r4
 801692e:	e73e      	b.n	80167ae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8016930:	3d23d70a 	.word	0x3d23d70a
 8016934:	3e8f5c29 	.word	0x3e8f5c29
 8016938:	3e4ccccd 	.word	0x3e4ccccd
 801693c:	3f19999a 	.word	0x3f19999a
 8016940:	3ecccccd 	.word	0x3ecccccd
 8016944:	3f4ccccd 	.word	0x3f4ccccd
 8016948:	3f3851ec 	.word	0x3f3851ec
 801694c:	3f75c28f 	.word	0x3f75c28f
 8016950:	3fa3d70a 	.word	0x3fa3d70a
 8016954:	3fcccccd 	.word	0x3fcccccd
 8016958:	3fe66666 	.word	0x3fe66666
 801695c:	3ffae148 	.word	0x3ffae148

08016960 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8016960:	b570      	push	{r4, r5, r6, lr}
 8016962:	ed2d 8b06 	vpush	{d8-d10}
 8016966:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801696a:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 801696e:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8016972:	ee30 9a49 	vsub.f32	s18, s0, s18
 8016976:	eef0 aa40 	vmov.f32	s21, s0
 801697a:	ee28 0a08 	vmul.f32	s0, s16, s16
 801697e:	eea9 0a09 	vfma.f32	s0, s18, s18
 8016982:	4604      	mov	r4, r0
 8016984:	eeb0 aa60 	vmov.f32	s20, s1
 8016988:	f015 f93c 	bl	802bc04 <sqrtf>
 801698c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016994:	dd36      	ble.n	8016a04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8016996:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801699a:	eec0 6a27 	vdiv.f32	s13, s0, s15
 801699e:	2600      	movs	r6, #0
 80169a0:	eec8 8a26 	vdiv.f32	s17, s16, s13
 80169a4:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 80169a8:	ee89 8a26 	vdiv.f32	s16, s18, s13
 80169ac:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 80169b0:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 80169b4:	ee70 9a28 	vadd.f32	s19, s0, s17
 80169b8:	ee30 9ac8 	vsub.f32	s18, s1, s16
 80169bc:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80169c0:	ee78 8aaa 	vadd.f32	s17, s17, s21
 80169c4:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80169c8:	b1fd      	cbz	r5, 8016a0a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 80169ca:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 80169ce:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 80169d2:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 80169d6:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 80169da:	eef0 0a49 	vmov.f32	s1, s18
 80169de:	eeb0 0a69 	vmov.f32	s0, s19
 80169e2:	4620      	mov	r0, r4
 80169e4:	f7ff fd64 	bl	80164b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80169e8:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 80169ec:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 80169f0:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 80169f4:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 80169f8:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 80169fc:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8016a00:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8016a04:	ecbd 8b06 	vpop	{d8-d10}
 8016a08:	bd70      	pop	{r4, r5, r6, pc}
 8016a0a:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8016a0e:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8016a12:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8016a16:	b16b      	cbz	r3, 8016a34 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8016a18:	eef0 1a49 	vmov.f32	s3, s18
 8016a1c:	eeb0 1a69 	vmov.f32	s2, s19
 8016a20:	eef0 0a62 	vmov.f32	s1, s5
 8016a24:	eeb0 0a42 	vmov.f32	s0, s4
 8016a28:	4620      	mov	r0, r4
 8016a2a:	f7ff feb1 	bl	8016790 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8016a2e:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8016a32:	e7db      	b.n	80169ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8016a34:	eef0 4a48 	vmov.f32	s9, s16
 8016a38:	eeb0 4a68 	vmov.f32	s8, s17
 8016a3c:	eef0 3a49 	vmov.f32	s7, s18
 8016a40:	eeb0 3a69 	vmov.f32	s6, s19
 8016a44:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8016a48:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8016a4c:	4620      	mov	r0, r4
 8016a4e:	f7ff fe13 	bl	8016678 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8016a52:	e7cb      	b.n	80169ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08016a54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8016a54:	ee07 2a90 	vmov	s15, r2
 8016a58:	ee07 1a10 	vmov	s14, r1
 8016a5c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8016a60:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8016a64:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8016a74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8016a68:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8016a6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016a70:	f7ff bf76 	b.w	8016960 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016a74:	3d000000 	.word	0x3d000000

08016a78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8016a78:	b538      	push	{r3, r4, r5, lr}
 8016a7a:	ed2d 8b02 	vpush	{d8}
 8016a7e:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8016a82:	4604      	mov	r4, r0
 8016a84:	b31d      	cbz	r5, 8016ace <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8016a86:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8016a8a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8016a8e:	ee78 8a67 	vsub.f32	s17, s16, s15
 8016a92:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8016a96:	eef0 0a68 	vmov.f32	s1, s17
 8016a9a:	ee38 8a27 	vadd.f32	s16, s16, s15
 8016a9e:	f7ff fd07 	bl	80164b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8016aa2:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8016aa6:	eef0 1a48 	vmov.f32	s3, s16
 8016aaa:	eeb0 0a41 	vmov.f32	s0, s2
 8016aae:	eef0 0a68 	vmov.f32	s1, s17
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	f7ff fe6c 	bl	8016790 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8016ab8:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8016abc:	eef0 1a68 	vmov.f32	s3, s17
 8016ac0:	eef0 0a48 	vmov.f32	s1, s16
 8016ac4:	eeb0 0a41 	vmov.f32	s0, s2
 8016ac8:	4620      	mov	r0, r4
 8016aca:	f7ff fe61 	bl	8016790 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8016ace:	ecbd 8b02 	vpop	{d8}
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	bd38      	pop	{r3, r4, r5, pc}

08016ad6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8016ad6:	b510      	push	{r4, lr}
 8016ad8:	ed2d 8b02 	vpush	{d8}
 8016adc:	4604      	mov	r4, r0
 8016ade:	eeb0 8a40 	vmov.f32	s16, s0
 8016ae2:	eef0 8a60 	vmov.f32	s17, s1
 8016ae6:	f7ff ffc7 	bl	8016a78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016aea:	b9d0      	cbnz	r0, 8016b22 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8016aec:	4620      	mov	r0, r4
 8016aee:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8016af2:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8016af6:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8016afa:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8016afe:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8016b02:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8016b06:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8016b0a:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8016b0e:	eef0 0a68 	vmov.f32	s1, s17
 8016b12:	eeb0 0a48 	vmov.f32	s0, s16
 8016b16:	f7ff fdaf 	bl	8016678 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8016b1a:	2001      	movs	r0, #1
 8016b1c:	ecbd 8b02 	vpop	{d8}
 8016b20:	bd10      	pop	{r4, pc}
 8016b22:	2000      	movs	r0, #0
 8016b24:	e7fa      	b.n	8016b1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08016b26 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8016b26:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8016b2a:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8016b2e:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8016b32:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8016b36:	f7ff be2b 	b.w	8016790 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08016b3c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8016b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b40:	b089      	sub	sp, #36	@ 0x24
 8016b42:	461c      	mov	r4, r3
 8016b44:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8016b48:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8016b4c:	4682      	mov	sl, r0
 8016b4e:	9304      	str	r3, [sp, #16]
 8016b50:	2300      	movs	r3, #0
 8016b52:	4615      	mov	r5, r2
 8016b54:	f10d 0820 	add.w	r8, sp, #32
 8016b58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8016b5a:	9306      	str	r3, [sp, #24]
 8016b5c:	f848 3d04 	str.w	r3, [r8, #-4]!
 8016b60:	9b04      	ldr	r3, [sp, #16]
 8016b62:	9105      	str	r1, [sp, #20]
 8016b64:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8016b68:	9b05      	ldr	r3, [sp, #20]
 8016b6a:	429d      	cmp	r5, r3
 8016b6c:	d96d      	bls.n	8016c4a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8016b6e:	3d01      	subs	r5, #1
 8016b70:	f819 3005 	ldrb.w	r3, [r9, r5]
 8016b74:	2b06      	cmp	r3, #6
 8016b76:	d8f7      	bhi.n	8016b68 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8016b78:	a201      	add	r2, pc, #4	@ (adr r2, 8016b80 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8016b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b7e:	bf00      	nop
 8016b80:	08016b9f 	.word	0x08016b9f
 8016b84:	08016b69 	.word	0x08016b69
 8016b88:	08016b9d 	.word	0x08016b9d
 8016b8c:	08016bc1 	.word	0x08016bc1
 8016b90:	08016bc1 	.word	0x08016bc1
 8016b94:	08016bc5 	.word	0x08016bc5
 8016b98:	08016c05 	.word	0x08016c05
 8016b9c:	3c02      	subs	r4, #2
 8016b9e:	4650      	mov	r0, sl
 8016ba0:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8016ba4:	9400      	str	r4, [sp, #0]
 8016ba6:	462b      	mov	r3, r5
 8016ba8:	4642      	mov	r2, r8
 8016baa:	a906      	add	r1, sp, #24
 8016bac:	f7ff fcae 	bl	801650c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8016bb0:	eddd 0a07 	vldr	s1, [sp, #28]
 8016bb4:	ed9d 0a06 	vldr	s0, [sp, #24]
 8016bb8:	4630      	mov	r0, r6
 8016bba:	f7ff fed1 	bl	8016960 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016bbe:	e7d3      	b.n	8016b68 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8016bc0:	3c01      	subs	r4, #1
 8016bc2:	e7ec      	b.n	8016b9e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8016bc4:	f1a4 0b04 	sub.w	fp, r4, #4
 8016bc8:	3c02      	subs	r4, #2
 8016bca:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8016bce:	4650      	mov	r0, sl
 8016bd0:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8016bd4:	f8cd b000 	str.w	fp, [sp]
 8016bd8:	462b      	mov	r3, r5
 8016bda:	4642      	mov	r2, r8
 8016bdc:	a906      	add	r1, sp, #24
 8016bde:	f7ff fc95 	bl	801650c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8016be2:	eddd 2a07 	vldr	s5, [sp, #28]
 8016be6:	ed9d 2a06 	vldr	s4, [sp, #24]
 8016bea:	ed54 1a01 	vldr	s3, [r4, #-4]
 8016bee:	ed14 1a02 	vldr	s2, [r4, #-8]
 8016bf2:	edd4 0a01 	vldr	s1, [r4, #4]
 8016bf6:	ed94 0a00 	vldr	s0, [r4]
 8016bfa:	4630      	mov	r0, r6
 8016bfc:	f7ff fc1a 	bl	8016434 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8016c00:	465c      	mov	r4, fp
 8016c02:	e7b1      	b.n	8016b68 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8016c04:	f1a4 0b06 	sub.w	fp, r4, #6
 8016c08:	3c02      	subs	r4, #2
 8016c0a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8016c0e:	4650      	mov	r0, sl
 8016c10:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8016c14:	f8cd b000 	str.w	fp, [sp]
 8016c18:	462b      	mov	r3, r5
 8016c1a:	4642      	mov	r2, r8
 8016c1c:	a906      	add	r1, sp, #24
 8016c1e:	f7ff fc75 	bl	801650c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8016c22:	eddd 3a07 	vldr	s7, [sp, #28]
 8016c26:	ed9d 3a06 	vldr	s6, [sp, #24]
 8016c2a:	ed54 2a03 	vldr	s5, [r4, #-12]
 8016c2e:	ed14 2a04 	vldr	s4, [r4, #-16]
 8016c32:	ed54 1a01 	vldr	s3, [r4, #-4]
 8016c36:	ed14 1a02 	vldr	s2, [r4, #-8]
 8016c3a:	edd4 0a01 	vldr	s1, [r4, #4]
 8016c3e:	ed94 0a00 	vldr	s0, [r4]
 8016c42:	4630      	mov	r0, r6
 8016c44:	f7ff fc15 	bl	8016472 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8016c48:	e7da      	b.n	8016c00 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8016c4a:	9b04      	ldr	r3, [sp, #16]
 8016c4c:	b113      	cbz	r3, 8016c54 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8016c4e:	4630      	mov	r0, r6
 8016c50:	f7ff ff69 	bl	8016b26 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8016c54:	b009      	add	sp, #36	@ 0x24
 8016c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c5a:	bf00      	nop

08016c5c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8016c5c:	eef0 7a60 	vmov.f32	s15, s1
 8016c60:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016c64:	ee17 2a90 	vmov	r2, s15
 8016c68:	eef0 7a40 	vmov.f32	s15, s0
 8016c6c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016c70:	6803      	ldr	r3, [r0, #0]
 8016c72:	ee17 1a90 	vmov	r1, s15
 8016c76:	689b      	ldr	r3, [r3, #8]
 8016c78:	4718      	bx	r3
	...

08016c7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8016c7c:	b510      	push	{r4, lr}
 8016c7e:	4604      	mov	r4, r0
 8016c80:	4b03      	ldr	r3, [pc, #12]	@ (8016c90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8016c82:	f840 3b14 	str.w	r3, [r0], #20
 8016c86:	f000 fe43 	bl	8017910 <_ZN8touchgfx7OutlineD1Ev>
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	bd10      	pop	{r4, pc}
 8016c8e:	bf00      	nop
 8016c90:	0802fdbc 	.word	0x0802fdbc

08016c94 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8016c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c98:	ed2d 8b04 	vpush	{d8-d9}
 8016c9c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8016ca0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ca8:	b0b5      	sub	sp, #212	@ 0xd4
 8016caa:	4605      	mov	r5, r0
 8016cac:	468b      	mov	fp, r1
 8016cae:	9206      	str	r2, [sp, #24]
 8016cb0:	461e      	mov	r6, r3
 8016cb2:	f04f 0400 	mov.w	r4, #0
 8016cb6:	f240 814e 	bls.w	8016f56 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8016cba:	23ff      	movs	r3, #255	@ 0xff
 8016cbc:	9300      	str	r3, [sp, #0]
 8016cbe:	1d02      	adds	r2, r0, #4
 8016cc0:	6981      	ldr	r1, [r0, #24]
 8016cc2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016cc4:	a808      	add	r0, sp, #32
 8016cc6:	f014 fb13 	bl	802b2f0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8016cca:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8016cce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cd6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8016cda:	bf48      	it	mi
 8016cdc:	eef1 7a67 	vnegmi.f32	s15, s15
 8016ce0:	edd5 6a08 	vldr	s13, [r5, #32]
 8016ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016ce8:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8016cec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016cf0:	ed9f 9a9a 	vldr	s18, [pc, #616]	@ 8016f5c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8016cf4:	f04f 0800 	mov.w	r8, #0
 8016cf8:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8016cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d00:	4b97      	ldr	r3, [pc, #604]	@ (8016f60 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8016d02:	2201      	movs	r2, #1
 8016d04:	9308      	str	r3, [sp, #32]
 8016d06:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8016d0a:	9325      	str	r3, [sp, #148]	@ 0x94
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	942a      	str	r4, [sp, #168]	@ 0xa8
 8016d10:	942b      	str	r4, [sp, #172]	@ 0xac
 8016d12:	942c      	str	r4, [sp, #176]	@ 0xb0
 8016d14:	942d      	str	r4, [sp, #180]	@ 0xb4
 8016d16:	942e      	str	r4, [sp, #184]	@ 0xb8
 8016d18:	942f      	str	r4, [sp, #188]	@ 0xbc
 8016d1a:	9430      	str	r4, [sp, #192]	@ 0xc0
 8016d1c:	9431      	str	r4, [sp, #196]	@ 0xc4
 8016d1e:	9432      	str	r4, [sp, #200]	@ 0xc8
 8016d20:	9433      	str	r4, [sp, #204]	@ 0xcc
 8016d22:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8016d26:	eef0 9a49 	vmov.f32	s19, s18
 8016d2a:	eeb0 8a49 	vmov.f32	s16, s18
 8016d2e:	eef0 8a49 	vmov.f32	s17, s18
 8016d32:	4644      	mov	r4, r8
 8016d34:	46c1      	mov	r9, r8
 8016d36:	f04f 0a01 	mov.w	sl, #1
 8016d3a:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8016d3e:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8016d42:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8016d46:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8016d4a:	7f6a      	ldrb	r2, [r5, #29]
 8016d4c:	7fab      	ldrb	r3, [r5, #30]
 8016d4e:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8016d52:	435a      	muls	r2, r3
 8016d54:	1c53      	adds	r3, r2, #1
 8016d56:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8016d5a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016d5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016d62:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8016d66:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8016d6a:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8016d6e:	af08      	add	r7, sp, #32
 8016d70:	9b06      	ldr	r3, [sp, #24]
 8016d72:	454b      	cmp	r3, r9
 8016d74:	f000 80cc 	beq.w	8016f10 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8016d78:	f109 0301 	add.w	r3, r9, #1
 8016d7c:	9305      	str	r3, [sp, #20]
 8016d7e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8016d82:	2b06      	cmp	r3, #6
 8016d84:	d839      	bhi.n	8016dfa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016d86:	e8df f003 	tbb	[pc, r3]
 8016d8a:	3b04      	.short	0x3b04
 8016d8c:	817c6f60 	.word	0x817c6f60
 8016d90:	a0          	.byte	0xa0
 8016d91:	00          	.byte	0x00
 8016d92:	45c1      	cmp	r9, r8
 8016d94:	d92b      	bls.n	8016dee <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8016d96:	eef0 0a49 	vmov.f32	s1, s18
 8016d9a:	eeb0 0a69 	vmov.f32	s0, s19
 8016d9e:	4638      	mov	r0, r7
 8016da0:	f7ff fdde 	bl	8016960 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016da4:	4638      	mov	r0, r7
 8016da6:	f7ff fe67 	bl	8016a78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016daa:	4681      	mov	r9, r0
 8016dac:	b9f8      	cbnz	r0, 8016dee <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8016dae:	eef0 0a49 	vmov.f32	s1, s18
 8016db2:	eeb0 0a69 	vmov.f32	s0, s19
 8016db6:	4638      	mov	r0, r7
 8016db8:	f7ff fe8d 	bl	8016ad6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8016dbc:	4628      	mov	r0, r5
 8016dbe:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8016dc2:	e9cd b600 	strd	fp, r6, [sp]
 8016dc6:	4623      	mov	r3, r4
 8016dc8:	9a05      	ldr	r2, [sp, #20]
 8016dca:	4641      	mov	r1, r8
 8016dcc:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8016dd0:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8016dd4:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8016dd8:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8016ddc:	f7ff feae 	bl	8016b3c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016de0:	eef0 0a49 	vmov.f32	s1, s18
 8016de4:	eeb0 0a69 	vmov.f32	s0, s19
 8016de8:	4638      	mov	r0, r7
 8016dea:	f7ff fe74 	bl	8016ad6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8016dee:	eeb0 8a49 	vmov.f32	s16, s18
 8016df2:	eef0 8a69 	vmov.f32	s17, s19
 8016df6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016dfa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016dfe:	e7b7      	b.n	8016d70 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8016e00:	45c1      	cmp	r9, r8
 8016e02:	d90d      	bls.n	8016e20 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8016e04:	4638      	mov	r0, r7
 8016e06:	f7ff fe37 	bl	8016a78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016e0a:	b948      	cbnz	r0, 8016e20 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8016e0c:	e9cd a702 	strd	sl, r7, [sp, #8]
 8016e10:	e9cd b600 	strd	fp, r6, [sp]
 8016e14:	4623      	mov	r3, r4
 8016e16:	464a      	mov	r2, r9
 8016e18:	4641      	mov	r1, r8
 8016e1a:	4628      	mov	r0, r5
 8016e1c:	f7ff fe8e 	bl	8016b3c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016e20:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016e24:	edd3 8a00 	vldr	s17, [r3]
 8016e28:	ed93 8a01 	vldr	s16, [r3, #4]
 8016e2c:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8016e30:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8016e34:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8016e38:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8016e3c:	3402      	adds	r4, #2
 8016e3e:	46c8      	mov	r8, r9
 8016e40:	eeb0 9a48 	vmov.f32	s18, s16
 8016e44:	eef0 9a68 	vmov.f32	s19, s17
 8016e48:	e7d7      	b.n	8016dfa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016e4a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016e4e:	edd3 8a00 	vldr	s17, [r3]
 8016e52:	ed93 8a01 	vldr	s16, [r3, #4]
 8016e56:	eeb0 0a68 	vmov.f32	s0, s17
 8016e5a:	eef0 0a48 	vmov.f32	s1, s16
 8016e5e:	4638      	mov	r0, r7
 8016e60:	f7ff fd7e 	bl	8016960 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016e64:	3402      	adds	r4, #2
 8016e66:	e7c8      	b.n	8016dfa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016e68:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016e6c:	edd3 8a00 	vldr	s17, [r3]
 8016e70:	eef0 0a48 	vmov.f32	s1, s16
 8016e74:	eeb0 0a68 	vmov.f32	s0, s17
 8016e78:	4638      	mov	r0, r7
 8016e7a:	f7ff fd71 	bl	8016960 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016e7e:	3401      	adds	r4, #1
 8016e80:	e7bb      	b.n	8016dfa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016e82:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016e86:	ed93 8a00 	vldr	s16, [r3]
 8016e8a:	e7f1      	b.n	8016e70 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8016e8c:	00a3      	lsls	r3, r4, #2
 8016e8e:	f103 0208 	add.w	r2, r3, #8
 8016e92:	f103 090c 	add.w	r9, r3, #12
 8016e96:	4432      	add	r2, r6
 8016e98:	4433      	add	r3, r6
 8016e9a:	44b1      	add	r9, r6
 8016e9c:	ed92 2a00 	vldr	s4, [r2]
 8016ea0:	eef0 0a48 	vmov.f32	s1, s16
 8016ea4:	eeb0 0a68 	vmov.f32	s0, s17
 8016ea8:	edd9 2a00 	vldr	s5, [r9]
 8016eac:	edd3 1a01 	vldr	s3, [r3, #4]
 8016eb0:	ed93 1a00 	vldr	s2, [r3]
 8016eb4:	4638      	mov	r0, r7
 8016eb6:	9207      	str	r2, [sp, #28]
 8016eb8:	f7ff fabc 	bl	8016434 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8016ebc:	9a07      	ldr	r2, [sp, #28]
 8016ebe:	ed99 8a00 	vldr	s16, [r9]
 8016ec2:	edd2 8a00 	vldr	s17, [r2]
 8016ec6:	3404      	adds	r4, #4
 8016ec8:	e797      	b.n	8016dfa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016eca:	00a3      	lsls	r3, r4, #2
 8016ecc:	f103 0210 	add.w	r2, r3, #16
 8016ed0:	f103 0914 	add.w	r9, r3, #20
 8016ed4:	4432      	add	r2, r6
 8016ed6:	4433      	add	r3, r6
 8016ed8:	44b1      	add	r9, r6
 8016eda:	ed92 3a00 	vldr	s6, [r2]
 8016ede:	eef0 0a48 	vmov.f32	s1, s16
 8016ee2:	eeb0 0a68 	vmov.f32	s0, s17
 8016ee6:	edd9 3a00 	vldr	s7, [r9]
 8016eea:	edd3 2a03 	vldr	s5, [r3, #12]
 8016eee:	ed93 2a02 	vldr	s4, [r3, #8]
 8016ef2:	edd3 1a01 	vldr	s3, [r3, #4]
 8016ef6:	ed93 1a00 	vldr	s2, [r3]
 8016efa:	4638      	mov	r0, r7
 8016efc:	9207      	str	r2, [sp, #28]
 8016efe:	f7ff fab8 	bl	8016472 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8016f02:	9a07      	ldr	r2, [sp, #28]
 8016f04:	ed99 8a00 	vldr	s16, [r9]
 8016f08:	edd2 8a00 	vldr	s17, [r2]
 8016f0c:	3406      	adds	r4, #6
 8016f0e:	e774      	b.n	8016dfa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016f10:	9b06      	ldr	r3, [sp, #24]
 8016f12:	af08      	add	r7, sp, #32
 8016f14:	4543      	cmp	r3, r8
 8016f16:	d90f      	bls.n	8016f38 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8016f18:	4638      	mov	r0, r7
 8016f1a:	f7ff fdad 	bl	8016a78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016f1e:	b958      	cbnz	r0, 8016f38 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8016f20:	2301      	movs	r3, #1
 8016f22:	9703      	str	r7, [sp, #12]
 8016f24:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8016f28:	f8cd b000 	str.w	fp, [sp]
 8016f2c:	4623      	mov	r3, r4
 8016f2e:	9a06      	ldr	r2, [sp, #24]
 8016f30:	4641      	mov	r1, r8
 8016f32:	4628      	mov	r0, r5
 8016f34:	f7ff fe02 	bl	8016b3c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016f38:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8016f3c:	4638      	mov	r0, r7
 8016f3e:	f014 fa6b 	bl	802b418 <_ZN8touchgfx6Canvas6renderEh>
 8016f42:	4604      	mov	r4, r0
 8016f44:	4638      	mov	r0, r7
 8016f46:	f7ff fe99 	bl	8016c7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	b035      	add	sp, #212	@ 0xd4
 8016f4e:	ecbd 8b04 	vpop	{d8-d9}
 8016f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f56:	2401      	movs	r4, #1
 8016f58:	e7f7      	b.n	8016f4a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8016f5a:	bf00      	nop
 8016f5c:	00000000 	.word	0x00000000
 8016f60:	0802f688 	.word	0x0802f688

08016f64 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8016f64:	b510      	push	{r4, lr}
 8016f66:	4604      	mov	r4, r0
 8016f68:	f7ff fe88 	bl	8016c7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8016f6c:	4620      	mov	r0, r4
 8016f6e:	21b0      	movs	r1, #176	@ 0xb0
 8016f70:	f014 fe1f 	bl	802bbb2 <_ZdlPvj>
 8016f74:	4620      	mov	r0, r4
 8016f76:	bd10      	pop	{r4, pc}

08016f78 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8016f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f7c:	ed2d 8b06 	vpush	{d8-d10}
 8016f80:	4698      	mov	r8, r3
 8016f82:	23ff      	movs	r3, #255	@ 0xff
 8016f84:	4607      	mov	r7, r0
 8016f86:	b0aa      	sub	sp, #168	@ 0xa8
 8016f88:	9300      	str	r3, [sp, #0]
 8016f8a:	4689      	mov	r9, r1
 8016f8c:	4692      	mov	sl, r2
 8016f8e:	6981      	ldr	r1, [r0, #24]
 8016f90:	1d02      	adds	r2, r0, #4
 8016f92:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8016f94:	a80d      	add	r0, sp, #52	@ 0x34
 8016f96:	f014 f9ab 	bl	802b2f0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8016f9a:	eddf 0a80 	vldr	s1, [pc, #512]	@ 801719c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8016f9e:	7f3b      	ldrb	r3, [r7, #28]
 8016fa0:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8016fa4:	1e5a      	subs	r2, r3, #1
 8016fa6:	4253      	negs	r3, r2
 8016fa8:	4153      	adcs	r3, r2
 8016faa:	eeb0 0a60 	vmov.f32	s0, s1
 8016fae:	4628      	mov	r0, r5
 8016fb0:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8016fb4:	ed9f 8a79 	vldr	s16, [pc, #484]	@ 801719c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8016fb8:	f004 f9a3 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016fbc:	eef0 8a48 	vmov.f32	s17, s16
 8016fc0:	eeb0 9a40 	vmov.f32	s18, s0
 8016fc4:	eef0 9a60 	vmov.f32	s19, s1
 8016fc8:	2400      	movs	r4, #0
 8016fca:	44ca      	add	sl, r9
 8016fcc:	45ca      	cmp	sl, r9
 8016fce:	f000 80cd 	beq.w	801716c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8016fd2:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016fd6:	2b06      	cmp	r3, #6
 8016fd8:	d8f8      	bhi.n	8016fcc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8016fda:	e8df f003 	tbb	[pc, r3]
 8016fde:	0804      	.short	0x0804
 8016fe0:	58533f2a 	.word	0x58533f2a
 8016fe4:	8a          	.byte	0x8a
 8016fe5:	00          	.byte	0x00
 8016fe6:	a80d      	add	r0, sp, #52	@ 0x34
 8016fe8:	f014 f9f4 	bl	802b3d4 <_ZN8touchgfx6Canvas5closeEv>
 8016fec:	e7ee      	b.n	8016fcc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8016fee:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8016ff2:	edd3 8a00 	vldr	s17, [r3]
 8016ff6:	ed93 8a01 	vldr	s16, [r3, #4]
 8016ffa:	eeb0 0a68 	vmov.f32	s0, s17
 8016ffe:	eef0 0a48 	vmov.f32	s1, s16
 8017002:	4628      	mov	r0, r5
 8017004:	f004 f97d 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017008:	eef0 7a60 	vmov.f32	s15, s1
 801700c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8017010:	ee17 2a90 	vmov	r2, s15
 8017014:	eef0 7a40 	vmov.f32	s15, s0
 8017018:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801701c:	a80d      	add	r0, sp, #52	@ 0x34
 801701e:	ee17 1a90 	vmov	r1, s15
 8017022:	eeb0 9a40 	vmov.f32	s18, s0
 8017026:	eef0 9a60 	vmov.f32	s19, s1
 801702a:	f014 faad 	bl	802b588 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801702e:	3402      	adds	r4, #2
 8017030:	e7cc      	b.n	8016fcc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8017032:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017036:	edd3 8a00 	vldr	s17, [r3]
 801703a:	ed93 8a01 	vldr	s16, [r3, #4]
 801703e:	eeb0 0a68 	vmov.f32	s0, s17
 8017042:	eef0 0a48 	vmov.f32	s1, s16
 8017046:	4628      	mov	r0, r5
 8017048:	f004 f95b 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801704c:	a80d      	add	r0, sp, #52	@ 0x34
 801704e:	eeb0 9a40 	vmov.f32	s18, s0
 8017052:	eef0 9a60 	vmov.f32	s19, s1
 8017056:	f7ff fe01 	bl	8016c5c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801705a:	e7e8      	b.n	801702e <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 801705c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017060:	edd3 8a00 	vldr	s17, [r3]
 8017064:	eef0 0a48 	vmov.f32	s1, s16
 8017068:	eeb0 0a68 	vmov.f32	s0, s17
 801706c:	4628      	mov	r0, r5
 801706e:	f004 f948 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017072:	a80d      	add	r0, sp, #52	@ 0x34
 8017074:	eeb0 9a40 	vmov.f32	s18, s0
 8017078:	eef0 9a60 	vmov.f32	s19, s1
 801707c:	3401      	adds	r4, #1
 801707e:	f7ff fded 	bl	8016c5c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8017082:	e7a3      	b.n	8016fcc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8017084:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017088:	ed93 8a00 	vldr	s16, [r3]
 801708c:	e7ea      	b.n	8017064 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 801708e:	1ca3      	adds	r3, r4, #2
 8017090:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8017094:	ed53 0a01 	vldr	s1, [r3, #-4]
 8017098:	ed13 0a02 	vldr	s0, [r3, #-8]
 801709c:	4628      	mov	r0, r5
 801709e:	edd3 8a00 	vldr	s17, [r3]
 80170a2:	ed93 8a01 	vldr	s16, [r3, #4]
 80170a6:	f004 f92c 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80170aa:	4628      	mov	r0, r5
 80170ac:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80170b0:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80170b4:	eeb0 0a68 	vmov.f32	s0, s17
 80170b8:	eef0 0a48 	vmov.f32	s1, s16
 80170bc:	f004 f921 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80170c0:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 80170c4:	eef0 2a60 	vmov.f32	s5, s1
 80170c8:	eeb0 2a40 	vmov.f32	s4, s0
 80170cc:	eeb0 aa40 	vmov.f32	s20, s0
 80170d0:	eef0 aa60 	vmov.f32	s21, s1
 80170d4:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 80170d8:	eef0 0a69 	vmov.f32	s1, s19
 80170dc:	eeb0 0a49 	vmov.f32	s0, s18
 80170e0:	a80d      	add	r0, sp, #52	@ 0x34
 80170e2:	f7ff f9a7 	bl	8016434 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80170e6:	3404      	adds	r4, #4
 80170e8:	eef0 9a6a 	vmov.f32	s19, s21
 80170ec:	eeb0 9a4a 	vmov.f32	s18, s20
 80170f0:	e76c      	b.n	8016fcc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80170f2:	1d26      	adds	r6, r4, #4
 80170f4:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80170f8:	ed56 0a03 	vldr	s1, [r6, #-12]
 80170fc:	ed16 0a04 	vldr	s0, [r6, #-16]
 8017100:	4628      	mov	r0, r5
 8017102:	edd6 8a00 	vldr	s17, [r6]
 8017106:	ed96 8a01 	vldr	s16, [r6, #4]
 801710a:	f004 f8fa 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801710e:	4628      	mov	r0, r5
 8017110:	ed8d 0a07 	vstr	s0, [sp, #28]
 8017114:	edcd 0a08 	vstr	s1, [sp, #32]
 8017118:	ed16 0a02 	vldr	s0, [r6, #-8]
 801711c:	ed56 0a01 	vldr	s1, [r6, #-4]
 8017120:	f004 f8ef 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017124:	4628      	mov	r0, r5
 8017126:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 801712a:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801712e:	eeb0 0a68 	vmov.f32	s0, s17
 8017132:	eef0 0a48 	vmov.f32	s1, s16
 8017136:	f004 f8e4 	bl	801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801713a:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 801713e:	eef0 3a60 	vmov.f32	s7, s1
 8017142:	eeb0 3a40 	vmov.f32	s6, s0
 8017146:	eeb0 aa40 	vmov.f32	s20, s0
 801714a:	eef0 aa60 	vmov.f32	s21, s1
 801714e:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8017152:	eddd 1a08 	vldr	s3, [sp, #32]
 8017156:	ed9d 1a07 	vldr	s2, [sp, #28]
 801715a:	eef0 0a69 	vmov.f32	s1, s19
 801715e:	eeb0 0a49 	vmov.f32	s0, s18
 8017162:	a80d      	add	r0, sp, #52	@ 0x34
 8017164:	f7ff f985 	bl	8016472 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8017168:	3406      	adds	r4, #6
 801716a:	e7bd      	b.n	80170e8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 801716c:	7f7b      	ldrb	r3, [r7, #29]
 801716e:	7fb9      	ldrb	r1, [r7, #30]
 8017170:	a80d      	add	r0, sp, #52	@ 0x34
 8017172:	4359      	muls	r1, r3
 8017174:	1c4b      	adds	r3, r1, #1
 8017176:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801717a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801717e:	f014 f94b 	bl	802b418 <_ZN8touchgfx6Canvas6renderEh>
 8017182:	4604      	mov	r4, r0
 8017184:	4b06      	ldr	r3, [pc, #24]	@ (80171a0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8017186:	a812      	add	r0, sp, #72	@ 0x48
 8017188:	930d      	str	r3, [sp, #52]	@ 0x34
 801718a:	f000 fbc1 	bl	8017910 <_ZN8touchgfx7OutlineD1Ev>
 801718e:	4620      	mov	r0, r4
 8017190:	b02a      	add	sp, #168	@ 0xa8
 8017192:	ecbd 8b06 	vpop	{d8-d10}
 8017196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801719a:	bf00      	nop
 801719c:	00000000 	.word	0x00000000
 80171a0:	0802fdbc 	.word	0x0802fdbc

080171a4 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 80171a4:	b410      	push	{r4}
 80171a6:	7f04      	ldrb	r4, [r0, #28]
 80171a8:	b11c      	cbz	r4, 80171b2 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 80171aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171ae:	f7ff bee3 	b.w	8016f78 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 80171b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171b6:	f7ff bd6d 	b.w	8016c94 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

080171bc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 80171bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c0:	4691      	mov	r9, r2
 80171c2:	4602      	mov	r2, r0
 80171c4:	4605      	mov	r5, r0
 80171c6:	f852 0f26 	ldr.w	r0, [r2, #38]!
 80171ca:	b085      	sub	sp, #20
 80171cc:	4688      	mov	r8, r1
 80171ce:	6851      	ldr	r1, [r2, #4]
 80171d0:	469a      	mov	sl, r3
 80171d2:	ab02      	add	r3, sp, #8
 80171d4:	c303      	stmia	r3!, {r0, r1}
 80171d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80171da:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80171de:	2b00      	cmp	r3, #0
 80171e0:	af02      	add	r7, sp, #8
 80171e2:	dd08      	ble.n	80171f6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80171e4:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 80171e8:	2c00      	cmp	r4, #0
 80171ea:	dd04      	ble.n	80171f6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80171ec:	4a2e      	ldr	r2, [pc, #184]	@ (80172a8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 80171ee:	7812      	ldrb	r2, [r2, #0]
 80171f0:	b122      	cbz	r2, 80171fc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 80171f2:	2a01      	cmp	r2, #1
 80171f4:	d02d      	beq.n	8017252 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 80171f6:	b005      	add	sp, #20
 80171f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017200:	441c      	add	r4, r3
 8017202:	b2a4      	uxth	r4, r4
 8017204:	b226      	sxth	r6, r4
 8017206:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801720a:	42b3      	cmp	r3, r6
 801720c:	daf3      	bge.n	80171f6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 801720e:	e9cd b700 	strd	fp, r7, [sp]
 8017212:	4653      	mov	r3, sl
 8017214:	464a      	mov	r2, r9
 8017216:	4641      	mov	r1, r8
 8017218:	4628      	mov	r0, r5
 801721a:	f7ff ffc3 	bl	80171a4 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 801721e:	b940      	cbnz	r0, 8017232 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8017220:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017224:	2b01      	cmp	r3, #1
 8017226:	d004      	beq.n	8017232 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8017228:	3301      	adds	r3, #1
 801722a:	105b      	asrs	r3, r3, #1
 801722c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017230:	e7ed      	b.n	801720e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 8017232:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8017236:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801723a:	4413      	add	r3, r2
 801723c:	b29b      	uxth	r3, r3
 801723e:	441a      	add	r2, r3
 8017240:	b212      	sxth	r2, r2
 8017242:	4296      	cmp	r6, r2
 8017244:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017248:	dadd      	bge.n	8017206 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 801724a:	1ae3      	subs	r3, r4, r3
 801724c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017250:	e7d9      	b.n	8017206 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8017252:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8017256:	441c      	add	r4, r3
 8017258:	b2a4      	uxth	r4, r4
 801725a:	b226      	sxth	r6, r4
 801725c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017260:	42b3      	cmp	r3, r6
 8017262:	dac8      	bge.n	80171f6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8017264:	e9cd b700 	strd	fp, r7, [sp]
 8017268:	4653      	mov	r3, sl
 801726a:	464a      	mov	r2, r9
 801726c:	4641      	mov	r1, r8
 801726e:	4628      	mov	r0, r5
 8017270:	f7ff ff98 	bl	80171a4 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8017274:	b940      	cbnz	r0, 8017288 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8017276:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801727a:	2b01      	cmp	r3, #1
 801727c:	d004      	beq.n	8017288 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 801727e:	3301      	adds	r3, #1
 8017280:	105b      	asrs	r3, r3, #1
 8017282:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017286:	e7ed      	b.n	8017264 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 8017288:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801728c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017290:	4413      	add	r3, r2
 8017292:	b29b      	uxth	r3, r3
 8017294:	441a      	add	r2, r3
 8017296:	b212      	sxth	r2, r2
 8017298:	4296      	cmp	r6, r2
 801729a:	f8ad 3008 	strh.w	r3, [sp, #8]
 801729e:	dadd      	bge.n	801725c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 80172a0:	1ae3      	subs	r3, r4, r3
 80172a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80172a6:	e7d9      	b.n	801725c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 80172a8:	2005ba9c 	.word	0x2005ba9c

080172ac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80172ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80172ae:	6803      	ldr	r3, [r0, #0]
 80172b0:	460d      	mov	r5, r1
 80172b2:	4604      	mov	r4, r0
 80172b4:	4601      	mov	r1, r0
 80172b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80172b8:	a802      	add	r0, sp, #8
 80172ba:	4798      	blx	r3
 80172bc:	466b      	mov	r3, sp
 80172be:	6828      	ldr	r0, [r5, #0]
 80172c0:	6869      	ldr	r1, [r5, #4]
 80172c2:	c303      	stmia	r3!, {r0, r1}
 80172c4:	4668      	mov	r0, sp
 80172c6:	4619      	mov	r1, r3
 80172c8:	f7fc fec6 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 80172cc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80172ce:	b188      	cbz	r0, 80172f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80172d0:	6803      	ldr	r3, [r0, #0]
 80172d2:	1d21      	adds	r1, r4, #4
 80172d4:	68db      	ldr	r3, [r3, #12]
 80172d6:	4798      	blx	r3
 80172d8:	b160      	cbz	r0, 80172f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80172da:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	dd08      	ble.n	80172f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80172e2:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80172e6:	2d00      	cmp	r5, #0
 80172e8:	dd04      	ble.n	80172f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80172ea:	4a2b      	ldr	r2, [pc, #172]	@ (8017398 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80172ec:	7812      	ldrb	r2, [r2, #0]
 80172ee:	b11a      	cbz	r2, 80172f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80172f0:	2a01      	cmp	r2, #1
 80172f2:	d029      	beq.n	8017348 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80172f4:	b004      	add	sp, #16
 80172f6:	bd70      	pop	{r4, r5, r6, pc}
 80172f8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80172fc:	441d      	add	r5, r3
 80172fe:	b2ad      	uxth	r5, r5
 8017300:	b22e      	sxth	r6, r5
 8017302:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8017306:	42b3      	cmp	r3, r6
 8017308:	daf4      	bge.n	80172f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801730a:	6823      	ldr	r3, [r4, #0]
 801730c:	4669      	mov	r1, sp
 801730e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017310:	4620      	mov	r0, r4
 8017312:	4798      	blx	r3
 8017314:	b940      	cbnz	r0, 8017328 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8017316:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801731a:	2b01      	cmp	r3, #1
 801731c:	d004      	beq.n	8017328 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801731e:	3301      	adds	r3, #1
 8017320:	105b      	asrs	r3, r3, #1
 8017322:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017326:	e7f0      	b.n	801730a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017328:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801732c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017330:	4413      	add	r3, r2
 8017332:	b29b      	uxth	r3, r3
 8017334:	441a      	add	r2, r3
 8017336:	b212      	sxth	r2, r2
 8017338:	4296      	cmp	r6, r2
 801733a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801733e:	dae0      	bge.n	8017302 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8017340:	1aeb      	subs	r3, r5, r3
 8017342:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017346:	e7dc      	b.n	8017302 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8017348:	f8bd 5000 	ldrh.w	r5, [sp]
 801734c:	441d      	add	r5, r3
 801734e:	b2ad      	uxth	r5, r5
 8017350:	b22e      	sxth	r6, r5
 8017352:	f9bd 3000 	ldrsh.w	r3, [sp]
 8017356:	42b3      	cmp	r3, r6
 8017358:	dacc      	bge.n	80172f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801735a:	6823      	ldr	r3, [r4, #0]
 801735c:	4669      	mov	r1, sp
 801735e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017360:	4620      	mov	r0, r4
 8017362:	4798      	blx	r3
 8017364:	b940      	cbnz	r0, 8017378 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8017366:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801736a:	2b01      	cmp	r3, #1
 801736c:	d004      	beq.n	8017378 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801736e:	3301      	adds	r3, #1
 8017370:	105b      	asrs	r3, r3, #1
 8017372:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017376:	e7f0      	b.n	801735a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8017378:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801737c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017380:	4413      	add	r3, r2
 8017382:	b29b      	uxth	r3, r3
 8017384:	441a      	add	r2, r3
 8017386:	b212      	sxth	r2, r2
 8017388:	4296      	cmp	r6, r2
 801738a:	f8ad 3000 	strh.w	r3, [sp]
 801738e:	dae0      	bge.n	8017352 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8017390:	1aeb      	subs	r3, r5, r3
 8017392:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017396:	e7dc      	b.n	8017352 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8017398:	2005ba9c 	.word	0x2005ba9c

0801739c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801739c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801739e:	6803      	ldr	r3, [r0, #0]
 80173a0:	4604      	mov	r4, r0
 80173a2:	4601      	mov	r1, r0
 80173a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80173a6:	4668      	mov	r0, sp
 80173a8:	4798      	blx	r3
 80173aa:	2100      	movs	r1, #0
 80173ac:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80173b0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80173b4:	9102      	str	r1, [sp, #8]
 80173b6:	4668      	mov	r0, sp
 80173b8:	a902      	add	r1, sp, #8
 80173ba:	f8ad 200c 	strh.w	r2, [sp, #12]
 80173be:	f8ad 300e 	strh.w	r3, [sp, #14]
 80173c2:	f7fc fe49 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 80173c6:	6823      	ldr	r3, [r4, #0]
 80173c8:	4669      	mov	r1, sp
 80173ca:	691b      	ldr	r3, [r3, #16]
 80173cc:	4620      	mov	r0, r4
 80173ce:	4798      	blx	r3
 80173d0:	b004      	add	sp, #16
 80173d2:	bd10      	pop	{r4, pc}

080173d4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80173d4:	2101      	movs	r1, #1
 80173d6:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80173da:	490b      	ldr	r1, [pc, #44]	@ (8017408 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80173dc:	2200      	movs	r2, #0
 80173de:	6001      	str	r1, [r0, #0]
 80173e0:	21ff      	movs	r1, #255	@ 0xff
 80173e2:	8082      	strh	r2, [r0, #4]
 80173e4:	80c2      	strh	r2, [r0, #6]
 80173e6:	8102      	strh	r2, [r0, #8]
 80173e8:	8142      	strh	r2, [r0, #10]
 80173ea:	8182      	strh	r2, [r0, #12]
 80173ec:	81c2      	strh	r2, [r0, #14]
 80173ee:	8202      	strh	r2, [r0, #16]
 80173f0:	8242      	strh	r2, [r0, #18]
 80173f2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80173f6:	61c2      	str	r2, [r0, #28]
 80173f8:	8402      	strh	r2, [r0, #32]
 80173fa:	8442      	strh	r2, [r0, #34]	@ 0x22
 80173fc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8017400:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8017404:	6282      	str	r2, [r0, #40]	@ 0x28
 8017406:	4770      	bx	lr
 8017408:	0802f6e8 	.word	0x0802f6e8

0801740c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801740c:	2300      	movs	r3, #0
 801740e:	8083      	strh	r3, [r0, #4]
 8017410:	80c3      	strh	r3, [r0, #6]
 8017412:	8003      	strh	r3, [r0, #0]
 8017414:	8043      	strh	r3, [r0, #2]
 8017416:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801741a:	2bff      	cmp	r3, #255	@ 0xff
 801741c:	bf01      	itttt	eq
 801741e:	890b      	ldrheq	r3, [r1, #8]
 8017420:	8083      	strheq	r3, [r0, #4]
 8017422:	894b      	ldrheq	r3, [r1, #10]
 8017424:	80c3      	strheq	r3, [r0, #6]
 8017426:	4770      	bx	lr

08017428 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801742a:	4604      	mov	r4, r0
 801742c:	466b      	mov	r3, sp
 801742e:	6808      	ldr	r0, [r1, #0]
 8017430:	6849      	ldr	r1, [r1, #4]
 8017432:	c303      	stmia	r3!, {r0, r1}
 8017434:	6823      	ldr	r3, [r4, #0]
 8017436:	4669      	mov	r1, sp
 8017438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801743a:	4620      	mov	r0, r4
 801743c:	4798      	blx	r3
 801743e:	4b08      	ldr	r3, [pc, #32]	@ (8017460 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8017446:	b10a      	cbz	r2, 801744c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017448:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801744a:	b900      	cbnz	r0, 801744e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801744c:	6898      	ldr	r0, [r3, #8]
 801744e:	6803      	ldr	r3, [r0, #0]
 8017450:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017452:	6a1d      	ldr	r5, [r3, #32]
 8017454:	4669      	mov	r1, sp
 8017456:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801745a:	47a8      	blx	r5
 801745c:	b003      	add	sp, #12
 801745e:	bd30      	pop	{r4, r5, pc}
 8017460:	2005baa4 	.word	0x2005baa4

08017464 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8017464:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8017468:	b12a      	cbz	r2, 8017476 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801746a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801746e:	b112      	cbz	r2, 8017476 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017470:	6803      	ldr	r3, [r0, #0]
 8017472:	695b      	ldr	r3, [r3, #20]
 8017474:	4718      	bx	r3
 8017476:	4770      	bx	lr

08017478 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8017478:	b570      	push	{r4, r5, r6, lr}
 801747a:	4604      	mov	r4, r0
 801747c:	4615      	mov	r5, r2
 801747e:	6803      	ldr	r3, [r0, #0]
 8017480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017482:	4798      	blx	r3
 8017484:	6823      	ldr	r3, [r4, #0]
 8017486:	4629      	mov	r1, r5
 8017488:	4620      	mov	r0, r4
 801748a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801748e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017490:	4718      	bx	r3

08017492 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8017492:	b570      	push	{r4, r5, r6, lr}
 8017494:	6803      	ldr	r3, [r0, #0]
 8017496:	4604      	mov	r4, r0
 8017498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801749a:	460e      	mov	r6, r1
 801749c:	4615      	mov	r5, r2
 801749e:	4798      	blx	r3
 80174a0:	8030      	strh	r0, [r6, #0]
 80174a2:	6823      	ldr	r3, [r4, #0]
 80174a4:	4620      	mov	r0, r4
 80174a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80174a8:	4798      	blx	r3
 80174aa:	8028      	strh	r0, [r5, #0]
 80174ac:	bd70      	pop	{r4, r5, r6, pc}

080174ae <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 80174ae:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	@ 0x2a
 80174b2:	4770      	bx	lr

080174b4 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 80174b4:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 80174b8:	4770      	bx	lr

080174ba <_ZN8touchgfx10TiledImageD1Ev>:
 80174ba:	4770      	bx	lr

080174bc <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 80174bc:	b510      	push	{r4, lr}
 80174be:	4604      	mov	r4, r0
 80174c0:	f000 f9b3 	bl	801782a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80174c4:	6823      	ldr	r3, [r4, #0]
 80174c6:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 80174ca:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	@ 0x2a
 80174ce:	4620      	mov	r0, r4
 80174d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80174d6:	4718      	bx	r3

080174d8 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 80174d8:	b538      	push	{r3, r4, r5, lr}
 80174da:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80174de:	4604      	mov	r4, r0
 80174e0:	8541      	strh	r1, [r0, #42]	@ 0x2a
 80174e2:	4628      	mov	r0, r5
 80174e4:	f005 fb14 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80174e8:	b188      	cbz	r0, 801750e <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 80174ea:	4628      	mov	r0, r5
 80174ec:	f005 fb10 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80174f0:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	@ 0x2a
 80174f4:	fb92 f3f0 	sdiv	r3, r2, r0
 80174f8:	fb03 2010 	mls	r0, r3, r0, r2
 80174fc:	2800      	cmp	r0, #0
 80174fe:	8560      	strh	r0, [r4, #42]	@ 0x2a
 8017500:	da05      	bge.n	801750e <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 8017502:	4628      	mov	r0, r5
 8017504:	f005 fb04 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017508:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801750a:	4418      	add	r0, r3
 801750c:	8560      	strh	r0, [r4, #42]	@ 0x2a
 801750e:	bd38      	pop	{r3, r4, r5, pc}

08017510 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8017510:	b538      	push	{r3, r4, r5, lr}
 8017512:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8017516:	4604      	mov	r4, r0
 8017518:	8581      	strh	r1, [r0, #44]	@ 0x2c
 801751a:	4628      	mov	r0, r5
 801751c:	f005 fb2c 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017520:	b188      	cbz	r0, 8017546 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 8017522:	4628      	mov	r0, r5
 8017524:	f005 fb28 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017528:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 801752c:	fb92 f3f0 	sdiv	r3, r2, r0
 8017530:	fb03 2010 	mls	r0, r3, r0, r2
 8017534:	2800      	cmp	r0, #0
 8017536:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 8017538:	da05      	bge.n	8017546 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 801753a:	4628      	mov	r0, r5
 801753c:	f005 fb1c 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017540:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8017542:	4418      	add	r0, r3
 8017544:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 8017546:	bd38      	pop	{r3, r4, r5, pc}

08017548 <_ZN8touchgfx10TiledImageD0Ev>:
 8017548:	b510      	push	{r4, lr}
 801754a:	4604      	mov	r4, r0
 801754c:	2130      	movs	r1, #48	@ 0x30
 801754e:	f014 fb30 	bl	802bbb2 <_ZdlPvj>
 8017552:	4620      	mov	r0, r4
 8017554:	bd10      	pop	{r4, pc}
	...

08017558 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8017558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801755c:	f100 0b26 	add.w	fp, r0, #38	@ 0x26
 8017560:	b093      	sub	sp, #76	@ 0x4c
 8017562:	4607      	mov	r7, r0
 8017564:	4658      	mov	r0, fp
 8017566:	460e      	mov	r6, r1
 8017568:	f005 fad2 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801756c:	4681      	mov	r9, r0
 801756e:	4658      	mov	r0, fp
 8017570:	f005 fb02 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017574:	4605      	mov	r5, r0
 8017576:	f1b9 0f00 	cmp.w	r9, #0
 801757a:	f000 80c4 	beq.w	8017706 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801757e:	2800      	cmp	r0, #0
 8017580:	f000 80c1 	beq.w	8017706 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017584:	2300      	movs	r3, #0
 8017586:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	a90e      	add	r1, sp, #56	@ 0x38
 801758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017590:	4638      	mov	r0, r7
 8017592:	4798      	blx	r3
 8017594:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8017598:	f9b6 3000 	ldrsh.w	r3, [r6]
 801759c:	88b1      	ldrh	r1, [r6, #4]
 801759e:	189c      	adds	r4, r3, r2
 80175a0:	440b      	add	r3, r1
 80175a2:	fa02 f383 	sxtah	r3, r2, r3
 80175a6:	3b01      	subs	r3, #1
 80175a8:	fb93 f3f9 	sdiv	r3, r3, r9
 80175ac:	fb94 f4f9 	sdiv	r4, r4, r9
 80175b0:	fa1f f889 	uxth.w	r8, r9
 80175b4:	fb13 f308 	smulbb	r3, r3, r8
 80175b8:	fb14 f408 	smulbb	r4, r4, r8
 80175bc:	b21b      	sxth	r3, r3
 80175be:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80175c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80175c4:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80175c8:	1aa4      	subs	r4, r4, r2
 80175ca:	b2aa      	uxth	r2, r5
 80175cc:	9205      	str	r2, [sp, #20]
 80175ce:	185a      	adds	r2, r3, r1
 80175d0:	fb92 f2f5 	sdiv	r2, r2, r5
 80175d4:	9805      	ldr	r0, [sp, #20]
 80175d6:	b2a4      	uxth	r4, r4
 80175d8:	fb12 f200 	smulbb	r2, r2, r0
 80175dc:	1a52      	subs	r2, r2, r1
 80175de:	b212      	sxth	r2, r2
 80175e0:	920c      	str	r2, [sp, #48]	@ 0x30
 80175e2:	88f2      	ldrh	r2, [r6, #6]
 80175e4:	4413      	add	r3, r2
 80175e6:	fa01 f383 	sxtah	r3, r1, r3
 80175ea:	3b01      	subs	r3, #1
 80175ec:	fb93 f3f5 	sdiv	r3, r3, r5
 80175f0:	fb13 f300 	smulbb	r3, r3, r0
 80175f4:	b21b      	sxth	r3, r3
 80175f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80175f8:	eb08 0504 	add.w	r5, r8, r4
 80175fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80175fe:	b223      	sxth	r3, r4
 8017600:	4293      	cmp	r3, r2
 8017602:	b2ad      	uxth	r5, r5
 8017604:	9306      	str	r3, [sp, #24]
 8017606:	dc7e      	bgt.n	8017706 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017608:	b22b      	sxth	r3, r5
 801760a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 801760e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017610:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017612:	4599      	cmp	r9, r3
 8017614:	dd03      	ble.n	801761e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc6>
 8017616:	4444      	add	r4, r8
 8017618:	b2a4      	uxth	r4, r4
 801761a:	4445      	add	r5, r8
 801761c:	e7ee      	b.n	80175fc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xa4>
 801761e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8017622:	88b2      	ldrh	r2, [r6, #4]
 8017624:	9806      	ldr	r0, [sp, #24]
 8017626:	4462      	add	r2, ip
 8017628:	b292      	uxth	r2, r2
 801762a:	b213      	sxth	r3, r2
 801762c:	9905      	ldr	r1, [sp, #20]
 801762e:	9308      	str	r3, [sp, #32]
 8017630:	fa1f f389 	uxth.w	r3, r9
 8017634:	4419      	add	r1, r3
 8017636:	9307      	str	r3, [sp, #28]
 8017638:	4603      	mov	r3, r0
 801763a:	9808      	ldr	r0, [sp, #32]
 801763c:	b289      	uxth	r1, r1
 801763e:	4283      	cmp	r3, r0
 8017640:	fa0f fa81 	sxth.w	sl, r1
 8017644:	da5b      	bge.n	80176fe <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017646:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017648:	4584      	cmp	ip, r0
 801764a:	da58      	bge.n	80176fe <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801764c:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8017650:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8017654:	4486      	add	lr, r0
 8017656:	fa1f fe8e 	uxth.w	lr, lr
 801765a:	fa0f f38e 	sxth.w	r3, lr
 801765e:	4599      	cmp	r9, r3
 8017660:	9309      	str	r3, [sp, #36]	@ 0x24
 8017662:	da4c      	bge.n	80176fe <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017664:	4550      	cmp	r0, sl
 8017666:	da4a      	bge.n	80176fe <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017668:	9b06      	ldr	r3, [sp, #24]
 801766a:	459c      	cmp	ip, r3
 801766c:	bfb8      	it	lt
 801766e:	469c      	movlt	ip, r3
 8017670:	9b08      	ldr	r3, [sp, #32]
 8017672:	4548      	cmp	r0, r9
 8017674:	bfb8      	it	lt
 8017676:	4648      	movlt	r0, r9
 8017678:	4699      	mov	r9, r3
 801767a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801767c:	f8ad c040 	strh.w	ip, [sp, #64]	@ 0x40
 8017680:	4599      	cmp	r9, r3
 8017682:	bfc8      	it	gt
 8017684:	462a      	movgt	r2, r5
 8017686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017688:	eba2 020c 	sub.w	r2, r2, ip
 801768c:	4553      	cmp	r3, sl
 801768e:	bfd8      	it	le
 8017690:	4671      	movle	r1, lr
 8017692:	1a09      	subs	r1, r1, r0
 8017694:	f8ad 2044 	strh.w	r2, [sp, #68]	@ 0x44
 8017698:	f8ad 1046 	strh.w	r1, [sp, #70]	@ 0x46
 801769c:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 80176a0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80176a4:	9b07      	ldr	r3, [sp, #28]
 80176a6:	1b12      	subs	r2, r2, r4
 80176a8:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80176ac:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80176b0:	1ad2      	subs	r2, r2, r3
 80176b2:	4b16      	ldr	r3, [pc, #88]	@ (801770c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 80176b4:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 80176b8:	681a      	ldr	r2, [r3, #0]
 80176ba:	f892 1058 	ldrb.w	r1, [r2, #88]	@ 0x58
 80176be:	b109      	cbz	r1, 80176c4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 80176c0:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 80176c2:	b900      	cbnz	r0, 80176c6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16e>
 80176c4:	6890      	ldr	r0, [r2, #8]
 80176c6:	f04f 0c01 	mov.w	ip, #1
 80176ca:	6801      	ldr	r1, [r0, #0]
 80176cc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80176d0:	f8cd c008 	str.w	ip, [sp, #8]
 80176d4:	9b07      	ldr	r3, [sp, #28]
 80176d6:	f897 c028 	ldrb.w	ip, [r7, #40]	@ 0x28
 80176da:	4413      	add	r3, r2
 80176dc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80176e0:	f8cd c004 	str.w	ip, [sp, #4]
 80176e4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80176e8:	f8cd c000 	str.w	ip, [sp]
 80176ec:	4422      	add	r2, r4
 80176ee:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80176f2:	b21b      	sxth	r3, r3
 80176f4:	b212      	sxth	r2, r2
 80176f6:	4659      	mov	r1, fp
 80176f8:	47c8      	blx	r9
 80176fa:	46d1      	mov	r9, sl
 80176fc:	e788      	b.n	8017610 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb8>
 80176fe:	2300      	movs	r3, #0
 8017700:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 8017704:	e7cc      	b.n	80176a0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x148>
 8017706:	b013      	add	sp, #76	@ 0x4c
 8017708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801770c:	2005baa4 	.word	0x2005baa4

08017710 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8017710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017714:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8017718:	4606      	mov	r6, r0
 801771a:	2bff      	cmp	r3, #255	@ 0xff
 801771c:	4689      	mov	r9, r1
 801771e:	d008      	beq.n	8017732 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8017720:	2300      	movs	r3, #0
 8017722:	8003      	strh	r3, [r0, #0]
 8017724:	8043      	strh	r3, [r0, #2]
 8017726:	8083      	strh	r3, [r0, #4]
 8017728:	4630      	mov	r0, r6
 801772a:	80f3      	strh	r3, [r6, #6]
 801772c:	b003      	add	sp, #12
 801772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017732:	f101 0b26 	add.w	fp, r1, #38	@ 0x26
 8017736:	4659      	mov	r1, fp
 8017738:	4668      	mov	r0, sp
 801773a:	f005 fa51 	bl	801cbe0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801773e:	4658      	mov	r0, fp
 8017740:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8017744:	f9bd 7000 	ldrsh.w	r7, [sp]
 8017748:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801774c:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8017750:	f005 f9de 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017754:	4284      	cmp	r4, r0
 8017756:	d10d      	bne.n	8017774 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8017758:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801775c:	4658      	mov	r0, fp
 801775e:	f005 fa0b 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017762:	4580      	cmp	r8, r0
 8017764:	d12a      	bne.n	80177bc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 8017766:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801776a:	8037      	strh	r7, [r6, #0]
 801776c:	f8a6 a002 	strh.w	sl, [r6, #2]
 8017770:	80b5      	strh	r5, [r6, #4]
 8017772:	e7d9      	b.n	8017728 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8017774:	4658      	mov	r0, fp
 8017776:	f8b9 502a 	ldrh.w	r5, [r9, #42]	@ 0x2a
 801777a:	f005 f9c9 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801777e:	1b7f      	subs	r7, r7, r5
 8017780:	b2bd      	uxth	r5, r7
 8017782:	b22f      	sxth	r7, r5
 8017784:	2f00      	cmp	r7, #0
 8017786:	4428      	add	r0, r5
 8017788:	bfa8      	it	ge
 801778a:	4625      	movge	r5, r4
 801778c:	b2a3      	uxth	r3, r4
 801778e:	b280      	uxth	r0, r0
 8017790:	bfb8      	it	lt
 8017792:	18ed      	addlt	r5, r5, r3
 8017794:	4403      	add	r3, r0
 8017796:	b29b      	uxth	r3, r3
 8017798:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801779c:	bfb8      	it	lt
 801779e:	b22d      	sxthlt	r5, r5
 80177a0:	b219      	sxth	r1, r3
 80177a2:	bfbc      	itt	lt
 80177a4:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 80177a8:	2700      	movlt	r7, #0
 80177aa:	4291      	cmp	r1, r2
 80177ac:	bfc4      	itt	gt
 80177ae:	1a9c      	subgt	r4, r3, r2
 80177b0:	b224      	sxthgt	r4, r4
 80177b2:	42ac      	cmp	r4, r5
 80177b4:	bfc4      	itt	gt
 80177b6:	b207      	sxthgt	r7, r0
 80177b8:	4625      	movgt	r5, r4
 80177ba:	e7cf      	b.n	801775c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 80177bc:	4658      	mov	r0, fp
 80177be:	f8b9 402c 	ldrh.w	r4, [r9, #44]	@ 0x2c
 80177c2:	f005 f9d9 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80177c6:	ebaa 0404 	sub.w	r4, sl, r4
 80177ca:	b2a4      	uxth	r4, r4
 80177cc:	fa0f fa84 	sxth.w	sl, r4
 80177d0:	f1ba 0f00 	cmp.w	sl, #0
 80177d4:	bfa8      	it	ge
 80177d6:	4643      	movge	r3, r8
 80177d8:	4420      	add	r0, r4
 80177da:	fa1f f288 	uxth.w	r2, r8
 80177de:	b280      	uxth	r0, r0
 80177e0:	bfb8      	it	lt
 80177e2:	18a3      	addlt	r3, r4, r2
 80177e4:	4402      	add	r2, r0
 80177e6:	b292      	uxth	r2, r2
 80177e8:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 80177ec:	bfb8      	it	lt
 80177ee:	b21b      	sxthlt	r3, r3
 80177f0:	b214      	sxth	r4, r2
 80177f2:	bfbc      	itt	lt
 80177f4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80177f8:	f04f 0a00 	movlt.w	sl, #0
 80177fc:	428c      	cmp	r4, r1
 80177fe:	bfc4      	itt	gt
 8017800:	eba2 0801 	subgt.w	r8, r2, r1
 8017804:	fa0f f888 	sxthgt.w	r8, r8
 8017808:	4598      	cmp	r8, r3
 801780a:	bfc4      	itt	gt
 801780c:	fa0f fa80 	sxthgt.w	sl, r0
 8017810:	4643      	movgt	r3, r8
 8017812:	e7aa      	b.n	801776a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08017814 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8017814:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8017818:	b12a      	cbz	r2, 8017826 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801781a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801781e:	b112      	cbz	r2, 8017826 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8017820:	6803      	ldr	r3, [r0, #0]
 8017822:	695b      	ldr	r3, [r3, #20]
 8017824:	4718      	bx	r3
 8017826:	4770      	bx	lr

08017828 <_ZN8touchgfx5ImageD1Ev>:
 8017828:	4770      	bx	lr

0801782a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801782a:	b570      	push	{r4, r5, r6, lr}
 801782c:	880b      	ldrh	r3, [r1, #0]
 801782e:	4604      	mov	r4, r0
 8017830:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8017832:	4608      	mov	r0, r1
 8017834:	460d      	mov	r5, r1
 8017836:	f005 f96b 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801783a:	4606      	mov	r6, r0
 801783c:	4628      	mov	r0, r5
 801783e:	f005 f99b 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017842:	4605      	mov	r5, r0
 8017844:	6823      	ldr	r3, [r4, #0]
 8017846:	4631      	mov	r1, r6
 8017848:	4620      	mov	r0, r4
 801784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801784c:	4798      	blx	r3
 801784e:	6823      	ldr	r3, [r4, #0]
 8017850:	4629      	mov	r1, r5
 8017852:	4620      	mov	r0, r4
 8017854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801785a:	4718      	bx	r3

0801785c <_ZN8touchgfx5ImageD0Ev>:
 801785c:	b510      	push	{r4, lr}
 801785e:	4604      	mov	r4, r0
 8017860:	212c      	movs	r1, #44	@ 0x2c
 8017862:	f014 f9a6 	bl	802bbb2 <_ZdlPvj>
 8017866:	4620      	mov	r0, r4
 8017868:	bd10      	pop	{r4, pc}

0801786a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801786a:	b510      	push	{r4, lr}
 801786c:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8017870:	4604      	mov	r4, r0
 8017872:	2bff      	cmp	r3, #255	@ 0xff
 8017874:	d006      	beq.n	8017884 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017876:	2300      	movs	r3, #0
 8017878:	8003      	strh	r3, [r0, #0]
 801787a:	8043      	strh	r3, [r0, #2]
 801787c:	8083      	strh	r3, [r0, #4]
 801787e:	80c3      	strh	r3, [r0, #6]
 8017880:	4620      	mov	r0, r4
 8017882:	bd10      	pop	{r4, pc}
 8017884:	3126      	adds	r1, #38	@ 0x26
 8017886:	f005 f9ab 	bl	801cbe0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801788a:	e7f9      	b.n	8017880 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801788c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801788c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017890:	4604      	mov	r4, r0
 8017892:	2500      	movs	r5, #0
 8017894:	f854 3b26 	ldr.w	r3, [r4], #38
 8017898:	b088      	sub	sp, #32
 801789a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801789c:	460f      	mov	r7, r1
 801789e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80178a2:	a904      	add	r1, sp, #16
 80178a4:	4606      	mov	r6, r0
 80178a6:	4798      	blx	r3
 80178a8:	4620      	mov	r0, r4
 80178aa:	f005 f931 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80178ae:	4680      	mov	r8, r0
 80178b0:	4620      	mov	r0, r4
 80178b2:	f005 f961 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80178b6:	9506      	str	r5, [sp, #24]
 80178b8:	ad06      	add	r5, sp, #24
 80178ba:	f8ad 001e 	strh.w	r0, [sp, #30]
 80178be:	4639      	mov	r1, r7
 80178c0:	4628      	mov	r0, r5
 80178c2:	f8ad 801c 	strh.w	r8, [sp, #28]
 80178c6:	f7fc fbc7 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 80178ca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	dd19      	ble.n	8017906 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80178d2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	dd15      	ble.n	8017906 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80178da:	4b0c      	ldr	r3, [pc, #48]	@ (801790c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80178e2:	b10a      	cbz	r2, 80178e8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80178e4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80178e6:	b900      	cbnz	r0, 80178ea <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80178e8:	6898      	ldr	r0, [r3, #8]
 80178ea:	2701      	movs	r7, #1
 80178ec:	6801      	ldr	r1, [r0, #0]
 80178ee:	9702      	str	r7, [sp, #8]
 80178f0:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80178f4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80178f8:	e9cd 5600 	strd	r5, r6, [sp]
 80178fc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017900:	688d      	ldr	r5, [r1, #8]
 8017902:	4621      	mov	r1, r4
 8017904:	47a8      	blx	r5
 8017906:	b008      	add	sp, #32
 8017908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801790c:	2005baa4 	.word	0x2005baa4

08017910 <_ZN8touchgfx7OutlineD1Ev>:
 8017910:	4770      	bx	lr

08017912 <_ZN8touchgfx7OutlineD0Ev>:
 8017912:	b510      	push	{r4, lr}
 8017914:	4604      	mov	r4, r0
 8017916:	2130      	movs	r1, #48	@ 0x30
 8017918:	f014 f94b 	bl	802bbb2 <_ZdlPvj>
 801791c:	4620      	mov	r0, r4
 801791e:	bd10      	pop	{r4, pc}

08017920 <_ZN8touchgfx7Outline5resetEv>:
 8017920:	b510      	push	{r4, lr}
 8017922:	4604      	mov	r4, r0
 8017924:	f000 fe80 	bl	8018628 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8017928:	60e0      	str	r0, [r4, #12]
 801792a:	f000 fe83 	bl	8018634 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801792e:	2200      	movs	r2, #0
 8017930:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8017934:	68e3      	ldr	r3, [r4, #12]
 8017936:	08c0      	lsrs	r0, r0, #3
 8017938:	3801      	subs	r0, #1
 801793a:	6123      	str	r3, [r4, #16]
 801793c:	6060      	str	r0, [r4, #4]
 801793e:	60a2      	str	r2, [r4, #8]
 8017940:	8019      	strh	r1, [r3, #0]
 8017942:	8059      	strh	r1, [r3, #2]
 8017944:	809a      	strh	r2, [r3, #4]
 8017946:	80da      	strh	r2, [r3, #6]
 8017948:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801794a:	f023 0301 	bic.w	r3, r3, #1
 801794e:	f043 0302 	orr.w	r3, r3, #2
 8017952:	6263      	str	r3, [r4, #36]	@ 0x24
 8017954:	bd10      	pop	{r4, pc}
	...

08017958 <_ZN8touchgfx7OutlineC1Ev>:
 8017958:	4b0a      	ldr	r3, [pc, #40]	@ (8017984 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801795a:	b510      	push	{r4, lr}
 801795c:	6003      	str	r3, [r0, #0]
 801795e:	2300      	movs	r3, #0
 8017960:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8017964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017968:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801796c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8017970:	6243      	str	r3, [r0, #36]	@ 0x24
 8017972:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017976:	4604      	mov	r4, r0
 8017978:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 801797c:	f7ff ffd0 	bl	8017920 <_ZN8touchgfx7Outline5resetEv>
 8017980:	4620      	mov	r0, r4
 8017982:	bd10      	pop	{r4, pc}
 8017984:	0802f8b8 	.word	0x0802f8b8

08017988 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8017988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801798c:	b093      	sub	sp, #76	@ 0x4c
 801798e:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017990:	9305      	str	r3, [sp, #20]
 8017992:	f004 051f 	and.w	r5, r4, #31
 8017996:	1153      	asrs	r3, r2, #5
 8017998:	9504      	str	r5, [sp, #16]
 801799a:	1156      	asrs	r6, r2, #5
 801799c:	1165      	asrs	r5, r4, #5
 801799e:	9303      	str	r3, [sp, #12]
 80179a0:	42ae      	cmp	r6, r5
 80179a2:	ea4f 1364 	mov.w	r3, r4, asr #5
 80179a6:	9306      	str	r3, [sp, #24]
 80179a8:	f002 031f 	and.w	r3, r2, #31
 80179ac:	f040 80f8 	bne.w	8017ba0 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 80179b0:	9c04      	ldr	r4, [sp, #16]
 80179b2:	9a05      	ldr	r2, [sp, #20]
 80179b4:	42a3      	cmp	r3, r4
 80179b6:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80179ba:	6902      	ldr	r2, [r0, #16]
 80179bc:	d125      	bne.n	8017a0a <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 80179be:	f9b2 3000 	ldrsh.w	r3, [r2]
 80179c2:	459e      	cmp	lr, r3
 80179c4:	d103      	bne.n	80179ce <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 80179c6:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80179ca:	429e      	cmp	r6, r3
 80179cc:	d035      	beq.n	8017a3a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80179ce:	88d1      	ldrh	r1, [r2, #6]
 80179d0:	8893      	ldrh	r3, [r2, #4]
 80179d2:	430b      	orrs	r3, r1
 80179d4:	d010      	beq.n	80179f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80179d6:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	db0c      	blt.n	80179f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80179de:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80179e0:	428b      	cmp	r3, r1
 80179e2:	da09      	bge.n	80179f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80179e4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80179e8:	428b      	cmp	r3, r1
 80179ea:	bf38      	it	cc
 80179ec:	3208      	addcc	r2, #8
 80179ee:	f103 0301 	add.w	r3, r3, #1
 80179f2:	bf38      	it	cc
 80179f4:	6102      	strcc	r2, [r0, #16]
 80179f6:	6083      	str	r3, [r0, #8]
 80179f8:	6903      	ldr	r3, [r0, #16]
 80179fa:	9a03      	ldr	r2, [sp, #12]
 80179fc:	f8a3 e000 	strh.w	lr, [r3]
 8017a00:	805a      	strh	r2, [r3, #2]
 8017a02:	2200      	movs	r2, #0
 8017a04:	809a      	strh	r2, [r3, #4]
 8017a06:	80da      	strh	r2, [r3, #6]
 8017a08:	e017      	b.n	8017a3a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017a0a:	9c05      	ldr	r4, [sp, #20]
 8017a0c:	114e      	asrs	r6, r1, #5
 8017a0e:	f004 041f 	and.w	r4, r4, #31
 8017a12:	9402      	str	r4, [sp, #8]
 8017a14:	9c04      	ldr	r4, [sp, #16]
 8017a16:	4576      	cmp	r6, lr
 8017a18:	f001 0c1f 	and.w	ip, r1, #31
 8017a1c:	eba4 0403 	sub.w	r4, r4, r3
 8017a20:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8017a24:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8017a28:	d10a      	bne.n	8017a40 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 8017a2a:	9b02      	ldr	r3, [sp, #8]
 8017a2c:	44a0      	add	r8, r4
 8017a2e:	449c      	add	ip, r3
 8017a30:	fb04 a40c 	mla	r4, r4, ip, sl
 8017a34:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017a38:	80d4      	strh	r4, [r2, #6]
 8017a3a:	b013      	add	sp, #76	@ 0x4c
 8017a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a40:	9d05      	ldr	r5, [sp, #20]
 8017a42:	1a69      	subs	r1, r5, r1
 8017a44:	bf5b      	ittet	pl
 8017a46:	f1cc 0520 	rsbpl	r5, ip, #32
 8017a4a:	436c      	mulpl	r4, r5
 8017a4c:	2500      	movmi	r5, #0
 8017a4e:	2520      	movpl	r5, #32
 8017a50:	bf44      	itt	mi
 8017a52:	fb04 f40c 	mulmi.w	r4, r4, ip
 8017a56:	4249      	negmi	r1, r1
 8017a58:	9501      	str	r5, [sp, #4]
 8017a5a:	fb94 f5f1 	sdiv	r5, r4, r1
 8017a5e:	bf54      	ite	pl
 8017a60:	f04f 0901 	movpl.w	r9, #1
 8017a64:	f04f 39ff 	movmi.w	r9, #4294967295
 8017a68:	fb01 4415 	mls	r4, r1, r5, r4
 8017a6c:	9f01      	ldr	r7, [sp, #4]
 8017a6e:	2c00      	cmp	r4, #0
 8017a70:	bfb8      	it	lt
 8017a72:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8017a76:	44bc      	add	ip, r7
 8017a78:	fb05 ac0c 	mla	ip, r5, ip, sl
 8017a7c:	44a8      	add	r8, r5
 8017a7e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017a82:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017a86:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017a8a:	bfb8      	it	lt
 8017a8c:	1864      	addlt	r4, r4, r1
 8017a8e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017a92:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8017a96:	444e      	add	r6, r9
 8017a98:	ea58 0202 	orrs.w	r2, r8, r2
 8017a9c:	d011      	beq.n	8017ac2 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8017a9e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017aa2:	f1b8 0f00 	cmp.w	r8, #0
 8017aa6:	db0c      	blt.n	8017ac2 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8017aa8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8017aaa:	4590      	cmp	r8, r2
 8017aac:	da09      	bge.n	8017ac2 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8017aae:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8017ab2:	4590      	cmp	r8, r2
 8017ab4:	bf3c      	itt	cc
 8017ab6:	f10c 0208 	addcc.w	r2, ip, #8
 8017aba:	6102      	strcc	r2, [r0, #16]
 8017abc:	f108 0201 	add.w	r2, r8, #1
 8017ac0:	6082      	str	r2, [r0, #8]
 8017ac2:	2700      	movs	r7, #0
 8017ac4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017ac8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017acc:	45b6      	cmp	lr, r6
 8017ace:	f8ac 6000 	strh.w	r6, [ip]
 8017ad2:	f8ac 2002 	strh.w	r2, [ip, #2]
 8017ad6:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017ada:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017ade:	442b      	add	r3, r5
 8017ae0:	d04d      	beq.n	8017b7e <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 8017ae2:	9f04      	ldr	r7, [sp, #16]
 8017ae4:	f04f 0a00 	mov.w	sl, #0
 8017ae8:	1aff      	subs	r7, r7, r3
 8017aea:	443d      	add	r5, r7
 8017aec:	016d      	lsls	r5, r5, #5
 8017aee:	fb95 f8f1 	sdiv	r8, r5, r1
 8017af2:	fb01 5518 	mls	r5, r1, r8, r5
 8017af6:	2d00      	cmp	r5, #0
 8017af8:	bfb8      	it	lt
 8017afa:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017afe:	f108 0701 	add.w	r7, r8, #1
 8017b02:	bfb8      	it	lt
 8017b04:	186d      	addlt	r5, r5, r1
 8017b06:	1a64      	subs	r4, r4, r1
 8017b08:	9703      	str	r7, [sp, #12]
 8017b0a:	1964      	adds	r4, r4, r5
 8017b0c:	bf48      	it	mi
 8017b0e:	4647      	movmi	r7, r8
 8017b10:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017b14:	bf58      	it	pl
 8017b16:	9f03      	ldrpl	r7, [sp, #12]
 8017b18:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8017b1c:	443b      	add	r3, r7
 8017b1e:	44bb      	add	fp, r7
 8017b20:	f8ac b004 	strh.w	fp, [ip, #4]
 8017b24:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017b28:	bf58      	it	pl
 8017b2a:	1a64      	subpl	r4, r4, r1
 8017b2c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017b30:	f8ac b006 	strh.w	fp, [ip, #6]
 8017b34:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017b38:	444e      	add	r6, r9
 8017b3a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017b3e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017b42:	ea5b 0707 	orrs.w	r7, fp, r7
 8017b46:	d011      	beq.n	8017b6c <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8017b48:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8017b4c:	f1bb 0f00 	cmp.w	fp, #0
 8017b50:	db0c      	blt.n	8017b6c <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8017b52:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017b54:	45bb      	cmp	fp, r7
 8017b56:	da09      	bge.n	8017b6c <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8017b58:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017b5c:	45bb      	cmp	fp, r7
 8017b5e:	bf3c      	itt	cc
 8017b60:	f10c 0708 	addcc.w	r7, ip, #8
 8017b64:	6107      	strcc	r7, [r0, #16]
 8017b66:	f10b 0701 	add.w	r7, fp, #1
 8017b6a:	6087      	str	r7, [r0, #8]
 8017b6c:	6907      	ldr	r7, [r0, #16]
 8017b6e:	45b6      	cmp	lr, r6
 8017b70:	803e      	strh	r6, [r7, #0]
 8017b72:	807a      	strh	r2, [r7, #2]
 8017b74:	f8a7 a004 	strh.w	sl, [r7, #4]
 8017b78:	f8a7 a006 	strh.w	sl, [r7, #6]
 8017b7c:	d1c5      	bne.n	8017b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8017b7e:	9a04      	ldr	r2, [sp, #16]
 8017b80:	1ad3      	subs	r3, r2, r3
 8017b82:	6902      	ldr	r2, [r0, #16]
 8017b84:	8891      	ldrh	r1, [r2, #4]
 8017b86:	88d6      	ldrh	r6, [r2, #6]
 8017b88:	4419      	add	r1, r3
 8017b8a:	8091      	strh	r1, [r2, #4]
 8017b8c:	9902      	ldr	r1, [sp, #8]
 8017b8e:	f101 0c20 	add.w	ip, r1, #32
 8017b92:	9901      	ldr	r1, [sp, #4]
 8017b94:	ebac 0c01 	sub.w	ip, ip, r1
 8017b98:	fb03 630c 	mla	r3, r3, ip, r6
 8017b9c:	80d3      	strh	r3, [r2, #6]
 8017b9e:	e74c      	b.n	8017a3a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017ba0:	9d05      	ldr	r5, [sp, #20]
 8017ba2:	1aa2      	subs	r2, r4, r2
 8017ba4:	eba5 0501 	sub.w	r5, r5, r1
 8017ba8:	9508      	str	r5, [sp, #32]
 8017baa:	9202      	str	r2, [sp, #8]
 8017bac:	f140 8128 	bpl.w	8017e00 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8017bb0:	9a03      	ldr	r2, [sp, #12]
 8017bb2:	2a00      	cmp	r2, #0
 8017bb4:	f6ff af41 	blt.w	8017a3a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017bb8:	f04f 34ff 	mov.w	r4, #4294967295
 8017bbc:	9a02      	ldr	r2, [sp, #8]
 8017bbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017bc0:	4252      	negs	r2, r2
 8017bc2:	9202      	str	r2, [sp, #8]
 8017bc4:	9a06      	ldr	r2, [sp, #24]
 8017bc6:	2400      	movs	r4, #0
 8017bc8:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8017bcc:	9206      	str	r2, [sp, #24]
 8017bce:	462a      	mov	r2, r5
 8017bd0:	435a      	muls	r2, r3
 8017bd2:	9401      	str	r4, [sp, #4]
 8017bd4:	9c02      	ldr	r4, [sp, #8]
 8017bd6:	9d02      	ldr	r5, [sp, #8]
 8017bd8:	fb92 f4f4 	sdiv	r4, r2, r4
 8017bdc:	fb05 2214 	mls	r2, r5, r4, r2
 8017be0:	2a00      	cmp	r2, #0
 8017be2:	9207      	str	r2, [sp, #28]
 8017be4:	bfbc      	itt	lt
 8017be6:	1952      	addlt	r2, r2, r5
 8017be8:	9207      	strlt	r2, [sp, #28]
 8017bea:	9a01      	ldr	r2, [sp, #4]
 8017bec:	bfb8      	it	lt
 8017bee:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8017bf2:	eb04 0901 	add.w	r9, r4, r1
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	ea4f 1669 	mov.w	r6, r9, asr #5
 8017bfc:	6905      	ldr	r5, [r0, #16]
 8017bfe:	f040 8112 	bne.w	8017e26 <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8017c02:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017c06:	429e      	cmp	r6, r3
 8017c08:	d104      	bne.n	8017c14 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 8017c0a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017c0e:	9a03      	ldr	r2, [sp, #12]
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d01b      	beq.n	8017c4c <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017c14:	88ea      	ldrh	r2, [r5, #6]
 8017c16:	88ab      	ldrh	r3, [r5, #4]
 8017c18:	4313      	orrs	r3, r2
 8017c1a:	d010      	beq.n	8017c3e <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8017c1c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017c20:	2a00      	cmp	r2, #0
 8017c22:	db0c      	blt.n	8017c3e <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8017c24:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017c26:	429a      	cmp	r2, r3
 8017c28:	da09      	bge.n	8017c3e <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8017c2a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8017c2e:	429a      	cmp	r2, r3
 8017c30:	bf38      	it	cc
 8017c32:	3508      	addcc	r5, #8
 8017c34:	f102 0201 	add.w	r2, r2, #1
 8017c38:	bf38      	it	cc
 8017c3a:	6105      	strcc	r5, [r0, #16]
 8017c3c:	6082      	str	r2, [r0, #8]
 8017c3e:	6903      	ldr	r3, [r0, #16]
 8017c40:	9a03      	ldr	r2, [sp, #12]
 8017c42:	801e      	strh	r6, [r3, #0]
 8017c44:	805a      	strh	r2, [r3, #2]
 8017c46:	2200      	movs	r2, #0
 8017c48:	809a      	strh	r2, [r3, #4]
 8017c4a:	80da      	strh	r2, [r3, #6]
 8017c4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017c4e:	9a03      	ldr	r2, [sp, #12]
 8017c50:	6901      	ldr	r1, [r0, #16]
 8017c52:	441a      	add	r2, r3
 8017c54:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017c58:	42b3      	cmp	r3, r6
 8017c5a:	d103      	bne.n	8017c64 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8017c5c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017c60:	429a      	cmp	r2, r3
 8017c62:	d01a      	beq.n	8017c9a <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8017c64:	88cc      	ldrh	r4, [r1, #6]
 8017c66:	888b      	ldrh	r3, [r1, #4]
 8017c68:	4323      	orrs	r3, r4
 8017c6a:	d010      	beq.n	8017c8e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8017c6c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017c70:	2c00      	cmp	r4, #0
 8017c72:	db0c      	blt.n	8017c8e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8017c74:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017c76:	429c      	cmp	r4, r3
 8017c78:	da09      	bge.n	8017c8e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8017c7a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017c7e:	429c      	cmp	r4, r3
 8017c80:	bf38      	it	cc
 8017c82:	3108      	addcc	r1, #8
 8017c84:	f104 0401 	add.w	r4, r4, #1
 8017c88:	bf38      	it	cc
 8017c8a:	6101      	strcc	r1, [r0, #16]
 8017c8c:	6084      	str	r4, [r0, #8]
 8017c8e:	2100      	movs	r1, #0
 8017c90:	6903      	ldr	r3, [r0, #16]
 8017c92:	801e      	strh	r6, [r3, #0]
 8017c94:	805a      	strh	r2, [r3, #2]
 8017c96:	8099      	strh	r1, [r3, #4]
 8017c98:	80d9      	strh	r1, [r3, #6]
 8017c9a:	9b06      	ldr	r3, [sp, #24]
 8017c9c:	4293      	cmp	r3, r2
 8017c9e:	f000 8082 	beq.w	8017da6 <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 8017ca2:	9b08      	ldr	r3, [sp, #32]
 8017ca4:	9902      	ldr	r1, [sp, #8]
 8017ca6:	015b      	lsls	r3, r3, #5
 8017ca8:	fb93 f1f1 	sdiv	r1, r3, r1
 8017cac:	9c02      	ldr	r4, [sp, #8]
 8017cae:	9103      	str	r1, [sp, #12]
 8017cb0:	fb04 3311 	mls	r3, r4, r1, r3
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	9308      	str	r3, [sp, #32]
 8017cb8:	da04      	bge.n	8017cc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 8017cba:	1e4b      	subs	r3, r1, #1
 8017cbc:	9303      	str	r3, [sp, #12]
 8017cbe:	9b08      	ldr	r3, [sp, #32]
 8017cc0:	4423      	add	r3, r4
 8017cc2:	9308      	str	r3, [sp, #32]
 8017cc4:	464f      	mov	r7, r9
 8017cc6:	2600      	movs	r6, #0
 8017cc8:	9b07      	ldr	r3, [sp, #28]
 8017cca:	9902      	ldr	r1, [sp, #8]
 8017ccc:	1a5b      	subs	r3, r3, r1
 8017cce:	9307      	str	r3, [sp, #28]
 8017cd0:	9b01      	ldr	r3, [sp, #4]
 8017cd2:	f1c3 0320 	rsb	r3, r3, #32
 8017cd6:	930e      	str	r3, [sp, #56]	@ 0x38
 8017cd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017cda:	9b01      	ldr	r3, [sp, #4]
 8017cdc:	1a5b      	subs	r3, r3, r1
 8017cde:	930a      	str	r3, [sp, #40]	@ 0x28
 8017ce0:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8017ce4:	185b      	adds	r3, r3, r1
 8017ce6:	bf58      	it	pl
 8017ce8:	9902      	ldrpl	r1, [sp, #8]
 8017cea:	9307      	str	r3, [sp, #28]
 8017cec:	bf5d      	ittte	pl
 8017cee:	1a5b      	subpl	r3, r3, r1
 8017cf0:	9307      	strpl	r3, [sp, #28]
 8017cf2:	9b03      	ldrpl	r3, [sp, #12]
 8017cf4:	9903      	ldrmi	r1, [sp, #12]
 8017cf6:	bf58      	it	pl
 8017cf8:	1c59      	addpl	r1, r3, #1
 8017cfa:	4489      	add	r9, r1
 8017cfc:	2a00      	cmp	r2, #0
 8017cfe:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8017d02:	db2e      	blt.n	8017d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017d04:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017d06:	4293      	cmp	r3, r2
 8017d08:	dd2b      	ble.n	8017d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017d0a:	9c01      	ldr	r4, [sp, #4]
 8017d0c:	6905      	ldr	r5, [r0, #16]
 8017d0e:	46a0      	mov	r8, r4
 8017d10:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8017d12:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8017d16:	45a0      	cmp	r8, r4
 8017d18:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8017d1c:	f040 8150 	bne.w	8017fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 8017d20:	f9b5 1000 	ldrsh.w	r1, [r5]
 8017d24:	4551      	cmp	r1, sl
 8017d26:	d103      	bne.n	8017d30 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 8017d28:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8017d2c:	4291      	cmp	r1, r2
 8017d2e:	d018      	beq.n	8017d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017d30:	ea5c 010e 	orrs.w	r1, ip, lr
 8017d34:	d00f      	beq.n	8017d56 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017d36:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8017d3a:	2900      	cmp	r1, #0
 8017d3c:	db0b      	blt.n	8017d56 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017d3e:	428b      	cmp	r3, r1
 8017d40:	dd09      	ble.n	8017d56 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017d42:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8017d46:	4299      	cmp	r1, r3
 8017d48:	bf38      	it	cc
 8017d4a:	3508      	addcc	r5, #8
 8017d4c:	f101 0101 	add.w	r1, r1, #1
 8017d50:	bf38      	it	cc
 8017d52:	6105      	strcc	r5, [r0, #16]
 8017d54:	6081      	str	r1, [r0, #8]
 8017d56:	6903      	ldr	r3, [r0, #16]
 8017d58:	f8a3 a000 	strh.w	sl, [r3]
 8017d5c:	805a      	strh	r2, [r3, #2]
 8017d5e:	809e      	strh	r6, [r3, #4]
 8017d60:	80de      	strh	r6, [r3, #6]
 8017d62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017d64:	6901      	ldr	r1, [r0, #16]
 8017d66:	441a      	add	r2, r3
 8017d68:	88cc      	ldrh	r4, [r1, #6]
 8017d6a:	888b      	ldrh	r3, [r1, #4]
 8017d6c:	4323      	orrs	r3, r4
 8017d6e:	d010      	beq.n	8017d92 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017d70:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017d74:	2c00      	cmp	r4, #0
 8017d76:	db0c      	blt.n	8017d92 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017d78:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017d7a:	429c      	cmp	r4, r3
 8017d7c:	da09      	bge.n	8017d92 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017d7e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017d82:	429c      	cmp	r4, r3
 8017d84:	bf38      	it	cc
 8017d86:	3108      	addcc	r1, #8
 8017d88:	f104 0401 	add.w	r4, r4, #1
 8017d8c:	bf38      	it	cc
 8017d8e:	6101      	strcc	r1, [r0, #16]
 8017d90:	6084      	str	r4, [r0, #8]
 8017d92:	6903      	ldr	r3, [r0, #16]
 8017d94:	464f      	mov	r7, r9
 8017d96:	f8a3 a000 	strh.w	sl, [r3]
 8017d9a:	805a      	strh	r2, [r3, #2]
 8017d9c:	809e      	strh	r6, [r3, #4]
 8017d9e:	80de      	strh	r6, [r3, #6]
 8017da0:	9b06      	ldr	r3, [sp, #24]
 8017da2:	4293      	cmp	r3, r2
 8017da4:	d19c      	bne.n	8017ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 8017da6:	9b01      	ldr	r3, [sp, #4]
 8017da8:	6907      	ldr	r7, [r0, #16]
 8017daa:	f1c3 0620 	rsb	r6, r3, #32
 8017dae:	9b05      	ldr	r3, [sp, #20]
 8017db0:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8017db4:	9b04      	ldr	r3, [sp, #16]
 8017db6:	429e      	cmp	r6, r3
 8017db8:	f040 81cc 	bne.w	8018154 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8017dbc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017dc0:	459e      	cmp	lr, r3
 8017dc2:	d104      	bne.n	8017dce <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8017dc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	f43f ae36 	beq.w	8017a3a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017dce:	88f9      	ldrh	r1, [r7, #6]
 8017dd0:	88bb      	ldrh	r3, [r7, #4]
 8017dd2:	430b      	orrs	r3, r1
 8017dd4:	d010      	beq.n	8017df8 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017dd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	db0c      	blt.n	8017df8 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017dde:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8017de0:	428b      	cmp	r3, r1
 8017de2:	da09      	bge.n	8017df8 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017de4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017de8:	428b      	cmp	r3, r1
 8017dea:	bf38      	it	cc
 8017dec:	3708      	addcc	r7, #8
 8017dee:	f103 0301 	add.w	r3, r3, #1
 8017df2:	bf38      	it	cc
 8017df4:	6107      	strcc	r7, [r0, #16]
 8017df6:	6083      	str	r3, [r0, #8]
 8017df8:	6903      	ldr	r3, [r0, #16]
 8017dfa:	f8a3 e000 	strh.w	lr, [r3]
 8017dfe:	e5ff      	b.n	8017a00 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8017e00:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8017e02:	9c03      	ldr	r4, [sp, #12]
 8017e04:	42a2      	cmp	r2, r4
 8017e06:	f6ff ae18 	blt.w	8017a3a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017e0a:	9c06      	ldr	r4, [sp, #24]
 8017e0c:	42a2      	cmp	r2, r4
 8017e0e:	bfb8      	it	lt
 8017e10:	3201      	addlt	r2, #1
 8017e12:	9c08      	ldr	r4, [sp, #32]
 8017e14:	bfb8      	it	lt
 8017e16:	9206      	strlt	r2, [sp, #24]
 8017e18:	f1c3 0220 	rsb	r2, r3, #32
 8017e1c:	4362      	muls	r2, r4
 8017e1e:	2401      	movs	r4, #1
 8017e20:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017e22:	2420      	movs	r4, #32
 8017e24:	e6d5      	b.n	8017bd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 8017e26:	f009 021f 	and.w	r2, r9, #31
 8017e2a:	ea4f 1861 	mov.w	r8, r1, asr #5
 8017e2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8017e30:	9a01      	ldr	r2, [sp, #4]
 8017e32:	45b0      	cmp	r8, r6
 8017e34:	f001 011f 	and.w	r1, r1, #31
 8017e38:	eba2 0203 	sub.w	r2, r2, r3
 8017e3c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8017e40:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8017e44:	d108      	bne.n	8017e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 8017e46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017e48:	4496      	add	lr, r2
 8017e4a:	4419      	add	r1, r3
 8017e4c:	fb02 a101 	mla	r1, r2, r1, sl
 8017e50:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017e54:	80e9      	strh	r1, [r5, #6]
 8017e56:	e6f9      	b.n	8017c4c <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017e58:	2c00      	cmp	r4, #0
 8017e5a:	f2c0 80aa 	blt.w	8017fb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 8017e5e:	2701      	movs	r7, #1
 8017e60:	970a      	str	r7, [sp, #40]	@ 0x28
 8017e62:	2720      	movs	r7, #32
 8017e64:	f1c1 0c20 	rsb	ip, r1, #32
 8017e68:	fb02 f20c 	mul.w	r2, r2, ip
 8017e6c:	fb92 fcf4 	sdiv	ip, r2, r4
 8017e70:	fb04 221c 	mls	r2, r4, ip, r2
 8017e74:	9709      	str	r7, [sp, #36]	@ 0x24
 8017e76:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8017e78:	2a00      	cmp	r2, #0
 8017e7a:	bfb8      	it	lt
 8017e7c:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8017e80:	4439      	add	r1, r7
 8017e82:	fb0c a101 	mla	r1, ip, r1, sl
 8017e86:	44e6      	add	lr, ip
 8017e88:	80e9      	strh	r1, [r5, #6]
 8017e8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e8c:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017e90:	eb08 0501 	add.w	r5, r8, r1
 8017e94:	6901      	ldr	r1, [r0, #16]
 8017e96:	bfb8      	it	lt
 8017e98:	1912      	addlt	r2, r2, r4
 8017e9a:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8017e9e:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8017ea2:	ea58 070e 	orrs.w	r7, r8, lr
 8017ea6:	d010      	beq.n	8017eca <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017ea8:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8017eac:	f1be 0f00 	cmp.w	lr, #0
 8017eb0:	db0b      	blt.n	8017eca <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017eb2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017eb4:	45be      	cmp	lr, r7
 8017eb6:	da08      	bge.n	8017eca <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017eb8:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8017ebc:	45be      	cmp	lr, r7
 8017ebe:	bf3c      	itt	cc
 8017ec0:	3108      	addcc	r1, #8
 8017ec2:	6101      	strcc	r1, [r0, #16]
 8017ec4:	f10e 0101 	add.w	r1, lr, #1
 8017ec8:	6081      	str	r1, [r0, #8]
 8017eca:	f04f 0e00 	mov.w	lr, #0
 8017ece:	6901      	ldr	r1, [r0, #16]
 8017ed0:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017ed4:	42ae      	cmp	r6, r5
 8017ed6:	800d      	strh	r5, [r1, #0]
 8017ed8:	f8a1 8002 	strh.w	r8, [r1, #2]
 8017edc:	f8a1 e004 	strh.w	lr, [r1, #4]
 8017ee0:	f8a1 e006 	strh.w	lr, [r1, #6]
 8017ee4:	4463      	add	r3, ip
 8017ee6:	d055      	beq.n	8017f94 <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 8017ee8:	9901      	ldr	r1, [sp, #4]
 8017eea:	1b12      	subs	r2, r2, r4
 8017eec:	1ac9      	subs	r1, r1, r3
 8017eee:	4461      	add	r1, ip
 8017ef0:	0149      	lsls	r1, r1, #5
 8017ef2:	fb91 fef4 	sdiv	lr, r1, r4
 8017ef6:	fb04 111e 	mls	r1, r4, lr, r1
 8017efa:	2900      	cmp	r1, #0
 8017efc:	bfb8      	it	lt
 8017efe:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8017f02:	f10e 0701 	add.w	r7, lr, #1
 8017f06:	bfb8      	it	lt
 8017f08:	1909      	addlt	r1, r1, r4
 8017f0a:	970d      	str	r7, [sp, #52]	@ 0x34
 8017f0c:	1852      	adds	r2, r2, r1
 8017f0e:	bf48      	it	mi
 8017f10:	46f4      	movmi	ip, lr
 8017f12:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8017f16:	bf58      	it	pl
 8017f18:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8017f1c:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8017f20:	4463      	add	r3, ip
 8017f22:	44e3      	add	fp, ip
 8017f24:	f8aa b004 	strh.w	fp, [sl, #4]
 8017f28:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8017f2c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8017f2e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8017f32:	f8aa b006 	strh.w	fp, [sl, #6]
 8017f36:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017f3a:	bf58      	it	pl
 8017f3c:	1b12      	subpl	r2, r2, r4
 8017f3e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017f42:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8017f46:	443d      	add	r5, r7
 8017f48:	ea5b 070a 	orrs.w	r7, fp, sl
 8017f4c:	d014      	beq.n	8017f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8017f4e:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8017f52:	f1ba 0f00 	cmp.w	sl, #0
 8017f56:	db0f      	blt.n	8017f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8017f58:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017f5a:	45ba      	cmp	sl, r7
 8017f5c:	da0c      	bge.n	8017f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8017f5e:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8017f62:	45ba      	cmp	sl, r7
 8017f64:	bf38      	it	cc
 8017f66:	f10c 0c08 	addcc.w	ip, ip, #8
 8017f6a:	f10a 0a01 	add.w	sl, sl, #1
 8017f6e:	bf38      	it	cc
 8017f70:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8017f74:	f8c0 a008 	str.w	sl, [r0, #8]
 8017f78:	f04f 0700 	mov.w	r7, #0
 8017f7c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017f80:	42ae      	cmp	r6, r5
 8017f82:	f8ac 5000 	strh.w	r5, [ip]
 8017f86:	f8ac 8002 	strh.w	r8, [ip, #2]
 8017f8a:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017f8e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017f92:	d1bb      	bne.n	8017f0c <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 8017f94:	6904      	ldr	r4, [r0, #16]
 8017f96:	9a01      	ldr	r2, [sp, #4]
 8017f98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017f9a:	1ad3      	subs	r3, r2, r3
 8017f9c:	88a2      	ldrh	r2, [r4, #4]
 8017f9e:	3120      	adds	r1, #32
 8017fa0:	441a      	add	r2, r3
 8017fa2:	80a2      	strh	r2, [r4, #4]
 8017fa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017fa6:	1a89      	subs	r1, r1, r2
 8017fa8:	88e2      	ldrh	r2, [r4, #6]
 8017faa:	fb03 2301 	mla	r3, r3, r1, r2
 8017fae:	80e3      	strh	r3, [r4, #6]
 8017fb0:	e64c      	b.n	8017c4c <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017fb2:	f04f 37ff 	mov.w	r7, #4294967295
 8017fb6:	434a      	muls	r2, r1
 8017fb8:	970a      	str	r7, [sp, #40]	@ 0x28
 8017fba:	4264      	negs	r4, r4
 8017fbc:	2700      	movs	r7, #0
 8017fbe:	e755      	b.n	8017e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8017fc0:	ea4f 1867 	mov.w	r8, r7, asr #5
 8017fc4:	f009 031f 	and.w	r3, r9, #31
 8017fc8:	45d0      	cmp	r8, sl
 8017fca:	f007 071f 	and.w	r7, r7, #31
 8017fce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017fd0:	fa1f fc8c 	uxth.w	ip, ip
 8017fd4:	fa1f fe8e 	uxth.w	lr, lr
 8017fd8:	d10a      	bne.n	8017ff0 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 8017fda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017fdc:	449c      	add	ip, r3
 8017fde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017fe0:	f8a5 c004 	strh.w	ip, [r5, #4]
 8017fe4:	441f      	add	r7, r3
 8017fe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017fe8:	fb03 e707 	mla	r7, r3, r7, lr
 8017fec:	80ef      	strh	r7, [r5, #6]
 8017fee:	e6b8      	b.n	8017d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017ff0:	2900      	cmp	r1, #0
 8017ff2:	f2c0 80a7 	blt.w	8018144 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 8017ff6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017ff8:	f1c7 0320 	rsb	r3, r7, #32
 8017ffc:	4363      	muls	r3, r4
 8017ffe:	2401      	movs	r4, #1
 8018000:	940d      	str	r4, [sp, #52]	@ 0x34
 8018002:	2420      	movs	r4, #32
 8018004:	940c      	str	r4, [sp, #48]	@ 0x30
 8018006:	fb93 f4f1 	sdiv	r4, r3, r1
 801800a:	fb01 3b14 	mls	fp, r1, r4, r3
 801800e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018010:	f1bb 0f00 	cmp.w	fp, #0
 8018014:	bfb8      	it	lt
 8018016:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801801a:	441f      	add	r7, r3
 801801c:	fb04 e707 	mla	r7, r4, r7, lr
 8018020:	44a4      	add	ip, r4
 8018022:	f8a5 c004 	strh.w	ip, [r5, #4]
 8018026:	80ef      	strh	r7, [r5, #6]
 8018028:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801802c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801802e:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8018032:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018036:	bfb8      	it	lt
 8018038:	448b      	addlt	fp, r1
 801803a:	eb08 0503 	add.w	r5, r8, r3
 801803e:	ea5e 0307 	orrs.w	r3, lr, r7
 8018042:	d011      	beq.n	8018068 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8018044:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8018048:	f1be 0f00 	cmp.w	lr, #0
 801804c:	db0c      	blt.n	8018068 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 801804e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018050:	45be      	cmp	lr, r7
 8018052:	da09      	bge.n	8018068 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8018054:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018058:	45be      	cmp	lr, r7
 801805a:	bf3c      	itt	cc
 801805c:	f10c 0708 	addcc.w	r7, ip, #8
 8018060:	6107      	strcc	r7, [r0, #16]
 8018062:	f10e 0701 	add.w	r7, lr, #1
 8018066:	6087      	str	r7, [r0, #8]
 8018068:	6907      	ldr	r7, [r0, #16]
 801806a:	b213      	sxth	r3, r2
 801806c:	9310      	str	r3, [sp, #64]	@ 0x40
 801806e:	807b      	strh	r3, [r7, #2]
 8018070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018072:	4555      	cmp	r5, sl
 8018074:	803d      	strh	r5, [r7, #0]
 8018076:	80be      	strh	r6, [r7, #4]
 8018078:	80fe      	strh	r6, [r7, #6]
 801807a:	eb04 0c03 	add.w	ip, r4, r3
 801807e:	d050      	beq.n	8018122 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8018080:	9b01      	ldr	r3, [sp, #4]
 8018082:	eba3 070c 	sub.w	r7, r3, ip
 8018086:	443c      	add	r4, r7
 8018088:	0164      	lsls	r4, r4, #5
 801808a:	fb94 f8f1 	sdiv	r8, r4, r1
 801808e:	fb01 4418 	mls	r4, r1, r8, r4
 8018092:	2c00      	cmp	r4, #0
 8018094:	bfb8      	it	lt
 8018096:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801809a:	ebab 0301 	sub.w	r3, fp, r1
 801809e:	f108 0701 	add.w	r7, r8, #1
 80180a2:	bfb8      	it	lt
 80180a4:	1864      	addlt	r4, r4, r1
 80180a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80180a8:	9711      	str	r7, [sp, #68]	@ 0x44
 80180aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80180ac:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80180b0:	191b      	adds	r3, r3, r4
 80180b2:	bf4c      	ite	mi
 80180b4:	4647      	movmi	r7, r8
 80180b6:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 80180b8:	f8be b004 	ldrh.w	fp, [lr, #4]
 80180bc:	44bc      	add	ip, r7
 80180be:	44bb      	add	fp, r7
 80180c0:	f8ae b004 	strh.w	fp, [lr, #4]
 80180c4:	f8be b006 	ldrh.w	fp, [lr, #6]
 80180c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80180ca:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80180ce:	f8ae b006 	strh.w	fp, [lr, #6]
 80180d2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80180d4:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80180d8:	443d      	add	r5, r7
 80180da:	f8be b006 	ldrh.w	fp, [lr, #6]
 80180de:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80180e2:	bf5c      	itt	pl
 80180e4:	1a5b      	subpl	r3, r3, r1
 80180e6:	9309      	strpl	r3, [sp, #36]	@ 0x24
 80180e8:	ea5b 0307 	orrs.w	r3, fp, r7
 80180ec:	d011      	beq.n	8018112 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80180ee:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80180f2:	f1bb 0f00 	cmp.w	fp, #0
 80180f6:	db0c      	blt.n	8018112 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80180f8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80180fa:	45bb      	cmp	fp, r7
 80180fc:	da09      	bge.n	8018112 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80180fe:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018102:	45bb      	cmp	fp, r7
 8018104:	bf3c      	itt	cc
 8018106:	f10e 0708 	addcc.w	r7, lr, #8
 801810a:	6107      	strcc	r7, [r0, #16]
 801810c:	f10b 0701 	add.w	r7, fp, #1
 8018110:	6087      	str	r7, [r0, #8]
 8018112:	6907      	ldr	r7, [r0, #16]
 8018114:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018116:	4555      	cmp	r5, sl
 8018118:	803d      	strh	r5, [r7, #0]
 801811a:	807b      	strh	r3, [r7, #2]
 801811c:	80be      	strh	r6, [r7, #4]
 801811e:	80fe      	strh	r6, [r7, #6]
 8018120:	d1c3      	bne.n	80180aa <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 8018122:	9b01      	ldr	r3, [sp, #4]
 8018124:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018126:	eba3 0c0c 	sub.w	ip, r3, ip
 801812a:	6903      	ldr	r3, [r0, #16]
 801812c:	3720      	adds	r7, #32
 801812e:	8899      	ldrh	r1, [r3, #4]
 8018130:	4461      	add	r1, ip
 8018132:	8099      	strh	r1, [r3, #4]
 8018134:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018136:	1a7f      	subs	r7, r7, r1
 8018138:	88d9      	ldrh	r1, [r3, #6]
 801813a:	fb0c 1c07 	mla	ip, ip, r7, r1
 801813e:	f8a3 c006 	strh.w	ip, [r3, #6]
 8018142:	e60e      	b.n	8017d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8018144:	f04f 34ff 	mov.w	r4, #4294967295
 8018148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801814a:	940d      	str	r4, [sp, #52]	@ 0x34
 801814c:	437b      	muls	r3, r7
 801814e:	4249      	negs	r1, r1
 8018150:	2400      	movs	r4, #0
 8018152:	e757      	b.n	8018004 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8018154:	9905      	ldr	r1, [sp, #20]
 8018156:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801815a:	f001 011f 	and.w	r1, r1, #31
 801815e:	9102      	str	r1, [sp, #8]
 8018160:	9904      	ldr	r1, [sp, #16]
 8018162:	45f3      	cmp	fp, lr
 8018164:	f009 0c1f 	and.w	ip, r9, #31
 8018168:	eba1 0406 	sub.w	r4, r1, r6
 801816c:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8018170:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8018174:	d108      	bne.n	8018188 <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 8018176:	9b02      	ldr	r3, [sp, #8]
 8018178:	44a0      	add	r8, r4
 801817a:	449c      	add	ip, r3
 801817c:	fb04 a40c 	mla	r4, r4, ip, sl
 8018180:	f8a7 8004 	strh.w	r8, [r7, #4]
 8018184:	80fc      	strh	r4, [r7, #6]
 8018186:	e458      	b.n	8017a3a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8018188:	9905      	ldr	r1, [sp, #20]
 801818a:	ebb1 0109 	subs.w	r1, r1, r9
 801818e:	bf5b      	ittet	pl
 8018190:	f1cc 0520 	rsbpl	r5, ip, #32
 8018194:	436c      	mulpl	r4, r5
 8018196:	2500      	movmi	r5, #0
 8018198:	2520      	movpl	r5, #32
 801819a:	bf44      	itt	mi
 801819c:	fb04 f40c 	mulmi.w	r4, r4, ip
 80181a0:	4249      	negmi	r1, r1
 80181a2:	9501      	str	r5, [sp, #4]
 80181a4:	fb94 f5f1 	sdiv	r5, r4, r1
 80181a8:	bf54      	ite	pl
 80181aa:	f04f 0901 	movpl.w	r9, #1
 80181ae:	f04f 39ff 	movmi.w	r9, #4294967295
 80181b2:	fb01 4415 	mls	r4, r1, r5, r4
 80181b6:	9b01      	ldr	r3, [sp, #4]
 80181b8:	2c00      	cmp	r4, #0
 80181ba:	bfb8      	it	lt
 80181bc:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80181c0:	449c      	add	ip, r3
 80181c2:	fb05 ac0c 	mla	ip, r5, ip, sl
 80181c6:	44a8      	add	r8, r5
 80181c8:	f8a7 8004 	strh.w	r8, [r7, #4]
 80181cc:	f8a7 c006 	strh.w	ip, [r7, #6]
 80181d0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80181d4:	bfb8      	it	lt
 80181d6:	1864      	addlt	r4, r4, r1
 80181d8:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80181dc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80181e0:	eb0b 0309 	add.w	r3, fp, r9
 80181e4:	ea58 0707 	orrs.w	r7, r8, r7
 80181e8:	d011      	beq.n	801820e <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80181ea:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80181ee:	f1b8 0f00 	cmp.w	r8, #0
 80181f2:	db0c      	blt.n	801820e <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80181f4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80181f6:	45b8      	cmp	r8, r7
 80181f8:	da09      	bge.n	801820e <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80181fa:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80181fe:	45b8      	cmp	r8, r7
 8018200:	bf3c      	itt	cc
 8018202:	f10c 0708 	addcc.w	r7, ip, #8
 8018206:	6107      	strcc	r7, [r0, #16]
 8018208:	f108 0701 	add.w	r7, r8, #1
 801820c:	6087      	str	r7, [r0, #8]
 801820e:	f04f 0c00 	mov.w	ip, #0
 8018212:	6907      	ldr	r7, [r0, #16]
 8018214:	b212      	sxth	r2, r2
 8018216:	459e      	cmp	lr, r3
 8018218:	803b      	strh	r3, [r7, #0]
 801821a:	807a      	strh	r2, [r7, #2]
 801821c:	f8a7 c004 	strh.w	ip, [r7, #4]
 8018220:	f8a7 c006 	strh.w	ip, [r7, #6]
 8018224:	442e      	add	r6, r5
 8018226:	d04d      	beq.n	80182c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 8018228:	9f04      	ldr	r7, [sp, #16]
 801822a:	f04f 0a00 	mov.w	sl, #0
 801822e:	1bbf      	subs	r7, r7, r6
 8018230:	443d      	add	r5, r7
 8018232:	016d      	lsls	r5, r5, #5
 8018234:	fb95 f8f1 	sdiv	r8, r5, r1
 8018238:	fb01 5518 	mls	r5, r1, r8, r5
 801823c:	4565      	cmp	r5, ip
 801823e:	bfb8      	it	lt
 8018240:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018244:	f108 0701 	add.w	r7, r8, #1
 8018248:	bfb8      	it	lt
 801824a:	186d      	addlt	r5, r5, r1
 801824c:	1a64      	subs	r4, r4, r1
 801824e:	9703      	str	r7, [sp, #12]
 8018250:	1964      	adds	r4, r4, r5
 8018252:	bf48      	it	mi
 8018254:	4647      	movmi	r7, r8
 8018256:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801825a:	bf58      	it	pl
 801825c:	9f03      	ldrpl	r7, [sp, #12]
 801825e:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018262:	443e      	add	r6, r7
 8018264:	44bb      	add	fp, r7
 8018266:	f8ac b004 	strh.w	fp, [ip, #4]
 801826a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801826e:	bf58      	it	pl
 8018270:	1a64      	subpl	r4, r4, r1
 8018272:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018276:	f8ac b006 	strh.w	fp, [ip, #6]
 801827a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801827e:	444b      	add	r3, r9
 8018280:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018284:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018288:	ea5b 0707 	orrs.w	r7, fp, r7
 801828c:	d011      	beq.n	80182b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801828e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018292:	f1bb 0f00 	cmp.w	fp, #0
 8018296:	db0c      	blt.n	80182b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8018298:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801829a:	45bb      	cmp	fp, r7
 801829c:	da09      	bge.n	80182b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801829e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80182a2:	45bb      	cmp	fp, r7
 80182a4:	bf3c      	itt	cc
 80182a6:	f10c 0708 	addcc.w	r7, ip, #8
 80182aa:	6107      	strcc	r7, [r0, #16]
 80182ac:	f10b 0701 	add.w	r7, fp, #1
 80182b0:	6087      	str	r7, [r0, #8]
 80182b2:	6907      	ldr	r7, [r0, #16]
 80182b4:	459e      	cmp	lr, r3
 80182b6:	803b      	strh	r3, [r7, #0]
 80182b8:	807a      	strh	r2, [r7, #2]
 80182ba:	f8a7 a004 	strh.w	sl, [r7, #4]
 80182be:	f8a7 a006 	strh.w	sl, [r7, #6]
 80182c2:	d1c5      	bne.n	8018250 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 80182c4:	9b04      	ldr	r3, [sp, #16]
 80182c6:	1b9e      	subs	r6, r3, r6
 80182c8:	6903      	ldr	r3, [r0, #16]
 80182ca:	889a      	ldrh	r2, [r3, #4]
 80182cc:	4432      	add	r2, r6
 80182ce:	809a      	strh	r2, [r3, #4]
 80182d0:	9a02      	ldr	r2, [sp, #8]
 80182d2:	f102 0c20 	add.w	ip, r2, #32
 80182d6:	9a01      	ldr	r2, [sp, #4]
 80182d8:	ebac 0c02 	sub.w	ip, ip, r2
 80182dc:	88da      	ldrh	r2, [r3, #6]
 80182de:	fb06 260c 	mla	r6, r6, ip, r2
 80182e2:	80de      	strh	r6, [r3, #6]
 80182e4:	f7ff bba9 	b.w	8017a3a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

080182e8 <_ZN8touchgfx7Outline6lineToEii>:
 80182e8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80182ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80182ec:	079b      	lsls	r3, r3, #30
 80182ee:	460e      	mov	r6, r1
 80182f0:	4615      	mov	r5, r2
 80182f2:	d511      	bpl.n	8018318 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80182f4:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80182f8:	ea86 0701 	eor.w	r7, r6, r1
 80182fc:	ea85 0302 	eor.w	r3, r5, r2
 8018300:	433b      	orrs	r3, r7
 8018302:	d009      	beq.n	8018318 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8018304:	4633      	mov	r3, r6
 8018306:	9500      	str	r5, [sp, #0]
 8018308:	f7ff fb3e 	bl	8017988 <_ZN8touchgfx7Outline10renderLineEiiii>
 801830c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801830e:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8018312:	f043 0301 	orr.w	r3, r3, #1
 8018316:	6243      	str	r3, [r0, #36]	@ 0x24
 8018318:	b003      	add	sp, #12
 801831a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801831c <_ZN8touchgfx7Outline6moveToEii>:
 801831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801831e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018320:	4615      	mov	r5, r2
 8018322:	079a      	lsls	r2, r3, #30
 8018324:	4604      	mov	r4, r0
 8018326:	460e      	mov	r6, r1
 8018328:	d401      	bmi.n	801832e <_ZN8touchgfx7Outline6moveToEii+0x12>
 801832a:	f7ff faf9 	bl	8017920 <_ZN8touchgfx7Outline5resetEv>
 801832e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018330:	07db      	lsls	r3, r3, #31
 8018332:	d504      	bpl.n	801833e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8018334:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8018338:	4620      	mov	r0, r4
 801833a:	f7ff ffd5 	bl	80182e8 <_ZN8touchgfx7Outline6lineToEii>
 801833e:	6923      	ldr	r3, [r4, #16]
 8018340:	1170      	asrs	r0, r6, #5
 8018342:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018346:	1169      	asrs	r1, r5, #5
 8018348:	4290      	cmp	r0, r2
 801834a:	d103      	bne.n	8018354 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801834c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018350:	4291      	cmp	r1, r2
 8018352:	d01a      	beq.n	801838a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8018354:	88df      	ldrh	r7, [r3, #6]
 8018356:	889a      	ldrh	r2, [r3, #4]
 8018358:	433a      	orrs	r2, r7
 801835a:	d010      	beq.n	801837e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801835c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018360:	2a00      	cmp	r2, #0
 8018362:	db0c      	blt.n	801837e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018364:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8018366:	42ba      	cmp	r2, r7
 8018368:	da09      	bge.n	801837e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801836a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801836e:	42ba      	cmp	r2, r7
 8018370:	bf38      	it	cc
 8018372:	3308      	addcc	r3, #8
 8018374:	f102 0201 	add.w	r2, r2, #1
 8018378:	bf38      	it	cc
 801837a:	6123      	strcc	r3, [r4, #16]
 801837c:	60a2      	str	r2, [r4, #8]
 801837e:	2200      	movs	r2, #0
 8018380:	6923      	ldr	r3, [r4, #16]
 8018382:	8018      	strh	r0, [r3, #0]
 8018384:	8059      	strh	r1, [r3, #2]
 8018386:	809a      	strh	r2, [r3, #4]
 8018388:	80da      	strh	r2, [r3, #6]
 801838a:	6166      	str	r6, [r4, #20]
 801838c:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018390:	6225      	str	r5, [r4, #32]
 8018392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018394 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8018394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018398:	b0d0      	sub	sp, #320	@ 0x140
 801839a:	466c      	mov	r4, sp
 801839c:	4627      	mov	r7, r4
 801839e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80183a2:	1a0d      	subs	r5, r1, r0
 80183a4:	2d48      	cmp	r5, #72	@ 0x48
 80183a6:	f100 0308 	add.w	r3, r0, #8
 80183aa:	f340 80d5 	ble.w	8018558 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80183ae:	112d      	asrs	r5, r5, #4
 80183b0:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80183b4:	6816      	ldr	r6, [r2, #0]
 80183b6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80183ba:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80183be:	6006      	str	r6, [r0, #0]
 80183c0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80183c4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80183c8:	6856      	ldr	r6, [r2, #4]
 80183ca:	6046      	str	r6, [r0, #4]
 80183cc:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80183d0:	f8a2 8002 	strh.w	r8, [r2, #2]
 80183d4:	f8a2 e004 	strh.w	lr, [r2, #4]
 80183d8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80183dc:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80183e0:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80183e4:	f1a1 0208 	sub.w	r2, r1, #8
 80183e8:	4565      	cmp	r5, ip
 80183ea:	db06      	blt.n	80183fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80183ec:	d119      	bne.n	8018422 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80183ee:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80183f2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80183f6:	42ae      	cmp	r6, r5
 80183f8:	dd13      	ble.n	8018422 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80183fa:	460e      	mov	r6, r1
 80183fc:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018400:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8018404:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8018408:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801840c:	601d      	str	r5, [r3, #0]
 801840e:	6875      	ldr	r5, [r6, #4]
 8018410:	605d      	str	r5, [r3, #4]
 8018412:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018416:	f821 cc06 	strh.w	ip, [r1, #-6]
 801841a:	f821 8c04 	strh.w	r8, [r1, #-4]
 801841e:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018422:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018426:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801842a:	42ae      	cmp	r6, r5
 801842c:	db06      	blt.n	801843c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801842e:	d116      	bne.n	801845e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018430:	f9b0 c000 	ldrsh.w	ip, [r0]
 8018434:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8018438:	45ac      	cmp	ip, r5
 801843a:	da10      	bge.n	801845e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801843c:	681d      	ldr	r5, [r3, #0]
 801843e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8018442:	6005      	str	r5, [r0, #0]
 8018444:	685d      	ldr	r5, [r3, #4]
 8018446:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801844a:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801844e:	f8a0 8008 	strh.w	r8, [r0, #8]
 8018452:	6045      	str	r5, [r0, #4]
 8018454:	8146      	strh	r6, [r0, #10]
 8018456:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801845a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801845e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018462:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018466:	4565      	cmp	r5, ip
 8018468:	db06      	blt.n	8018478 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801846a:	d119      	bne.n	80184a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801846c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8018470:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018474:	42ae      	cmp	r6, r5
 8018476:	da13      	bge.n	80184a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018478:	460e      	mov	r6, r1
 801847a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801847e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018482:	6005      	str	r5, [r0, #0]
 8018484:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8018488:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801848c:	6875      	ldr	r5, [r6, #4]
 801848e:	6045      	str	r5, [r0, #4]
 8018490:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018494:	f821 cc06 	strh.w	ip, [r1, #-6]
 8018498:	f821 8c04 	strh.w	r8, [r1, #-4]
 801849c:	f821 ec02 	strh.w	lr, [r1, #-2]
 80184a0:	3308      	adds	r3, #8
 80184a2:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80184a6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80184aa:	45e6      	cmp	lr, ip
 80184ac:	dbf8      	blt.n	80184a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80184ae:	d105      	bne.n	80184bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80184b0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80184b4:	f9b0 5000 	ldrsh.w	r5, [r0]
 80184b8:	42ae      	cmp	r6, r5
 80184ba:	dbf1      	blt.n	80184a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80184bc:	4615      	mov	r5, r2
 80184be:	3a08      	subs	r2, #8
 80184c0:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80184c4:	45b4      	cmp	ip, r6
 80184c6:	dbf9      	blt.n	80184bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80184c8:	d105      	bne.n	80184d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80184ca:	f9b0 8000 	ldrsh.w	r8, [r0]
 80184ce:	f9b2 6000 	ldrsh.w	r6, [r2]
 80184d2:	45b0      	cmp	r8, r6
 80184d4:	dbf2      	blt.n	80184bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80184d6:	4293      	cmp	r3, r2
 80184d8:	f1a5 0608 	sub.w	r6, r5, #8
 80184dc:	d816      	bhi.n	801850c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80184de:	f8d6 c000 	ldr.w	ip, [r6]
 80184e2:	f9b3 a000 	ldrsh.w	sl, [r3]
 80184e6:	f8c3 c000 	str.w	ip, [r3]
 80184ea:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80184ee:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80184f2:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80184f6:	f8c3 c004 	str.w	ip, [r3, #4]
 80184fa:	f825 ac08 	strh.w	sl, [r5, #-8]
 80184fe:	f825 ec06 	strh.w	lr, [r5, #-6]
 8018502:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018506:	f825 8c02 	strh.w	r8, [r5, #-2]
 801850a:	e7c9      	b.n	80184a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801850c:	f8d6 e000 	ldr.w	lr, [r6]
 8018510:	f9b0 a000 	ldrsh.w	sl, [r0]
 8018514:	f8c0 e000 	str.w	lr, [r0]
 8018518:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801851c:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8018520:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8018524:	1a16      	subs	r6, r2, r0
 8018526:	f8c0 e004 	str.w	lr, [r0, #4]
 801852a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801852e:	f825 cc06 	strh.w	ip, [r5, #-6]
 8018532:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018536:	f825 8c02 	strh.w	r8, [r5, #-2]
 801853a:	1acd      	subs	r5, r1, r3
 801853c:	10ed      	asrs	r5, r5, #3
 801853e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8018542:	bfb5      	itete	lt
 8018544:	e9c4 0200 	strdlt	r0, r2, [r4]
 8018548:	e9c4 3100 	strdge	r3, r1, [r4]
 801854c:	460a      	movlt	r2, r1
 801854e:	4603      	movge	r3, r0
 8018550:	3408      	adds	r4, #8
 8018552:	4618      	mov	r0, r3
 8018554:	4611      	mov	r1, r2
 8018556:	e724      	b.n	80183a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018558:	4299      	cmp	r1, r3
 801855a:	d928      	bls.n	80185ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 801855c:	f1a3 0210 	sub.w	r2, r3, #16
 8018560:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8018564:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8018568:	45ac      	cmp	ip, r5
 801856a:	db06      	blt.n	801857a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801856c:	d11d      	bne.n	80185aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801856e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8018572:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8018576:	42ae      	cmp	r6, r5
 8018578:	da17      	bge.n	80185aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801857a:	4615      	mov	r5, r2
 801857c:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8018580:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8018584:	6116      	str	r6, [r2, #16]
 8018586:	686e      	ldr	r6, [r5, #4]
 8018588:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801858c:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8018590:	42a8      	cmp	r0, r5
 8018592:	6156      	str	r6, [r2, #20]
 8018594:	f8a2 9008 	strh.w	r9, [r2, #8]
 8018598:	f8a2 c00a 	strh.w	ip, [r2, #10]
 801859c:	f8a2 800c 	strh.w	r8, [r2, #12]
 80185a0:	f8a2 e00e 	strh.w	lr, [r2, #14]
 80185a4:	f1a2 0208 	sub.w	r2, r2, #8
 80185a8:	d1da      	bne.n	8018560 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80185aa:	3308      	adds	r3, #8
 80185ac:	e7d4      	b.n	8018558 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80185ae:	42bc      	cmp	r4, r7
 80185b0:	d903      	bls.n	80185ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 80185b2:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80185b6:	3c08      	subs	r4, #8
 80185b8:	e6f3      	b.n	80183a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80185ba:	b050      	add	sp, #320	@ 0x140
 80185bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080185c0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80185c0:	b510      	push	{r4, lr}
 80185c2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80185c4:	4604      	mov	r4, r0
 80185c6:	07da      	lsls	r2, r3, #31
 80185c8:	d507      	bpl.n	80185da <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80185ca:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80185ce:	f7ff fe8b 	bl	80182e8 <_ZN8touchgfx7Outline6lineToEii>
 80185d2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80185d4:	f023 0301 	bic.w	r3, r3, #1
 80185d8:	6243      	str	r3, [r0, #36]	@ 0x24
 80185da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80185dc:	079b      	lsls	r3, r3, #30
 80185de:	d521      	bpl.n	8018624 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80185e0:	6923      	ldr	r3, [r4, #16]
 80185e2:	88d9      	ldrh	r1, [r3, #6]
 80185e4:	889a      	ldrh	r2, [r3, #4]
 80185e6:	430a      	orrs	r2, r1
 80185e8:	d010      	beq.n	801860c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80185ea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80185ee:	2a00      	cmp	r2, #0
 80185f0:	db0c      	blt.n	801860c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80185f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80185f4:	428a      	cmp	r2, r1
 80185f6:	da09      	bge.n	801860c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80185f8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80185fc:	4291      	cmp	r1, r2
 80185fe:	bf88      	it	hi
 8018600:	3308      	addhi	r3, #8
 8018602:	f102 0201 	add.w	r2, r2, #1
 8018606:	bf88      	it	hi
 8018608:	6123      	strhi	r3, [r4, #16]
 801860a:	60a2      	str	r2, [r4, #8]
 801860c:	68a1      	ldr	r1, [r4, #8]
 801860e:	b129      	cbz	r1, 801861c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8018610:	6863      	ldr	r3, [r4, #4]
 8018612:	4299      	cmp	r1, r3
 8018614:	d802      	bhi.n	801861c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8018616:	68e0      	ldr	r0, [r4, #12]
 8018618:	f7ff febc 	bl	8018394 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801861c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801861e:	f023 0302 	bic.w	r3, r3, #2
 8018622:	6263      	str	r3, [r4, #36]	@ 0x24
 8018624:	68e0      	ldr	r0, [r4, #12]
 8018626:	bd10      	pop	{r4, pc}

08018628 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8018628:	4b01      	ldr	r3, [pc, #4]	@ (8018630 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801862a:	6818      	ldr	r0, [r3, #0]
 801862c:	4770      	bx	lr
 801862e:	bf00      	nop
 8018630:	2005baac 	.word	0x2005baac

08018634 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8018634:	4b01      	ldr	r3, [pc, #4]	@ (801863c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8018636:	6818      	ldr	r0, [r3, #0]
 8018638:	4770      	bx	lr
 801863a:	bf00      	nop
 801863c:	2005bab0 	.word	0x2005bab0

08018640 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8018640:	b510      	push	{r4, lr}
 8018642:	6803      	ldr	r3, [r0, #0]
 8018644:	460c      	mov	r4, r1
 8018646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018648:	4798      	blx	r3
 801864a:	1b03      	subs	r3, r0, r4
 801864c:	4258      	negs	r0, r3
 801864e:	4158      	adcs	r0, r3
 8018650:	bd10      	pop	{r4, pc}
	...

08018654 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8018654:	4b01      	ldr	r3, [pc, #4]	@ (801865c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8018656:	6019      	str	r1, [r3, #0]
 8018658:	4770      	bx	lr
 801865a:	bf00      	nop
 801865c:	2005bab4 	.word	0x2005bab4

08018660 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018664:	4696      	mov	lr, r2
 8018666:	4614      	mov	r4, r2
 8018668:	4605      	mov	r5, r0
 801866a:	460e      	mov	r6, r1
 801866c:	461f      	mov	r7, r3
 801866e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018672:	b097      	sub	sp, #92	@ 0x5c
 8018674:	f10d 0c1c 	add.w	ip, sp, #28
 8018678:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801867c:	f8de 3000 	ldr.w	r3, [lr]
 8018680:	f104 0e14 	add.w	lr, r4, #20
 8018684:	f8cc 3000 	str.w	r3, [ip]
 8018688:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801868c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018690:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018694:	f8de 3000 	ldr.w	r3, [lr]
 8018698:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801869c:	f8cc 3000 	str.w	r3, [ip]
 80186a0:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80186a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80186a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80186ac:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80186b0:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80186b4:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80186b8:	f8de 3000 	ldr.w	r3, [lr]
 80186bc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80186be:	f8cc 3000 	str.w	r3, [ip]
 80186c2:	9201      	str	r2, [sp, #4]
 80186c4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80186c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80186ca:	682b      	ldr	r3, [r5, #0]
 80186cc:	9200      	str	r2, [sp, #0]
 80186ce:	f8cd 8008 	str.w	r8, [sp, #8]
 80186d2:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80186d6:	aa07      	add	r2, sp, #28
 80186d8:	463b      	mov	r3, r7
 80186da:	4631      	mov	r1, r6
 80186dc:	4628      	mov	r0, r5
 80186de:	47d8      	blx	fp
 80186e0:	46a6      	mov	lr, r4
 80186e2:	f10d 0c1c 	add.w	ip, sp, #28
 80186e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80186ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80186ee:	f8de 3000 	ldr.w	r3, [lr]
 80186f2:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80186f6:	f8cc 3000 	str.w	r3, [ip]
 80186fa:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80186fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018702:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018706:	f8de 3000 	ldr.w	r3, [lr]
 801870a:	343c      	adds	r4, #60	@ 0x3c
 801870c:	f8cc 3000 	str.w	r3, [ip]
 8018710:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8018714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018716:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801871a:	6823      	ldr	r3, [r4, #0]
 801871c:	4631      	mov	r1, r6
 801871e:	f8cc 3000 	str.w	r3, [ip]
 8018722:	682b      	ldr	r3, [r5, #0]
 8018724:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018728:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801872a:	f8cd 8008 	str.w	r8, [sp, #8]
 801872e:	9201      	str	r2, [sp, #4]
 8018730:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018732:	4628      	mov	r0, r5
 8018734:	9200      	str	r2, [sp, #0]
 8018736:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8018738:	aa07      	add	r2, sp, #28
 801873a:	463b      	mov	r3, r7
 801873c:	47a0      	blx	r4
 801873e:	b017      	add	sp, #92	@ 0x5c
 8018740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018744 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018744:	2000      	movs	r0, #0
 8018746:	4770      	bx	lr

08018748 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801874c:	b08d      	sub	sp, #52	@ 0x34
 801874e:	4688      	mov	r8, r1
 8018750:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8018752:	f8d3 c000 	ldr.w	ip, [r3]
 8018756:	680f      	ldr	r7, [r1, #0]
 8018758:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801875c:	eba7 070c 	sub.w	r7, r7, ip
 8018760:	42bc      	cmp	r4, r7
 8018762:	bfa8      	it	ge
 8018764:	463c      	movge	r4, r7
 8018766:	ee07 4a90 	vmov	s15, r4
 801876a:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801876e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018772:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8018776:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801877a:	edd3 6a07 	vldr	s13, [r3, #28]
 801877e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018782:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018786:	ee25 5a27 	vmul.f32	s10, s10, s15
 801878a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801878e:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8018792:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8018796:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801879a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801879c:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80187a0:	f9b1 9000 	ldrsh.w	r9, [r1]
 80187a4:	f9ba 1000 	ldrsh.w	r1, [sl]
 80187a8:	eb09 0e0c 	add.w	lr, r9, ip
 80187ac:	4571      	cmp	r1, lr
 80187ae:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80187b2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80187b6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80187ba:	ee61 1a87 	vmul.f32	s3, s3, s14
 80187be:	ee22 2a07 	vmul.f32	s4, s4, s14
 80187c2:	f340 808c 	ble.w	80188de <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80187c6:	eba1 060e 	sub.w	r6, r1, lr
 80187ca:	fb96 f5f4 	sdiv	r5, r6, r4
 80187ce:	ee07 5a10 	vmov	s14, r5
 80187d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187d6:	2d00      	cmp	r5, #0
 80187d8:	fb04 6615 	mls	r6, r4, r5, r6
 80187dc:	eea7 0a04 	vfma.f32	s0, s14, s8
 80187e0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80187e4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80187e8:	dd12      	ble.n	8018810 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80187ea:	ee70 6a44 	vsub.f32	s13, s0, s8
 80187ee:	eef5 6a40 	vcmp.f32	s13, #0.0
 80187f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187f6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80187fa:	bf14      	ite	ne
 80187fc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018800:	eeb0 7a67 	vmoveq.f32	s14, s15
 8018804:	ee31 2a45 	vsub.f32	s4, s2, s10
 8018808:	ee61 1a87 	vmul.f32	s3, s3, s14
 801880c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018810:	fb05 f204 	mul.w	r2, r5, r4
 8018814:	1abf      	subs	r7, r7, r2
 8018816:	4494      	add	ip, r2
 8018818:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801881c:	4411      	add	r1, r2
 801881e:	eb09 020c 	add.w	r2, r9, ip
 8018822:	443a      	add	r2, r7
 8018824:	b209      	sxth	r1, r1
 8018826:	428a      	cmp	r2, r1
 8018828:	bfc4      	itt	gt
 801882a:	eba1 0209 	subgt.w	r2, r1, r9
 801882e:	eba2 070c 	subgt.w	r7, r2, ip
 8018832:	2f00      	cmp	r7, #0
 8018834:	dd50      	ble.n	80188d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8018836:	fb97 f1f4 	sdiv	r1, r7, r4
 801883a:	fb04 7211 	mls	r2, r4, r1, r7
 801883e:	b90a      	cbnz	r2, 8018844 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8018840:	4622      	mov	r2, r4
 8018842:	3901      	subs	r1, #1
 8018844:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018848:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801884c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018850:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018854:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018858:	ee17 7a90 	vmov	r7, s15
 801885c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018860:	eef0 6a42 	vmov.f32	s13, s4
 8018864:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018868:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801886c:	ee17 ca90 	vmov	ip, s15
 8018870:	eeb0 7a61 	vmov.f32	s14, s3
 8018874:	6840      	ldr	r0, [r0, #4]
 8018876:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801887a:	f8d0 a000 	ldr.w	sl, [r0]
 801887e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018880:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8018882:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8018886:	9008      	str	r0, [sp, #32]
 8018888:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801888a:	695b      	ldr	r3, [r3, #20]
 801888c:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018890:	fb9c fcf4 	sdiv	ip, ip, r4
 8018894:	445b      	add	r3, fp
 8018896:	9307      	str	r3, [sp, #28]
 8018898:	ee16 3a90 	vmov	r3, s13
 801889c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80188a0:	fb0c 3306 	mla	r3, ip, r6, r3
 80188a4:	fb97 f7f4 	sdiv	r7, r7, r4
 80188a8:	9302      	str	r3, [sp, #8]
 80188aa:	ee17 3a10 	vmov	r3, s14
 80188ae:	2900      	cmp	r1, #0
 80188b0:	bfcc      	ite	gt
 80188b2:	46a1      	movgt	r9, r4
 80188b4:	4691      	movle	r9, r2
 80188b6:	44b6      	add	lr, r6
 80188b8:	fb04 e505 	mla	r5, r4, r5, lr
 80188bc:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80188c0:	fb07 3706 	mla	r7, r7, r6, r3
 80188c4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80188c8:	e9cd 4700 	strd	r4, r7, [sp]
 80188cc:	eba9 0306 	sub.w	r3, r9, r6
 80188d0:	f8da 4008 	ldr.w	r4, [sl, #8]
 80188d4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80188d6:	47a0      	blx	r4
 80188d8:	b00d      	add	sp, #52	@ 0x34
 80188da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188de:	2500      	movs	r5, #0
 80188e0:	462e      	mov	r6, r5
 80188e2:	e799      	b.n	8018818 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080188e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80188e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188e8:	461d      	mov	r5, r3
 80188ea:	b0db      	sub	sp, #364	@ 0x16c
 80188ec:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 80188f0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80188f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80188f4:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 80188f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80188fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80188fc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8018900:	4614      	mov	r4, r2
 8018902:	9310      	str	r3, [sp, #64]	@ 0x40
 8018904:	6803      	ldr	r3, [r0, #0]
 8018906:	4629      	mov	r1, r5
 8018908:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801890a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801890e:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8018912:	47b8      	blx	r7
 8018914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018916:	6058      	str	r0, [r3, #4]
 8018918:	2800      	cmp	r0, #0
 801891a:	f000 83a1 	beq.w	8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801891e:	ed94 7a02 	vldr	s14, [r4, #8]
 8018922:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8018926:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801892a:	682b      	ldr	r3, [r5, #0]
 801892c:	9314      	str	r3, [sp, #80]	@ 0x50
 801892e:	686b      	ldr	r3, [r5, #4]
 8018930:	9315      	str	r3, [sp, #84]	@ 0x54
 8018932:	4bc1      	ldr	r3, [pc, #772]	@ (8018c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8018934:	7819      	ldrb	r1, [r3, #0]
 8018936:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801893a:	2900      	cmp	r1, #0
 801893c:	bf16      	itet	ne
 801893e:	4619      	movne	r1, r3
 8018940:	4611      	moveq	r1, r2
 8018942:	4613      	movne	r3, r2
 8018944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018948:	9116      	str	r1, [sp, #88]	@ 0x58
 801894a:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801894e:	f240 8387 	bls.w	8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018952:	ed94 7a07 	vldr	s14, [r4, #28]
 8018956:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801895a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801895e:	f240 837f 	bls.w	8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018962:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8018966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801896a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801896e:	f240 8377 	bls.w	8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018972:	6822      	ldr	r2, [r4, #0]
 8018974:	4bb1      	ldr	r3, [pc, #708]	@ (8018c3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8018976:	429a      	cmp	r2, r3
 8018978:	f2c0 8372 	blt.w	8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801897c:	49b0      	ldr	r1, [pc, #704]	@ (8018c40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801897e:	6963      	ldr	r3, [r4, #20]
 8018980:	428a      	cmp	r2, r1
 8018982:	f300 836d 	bgt.w	8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018986:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801898a:	48ae      	ldr	r0, [pc, #696]	@ (8018c44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801898c:	33ff      	adds	r3, #255	@ 0xff
 801898e:	4283      	cmp	r3, r0
 8018990:	f200 8366 	bhi.w	8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018994:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8018996:	4dac      	ldr	r5, [pc, #688]	@ (8018c48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8018998:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801899c:	33ff      	adds	r3, #255	@ 0xff
 801899e:	42ab      	cmp	r3, r5
 80189a0:	f200 835e 	bhi.w	8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80189a4:	6862      	ldr	r2, [r4, #4]
 80189a6:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80189aa:	33ff      	adds	r3, #255	@ 0xff
 80189ac:	4283      	cmp	r3, r0
 80189ae:	f200 8357 	bhi.w	8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80189b2:	69a1      	ldr	r1, [r4, #24]
 80189b4:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80189b8:	33ff      	adds	r3, #255	@ 0xff
 80189ba:	4283      	cmp	r3, r0
 80189bc:	f200 8350 	bhi.w	8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80189c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80189c2:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80189c6:	30ff      	adds	r0, #255	@ 0xff
 80189c8:	42a8      	cmp	r0, r5
 80189ca:	f200 8349 	bhi.w	8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80189ce:	428a      	cmp	r2, r1
 80189d0:	f280 8110 	bge.w	8018bf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80189d4:	429a      	cmp	r2, r3
 80189d6:	f300 8119 	bgt.w	8018c0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80189da:	4299      	cmp	r1, r3
 80189dc:	f280 811d 	bge.w	8018c1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80189e0:	2502      	movs	r5, #2
 80189e2:	2701      	movs	r7, #1
 80189e4:	46a9      	mov	r9, r5
 80189e6:	46b8      	mov	r8, r7
 80189e8:	f04f 0a00 	mov.w	sl, #0
 80189ec:	4621      	mov	r1, r4
 80189ee:	a849      	add	r0, sp, #292	@ 0x124
 80189f0:	f003 fdc4 	bl	801c57c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80189f4:	4622      	mov	r2, r4
 80189f6:	4653      	mov	r3, sl
 80189f8:	a949      	add	r1, sp, #292	@ 0x124
 80189fa:	f8cd 9000 	str.w	r9, [sp]
 80189fe:	a819      	add	r0, sp, #100	@ 0x64
 8018a00:	f003 feee 	bl	801c7e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018a04:	4622      	mov	r2, r4
 8018a06:	4653      	mov	r3, sl
 8018a08:	a949      	add	r1, sp, #292	@ 0x124
 8018a0a:	f8cd 8000 	str.w	r8, [sp]
 8018a0e:	a829      	add	r0, sp, #164	@ 0xa4
 8018a10:	f003 fee6 	bl	801c7e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018a14:	4643      	mov	r3, r8
 8018a16:	4622      	mov	r2, r4
 8018a18:	a949      	add	r1, sp, #292	@ 0x124
 8018a1a:	f8cd 9000 	str.w	r9, [sp]
 8018a1e:	a839      	add	r0, sp, #228	@ 0xe4
 8018a20:	f003 fede 	bl	801c7e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018a24:	42af      	cmp	r7, r5
 8018a26:	bfb5      	itete	lt
 8018a28:	2300      	movlt	r3, #0
 8018a2a:	2301      	movge	r3, #1
 8018a2c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8018a2e:	930e      	strge	r3, [sp, #56]	@ 0x38
 8018a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a32:	af12      	add	r7, sp, #72	@ 0x48
 8018a34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018a38:	bfb9      	ittee	lt
 8018a3a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8018a3c:	ac19      	addlt	r4, sp, #100	@ 0x64
 8018a3e:	ad19      	addge	r5, sp, #100	@ 0x64
 8018a40:	ac29      	addge	r4, sp, #164	@ 0xa4
 8018a42:	e887 0003 	stmia.w	r7, {r0, r1}
 8018a46:	b928      	cbnz	r0, 8018a54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8018a48:	4b80      	ldr	r3, [pc, #512]	@ (8018c4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8018a4a:	6818      	ldr	r0, [r3, #0]
 8018a4c:	6803      	ldr	r3, [r0, #0]
 8018a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a50:	4798      	blx	r3
 8018a52:	6038      	str	r0, [r7, #0]
 8018a54:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018a56:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018a5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018a5e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8018a60:	930c      	str	r3, [sp, #48]	@ 0x30
 8018a62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018a64:	6963      	ldr	r3, [r4, #20]
 8018a66:	440b      	add	r3, r1
 8018a68:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018a6c:	4408      	add	r0, r1
 8018a6e:	b200      	sxth	r0, r0
 8018a70:	4283      	cmp	r3, r0
 8018a72:	900d      	str	r0, [sp, #52]	@ 0x34
 8018a74:	f280 80dd 	bge.w	8018c32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8018a78:	428b      	cmp	r3, r1
 8018a7a:	da08      	bge.n	8018a8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018a7c:	2a00      	cmp	r2, #0
 8018a7e:	dd06      	ble.n	8018a8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018a80:	1acb      	subs	r3, r1, r3
 8018a82:	429a      	cmp	r2, r3
 8018a84:	f2c0 80e4 	blt.w	8018c50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	f300 80e2 	bgt.w	8018c52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018a8e:	6967      	ldr	r7, [r4, #20]
 8018a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a92:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8018a96:	443b      	add	r3, r7
 8018a98:	461f      	mov	r7, r3
 8018a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018a9c:	1bdf      	subs	r7, r3, r7
 8018a9e:	4297      	cmp	r7, r2
 8018aa0:	bfa8      	it	ge
 8018aa2:	4617      	movge	r7, r2
 8018aa4:	2f00      	cmp	r7, #0
 8018aa6:	f340 8166 	ble.w	8018d76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018aaa:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018aac:	6829      	ldr	r1, [r5, #0]
 8018aae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ab2:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018ab6:	4411      	add	r1, r2
 8018ab8:	4299      	cmp	r1, r3
 8018aba:	6820      	ldr	r0, [r4, #0]
 8018abc:	dd1a      	ble.n	8018af4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018abe:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018ac2:	4402      	add	r2, r0
 8018ac4:	440b      	add	r3, r1
 8018ac6:	b21b      	sxth	r3, r3
 8018ac8:	429a      	cmp	r2, r3
 8018aca:	dc13      	bgt.n	8018af4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018acc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ad0:	a912      	add	r1, sp, #72	@ 0x48
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	9206      	str	r2, [sp, #24]
 8018ad6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018ad8:	9500      	str	r5, [sp, #0]
 8018ada:	9205      	str	r2, [sp, #20]
 8018adc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018ae0:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018ae4:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8018ae6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018aea:	aa49      	add	r2, sp, #292	@ 0x124
 8018aec:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8018af0:	4623      	mov	r3, r4
 8018af2:	47c8      	blx	r9
 8018af4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018af8:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8018afc:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8018b00:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8018b04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b08:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8018b0c:	ed94 6a08 	vldr	s12, [r4, #32]
 8018b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b14:	edd4 6a07 	vldr	s13, [r4, #28]
 8018b18:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018b1c:	441a      	add	r2, r3
 8018b1e:	6963      	ldr	r3, [r4, #20]
 8018b20:	68a1      	ldr	r1, [r4, #8]
 8018b22:	3301      	adds	r3, #1
 8018b24:	6163      	str	r3, [r4, #20]
 8018b26:	69a3      	ldr	r3, [r4, #24]
 8018b28:	6022      	str	r2, [r4, #0]
 8018b2a:	3b01      	subs	r3, #1
 8018b2c:	61a3      	str	r3, [r4, #24]
 8018b2e:	6923      	ldr	r3, [r4, #16]
 8018b30:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018b34:	440b      	add	r3, r1
 8018b36:	68e1      	ldr	r1, [r4, #12]
 8018b38:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018b3c:	428b      	cmp	r3, r1
 8018b3e:	edc4 6a07 	vstr	s13, [r4, #28]
 8018b42:	6123      	str	r3, [r4, #16]
 8018b44:	db15      	blt.n	8018b72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018b46:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8018b4a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018b4e:	edc4 6a07 	vstr	s13, [r4, #28]
 8018b52:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8018b56:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018b5a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018b5e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8018b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b66:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018b6a:	3201      	adds	r2, #1
 8018b6c:	1a5b      	subs	r3, r3, r1
 8018b6e:	6022      	str	r2, [r4, #0]
 8018b70:	6123      	str	r3, [r4, #16]
 8018b72:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018b76:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018b7a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8018b7e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8018b82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b86:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8018b8a:	ed95 6a08 	vldr	s12, [r5, #32]
 8018b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b92:	edd5 6a07 	vldr	s13, [r5, #28]
 8018b96:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018b9a:	441a      	add	r2, r3
 8018b9c:	696b      	ldr	r3, [r5, #20]
 8018b9e:	68a9      	ldr	r1, [r5, #8]
 8018ba0:	3301      	adds	r3, #1
 8018ba2:	616b      	str	r3, [r5, #20]
 8018ba4:	69ab      	ldr	r3, [r5, #24]
 8018ba6:	602a      	str	r2, [r5, #0]
 8018ba8:	3b01      	subs	r3, #1
 8018baa:	61ab      	str	r3, [r5, #24]
 8018bac:	692b      	ldr	r3, [r5, #16]
 8018bae:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018bb2:	440b      	add	r3, r1
 8018bb4:	68e9      	ldr	r1, [r5, #12]
 8018bb6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018bba:	428b      	cmp	r3, r1
 8018bbc:	edc5 6a07 	vstr	s13, [r5, #28]
 8018bc0:	612b      	str	r3, [r5, #16]
 8018bc2:	db15      	blt.n	8018bf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018bc4:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8018bc8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018bcc:	edc5 6a07 	vstr	s13, [r5, #28]
 8018bd0:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8018bd4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018bd8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018bdc:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8018be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018be4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018be8:	3201      	adds	r2, #1
 8018bea:	1a5b      	subs	r3, r3, r1
 8018bec:	602a      	str	r2, [r5, #0]
 8018bee:	612b      	str	r3, [r5, #16]
 8018bf0:	3f01      	subs	r7, #1
 8018bf2:	e757      	b.n	8018aa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018bf4:	4299      	cmp	r1, r3
 8018bf6:	dc13      	bgt.n	8018c20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	da14      	bge.n	8018c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018bfc:	2502      	movs	r5, #2
 8018bfe:	2703      	movs	r7, #3
 8018c00:	46a9      	mov	r9, r5
 8018c02:	f04f 0800 	mov.w	r8, #0
 8018c06:	f04f 0a01 	mov.w	sl, #1
 8018c0a:	e6ef      	b.n	80189ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018c0c:	2501      	movs	r5, #1
 8018c0e:	2700      	movs	r7, #0
 8018c10:	46a9      	mov	r9, r5
 8018c12:	46b8      	mov	r8, r7
 8018c14:	f04f 0a02 	mov.w	sl, #2
 8018c18:	e6e8      	b.n	80189ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018c1a:	2501      	movs	r5, #1
 8018c1c:	2702      	movs	r7, #2
 8018c1e:	e6e1      	b.n	80189e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018c20:	2500      	movs	r5, #0
 8018c22:	2701      	movs	r7, #1
 8018c24:	e7f4      	b.n	8018c10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018c26:	2702      	movs	r7, #2
 8018c28:	2503      	movs	r5, #3
 8018c2a:	f04f 0900 	mov.w	r9, #0
 8018c2e:	46b8      	mov	r8, r7
 8018c30:	e7e9      	b.n	8018c06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018c32:	4613      	mov	r3, r2
 8018c34:	e728      	b.n	8018a88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018c36:	bf00      	nop
 8018c38:	2005ba9c 	.word	0x2005ba9c
 8018c3c:	fffd8f01 	.word	0xfffd8f01
 8018c40:	00027100 	.word	0x00027100
 8018c44:	0004e1ff 	.word	0x0004e1ff
 8018c48:	0004e1fe 	.word	0x0004e1fe
 8018c4c:	2005baa4 	.word	0x2005baa4
 8018c50:	4613      	mov	r3, r2
 8018c52:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8018c56:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8018c5a:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8018c5e:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8018c62:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8018c66:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8018c6a:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8018c6e:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8018c72:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8018c76:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8018c7a:	469e      	mov	lr, r3
 8018c7c:	469c      	mov	ip, r3
 8018c7e:	f04f 0900 	mov.w	r9, #0
 8018c82:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8018c84:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8018c86:	9111      	str	r1, [sp, #68]	@ 0x44
 8018c88:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8018c8c:	f1bc 0f00 	cmp.w	ip, #0
 8018c90:	d147      	bne.n	8018d22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018c92:	eb03 0c07 	add.w	ip, r3, r7
 8018c96:	1ad7      	subs	r7, r2, r3
 8018c98:	f1b9 0f00 	cmp.w	r9, #0
 8018c9c:	d009      	beq.n	8018cb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018c9e:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8018ca2:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8018ca6:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8018caa:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8018cae:	9029      	str	r0, [sp, #164]	@ 0xa4
 8018cb0:	912d      	str	r1, [sp, #180]	@ 0xb4
 8018cb2:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8018cb6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8018cba:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8018cbe:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8018cc2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8018cc6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8018cca:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8018cce:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8018cd2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8018cd6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8018cda:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8018cde:	f04f 0800 	mov.w	r8, #0
 8018ce2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018ce4:	9111      	str	r1, [sp, #68]	@ 0x44
 8018ce6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8018cea:	f1be 0f00 	cmp.w	lr, #0
 8018cee:	d031      	beq.n	8018d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018cf0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018cf2:	4450      	add	r0, sl
 8018cf4:	4431      	add	r1, r6
 8018cf6:	4549      	cmp	r1, r9
 8018cf8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018cfc:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018d00:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018d04:	db08      	blt.n	8018d18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8018d06:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018d0a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018d0e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018d12:	3001      	adds	r0, #1
 8018d14:	eba1 0109 	sub.w	r1, r1, r9
 8018d18:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018d1c:	f04f 0801 	mov.w	r8, #1
 8018d20:	e7e3      	b.n	8018cea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8018d22:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018d24:	4450      	add	r0, sl
 8018d26:	4431      	add	r1, r6
 8018d28:	4541      	cmp	r1, r8
 8018d2a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018d2e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018d32:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018d36:	db08      	blt.n	8018d4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8018d38:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018d3c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018d40:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018d44:	3001      	adds	r0, #1
 8018d46:	eba1 0108 	sub.w	r1, r1, r8
 8018d4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018d4e:	f04f 0901 	mov.w	r9, #1
 8018d52:	e79b      	b.n	8018c8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018d54:	449c      	add	ip, r3
 8018d56:	1aff      	subs	r7, r7, r3
 8018d58:	f1b8 0f00 	cmp.w	r8, #0
 8018d5c:	d009      	beq.n	8018d72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018d5e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8018d62:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8018d66:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8018d6a:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8018d6e:	9019      	str	r0, [sp, #100]	@ 0x64
 8018d70:	911d      	str	r1, [sp, #116]	@ 0x74
 8018d72:	1ad2      	subs	r2, r2, r3
 8018d74:	e68b      	b.n	8018a8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018d76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d78:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	f000 80d1 	beq.w	8018f22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018d80:	ad19      	add	r5, sp, #100	@ 0x64
 8018d82:	ac39      	add	r4, sp, #228	@ 0xe4
 8018d84:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018d86:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018d8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8018d90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018d92:	6963      	ldr	r3, [r4, #20]
 8018d94:	440b      	add	r3, r1
 8018d96:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018d9a:	4408      	add	r0, r1
 8018d9c:	b200      	sxth	r0, r0
 8018d9e:	4283      	cmp	r3, r0
 8018da0:	900d      	str	r0, [sp, #52]	@ 0x34
 8018da2:	f280 80c1 	bge.w	8018f28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8018da6:	428b      	cmp	r3, r1
 8018da8:	da08      	bge.n	8018dbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018daa:	2a00      	cmp	r2, #0
 8018dac:	dd06      	ble.n	8018dbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018dae:	1acb      	subs	r3, r1, r3
 8018db0:	429a      	cmp	r2, r3
 8018db2:	f2c0 80bb 	blt.w	8018f2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	f300 80b9 	bgt.w	8018f2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018dbc:	6967      	ldr	r7, [r4, #20]
 8018dbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018dc0:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8018dc4:	443b      	add	r3, r7
 8018dc6:	461f      	mov	r7, r3
 8018dc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018dca:	1bdf      	subs	r7, r3, r7
 8018dcc:	4297      	cmp	r7, r2
 8018dce:	bfa8      	it	ge
 8018dd0:	4617      	movge	r7, r2
 8018dd2:	2f00      	cmp	r7, #0
 8018dd4:	f340 813c 	ble.w	8019050 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8018dd8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018dda:	6829      	ldr	r1, [r5, #0]
 8018ddc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018de0:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018de4:	4411      	add	r1, r2
 8018de6:	4299      	cmp	r1, r3
 8018de8:	6820      	ldr	r0, [r4, #0]
 8018dea:	dd1a      	ble.n	8018e22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018dec:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018df0:	4402      	add	r2, r0
 8018df2:	440b      	add	r3, r1
 8018df4:	b21b      	sxth	r3, r3
 8018df6:	429a      	cmp	r2, r3
 8018df8:	dc13      	bgt.n	8018e22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018dfa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018dfe:	a912      	add	r1, sp, #72	@ 0x48
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	9206      	str	r2, [sp, #24]
 8018e04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018e06:	9500      	str	r5, [sp, #0]
 8018e08:	9205      	str	r2, [sp, #20]
 8018e0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018e0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018e0e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018e12:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8018e14:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018e18:	aa49      	add	r2, sp, #292	@ 0x124
 8018e1a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8018e1e:	4623      	mov	r3, r4
 8018e20:	47c8      	blx	r9
 8018e22:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018e26:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8018e2a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8018e2e:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8018e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018e36:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8018e3a:	ed94 6a08 	vldr	s12, [r4, #32]
 8018e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e42:	edd4 6a07 	vldr	s13, [r4, #28]
 8018e46:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018e4a:	441a      	add	r2, r3
 8018e4c:	6963      	ldr	r3, [r4, #20]
 8018e4e:	68a1      	ldr	r1, [r4, #8]
 8018e50:	3301      	adds	r3, #1
 8018e52:	6163      	str	r3, [r4, #20]
 8018e54:	69a3      	ldr	r3, [r4, #24]
 8018e56:	6022      	str	r2, [r4, #0]
 8018e58:	3b01      	subs	r3, #1
 8018e5a:	61a3      	str	r3, [r4, #24]
 8018e5c:	6923      	ldr	r3, [r4, #16]
 8018e5e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018e62:	440b      	add	r3, r1
 8018e64:	68e1      	ldr	r1, [r4, #12]
 8018e66:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018e6a:	428b      	cmp	r3, r1
 8018e6c:	edc4 6a07 	vstr	s13, [r4, #28]
 8018e70:	6123      	str	r3, [r4, #16]
 8018e72:	db15      	blt.n	8018ea0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018e74:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8018e78:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018e7c:	edc4 6a07 	vstr	s13, [r4, #28]
 8018e80:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8018e84:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018e88:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018e8c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8018e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e94:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018e98:	3201      	adds	r2, #1
 8018e9a:	1a5b      	subs	r3, r3, r1
 8018e9c:	6022      	str	r2, [r4, #0]
 8018e9e:	6123      	str	r3, [r4, #16]
 8018ea0:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018ea4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018ea8:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8018eac:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8018eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018eb4:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8018eb8:	ed95 6a08 	vldr	s12, [r5, #32]
 8018ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018ec0:	edd5 6a07 	vldr	s13, [r5, #28]
 8018ec4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018ec8:	441a      	add	r2, r3
 8018eca:	696b      	ldr	r3, [r5, #20]
 8018ecc:	68a9      	ldr	r1, [r5, #8]
 8018ece:	3301      	adds	r3, #1
 8018ed0:	616b      	str	r3, [r5, #20]
 8018ed2:	69ab      	ldr	r3, [r5, #24]
 8018ed4:	602a      	str	r2, [r5, #0]
 8018ed6:	3b01      	subs	r3, #1
 8018ed8:	61ab      	str	r3, [r5, #24]
 8018eda:	692b      	ldr	r3, [r5, #16]
 8018edc:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018ee0:	440b      	add	r3, r1
 8018ee2:	68e9      	ldr	r1, [r5, #12]
 8018ee4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018ee8:	428b      	cmp	r3, r1
 8018eea:	edc5 6a07 	vstr	s13, [r5, #28]
 8018eee:	612b      	str	r3, [r5, #16]
 8018ef0:	db15      	blt.n	8018f1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018ef2:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8018ef6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018efa:	edc5 6a07 	vstr	s13, [r5, #28]
 8018efe:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8018f02:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018f06:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018f0a:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8018f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f12:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018f16:	3201      	adds	r2, #1
 8018f18:	1a5b      	subs	r3, r3, r1
 8018f1a:	602a      	str	r2, [r5, #0]
 8018f1c:	612b      	str	r3, [r5, #16]
 8018f1e:	3f01      	subs	r7, #1
 8018f20:	e757      	b.n	8018dd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018f22:	ad39      	add	r5, sp, #228	@ 0xe4
 8018f24:	ac19      	add	r4, sp, #100	@ 0x64
 8018f26:	e72d      	b.n	8018d84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8018f28:	4613      	mov	r3, r2
 8018f2a:	e744      	b.n	8018db6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018f2c:	4613      	mov	r3, r2
 8018f2e:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8018f32:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8018f36:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8018f3a:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8018f3e:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8018f42:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8018f46:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8018f4a:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8018f4e:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8018f52:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8018f56:	469e      	mov	lr, r3
 8018f58:	461f      	mov	r7, r3
 8018f5a:	f04f 0900 	mov.w	r9, #0
 8018f5e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8018f60:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8018f64:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8018f66:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8018f6a:	960e      	str	r6, [sp, #56]	@ 0x38
 8018f6c:	2f00      	cmp	r7, #0
 8018f6e:	d146      	bne.n	8018ffe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018f70:	449c      	add	ip, r3
 8018f72:	1ad7      	subs	r7, r2, r3
 8018f74:	f1b9 0f00 	cmp.w	r9, #0
 8018f78:	d009      	beq.n	8018f8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8018f7a:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8018f7e:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8018f82:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8018f86:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8018f8a:	9039      	str	r0, [sp, #228]	@ 0xe4
 8018f8c:	913d      	str	r1, [sp, #244]	@ 0xf4
 8018f8e:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8018f92:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8018f96:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8018f9a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8018f9e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8018fa2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8018fa6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8018faa:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8018fae:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8018fb2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8018fb6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8018fba:	f04f 0800 	mov.w	r8, #0
 8018fbe:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018fc0:	910e      	str	r1, [sp, #56]	@ 0x38
 8018fc2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8018fc6:	f1be 0f00 	cmp.w	lr, #0
 8018fca:	d030      	beq.n	801902e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018fcc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018fce:	4450      	add	r0, sl
 8018fd0:	4431      	add	r1, r6
 8018fd2:	4549      	cmp	r1, r9
 8018fd4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018fd8:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018fdc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018fe0:	db08      	blt.n	8018ff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018fe2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018fe6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018fea:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018fee:	3001      	adds	r0, #1
 8018ff0:	eba1 0109 	sub.w	r1, r1, r9
 8018ff4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018ff8:	f04f 0801 	mov.w	r8, #1
 8018ffc:	e7e3      	b.n	8018fc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018ffe:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8019000:	4450      	add	r0, sl
 8019002:	4431      	add	r1, r6
 8019004:	4541      	cmp	r1, r8
 8019006:	ee37 7a24 	vadd.f32	s14, s14, s9
 801900a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801900e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019012:	db08      	blt.n	8019026 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019014:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019018:	ee37 7a25 	vadd.f32	s14, s14, s11
 801901c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019020:	3001      	adds	r0, #1
 8019022:	eba1 0108 	sub.w	r1, r1, r8
 8019026:	3f01      	subs	r7, #1
 8019028:	f04f 0901 	mov.w	r9, #1
 801902c:	e79e      	b.n	8018f6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801902e:	449c      	add	ip, r3
 8019030:	1aff      	subs	r7, r7, r3
 8019032:	f1b8 0f00 	cmp.w	r8, #0
 8019036:	d009      	beq.n	801904c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019038:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801903c:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8019040:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8019044:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8019048:	9019      	str	r0, [sp, #100]	@ 0x64
 801904a:	911d      	str	r1, [sp, #116]	@ 0x74
 801904c:	1ad2      	subs	r2, r2, r3
 801904e:	e6b5      	b.n	8018dbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	b923      	cbnz	r3, 8019060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019056:	4b04      	ldr	r3, [pc, #16]	@ (8019068 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019058:	6818      	ldr	r0, [r3, #0]
 801905a:	6803      	ldr	r3, [r0, #0]
 801905c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801905e:	4798      	blx	r3
 8019060:	b05b      	add	sp, #364	@ 0x16c
 8019062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019066:	bf00      	nop
 8019068:	2005baa4 	.word	0x2005baa4

0801906c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801906c:	2b03      	cmp	r3, #3
 801906e:	d818      	bhi.n	80190a2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8019070:	e8df f003 	tbb	[pc, r3]
 8019074:	130d0602 	.word	0x130d0602
 8019078:	f9b0 2000 	ldrsh.w	r2, [r0]
 801907c:	1850      	adds	r0, r2, r1
 801907e:	4770      	bx	lr
 8019080:	8803      	ldrh	r3, [r0, #0]
 8019082:	8880      	ldrh	r0, [r0, #4]
 8019084:	4418      	add	r0, r3
 8019086:	b200      	sxth	r0, r0
 8019088:	1a80      	subs	r0, r0, r2
 801908a:	3801      	subs	r0, #1
 801908c:	4770      	bx	lr
 801908e:	8803      	ldrh	r3, [r0, #0]
 8019090:	8880      	ldrh	r0, [r0, #4]
 8019092:	4418      	add	r0, r3
 8019094:	b200      	sxth	r0, r0
 8019096:	1a40      	subs	r0, r0, r1
 8019098:	e7f7      	b.n	801908a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801909a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801909e:	4410      	add	r0, r2
 80190a0:	4770      	bx	lr
 80190a2:	2000      	movs	r0, #0
 80190a4:	4770      	bx	lr

080190a6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80190a6:	2b03      	cmp	r3, #3
 80190a8:	d817      	bhi.n	80190da <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80190aa:	e8df f003 	tbb	[pc, r3]
 80190ae:	0602      	.short	0x0602
 80190b0:	1009      	.short	0x1009
 80190b2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80190b6:	1850      	adds	r0, r2, r1
 80190b8:	4770      	bx	lr
 80190ba:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80190be:	e7fa      	b.n	80190b6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80190c0:	8843      	ldrh	r3, [r0, #2]
 80190c2:	88c0      	ldrh	r0, [r0, #6]
 80190c4:	4418      	add	r0, r3
 80190c6:	b200      	sxth	r0, r0
 80190c8:	1a80      	subs	r0, r0, r2
 80190ca:	3801      	subs	r0, #1
 80190cc:	4770      	bx	lr
 80190ce:	8843      	ldrh	r3, [r0, #2]
 80190d0:	88c0      	ldrh	r0, [r0, #6]
 80190d2:	4418      	add	r0, r3
 80190d4:	b200      	sxth	r0, r0
 80190d6:	1a40      	subs	r0, r0, r1
 80190d8:	e7f7      	b.n	80190ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80190da:	2000      	movs	r0, #0
 80190dc:	4770      	bx	lr
	...

080190e0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80190e0:	2200      	movs	r2, #0
 80190e2:	4b01      	ldr	r3, [pc, #4]	@ (80190e8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80190e4:	601a      	str	r2, [r3, #0]
 80190e6:	4770      	bx	lr
 80190e8:	2005bab4 	.word	0x2005bab4

080190ec <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80190ec:	4603      	mov	r3, r0
 80190ee:	b1c8      	cbz	r0, 8019124 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80190f0:	0c02      	lsrs	r2, r0, #16
 80190f2:	0412      	lsls	r2, r2, #16
 80190f4:	b9a2      	cbnz	r2, 8019120 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80190f6:	0403      	lsls	r3, r0, #16
 80190f8:	2010      	movs	r0, #16
 80190fa:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80190fe:	bf04      	itt	eq
 8019100:	021b      	lsleq	r3, r3, #8
 8019102:	3008      	addeq	r0, #8
 8019104:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8019108:	bf04      	itt	eq
 801910a:	011b      	lsleq	r3, r3, #4
 801910c:	3004      	addeq	r0, #4
 801910e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8019112:	bf04      	itt	eq
 8019114:	009b      	lsleq	r3, r3, #2
 8019116:	3002      	addeq	r0, #2
 8019118:	2b00      	cmp	r3, #0
 801911a:	db04      	blt.n	8019126 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801911c:	3001      	adds	r0, #1
 801911e:	4770      	bx	lr
 8019120:	2000      	movs	r0, #0
 8019122:	e7ea      	b.n	80190fa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8019124:	2020      	movs	r0, #32
 8019126:	4770      	bx	lr

08019128 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801912c:	b087      	sub	sp, #28
 801912e:	460d      	mov	r5, r1
 8019130:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8019134:	4616      	mov	r6, r2
 8019136:	4698      	mov	r8, r3
 8019138:	4601      	mov	r1, r0
 801913a:	b120      	cbz	r0, 8019146 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801913c:	b11a      	cbz	r2, 8019146 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801913e:	2d1f      	cmp	r5, #31
 8019140:	d801      	bhi.n	8019146 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8019142:	2b1f      	cmp	r3, #31
 8019144:	d904      	bls.n	8019150 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8019146:	2000      	movs	r0, #0
 8019148:	6038      	str	r0, [r7, #0]
 801914a:	b007      	add	sp, #28
 801914c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019150:	b97d      	cbnz	r5, 8019172 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8019152:	b143      	cbz	r3, 8019166 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8019154:	4602      	mov	r2, r0
 8019156:	e9cd 4700 	strd	r4, r7, [sp]
 801915a:	462b      	mov	r3, r5
 801915c:	4641      	mov	r1, r8
 801915e:	4630      	mov	r0, r6
 8019160:	f7ff ffe2 	bl	8019128 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019164:	e7f1      	b.n	801914a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8019166:	f04f 33ff 	mov.w	r3, #4294967295
 801916a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801916e:	603b      	str	r3, [r7, #0]
 8019170:	e7eb      	b.n	801914a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8019172:	fa32 fa05 	lsrs.w	sl, r2, r5
 8019176:	d106      	bne.n	8019186 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8019178:	4346      	muls	r6, r0
 801917a:	fbb6 f0f4 	udiv	r0, r6, r4
 801917e:	fb04 6610 	mls	r6, r4, r0, r6
 8019182:	603e      	str	r6, [r7, #0]
 8019184:	e7e1      	b.n	801914a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8019186:	fa00 fb05 	lsl.w	fp, r0, r5
 801918a:	fbbb f9f4 	udiv	r9, fp, r4
 801918e:	2201      	movs	r2, #1
 8019190:	fb0a f309 	mul.w	r3, sl, r9
 8019194:	40aa      	lsls	r2, r5
 8019196:	3a01      	subs	r2, #1
 8019198:	4016      	ands	r6, r2
 801919a:	4630      	mov	r0, r6
 801919c:	9303      	str	r3, [sp, #12]
 801919e:	f7ff ffa5 	bl	80190ec <_ZN8touchgfx16TouchCalibration4clzuEm>
 80191a2:	462b      	mov	r3, r5
 80191a4:	460a      	mov	r2, r1
 80191a6:	e9cd 4700 	strd	r4, r7, [sp]
 80191aa:	4601      	mov	r1, r0
 80191ac:	4630      	mov	r0, r6
 80191ae:	f7ff ffbb 	bl	8019128 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80191b2:	fb04 b919 	mls	r9, r4, r9, fp
 80191b6:	4606      	mov	r6, r0
 80191b8:	4648      	mov	r0, r9
 80191ba:	eb05 0108 	add.w	r1, r5, r8
 80191be:	f7ff ff95 	bl	80190ec <_ZN8touchgfx16TouchCalibration4clzuEm>
 80191c2:	ab05      	add	r3, sp, #20
 80191c4:	e9cd 4300 	strd	r4, r3, [sp]
 80191c8:	464a      	mov	r2, r9
 80191ca:	4603      	mov	r3, r0
 80191cc:	4650      	mov	r0, sl
 80191ce:	f7ff ffab 	bl	8019128 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80191d2:	6839      	ldr	r1, [r7, #0]
 80191d4:	9a05      	ldr	r2, [sp, #20]
 80191d6:	9b03      	ldr	r3, [sp, #12]
 80191d8:	4411      	add	r1, r2
 80191da:	fbb1 f2f4 	udiv	r2, r1, r4
 80191de:	fb04 1412 	mls	r4, r4, r2, r1
 80191e2:	18d3      	adds	r3, r2, r3
 80191e4:	441e      	add	r6, r3
 80191e6:	4430      	add	r0, r6
 80191e8:	603c      	str	r4, [r7, #0]
 80191ea:	e7ae      	b.n	801914a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080191ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80191ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191f0:	b085      	sub	sp, #20
 80191f2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80191f4:	f1b0 0900 	subs.w	r9, r0, #0
 80191f8:	461d      	mov	r5, r3
 80191fa:	bfbf      	itttt	lt
 80191fc:	6823      	ldrlt	r3, [r4, #0]
 80191fe:	f1c9 0900 	rsblt	r9, r9, #0
 8019202:	425b      	neglt	r3, r3
 8019204:	6023      	strlt	r3, [r4, #0]
 8019206:	bfb4      	ite	lt
 8019208:	f04f 36ff 	movlt.w	r6, #4294967295
 801920c:	2601      	movge	r6, #1
 801920e:	2a00      	cmp	r2, #0
 8019210:	4617      	mov	r7, r2
 8019212:	da04      	bge.n	801921e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8019214:	6823      	ldr	r3, [r4, #0]
 8019216:	4257      	negs	r7, r2
 8019218:	425b      	negs	r3, r3
 801921a:	4276      	negs	r6, r6
 801921c:	6023      	str	r3, [r4, #0]
 801921e:	2d00      	cmp	r5, #0
 8019220:	4638      	mov	r0, r7
 8019222:	bfba      	itte	lt
 8019224:	426d      	neglt	r5, r5
 8019226:	f04f 38ff 	movlt.w	r8, #4294967295
 801922a:	f04f 0801 	movge.w	r8, #1
 801922e:	f7ff ff5d 	bl	80190ec <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019232:	ab03      	add	r3, sp, #12
 8019234:	e9cd 5300 	strd	r5, r3, [sp]
 8019238:	463a      	mov	r2, r7
 801923a:	4603      	mov	r3, r0
 801923c:	4648      	mov	r0, r9
 801923e:	f7ff ff73 	bl	8019128 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019242:	6823      	ldr	r3, [r4, #0]
 8019244:	9a03      	ldr	r2, [sp, #12]
 8019246:	4546      	cmp	r6, r8
 8019248:	441a      	add	r2, r3
 801924a:	fb92 f3f5 	sdiv	r3, r2, r5
 801924e:	4418      	add	r0, r3
 8019250:	fb05 2313 	mls	r3, r5, r3, r2
 8019254:	bf18      	it	ne
 8019256:	4240      	negne	r0, r0
 8019258:	1c72      	adds	r2, r6, #1
 801925a:	6023      	str	r3, [r4, #0]
 801925c:	d105      	bne.n	801926a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801925e:	2b00      	cmp	r3, #0
 8019260:	f1c3 0200 	rsb	r2, r3, #0
 8019264:	db0b      	blt.n	801927e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8019266:	6022      	str	r2, [r4, #0]
 8019268:	e006      	b.n	8019278 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801926a:	2e01      	cmp	r6, #1
 801926c:	d104      	bne.n	8019278 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801926e:	2b00      	cmp	r3, #0
 8019270:	da02      	bge.n	8019278 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019272:	442b      	add	r3, r5
 8019274:	3801      	subs	r0, #1
 8019276:	6023      	str	r3, [r4, #0]
 8019278:	b005      	add	sp, #20
 801927a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801927e:	3801      	subs	r0, #1
 8019280:	1b52      	subs	r2, r2, r5
 8019282:	e7f0      	b.n	8019266 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08019284 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019284:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019288:	4c1c      	ldr	r4, [pc, #112]	@ (80192fc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801928a:	4605      	mov	r5, r0
 801928c:	69a3      	ldr	r3, [r4, #24]
 801928e:	6807      	ldr	r7, [r0, #0]
 8019290:	b92b      	cbnz	r3, 801929e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8019292:	6840      	ldr	r0, [r0, #4]
 8019294:	e9c5 7000 	strd	r7, r0, [r5]
 8019298:	b004      	add	sp, #16
 801929a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801929e:	f04f 0802 	mov.w	r8, #2
 80192a2:	fb93 f1f8 	sdiv	r1, r3, r8
 80192a6:	68a2      	ldr	r2, [r4, #8]
 80192a8:	ae04      	add	r6, sp, #16
 80192aa:	440a      	add	r2, r1
 80192ac:	f846 2d04 	str.w	r2, [r6, #-4]!
 80192b0:	69e1      	ldr	r1, [r4, #28]
 80192b2:	463a      	mov	r2, r7
 80192b4:	9600      	str	r6, [sp, #0]
 80192b6:	6820      	ldr	r0, [r4, #0]
 80192b8:	f7ff ff98 	bl	80191ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80192bc:	69a3      	ldr	r3, [r4, #24]
 80192be:	4607      	mov	r7, r0
 80192c0:	686a      	ldr	r2, [r5, #4]
 80192c2:	6a21      	ldr	r1, [r4, #32]
 80192c4:	9600      	str	r6, [sp, #0]
 80192c6:	6860      	ldr	r0, [r4, #4]
 80192c8:	f7ff ff90 	bl	80191ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80192cc:	69a3      	ldr	r3, [r4, #24]
 80192ce:	6962      	ldr	r2, [r4, #20]
 80192d0:	fb93 f8f8 	sdiv	r8, r3, r8
 80192d4:	4442      	add	r2, r8
 80192d6:	9203      	str	r2, [sp, #12]
 80192d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80192da:	682a      	ldr	r2, [r5, #0]
 80192dc:	4407      	add	r7, r0
 80192de:	9600      	str	r6, [sp, #0]
 80192e0:	68e0      	ldr	r0, [r4, #12]
 80192e2:	f7ff ff83 	bl	80191ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80192e6:	9600      	str	r6, [sp, #0]
 80192e8:	4680      	mov	r8, r0
 80192ea:	69a3      	ldr	r3, [r4, #24]
 80192ec:	686a      	ldr	r2, [r5, #4]
 80192ee:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80192f0:	6920      	ldr	r0, [r4, #16]
 80192f2:	f7ff ff7b 	bl	80191ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80192f6:	4440      	add	r0, r8
 80192f8:	e7cc      	b.n	8019294 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80192fa:	bf00      	nop
 80192fc:	2005bab8 	.word	0x2005bab8

08019300 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019300:	4b07      	ldr	r3, [pc, #28]	@ (8019320 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8019302:	781b      	ldrb	r3, [r3, #0]
 8019304:	2b01      	cmp	r3, #1
 8019306:	d109      	bne.n	801931c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8019308:	f9b1 3000 	ldrsh.w	r3, [r1]
 801930c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019310:	8003      	strh	r3, [r0, #0]
 8019312:	4b04      	ldr	r3, [pc, #16]	@ (8019324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019314:	881b      	ldrh	r3, [r3, #0]
 8019316:	3b01      	subs	r3, #1
 8019318:	1a9b      	subs	r3, r3, r2
 801931a:	800b      	strh	r3, [r1, #0]
 801931c:	4770      	bx	lr
 801931e:	bf00      	nop
 8019320:	2005ba9c 	.word	0x2005ba9c
 8019324:	2005ba98 	.word	0x2005ba98

08019328 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019328:	b510      	push	{r4, lr}
 801932a:	4b07      	ldr	r3, [pc, #28]	@ (8019348 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801932c:	781b      	ldrb	r3, [r3, #0]
 801932e:	2b01      	cmp	r3, #1
 8019330:	d108      	bne.n	8019344 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019332:	4b06      	ldr	r3, [pc, #24]	@ (801934c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019334:	880c      	ldrh	r4, [r1, #0]
 8019336:	881b      	ldrh	r3, [r3, #0]
 8019338:	f9b0 2000 	ldrsh.w	r2, [r0]
 801933c:	3b01      	subs	r3, #1
 801933e:	1b1b      	subs	r3, r3, r4
 8019340:	8003      	strh	r3, [r0, #0]
 8019342:	800a      	strh	r2, [r1, #0]
 8019344:	bd10      	pop	{r4, pc}
 8019346:	bf00      	nop
 8019348:	2005ba9c 	.word	0x2005ba9c
 801934c:	2005ba98 	.word	0x2005ba98

08019350 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019350:	b510      	push	{r4, lr}
 8019352:	4b0a      	ldr	r3, [pc, #40]	@ (801937c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019354:	781b      	ldrb	r3, [r3, #0]
 8019356:	2b01      	cmp	r3, #1
 8019358:	d10e      	bne.n	8019378 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801935a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801935e:	8843      	ldrh	r3, [r0, #2]
 8019360:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019364:	18ca      	adds	r2, r1, r3
 8019366:	4b06      	ldr	r3, [pc, #24]	@ (8019380 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019368:	8044      	strh	r4, [r0, #2]
 801936a:	881b      	ldrh	r3, [r3, #0]
 801936c:	1a9b      	subs	r3, r3, r2
 801936e:	8003      	strh	r3, [r0, #0]
 8019370:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019374:	8081      	strh	r1, [r0, #4]
 8019376:	80c3      	strh	r3, [r0, #6]
 8019378:	bd10      	pop	{r4, pc}
 801937a:	bf00      	nop
 801937c:	2005ba9c 	.word	0x2005ba9c
 8019380:	2005ba98 	.word	0x2005ba98

08019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019384:	4b08      	ldr	r3, [pc, #32]	@ (80193a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8019386:	781b      	ldrb	r3, [r3, #0]
 8019388:	2b01      	cmp	r3, #1
 801938a:	d10c      	bne.n	80193a6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801938c:	8803      	ldrh	r3, [r0, #0]
 801938e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8019392:	8842      	ldrh	r2, [r0, #2]
 8019394:	8002      	strh	r2, [r0, #0]
 8019396:	185a      	adds	r2, r3, r1
 8019398:	4b04      	ldr	r3, [pc, #16]	@ (80193ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801939a:	881b      	ldrh	r3, [r3, #0]
 801939c:	1a9b      	subs	r3, r3, r2
 801939e:	8043      	strh	r3, [r0, #2]
 80193a0:	88c3      	ldrh	r3, [r0, #6]
 80193a2:	80c1      	strh	r1, [r0, #6]
 80193a4:	8083      	strh	r3, [r0, #4]
 80193a6:	4770      	bx	lr
 80193a8:	2005ba9c 	.word	0x2005ba9c
 80193ac:	2005ba98 	.word	0x2005ba98

080193b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80193b0:	b510      	push	{r4, lr}
 80193b2:	4b07      	ldr	r3, [pc, #28]	@ (80193d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80193b4:	781b      	ldrb	r3, [r3, #0]
 80193b6:	2b01      	cmp	r3, #1
 80193b8:	d108      	bne.n	80193cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80193ba:	f9b1 3000 	ldrsh.w	r3, [r1]
 80193be:	f9b0 4000 	ldrsh.w	r4, [r0]
 80193c2:	8003      	strh	r3, [r0, #0]
 80193c4:	8893      	ldrh	r3, [r2, #4]
 80193c6:	3b01      	subs	r3, #1
 80193c8:	1b1b      	subs	r3, r3, r4
 80193ca:	800b      	strh	r3, [r1, #0]
 80193cc:	bd10      	pop	{r4, pc}
 80193ce:	bf00      	nop
 80193d0:	2005ba9c 	.word	0x2005ba9c

080193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80193d4:	b510      	push	{r4, lr}
 80193d6:	4b0a      	ldr	r3, [pc, #40]	@ (8019400 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80193d8:	460a      	mov	r2, r1
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	2b01      	cmp	r3, #1
 80193de:	d10d      	bne.n	80193fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80193e0:	8881      	ldrh	r1, [r0, #4]
 80193e2:	8803      	ldrh	r3, [r0, #0]
 80193e4:	440b      	add	r3, r1
 80193e6:	4601      	mov	r1, r0
 80193e8:	3b01      	subs	r3, #1
 80193ea:	f821 3b02 	strh.w	r3, [r1], #2
 80193ee:	f7ff ffdf 	bl	80193b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80193f2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80193f6:	88c2      	ldrh	r2, [r0, #6]
 80193f8:	80c3      	strh	r3, [r0, #6]
 80193fa:	8082      	strh	r2, [r0, #4]
 80193fc:	bd10      	pop	{r4, pc}
 80193fe:	bf00      	nop
 8019400:	2005ba9c 	.word	0x2005ba9c

08019404 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019404:	2100      	movs	r1, #0
 8019406:	4b06      	ldr	r3, [pc, #24]	@ (8019420 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8019408:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801940c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019410:	4b04      	ldr	r3, [pc, #16]	@ (8019424 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019412:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8019416:	f9b3 3000 	ldrsh.w	r3, [r3]
 801941a:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801941e:	4770      	bx	lr
 8019420:	2005ba98 	.word	0x2005ba98
 8019424:	2005ba9a 	.word	0x2005ba9a

08019428 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019428:	4b03      	ldr	r3, [pc, #12]	@ (8019438 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801942a:	6818      	ldr	r0, [r3, #0]
 801942c:	b110      	cbz	r0, 8019434 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801942e:	6803      	ldr	r3, [r0, #0]
 8019430:	699b      	ldr	r3, [r3, #24]
 8019432:	4718      	bx	r3
 8019434:	4770      	bx	lr
 8019436:	bf00      	nop
 8019438:	2005bae8 	.word	0x2005bae8

0801943c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801943c:	4770      	bx	lr
	...

08019440 <_ZN8touchgfx11Application4drawEv>:
 8019440:	b507      	push	{r0, r1, r2, lr}
 8019442:	2100      	movs	r1, #0
 8019444:	4b08      	ldr	r3, [pc, #32]	@ (8019468 <_ZN8touchgfx11Application4drawEv+0x28>)
 8019446:	9100      	str	r1, [sp, #0]
 8019448:	f9b3 2000 	ldrsh.w	r2, [r3]
 801944c:	4b07      	ldr	r3, [pc, #28]	@ (801946c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801944e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019456:	4669      	mov	r1, sp
 8019458:	f8ad 3006 	strh.w	r3, [sp, #6]
 801945c:	6803      	ldr	r3, [r0, #0]
 801945e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019460:	4798      	blx	r3
 8019462:	b003      	add	sp, #12
 8019464:	f85d fb04 	ldr.w	pc, [sp], #4
 8019468:	2005ba98 	.word	0x2005ba98
 801946c:	2005ba9a 	.word	0x2005ba9a

08019470 <_ZN8touchgfx11Application10invalidateEv>:
 8019470:	2100      	movs	r1, #0
 8019472:	4b09      	ldr	r3, [pc, #36]	@ (8019498 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8019474:	b082      	sub	sp, #8
 8019476:	f9b3 2000 	ldrsh.w	r2, [r3]
 801947a:	4b08      	ldr	r3, [pc, #32]	@ (801949c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801947c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019484:	9100      	str	r1, [sp, #0]
 8019486:	f8ad 3006 	strh.w	r3, [sp, #6]
 801948a:	6803      	ldr	r3, [r0, #0]
 801948c:	aa02      	add	r2, sp, #8
 801948e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019490:	e912 0006 	ldmdb	r2, {r1, r2}
 8019494:	b002      	add	sp, #8
 8019496:	4718      	bx	r3
 8019498:	2005ba98 	.word	0x2005ba98
 801949c:	2005ba9a 	.word	0x2005ba9a

080194a0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80194a0:	4b03      	ldr	r3, [pc, #12]	@ (80194b0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80194a2:	6818      	ldr	r0, [r3, #0]
 80194a4:	b110      	cbz	r0, 80194ac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80194a6:	6803      	ldr	r3, [r0, #0]
 80194a8:	69db      	ldr	r3, [r3, #28]
 80194aa:	4718      	bx	r3
 80194ac:	4770      	bx	lr
 80194ae:	bf00      	nop
 80194b0:	2005bae8 	.word	0x2005bae8

080194b4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80194b4:	4b03      	ldr	r3, [pc, #12]	@ (80194c4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80194b6:	6818      	ldr	r0, [r3, #0]
 80194b8:	b110      	cbz	r0, 80194c0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80194ba:	6803      	ldr	r3, [r0, #0]
 80194bc:	6a1b      	ldr	r3, [r3, #32]
 80194be:	4718      	bx	r3
 80194c0:	4770      	bx	lr
 80194c2:	bf00      	nop
 80194c4:	2005bae8 	.word	0x2005bae8

080194c8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80194c8:	2300      	movs	r3, #0
 80194ca:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80194ce:	4770      	bx	lr

080194d0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80194d0:	4b03      	ldr	r3, [pc, #12]	@ (80194e0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80194d2:	6818      	ldr	r0, [r3, #0]
 80194d4:	b110      	cbz	r0, 80194dc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80194d6:	6803      	ldr	r3, [r0, #0]
 80194d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194da:	4718      	bx	r3
 80194dc:	4770      	bx	lr
 80194de:	bf00      	nop
 80194e0:	2005bae8 	.word	0x2005bae8

080194e4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80194e4:	b510      	push	{r4, lr}
 80194e6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80194ea:	888a      	ldrh	r2, [r1, #4]
 80194ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 80194f0:	4422      	add	r2, r4
 80194f2:	b212      	sxth	r2, r2
 80194f4:	4293      	cmp	r3, r2
 80194f6:	da15      	bge.n	8019524 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80194f8:	8882      	ldrh	r2, [r0, #4]
 80194fa:	4413      	add	r3, r2
 80194fc:	b21b      	sxth	r3, r3
 80194fe:	429c      	cmp	r4, r3
 8019500:	da10      	bge.n	8019524 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019502:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019506:	88c9      	ldrh	r1, [r1, #6]
 8019508:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801950c:	4419      	add	r1, r3
 801950e:	b209      	sxth	r1, r1
 8019510:	428a      	cmp	r2, r1
 8019512:	da07      	bge.n	8019524 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019514:	88c0      	ldrh	r0, [r0, #6]
 8019516:	4410      	add	r0, r2
 8019518:	b200      	sxth	r0, r0
 801951a:	4283      	cmp	r3, r0
 801951c:	bfac      	ite	ge
 801951e:	2000      	movge	r0, #0
 8019520:	2001      	movlt	r0, #1
 8019522:	bd10      	pop	{r4, pc}
 8019524:	2000      	movs	r0, #0
 8019526:	e7fc      	b.n	8019522 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019528 <_ZN8touchgfx4Rect10restrictToEss>:
 8019528:	f9b0 3000 	ldrsh.w	r3, [r0]
 801952c:	b510      	push	{r4, lr}
 801952e:	2b00      	cmp	r3, #0
 8019530:	da04      	bge.n	801953c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8019532:	8884      	ldrh	r4, [r0, #4]
 8019534:	4423      	add	r3, r4
 8019536:	8083      	strh	r3, [r0, #4]
 8019538:	2300      	movs	r3, #0
 801953a:	8003      	strh	r3, [r0, #0]
 801953c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019540:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019544:	1b09      	subs	r1, r1, r4
 8019546:	428b      	cmp	r3, r1
 8019548:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801954c:	bfc8      	it	gt
 801954e:	8081      	strhgt	r1, [r0, #4]
 8019550:	2b00      	cmp	r3, #0
 8019552:	da04      	bge.n	801955e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8019554:	88c1      	ldrh	r1, [r0, #6]
 8019556:	440b      	add	r3, r1
 8019558:	80c3      	strh	r3, [r0, #6]
 801955a:	2300      	movs	r3, #0
 801955c:	8043      	strh	r3, [r0, #2]
 801955e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019562:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019566:	1a52      	subs	r2, r2, r1
 8019568:	4293      	cmp	r3, r2
 801956a:	bfc8      	it	gt
 801956c:	80c2      	strhgt	r2, [r0, #6]
 801956e:	bd10      	pop	{r4, pc}

08019570 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019570:	b510      	push	{r4, lr}
 8019572:	460c      	mov	r4, r1
 8019574:	4b0f      	ldr	r3, [pc, #60]	@ (80195b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8019576:	4620      	mov	r0, r4
 8019578:	f9b3 2000 	ldrsh.w	r2, [r3]
 801957c:	4b0e      	ldr	r3, [pc, #56]	@ (80195b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801957e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019582:	f7ff ffd1 	bl	8019528 <_ZN8touchgfx4Rect10restrictToEss>
 8019586:	4b0d      	ldr	r3, [pc, #52]	@ (80195bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8019588:	6818      	ldr	r0, [r3, #0]
 801958a:	b190      	cbz	r0, 80195b2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801958c:	6803      	ldr	r3, [r0, #0]
 801958e:	4621      	mov	r1, r4
 8019590:	689b      	ldr	r3, [r3, #8]
 8019592:	4798      	blx	r3
 8019594:	4b0a      	ldr	r3, [pc, #40]	@ (80195c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8019596:	6818      	ldr	r0, [r3, #0]
 8019598:	b118      	cbz	r0, 80195a2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801959a:	6803      	ldr	r3, [r0, #0]
 801959c:	4621      	mov	r1, r4
 801959e:	689b      	ldr	r3, [r3, #8]
 80195a0:	4798      	blx	r3
 80195a2:	4b08      	ldr	r3, [pc, #32]	@ (80195c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80195a4:	4621      	mov	r1, r4
 80195a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195aa:	6818      	ldr	r0, [r3, #0]
 80195ac:	6803      	ldr	r3, [r0, #0]
 80195ae:	69db      	ldr	r3, [r3, #28]
 80195b0:	4718      	bx	r3
 80195b2:	bd10      	pop	{r4, pc}
 80195b4:	2005ba9a 	.word	0x2005ba9a
 80195b8:	2005ba98 	.word	0x2005ba98
 80195bc:	2005bae8 	.word	0x2005bae8
 80195c0:	2005bae4 	.word	0x2005bae4
 80195c4:	2005baa4 	.word	0x2005baa4

080195c8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80195c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195ca:	4606      	mov	r6, r0
 80195cc:	4608      	mov	r0, r1
 80195ce:	460f      	mov	r7, r1
 80195d0:	f7fa fd85 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 80195d4:	b9e8      	cbnz	r0, 8019612 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80195d6:	f9b7 5000 	ldrsh.w	r5, [r7]
 80195da:	f9b6 4000 	ldrsh.w	r4, [r6]
 80195de:	42a5      	cmp	r5, r4
 80195e0:	db17      	blt.n	8019612 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80195e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80195e6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80195ea:	429a      	cmp	r2, r3
 80195ec:	db11      	blt.n	8019612 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80195ee:	88b9      	ldrh	r1, [r7, #4]
 80195f0:	440d      	add	r5, r1
 80195f2:	88b1      	ldrh	r1, [r6, #4]
 80195f4:	b22d      	sxth	r5, r5
 80195f6:	440c      	add	r4, r1
 80195f8:	b224      	sxth	r4, r4
 80195fa:	42a5      	cmp	r5, r4
 80195fc:	dc09      	bgt.n	8019612 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80195fe:	88f8      	ldrh	r0, [r7, #6]
 8019600:	4410      	add	r0, r2
 8019602:	88f2      	ldrh	r2, [r6, #6]
 8019604:	b200      	sxth	r0, r0
 8019606:	4413      	add	r3, r2
 8019608:	b21b      	sxth	r3, r3
 801960a:	4298      	cmp	r0, r3
 801960c:	bfcc      	ite	gt
 801960e:	2000      	movgt	r0, #0
 8019610:	2001      	movle	r0, #1
 8019612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019614 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019616:	4604      	mov	r4, r0
 8019618:	4608      	mov	r0, r1
 801961a:	460d      	mov	r5, r1
 801961c:	f7fa fd5f 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 8019620:	b978      	cbnz	r0, 8019642 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8019622:	4620      	mov	r0, r4
 8019624:	f7fa fd5b 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 8019628:	f9b5 6000 	ldrsh.w	r6, [r5]
 801962c:	b150      	cbz	r0, 8019644 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801962e:	8026      	strh	r6, [r4, #0]
 8019630:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019634:	8063      	strh	r3, [r4, #2]
 8019636:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801963a:	80a3      	strh	r3, [r4, #4]
 801963c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019640:	80e3      	strh	r3, [r4, #6]
 8019642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019644:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019648:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801964c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019650:	42b1      	cmp	r1, r6
 8019652:	460f      	mov	r7, r1
 8019654:	bfa8      	it	ge
 8019656:	4637      	movge	r7, r6
 8019658:	4293      	cmp	r3, r2
 801965a:	4618      	mov	r0, r3
 801965c:	bfa8      	it	ge
 801965e:	4610      	movge	r0, r2
 8019660:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8019664:	88ed      	ldrh	r5, [r5, #6]
 8019666:	4466      	add	r6, ip
 8019668:	442a      	add	r2, r5
 801966a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801966e:	88e5      	ldrh	r5, [r4, #6]
 8019670:	4461      	add	r1, ip
 8019672:	442b      	add	r3, r5
 8019674:	b236      	sxth	r6, r6
 8019676:	b209      	sxth	r1, r1
 8019678:	b212      	sxth	r2, r2
 801967a:	b21b      	sxth	r3, r3
 801967c:	428e      	cmp	r6, r1
 801967e:	bfac      	ite	ge
 8019680:	ebc7 0106 	rsbge	r1, r7, r6
 8019684:	ebc7 0101 	rsblt	r1, r7, r1
 8019688:	429a      	cmp	r2, r3
 801968a:	bfac      	ite	ge
 801968c:	ebc0 0202 	rsbge	r2, r0, r2
 8019690:	ebc0 0203 	rsblt	r2, r0, r3
 8019694:	8027      	strh	r7, [r4, #0]
 8019696:	8060      	strh	r0, [r4, #2]
 8019698:	80a1      	strh	r1, [r4, #4]
 801969a:	80e2      	strh	r2, [r4, #6]
 801969c:	e7d1      	b.n	8019642 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080196a0 <_ZN8touchgfx11Application11getInstanceEv>:
 80196a0:	4b01      	ldr	r3, [pc, #4]	@ (80196a8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80196a2:	6818      	ldr	r0, [r3, #0]
 80196a4:	4770      	bx	lr
 80196a6:	bf00      	nop
 80196a8:	2005baf8 	.word	0x2005baf8

080196ac <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80196ac:	2300      	movs	r3, #0
 80196ae:	b510      	push	{r4, lr}
 80196b0:	4604      	mov	r4, r0
 80196b2:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80196b6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80196ba:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80196be:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80196c2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 80196c6:	429a      	cmp	r2, r3
 80196c8:	d90e      	bls.n	80196e8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80196ca:	18e2      	adds	r2, r4, r3
 80196cc:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80196d0:	b122      	cbz	r2, 80196dc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80196d2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80196d6:	6803      	ldr	r3, [r0, #0]
 80196d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80196da:	4798      	blx	r3
 80196dc:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80196e0:	3301      	adds	r3, #1
 80196e2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80196e6:	e7ea      	b.n	80196be <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80196e8:	bd10      	pop	{r4, pc}

080196ea <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 80196ea:	2200      	movs	r2, #0
 80196ec:	b530      	push	{r4, r5, lr}
 80196ee:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 80196f2:	b293      	uxth	r3, r2
 80196f4:	429d      	cmp	r5, r3
 80196f6:	d90e      	bls.n	8019716 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80196f8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80196fc:	428b      	cmp	r3, r1
 80196fe:	d10b      	bne.n	8019718 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8019700:	1884      	adds	r4, r0, r2
 8019702:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8019706:	b13b      	cbz	r3, 8019718 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8019708:	3b01      	subs	r3, #1
 801970a:	b2db      	uxtb	r3, r3
 801970c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8019710:	b90b      	cbnz	r3, 8019716 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8019712:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8019716:	bd30      	pop	{r4, r5, pc}
 8019718:	3201      	adds	r2, #1
 801971a:	e7ea      	b.n	80196f2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801971c <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801971c:	2300      	movs	r3, #0
 801971e:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8019722:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8019726:	30a4      	adds	r0, #164	@ 0xa4
 8019728:	f802 3b01 	strb.w	r3, [r2], #1
 801972c:	4282      	cmp	r2, r0
 801972e:	d1fb      	bne.n	8019728 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8019730:	4770      	bx	lr
	...

08019734 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019734:	b570      	push	{r4, r5, r6, lr}
 8019736:	4c0b      	ldr	r4, [pc, #44]	@ (8019764 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8019738:	4605      	mov	r5, r0
 801973a:	6820      	ldr	r0, [r4, #0]
 801973c:	460e      	mov	r6, r1
 801973e:	b110      	cbz	r0, 8019746 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8019740:	6803      	ldr	r3, [r0, #0]
 8019742:	695b      	ldr	r3, [r3, #20]
 8019744:	4798      	blx	r3
 8019746:	1d28      	adds	r0, r5, #4
 8019748:	f7ff ffe8 	bl	801971c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801974c:	6026      	str	r6, [r4, #0]
 801974e:	6833      	ldr	r3, [r6, #0]
 8019750:	4630      	mov	r0, r6
 8019752:	68db      	ldr	r3, [r3, #12]
 8019754:	4798      	blx	r3
 8019756:	682b      	ldr	r3, [r5, #0]
 8019758:	4628      	mov	r0, r5
 801975a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801975e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019760:	4718      	bx	r3
 8019762:	bf00      	nop
 8019764:	2005bae8 	.word	0x2005bae8

08019768 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8019768:	2300      	movs	r3, #0
 801976a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801976c:	461a      	mov	r2, r3
 801976e:	461c      	mov	r4, r3
 8019770:	461d      	mov	r5, r3
 8019772:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8019776:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801977a:	459c      	cmp	ip, r3
 801977c:	dd1a      	ble.n	80197b4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801977e:	18c6      	adds	r6, r0, r3
 8019780:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8019784:	b16e      	cbz	r6, 80197a2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8019786:	429a      	cmp	r2, r3
 8019788:	d008      	beq.n	801979c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801978a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801978e:	fa1f fe82 	uxth.w	lr, r2
 8019792:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8019796:	1887      	adds	r7, r0, r2
 8019798:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801979c:	3201      	adds	r2, #1
 801979e:	3301      	adds	r3, #1
 80197a0:	e7eb      	b.n	801977a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80197a2:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 80197a6:	4299      	cmp	r1, r3
 80197a8:	bfa8      	it	ge
 80197aa:	3501      	addge	r5, #1
 80197ac:	429e      	cmp	r6, r3
 80197ae:	bfc8      	it	gt
 80197b0:	3401      	addgt	r4, #1
 80197b2:	e7f4      	b.n	801979e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80197b4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 80197b8:	1b49      	subs	r1, r1, r5
 80197ba:	1b1b      	subs	r3, r3, r4
 80197bc:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 80197c0:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80197c4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80197c8:	4293      	cmp	r3, r2
 80197ca:	dd03      	ble.n	80197d4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80197cc:	3b01      	subs	r3, #1
 80197ce:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80197d2:	e7f7      	b.n	80197c4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80197d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080197d8 <_ZN8touchgfx11Application15handleTickEventEv>:
 80197d8:	b570      	push	{r4, r5, r6, lr}
 80197da:	4d16      	ldr	r5, [pc, #88]	@ (8019834 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80197dc:	4604      	mov	r4, r0
 80197de:	6828      	ldr	r0, [r5, #0]
 80197e0:	b140      	cbz	r0, 80197f4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80197e2:	7a03      	ldrb	r3, [r0, #8]
 80197e4:	b933      	cbnz	r3, 80197f4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80197e6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80197ea:	6803      	ldr	r3, [r0, #0]
 80197ec:	689b      	ldr	r3, [r3, #8]
 80197ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197f2:	4718      	bx	r3
 80197f4:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 80197f8:	4e0f      	ldr	r6, [pc, #60]	@ (8019838 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80197fa:	b973      	cbnz	r3, 801981a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80197fc:	b168      	cbz	r0, 801981a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80197fe:	7a03      	ldrb	r3, [r0, #8]
 8019800:	b15b      	cbz	r3, 801981a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019802:	6830      	ldr	r0, [r6, #0]
 8019804:	b110      	cbz	r0, 801980c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8019806:	6803      	ldr	r3, [r0, #0]
 8019808:	691b      	ldr	r3, [r3, #16]
 801980a:	4798      	blx	r3
 801980c:	6828      	ldr	r0, [r5, #0]
 801980e:	6803      	ldr	r3, [r0, #0]
 8019810:	68db      	ldr	r3, [r3, #12]
 8019812:	4798      	blx	r3
 8019814:	2301      	movs	r3, #1
 8019816:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801981a:	3404      	adds	r4, #4
 801981c:	4620      	mov	r0, r4
 801981e:	f7ff ff45 	bl	80196ac <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8019822:	4620      	mov	r0, r4
 8019824:	f7ff ffa0 	bl	8019768 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8019828:	6830      	ldr	r0, [r6, #0]
 801982a:	b110      	cbz	r0, 8019832 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801982c:	6803      	ldr	r3, [r0, #0]
 801982e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019830:	e7dd      	b.n	80197ee <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019832:	bd70      	pop	{r4, r5, r6, pc}
 8019834:	2005baec 	.word	0x2005baec
 8019838:	2005bae8 	.word	0x2005bae8

0801983c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801983e:	2300      	movs	r3, #0
 8019840:	4604      	mov	r4, r0
 8019842:	460d      	mov	r5, r1
 8019844:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 8019848:	4618      	mov	r0, r3
 801984a:	b29a      	uxth	r2, r3
 801984c:	4291      	cmp	r1, r2
 801984e:	d911      	bls.n	8019874 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x38>
 8019850:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8019854:	18e6      	adds	r6, r4, r3
 8019856:	42af      	cmp	r7, r5
 8019858:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 801985c:	d105      	bne.n	801986a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801985e:	2aff      	cmp	r2, #255	@ 0xff
 8019860:	d002      	beq.n	8019868 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8019862:	3201      	adds	r2, #1
 8019864:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 8019868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801986a:	2a00      	cmp	r2, #0
 801986c:	bf08      	it	eq
 801986e:	2001      	moveq	r0, #1
 8019870:	3301      	adds	r3, #1
 8019872:	e7ea      	b.n	801984a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 8019874:	b120      	cbz	r0, 8019880 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 8019876:	2920      	cmp	r1, #32
 8019878:	d102      	bne.n	8019880 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 801987a:	4620      	mov	r0, r4
 801987c:	f7ff ff74 	bl	8019768 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8019880:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 8019884:	2b1f      	cmp	r3, #31
 8019886:	d8ef      	bhi.n	8019868 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8019888:	2101      	movs	r1, #1
 801988a:	18e2      	adds	r2, r4, r3
 801988c:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8019890:	185a      	adds	r2, r3, r1
 8019892:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 8019896:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801989a:	e7e5      	b.n	8019868 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801989c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801989c:	4603      	mov	r3, r0
 801989e:	2200      	movs	r2, #0
 80198a0:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80198a4:	801a      	strh	r2, [r3, #0]
 80198a6:	805a      	strh	r2, [r3, #2]
 80198a8:	809a      	strh	r2, [r3, #4]
 80198aa:	80da      	strh	r2, [r3, #6]
 80198ac:	3308      	adds	r3, #8
 80198ae:	428b      	cmp	r3, r1
 80198b0:	d1f8      	bne.n	80198a4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80198b2:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80198b6:	4770      	bx	lr

080198b8 <_ZN8touchgfx11ApplicationC1Ev>:
 80198b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ba:	4606      	mov	r6, r0
 80198bc:	4604      	mov	r4, r0
 80198be:	2500      	movs	r5, #0
 80198c0:	4b1b      	ldr	r3, [pc, #108]	@ (8019930 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80198c2:	22a8      	movs	r2, #168	@ 0xa8
 80198c4:	f846 3b04 	str.w	r3, [r6], #4
 80198c8:	2100      	movs	r1, #0
 80198ca:	4630      	mov	r0, r6
 80198cc:	f013 fb72 	bl	802cfb4 <memset>
 80198d0:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80198d4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80198d8:	f7ff ffe0 	bl	801989c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80198dc:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80198e0:	f7ff ffdc 	bl	801989c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80198e4:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80198e8:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 80198ec:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80198f0:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80198f4:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80198f8:	490e      	ldr	r1, [pc, #56]	@ (8019934 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80198fa:	480f      	ldr	r0, [pc, #60]	@ (8019938 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80198fc:	f011 fae8 	bl	802aed0 <CRC_Lock>
 8019900:	4f0e      	ldr	r7, [pc, #56]	@ (801993c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8019902:	4b0f      	ldr	r3, [pc, #60]	@ (8019940 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8019904:	b158      	cbz	r0, 801991e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8019906:	801d      	strh	r5, [r3, #0]
 8019908:	2300      	movs	r3, #0
 801990a:	4a0e      	ldr	r2, [pc, #56]	@ (8019944 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801990c:	4630      	mov	r0, r6
 801990e:	6013      	str	r3, [r2, #0]
 8019910:	4a0d      	ldr	r2, [pc, #52]	@ (8019948 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8019912:	603b      	str	r3, [r7, #0]
 8019914:	6013      	str	r3, [r2, #0]
 8019916:	f7ff ff01 	bl	801971c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801991a:	4620      	mov	r0, r4
 801991c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801991e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019922:	2002      	movs	r0, #2
 8019924:	801a      	strh	r2, [r3, #0]
 8019926:	6038      	str	r0, [r7, #0]
 8019928:	f001 ff30 	bl	801b78c <_ZN8touchgfx6Screen4drawEv>
 801992c:	e7ec      	b.n	8019908 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801992e:	bf00      	nop
 8019930:	0802f920 	.word	0x0802f920
 8019934:	b5e8b5cd 	.word	0xb5e8b5cd
 8019938:	f407a5c2 	.word	0xf407a5c2
 801993c:	2005bae8 	.word	0x2005bae8
 8019940:	2000001c 	.word	0x2000001c
 8019944:	2005baf8 	.word	0x2005baf8
 8019948:	2005baec 	.word	0x2005baec

0801994c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801994c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8019950:	b510      	push	{r4, lr}
 8019952:	3b01      	subs	r3, #1
 8019954:	b29b      	uxth	r3, r3
 8019956:	428b      	cmp	r3, r1
 8019958:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801995c:	d908      	bls.n	8019970 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801995e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8019962:	681a      	ldr	r2, [r3, #0]
 8019964:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8019968:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801996c:	685a      	ldr	r2, [r3, #4]
 801996e:	6062      	str	r2, [r4, #4]
 8019970:	bd10      	pop	{r4, pc}
	...

08019974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019978:	4b92      	ldr	r3, [pc, #584]	@ (8019bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 801997a:	b08f      	sub	sp, #60	@ 0x3c
 801997c:	ac0a      	add	r4, sp, #40	@ 0x28
 801997e:	e884 0006 	stmia.w	r4, {r1, r2}
 8019982:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019986:	4b90      	ldr	r3, [pc, #576]	@ (8019bc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 8019988:	4683      	mov	fp, r0
 801998a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801998e:	4620      	mov	r0, r4
 8019990:	f7ff fdca 	bl	8019528 <_ZN8touchgfx4Rect10restrictToEss>
 8019994:	4620      	mov	r0, r4
 8019996:	f7fa fba2 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 801999a:	2800      	cmp	r0, #0
 801999c:	d170      	bne.n	8019a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801999e:	4b8b      	ldr	r3, [pc, #556]	@ (8019bcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80199a6:	2b02      	cmp	r3, #2
 80199a8:	d06a      	beq.n	8019a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80199aa:	9403      	str	r4, [sp, #12]
 80199ac:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80199b0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80199b4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80199b8:	35a4      	adds	r5, #164	@ 0xa4
 80199ba:	9301      	str	r3, [sp, #4]
 80199bc:	b15c      	cbz	r4, 80199d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80199be:	4629      	mov	r1, r5
 80199c0:	9803      	ldr	r0, [sp, #12]
 80199c2:	f7ff fe01 	bl	80195c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80199c6:	3c01      	subs	r4, #1
 80199c8:	b118      	cbz	r0, 80199d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 80199ca:	b2a1      	uxth	r1, r4
 80199cc:	9801      	ldr	r0, [sp, #4]
 80199ce:	f7ff ffbd 	bl	801994c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80199d2:	3d08      	subs	r5, #8
 80199d4:	e7f2      	b.n	80199bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 80199d6:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 80199da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80199de:	9302      	str	r3, [sp, #8]
 80199e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80199e4:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 80199e8:	f8cd a010 	str.w	sl, [sp, #16]
 80199ec:	9306      	str	r3, [sp, #24]
 80199ee:	445c      	add	r4, fp
 80199f0:	2500      	movs	r5, #0
 80199f2:	4626      	mov	r6, r4
 80199f4:	462f      	mov	r7, r5
 80199f6:	f8cd a014 	str.w	sl, [sp, #20]
 80199fa:	9b05      	ldr	r3, [sp, #20]
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d073      	beq.n	8019ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 8019a00:	9903      	ldr	r1, [sp, #12]
 8019a02:	4630      	mov	r0, r6
 8019a04:	f7ff fd6e 	bl	80194e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019a08:	b350      	cbz	r0, 8019a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8019a0a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8019a0e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8019a12:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8019a16:	45e6      	cmp	lr, ip
 8019a18:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8019a1c:	db33      	blt.n	8019a86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8019a1e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8019a22:	88b3      	ldrh	r3, [r6, #4]
 8019a24:	4472      	add	r2, lr
 8019a26:	4463      	add	r3, ip
 8019a28:	b212      	sxth	r2, r2
 8019a2a:	b21b      	sxth	r3, r3
 8019a2c:	429a      	cmp	r2, r3
 8019a2e:	dc2a      	bgt.n	8019a86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8019a30:	88f3      	ldrh	r3, [r6, #6]
 8019a32:	fa1f f289 	uxth.w	r2, r9
 8019a36:	4413      	add	r3, r2
 8019a38:	b29b      	uxth	r3, r3
 8019a3a:	45c8      	cmp	r8, r9
 8019a3c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019a40:	fa1f fc88 	uxth.w	ip, r8
 8019a44:	fa0f fe83 	sxth.w	lr, r3
 8019a48:	db0f      	blt.n	8019a6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 8019a4a:	eba3 030c 	sub.w	r3, r3, ip
 8019a4e:	1ac9      	subs	r1, r1, r3
 8019a50:	b209      	sxth	r1, r1
 8019a52:	2900      	cmp	r1, #0
 8019a54:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019a58:	dd12      	ble.n	8019a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8019a5a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8019a5e:	4605      	mov	r5, r0
 8019a60:	9b05      	ldr	r3, [sp, #20]
 8019a62:	3e08      	subs	r6, #8
 8019a64:	3b01      	subs	r3, #1
 8019a66:	9305      	str	r3, [sp, #20]
 8019a68:	e7c7      	b.n	80199fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 8019a6a:	4461      	add	r1, ip
 8019a6c:	b209      	sxth	r1, r1
 8019a6e:	4571      	cmp	r1, lr
 8019a70:	dc38      	bgt.n	8019ae4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019a72:	eba2 020c 	sub.w	r2, r2, ip
 8019a76:	b212      	sxth	r2, r2
 8019a78:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8019a7c:	2a00      	cmp	r2, #0
 8019a7e:	dcee      	bgt.n	8019a5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019a80:	b00f      	add	sp, #60	@ 0x3c
 8019a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a86:	45c8      	cmp	r8, r9
 8019a88:	db2c      	blt.n	8019ae4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019a8a:	88f3      	ldrh	r3, [r6, #6]
 8019a8c:	4499      	add	r9, r3
 8019a8e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8019a92:	fa0f f989 	sxth.w	r9, r9
 8019a96:	4498      	add	r8, r3
 8019a98:	fa0f f888 	sxth.w	r8, r8
 8019a9c:	45c1      	cmp	r9, r8
 8019a9e:	db21      	blt.n	8019ae4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019aa0:	88b3      	ldrh	r3, [r6, #4]
 8019aa2:	fa1f f28c 	uxth.w	r2, ip
 8019aa6:	4413      	add	r3, r2
 8019aa8:	b29b      	uxth	r3, r3
 8019aaa:	45e6      	cmp	lr, ip
 8019aac:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019ab0:	fa1f f88e 	uxth.w	r8, lr
 8019ab4:	fa0f f983 	sxth.w	r9, r3
 8019ab8:	db0a      	blt.n	8019ad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 8019aba:	eba3 0308 	sub.w	r3, r3, r8
 8019abe:	1ac9      	subs	r1, r1, r3
 8019ac0:	b209      	sxth	r1, r1
 8019ac2:	2900      	cmp	r1, #0
 8019ac4:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8019ac8:	ddda      	ble.n	8019a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8019aca:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8019ace:	e7c6      	b.n	8019a5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019ad0:	4441      	add	r1, r8
 8019ad2:	b209      	sxth	r1, r1
 8019ad4:	4549      	cmp	r1, r9
 8019ad6:	dc05      	bgt.n	8019ae4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8019ad8:	eba2 0208 	sub.w	r2, r2, r8
 8019adc:	b212      	sxth	r2, r2
 8019ade:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8019ae2:	e7cb      	b.n	8019a7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8019ae4:	4607      	mov	r7, r0
 8019ae6:	e7bb      	b.n	8019a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8019ae8:	2d00      	cmp	r5, #0
 8019aea:	d181      	bne.n	80199f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8019aec:	2f00      	cmp	r7, #0
 8019aee:	f000 81e0 	beq.w	8019eb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8019af2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8019af6:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8019afa:	b2b3      	uxth	r3, r6
 8019afc:	9305      	str	r3, [sp, #20]
 8019afe:	9a05      	ldr	r2, [sp, #20]
 8019b00:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8019b04:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8019b08:	4413      	add	r3, r2
 8019b0a:	b2ba      	uxth	r2, r7
 8019b0c:	4492      	add	sl, r2
 8019b0e:	b29b      	uxth	r3, r3
 8019b10:	fa1f fa8a 	uxth.w	sl, sl
 8019b14:	fa0f f883 	sxth.w	r8, r3
 8019b18:	fa0f f98a 	sxth.w	r9, sl
 8019b1c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8019b20:	9b04      	ldr	r3, [sp, #16]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d054      	beq.n	8019bd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 8019b26:	9903      	ldr	r1, [sp, #12]
 8019b28:	4620      	mov	r0, r4
 8019b2a:	f7ff fcdb 	bl	80194e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019b2e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019b32:	b1c0      	cbz	r0, 8019b66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019b34:	f9b4 e000 	ldrsh.w	lr, [r4]
 8019b38:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019b3c:	4576      	cmp	r6, lr
 8019b3e:	dc22      	bgt.n	8019b86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8019b40:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019b44:	44f4      	add	ip, lr
 8019b46:	fa0f fc8c 	sxth.w	ip, ip
 8019b4a:	45e0      	cmp	r8, ip
 8019b4c:	db1b      	blt.n	8019b86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8019b4e:	428f      	cmp	r7, r1
 8019b50:	fa1f fc81 	uxth.w	ip, r1
 8019b54:	88e1      	ldrh	r1, [r4, #6]
 8019b56:	dc0d      	bgt.n	8019b74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8019b58:	ebaa 0c0c 	sub.w	ip, sl, ip
 8019b5c:	eba1 010c 	sub.w	r1, r1, ip
 8019b60:	f8a4 9002 	strh.w	r9, [r4, #2]
 8019b64:	80e1      	strh	r1, [r4, #6]
 8019b66:	4628      	mov	r0, r5
 8019b68:	9904      	ldr	r1, [sp, #16]
 8019b6a:	3c08      	subs	r4, #8
 8019b6c:	3901      	subs	r1, #1
 8019b6e:	9104      	str	r1, [sp, #16]
 8019b70:	4605      	mov	r5, r0
 8019b72:	e7d3      	b.n	8019b1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 8019b74:	4461      	add	r1, ip
 8019b76:	b209      	sxth	r1, r1
 8019b78:	4549      	cmp	r1, r9
 8019b7a:	dcf5      	bgt.n	8019b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019b7c:	eba2 0c0c 	sub.w	ip, r2, ip
 8019b80:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019b84:	e7ef      	b.n	8019b66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019b86:	428f      	cmp	r7, r1
 8019b88:	dcee      	bgt.n	8019b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019b8a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8019b8e:	4461      	add	r1, ip
 8019b90:	b209      	sxth	r1, r1
 8019b92:	4589      	cmp	r9, r1
 8019b94:	dbe8      	blt.n	8019b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019b96:	4576      	cmp	r6, lr
 8019b98:	fa1f fc8e 	uxth.w	ip, lr
 8019b9c:	88a1      	ldrh	r1, [r4, #4]
 8019b9e:	dc07      	bgt.n	8019bb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 8019ba0:	eba3 0c0c 	sub.w	ip, r3, ip
 8019ba4:	eba1 010c 	sub.w	r1, r1, ip
 8019ba8:	f8a4 8000 	strh.w	r8, [r4]
 8019bac:	80a1      	strh	r1, [r4, #4]
 8019bae:	e7da      	b.n	8019b66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019bb0:	4461      	add	r1, ip
 8019bb2:	b209      	sxth	r1, r1
 8019bb4:	4588      	cmp	r8, r1
 8019bb6:	dbd7      	blt.n	8019b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019bb8:	9905      	ldr	r1, [sp, #20]
 8019bba:	eba1 0c0c 	sub.w	ip, r1, ip
 8019bbe:	f8a4 c004 	strh.w	ip, [r4, #4]
 8019bc2:	e7d0      	b.n	8019b66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019bc4:	2005ba9a 	.word	0x2005ba9a
 8019bc8:	2005ba98 	.word	0x2005ba98
 8019bcc:	2005baa4 	.word	0x2005baa4
 8019bd0:	2d00      	cmp	r5, #0
 8019bd2:	f000 816e 	beq.w	8019eb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8019bd6:	9b06      	ldr	r3, [sp, #24]
 8019bd8:	445b      	add	r3, fp
 8019bda:	461c      	mov	r4, r3
 8019bdc:	9b02      	ldr	r3, [sp, #8]
 8019bde:	3301      	adds	r3, #1
 8019be0:	f000 8167 	beq.w	8019eb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8019be4:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8019be8:	4629      	mov	r1, r5
 8019bea:	9803      	ldr	r0, [sp, #12]
 8019bec:	f7ff fcec 	bl	80195c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019bf0:	b120      	cbz	r0, 8019bfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 8019bf2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019bf6:	9801      	ldr	r0, [sp, #4]
 8019bf8:	f7ff fea8 	bl	801994c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019bfc:	9903      	ldr	r1, [sp, #12]
 8019bfe:	4628      	mov	r0, r5
 8019c00:	f7ff fc70 	bl	80194e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019c04:	2800      	cmp	r0, #0
 8019c06:	f000 809c 	beq.w	8019d42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8019c0a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8019c0e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019c12:	fa1f f189 	uxth.w	r1, r9
 8019c16:	eb01 0c03 	add.w	ip, r1, r3
 8019c1a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8019c1e:	fa1f fa8c 	uxth.w	sl, ip
 8019c22:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8019c26:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c28:	b283      	uxth	r3, r0
 8019c2a:	eb03 050c 	add.w	r5, r3, ip
 8019c2e:	b2ad      	uxth	r5, r5
 8019c30:	9505      	str	r5, [sp, #20]
 8019c32:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8019c36:	4548      	cmp	r0, r9
 8019c38:	9504      	str	r5, [sp, #16]
 8019c3a:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8019c3e:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8019c42:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8019c46:	f340 8099 	ble.w	8019d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 8019c4a:	1a5b      	subs	r3, r3, r1
 8019c4c:	b29b      	uxth	r3, r3
 8019c4e:	4596      	cmp	lr, r2
 8019c50:	fa0f f08a 	sxth.w	r0, sl
 8019c54:	b21e      	sxth	r6, r3
 8019c56:	dd2e      	ble.n	8019cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8019c58:	9f02      	ldr	r7, [sp, #8]
 8019c5a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8019c5e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8019c62:	9f04      	ldr	r7, [sp, #16]
 8019c64:	fa1f fe8e 	uxth.w	lr, lr
 8019c68:	1a3f      	subs	r7, r7, r0
 8019c6a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8019c6e:	b292      	uxth	r2, r2
 8019c70:	ebae 0102 	sub.w	r1, lr, r2
 8019c74:	44a6      	add	lr, r4
 8019c76:	4402      	add	r2, r0
 8019c78:	b289      	uxth	r1, r1
 8019c7a:	fa0f fe8e 	sxth.w	lr, lr
 8019c7e:	b212      	sxth	r2, r2
 8019c80:	b20d      	sxth	r5, r1
 8019c82:	ebae 0202 	sub.w	r2, lr, r2
 8019c86:	436f      	muls	r7, r5
 8019c88:	4372      	muls	r2, r6
 8019c8a:	4297      	cmp	r7, r2
 8019c8c:	db09      	blt.n	8019ca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 8019c8e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8019c92:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8019c96:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8019c9a:	449c      	add	ip, r3
 8019c9c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8019ca0:	e684      	b.n	80199ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019ca2:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8019ca6:	4421      	add	r1, r4
 8019ca8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8019cac:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019cb0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019cb4:	e67a      	b.n	80199ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019cb6:	9f04      	ldr	r7, [sp, #16]
 8019cb8:	42b8      	cmp	r0, r7
 8019cba:	da27      	bge.n	8019d0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 8019cbc:	9902      	ldr	r1, [sp, #8]
 8019cbe:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8019cc2:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8019cc6:	eb05 010e 	add.w	r1, r5, lr
 8019cca:	fa1f f881 	uxth.w	r8, r1
 8019cce:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8019cd2:	fa0f f988 	sxth.w	r9, r8
 8019cd6:	4411      	add	r1, r2
 8019cd8:	eba1 0108 	sub.w	r1, r1, r8
 8019cdc:	b289      	uxth	r1, r1
 8019cde:	fa0f f881 	sxth.w	r8, r1
 8019ce2:	eba2 020e 	sub.w	r2, r2, lr
 8019ce6:	1a3f      	subs	r7, r7, r0
 8019ce8:	4372      	muls	r2, r6
 8019cea:	fb08 f707 	mul.w	r7, r8, r7
 8019cee:	42ba      	cmp	r2, r7
 8019cf0:	dc06      	bgt.n	8019d00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 8019cf2:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8019cf6:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8019cfa:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8019cfe:	e7ca      	b.n	8019c96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8019d00:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8019d04:	4429      	add	r1, r5
 8019d06:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019d0a:	e64f      	b.n	80199ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019d0c:	9805      	ldr	r0, [sp, #20]
 8019d0e:	2d06      	cmp	r5, #6
 8019d10:	ebaa 0000 	sub.w	r0, sl, r0
 8019d14:	b280      	uxth	r0, r0
 8019d16:	fa0f fe80 	sxth.w	lr, r0
 8019d1a:	d817      	bhi.n	8019d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 8019d1c:	9b04      	ldr	r3, [sp, #16]
 8019d1e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8019d22:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8019d26:	1c6b      	adds	r3, r5, #1
 8019d28:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8019d2c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8019d30:	9b01      	ldr	r3, [sp, #4]
 8019d32:	9801      	ldr	r0, [sp, #4]
 8019d34:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019d38:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019d3c:	805a      	strh	r2, [r3, #2]
 8019d3e:	809e      	strh	r6, [r3, #4]
 8019d40:	80d9      	strh	r1, [r3, #6]
 8019d42:	9b02      	ldr	r3, [sp, #8]
 8019d44:	3c08      	subs	r4, #8
 8019d46:	3b01      	subs	r3, #1
 8019d48:	9302      	str	r3, [sp, #8]
 8019d4a:	e747      	b.n	8019bdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 8019d4c:	9a02      	ldr	r2, [sp, #8]
 8019d4e:	45b6      	cmp	lr, r6
 8019d50:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019d54:	db0d      	blt.n	8019d72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8019d56:	449c      	add	ip, r3
 8019d58:	fa1f fc8c 	uxth.w	ip, ip
 8019d5c:	445a      	add	r2, fp
 8019d5e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8019d62:	448c      	add	ip, r1
 8019d64:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8019d68:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8019d6c:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8019d70:	e61c      	b.n	80199ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019d72:	445a      	add	r2, fp
 8019d74:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8019d78:	4484      	add	ip, r0
 8019d7a:	e78f      	b.n	8019c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8019d7c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8019d80:	fa1f f18e 	uxth.w	r1, lr
 8019d84:	eb01 0806 	add.w	r8, r1, r6
 8019d88:	b293      	uxth	r3, r2
 8019d8a:	fa1f f888 	uxth.w	r8, r8
 8019d8e:	9306      	str	r3, [sp, #24]
 8019d90:	fa0f f388 	sxth.w	r3, r8
 8019d94:	9307      	str	r3, [sp, #28]
 8019d96:	9f06      	ldr	r7, [sp, #24]
 8019d98:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8019d9c:	4596      	cmp	lr, r2
 8019d9e:	443b      	add	r3, r7
 8019da0:	b29b      	uxth	r3, r3
 8019da2:	9308      	str	r3, [sp, #32]
 8019da4:	da24      	bge.n	8019df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8019da6:	9905      	ldr	r1, [sp, #20]
 8019da8:	eba3 0308 	sub.w	r3, r3, r8
 8019dac:	ebaa 0401 	sub.w	r4, sl, r1
 8019db0:	b2a4      	uxth	r4, r4
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	b225      	sxth	r5, r4
 8019db6:	b219      	sxth	r1, r3
 8019db8:	eba2 020e 	sub.w	r2, r2, lr
 8019dbc:	eba9 0000 	sub.w	r0, r9, r0
 8019dc0:	436a      	muls	r2, r5
 8019dc2:	4348      	muls	r0, r1
 8019dc4:	4282      	cmp	r2, r0
 8019dc6:	9a02      	ldr	r2, [sp, #8]
 8019dc8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019dcc:	445a      	add	r2, fp
 8019dce:	dc06      	bgt.n	8019dde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8019dd0:	9b07      	ldr	r3, [sp, #28]
 8019dd2:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8019dd6:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8019dda:	44a4      	add	ip, r4
 8019ddc:	e75e      	b.n	8019c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8019dde:	9904      	ldr	r1, [sp, #16]
 8019de0:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8019de4:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8019de8:	4433      	add	r3, r6
 8019dea:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019dee:	e5dd      	b.n	80199ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019df0:	9f06      	ldr	r7, [sp, #24]
 8019df2:	9b04      	ldr	r3, [sp, #16]
 8019df4:	1bc9      	subs	r1, r1, r7
 8019df6:	fa0f f78a 	sxth.w	r7, sl
 8019dfa:	b289      	uxth	r1, r1
 8019dfc:	429f      	cmp	r7, r3
 8019dfe:	fa0f fe81 	sxth.w	lr, r1
 8019e02:	dd24      	ble.n	8019e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4da>
 8019e04:	9a05      	ldr	r2, [sp, #20]
 8019e06:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019e0a:	ebaa 0202 	sub.w	r2, sl, r2
 8019e0e:	9d07      	ldr	r5, [sp, #28]
 8019e10:	b292      	uxth	r2, r2
 8019e12:	eba5 0a03 	sub.w	sl, r5, r3
 8019e16:	b214      	sxth	r4, r2
 8019e18:	eba9 0000 	sub.w	r0, r9, r0
 8019e1c:	fb0e f000 	mul.w	r0, lr, r0
 8019e20:	fb04 fa0a 	mul.w	sl, r4, sl
 8019e24:	9b02      	ldr	r3, [sp, #8]
 8019e26:	4550      	cmp	r0, sl
 8019e28:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019e2c:	445b      	add	r3, fp
 8019e2e:	db03      	blt.n	8019e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8019e30:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8019e34:	4494      	add	ip, r2
 8019e36:	e731      	b.n	8019c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8019e38:	9a04      	ldr	r2, [sp, #16]
 8019e3a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8019e3e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8019e42:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8019e46:	4431      	add	r1, r6
 8019e48:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019e4c:	e75b      	b.n	8019d06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 8019e4e:	9b08      	ldr	r3, [sp, #32]
 8019e50:	2d06      	cmp	r5, #6
 8019e52:	eba3 0308 	sub.w	r3, r3, r8
 8019e56:	b29b      	uxth	r3, r3
 8019e58:	b218      	sxth	r0, r3
 8019e5a:	d813      	bhi.n	8019e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x510>
 8019e5c:	9b07      	ldr	r3, [sp, #28]
 8019e5e:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8019e62:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8019e66:	1c6b      	adds	r3, r5, #1
 8019e68:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8019e6c:	9b01      	ldr	r3, [sp, #4]
 8019e6e:	9901      	ldr	r1, [sp, #4]
 8019e70:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019e74:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8019e78:	805a      	strh	r2, [r3, #2]
 8019e7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e7c:	f8a3 e006 	strh.w	lr, [r3, #6]
 8019e80:	809a      	strh	r2, [r3, #4]
 8019e82:	e75e      	b.n	8019d42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8019e84:	9c02      	ldr	r4, [sp, #8]
 8019e86:	4570      	cmp	r0, lr
 8019e88:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8019e8c:	db0d      	blt.n	8019eaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 8019e8e:	4431      	add	r1, r6
 8019e90:	9b06      	ldr	r3, [sp, #24]
 8019e92:	b289      	uxth	r1, r1
 8019e94:	445c      	add	r4, fp
 8019e96:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019e9a:	4419      	add	r1, r3
 8019e9c:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8019ea0:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8019ea4:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8019ea8:	e580      	b.n	80199ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019eaa:	445c      	add	r4, fp
 8019eac:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8019eb0:	e79a      	b.n	8019de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8019eb2:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8019eb6:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8019eba:	1e65      	subs	r5, r4, #1
 8019ebc:	b2ad      	uxth	r5, r5
 8019ebe:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8019ec2:	42b5      	cmp	r5, r6
 8019ec4:	d044      	beq.n	8019f50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8019ec6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8019eca:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8019ece:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8019ed2:	4282      	cmp	r2, r0
 8019ed4:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8019ed8:	d11f      	bne.n	8019f1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a6>
 8019eda:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8019ede:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8019ee2:	459c      	cmp	ip, r3
 8019ee4:	d119      	bne.n	8019f1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a6>
 8019ee6:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8019eea:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8019eee:	19d8      	adds	r0, r3, r7
 8019ef0:	b200      	sxth	r0, r0
 8019ef2:	4288      	cmp	r0, r1
 8019ef4:	d109      	bne.n	8019f0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 8019ef6:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8019efa:	4413      	add	r3, r2
 8019efc:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8019f00:	4629      	mov	r1, r5
 8019f02:	9801      	ldr	r0, [sp, #4]
 8019f04:	f7ff fd22 	bl	801994c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019f08:	e003      	b.n	8019f12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 8019f0a:	4411      	add	r1, r2
 8019f0c:	b209      	sxth	r1, r1
 8019f0e:	42b9      	cmp	r1, r7
 8019f10:	d0f3      	beq.n	8019efa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8019f12:	3d01      	subs	r5, #1
 8019f14:	b2ad      	uxth	r5, r5
 8019f16:	3c08      	subs	r4, #8
 8019f18:	e7d3      	b.n	8019ec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 8019f1a:	42b9      	cmp	r1, r7
 8019f1c:	d1f9      	bne.n	8019f12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 8019f1e:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8019f22:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019f26:	4299      	cmp	r1, r3
 8019f28:	d1f3      	bne.n	8019f12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 8019f2a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8019f2e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019f32:	181f      	adds	r7, r3, r0
 8019f34:	b23f      	sxth	r7, r7
 8019f36:	42ba      	cmp	r2, r7
 8019f38:	d105      	bne.n	8019f46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d2>
 8019f3a:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8019f3e:	440b      	add	r3, r1
 8019f40:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019f44:	e7dc      	b.n	8019f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019f46:	440a      	add	r2, r1
 8019f48:	b212      	sxth	r2, r2
 8019f4a:	4290      	cmp	r0, r2
 8019f4c:	d1e1      	bne.n	8019f12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 8019f4e:	e7f6      	b.n	8019f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8019f50:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8019f54:	2e07      	cmp	r6, #7
 8019f56:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8019f5a:	d812      	bhi.n	8019f82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60e>
 8019f5c:	1c75      	adds	r5, r6, #1
 8019f5e:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8019f62:	9d01      	ldr	r5, [sp, #4]
 8019f64:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8019f68:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8019f6c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8019f70:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8019f74:	442c      	add	r4, r5
 8019f76:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8019f7a:	8061      	strh	r1, [r4, #2]
 8019f7c:	80a2      	strh	r2, [r4, #4]
 8019f7e:	80e3      	strh	r3, [r4, #6]
 8019f80:	e57e      	b.n	8019a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8019f82:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8019f86:	f04f 37ff 	mov.w	r7, #4294967295
 8019f8a:	2500      	movs	r5, #0
 8019f8c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8019f90:	3e01      	subs	r6, #1
 8019f92:	445c      	add	r4, fp
 8019f94:	9305      	str	r3, [sp, #20]
 8019f96:	1e72      	subs	r2, r6, #1
 8019f98:	4691      	mov	r9, r2
 8019f9a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019f9e:	9302      	str	r3, [sp, #8]
 8019fa0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8019fa4:	9304      	str	r3, [sp, #16]
 8019fa6:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8019faa:	f1b9 3fff 	cmp.w	r9, #4294967295
 8019fae:	bf16      	itet	ne
 8019fb0:	9905      	ldrne	r1, [sp, #20]
 8019fb2:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8019fb6:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8019fba:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019fbe:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8019fc2:	6818      	ldr	r0, [r3, #0]
 8019fc4:	fb18 f801 	smulbb	r8, r8, r1
 8019fc8:	6859      	ldr	r1, [r3, #4]
 8019fca:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019fce:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019fd2:	4671      	mov	r1, lr
 8019fd4:	a80c      	add	r0, sp, #48	@ 0x30
 8019fd6:	9207      	str	r2, [sp, #28]
 8019fd8:	9306      	str	r3, [sp, #24]
 8019fda:	f7ff fb1b 	bl	8019614 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019fde:	f04f 0c08 	mov.w	ip, #8
 8019fe2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8019fe6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8019fea:	9b04      	ldr	r3, [sp, #16]
 8019fec:	9a02      	ldr	r2, [sp, #8]
 8019fee:	fb10 f001 	smulbb	r0, r0, r1
 8019ff2:	fb02 8803 	mla	r8, r2, r3, r8
 8019ff6:	eba0 0108 	sub.w	r1, r0, r8
 8019ffa:	fb90 f0fc 	sdiv	r0, r0, ip
 8019ffe:	4288      	cmp	r0, r1
 801a000:	dc20      	bgt.n	801a044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 801a002:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801a006:	4551      	cmp	r1, sl
 801a008:	da03      	bge.n	801a012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69e>
 801a00a:	b1d9      	cbz	r1, 801a044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 801a00c:	468a      	mov	sl, r1
 801a00e:	464f      	mov	r7, r9
 801a010:	4635      	mov	r5, r6
 801a012:	f109 39ff 	add.w	r9, r9, #4294967295
 801a016:	f119 0f02 	cmn.w	r9, #2
 801a01a:	d1c6      	bne.n	8019faa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 801a01c:	4616      	mov	r6, r2
 801a01e:	3201      	adds	r2, #1
 801a020:	f1a4 0408 	sub.w	r4, r4, #8
 801a024:	d1b7      	bne.n	8019f96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 801a026:	9b01      	ldr	r3, [sp, #4]
 801a028:	b2ac      	uxth	r4, r5
 801a02a:	00ed      	lsls	r5, r5, #3
 801a02c:	1958      	adds	r0, r3, r5
 801a02e:	1c7b      	adds	r3, r7, #1
 801a030:	d10b      	bne.n	801a04a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d6>
 801a032:	4601      	mov	r1, r0
 801a034:	9803      	ldr	r0, [sp, #12]
 801a036:	f7ff faed 	bl	8019614 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a03a:	4621      	mov	r1, r4
 801a03c:	9801      	ldr	r0, [sp, #4]
 801a03e:	f7ff fc85 	bl	801994c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a042:	e4b3      	b.n	80199ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801a044:	464f      	mov	r7, r9
 801a046:	4635      	mov	r5, r6
 801a048:	e7ed      	b.n	801a026 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b2>
 801a04a:	9b01      	ldr	r3, [sp, #4]
 801a04c:	00ff      	lsls	r7, r7, #3
 801a04e:	19d9      	adds	r1, r3, r7
 801a050:	f7ff fae0 	bl	8019614 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a054:	9b03      	ldr	r3, [sp, #12]
 801a056:	445f      	add	r7, fp
 801a058:	cb03      	ldmia	r3!, {r0, r1}
 801a05a:	445d      	add	r5, fp
 801a05c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801a060:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801a064:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801a068:	9b03      	ldr	r3, [sp, #12]
 801a06a:	6869      	ldr	r1, [r5, #4]
 801a06c:	c303      	stmia	r3!, {r0, r1}
 801a06e:	e7e4      	b.n	801a03a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>

0801a070 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a074:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801a078:	b0a1      	sub	sp, #132	@ 0x84
 801a07a:	4604      	mov	r4, r0
 801a07c:	4630      	mov	r0, r6
 801a07e:	f7fa f82e 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a082:	4605      	mov	r5, r0
 801a084:	b948      	cbnz	r0, 801a09a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801a086:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a08a:	6823      	ldr	r3, [r4, #0]
 801a08c:	4620      	mov	r0, r4
 801a08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a090:	4798      	blx	r3
 801a092:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801a096:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801a09a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d149      	bne.n	801a136 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 801a0a2:	4bb2      	ldr	r3, [pc, #712]	@ (801a36c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 801a0a4:	681b      	ldr	r3, [r3, #0]
 801a0a6:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 801a0aa:	1ebb      	subs	r3, r7, #2
 801a0ac:	425f      	negs	r7, r3
 801a0ae:	415f      	adcs	r7, r3
 801a0b0:	4baf      	ldr	r3, [pc, #700]	@ (801a370 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d040      	beq.n	801a13a <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801a0b8:	4dae      	ldr	r5, [pc, #696]	@ (801a374 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 801a0ba:	4628      	mov	r0, r5
 801a0bc:	f7fa f80f 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a0c0:	4606      	mov	r6, r0
 801a0c2:	2800      	cmp	r0, #0
 801a0c4:	d139      	bne.n	801a13a <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801a0c6:	4628      	mov	r0, r5
 801a0c8:	f7ff f942 	bl	8019350 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a0cc:	6823      	ldr	r3, [r4, #0]
 801a0ce:	6829      	ldr	r1, [r5, #0]
 801a0d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a0d2:	686a      	ldr	r2, [r5, #4]
 801a0d4:	4620      	mov	r0, r4
 801a0d6:	4798      	blx	r3
 801a0d8:	802e      	strh	r6, [r5, #0]
 801a0da:	806e      	strh	r6, [r5, #2]
 801a0dc:	80ae      	strh	r6, [r5, #4]
 801a0de:	80ee      	strh	r6, [r5, #6]
 801a0e0:	af0f      	add	r7, sp, #60	@ 0x3c
 801a0e2:	4ea5      	ldr	r6, [pc, #660]	@ (801a378 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 801a0e4:	4638      	mov	r0, r7
 801a0e6:	f7ff fbd9 	bl	801989c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a0ea:	8835      	ldrh	r5, [r6, #0]
 801a0ec:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 801a0f0:	462b      	mov	r3, r5
 801a0f2:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801a0f6:	4563      	cmp	r3, ip
 801a0f8:	d224      	bcs.n	801a144 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 801a0fa:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 801a0fe:	2907      	cmp	r1, #7
 801a100:	d816      	bhi.n	801a130 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801a102:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a106:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801a10a:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 801a10e:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 801a112:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801a116:	1c4a      	adds	r2, r1, #1
 801a118:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 801a11c:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 801a120:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 801a124:	f8a2 a002 	strh.w	sl, [r2, #2]
 801a128:	f8a2 8004 	strh.w	r8, [r2, #4]
 801a12c:	f8a2 e006 	strh.w	lr, [r2, #6]
 801a130:	3301      	adds	r3, #1
 801a132:	b29b      	uxth	r3, r3
 801a134:	e7df      	b.n	801a0f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 801a136:	2701      	movs	r7, #1
 801a138:	e7ba      	b.n	801a0b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 801a13a:	2f00      	cmp	r7, #0
 801a13c:	d1d0      	bne.n	801a0e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 801a13e:	b021      	add	sp, #132	@ 0x84
 801a140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a144:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801a148:	42ab      	cmp	r3, r5
 801a14a:	d90c      	bls.n	801a166 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 801a14c:	6822      	ldr	r2, [r4, #0]
 801a14e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a152:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801a154:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801a158:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801a15c:	4620      	mov	r0, r4
 801a15e:	3501      	adds	r5, #1
 801a160:	47b8      	blx	r7
 801a162:	b2ad      	uxth	r5, r5
 801a164:	e7ee      	b.n	801a144 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 801a166:	4d81      	ldr	r5, [pc, #516]	@ (801a36c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 801a168:	6828      	ldr	r0, [r5, #0]
 801a16a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801a16e:	2b01      	cmp	r3, #1
 801a170:	f040 813d 	bne.w	801a3ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 801a174:	4a81      	ldr	r2, [pc, #516]	@ (801a37c <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 801a176:	8833      	ldrh	r3, [r6, #0]
 801a178:	7812      	ldrb	r2, [r2, #0]
 801a17a:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 801a17e:	2a01      	cmp	r2, #1
 801a180:	d014      	beq.n	801a1ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801a182:	f04f 0900 	mov.w	r9, #0
 801a186:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801a18a:	32ae      	adds	r2, #174	@ 0xae
 801a18c:	4283      	cmp	r3, r0
 801a18e:	f102 0208 	add.w	r2, r2, #8
 801a192:	f280 8083 	bge.w	801a29c <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801a196:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 801a19a:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 801a19e:	3301      	adds	r3, #1
 801a1a0:	4439      	add	r1, r7
 801a1a2:	b209      	sxth	r1, r1
 801a1a4:	4589      	cmp	r9, r1
 801a1a6:	bfb8      	it	lt
 801a1a8:	4689      	movlt	r9, r1
 801a1aa:	e7ef      	b.n	801a18c <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 801a1ac:	4f74      	ldr	r7, [pc, #464]	@ (801a380 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 801a1ae:	883a      	ldrh	r2, [r7, #0]
 801a1b0:	4693      	mov	fp, r2
 801a1b2:	4283      	cmp	r3, r0
 801a1b4:	da08      	bge.n	801a1c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 801a1b6:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801a1ba:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 801a1be:	3301      	adds	r3, #1
 801a1c0:	458b      	cmp	fp, r1
 801a1c2:	bfa8      	it	ge
 801a1c4:	468b      	movge	fp, r1
 801a1c6:	e7f4      	b.n	801a1b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	2a0f      	cmp	r2, #15
 801a1cc:	bf98      	it	ls
 801a1ce:	f04f 0801 	movls.w	r8, #1
 801a1d2:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 801a384 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 801a1d6:	bf88      	it	hi
 801a1d8:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 801a1dc:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801a1e0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a1e4:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801a1e8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a1ec:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801a1f0:	6828      	ldr	r0, [r5, #0]
 801a1f2:	455b      	cmp	r3, fp
 801a1f4:	f340 80c8 	ble.w	801a388 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a1f8:	6803      	ldr	r3, [r0, #0]
 801a1fa:	f8b7 a000 	ldrh.w	sl, [r7]
 801a1fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a202:	4798      	blx	r3
 801a204:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801a208:	ebaa 0000 	sub.w	r0, sl, r0
 801a20c:	682b      	ldr	r3, [r5, #0]
 801a20e:	b280      	uxth	r0, r0
 801a210:	ebac 0e08 	sub.w	lr, ip, r8
 801a214:	4570      	cmp	r0, lr
 801a216:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 801a21a:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 801a21e:	dd05      	ble.n	801a22c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 801a220:	4558      	cmp	r0, fp
 801a222:	dd03      	ble.n	801a22c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 801a224:	b901      	cbnz	r1, 801a228 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801a226:	b392      	cbz	r2, 801a28e <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 801a228:	4658      	mov	r0, fp
 801a22a:	e006      	b.n	801a23a <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 801a22c:	2900      	cmp	r1, #0
 801a22e:	d1fb      	bne.n	801a228 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801a230:	2a00      	cmp	r2, #0
 801a232:	d1f9      	bne.n	801a228 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801a234:	4558      	cmp	r0, fp
 801a236:	bfb8      	it	lt
 801a238:	4658      	movlt	r0, fp
 801a23a:	2200      	movs	r2, #0
 801a23c:	f9b9 3000 	ldrsh.w	r3, [r9]
 801a240:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 801a244:	f8b6 a000 	ldrh.w	sl, [r6]
 801a248:	ebac 0000 	sub.w	r0, ip, r0
 801a24c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801a250:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a254:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a258:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a25c:	4553      	cmp	r3, sl
 801a25e:	ddc5      	ble.n	801a1ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801a260:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a264:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a268:	ab0d      	add	r3, sp, #52	@ 0x34
 801a26a:	6851      	ldr	r1, [r2, #4]
 801a26c:	c303      	stmia	r3!, {r0, r1}
 801a26e:	a80d      	add	r0, sp, #52	@ 0x34
 801a270:	a90b      	add	r1, sp, #44	@ 0x2c
 801a272:	f7f9 fef1 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 801a276:	a80d      	add	r0, sp, #52	@ 0x34
 801a278:	f7f9 ff31 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a27c:	b920      	cbnz	r0, 801a288 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 801a27e:	6823      	ldr	r3, [r4, #0]
 801a280:	a90d      	add	r1, sp, #52	@ 0x34
 801a282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a284:	4620      	mov	r0, r4
 801a286:	4798      	blx	r3
 801a288:	f10a 0a01 	add.w	sl, sl, #1
 801a28c:	e7e4      	b.n	801a258 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 801a28e:	681a      	ldr	r2, [r3, #0]
 801a290:	2101      	movs	r1, #1
 801a292:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 801a296:	4618      	mov	r0, r3
 801a298:	4790      	blx	r2
 801a29a:	e7a7      	b.n	801a1ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801a29c:	4b39      	ldr	r3, [pc, #228]	@ (801a384 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 801a29e:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 801a380 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 801a2a2:	881f      	ldrh	r7, [r3, #0]
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	2f0f      	cmp	r7, #15
 801a2a8:	bf98      	it	ls
 801a2aa:	2701      	movls	r7, #1
 801a2ac:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 801a2b0:	bf88      	it	hi
 801a2b2:	08ff      	lsrhi	r7, r7, #3
 801a2b4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a2b8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 801a2bc:	6828      	ldr	r0, [r5, #0]
 801a2be:	4413      	add	r3, r2
 801a2c0:	b21b      	sxth	r3, r3
 801a2c2:	454b      	cmp	r3, r9
 801a2c4:	da60      	bge.n	801a388 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a2c6:	6803      	ldr	r3, [r0, #0]
 801a2c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a2cc:	4798      	blx	r3
 801a2ce:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 801a2d2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a2d6:	682a      	ldr	r2, [r5, #0]
 801a2d8:	4473      	add	r3, lr
 801a2da:	b21b      	sxth	r3, r3
 801a2dc:	eb03 0e07 	add.w	lr, r3, r7
 801a2e0:	4570      	cmp	r0, lr
 801a2e2:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 801a2e6:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 801a2ea:	da0d      	bge.n	801a308 <_ZN8touchgfx11Application15drawCachedAreasEv+0x298>
 801a2ec:	4548      	cmp	r0, r9
 801a2ee:	da0b      	bge.n	801a308 <_ZN8touchgfx11Application15drawCachedAreasEv+0x298>
 801a2f0:	f1bc 0f00 	cmp.w	ip, #0
 801a2f4:	d138      	bne.n	801a368 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a2f6:	2900      	cmp	r1, #0
 801a2f8:	d136      	bne.n	801a368 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a2fa:	6813      	ldr	r3, [r2, #0]
 801a2fc:	2101      	movs	r1, #1
 801a2fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801a302:	4610      	mov	r0, r2
 801a304:	4798      	blx	r3
 801a306:	e7d5      	b.n	801a2b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801a308:	f1bc 0f00 	cmp.w	ip, #0
 801a30c:	d12c      	bne.n	801a368 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a30e:	bb59      	cbnz	r1, 801a368 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801a310:	4548      	cmp	r0, r9
 801a312:	bfa8      	it	ge
 801a314:	4648      	movge	r0, r9
 801a316:	2100      	movs	r1, #0
 801a318:	f9b8 2000 	ldrsh.w	r2, [r8]
 801a31c:	1ac0      	subs	r0, r0, r3
 801a31e:	f8b6 a000 	ldrh.w	sl, [r6]
 801a322:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801a326:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a32a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801a32e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801a332:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a336:	4553      	cmp	r3, sl
 801a338:	ddbc      	ble.n	801a2b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801a33a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a33e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a342:	ab0d      	add	r3, sp, #52	@ 0x34
 801a344:	6851      	ldr	r1, [r2, #4]
 801a346:	c303      	stmia	r3!, {r0, r1}
 801a348:	a80d      	add	r0, sp, #52	@ 0x34
 801a34a:	a90b      	add	r1, sp, #44	@ 0x2c
 801a34c:	f7f9 fe84 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 801a350:	a80d      	add	r0, sp, #52	@ 0x34
 801a352:	f7f9 fec4 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a356:	b920      	cbnz	r0, 801a362 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801a358:	6823      	ldr	r3, [r4, #0]
 801a35a:	a90d      	add	r1, sp, #52	@ 0x34
 801a35c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a35e:	4620      	mov	r0, r4
 801a360:	4798      	blx	r3
 801a362:	f10a 0a01 	add.w	sl, sl, #1
 801a366:	e7e4      	b.n	801a332 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c2>
 801a368:	4648      	mov	r0, r9
 801a36a:	e7d4      	b.n	801a316 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a6>
 801a36c:	2005baa4 	.word	0x2005baa4
 801a370:	2005bae4 	.word	0x2005bae4
 801a374:	2005baf0 	.word	0x2005baf0
 801a378:	2000001c 	.word	0x2000001c
 801a37c:	2005ba9c 	.word	0x2005ba9c
 801a380:	2005ba98 	.word	0x2005ba98
 801a384:	2005ba9a 	.word	0x2005ba9a
 801a388:	6828      	ldr	r0, [r5, #0]
 801a38a:	6803      	ldr	r3, [r0, #0]
 801a38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a38e:	4798      	blx	r3
 801a390:	4ba4      	ldr	r3, [pc, #656]	@ (801a624 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 801a392:	781b      	ldrb	r3, [r3, #0]
 801a394:	2b00      	cmp	r3, #0
 801a396:	f43f aed2 	beq.w	801a13e <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 801a39a:	2300      	movs	r3, #0
 801a39c:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801a3a0:	4ba1      	ldr	r3, [pc, #644]	@ (801a628 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 801a3a2:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 801a3a6:	881b      	ldrh	r3, [r3, #0]
 801a3a8:	a80f      	add	r0, sp, #60	@ 0x3c
 801a3aa:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 801a3ae:	42b3      	cmp	r3, r6
 801a3b0:	f4bf aec5 	bcs.w	801a13e <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 801a3b4:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801a3b8:	2907      	cmp	r1, #7
 801a3ba:	d815      	bhi.n	801a3e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 801a3bc:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a3c0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801a3c4:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801a3c8:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801a3cc:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801a3d0:	1c4a      	adds	r2, r1, #1
 801a3d2:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801a3d6:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 801a3da:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 801a3de:	f8a2 e002 	strh.w	lr, [r2, #2]
 801a3e2:	f8a2 c004 	strh.w	ip, [r2, #4]
 801a3e6:	80d7      	strh	r7, [r2, #6]
 801a3e8:	3301      	adds	r3, #1
 801a3ea:	b29b      	uxth	r3, r3
 801a3ec:	e7df      	b.n	801a3ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 801a3ee:	2b02      	cmp	r3, #2
 801a3f0:	f040 80cf 	bne.w	801a592 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 801a3f4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801a3f8:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 801a3fc:	9308      	str	r3, [sp, #32]
 801a3fe:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 801a402:	f10b 37ff 	add.w	r7, fp, #4294967295
 801a406:	9307      	str	r3, [sp, #28]
 801a408:	6803      	ldr	r3, [r0, #0]
 801a40a:	b2bf      	uxth	r7, r7
 801a40c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a410:	4798      	blx	r3
 801a412:	4b86      	ldr	r3, [pc, #536]	@ (801a62c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 801a414:	4682      	mov	sl, r0
 801a416:	881b      	ldrh	r3, [r3, #0]
 801a418:	2000      	movs	r0, #0
 801a41a:	9302      	str	r3, [sp, #8]
 801a41c:	4b84      	ldr	r3, [pc, #528]	@ (801a630 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 801a41e:	fa0f f887 	sxth.w	r8, r7
 801a422:	881e      	ldrh	r6, [r3, #0]
 801a424:	4b83      	ldr	r3, [pc, #524]	@ (801a634 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801a426:	781b      	ldrb	r3, [r3, #0]
 801a428:	2b01      	cmp	r3, #1
 801a42a:	bf1e      	ittt	ne
 801a42c:	9b02      	ldrne	r3, [sp, #8]
 801a42e:	9602      	strne	r6, [sp, #8]
 801a430:	461e      	movne	r6, r3
 801a432:	f7f7 f89d 	bl	8011570 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a436:	fb96 fbfb 	sdiv	fp, r6, fp
 801a43a:	fb0b f808 	mul.w	r8, fp, r8
 801a43e:	45c2      	cmp	sl, r8
 801a440:	da0c      	bge.n	801a45c <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 801a442:	6828      	ldr	r0, [r5, #0]
 801a444:	210a      	movs	r1, #10
 801a446:	6803      	ldr	r3, [r0, #0]
 801a448:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801a44c:	4798      	blx	r3
 801a44e:	6828      	ldr	r0, [r5, #0]
 801a450:	6803      	ldr	r3, [r0, #0]
 801a452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a456:	4798      	blx	r3
 801a458:	4682      	mov	sl, r0
 801a45a:	e7f0      	b.n	801a43e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 801a45c:	f04f 0800 	mov.w	r8, #0
 801a460:	4645      	mov	r5, r8
 801a462:	2000      	movs	r0, #0
 801a464:	f7f7 f8a0 	bl	80115a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a468:	fa1f f38b 	uxth.w	r3, fp
 801a46c:	fb17 f703 	smulbb	r7, r7, r3
 801a470:	9304      	str	r3, [sp, #16]
 801a472:	b2bb      	uxth	r3, r7
 801a474:	9305      	str	r3, [sp, #20]
 801a476:	4f70      	ldr	r7, [pc, #448]	@ (801a638 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 801a478:	0973      	lsrs	r3, r6, #5
 801a47a:	9306      	str	r3, [sp, #24]
 801a47c:	42b5      	cmp	r5, r6
 801a47e:	d087      	beq.n	801a390 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a480:	6838      	ldr	r0, [r7, #0]
 801a482:	6803      	ldr	r3, [r0, #0]
 801a484:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a488:	4798      	blx	r3
 801a48a:	4582      	cmp	sl, r0
 801a48c:	4681      	mov	r9, r0
 801a48e:	d907      	bls.n	801a4a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 801a490:	f1b8 0f00 	cmp.w	r8, #0
 801a494:	d007      	beq.n	801a4a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 801a496:	6838      	ldr	r0, [r7, #0]
 801a498:	6803      	ldr	r3, [r0, #0]
 801a49a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a49e:	e776      	b.n	801a38e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801a4a0:	f1b8 0f00 	cmp.w	r8, #0
 801a4a4:	d003      	beq.n	801a4ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 801a4a6:	454d      	cmp	r5, r9
 801a4a8:	d3f5      	bcc.n	801a496 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 801a4aa:	f04f 0801 	mov.w	r8, #1
 801a4ae:	fb95 f3fb 	sdiv	r3, r5, fp
 801a4b2:	9a04      	ldr	r2, [sp, #16]
 801a4b4:	9303      	str	r3, [sp, #12]
 801a4b6:	3301      	adds	r3, #1
 801a4b8:	fb13 f302 	smulbb	r3, r3, r2
 801a4bc:	b299      	uxth	r1, r3
 801a4be:	f1b8 0f00 	cmp.w	r8, #0
 801a4c2:	d04e      	beq.n	801a562 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f2>
 801a4c4:	eb09 030b 	add.w	r3, r9, fp
 801a4c8:	42b3      	cmp	r3, r6
 801a4ca:	bfa8      	it	ge
 801a4cc:	4633      	movge	r3, r6
 801a4ce:	b29b      	uxth	r3, r3
 801a4d0:	428b      	cmp	r3, r1
 801a4d2:	bf94      	ite	ls
 801a4d4:	ebc5 0203 	rsbls	r2, r5, r3
 801a4d8:	ebc5 0201 	rsbhi	r2, r5, r1
 801a4dc:	9807      	ldr	r0, [sp, #28]
 801a4de:	4282      	cmp	r2, r0
 801a4e0:	bfa8      	it	ge
 801a4e2:	4602      	movge	r2, r0
 801a4e4:	9808      	ldr	r0, [sp, #32]
 801a4e6:	fa1f fa82 	uxth.w	sl, r2
 801a4ea:	4582      	cmp	sl, r0
 801a4ec:	d205      	bcs.n	801a4fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801a4ee:	fa15 f082 	uxtah	r0, r5, r2
 801a4f2:	4286      	cmp	r6, r0
 801a4f4:	d001      	beq.n	801a4fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801a4f6:	4299      	cmp	r1, r3
 801a4f8:	d240      	bcs.n	801a57c <_ZN8touchgfx11Application15drawCachedAreasEv+0x50c>
 801a4fa:	2001      	movs	r0, #1
 801a4fc:	9209      	str	r2, [sp, #36]	@ 0x24
 801a4fe:	f7f7 f837 	bl	8011570 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a502:	6838      	ldr	r0, [r7, #0]
 801a504:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 801a508:	6803      	ldr	r3, [r0, #0]
 801a50a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801a50e:	4798      	blx	r3
 801a510:	4b48      	ldr	r3, [pc, #288]	@ (801a634 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801a512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a514:	781b      	ldrb	r3, [r3, #0]
 801a516:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801a51a:	2b01      	cmp	r3, #1
 801a51c:	b212      	sxth	r2, r2
 801a51e:	f04f 0000 	mov.w	r0, #0
 801a522:	d122      	bne.n	801a56a <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fa>
 801a524:	1b73      	subs	r3, r6, r5
 801a526:	eba3 030a 	sub.w	r3, r3, sl
 801a52a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801a52e:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 801a532:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801a536:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 801a53a:	6823      	ldr	r3, [r4, #0]
 801a53c:	a90d      	add	r1, sp, #52	@ 0x34
 801a53e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a540:	4620      	mov	r0, r4
 801a542:	4798      	blx	r3
 801a544:	6838      	ldr	r0, [r7, #0]
 801a546:	9b03      	ldr	r3, [sp, #12]
 801a548:	4455      	add	r5, sl
 801a54a:	4259      	negs	r1, r3
 801a54c:	6803      	ldr	r3, [r0, #0]
 801a54e:	b209      	sxth	r1, r1
 801a550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801a554:	4798      	blx	r3
 801a556:	2001      	movs	r0, #1
 801a558:	b2ad      	uxth	r5, r5
 801a55a:	f7f7 f825 	bl	80115a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a55e:	46ca      	mov	sl, r9
 801a560:	e78c      	b.n	801a47c <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 801a562:	9b05      	ldr	r3, [sp, #20]
 801a564:	eba9 0303 	sub.w	r3, r9, r3
 801a568:	e7b1      	b.n	801a4ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801a56a:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 801a56e:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 801a572:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 801a576:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 801a57a:	e7de      	b.n	801a53a <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ca>
 801a57c:	6838      	ldr	r0, [r7, #0]
 801a57e:	6803      	ldr	r3, [r0, #0]
 801a580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a582:	4798      	blx	r3
 801a584:	6838      	ldr	r0, [r7, #0]
 801a586:	9906      	ldr	r1, [sp, #24]
 801a588:	6803      	ldr	r3, [r0, #0]
 801a58a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801a58e:	4798      	blx	r3
 801a590:	e7e5      	b.n	801a55e <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ee>
 801a592:	2b03      	cmp	r3, #3
 801a594:	f040 8130 	bne.w	801a7f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x788>
 801a598:	4b26      	ldr	r3, [pc, #152]	@ (801a634 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801a59a:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 801a59e:	781b      	ldrb	r3, [r3, #0]
 801a5a0:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801a5a4:	2b01      	cmp	r3, #1
 801a5a6:	f000 8093 	beq.w	801a6d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801a5aa:	8832      	ldrh	r2, [r6, #0]
 801a5ac:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801a5b0:	3201      	adds	r2, #1
 801a5b2:	b292      	uxth	r2, r2
 801a5b4:	2900      	cmp	r1, #0
 801a5b6:	f43f aeeb 	beq.w	801a390 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a5ba:	4694      	mov	ip, r2
 801a5bc:	f04f 0800 	mov.w	r8, #0
 801a5c0:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 801a5c4:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 801a5c8:	441d      	add	r5, r3
 801a5ca:	b22d      	sxth	r5, r5
 801a5cc:	fa1f f38c 	uxth.w	r3, ip
 801a5d0:	4299      	cmp	r1, r3
 801a5d2:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801a5d6:	f240 80ba 	bls.w	801a74e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6de>
 801a5da:	4427      	add	r7, r4
 801a5dc:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801a5e0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801a5e4:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801a5e8:	4283      	cmp	r3, r0
 801a5ea:	f340 809c 	ble.w	801a726 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b6>
 801a5ee:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 801a5f2:	46e0      	mov	r8, ip
 801a5f4:	4405      	add	r5, r0
 801a5f6:	b22d      	sxth	r5, r5
 801a5f8:	429d      	cmp	r5, r3
 801a5fa:	bfa8      	it	ge
 801a5fc:	461d      	movge	r5, r3
 801a5fe:	f10c 0c01 	add.w	ip, ip, #1
 801a602:	e7e3      	b.n	801a5cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>
 801a604:	d10a      	bne.n	801a61c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5ac>
 801a606:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 801a60a:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801a60e:	4562      	cmp	r2, ip
 801a610:	bfb8      	it	lt
 801a612:	4662      	movlt	r2, ip
 801a614:	4288      	cmp	r0, r1
 801a616:	bfb8      	it	lt
 801a618:	4698      	movlt	r8, r3
 801a61a:	e082      	b.n	801a722 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 801a61c:	428a      	cmp	r2, r1
 801a61e:	bfb8      	it	lt
 801a620:	460a      	movlt	r2, r1
 801a622:	e07e      	b.n	801a722 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 801a624:	2005baa2 	.word	0x2005baa2
 801a628:	2000001c 	.word	0x2000001c
 801a62c:	2005ba9a 	.word	0x2005ba9a
 801a630:	2005ba98 	.word	0x2005ba98
 801a634:	2005ba9c 	.word	0x2005ba9c
 801a638:	2005baa4 	.word	0x2005baa4
 801a63c:	19e1      	adds	r1, r4, r7
 801a63e:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801a642:	ab0d      	add	r3, sp, #52	@ 0x34
 801a644:	6849      	ldr	r1, [r1, #4]
 801a646:	c303      	stmia	r3!, {r0, r1}
 801a648:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 801a64c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a650:	454b      	cmp	r3, r9
 801a652:	bfb8      	it	lt
 801a654:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 801a658:	440b      	add	r3, r1
 801a65a:	1a9b      	subs	r3, r3, r2
 801a65c:	a80d      	add	r0, sp, #52	@ 0x34
 801a65e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801a662:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801a666:	f7fe fe8d 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a66a:	a80d      	add	r0, sp, #52	@ 0x34
 801a66c:	f7f9 fd37 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a670:	bb70      	cbnz	r0, 801a6d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801a672:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 801a676:	6828      	ldr	r0, [r5, #0]
 801a678:	45cc      	cmp	ip, r9
 801a67a:	f8d0 e000 	ldr.w	lr, [r0]
 801a67e:	bfd4      	ite	le
 801a680:	fa1f fc8c 	uxthle.w	ip, ip
 801a684:	fa1f fc89 	uxthgt.w	ip, r9
 801a688:	f8cd c000 	str.w	ip, [sp]
 801a68c:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 801a690:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a694:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801a698:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a69c:	47d8      	blx	fp
 801a69e:	4683      	mov	fp, r0
 801a6a0:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801a6a4:	a80d      	add	r0, sp, #52	@ 0x34
 801a6a6:	f7fe fe53 	bl	8019350 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a6aa:	6823      	ldr	r3, [r4, #0]
 801a6ac:	4620      	mov	r0, r4
 801a6ae:	4427      	add	r7, r4
 801a6b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a6b2:	a90d      	add	r1, sp, #52	@ 0x34
 801a6b4:	4798      	blx	r3
 801a6b6:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 801a6ba:	eba0 000b 	sub.w	r0, r0, fp
 801a6be:	b200      	sxth	r0, r0
 801a6c0:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 801a6c4:	b920      	cbnz	r0, 801a6d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801a6c6:	fa1f f188 	uxth.w	r1, r8
 801a6ca:	4650      	mov	r0, sl
 801a6cc:	f7ff f93e 	bl	801994c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a6d0:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801a6d4:	f1bb 0f00 	cmp.w	fp, #0
 801a6d8:	f43f ae5a 	beq.w	801a390 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a6dc:	f04f 0800 	mov.w	r8, #0
 801a6e0:	8833      	ldrh	r3, [r6, #0]
 801a6e2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	b29b      	uxth	r3, r3
 801a6ea:	b299      	uxth	r1, r3
 801a6ec:	458b      	cmp	fp, r1
 801a6ee:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801a6f2:	d9a3      	bls.n	801a63c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 801a6f4:	4427      	add	r7, r4
 801a6f6:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 801a6fa:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 801a6fe:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801a702:	4408      	add	r0, r1
 801a704:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801a708:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801a70c:	b200      	sxth	r0, r0
 801a70e:	4461      	add	r1, ip
 801a710:	b209      	sxth	r1, r1
 801a712:	4288      	cmp	r0, r1
 801a714:	f6bf af76 	bge.w	801a604 <_ZN8touchgfx11Application15drawCachedAreasEv+0x594>
 801a718:	4584      	cmp	ip, r0
 801a71a:	4662      	mov	r2, ip
 801a71c:	4698      	mov	r8, r3
 801a71e:	bfb8      	it	lt
 801a720:	4602      	movlt	r2, r0
 801a722:	3301      	adds	r3, #1
 801a724:	e7e1      	b.n	801a6ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x67a>
 801a726:	d10e      	bne.n	801a746 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d6>
 801a728:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801a72c:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801a730:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801a734:	4473      	add	r3, lr
 801a736:	b21b      	sxth	r3, r3
 801a738:	429d      	cmp	r5, r3
 801a73a:	bfa8      	it	ge
 801a73c:	461d      	movge	r5, r3
 801a73e:	4287      	cmp	r7, r0
 801a740:	bfb8      	it	lt
 801a742:	46e0      	movlt	r8, ip
 801a744:	e75b      	b.n	801a5fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 801a746:	4285      	cmp	r5, r0
 801a748:	bfa8      	it	ge
 801a74a:	4605      	movge	r5, r0
 801a74c:	e757      	b.n	801a5fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 801a74e:	eb0a 0007 	add.w	r0, sl, r7
 801a752:	4427      	add	r7, r4
 801a754:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801a758:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a75c:	45cb      	cmp	fp, r9
 801a75e:	bfbe      	ittt	lt
 801a760:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 801a764:	445d      	addlt	r5, fp
 801a766:	b22d      	sxthlt	r5, r5
 801a768:	f7f9 fcb9 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a76c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a770:	2800      	cmp	r0, #0
 801a772:	f47f af1f 	bne.w	801a5b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x544>
 801a776:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801a77a:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801a77e:	1aad      	subs	r5, r5, r2
 801a780:	454d      	cmp	r5, r9
 801a782:	bfa8      	it	ge
 801a784:	464d      	movge	r5, r9
 801a786:	4829      	ldr	r0, [pc, #164]	@ (801a82c <_ZN8touchgfx11Application15drawCachedAreasEv+0x7bc>)
 801a788:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801a78c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801a790:	6800      	ldr	r0, [r0, #0]
 801a792:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 801a796:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801a79a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801a79e:	f8d0 c000 	ldr.w	ip, [r0]
 801a7a2:	b2ad      	uxth	r5, r5
 801a7a4:	fa1f fb8b 	uxth.w	fp, fp
 801a7a8:	455d      	cmp	r5, fp
 801a7aa:	bf94      	ite	ls
 801a7ac:	9500      	strls	r5, [sp, #0]
 801a7ae:	f8cd b000 	strhi.w	fp, [sp]
 801a7b2:	b292      	uxth	r2, r2
 801a7b4:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 801a7b8:	b29b      	uxth	r3, r3
 801a7ba:	b289      	uxth	r1, r1
 801a7bc:	47a8      	blx	r5
 801a7be:	6823      	ldr	r3, [r4, #0]
 801a7c0:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801a7c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a7c6:	a90d      	add	r1, sp, #52	@ 0x34
 801a7c8:	4620      	mov	r0, r4
 801a7ca:	4798      	blx	r3
 801a7cc:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 801a7d0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a7d4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801a7d8:	1a5b      	subs	r3, r3, r1
 801a7da:	440a      	add	r2, r1
 801a7dc:	b21b      	sxth	r3, r3
 801a7de:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801a7e2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	f47f aedf 	bne.w	801a5aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 801a7ec:	fa1f f188 	uxth.w	r1, r8
 801a7f0:	4650      	mov	r0, sl
 801a7f2:	f7ff f8ab 	bl	801994c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a7f6:	e6d8      	b.n	801a5aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 801a7f8:	8835      	ldrh	r5, [r6, #0]
 801a7fa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a7fe:	42ab      	cmp	r3, r5
 801a800:	f67f adc6 	bls.w	801a390 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801a804:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801a808:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a80c:	ab0d      	add	r3, sp, #52	@ 0x34
 801a80e:	6851      	ldr	r1, [r2, #4]
 801a810:	c303      	stmia	r3!, {r0, r1}
 801a812:	a80d      	add	r0, sp, #52	@ 0x34
 801a814:	f7f9 fc63 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a818:	b920      	cbnz	r0, 801a824 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b4>
 801a81a:	6823      	ldr	r3, [r4, #0]
 801a81c:	a90d      	add	r1, sp, #52	@ 0x34
 801a81e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a820:	4620      	mov	r0, r4
 801a822:	4798      	blx	r3
 801a824:	3501      	adds	r5, #1
 801a826:	b2ad      	uxth	r5, r5
 801a828:	e7e7      	b.n	801a7fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x78a>
 801a82a:	bf00      	nop
 801a82c:	2005baa4 	.word	0x2005baa4

0801a830 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801a830:	2200      	movs	r2, #0
 801a832:	4b03      	ldr	r3, [pc, #12]	@ (801a840 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801a834:	801a      	strh	r2, [r3, #0]
 801a836:	805a      	strh	r2, [r3, #2]
 801a838:	809a      	strh	r2, [r3, #4]
 801a83a:	80da      	strh	r2, [r3, #6]
 801a83c:	4770      	bx	lr
 801a83e:	bf00      	nop
 801a840:	2005baf0 	.word	0x2005baf0

0801a844 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a848:	4606      	mov	r6, r0
 801a84a:	b09d      	sub	sp, #116	@ 0x74
 801a84c:	a803      	add	r0, sp, #12
 801a84e:	4614      	mov	r4, r2
 801a850:	468a      	mov	sl, r1
 801a852:	461d      	mov	r5, r3
 801a854:	f001 f985 	bl	801bb62 <_ZN8touchgfx12TextProviderC1Ev>
 801a858:	6833      	ldr	r3, [r6, #0]
 801a85a:	4630      	mov	r0, r6
 801a85c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a85e:	4798      	blx	r3
 801a860:	6833      	ldr	r3, [r6, #0]
 801a862:	4607      	mov	r7, r0
 801a864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a866:	4630      	mov	r0, r6
 801a868:	4798      	blx	r3
 801a86a:	462a      	mov	r2, r5
 801a86c:	2500      	movs	r5, #0
 801a86e:	9000      	str	r0, [sp, #0]
 801a870:	4621      	mov	r1, r4
 801a872:	463b      	mov	r3, r7
 801a874:	a803      	add	r0, sp, #12
 801a876:	f001 f9c7 	bl	801bc08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a87a:	462c      	mov	r4, r5
 801a87c:	46a9      	mov	r9, r5
 801a87e:	46a8      	mov	r8, r5
 801a880:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801a884:	2300      	movs	r3, #0
 801a886:	9302      	str	r3, [sp, #8]
 801a888:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a88c:	429c      	cmp	r4, r3
 801a88e:	d002      	beq.n	801a896 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a890:	455c      	cmp	r4, fp
 801a892:	bf18      	it	ne
 801a894:	4625      	movne	r5, r4
 801a896:	ab02      	add	r3, sp, #8
 801a898:	4632      	mov	r2, r6
 801a89a:	4651      	mov	r1, sl
 801a89c:	a803      	add	r0, sp, #12
 801a89e:	f001 fccf 	bl	801c240 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a8a2:	4604      	mov	r4, r0
 801a8a4:	b108      	cbz	r0, 801a8aa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801a8a6:	280a      	cmp	r0, #10
 801a8a8:	d10a      	bne.n	801a8c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801a8aa:	45c1      	cmp	r9, r8
 801a8ac:	bf38      	it	cc
 801a8ae:	46c1      	movcc	r9, r8
 801a8b0:	f04f 0800 	mov.w	r8, #0
 801a8b4:	2c00      	cmp	r4, #0
 801a8b6:	d1e5      	bne.n	801a884 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a8b8:	4648      	mov	r0, r9
 801a8ba:	b01d      	add	sp, #116	@ 0x74
 801a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8c0:	9a02      	ldr	r2, [sp, #8]
 801a8c2:	2a00      	cmp	r2, #0
 801a8c4:	d0de      	beq.n	801a884 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a8c6:	7b57      	ldrb	r7, [r2, #13]
 801a8c8:	6833      	ldr	r3, [r6, #0]
 801a8ca:	007f      	lsls	r7, r7, #1
 801a8cc:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801a8d0:	7a97      	ldrb	r7, [r2, #10]
 801a8d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a8d4:	4307      	orrs	r7, r0
 801a8d6:	4629      	mov	r1, r5
 801a8d8:	4630      	mov	r0, r6
 801a8da:	8894      	ldrh	r4, [r2, #4]
 801a8dc:	4798      	blx	r3
 801a8de:	4438      	add	r0, r7
 801a8e0:	4480      	add	r8, r0
 801a8e2:	fa1f f888 	uxth.w	r8, r8
 801a8e6:	e7e5      	b.n	801a8b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801a8e8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a8e8:	b508      	push	{r3, lr}
 801a8ea:	6803      	ldr	r3, [r0, #0]
 801a8ec:	68db      	ldr	r3, [r3, #12]
 801a8ee:	4798      	blx	r3
 801a8f0:	b128      	cbz	r0, 801a8fe <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801a8f2:	7b43      	ldrb	r3, [r0, #13]
 801a8f4:	7a80      	ldrb	r0, [r0, #10]
 801a8f6:	005b      	lsls	r3, r3, #1
 801a8f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a8fc:	4318      	orrs	r0, r3
 801a8fe:	bd08      	pop	{r3, pc}

0801a900 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a900:	b40e      	push	{r1, r2, r3}
 801a902:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a904:	4605      	mov	r5, r0
 801a906:	b09e      	sub	sp, #120	@ 0x78
 801a908:	ab23      	add	r3, sp, #140	@ 0x8c
 801a90a:	f853 4b04 	ldr.w	r4, [r3], #4
 801a90e:	a805      	add	r0, sp, #20
 801a910:	9303      	str	r3, [sp, #12]
 801a912:	f001 f926 	bl	801bb62 <_ZN8touchgfx12TextProviderC1Ev>
 801a916:	682b      	ldr	r3, [r5, #0]
 801a918:	4628      	mov	r0, r5
 801a91a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a91c:	4798      	blx	r3
 801a91e:	682b      	ldr	r3, [r5, #0]
 801a920:	4606      	mov	r6, r0
 801a922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a924:	4628      	mov	r0, r5
 801a926:	4798      	blx	r3
 801a928:	4621      	mov	r1, r4
 801a92a:	2400      	movs	r4, #0
 801a92c:	4633      	mov	r3, r6
 801a92e:	9000      	str	r0, [sp, #0]
 801a930:	9a03      	ldr	r2, [sp, #12]
 801a932:	ae1e      	add	r6, sp, #120	@ 0x78
 801a934:	a805      	add	r0, sp, #20
 801a936:	f001 f967 	bl	801bc08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a93a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801a93e:	4633      	mov	r3, r6
 801a940:	462a      	mov	r2, r5
 801a942:	4621      	mov	r1, r4
 801a944:	a805      	add	r0, sp, #20
 801a946:	f001 fc7b 	bl	801c240 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a94a:	b1f0      	cbz	r0, 801a98a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801a94c:	280a      	cmp	r0, #10
 801a94e:	d018      	beq.n	801a982 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801a950:	9f04      	ldr	r7, [sp, #16]
 801a952:	b1b7      	cbz	r7, 801a982 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801a954:	7b78      	ldrb	r0, [r7, #13]
 801a956:	7a3b      	ldrb	r3, [r7, #8]
 801a958:	00c1      	lsls	r1, r0, #3
 801a95a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801a95e:	4319      	orrs	r1, r3
 801a960:	0643      	lsls	r3, r0, #25
 801a962:	bf44      	itt	mi
 801a964:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801a968:	b219      	sxthmi	r1, r3
 801a96a:	0100      	lsls	r0, r0, #4
 801a96c:	79fb      	ldrb	r3, [r7, #7]
 801a96e:	88ea      	ldrh	r2, [r5, #6]
 801a970:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801a974:	4303      	orrs	r3, r0
 801a976:	4413      	add	r3, r2
 801a978:	1a5b      	subs	r3, r3, r1
 801a97a:	b21b      	sxth	r3, r3
 801a97c:	429c      	cmp	r4, r3
 801a97e:	bfb8      	it	lt
 801a980:	461c      	movlt	r4, r3
 801a982:	4633      	mov	r3, r6
 801a984:	462a      	mov	r2, r5
 801a986:	2100      	movs	r1, #0
 801a988:	e7dc      	b.n	801a944 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801a98a:	b2a0      	uxth	r0, r4
 801a98c:	b01e      	add	sp, #120	@ 0x78
 801a98e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a992:	b003      	add	sp, #12
 801a994:	4770      	bx	lr

0801a996 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801a996:	7a43      	ldrb	r3, [r0, #9]
 801a998:	8880      	ldrh	r0, [r0, #4]
 801a99a:	4418      	add	r0, r3
 801a99c:	b280      	uxth	r0, r0
 801a99e:	4770      	bx	lr

0801a9a0 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801a9a0:	6803      	ldr	r3, [r0, #0]
 801a9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a9a4:	4718      	bx	r3

0801a9a6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a9a6:	b40e      	push	{r1, r2, r3}
 801a9a8:	b570      	push	{r4, r5, r6, lr}
 801a9aa:	4604      	mov	r4, r0
 801a9ac:	b09d      	sub	sp, #116	@ 0x74
 801a9ae:	ab21      	add	r3, sp, #132	@ 0x84
 801a9b0:	f853 5b04 	ldr.w	r5, [r3], #4
 801a9b4:	a803      	add	r0, sp, #12
 801a9b6:	9302      	str	r3, [sp, #8]
 801a9b8:	f001 f8d3 	bl	801bb62 <_ZN8touchgfx12TextProviderC1Ev>
 801a9bc:	6823      	ldr	r3, [r4, #0]
 801a9be:	4620      	mov	r0, r4
 801a9c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a9c2:	4798      	blx	r3
 801a9c4:	6823      	ldr	r3, [r4, #0]
 801a9c6:	4606      	mov	r6, r0
 801a9c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a9ca:	4620      	mov	r0, r4
 801a9cc:	4798      	blx	r3
 801a9ce:	4633      	mov	r3, r6
 801a9d0:	9000      	str	r0, [sp, #0]
 801a9d2:	9a02      	ldr	r2, [sp, #8]
 801a9d4:	4629      	mov	r1, r5
 801a9d6:	a803      	add	r0, sp, #12
 801a9d8:	f001 f916 	bl	801bc08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a9dc:	a803      	add	r0, sp, #12
 801a9de:	f001 fcb1 	bl	801c344 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a9e2:	2401      	movs	r4, #1
 801a9e4:	b2a3      	uxth	r3, r4
 801a9e6:	b140      	cbz	r0, 801a9fa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801a9e8:	280a      	cmp	r0, #10
 801a9ea:	bf08      	it	eq
 801a9ec:	3301      	addeq	r3, #1
 801a9ee:	a803      	add	r0, sp, #12
 801a9f0:	bf08      	it	eq
 801a9f2:	b21c      	sxtheq	r4, r3
 801a9f4:	f001 fca6 	bl	801c344 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a9f8:	e7f4      	b.n	801a9e4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	b01d      	add	sp, #116	@ 0x74
 801a9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa02:	b003      	add	sp, #12
 801aa04:	4770      	bx	lr

0801aa06 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801aa06:	b40e      	push	{r1, r2, r3}
 801aa08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa0a:	4604      	mov	r4, r0
 801aa0c:	b09e      	sub	sp, #120	@ 0x78
 801aa0e:	ab23      	add	r3, sp, #140	@ 0x8c
 801aa10:	f853 5b04 	ldr.w	r5, [r3], #4
 801aa14:	a805      	add	r0, sp, #20
 801aa16:	9303      	str	r3, [sp, #12]
 801aa18:	f001 f8a3 	bl	801bb62 <_ZN8touchgfx12TextProviderC1Ev>
 801aa1c:	6823      	ldr	r3, [r4, #0]
 801aa1e:	4620      	mov	r0, r4
 801aa20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aa22:	4798      	blx	r3
 801aa24:	6823      	ldr	r3, [r4, #0]
 801aa26:	4606      	mov	r6, r0
 801aa28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aa2a:	4620      	mov	r0, r4
 801aa2c:	4798      	blx	r3
 801aa2e:	4633      	mov	r3, r6
 801aa30:	4629      	mov	r1, r5
 801aa32:	9000      	str	r0, [sp, #0]
 801aa34:	9a03      	ldr	r2, [sp, #12]
 801aa36:	a805      	add	r0, sp, #20
 801aa38:	f001 f8e6 	bl	801bc08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801aa3c:	2100      	movs	r1, #0
 801aa3e:	ad1e      	add	r5, sp, #120	@ 0x78
 801aa40:	f845 1d68 	str.w	r1, [r5, #-104]!
 801aa44:	462b      	mov	r3, r5
 801aa46:	4622      	mov	r2, r4
 801aa48:	a805      	add	r0, sp, #20
 801aa4a:	f001 fbf9 	bl	801c240 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aa4e:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801aa52:	b1d8      	cbz	r0, 801aa8c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801aa54:	280a      	cmp	r0, #10
 801aa56:	d012      	beq.n	801aa7e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801aa58:	9804      	ldr	r0, [sp, #16]
 801aa5a:	b180      	cbz	r0, 801aa7e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801aa5c:	7b47      	ldrb	r7, [r0, #13]
 801aa5e:	88e2      	ldrh	r2, [r4, #6]
 801aa60:	00fb      	lsls	r3, r7, #3
 801aa62:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801aa66:	7a03      	ldrb	r3, [r0, #8]
 801aa68:	430b      	orrs	r3, r1
 801aa6a:	0679      	lsls	r1, r7, #25
 801aa6c:	bf44      	itt	mi
 801aa6e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801aa72:	b21b      	sxthmi	r3, r3
 801aa74:	1ad3      	subs	r3, r2, r3
 801aa76:	b21b      	sxth	r3, r3
 801aa78:	429e      	cmp	r6, r3
 801aa7a:	bfa8      	it	ge
 801aa7c:	461e      	movge	r6, r3
 801aa7e:	462b      	mov	r3, r5
 801aa80:	4622      	mov	r2, r4
 801aa82:	2100      	movs	r1, #0
 801aa84:	a805      	add	r0, sp, #20
 801aa86:	f001 fbdb 	bl	801c240 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aa8a:	e7e2      	b.n	801aa52 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801aa8c:	4630      	mov	r0, r6
 801aa8e:	b01e      	add	sp, #120	@ 0x78
 801aa90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aa94:	b003      	add	sp, #12
 801aa96:	4770      	bx	lr

0801aa98 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801aa98:	b513      	push	{r0, r1, r4, lr}
 801aa9a:	2400      	movs	r4, #0
 801aa9c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801aaa0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801aaa4:	6803      	ldr	r3, [r0, #0]
 801aaa6:	f8ad 1004 	strh.w	r1, [sp, #4]
 801aaaa:	9400      	str	r4, [sp, #0]
 801aaac:	f8ad 2006 	strh.w	r2, [sp, #6]
 801aab0:	691b      	ldr	r3, [r3, #16]
 801aab2:	4669      	mov	r1, sp
 801aab4:	4798      	blx	r3
 801aab6:	b002      	add	sp, #8
 801aab8:	bd10      	pop	{r4, pc}

0801aaba <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801aaba:	b538      	push	{r3, r4, r5, lr}
 801aabc:	460c      	mov	r4, r1
 801aabe:	4605      	mov	r5, r0
 801aac0:	680b      	ldr	r3, [r1, #0]
 801aac2:	68db      	ldr	r3, [r3, #12]
 801aac4:	4798      	blx	r3
 801aac6:	6823      	ldr	r3, [r4, #0]
 801aac8:	4620      	mov	r0, r4
 801aaca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aacc:	4629      	mov	r1, r5
 801aace:	4798      	blx	r3
 801aad0:	4628      	mov	r0, r5
 801aad2:	bd38      	pop	{r3, r4, r5, pc}

0801aad4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801aad4:	b410      	push	{r4}
 801aad6:	880a      	ldrh	r2, [r1, #0]
 801aad8:	8884      	ldrh	r4, [r0, #4]
 801aada:	4422      	add	r2, r4
 801aadc:	800a      	strh	r2, [r1, #0]
 801aade:	88c4      	ldrh	r4, [r0, #6]
 801aae0:	884a      	ldrh	r2, [r1, #2]
 801aae2:	4422      	add	r2, r4
 801aae4:	804a      	strh	r2, [r1, #2]
 801aae6:	6940      	ldr	r0, [r0, #20]
 801aae8:	b120      	cbz	r0, 801aaf4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801aaea:	6803      	ldr	r3, [r0, #0]
 801aaec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aaf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aaf2:	4718      	bx	r3
 801aaf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aaf8:	4770      	bx	lr

0801aafa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801aafa:	b570      	push	{r4, r5, r6, lr}
 801aafc:	460c      	mov	r4, r1
 801aafe:	8882      	ldrh	r2, [r0, #4]
 801ab00:	880b      	ldrh	r3, [r1, #0]
 801ab02:	4605      	mov	r5, r0
 801ab04:	4413      	add	r3, r2
 801ab06:	800b      	strh	r3, [r1, #0]
 801ab08:	88c2      	ldrh	r2, [r0, #6]
 801ab0a:	884b      	ldrh	r3, [r1, #2]
 801ab0c:	4413      	add	r3, r2
 801ab0e:	804b      	strh	r3, [r1, #2]
 801ab10:	1d01      	adds	r1, r0, #4
 801ab12:	4620      	mov	r0, r4
 801ab14:	f7f9 faa0 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 801ab18:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	dd0b      	ble.n	801ab38 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ab20:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	dd07      	ble.n	801ab38 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ab28:	6968      	ldr	r0, [r5, #20]
 801ab2a:	b128      	cbz	r0, 801ab38 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ab2c:	6803      	ldr	r3, [r0, #0]
 801ab2e:	4621      	mov	r1, r4
 801ab30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ab36:	4718      	bx	r3
 801ab38:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ab3c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ab3c:	b570      	push	{r4, r5, r6, lr}
 801ab3e:	460c      	mov	r4, r1
 801ab40:	8882      	ldrh	r2, [r0, #4]
 801ab42:	880b      	ldrh	r3, [r1, #0]
 801ab44:	4605      	mov	r5, r0
 801ab46:	4413      	add	r3, r2
 801ab48:	800b      	strh	r3, [r1, #0]
 801ab4a:	88c2      	ldrh	r2, [r0, #6]
 801ab4c:	884b      	ldrh	r3, [r1, #2]
 801ab4e:	4413      	add	r3, r2
 801ab50:	804b      	strh	r3, [r1, #2]
 801ab52:	1d01      	adds	r1, r0, #4
 801ab54:	4620      	mov	r0, r4
 801ab56:	f7f9 fa7f 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 801ab5a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	dd19      	ble.n	801ab96 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ab62:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	dd15      	ble.n	801ab96 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ab6a:	6968      	ldr	r0, [r5, #20]
 801ab6c:	b128      	cbz	r0, 801ab7a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801ab6e:	6803      	ldr	r3, [r0, #0]
 801ab70:	4621      	mov	r1, r4
 801ab72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab76:	691b      	ldr	r3, [r3, #16]
 801ab78:	4718      	bx	r3
 801ab7a:	4b07      	ldr	r3, [pc, #28]	@ (801ab98 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	3304      	adds	r3, #4
 801ab80:	429d      	cmp	r5, r3
 801ab82:	d108      	bne.n	801ab96 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ab84:	f7fe fd8c 	bl	80196a0 <_ZN8touchgfx11Application11getInstanceEv>
 801ab88:	6803      	ldr	r3, [r0, #0]
 801ab8a:	6821      	ldr	r1, [r4, #0]
 801ab8c:	6862      	ldr	r2, [r4, #4]
 801ab8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ab90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab94:	4718      	bx	r3
 801ab96:	bd70      	pop	{r4, r5, r6, pc}
 801ab98:	2005bae8 	.word	0x2005bae8

0801ab9c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ab9c:	b570      	push	{r4, r5, r6, lr}
 801ab9e:	4604      	mov	r4, r0
 801aba0:	4616      	mov	r6, r2
 801aba2:	460d      	mov	r5, r1
 801aba4:	b901      	cbnz	r1, 801aba8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801aba6:	b192      	cbz	r2, 801abce <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801aba8:	6823      	ldr	r3, [r4, #0]
 801abaa:	4620      	mov	r0, r4
 801abac:	699b      	ldr	r3, [r3, #24]
 801abae:	4798      	blx	r3
 801abb0:	88e2      	ldrh	r2, [r4, #6]
 801abb2:	88a1      	ldrh	r1, [r4, #4]
 801abb4:	4432      	add	r2, r6
 801abb6:	4429      	add	r1, r5
 801abb8:	4620      	mov	r0, r4
 801abba:	b212      	sxth	r2, r2
 801abbc:	b209      	sxth	r1, r1
 801abbe:	f7f5 fc98 	bl	80104f2 <_ZN8touchgfx8Drawable5setXYEss>
 801abc2:	6823      	ldr	r3, [r4, #0]
 801abc4:	4620      	mov	r0, r4
 801abc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abca:	699b      	ldr	r3, [r3, #24]
 801abcc:	4718      	bx	r3
 801abce:	bd70      	pop	{r4, r5, r6, pc}

0801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801abd0:	b510      	push	{r4, lr}
 801abd2:	2300      	movs	r3, #0
 801abd4:	4604      	mov	r4, r0
 801abd6:	4608      	mov	r0, r1
 801abd8:	8023      	strh	r3, [r4, #0]
 801abda:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801abde:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801abe2:	8063      	strh	r3, [r4, #2]
 801abe4:	6803      	ldr	r3, [r0, #0]
 801abe6:	80a1      	strh	r1, [r4, #4]
 801abe8:	80e2      	strh	r2, [r4, #6]
 801abea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801abec:	4621      	mov	r1, r4
 801abee:	4798      	blx	r3
 801abf0:	4620      	mov	r0, r4
 801abf2:	bd10      	pop	{r4, pc}

0801abf4 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801abf4:	4a04      	ldr	r2, [pc, #16]	@ (801ac08 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801abf6:	6002      	str	r2, [r0, #0]
 801abf8:	2200      	movs	r2, #0
 801abfa:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801abfe:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801ac02:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801ac06:	4770      	bx	lr
 801ac08:	0802f9dc 	.word	0x0802f9dc

0801ac0c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac10:	4604      	mov	r4, r0
 801ac12:	b087      	sub	sp, #28
 801ac14:	8b45      	ldrh	r5, [r0, #26]
 801ac16:	f8b2 c000 	ldrh.w	ip, [r2]
 801ac1a:	9105      	str	r1, [sp, #20]
 801ac1c:	68e1      	ldr	r1, [r4, #12]
 801ac1e:	1c68      	adds	r0, r5, #1
 801ac20:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801ac24:	f01c 0501 	ands.w	r5, ip, #1
 801ac28:	9203      	str	r2, [sp, #12]
 801ac2a:	b280      	uxth	r0, r0
 801ac2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ac30:	9502      	str	r5, [sp, #8]
 801ac32:	d07d      	beq.n	801ad30 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 801ac34:	ee07 2a90 	vmov	s15, r2
 801ac38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ac3c:	8360      	strh	r0, [r4, #26]
 801ac3e:	edc1 6a00 	vstr	s13, [r1]
 801ac42:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ac46:	f04f 0e00 	mov.w	lr, #0
 801ac4a:	ee07 2a10 	vmov	s14, r2
 801ac4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ac52:	8b61      	ldrh	r1, [r4, #26]
 801ac54:	68e2      	ldr	r2, [r4, #12]
 801ac56:	1c48      	adds	r0, r1, #1
 801ac58:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ac5c:	8360      	strh	r0, [r4, #26]
 801ac5e:	ee06 ea10 	vmov	s12, lr
 801ac62:	ed82 7a00 	vstr	s14, [r2]
 801ac66:	2501      	movs	r5, #1
 801ac68:	8b21      	ldrh	r1, [r4, #24]
 801ac6a:	68a2      	ldr	r2, [r4, #8]
 801ac6c:	1c48      	adds	r0, r1, #1
 801ac6e:	8320      	strh	r0, [r4, #24]
 801ac70:	5455      	strb	r5, [r2, r1]
 801ac72:	2200      	movs	r2, #0
 801ac74:	3304      	adds	r3, #4
 801ac76:	9300      	str	r3, [sp, #0]
 801ac78:	46aa      	mov	sl, r5
 801ac7a:	ee07 2a90 	vmov	s15, r2
 801ac7e:	4613      	mov	r3, r2
 801ac80:	4611      	mov	r1, r2
 801ac82:	462e      	mov	r6, r5
 801ac84:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801ac88:	9201      	str	r2, [sp, #4]
 801ac8a:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801ac8e:	9805      	ldr	r0, [sp, #20]
 801ac90:	f8d4 b008 	ldr.w	fp, [r4, #8]
 801ac94:	f108 0701 	add.w	r7, r8, #1
 801ac98:	42a8      	cmp	r0, r5
 801ac9a:	b2bf      	uxth	r7, r7
 801ac9c:	eb0b 0908 	add.w	r9, fp, r8
 801aca0:	f340 80db 	ble.w	801ae5a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 801aca4:	fa4c f906 	asr.w	r9, ip, r6
 801aca8:	f009 0901 	and.w	r9, r9, #1
 801acac:	fa5f f389 	uxtb.w	r3, r9
 801acb0:	9304      	str	r3, [sp, #16]
 801acb2:	9b00      	ldr	r3, [sp, #0]
 801acb4:	f9b3 1000 	ldrsh.w	r1, [r3]
 801acb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801acbc:	f1b9 0f00 	cmp.w	r9, #0
 801acc0:	d07d      	beq.n	801adbe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 801acc2:	ee05 1a10 	vmov	s10, r1
 801acc6:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 801acca:	ee05 3a10 	vmov	s10, r3
 801acce:	8327      	strh	r7, [r4, #24]
 801acd0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801acd4:	f1ba 0f00 	cmp.w	sl, #0
 801acd8:	d050      	beq.n	801ad7c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 801acda:	f04f 0002 	mov.w	r0, #2
 801acde:	f80b 0008 	strb.w	r0, [fp, r8]
 801ace2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ace6:	68e7      	ldr	r7, [r4, #12]
 801ace8:	f108 0901 	add.w	r9, r8, #1
 801acec:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801acf0:	f8a4 901a 	strh.w	r9, [r4, #26]
 801acf4:	edc7 4a00 	vstr	s9, [r7]
 801acf8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801acfc:	68e7      	ldr	r7, [r4, #12]
 801acfe:	f108 0901 	add.w	r9, r8, #1
 801ad02:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ad06:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ad0a:	ed87 5a00 	vstr	s10, [r7]
 801ad0e:	3601      	adds	r6, #1
 801ad10:	2e10      	cmp	r6, #16
 801ad12:	d106      	bne.n	801ad22 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 801ad14:	9e01      	ldr	r6, [sp, #4]
 801ad16:	9803      	ldr	r0, [sp, #12]
 801ad18:	3601      	adds	r6, #1
 801ad1a:	9601      	str	r6, [sp, #4]
 801ad1c:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 801ad20:	2600      	movs	r6, #0
 801ad22:	9800      	ldr	r0, [sp, #0]
 801ad24:	3501      	adds	r5, #1
 801ad26:	3004      	adds	r0, #4
 801ad28:	9000      	str	r0, [sp, #0]
 801ad2a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801ad2e:	e7ac      	b.n	801ac8a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 801ad30:	ee06 2a10 	vmov	s12, r2
 801ad34:	ee16 5a10 	vmov	r5, s12
 801ad38:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ad3c:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801ad40:	442a      	add	r2, r5
 801ad42:	ee06 2a90 	vmov	s13, r2
 801ad46:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ad4a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ad4e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ad52:	4472      	add	r2, lr
 801ad54:	ee07 2a10 	vmov	s14, r2
 801ad58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ad5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad60:	8360      	strh	r0, [r4, #26]
 801ad62:	edc1 6a00 	vstr	s13, [r1]
 801ad66:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ad6a:	8b61      	ldrh	r1, [r4, #26]
 801ad6c:	68e2      	ldr	r2, [r4, #12]
 801ad6e:	1c48      	adds	r0, r1, #1
 801ad70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ad74:	8360      	strh	r0, [r4, #26]
 801ad76:	ed82 7a00 	vstr	s14, [r2]
 801ad7a:	e774      	b.n	801ac66 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 801ad7c:	f04f 0005 	mov.w	r0, #5
 801ad80:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 801ad84:	f80b 0008 	strb.w	r0, [fp, r8]
 801ad88:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ad8c:	68e7      	ldr	r7, [r4, #12]
 801ad8e:	f108 0901 	add.w	r9, r8, #1
 801ad92:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ad96:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ad9a:	ed87 4a00 	vstr	s8, [r7]
 801ad9e:	ee04 2a10 	vmov	s8, r2
 801ada2:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801ada6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801adaa:	68e7      	ldr	r7, [r4, #12]
 801adac:	f108 0901 	add.w	r9, r8, #1
 801adb0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801adb4:	f8a4 901a 	strh.w	r9, [r4, #26]
 801adb8:	ed87 4a00 	vstr	s8, [r7]
 801adbc:	e791      	b.n	801ace2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 801adbe:	f1ba 0f00 	cmp.w	sl, #0
 801adc2:	d146      	bne.n	801ae52 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 801adc4:	f04f 0005 	mov.w	r0, #5
 801adc8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801adcc:	8327      	strh	r7, [r4, #24]
 801adce:	f80b 0008 	strb.w	r0, [fp, r8]
 801add2:	ee17 0a90 	vmov	r0, s15
 801add6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801adda:	68e7      	ldr	r7, [r4, #12]
 801addc:	f108 0901 	add.w	r9, r8, #1
 801ade0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ade4:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ade8:	ed87 5a00 	vstr	s10, [r7]
 801adec:	ee05 2a10 	vmov	s10, r2
 801adf0:	4408      	add	r0, r1
 801adf2:	ee07 0a90 	vmov	s15, r0
 801adf6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801adfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801adfe:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ae02:	68e7      	ldr	r7, [r4, #12]
 801ae04:	f108 0901 	add.w	r9, r8, #1
 801ae08:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ae0c:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ae10:	ed87 5a00 	vstr	s10, [r7]
 801ae14:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801ae18:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ae1c:	68e7      	ldr	r7, [r4, #12]
 801ae1e:	f108 0901 	add.w	r9, r8, #1
 801ae22:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ae26:	441a      	add	r2, r3
 801ae28:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ae2c:	edc7 7a00 	vstr	s15, [r7]
 801ae30:	ee07 2a90 	vmov	s15, r2
 801ae34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae38:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801ae3c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ae40:	68e7      	ldr	r7, [r4, #12]
 801ae42:	f108 0901 	add.w	r9, r8, #1
 801ae46:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ae4a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ae4e:	edc7 7a00 	vstr	s15, [r7]
 801ae52:	461a      	mov	r2, r3
 801ae54:	ee07 1a90 	vmov	s15, r1
 801ae58:	e759      	b.n	801ad0e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801ae5a:	f1ba 0f00 	cmp.w	sl, #0
 801ae5e:	d045      	beq.n	801aeec <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 801ae60:	ee05 1a90 	vmov	s11, r1
 801ae64:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801ae68:	eef4 5a66 	vcmp.f32	s11, s13
 801ae6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae70:	d108      	bne.n	801ae84 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 801ae72:	ee05 3a90 	vmov	s11, r3
 801ae76:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801ae7a:	eef4 5a47 	vcmp.f32	s11, s14
 801ae7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae82:	d033      	beq.n	801aeec <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 801ae84:	9b02      	ldr	r3, [sp, #8]
 801ae86:	8327      	strh	r7, [r4, #24]
 801ae88:	b1b3      	cbz	r3, 801aeb8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 801ae8a:	2302      	movs	r3, #2
 801ae8c:	f889 3000 	strb.w	r3, [r9]
 801ae90:	8b62      	ldrh	r2, [r4, #26]
 801ae92:	68e3      	ldr	r3, [r4, #12]
 801ae94:	1c51      	adds	r1, r2, #1
 801ae96:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ae9a:	8361      	strh	r1, [r4, #26]
 801ae9c:	edc3 6a00 	vstr	s13, [r3]
 801aea0:	8b62      	ldrh	r2, [r4, #26]
 801aea2:	68e3      	ldr	r3, [r4, #12]
 801aea4:	1c51      	adds	r1, r2, #1
 801aea6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801aeaa:	8361      	strh	r1, [r4, #26]
 801aeac:	ed83 7a00 	vstr	s14, [r3]
 801aeb0:	9800      	ldr	r0, [sp, #0]
 801aeb2:	b007      	add	sp, #28
 801aeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeb8:	2305      	movs	r3, #5
 801aeba:	f889 3000 	strb.w	r3, [r9]
 801aebe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801aec2:	ee07 ea90 	vmov	s15, lr
 801aec6:	8b62      	ldrh	r2, [r4, #26]
 801aec8:	68e3      	ldr	r3, [r4, #12]
 801aeca:	1c51      	adds	r1, r2, #1
 801aecc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801aed0:	8361      	strh	r1, [r4, #26]
 801aed2:	ed83 6a00 	vstr	s12, [r3]
 801aed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aeda:	8b62      	ldrh	r2, [r4, #26]
 801aedc:	68e3      	ldr	r3, [r4, #12]
 801aede:	1c51      	adds	r1, r2, #1
 801aee0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801aee4:	8361      	strh	r1, [r4, #26]
 801aee6:	edc3 7a00 	vstr	s15, [r3]
 801aeea:	e7d1      	b.n	801ae90 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801aeec:	ee05 2a90 	vmov	s11, r2
 801aef0:	2305      	movs	r3, #5
 801aef2:	9902      	ldr	r1, [sp, #8]
 801aef4:	8327      	strh	r7, [r4, #24]
 801aef6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801aefa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801aefe:	f889 3000 	strb.w	r3, [r9]
 801af02:	b181      	cbz	r1, 801af26 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 801af04:	8b62      	ldrh	r2, [r4, #26]
 801af06:	68e3      	ldr	r3, [r4, #12]
 801af08:	1c51      	adds	r1, r2, #1
 801af0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801af0e:	8361      	strh	r1, [r4, #26]
 801af10:	ed83 5a00 	vstr	s10, [r3]
 801af14:	8b62      	ldrh	r2, [r4, #26]
 801af16:	68e3      	ldr	r3, [r4, #12]
 801af18:	1c51      	adds	r1, r2, #1
 801af1a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801af1e:	8361      	strh	r1, [r4, #26]
 801af20:	edc3 5a00 	vstr	s11, [r3]
 801af24:	e7b4      	b.n	801ae90 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801af26:	8b65      	ldrh	r5, [r4, #26]
 801af28:	68e1      	ldr	r1, [r4, #12]
 801af2a:	1c6e      	adds	r6, r5, #1
 801af2c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801af30:	8366      	strh	r6, [r4, #26]
 801af32:	ed81 5a00 	vstr	s10, [r1]
 801af36:	8b65      	ldrh	r5, [r4, #26]
 801af38:	68e1      	ldr	r1, [r4, #12]
 801af3a:	1c6e      	adds	r6, r5, #1
 801af3c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801af40:	8366      	strh	r6, [r4, #26]
 801af42:	edc1 5a00 	vstr	s11, [r1]
 801af46:	8b65      	ldrh	r5, [r4, #26]
 801af48:	68e1      	ldr	r1, [r4, #12]
 801af4a:	1c6e      	adds	r6, r5, #1
 801af4c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801af50:	ee17 0a90 	vmov	r0, s15
 801af54:	ee16 5a10 	vmov	r5, s12
 801af58:	4428      	add	r0, r5
 801af5a:	ee07 0a90 	vmov	s15, r0
 801af5e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801af62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af66:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801af6a:	4472      	add	r2, lr
 801af6c:	8366      	strh	r6, [r4, #26]
 801af6e:	edc1 7a00 	vstr	s15, [r1]
 801af72:	ee07 2a90 	vmov	s15, r2
 801af76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af7a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801af7e:	8b61      	ldrh	r1, [r4, #26]
 801af80:	68e5      	ldr	r5, [r4, #12]
 801af82:	1c4e      	adds	r6, r1, #1
 801af84:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801af88:	8366      	strh	r6, [r4, #26]
 801af8a:	edc1 7a00 	vstr	s15, [r1]
 801af8e:	8b22      	ldrh	r2, [r4, #24]
 801af90:	68a1      	ldr	r1, [r4, #8]
 801af92:	1c55      	adds	r5, r2, #1
 801af94:	8325      	strh	r5, [r4, #24]
 801af96:	548b      	strb	r3, [r1, r2]
 801af98:	e791      	b.n	801aebe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

0801af9c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801af9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afa0:	b08e      	sub	sp, #56	@ 0x38
 801afa2:	4604      	mov	r4, r0
 801afa4:	4688      	mov	r8, r1
 801afa6:	4615      	mov	r5, r2
 801afa8:	4699      	mov	r9, r3
 801afaa:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801afac:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801afb0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801afb2:	f7f8 fd63 	bl	8013a7c <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801afb6:	6060      	str	r0, [r4, #4]
 801afb8:	f1b9 0f00 	cmp.w	r9, #0
 801afbc:	f000 80e8 	beq.w	801b190 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801afc0:	2800      	cmp	r0, #0
 801afc2:	f000 80e5 	beq.w	801b190 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801afc6:	a805      	add	r0, sp, #20
 801afc8:	f000 f8f9 	bl	801b1be <_ZN8touchgfx9Matrix3x3C1Ev>
 801afcc:	6833      	ldr	r3, [r6, #0]
 801afce:	4630      	mov	r0, r6
 801afd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801afd2:	4798      	blx	r3
 801afd4:	a805      	add	r0, sp, #20
 801afd6:	eef0 0a40 	vmov.f32	s1, s0
 801afda:	f000 f8f4 	bl	801b1c6 <_ZN8touchgfx9Matrix3x35scaleEff>
 801afde:	6860      	ldr	r0, [r4, #4]
 801afe0:	f1ba 0f03 	cmp.w	sl, #3
 801afe4:	d83b      	bhi.n	801b05e <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801afe6:	e8df f00a 	tbb	[pc, sl]
 801afea:	1002      	.short	0x1002
 801afec:	9f71      	.short	0x9f71
 801afee:	6803      	ldr	r3, [r0, #0]
 801aff0:	462a      	mov	r2, r5
 801aff2:	689b      	ldr	r3, [r3, #8]
 801aff4:	4641      	mov	r1, r8
 801aff6:	4798      	blx	r3
 801aff8:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801affc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801b000:	ee07 7a90 	vmov	s15, r7
 801b004:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b008:	e026      	b.n	801b058 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801b00a:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801b00e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801b012:	8869      	ldrh	r1, [r5, #2]
 801b014:	1a9b      	subs	r3, r3, r2
 801b016:	1a5b      	subs	r3, r3, r1
 801b018:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b01c:	882b      	ldrh	r3, [r5, #0]
 801b01e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b022:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b026:	88ab      	ldrh	r3, [r5, #4]
 801b028:	aa03      	add	r2, sp, #12
 801b02a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b02e:	6803      	ldr	r3, [r0, #0]
 801b030:	4641      	mov	r1, r8
 801b032:	689b      	ldr	r3, [r3, #8]
 801b034:	4798      	blx	r3
 801b036:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801b198 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801b03a:	a805      	add	r0, sp, #20
 801b03c:	f000 f8e8 	bl	801b210 <_ZN8touchgfx9Matrix3x36rotateEf>
 801b040:	ee07 7a90 	vmov	s15, r7
 801b044:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801b048:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b04a:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801b04e:	1a9b      	subs	r3, r3, r2
 801b050:	ee00 3a10 	vmov	s0, r3
 801b054:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801b058:	a805      	add	r0, sp, #20
 801b05a:	f000 f927 	bl	801b2ac <_ZN8touchgfx9Matrix3x39translateEff>
 801b05e:	2500      	movs	r5, #0
 801b060:	6860      	ldr	r0, [r4, #4]
 801b062:	a905      	add	r1, sp, #20
 801b064:	6803      	ldr	r3, [r0, #0]
 801b066:	f109 0602 	add.w	r6, r9, #2
 801b06a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b06c:	4798      	blx	r3
 801b06e:	6860      	ldr	r0, [r4, #4]
 801b070:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b072:	6803      	ldr	r3, [r0, #0]
 801b074:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801b078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b07a:	4798      	blx	r3
 801b07c:	6860      	ldr	r0, [r4, #4]
 801b07e:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801b082:	6803      	ldr	r3, [r0, #0]
 801b084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b086:	4798      	blx	r3
 801b088:	6860      	ldr	r0, [r4, #4]
 801b08a:	2101      	movs	r1, #1
 801b08c:	6803      	ldr	r3, [r0, #0]
 801b08e:	68db      	ldr	r3, [r3, #12]
 801b090:	4798      	blx	r3
 801b092:	f8b9 7000 	ldrh.w	r7, [r9]
 801b096:	f104 0310 	add.w	r3, r4, #16
 801b09a:	61a5      	str	r5, [r4, #24]
 801b09c:	f104 0208 	add.w	r2, r4, #8
 801b0a0:	f104 0114 	add.w	r1, r4, #20
 801b0a4:	f104 000c 	add.w	r0, r4, #12
 801b0a8:	f7f4 fbf2 	bl	800f890 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801b0ac:	42af      	cmp	r7, r5
 801b0ae:	dd60      	ble.n	801b172 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801b0b0:	8831      	ldrh	r1, [r6, #0]
 801b0b2:	1cb2      	adds	r2, r6, #2
 801b0b4:	f101 030f 	add.w	r3, r1, #15
 801b0b8:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801b0bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b0c0:	4620      	mov	r0, r4
 801b0c2:	f7ff fda3 	bl	801ac0c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801b0c6:	3501      	adds	r5, #1
 801b0c8:	4606      	mov	r6, r0
 801b0ca:	e7ef      	b.n	801b0ac <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801b0cc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b0d0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801b0d4:	8829      	ldrh	r1, [r5, #0]
 801b0d6:	1a9b      	subs	r3, r3, r2
 801b0d8:	1a5b      	subs	r3, r3, r1
 801b0da:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b0de:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b0e2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b0e6:	886d      	ldrh	r5, [r5, #2]
 801b0e8:	1a5b      	subs	r3, r3, r1
 801b0ea:	1b5b      	subs	r3, r3, r5
 801b0ec:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b0f0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b0f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b0f8:	6803      	ldr	r3, [r0, #0]
 801b0fa:	aa03      	add	r2, sp, #12
 801b0fc:	689b      	ldr	r3, [r3, #8]
 801b0fe:	4641      	mov	r1, r8
 801b100:	4798      	blx	r3
 801b102:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801b19c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801b106:	a805      	add	r0, sp, #20
 801b108:	f000 f882 	bl	801b210 <_ZN8touchgfx9Matrix3x36rotateEf>
 801b10c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b110:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b112:	1a9b      	subs	r3, r3, r2
 801b114:	ee00 3a90 	vmov	s1, r3
 801b118:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801b11c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b120:	1bdb      	subs	r3, r3, r7
 801b122:	ee00 3a10 	vmov	s0, r3
 801b126:	e795      	b.n	801b054 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801b128:	886b      	ldrh	r3, [r5, #2]
 801b12a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b12e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b132:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b136:	8829      	ldrh	r1, [r5, #0]
 801b138:	1a9b      	subs	r3, r3, r2
 801b13a:	1a5b      	subs	r3, r3, r1
 801b13c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b140:	88eb      	ldrh	r3, [r5, #6]
 801b142:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b146:	f8ad 3010 	strh.w	r3, [sp, #16]
 801b14a:	6803      	ldr	r3, [r0, #0]
 801b14c:	aa03      	add	r2, sp, #12
 801b14e:	689b      	ldr	r3, [r3, #8]
 801b150:	4641      	mov	r1, r8
 801b152:	4798      	blx	r3
 801b154:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801b1a0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801b158:	a805      	add	r0, sp, #20
 801b15a:	f000 f859 	bl	801b210 <_ZN8touchgfx9Matrix3x36rotateEf>
 801b15e:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b162:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801b166:	1bdb      	subs	r3, r3, r7
 801b168:	ee00 3a90 	vmov	s1, r3
 801b16c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b170:	e748      	b.n	801b004 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801b172:	2100      	movs	r1, #0
 801b174:	6860      	ldr	r0, [r4, #4]
 801b176:	8b22      	ldrh	r2, [r4, #24]
 801b178:	6803      	ldr	r3, [r0, #0]
 801b17a:	9101      	str	r1, [sp, #4]
 801b17c:	8b61      	ldrh	r1, [r4, #26]
 801b17e:	9100      	str	r1, [sp, #0]
 801b180:	6a1d      	ldr	r5, [r3, #32]
 801b182:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801b186:	47a8      	blx	r5
 801b188:	6860      	ldr	r0, [r4, #4]
 801b18a:	6803      	ldr	r3, [r0, #0]
 801b18c:	69db      	ldr	r3, [r3, #28]
 801b18e:	4798      	blx	r3
 801b190:	b00e      	add	sp, #56	@ 0x38
 801b192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b196:	bf00      	nop
 801b198:	42b40000 	.word	0x42b40000
 801b19c:	43340000 	.word	0x43340000
 801b1a0:	43870000 	.word	0x43870000

0801b1a4 <_ZN8touchgfx9Matrix3x35resetEv>:
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801b1aa:	6043      	str	r3, [r0, #4]
 801b1ac:	6002      	str	r2, [r0, #0]
 801b1ae:	6083      	str	r3, [r0, #8]
 801b1b0:	60c3      	str	r3, [r0, #12]
 801b1b2:	6102      	str	r2, [r0, #16]
 801b1b4:	6143      	str	r3, [r0, #20]
 801b1b6:	6183      	str	r3, [r0, #24]
 801b1b8:	61c3      	str	r3, [r0, #28]
 801b1ba:	6202      	str	r2, [r0, #32]
 801b1bc:	4770      	bx	lr

0801b1be <_ZN8touchgfx9Matrix3x3C1Ev>:
 801b1be:	b508      	push	{r3, lr}
 801b1c0:	f7ff fff0 	bl	801b1a4 <_ZN8touchgfx9Matrix3x35resetEv>
 801b1c4:	bd08      	pop	{r3, pc}

0801b1c6 <_ZN8touchgfx9Matrix3x35scaleEff>:
 801b1c6:	edd0 7a00 	vldr	s15, [r0]
 801b1ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b1ce:	edc0 7a00 	vstr	s15, [r0]
 801b1d2:	edd0 7a01 	vldr	s15, [r0, #4]
 801b1d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b1da:	edc0 7a01 	vstr	s15, [r0, #4]
 801b1de:	edd0 7a02 	vldr	s15, [r0, #8]
 801b1e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b1e6:	edd0 7a03 	vldr	s15, [r0, #12]
 801b1ea:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801b1ee:	edc0 7a03 	vstr	s15, [r0, #12]
 801b1f2:	edd0 7a04 	vldr	s15, [r0, #16]
 801b1f6:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801b1fa:	edc0 7a04 	vstr	s15, [r0, #16]
 801b1fe:	edd0 7a05 	vldr	s15, [r0, #20]
 801b202:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801b206:	ed80 0a02 	vstr	s0, [r0, #8]
 801b20a:	edc0 0a05 	vstr	s1, [r0, #20]
 801b20e:	4770      	bx	lr

0801b210 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801b210:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801b2a4 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801b214:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b218:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801b2a8 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801b21c:	b510      	push	{r4, lr}
 801b21e:	ed2d 8b02 	vpush	{d8}
 801b222:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801b226:	eeb0 0a68 	vmov.f32	s0, s17
 801b22a:	4604      	mov	r4, r0
 801b22c:	f010 fd08 	bl	802bc40 <cosf>
 801b230:	eeb0 8a40 	vmov.f32	s16, s0
 801b234:	eeb0 0a68 	vmov.f32	s0, s17
 801b238:	f010 fd46 	bl	802bcc8 <sinf>
 801b23c:	edd4 6a03 	vldr	s13, [r4, #12]
 801b240:	edd4 4a00 	vldr	s9, [r4]
 801b244:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801b248:	ed94 7a04 	vldr	s14, [r4, #16]
 801b24c:	eee8 7a24 	vfma.f32	s15, s16, s9
 801b250:	ed94 5a01 	vldr	s10, [r4, #4]
 801b254:	edc4 7a00 	vstr	s15, [r4]
 801b258:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801b25c:	eee8 7a05 	vfma.f32	s15, s16, s10
 801b260:	edc4 7a01 	vstr	s15, [r4, #4]
 801b264:	edd4 7a05 	vldr	s15, [r4, #20]
 801b268:	edd4 5a02 	vldr	s11, [r4, #8]
 801b26c:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801b270:	ee66 6a88 	vmul.f32	s13, s13, s16
 801b274:	ee27 7a08 	vmul.f32	s14, s14, s16
 801b278:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b27c:	eea8 6a25 	vfma.f32	s12, s16, s11
 801b280:	ecbd 8b02 	vpop	{d8}
 801b284:	eee0 6a24 	vfma.f32	s13, s0, s9
 801b288:	eea0 7a05 	vfma.f32	s14, s0, s10
 801b28c:	eee0 7a25 	vfma.f32	s15, s0, s11
 801b290:	ed84 6a02 	vstr	s12, [r4, #8]
 801b294:	edc4 6a03 	vstr	s13, [r4, #12]
 801b298:	ed84 7a04 	vstr	s14, [r4, #16]
 801b29c:	edc4 7a05 	vstr	s15, [r4, #20]
 801b2a0:	bd10      	pop	{r4, pc}
 801b2a2:	bf00      	nop
 801b2a4:	40490fdb 	.word	0x40490fdb
 801b2a8:	43340000 	.word	0x43340000

0801b2ac <_ZN8touchgfx9Matrix3x39translateEff>:
 801b2ac:	ed90 6a06 	vldr	s12, [r0, #24]
 801b2b0:	edd0 7a00 	vldr	s15, [r0]
 801b2b4:	eee6 7a00 	vfma.f32	s15, s12, s0
 801b2b8:	edd0 6a07 	vldr	s13, [r0, #28]
 801b2bc:	edc0 7a00 	vstr	s15, [r0]
 801b2c0:	edd0 7a01 	vldr	s15, [r0, #4]
 801b2c4:	eee6 7a80 	vfma.f32	s15, s13, s0
 801b2c8:	ed90 7a08 	vldr	s14, [r0, #32]
 801b2cc:	edc0 7a01 	vstr	s15, [r0, #4]
 801b2d0:	edd0 7a02 	vldr	s15, [r0, #8]
 801b2d4:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b2d8:	edc0 7a02 	vstr	s15, [r0, #8]
 801b2dc:	edd0 7a03 	vldr	s15, [r0, #12]
 801b2e0:	eee6 7a20 	vfma.f32	s15, s12, s1
 801b2e4:	edc0 7a03 	vstr	s15, [r0, #12]
 801b2e8:	edd0 7a04 	vldr	s15, [r0, #16]
 801b2ec:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801b2f0:	edc0 7a04 	vstr	s15, [r0, #16]
 801b2f4:	edd0 7a05 	vldr	s15, [r0, #20]
 801b2f8:	eee7 7a20 	vfma.f32	s15, s14, s1
 801b2fc:	edc0 7a05 	vstr	s15, [r0, #20]
 801b300:	4770      	bx	lr

0801b302 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801b302:	edd0 6a01 	vldr	s13, [r0, #4]
 801b306:	edd0 7a04 	vldr	s15, [r0, #16]
 801b30a:	ed90 7a03 	vldr	s14, [r0, #12]
 801b30e:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801b312:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801b316:	edd0 6a00 	vldr	s13, [r0]
 801b31a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b31e:	eee6 0a80 	vfma.f32	s1, s13, s0
 801b322:	ed90 7a05 	vldr	s14, [r0, #20]
 801b326:	ed90 0a02 	vldr	s0, [r0, #8]
 801b32a:	ee30 0a80 	vadd.f32	s0, s1, s0
 801b32e:	ee77 0a87 	vadd.f32	s1, s15, s14
 801b332:	b084      	sub	sp, #16
 801b334:	b004      	add	sp, #16
 801b336:	4770      	bx	lr

0801b338 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801b338:	b530      	push	{r4, r5, lr}
 801b33a:	8083      	strh	r3, [r0, #4]
 801b33c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b340:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801b344:	80c3      	strh	r3, [r0, #6]
 801b346:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801b34a:	6141      	str	r1, [r0, #20]
 801b34c:	7203      	strb	r3, [r0, #8]
 801b34e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b352:	8302      	strh	r2, [r0, #24]
 801b354:	7243      	strb	r3, [r0, #9]
 801b356:	7a83      	ldrb	r3, [r0, #10]
 801b358:	f365 0306 	bfi	r3, r5, #0, #7
 801b35c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801b360:	f365 13c7 	bfi	r3, r5, #7, #1
 801b364:	7283      	strb	r3, [r0, #10]
 801b366:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801b36a:	72c3      	strb	r3, [r0, #11]
 801b36c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801b370:	7303      	strb	r3, [r0, #12]
 801b372:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b376:	81c3      	strh	r3, [r0, #14]
 801b378:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b37c:	8203      	strh	r3, [r0, #16]
 801b37e:	4b01      	ldr	r3, [pc, #4]	@ (801b384 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801b380:	6003      	str	r3, [r0, #0]
 801b382:	bd30      	pop	{r4, r5, pc}
 801b384:	0802f9f0 	.word	0x0802f9f0

0801b388 <_ZNK8touchgfx9ConstFont4findEt>:
 801b388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b38a:	6944      	ldr	r4, [r0, #20]
 801b38c:	b3bc      	cbz	r4, 801b3fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b38e:	88a3      	ldrh	r3, [r4, #4]
 801b390:	8b02      	ldrh	r2, [r0, #24]
 801b392:	1acb      	subs	r3, r1, r3
 801b394:	f102 32ff 	add.w	r2, r2, #4294967295
 801b398:	d431      	bmi.n	801b3fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b39a:	4293      	cmp	r3, r2
 801b39c:	dd0c      	ble.n	801b3b8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b39e:	230e      	movs	r3, #14
 801b3a0:	fb03 4302 	mla	r3, r3, r2, r4
 801b3a4:	889b      	ldrh	r3, [r3, #4]
 801b3a6:	1a5b      	subs	r3, r3, r1
 801b3a8:	1ad3      	subs	r3, r2, r3
 801b3aa:	429a      	cmp	r2, r3
 801b3ac:	db27      	blt.n	801b3fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	bfbc      	itt	lt
 801b3b2:	2302      	movlt	r3, #2
 801b3b4:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b3b8:	2500      	movs	r5, #0
 801b3ba:	260e      	movs	r6, #14
 801b3bc:	4295      	cmp	r5, r2
 801b3be:	dc1e      	bgt.n	801b3fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b3c0:	fb06 4003 	mla	r0, r6, r3, r4
 801b3c4:	8887      	ldrh	r7, [r0, #4]
 801b3c6:	42b9      	cmp	r1, r7
 801b3c8:	d01a      	beq.n	801b400 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b3ca:	d20d      	bcs.n	801b3e8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b3cc:	1e5a      	subs	r2, r3, #1
 801b3ce:	4295      	cmp	r5, r2
 801b3d0:	dc15      	bgt.n	801b3fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b3d2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b3d6:	1a5b      	subs	r3, r3, r1
 801b3d8:	1ad3      	subs	r3, r2, r3
 801b3da:	429a      	cmp	r2, r3
 801b3dc:	db0f      	blt.n	801b3fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b3de:	429d      	cmp	r5, r3
 801b3e0:	ddec      	ble.n	801b3bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b3e2:	1953      	adds	r3, r2, r5
 801b3e4:	105b      	asrs	r3, r3, #1
 801b3e6:	e7e9      	b.n	801b3bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b3e8:	1c5d      	adds	r5, r3, #1
 801b3ea:	42aa      	cmp	r2, r5
 801b3ec:	db07      	blt.n	801b3fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b3ee:	8a43      	ldrh	r3, [r0, #18]
 801b3f0:	1acb      	subs	r3, r1, r3
 801b3f2:	442b      	add	r3, r5
 801b3f4:	429d      	cmp	r5, r3
 801b3f6:	dc02      	bgt.n	801b3fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b3f8:	429a      	cmp	r2, r3
 801b3fa:	dadf      	bge.n	801b3bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b3fc:	e7f1      	b.n	801b3e2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b3fe:	2000      	movs	r0, #0
 801b400:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b402 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b404:	4604      	mov	r4, r0
 801b406:	4617      	mov	r7, r2
 801b408:	461e      	mov	r6, r3
 801b40a:	b911      	cbnz	r1, 801b412 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b40c:	2500      	movs	r5, #0
 801b40e:	4628      	mov	r0, r5
 801b410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b412:	290a      	cmp	r1, #10
 801b414:	d0fa      	beq.n	801b40c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b416:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801b41a:	4291      	cmp	r1, r2
 801b41c:	d0f6      	beq.n	801b40c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b41e:	f242 020b 	movw	r2, #8203	@ 0x200b
 801b422:	4291      	cmp	r1, r2
 801b424:	d0f2      	beq.n	801b40c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b426:	f7ff ffaf 	bl	801b388 <_ZNK8touchgfx9ConstFont4findEt>
 801b42a:	4605      	mov	r5, r0
 801b42c:	b950      	cbnz	r0, 801b444 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b42e:	6823      	ldr	r3, [r4, #0]
 801b430:	4620      	mov	r0, r4
 801b432:	691b      	ldr	r3, [r3, #16]
 801b434:	4798      	blx	r3
 801b436:	4601      	mov	r1, r0
 801b438:	4620      	mov	r0, r4
 801b43a:	f7ff ffa5 	bl	801b388 <_ZNK8touchgfx9ConstFont4findEt>
 801b43e:	4605      	mov	r5, r0
 801b440:	2800      	cmp	r0, #0
 801b442:	d0e3      	beq.n	801b40c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b444:	6823      	ldr	r3, [r4, #0]
 801b446:	4629      	mov	r1, r5
 801b448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b44a:	4620      	mov	r0, r4
 801b44c:	4798      	blx	r3
 801b44e:	6038      	str	r0, [r7, #0]
 801b450:	6823      	ldr	r3, [r4, #0]
 801b452:	4620      	mov	r0, r4
 801b454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b456:	4798      	blx	r3
 801b458:	7030      	strb	r0, [r6, #0]
 801b45a:	e7d8      	b.n	801b40e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b45c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801b45c:	2000      	movs	r0, #0
 801b45e:	4770      	bx	lr

0801b460 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801b460:	2001      	movs	r0, #1
 801b462:	4770      	bx	lr

0801b464 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801b464:	2002      	movs	r0, #2
 801b466:	4770      	bx	lr

0801b468 <_ZN8touchgfx12GestureEventD1Ev>:
 801b468:	4770      	bx	lr

0801b46a <_ZN8touchgfx9DragEventD1Ev>:
 801b46a:	4770      	bx	lr

0801b46c <_ZN8touchgfx10ClickEventD1Ev>:
 801b46c:	4770      	bx	lr

0801b46e <_ZN8touchgfx10ClickEventD0Ev>:
 801b46e:	b510      	push	{r4, lr}
 801b470:	4604      	mov	r4, r0
 801b472:	210c      	movs	r1, #12
 801b474:	f010 fb9d 	bl	802bbb2 <_ZdlPvj>
 801b478:	4620      	mov	r0, r4
 801b47a:	bd10      	pop	{r4, pc}

0801b47c <_ZN8touchgfx9DragEventD0Ev>:
 801b47c:	b510      	push	{r4, lr}
 801b47e:	4604      	mov	r4, r0
 801b480:	2110      	movs	r1, #16
 801b482:	f010 fb96 	bl	802bbb2 <_ZdlPvj>
 801b486:	4620      	mov	r0, r4
 801b488:	bd10      	pop	{r4, pc}

0801b48a <_ZN8touchgfx12GestureEventD0Ev>:
 801b48a:	b510      	push	{r4, lr}
 801b48c:	4604      	mov	r4, r0
 801b48e:	210c      	movs	r1, #12
 801b490:	f010 fb8f 	bl	802bbb2 <_ZdlPvj>
 801b494:	4620      	mov	r0, r4
 801b496:	bd10      	pop	{r4, pc}

0801b498 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b498:	b530      	push	{r4, r5, lr}
 801b49a:	460d      	mov	r5, r1
 801b49c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b49e:	b087      	sub	sp, #28
 801b4a0:	4604      	mov	r4, r0
 801b4a2:	b301      	cbz	r1, 801b4e6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b4a4:	a801      	add	r0, sp, #4
 801b4a6:	f7ff fb93 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4aa:	892a      	ldrh	r2, [r5, #8]
 801b4ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b4b0:	7928      	ldrb	r0, [r5, #4]
 801b4b2:	1ad2      	subs	r2, r2, r3
 801b4b4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801b4b6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b4ba:	441a      	add	r2, r3
 801b4bc:	896b      	ldrh	r3, [r5, #10]
 801b4be:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b4c2:	f88d 0010 	strb.w	r0, [sp, #16]
 801b4c6:	1b5b      	subs	r3, r3, r5
 801b4c8:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801b4ca:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b4cc:	442b      	add	r3, r5
 801b4ce:	4d07      	ldr	r5, [pc, #28]	@ (801b4ec <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b4d0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b4d4:	9503      	str	r5, [sp, #12]
 801b4d6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b4da:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b4de:	6803      	ldr	r3, [r0, #0]
 801b4e0:	a903      	add	r1, sp, #12
 801b4e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b4e4:	4798      	blx	r3
 801b4e6:	b007      	add	sp, #28
 801b4e8:	bd30      	pop	{r4, r5, pc}
 801b4ea:	bf00      	nop
 801b4ec:	0802fa80 	.word	0x0802fa80

0801b4f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4f4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b4f6:	b08a      	sub	sp, #40	@ 0x28
 801b4f8:	4604      	mov	r4, r0
 801b4fa:	460d      	mov	r5, r1
 801b4fc:	b113      	cbz	r3, 801b504 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801b4fe:	790b      	ldrb	r3, [r1, #4]
 801b500:	2b00      	cmp	r3, #0
 801b502:	d044      	beq.n	801b58e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b504:	f104 0804 	add.w	r8, r4, #4
 801b508:	4641      	mov	r1, r8
 801b50a:	a803      	add	r0, sp, #12
 801b50c:	f7ff fb60 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b510:	792b      	ldrb	r3, [r5, #4]
 801b512:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b516:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b51a:	b983      	cbnz	r3, 801b53e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801b51c:	892a      	ldrh	r2, [r5, #8]
 801b51e:	88e9      	ldrh	r1, [r5, #6]
 801b520:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801b524:	1b92      	subs	r2, r2, r6
 801b526:	1bc9      	subs	r1, r1, r7
 801b528:	9301      	str	r3, [sp, #4]
 801b52a:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801b52e:	9300      	str	r3, [sp, #0]
 801b530:	b212      	sxth	r2, r2
 801b532:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801b536:	b209      	sxth	r1, r1
 801b538:	4640      	mov	r0, r8
 801b53a:	f7f8 fcad 	bl	8013e98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801b53e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b540:	b329      	cbz	r1, 801b58e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b542:	a805      	add	r0, sp, #20
 801b544:	f7ff fb44 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b548:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b54c:	792b      	ldrb	r3, [r5, #4]
 801b54e:	1abf      	subs	r7, r7, r2
 801b550:	88ea      	ldrh	r2, [r5, #6]
 801b552:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b554:	4417      	add	r7, r2
 801b556:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801b558:	f88d 3020 	strb.w	r3, [sp, #32]
 801b55c:	4417      	add	r7, r2
 801b55e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b562:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801b566:	1ab6      	subs	r6, r6, r2
 801b568:	892a      	ldrh	r2, [r5, #8]
 801b56a:	a907      	add	r1, sp, #28
 801b56c:	4416      	add	r6, r2
 801b56e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b570:	4416      	add	r6, r2
 801b572:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801b576:	2600      	movs	r6, #0
 801b578:	4a06      	ldr	r2, [pc, #24]	@ (801b594 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801b57a:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801b57e:	9207      	str	r2, [sp, #28]
 801b580:	6803      	ldr	r3, [r0, #0]
 801b582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b584:	4798      	blx	r3
 801b586:	792b      	ldrb	r3, [r5, #4]
 801b588:	b10b      	cbz	r3, 801b58e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b58a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801b58e:	b00a      	add	sp, #40	@ 0x28
 801b590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b594:	0802fa58 	.word	0x0802fa58

0801b598 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b59c:	460c      	mov	r4, r1
 801b59e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b5a0:	b088      	sub	sp, #32
 801b5a2:	4605      	mov	r5, r0
 801b5a4:	2900      	cmp	r1, #0
 801b5a6:	d06d      	beq.n	801b684 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801b5a8:	4668      	mov	r0, sp
 801b5aa:	f7ff fb11 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b5ae:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801b5b0:	88e3      	ldrh	r3, [r4, #6]
 801b5b2:	f9bd 8000 	ldrsh.w	r8, [sp]
 801b5b6:	440b      	add	r3, r1
 801b5b8:	b21b      	sxth	r3, r3
 801b5ba:	4543      	cmp	r3, r8
 801b5bc:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801b5c0:	db31      	blt.n	801b626 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b5c2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801b5c6:	44c4      	add	ip, r8
 801b5c8:	fa0f fc8c 	sxth.w	ip, ip
 801b5cc:	4563      	cmp	r3, ip
 801b5ce:	da2a      	bge.n	801b626 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b5d0:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801b5d2:	8926      	ldrh	r6, [r4, #8]
 801b5d4:	4416      	add	r6, r2
 801b5d6:	b236      	sxth	r6, r6
 801b5d8:	42be      	cmp	r6, r7
 801b5da:	db24      	blt.n	801b626 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b5dc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b5e0:	4438      	add	r0, r7
 801b5e2:	b200      	sxth	r0, r0
 801b5e4:	4286      	cmp	r6, r0
 801b5e6:	da1e      	bge.n	801b626 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b5e8:	8963      	ldrh	r3, [r4, #10]
 801b5ea:	4419      	add	r1, r3
 801b5ec:	b209      	sxth	r1, r1
 801b5ee:	4541      	cmp	r1, r8
 801b5f0:	db08      	blt.n	801b604 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b5f2:	4561      	cmp	r1, ip
 801b5f4:	da06      	bge.n	801b604 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b5f6:	89a3      	ldrh	r3, [r4, #12]
 801b5f8:	441a      	add	r2, r3
 801b5fa:	b212      	sxth	r2, r2
 801b5fc:	42ba      	cmp	r2, r7
 801b5fe:	db01      	blt.n	801b604 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b600:	4282      	cmp	r2, r0
 801b602:	db10      	blt.n	801b626 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b604:	4b21      	ldr	r3, [pc, #132]	@ (801b68c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801b606:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b608:	9304      	str	r3, [sp, #16]
 801b60a:	2302      	movs	r3, #2
 801b60c:	f88d 3014 	strb.w	r3, [sp, #20]
 801b610:	2300      	movs	r3, #0
 801b612:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b616:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b61a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b61e:	6803      	ldr	r3, [r0, #0]
 801b620:	a904      	add	r1, sp, #16
 801b622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b624:	4798      	blx	r3
 801b626:	1d29      	adds	r1, r5, #4
 801b628:	a802      	add	r0, sp, #8
 801b62a:	f7ff fad1 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b62e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b632:	88e0      	ldrh	r0, [r4, #6]
 801b634:	eba3 0808 	sub.w	r8, r3, r8
 801b638:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b63c:	7921      	ldrb	r1, [r4, #4]
 801b63e:	1bdf      	subs	r7, r3, r7
 801b640:	b2bb      	uxth	r3, r7
 801b642:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801b646:	fa1f f888 	uxth.w	r8, r8
 801b64a:	8922      	ldrh	r2, [r4, #8]
 801b64c:	8967      	ldrh	r7, [r4, #10]
 801b64e:	89a4      	ldrh	r4, [r4, #12]
 801b650:	4440      	add	r0, r8
 801b652:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801b654:	4460      	add	r0, ip
 801b656:	441a      	add	r2, r3
 801b658:	44b8      	add	r8, r7
 801b65a:	4423      	add	r3, r4
 801b65c:	4c0c      	ldr	r4, [pc, #48]	@ (801b690 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801b65e:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b662:	4433      	add	r3, r6
 801b664:	4432      	add	r2, r6
 801b666:	44e0      	add	r8, ip
 801b668:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b66a:	f88d 1014 	strb.w	r1, [sp, #20]
 801b66e:	9404      	str	r4, [sp, #16]
 801b670:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b674:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b678:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b67c:	6803      	ldr	r3, [r0, #0]
 801b67e:	a904      	add	r1, sp, #16
 801b680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b682:	4798      	blx	r3
 801b684:	b008      	add	sp, #32
 801b686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b68a:	bf00      	nop
 801b68c:	0802fa58 	.word	0x0802fa58
 801b690:	0802fa6c 	.word	0x0802fa6c

0801b694 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b696:	4604      	mov	r4, r0
 801b698:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b69c:	3201      	adds	r2, #1
 801b69e:	d112      	bne.n	801b6c6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b6a0:	2500      	movs	r5, #0
 801b6a2:	9500      	str	r5, [sp, #0]
 801b6a4:	466d      	mov	r5, sp
 801b6a6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b6aa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b6ae:	6803      	ldr	r3, [r0, #0]
 801b6b0:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b6b4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b6b8:	4629      	mov	r1, r5
 801b6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b6bc:	4798      	blx	r3
 801b6be:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b6c2:	e884 0003 	stmia.w	r4, {r0, r1}
 801b6c6:	4620      	mov	r0, r4
 801b6c8:	b003      	add	sp, #12
 801b6ca:	bd30      	pop	{r4, r5, pc}

0801b6cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b6cc:	b513      	push	{r0, r1, r4, lr}
 801b6ce:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b6d2:	4604      	mov	r4, r0
 801b6d4:	3301      	adds	r3, #1
 801b6d6:	d109      	bne.n	801b6ec <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b6d8:	4601      	mov	r1, r0
 801b6da:	4668      	mov	r0, sp
 801b6dc:	f7ff fa78 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b6e0:	f8bd 3000 	ldrh.w	r3, [sp]
 801b6e4:	8423      	strh	r3, [r4, #32]
 801b6e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b6ea:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b6ec:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b6f0:	b002      	add	sp, #8
 801b6f2:	bd10      	pop	{r4, pc}

0801b6f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b6f4:	b513      	push	{r0, r1, r4, lr}
 801b6f6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801b6fa:	4604      	mov	r4, r0
 801b6fc:	3301      	adds	r3, #1
 801b6fe:	d109      	bne.n	801b714 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b700:	4601      	mov	r1, r0
 801b702:	4668      	mov	r0, sp
 801b704:	f7ff fa64 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b708:	f8bd 3000 	ldrh.w	r3, [sp]
 801b70c:	8423      	strh	r3, [r4, #32]
 801b70e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b712:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b714:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801b718:	b002      	add	sp, #8
 801b71a:	bd10      	pop	{r4, pc}

0801b71c <_ZN8touchgfx6ScreenC1Ev>:
 801b71c:	b570      	push	{r4, r5, r6, lr}
 801b71e:	4605      	mov	r5, r0
 801b720:	4b16      	ldr	r3, [pc, #88]	@ (801b77c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b722:	2101      	movs	r1, #1
 801b724:	f845 3b04 	str.w	r3, [r5], #4
 801b728:	2300      	movs	r3, #0
 801b72a:	4604      	mov	r4, r0
 801b72c:	8103      	strh	r3, [r0, #8]
 801b72e:	8143      	strh	r3, [r0, #10]
 801b730:	8183      	strh	r3, [r0, #12]
 801b732:	81c3      	strh	r3, [r0, #14]
 801b734:	8203      	strh	r3, [r0, #16]
 801b736:	8243      	strh	r3, [r0, #18]
 801b738:	8283      	strh	r3, [r0, #20]
 801b73a:	82c3      	strh	r3, [r0, #22]
 801b73c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b740:	6203      	str	r3, [r0, #32]
 801b742:	8483      	strh	r3, [r0, #36]	@ 0x24
 801b744:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801b746:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801b74a:	4a0d      	ldr	r2, [pc, #52]	@ (801b780 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b74c:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801b750:	6343      	str	r3, [r0, #52]	@ 0x34
 801b752:	4b0c      	ldr	r3, [pc, #48]	@ (801b784 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b754:	6042      	str	r2, [r0, #4]
 801b756:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b75a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801b75c:	4a0a      	ldr	r2, [pc, #40]	@ (801b788 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b75e:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801b762:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801b766:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b76a:	4628      	mov	r0, r5
 801b76c:	4798      	blx	r3
 801b76e:	6863      	ldr	r3, [r4, #4]
 801b770:	4628      	mov	r0, r5
 801b772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b774:	4631      	mov	r1, r6
 801b776:	4798      	blx	r3
 801b778:	4620      	mov	r0, r4
 801b77a:	bd70      	pop	{r4, r5, r6, pc}
 801b77c:	0802fa94 	.word	0x0802fa94
 801b780:	0802f248 	.word	0x0802f248
 801b784:	2005ba9a 	.word	0x2005ba9a
 801b788:	2005ba98 	.word	0x2005ba98

0801b78c <_ZN8touchgfx6Screen4drawEv>:
 801b78c:	b507      	push	{r0, r1, r2, lr}
 801b78e:	2100      	movs	r1, #0
 801b790:	4b08      	ldr	r3, [pc, #32]	@ (801b7b4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b792:	9100      	str	r1, [sp, #0]
 801b794:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b798:	4b07      	ldr	r3, [pc, #28]	@ (801b7b8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b79a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b79e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b7a2:	4669      	mov	r1, sp
 801b7a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b7a8:	6803      	ldr	r3, [r0, #0]
 801b7aa:	689b      	ldr	r3, [r3, #8]
 801b7ac:	4798      	blx	r3
 801b7ae:	b003      	add	sp, #12
 801b7b0:	f85d fb04 	ldr.w	pc, [sp], #4
 801b7b4:	2005ba98 	.word	0x2005ba98
 801b7b8:	2005ba9a 	.word	0x2005ba9a

0801b7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7c0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b7c4:	b089      	sub	sp, #36	@ 0x24
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	4680      	mov	r8, r0
 801b7ca:	460c      	mov	r4, r1
 801b7cc:	4615      	mov	r5, r2
 801b7ce:	dd0e      	ble.n	801b7ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b7d0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	dd0a      	ble.n	801b7ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b7d8:	4628      	mov	r0, r5
 801b7da:	f7ff ff5b 	bl	801b694 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b7de:	4621      	mov	r1, r4
 801b7e0:	f7fd fe80 	bl	80194e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b7e4:	69eb      	ldr	r3, [r5, #28]
 801b7e6:	b928      	cbnz	r0, 801b7f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b7e8:	461d      	mov	r5, r3
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d1f4      	bne.n	801b7d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b7ee:	b009      	add	sp, #36	@ 0x24
 801b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7f4:	ae04      	add	r6, sp, #16
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	f000 80b5 	beq.w	801b966 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b7fc:	682b      	ldr	r3, [r5, #0]
 801b7fe:	4629      	mov	r1, r5
 801b800:	68db      	ldr	r3, [r3, #12]
 801b802:	a802      	add	r0, sp, #8
 801b804:	4798      	blx	r3
 801b806:	4628      	mov	r0, r5
 801b808:	f7ff ff60 	bl	801b6cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b80c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b810:	4407      	add	r7, r0
 801b812:	4628      	mov	r0, r5
 801b814:	f7ff ff6e 	bl	801b6f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b818:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b81c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b820:	4418      	add	r0, r3
 801b822:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b826:	4621      	mov	r1, r4
 801b828:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b82c:	b23f      	sxth	r7, r7
 801b82e:	4630      	mov	r0, r6
 801b830:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b834:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b838:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b83c:	f7f8 fc0c 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 801b840:	4628      	mov	r0, r5
 801b842:	f7ff ff27 	bl	801b694 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b846:	4602      	mov	r2, r0
 801b848:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b84c:	ab06      	add	r3, sp, #24
 801b84e:	e883 0003 	stmia.w	r3, {r0, r1}
 801b852:	4611      	mov	r1, r2
 801b854:	4618      	mov	r0, r3
 801b856:	f7f8 fbff 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 801b85a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b85e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b862:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b866:	4299      	cmp	r1, r3
 801b868:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b86c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b870:	d10b      	bne.n	801b88a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b872:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b876:	4552      	cmp	r2, sl
 801b878:	d107      	bne.n	801b88a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b87a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b87e:	455a      	cmp	r2, fp
 801b880:	d103      	bne.n	801b88a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b882:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b886:	454a      	cmp	r2, r9
 801b888:	d06d      	beq.n	801b966 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b88a:	f1bb 0f00 	cmp.w	fp, #0
 801b88e:	dd65      	ble.n	801b95c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b890:	f1b9 0f00 	cmp.w	r9, #0
 801b894:	dd62      	ble.n	801b95c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b896:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b89a:	fa1f f08a 	uxth.w	r0, sl
 801b89e:	4552      	cmp	r2, sl
 801b8a0:	9000      	str	r0, [sp, #0]
 801b8a2:	da12      	bge.n	801b8ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b8a4:	9301      	str	r3, [sp, #4]
 801b8a6:	9b00      	ldr	r3, [sp, #0]
 801b8a8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b8ac:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b8b0:	1a9a      	subs	r2, r3, r2
 801b8b2:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b8b6:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b8ba:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b8be:	69ea      	ldr	r2, [r5, #28]
 801b8c0:	4631      	mov	r1, r6
 801b8c2:	4640      	mov	r0, r8
 801b8c4:	f7ff ff7a 	bl	801b7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b8c8:	9b01      	ldr	r3, [sp, #4]
 801b8ca:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b8ce:	b29f      	uxth	r7, r3
 801b8d0:	429a      	cmp	r2, r3
 801b8d2:	da0d      	bge.n	801b8f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b8d4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b8d8:	1aba      	subs	r2, r7, r2
 801b8da:	f8ad a012 	strh.w	sl, [sp, #18]
 801b8de:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b8e2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b8e6:	69ea      	ldr	r2, [r5, #28]
 801b8e8:	4631      	mov	r1, r6
 801b8ea:	4640      	mov	r0, r8
 801b8ec:	f7ff ff66 	bl	801b7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b8f0:	8822      	ldrh	r2, [r4, #0]
 801b8f2:	88a3      	ldrh	r3, [r4, #4]
 801b8f4:	445f      	add	r7, fp
 801b8f6:	4413      	add	r3, r2
 801b8f8:	b29b      	uxth	r3, r3
 801b8fa:	b2bf      	uxth	r7, r7
 801b8fc:	b23a      	sxth	r2, r7
 801b8fe:	b219      	sxth	r1, r3
 801b900:	4291      	cmp	r1, r2
 801b902:	dd0d      	ble.n	801b920 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b904:	1bdb      	subs	r3, r3, r7
 801b906:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b90a:	f8ad a012 	strh.w	sl, [sp, #18]
 801b90e:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b912:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b916:	69ea      	ldr	r2, [r5, #28]
 801b918:	4631      	mov	r1, r6
 801b91a:	4640      	mov	r0, r8
 801b91c:	f7ff ff4e 	bl	801b7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b920:	88e2      	ldrh	r2, [r4, #6]
 801b922:	8863      	ldrh	r3, [r4, #2]
 801b924:	4413      	add	r3, r2
 801b926:	9a00      	ldr	r2, [sp, #0]
 801b928:	b29b      	uxth	r3, r3
 801b92a:	444a      	add	r2, r9
 801b92c:	fa1f f982 	uxth.w	r9, r2
 801b930:	fa0f f289 	sxth.w	r2, r9
 801b934:	b219      	sxth	r1, r3
 801b936:	428a      	cmp	r2, r1
 801b938:	da15      	bge.n	801b966 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b93a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b93e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b942:	eba3 0309 	sub.w	r3, r3, r9
 801b946:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b94a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b94e:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b952:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b956:	69ea      	ldr	r2, [r5, #28]
 801b958:	4631      	mov	r1, r6
 801b95a:	e001      	b.n	801b960 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b95c:	4621      	mov	r1, r4
 801b95e:	69ea      	ldr	r2, [r5, #28]
 801b960:	4640      	mov	r0, r8
 801b962:	f7ff ff2b 	bl	801b7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b966:	4628      	mov	r0, r5
 801b968:	f7ff fe94 	bl	801b694 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b96c:	4633      	mov	r3, r6
 801b96e:	4602      	mov	r2, r0
 801b970:	6861      	ldr	r1, [r4, #4]
 801b972:	6820      	ldr	r0, [r4, #0]
 801b974:	c303      	stmia	r3!, {r0, r1}
 801b976:	4611      	mov	r1, r2
 801b978:	4630      	mov	r0, r6
 801b97a:	f7f8 fb6d 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 801b97e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b982:	2b00      	cmp	r3, #0
 801b984:	f77f af33 	ble.w	801b7ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b988:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	f77f af2e 	ble.w	801b7ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b992:	4628      	mov	r0, r5
 801b994:	f7ff fe9a 	bl	801b6cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b998:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b99c:	1a18      	subs	r0, r3, r0
 801b99e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b9a2:	4628      	mov	r0, r5
 801b9a4:	f7ff fea6 	bl	801b6f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b9a8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b9ac:	4631      	mov	r1, r6
 801b9ae:	1a18      	subs	r0, r3, r0
 801b9b0:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b9b4:	682b      	ldr	r3, [r5, #0]
 801b9b6:	4628      	mov	r0, r5
 801b9b8:	689b      	ldr	r3, [r3, #8]
 801b9ba:	4798      	blx	r3
 801b9bc:	e717      	b.n	801b7ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b9be <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b9be:	b570      	push	{r4, r5, r6, lr}
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	460c      	mov	r4, r1
 801b9c4:	b086      	sub	sp, #24
 801b9c6:	1d06      	adds	r6, r0, #4
 801b9c8:	4631      	mov	r1, r6
 801b9ca:	4605      	mov	r5, r0
 801b9cc:	a802      	add	r0, sp, #8
 801b9ce:	9301      	str	r3, [sp, #4]
 801b9d0:	f7ff f8fe 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b9d4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b9d8:	8822      	ldrh	r2, [r4, #0]
 801b9da:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801b9de:	1ad2      	subs	r2, r2, r3
 801b9e0:	8863      	ldrh	r3, [r4, #2]
 801b9e2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b9e6:	1a5b      	subs	r3, r3, r1
 801b9e8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b9ec:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b9f0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b9f4:	f8ad 1016 	strh.w	r1, [sp, #22]
 801b9f8:	aa01      	add	r2, sp, #4
 801b9fa:	a904      	add	r1, sp, #16
 801b9fc:	4630      	mov	r0, r6
 801b9fe:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ba02:	f7f8 fc01 	bl	8014208 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801ba06:	9a01      	ldr	r2, [sp, #4]
 801ba08:	b11a      	cbz	r2, 801ba12 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801ba0a:	4621      	mov	r1, r4
 801ba0c:	4628      	mov	r0, r5
 801ba0e:	f7ff fed5 	bl	801b7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ba12:	b006      	add	sp, #24
 801ba14:	bd70      	pop	{r4, r5, r6, pc}

0801ba16 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801ba16:	b530      	push	{r4, r5, lr}
 801ba18:	4602      	mov	r2, r0
 801ba1a:	b085      	sub	sp, #20
 801ba1c:	460d      	mov	r5, r1
 801ba1e:	466b      	mov	r3, sp
 801ba20:	4604      	mov	r4, r0
 801ba22:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801ba26:	6851      	ldr	r1, [r2, #4]
 801ba28:	c303      	stmia	r3!, {r0, r1}
 801ba2a:	4629      	mov	r1, r5
 801ba2c:	4668      	mov	r0, sp
 801ba2e:	f7f8 fb13 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 801ba32:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801ba36:	b12b      	cbz	r3, 801ba44 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801ba38:	4669      	mov	r1, sp
 801ba3a:	4620      	mov	r0, r4
 801ba3c:	f7ff ffbf 	bl	801b9be <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801ba40:	b005      	add	sp, #20
 801ba42:	bd30      	pop	{r4, r5, pc}
 801ba44:	3404      	adds	r4, #4
 801ba46:	4621      	mov	r1, r4
 801ba48:	a802      	add	r0, sp, #8
 801ba4a:	f7ff f8c1 	bl	801abd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ba4e:	f8bd 3000 	ldrh.w	r3, [sp]
 801ba52:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ba56:	4669      	mov	r1, sp
 801ba58:	1a9b      	subs	r3, r3, r2
 801ba5a:	f8ad 3000 	strh.w	r3, [sp]
 801ba5e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ba62:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ba66:	4620      	mov	r0, r4
 801ba68:	1a9b      	subs	r3, r3, r2
 801ba6a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ba6e:	f7f8 fb92 	bl	8014196 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801ba72:	e7e5      	b.n	801ba40 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801ba74 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ba74:	460b      	mov	r3, r1
 801ba76:	680a      	ldr	r2, [r1, #0]
 801ba78:	1d01      	adds	r1, r0, #4
 801ba7a:	6992      	ldr	r2, [r2, #24]
 801ba7c:	4618      	mov	r0, r3
 801ba7e:	4710      	bx	r2

0801ba80 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 801ba80:	4298      	cmp	r0, r3
 801ba82:	d200      	bcs.n	801ba86 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x6>
 801ba84:	b913      	cbnz	r3, 801ba8c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0xc>
 801ba86:	440a      	add	r2, r1
 801ba88:	b210      	sxth	r0, r2
 801ba8a:	4770      	bx	lr
 801ba8c:	ee07 0a90 	vmov	s15, r0
 801ba90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ba94:	ee07 3a90 	vmov	s15, r3
 801ba98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801baa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801baa4:	ee07 2a90 	vmov	s15, r2
 801baa8:	ee37 7a66 	vsub.f32	s14, s14, s13
 801baac:	eddf 4a11 	vldr	s9, [pc, #68]	@ 801baf4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x74>
 801bab0:	eddf 5a11 	vldr	s11, [pc, #68]	@ 801baf8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x78>
 801bab4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801bab8:	ee27 5a07 	vmul.f32	s10, s14, s14
 801babc:	eee7 5a24 	vfma.f32	s11, s14, s9
 801bac0:	ee07 1a90 	vmov	s15, r1
 801bac4:	eee5 6a25 	vfma.f32	s13, s10, s11
 801bac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bacc:	eee6 7a26 	vfma.f32	s15, s12, s13
 801bad0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bad4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801bad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801badc:	bfcc      	ite	gt
 801bade:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801bae2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801bae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801baea:	ee17 3a90 	vmov	r3, s15
 801baee:	b218      	sxth	r0, r3
 801baf0:	4770      	bx	lr
 801baf2:	bf00      	nop
 801baf4:	402ce6b0 	.word	0x402ce6b0
 801baf8:	3fd9cd60 	.word	0x3fd9cd60

0801bafc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801bafc:	4298      	cmp	r0, r3
 801bafe:	d200      	bcs.n	801bb02 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801bb00:	b913      	cbnz	r3, 801bb08 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801bb02:	440a      	add	r2, r1
 801bb04:	b210      	sxth	r0, r2
 801bb06:	4770      	bx	lr
 801bb08:	ee07 0a90 	vmov	s15, r0
 801bb0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb10:	ee07 3a90 	vmov	s15, r3
 801bb14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bb20:	ee07 2a90 	vmov	s15, r2
 801bb24:	ee37 7a66 	vsub.f32	s14, s14, s13
 801bb28:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801bb2c:	ee67 5a07 	vmul.f32	s11, s14, s14
 801bb30:	ee07 1a90 	vmov	s15, r1
 801bb34:	eee5 6a87 	vfma.f32	s13, s11, s14
 801bb38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb3c:	eee6 7a26 	vfma.f32	s15, s12, s13
 801bb40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bb44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801bb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb4c:	bfcc      	ite	gt
 801bb4e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801bb52:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801bb56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bb5a:	ee17 3a90 	vmov	r3, s15
 801bb5e:	b218      	sxth	r0, r3
 801bb60:	4770      	bx	lr

0801bb62 <_ZN8touchgfx12TextProviderC1Ev>:
 801bb62:	b538      	push	{r3, r4, r5, lr}
 801bb64:	2500      	movs	r5, #0
 801bb66:	2302      	movs	r3, #2
 801bb68:	4604      	mov	r4, r0
 801bb6a:	e9c0 5500 	strd	r5, r5, [r0]
 801bb6e:	7403      	strb	r3, [r0, #16]
 801bb70:	6145      	str	r5, [r0, #20]
 801bb72:	7605      	strb	r5, [r0, #24]
 801bb74:	83c5      	strh	r5, [r0, #30]
 801bb76:	8405      	strh	r5, [r0, #32]
 801bb78:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801bb7a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801bb7c:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801bb7e:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801bb82:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801bb86:	220e      	movs	r2, #14
 801bb88:	4629      	mov	r1, r5
 801bb8a:	304c      	adds	r0, #76	@ 0x4c
 801bb8c:	f011 fa12 	bl	802cfb4 <memset>
 801bb90:	2301      	movs	r3, #1
 801bb92:	4620      	mov	r0, r4
 801bb94:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801bb98:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801bb9c:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801bba0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801bba4:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801bba8:	f7f5 f9d4 	bl	8010f54 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801bbac:	4620      	mov	r0, r4
 801bbae:	bd38      	pop	{r3, r4, r5, pc}

0801bbb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801bbb0:	b530      	push	{r4, r5, lr}
 801bbb2:	2500      	movs	r5, #0
 801bbb4:	2401      	movs	r4, #1
 801bbb6:	6843      	ldr	r3, [r0, #4]
 801bbb8:	b913      	cbnz	r3, 801bbc0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801bbba:	6803      	ldr	r3, [r0, #0]
 801bbbc:	b313      	cbz	r3, 801bc04 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801bbbe:	6043      	str	r3, [r0, #4]
 801bbc0:	7e03      	ldrb	r3, [r0, #24]
 801bbc2:	b143      	cbz	r3, 801bbd6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801bbc4:	6943      	ldr	r3, [r0, #20]
 801bbc6:	b12b      	cbz	r3, 801bbd4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bbc8:	881a      	ldrh	r2, [r3, #0]
 801bbca:	b11a      	cbz	r2, 801bbd4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bbcc:	1c9a      	adds	r2, r3, #2
 801bbce:	6142      	str	r2, [r0, #20]
 801bbd0:	8818      	ldrh	r0, [r3, #0]
 801bbd2:	bd30      	pop	{r4, r5, pc}
 801bbd4:	7605      	strb	r5, [r0, #24]
 801bbd6:	6843      	ldr	r3, [r0, #4]
 801bbd8:	8819      	ldrh	r1, [r3, #0]
 801bbda:	b199      	cbz	r1, 801bc04 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801bbdc:	1c9a      	adds	r2, r3, #2
 801bbde:	2902      	cmp	r1, #2
 801bbe0:	6042      	str	r2, [r0, #4]
 801bbe2:	d1f5      	bne.n	801bbd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801bbe4:	7c03      	ldrb	r3, [r0, #16]
 801bbe6:	2b01      	cmp	r3, #1
 801bbe8:	d8e5      	bhi.n	801bbb6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bbea:	1c5a      	adds	r2, r3, #1
 801bbec:	7402      	strb	r2, [r0, #16]
 801bbee:	3302      	adds	r3, #2
 801bbf0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801bbf4:	6143      	str	r3, [r0, #20]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d0dd      	beq.n	801bbb6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bbfa:	881b      	ldrh	r3, [r3, #0]
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d0da      	beq.n	801bbb6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bc00:	7604      	strb	r4, [r0, #24]
 801bc02:	e7d8      	b.n	801bbb6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bc04:	2000      	movs	r0, #0
 801bc06:	e7e4      	b.n	801bbd2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801bc08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801bc08:	6001      	str	r1, [r0, #0]
 801bc0a:	2100      	movs	r1, #0
 801bc0c:	b430      	push	{r4, r5}
 801bc0e:	6041      	str	r1, [r0, #4]
 801bc10:	6815      	ldr	r5, [r2, #0]
 801bc12:	6085      	str	r5, [r0, #8]
 801bc14:	6852      	ldr	r2, [r2, #4]
 801bc16:	6443      	str	r3, [r0, #68]	@ 0x44
 801bc18:	9b02      	ldr	r3, [sp, #8]
 801bc1a:	60c2      	str	r2, [r0, #12]
 801bc1c:	7401      	strb	r1, [r0, #16]
 801bc1e:	6141      	str	r1, [r0, #20]
 801bc20:	7601      	strb	r1, [r0, #24]
 801bc22:	8701      	strh	r1, [r0, #56]	@ 0x38
 801bc24:	8401      	strh	r1, [r0, #32]
 801bc26:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801bc2a:	6483      	str	r3, [r0, #72]	@ 0x48
 801bc2c:	bc30      	pop	{r4, r5}
 801bc2e:	f7f5 b991 	b.w	8010f54 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801bc32 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801bc32:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc34:	4605      	mov	r5, r0
 801bc36:	4608      	mov	r0, r1
 801bc38:	b1e9      	cbz	r1, 801bc76 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801bc3a:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801bc3e:	460b      	mov	r3, r1
 801bc40:	4622      	mov	r2, r4
 801bc42:	f101 0708 	add.w	r7, r1, #8
 801bc46:	4626      	mov	r6, r4
 801bc48:	6818      	ldr	r0, [r3, #0]
 801bc4a:	6859      	ldr	r1, [r3, #4]
 801bc4c:	3308      	adds	r3, #8
 801bc4e:	c603      	stmia	r6!, {r0, r1}
 801bc50:	42bb      	cmp	r3, r7
 801bc52:	4634      	mov	r4, r6
 801bc54:	d1f7      	bne.n	801bc46 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801bc56:	6818      	ldr	r0, [r3, #0]
 801bc58:	6030      	str	r0, [r6, #0]
 801bc5a:	4610      	mov	r0, r2
 801bc5c:	889b      	ldrh	r3, [r3, #4]
 801bc5e:	80b3      	strh	r3, [r6, #4]
 801bc60:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801bc64:	015b      	lsls	r3, r3, #5
 801bc66:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801bc6a:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801bc6e:	430b      	orrs	r3, r1
 801bc70:	425b      	negs	r3, r3
 801bc72:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801bc76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bc78 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bc78:	b538      	push	{r3, r4, r5, lr}
 801bc7a:	460c      	mov	r4, r1
 801bc7c:	6811      	ldr	r1, [r2, #0]
 801bc7e:	4610      	mov	r0, r2
 801bc80:	68cd      	ldr	r5, [r1, #12]
 801bc82:	4619      	mov	r1, r3
 801bc84:	47a8      	blx	r5
 801bc86:	2800      	cmp	r0, #0
 801bc88:	bf08      	it	eq
 801bc8a:	4620      	moveq	r0, r4
 801bc8c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801bc90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801bc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc94:	468c      	mov	ip, r1
 801bc96:	4605      	mov	r5, r0
 801bc98:	4614      	mov	r4, r2
 801bc9a:	b942      	cbnz	r2, 801bcae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801bc9c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801bca0:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801bca4:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801bca8:	4620      	mov	r0, r4
 801bcaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcae:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801bcb2:	7b50      	ldrb	r0, [r2, #13]
 801bcb4:	8893      	ldrh	r3, [r2, #4]
 801bcb6:	0106      	lsls	r6, r0, #4
 801bcb8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801bcbc:	79e6      	ldrb	r6, [r4, #7]
 801bcbe:	4316      	orrs	r6, r2
 801bcc0:	185a      	adds	r2, r3, r1
 801bcc2:	b291      	uxth	r1, r2
 801bcc4:	291d      	cmp	r1, #29
 801bcc6:	b2b7      	uxth	r7, r6
 801bcc8:	d87d      	bhi.n	801bdc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801bcca:	2201      	movs	r2, #1
 801bccc:	408a      	lsls	r2, r1
 801bcce:	498a      	ldr	r1, [pc, #552]	@ (801bef8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 801bcd0:	10f6      	asrs	r6, r6, #3
 801bcd2:	420a      	tst	r2, r1
 801bcd4:	d12d      	bne.n	801bd32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801bcd6:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801bcda:	d074      	beq.n	801bdc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801bcdc:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801bce0:	4623      	mov	r3, r4
 801bce2:	f104 0e08 	add.w	lr, r4, #8
 801bce6:	4614      	mov	r4, r2
 801bce8:	4694      	mov	ip, r2
 801bcea:	6818      	ldr	r0, [r3, #0]
 801bcec:	6859      	ldr	r1, [r3, #4]
 801bcee:	3308      	adds	r3, #8
 801bcf0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bcf4:	4573      	cmp	r3, lr
 801bcf6:	4662      	mov	r2, ip
 801bcf8:	d1f6      	bne.n	801bce8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801bcfa:	6818      	ldr	r0, [r3, #0]
 801bcfc:	f8cc 0000 	str.w	r0, [ip]
 801bd00:	889b      	ldrh	r3, [r3, #4]
 801bd02:	f8ac 3004 	strh.w	r3, [ip, #4]
 801bd06:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801bd0a:	b2b3      	uxth	r3, r6
 801bd0c:	1aca      	subs	r2, r1, r3
 801bd0e:	b292      	uxth	r2, r2
 801bd10:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801bd14:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801bd18:	10d2      	asrs	r2, r2, #3
 801bd1a:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801bd1e:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801bd22:	4302      	orrs	r2, r0
 801bd24:	1bcf      	subs	r7, r1, r7
 801bd26:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 801bd2a:	1afb      	subs	r3, r7, r3
 801bd2c:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 801bd30:	e7ba      	b.n	801bca8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801bd32:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801bd36:	4623      	mov	r3, r4
 801bd38:	f104 0808 	add.w	r8, r4, #8
 801bd3c:	4614      	mov	r4, r2
 801bd3e:	4696      	mov	lr, r2
 801bd40:	6818      	ldr	r0, [r3, #0]
 801bd42:	6859      	ldr	r1, [r3, #4]
 801bd44:	3308      	adds	r3, #8
 801bd46:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801bd4a:	4543      	cmp	r3, r8
 801bd4c:	4672      	mov	r2, lr
 801bd4e:	d1f6      	bne.n	801bd3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xae>
 801bd50:	6818      	ldr	r0, [r3, #0]
 801bd52:	f8ce 0000 	str.w	r0, [lr]
 801bd56:	889b      	ldrh	r3, [r3, #4]
 801bd58:	f8ae 3004 	strh.w	r3, [lr, #4]
 801bd5c:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 801bd5e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801bd62:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801bd64:	f640 6333 	movw	r3, #3635	@ 0xe33
 801bd68:	4299      	cmp	r1, r3
 801bd6a:	d111      	bne.n	801bd90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x100>
 801bd6c:	f8dc 3000 	ldr.w	r3, [ip]
 801bd70:	4660      	mov	r0, ip
 801bd72:	68db      	ldr	r3, [r3, #12]
 801bd74:	4798      	blx	r3
 801bd76:	7b41      	ldrb	r1, [r0, #13]
 801bd78:	00cb      	lsls	r3, r1, #3
 801bd7a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bd7e:	7a03      	ldrb	r3, [r0, #8]
 801bd80:	4313      	orrs	r3, r2
 801bd82:	064a      	lsls	r2, r1, #25
 801bd84:	bf44      	itt	mi
 801bd86:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bd8a:	b21b      	sxthmi	r3, r3
 801bd8c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801bd90:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801bd94:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801bd98:	443b      	add	r3, r7
 801bd9a:	4433      	add	r3, r6
 801bd9c:	b29b      	uxth	r3, r3
 801bd9e:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801bda2:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801bda6:	10db      	asrs	r3, r3, #3
 801bda8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801bdac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801bdb0:	4313      	orrs	r3, r2
 801bdb2:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801bdb6:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801bdba:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801bdbe:	1a9b      	subs	r3, r3, r2
 801bdc0:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801bdc4:	e770      	b.n	801bca8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801bdc6:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801bdca:	f023 0204 	bic.w	r2, r3, #4
 801bdce:	428a      	cmp	r2, r1
 801bdd0:	d003      	beq.n	801bdda <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14a>
 801bdd2:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801bdd6:	4293      	cmp	r3, r2
 801bdd8:	d137      	bne.n	801be4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801bdda:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801bdde:	4622      	mov	r2, r4
 801bde0:	f104 0808 	add.w	r8, r4, #8
 801bde4:	4634      	mov	r4, r6
 801bde6:	46b6      	mov	lr, r6
 801bde8:	6810      	ldr	r0, [r2, #0]
 801bdea:	6851      	ldr	r1, [r2, #4]
 801bdec:	3208      	adds	r2, #8
 801bdee:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801bdf2:	4542      	cmp	r2, r8
 801bdf4:	4676      	mov	r6, lr
 801bdf6:	d1f6      	bne.n	801bde6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801bdf8:	6810      	ldr	r0, [r2, #0]
 801bdfa:	3b01      	subs	r3, #1
 801bdfc:	f8ce 0000 	str.w	r0, [lr]
 801be00:	8892      	ldrh	r2, [r2, #4]
 801be02:	b29b      	uxth	r3, r3
 801be04:	f8ae 2004 	strh.w	r2, [lr, #4]
 801be08:	4621      	mov	r1, r4
 801be0a:	4662      	mov	r2, ip
 801be0c:	4628      	mov	r0, r5
 801be0e:	f7ff ff33 	bl	801bc78 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801be12:	7b41      	ldrb	r1, [r0, #13]
 801be14:	00cb      	lsls	r3, r1, #3
 801be16:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801be1a:	7a03      	ldrb	r3, [r0, #8]
 801be1c:	0648      	lsls	r0, r1, #25
 801be1e:	ea43 0302 	orr.w	r3, r3, r2
 801be22:	bf44      	itt	mi
 801be24:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801be28:	b21b      	sxthmi	r3, r3
 801be2a:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801be2e:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801be32:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 801be36:	005b      	lsls	r3, r3, #1
 801be38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801be3c:	4313      	orrs	r3, r2
 801be3e:	115a      	asrs	r2, r3, #5
 801be40:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801be44:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801be48:	e046      	b.n	801bed8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x248>
 801be4a:	00c2      	lsls	r2, r0, #3
 801be4c:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801be50:	7a22      	ldrb	r2, [r4, #8]
 801be52:	430a      	orrs	r2, r1
 801be54:	0641      	lsls	r1, r0, #25
 801be56:	f640 6109 	movw	r1, #3593	@ 0xe09
 801be5a:	bf44      	itt	mi
 801be5c:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801be60:	b212      	sxthmi	r2, r2
 801be62:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801be66:	f023 0210 	bic.w	r2, r3, #16
 801be6a:	428a      	cmp	r2, r1
 801be6c:	d003      	beq.n	801be76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e6>
 801be6e:	f640 6213 	movw	r2, #3603	@ 0xe13
 801be72:	4293      	cmp	r3, r2
 801be74:	d13d      	bne.n	801bef2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x262>
 801be76:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801be7a:	4696      	mov	lr, r2
 801be7c:	f104 0808 	add.w	r8, r4, #8
 801be80:	4616      	mov	r6, r2
 801be82:	6820      	ldr	r0, [r4, #0]
 801be84:	6861      	ldr	r1, [r4, #4]
 801be86:	3408      	adds	r4, #8
 801be88:	c603      	stmia	r6!, {r0, r1}
 801be8a:	4544      	cmp	r4, r8
 801be8c:	4632      	mov	r2, r6
 801be8e:	d1f7      	bne.n	801be80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f0>
 801be90:	6820      	ldr	r0, [r4, #0]
 801be92:	6030      	str	r0, [r6, #0]
 801be94:	88a1      	ldrh	r1, [r4, #4]
 801be96:	4628      	mov	r0, r5
 801be98:	80b1      	strh	r1, [r6, #4]
 801be9a:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801be9e:	4671      	mov	r1, lr
 801bea0:	0076      	lsls	r6, r6, #1
 801bea2:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801bea6:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801beaa:	4674      	mov	r4, lr
 801beac:	4316      	orrs	r6, r2
 801beae:	f640 6213 	movw	r2, #3603	@ 0xe13
 801beb2:	4293      	cmp	r3, r2
 801beb4:	bf1a      	itte	ne
 801beb6:	f103 33ff 	addne.w	r3, r3, #4294967295
 801beba:	b29b      	uxthne	r3, r3
 801bebc:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801bec0:	4662      	mov	r2, ip
 801bec2:	f7ff fed9 	bl	801bc78 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bec6:	7b43      	ldrb	r3, [r0, #13]
 801bec8:	7a82      	ldrb	r2, [r0, #10]
 801beca:	005b      	lsls	r3, r3, #1
 801becc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bed0:	4313      	orrs	r3, r2
 801bed2:	1af6      	subs	r6, r6, r3
 801bed4:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801bed8:	7b61      	ldrb	r1, [r4, #13]
 801beda:	00cb      	lsls	r3, r1, #3
 801bedc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bee0:	7a23      	ldrb	r3, [r4, #8]
 801bee2:	4313      	orrs	r3, r2
 801bee4:	064a      	lsls	r2, r1, #25
 801bee6:	bf44      	itt	mi
 801bee8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801beec:	b21b      	sxthmi	r3, r3
 801beee:	1bdb      	subs	r3, r3, r7
 801bef0:	e71c      	b.n	801bd2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801bef2:	2300      	movs	r3, #0
 801bef4:	e7a6      	b.n	801be44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>
 801bef6:	bf00      	nop
 801bef8:	3fc00079 	.word	0x3fc00079

0801befc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801befc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf00:	4604      	mov	r4, r0
 801bf02:	b942      	cbnz	r2, 801bf16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bf04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801bf08:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801bf0c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801bf10:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801bf14:	e047      	b.n	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bf16:	7b51      	ldrb	r1, [r2, #13]
 801bf18:	8893      	ldrh	r3, [r2, #4]
 801bf1a:	010d      	lsls	r5, r1, #4
 801bf1c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801bf20:	79d5      	ldrb	r5, [r2, #7]
 801bf22:	4305      	orrs	r5, r0
 801bf24:	2d04      	cmp	r5, #4
 801bf26:	bfcc      	ite	gt
 801bf28:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801bf2c:	f04f 0e01 	movle.w	lr, #1
 801bf30:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801bf34:	f200 80ab 	bhi.w	801c08e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801bf38:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801bf3c:	4283      	cmp	r3, r0
 801bf3e:	d216      	bcs.n	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf40:	f240 605b 	movw	r0, #1627	@ 0x65b
 801bf44:	4283      	cmp	r3, r0
 801bf46:	d859      	bhi.n	801bffc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801bf48:	f240 6057 	movw	r0, #1623	@ 0x657
 801bf4c:	4283      	cmp	r3, r0
 801bf4e:	d20e      	bcs.n	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf50:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801bf54:	d24a      	bcs.n	801bfec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801bf56:	f240 604e 	movw	r0, #1614	@ 0x64e
 801bf5a:	4283      	cmp	r3, r0
 801bf5c:	d207      	bcs.n	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf5e:	f240 601a 	movw	r0, #1562	@ 0x61a
 801bf62:	4283      	cmp	r3, r0
 801bf64:	d02a      	beq.n	801bfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf66:	d821      	bhi.n	801bfac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801bf68:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801bf6c:	d35b      	bcc.n	801c026 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bf6e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801bf72:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801bf76:	f040 80d0 	bne.w	801c11a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bf7a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801bf7e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801bf82:	f040 80ca 	bne.w	801c11a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bf86:	00cb      	lsls	r3, r1, #3
 801bf88:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801bf8c:	7a13      	ldrb	r3, [r2, #8]
 801bf8e:	0649      	lsls	r1, r1, #25
 801bf90:	ea43 0300 	orr.w	r3, r3, r0
 801bf94:	bf44      	itt	mi
 801bf96:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bf9a:	b21b      	sxthmi	r3, r3
 801bf9c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801bfa0:	1b5d      	subs	r5, r3, r5
 801bfa2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801bfa6:	4610      	mov	r0, r2
 801bfa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bfac:	f240 604b 	movw	r0, #1611	@ 0x64b
 801bfb0:	4283      	cmp	r3, r0
 801bfb2:	d338      	bcc.n	801c026 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bfb4:	f240 604c 	movw	r0, #1612	@ 0x64c
 801bfb8:	4283      	cmp	r3, r0
 801bfba:	d9d8      	bls.n	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bfbc:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801bfc0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801bfc4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801bfc8:	f040 80f2 	bne.w	801c1b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801bfcc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801bfd0:	f040 80ee 	bne.w	801c1b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801bfd4:	00cb      	lsls	r3, r1, #3
 801bfd6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801bfda:	7a13      	ldrb	r3, [r2, #8]
 801bfdc:	064e      	lsls	r6, r1, #25
 801bfde:	ea43 0300 	orr.w	r3, r3, r0
 801bfe2:	bf44      	itt	mi
 801bfe4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bfe8:	b21b      	sxthmi	r3, r3
 801bfea:	e7d9      	b.n	801bfa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801bfec:	f240 6054 	movw	r0, #1620	@ 0x654
 801bff0:	4283      	cmp	r3, r0
 801bff2:	d8e3      	bhi.n	801bfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bff4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801bff8:	d9e0      	bls.n	801bfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bffa:	e7b8      	b.n	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bffc:	f240 6074 	movw	r0, #1652	@ 0x674
 801c000:	4283      	cmp	r3, r0
 801c002:	d0b4      	beq.n	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c004:	d82d      	bhi.n	801c062 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801c006:	f240 605e 	movw	r0, #1630	@ 0x65e
 801c00a:	4283      	cmp	r3, r0
 801c00c:	d804      	bhi.n	801c018 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801c00e:	f240 605d 	movw	r0, #1629	@ 0x65d
 801c012:	4283      	cmp	r3, r0
 801c014:	d3d2      	bcc.n	801bfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c016:	e7aa      	b.n	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c018:	f240 605f 	movw	r0, #1631	@ 0x65f
 801c01c:	4283      	cmp	r3, r0
 801c01e:	d0cd      	beq.n	801bfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c020:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801c024:	d0a3      	beq.n	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c026:	00cb      	lsls	r3, r1, #3
 801c028:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801c02c:	7a13      	ldrb	r3, [r2, #8]
 801c02e:	0649      	lsls	r1, r1, #25
 801c030:	ea43 0300 	orr.w	r3, r3, r0
 801c034:	bf44      	itt	mi
 801c036:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c03a:	b21b      	sxthmi	r3, r3
 801c03c:	1b5d      	subs	r5, r3, r5
 801c03e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c042:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c046:	7b53      	ldrb	r3, [r2, #13]
 801c048:	015b      	lsls	r3, r3, #5
 801c04a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801c04e:	7993      	ldrb	r3, [r2, #6]
 801c050:	430b      	orrs	r3, r1
 801c052:	2105      	movs	r1, #5
 801c054:	005b      	lsls	r3, r3, #1
 801c056:	fb93 f3f1 	sdiv	r3, r3, r1
 801c05a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c05e:	440b      	add	r3, r1
 801c060:	e756      	b.n	801bf10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c062:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801c066:	4283      	cmp	r3, r0
 801c068:	d809      	bhi.n	801c07e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801c06a:	f240 60df 	movw	r0, #1759	@ 0x6df
 801c06e:	4283      	cmp	r3, r0
 801c070:	f4bf af7d 	bcs.w	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c074:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801c078:	2b05      	cmp	r3, #5
 801c07a:	d8d4      	bhi.n	801c026 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c07c:	e777      	b.n	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c07e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801c082:	4283      	cmp	r3, r0
 801c084:	d09a      	beq.n	801bfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c086:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801c08a:	4283      	cmp	r3, r0
 801c08c:	e7ca      	b.n	801c024 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c08e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801c092:	d22b      	bcs.n	801c0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801c094:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801c098:	4283      	cmp	r3, r0
 801c09a:	d28f      	bcs.n	801bfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c09c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801c0a0:	4283      	cmp	r3, r0
 801c0a2:	d816      	bhi.n	801c0d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801c0a4:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801c0a8:	4283      	cmp	r3, r0
 801c0aa:	f4bf af60 	bcs.w	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0ae:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801c0b2:	4283      	cmp	r3, r0
 801c0b4:	d80a      	bhi.n	801c0cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801c0b6:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801c0ba:	4283      	cmp	r3, r0
 801c0bc:	f4bf af57 	bcs.w	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0c0:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801c0c4:	4283      	cmp	r3, r0
 801c0c6:	f43f af79 	beq.w	801bfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0ca:	e7ac      	b.n	801c026 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c0cc:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801c0d0:	e7f8      	b.n	801c0c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801c0d2:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801c0d6:	4283      	cmp	r3, r0
 801c0d8:	d802      	bhi.n	801c0e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801c0da:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801c0de:	e798      	b.n	801c012 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801c0e0:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801c0e4:	4283      	cmp	r3, r0
 801c0e6:	f47f af42 	bne.w	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c0ea:	e767      	b.n	801bfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0ec:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801c0f0:	4283      	cmp	r3, r0
 801c0f2:	f43f af63 	beq.w	801bfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c0f6:	d802      	bhi.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801c0f8:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801c0fc:	e7f2      	b.n	801c0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801c0fe:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801c102:	4283      	cmp	r3, r0
 801c104:	d805      	bhi.n	801c112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801c106:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801c10a:	4283      	cmp	r3, r0
 801c10c:	f4ff af2f 	bcc.w	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c110:	e754      	b.n	801bfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c112:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801c116:	4283      	cmp	r3, r0
 801c118:	e7af      	b.n	801c07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801c11a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801c11e:	4617      	mov	r7, r2
 801c120:	4666      	mov	r6, ip
 801c122:	f102 0808 	add.w	r8, r2, #8
 801c126:	46e6      	mov	lr, ip
 801c128:	6838      	ldr	r0, [r7, #0]
 801c12a:	6879      	ldr	r1, [r7, #4]
 801c12c:	3708      	adds	r7, #8
 801c12e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c132:	4547      	cmp	r7, r8
 801c134:	46f4      	mov	ip, lr
 801c136:	d1f6      	bne.n	801c126 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801c138:	6838      	ldr	r0, [r7, #0]
 801c13a:	f8ce 0000 	str.w	r0, [lr]
 801c13e:	88b9      	ldrh	r1, [r7, #4]
 801c140:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c144:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801c148:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c14c:	d009      	beq.n	801c162 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801c14e:	7b51      	ldrb	r1, [r2, #13]
 801c150:	7992      	ldrb	r2, [r2, #6]
 801c152:	0149      	lsls	r1, r1, #5
 801c154:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c158:	4311      	orrs	r1, r2
 801c15a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c15e:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801c162:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c166:	b2ad      	uxth	r5, r5
 801c168:	d00d      	beq.n	801c186 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801c16a:	442b      	add	r3, r5
 801c16c:	b29b      	uxth	r3, r3
 801c16e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801c172:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801c176:	10db      	asrs	r3, r3, #3
 801c178:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801c17c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801c180:	4313      	orrs	r3, r2
 801c182:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801c186:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801c18a:	00cb      	lsls	r3, r1, #3
 801c18c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c190:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801c194:	064f      	lsls	r7, r1, #25
 801c196:	ea43 0302 	orr.w	r3, r3, r2
 801c19a:	bf44      	itt	mi
 801c19c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c1a0:	b21b      	sxthmi	r3, r3
 801c1a2:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c1a6:	1b5b      	subs	r3, r3, r5
 801c1a8:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801c1ac:	4632      	mov	r2, r6
 801c1ae:	e6fa      	b.n	801bfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801c1b0:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801c1b4:	4617      	mov	r7, r2
 801c1b6:	4666      	mov	r6, ip
 801c1b8:	f102 0908 	add.w	r9, r2, #8
 801c1bc:	46e0      	mov	r8, ip
 801c1be:	6838      	ldr	r0, [r7, #0]
 801c1c0:	6879      	ldr	r1, [r7, #4]
 801c1c2:	3708      	adds	r7, #8
 801c1c4:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c1c8:	454f      	cmp	r7, r9
 801c1ca:	46c4      	mov	ip, r8
 801c1cc:	d1f6      	bne.n	801c1bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801c1ce:	6838      	ldr	r0, [r7, #0]
 801c1d0:	f8c8 0000 	str.w	r0, [r8]
 801c1d4:	88b9      	ldrh	r1, [r7, #4]
 801c1d6:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c1da:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801c1de:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c1e2:	d009      	beq.n	801c1f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801c1e4:	7b51      	ldrb	r1, [r2, #13]
 801c1e6:	7992      	ldrb	r2, [r2, #6]
 801c1e8:	0149      	lsls	r1, r1, #5
 801c1ea:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c1ee:	4311      	orrs	r1, r2
 801c1f0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c1f4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801c1f8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c1fc:	d00e      	beq.n	801c21c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801c1fe:	eba3 030e 	sub.w	r3, r3, lr
 801c202:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801c206:	b29b      	uxth	r3, r3
 801c208:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801c20c:	10db      	asrs	r3, r3, #3
 801c20e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801c212:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801c216:	4313      	orrs	r3, r2
 801c218:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801c21c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801c220:	00cb      	lsls	r3, r1, #3
 801c222:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c226:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801c22a:	0648      	lsls	r0, r1, #25
 801c22c:	ea43 0302 	orr.w	r3, r3, r2
 801c230:	bf44      	itt	mi
 801c232:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c236:	b21b      	sxthmi	r3, r3
 801c238:	1b5d      	subs	r5, r3, r5
 801c23a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c23e:	e7b5      	b.n	801c1ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801c240 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c244:	461e      	mov	r6, r3
 801c246:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c248:	4604      	mov	r4, r0
 801c24a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c24e:	4617      	mov	r7, r2
 801c250:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c254:	f7f4 fdd8 	bl	8010e08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c258:	4605      	mov	r5, r0
 801c25a:	b918      	cbnz	r0, 801c264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801c25c:	6030      	str	r0, [r6, #0]
 801c25e:	4628      	mov	r0, r5
 801c260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c264:	683b      	ldr	r3, [r7, #0]
 801c266:	4601      	mov	r1, r0
 801c268:	68db      	ldr	r3, [r3, #12]
 801c26a:	4638      	mov	r0, r7
 801c26c:	4798      	blx	r3
 801c26e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801c272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c276:	4602      	mov	r2, r0
 801c278:	6030      	str	r0, [r6, #0]
 801c27a:	d213      	bcs.n	801c2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801c27c:	4643      	mov	r3, r8
 801c27e:	4639      	mov	r1, r7
 801c280:	4620      	mov	r0, r4
 801c282:	f7ff fe3b 	bl	801befc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c286:	6030      	str	r0, [r6, #0]
 801c288:	6833      	ldr	r3, [r6, #0]
 801c28a:	b143      	cbz	r3, 801c29e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801c28c:	7b5a      	ldrb	r2, [r3, #13]
 801c28e:	7a9b      	ldrb	r3, [r3, #10]
 801c290:	0052      	lsls	r2, r2, #1
 801c292:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801c296:	4313      	orrs	r3, r2
 801c298:	bf0c      	ite	eq
 801c29a:	2301      	moveq	r3, #1
 801c29c:	2300      	movne	r3, #0
 801c29e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801c2a2:	e7dc      	b.n	801c25e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801c2a4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801c2a8:	b29b      	uxth	r3, r3
 801c2aa:	2b7f      	cmp	r3, #127	@ 0x7f
 801c2ac:	d804      	bhi.n	801c2b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801c2ae:	4639      	mov	r1, r7
 801c2b0:	4620      	mov	r0, r4
 801c2b2:	f7ff fced 	bl	801bc90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c2b6:	e7e6      	b.n	801c286 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801c2b8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d0e3      	beq.n	801c288 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c2c0:	f640 1302 	movw	r3, #2306	@ 0x902
 801c2c4:	429d      	cmp	r5, r3
 801c2c6:	d1df      	bne.n	801c288 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c2c8:	4601      	mov	r1, r0
 801c2ca:	4620      	mov	r0, r4
 801c2cc:	f7ff fcb1 	bl	801bc32 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c2d0:	e7d9      	b.n	801c286 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801c2d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c2d2:	b510      	push	{r4, lr}
 801c2d4:	4604      	mov	r4, r0
 801c2d6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801c2da:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c2dc:	b1f1      	cbz	r1, 801c31c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801c2de:	2b0a      	cmp	r3, #10
 801c2e0:	d02f      	beq.n	801c342 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801c2e2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801c2e4:	3901      	subs	r1, #1
 801c2e6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c2ea:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801c2ec:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801c2f0:	1c51      	adds	r1, r2, #1
 801c2f2:	b289      	uxth	r1, r1
 801c2f4:	2901      	cmp	r1, #1
 801c2f6:	bf84      	itt	hi
 801c2f8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c2fc:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801c2fe:	f103 0201 	add.w	r2, r3, #1
 801c302:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c304:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c306:	bf98      	it	ls
 801c308:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801c30a:	4413      	add	r3, r2
 801c30c:	b29b      	uxth	r3, r3
 801c30e:	2b09      	cmp	r3, #9
 801c310:	bf88      	it	hi
 801c312:	3b0a      	subhi	r3, #10
 801c314:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c318:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c31a:	e7dc      	b.n	801c2d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c31c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c31e:	2b0a      	cmp	r3, #10
 801c320:	d00f      	beq.n	801c342 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801c322:	4620      	mov	r0, r4
 801c324:	f7ff fc44 	bl	801bbb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c328:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c32a:	1c5a      	adds	r2, r3, #1
 801c32c:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c32e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c330:	4413      	add	r3, r2
 801c332:	b29b      	uxth	r3, r3
 801c334:	2b09      	cmp	r3, #9
 801c336:	bf88      	it	hi
 801c338:	3b0a      	subhi	r3, #10
 801c33a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c33e:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c340:	e7ec      	b.n	801c31c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801c342:	bd10      	pop	{r4, pc}

0801c344 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c344:	b538      	push	{r3, r4, r5, lr}
 801c346:	4604      	mov	r4, r0
 801c348:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c34a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801c34e:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801c350:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801c352:	3a01      	subs	r2, #1
 801c354:	8702      	strh	r2, [r0, #56]	@ 0x38
 801c356:	1c5a      	adds	r2, r3, #1
 801c358:	b292      	uxth	r2, r2
 801c35a:	2a09      	cmp	r2, #9
 801c35c:	bf86      	itte	hi
 801c35e:	3b09      	subhi	r3, #9
 801c360:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801c362:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801c364:	f7ff ffb5 	bl	801c2d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c368:	8c23      	ldrh	r3, [r4, #32]
 801c36a:	2b01      	cmp	r3, #1
 801c36c:	bf9c      	itt	ls
 801c36e:	3301      	addls	r3, #1
 801c370:	8423      	strhls	r3, [r4, #32]
 801c372:	8be3      	ldrh	r3, [r4, #30]
 801c374:	b90b      	cbnz	r3, 801c37a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801c376:	2302      	movs	r3, #2
 801c378:	83e3      	strh	r3, [r4, #30]
 801c37a:	8be3      	ldrh	r3, [r4, #30]
 801c37c:	4628      	mov	r0, r5
 801c37e:	3b01      	subs	r3, #1
 801c380:	b29b      	uxth	r3, r3
 801c382:	83e3      	strh	r3, [r4, #30]
 801c384:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c388:	8365      	strh	r5, [r4, #26]
 801c38a:	bd38      	pop	{r3, r4, r5, pc}

0801c38c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c38c:	428a      	cmp	r2, r1
 801c38e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c392:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801c394:	d931      	bls.n	801c3fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801c396:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801c398:	1a54      	subs	r4, r2, r1
 801c39a:	19ee      	adds	r6, r5, r7
 801c39c:	3e01      	subs	r6, #1
 801c39e:	fa1f fe84 	uxth.w	lr, r4
 801c3a2:	b2b4      	uxth	r4, r6
 801c3a4:	eba4 090e 	sub.w	r9, r4, lr
 801c3a8:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801c3ac:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801c3b0:	fa1f f989 	uxth.w	r9, r9
 801c3b4:	2c09      	cmp	r4, #9
 801c3b6:	4626      	mov	r6, r4
 801c3b8:	bf88      	it	hi
 801c3ba:	f1a4 060a 	subhi.w	r6, r4, #10
 801c3be:	f1bc 0f00 	cmp.w	ip, #0
 801c3c2:	bf08      	it	eq
 801c3c4:	f04f 0c02 	moveq.w	ip, #2
 801c3c8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c3cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c3d0:	3c01      	subs	r4, #1
 801c3d2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801c3d6:	fa1f fc8c 	uxth.w	ip, ip
 801c3da:	b2a4      	uxth	r4, r4
 801c3dc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801c3e0:	454c      	cmp	r4, r9
 801c3e2:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801c3e6:	d1e5      	bne.n	801c3b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801c3e8:	eba5 050e 	sub.w	r5, r5, lr
 801c3ec:	eb0e 0408 	add.w	r4, lr, r8
 801c3f0:	8705      	strh	r5, [r0, #56]	@ 0x38
 801c3f2:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801c3f6:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801c3fa:	250a      	movs	r5, #10
 801c3fc:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801c3fe:	1a64      	subs	r4, r4, r1
 801c400:	4439      	add	r1, r7
 801c402:	b289      	uxth	r1, r1
 801c404:	2909      	cmp	r1, #9
 801c406:	bf88      	it	hi
 801c408:	390a      	subhi	r1, #10
 801c40a:	8704      	strh	r4, [r0, #56]	@ 0x38
 801c40c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c40e:	b18a      	cbz	r2, 801c434 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801c410:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801c412:	3a01      	subs	r2, #1
 801c414:	3101      	adds	r1, #1
 801c416:	b292      	uxth	r2, r2
 801c418:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c41c:	8701      	strh	r1, [r0, #56]	@ 0x38
 801c41e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c420:	b901      	cbnz	r1, 801c424 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801c422:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801c424:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c426:	3901      	subs	r1, #1
 801c428:	b289      	uxth	r1, r1
 801c42a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c42c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c430:	844c      	strh	r4, [r1, #34]	@ 0x22
 801c432:	e7ec      	b.n	801c40e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801c434:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c438:	f7ff bf4b 	b.w	801c2d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801c43c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c43c:	b570      	push	{r4, r5, r6, lr}
 801c43e:	2500      	movs	r5, #0
 801c440:	4295      	cmp	r5, r2
 801c442:	d011      	beq.n	801c468 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801c444:	8bc4      	ldrh	r4, [r0, #30]
 801c446:	f831 6b02 	ldrh.w	r6, [r1], #2
 801c44a:	4414      	add	r4, r2
 801c44c:	3c01      	subs	r4, #1
 801c44e:	1b64      	subs	r4, r4, r5
 801c450:	b2a4      	uxth	r4, r4
 801c452:	2c01      	cmp	r4, #1
 801c454:	bf88      	it	hi
 801c456:	3c02      	subhi	r4, #2
 801c458:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c45c:	8b64      	ldrh	r4, [r4, #26]
 801c45e:	42b4      	cmp	r4, r6
 801c460:	d117      	bne.n	801c492 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801c462:	3501      	adds	r5, #1
 801c464:	b2ad      	uxth	r5, r5
 801c466:	e7eb      	b.n	801c440 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801c468:	2400      	movs	r4, #0
 801c46a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c46e:	4413      	add	r3, r2
 801c470:	b2a2      	uxth	r2, r4
 801c472:	429a      	cmp	r2, r3
 801c474:	da0f      	bge.n	801c496 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801c476:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801c478:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c47c:	4432      	add	r2, r6
 801c47e:	b292      	uxth	r2, r2
 801c480:	2a09      	cmp	r2, #9
 801c482:	bf88      	it	hi
 801c484:	3a0a      	subhi	r2, #10
 801c486:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c48a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801c48c:	3401      	adds	r4, #1
 801c48e:	42aa      	cmp	r2, r5
 801c490:	d0ee      	beq.n	801c470 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801c492:	2000      	movs	r0, #0
 801c494:	bd70      	pop	{r4, r5, r6, pc}
 801c496:	2001      	movs	r0, #1
 801c498:	e7fc      	b.n	801c494 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801c49a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c49a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c49e:	4605      	mov	r5, r0
 801c4a0:	4616      	mov	r6, r2
 801c4a2:	1c8c      	adds	r4, r1, #2
 801c4a4:	8809      	ldrh	r1, [r1, #0]
 801c4a6:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c4aa:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c4ae:	42b3      	cmp	r3, r6
 801c4b0:	d124      	bne.n	801c4fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c4b2:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c4b6:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c4ba:	f001 070f 	and.w	r7, r1, #15
 801c4be:	f8cd 8000 	str.w	r8, [sp]
 801c4c2:	464b      	mov	r3, r9
 801c4c4:	4652      	mov	r2, sl
 801c4c6:	4621      	mov	r1, r4
 801c4c8:	4628      	mov	r0, r5
 801c4ca:	f7ff ffb7 	bl	801c43c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c4ce:	4683      	mov	fp, r0
 801c4d0:	b168      	cbz	r0, 801c4ee <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c4d2:	eb0a 0109 	add.w	r1, sl, r9
 801c4d6:	4441      	add	r1, r8
 801c4d8:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c4dc:	463a      	mov	r2, r7
 801c4de:	4649      	mov	r1, r9
 801c4e0:	4628      	mov	r0, r5
 801c4e2:	f7ff ff53 	bl	801c38c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c4e6:	4658      	mov	r0, fp
 801c4e8:	b003      	add	sp, #12
 801c4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4ee:	eb07 010a 	add.w	r1, r7, sl
 801c4f2:	4449      	add	r1, r9
 801c4f4:	4441      	add	r1, r8
 801c4f6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c4fa:	e7d2      	b.n	801c4a2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c4fc:	f04f 0b00 	mov.w	fp, #0
 801c500:	e7f1      	b.n	801c4e6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c502 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c502:	b570      	push	{r4, r5, r6, lr}
 801c504:	8810      	ldrh	r0, [r2, #0]
 801c506:	4298      	cmp	r0, r3
 801c508:	d817      	bhi.n	801c53a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c50a:	1e48      	subs	r0, r1, #1
 801c50c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c510:	4298      	cmp	r0, r3
 801c512:	d312      	bcc.n	801c53a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c514:	2400      	movs	r4, #0
 801c516:	428c      	cmp	r4, r1
 801c518:	d20f      	bcs.n	801c53a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c51a:	1860      	adds	r0, r4, r1
 801c51c:	1040      	asrs	r0, r0, #1
 801c51e:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c522:	0085      	lsls	r5, r0, #2
 801c524:	42b3      	cmp	r3, r6
 801c526:	d902      	bls.n	801c52e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c528:	3001      	adds	r0, #1
 801c52a:	b284      	uxth	r4, r0
 801c52c:	e7f3      	b.n	801c516 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c52e:	d201      	bcs.n	801c534 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c530:	b281      	uxth	r1, r0
 801c532:	e7f0      	b.n	801c516 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c534:	442a      	add	r2, r5
 801c536:	8850      	ldrh	r0, [r2, #2]
 801c538:	bd70      	pop	{r4, r5, r6, pc}
 801c53a:	2000      	movs	r0, #0
 801c53c:	e7fc      	b.n	801c538 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c53e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c542:	4604      	mov	r4, r0
 801c544:	260b      	movs	r6, #11
 801c546:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801c548:	886f      	ldrh	r7, [r5, #2]
 801c54a:	087f      	lsrs	r7, r7, #1
 801c54c:	3e01      	subs	r6, #1
 801c54e:	d013      	beq.n	801c578 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c550:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801c552:	462a      	mov	r2, r5
 801c554:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c558:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c55c:	4639      	mov	r1, r7
 801c55e:	4643      	mov	r3, r8
 801c560:	4620      	mov	r0, r4
 801c562:	f7ff ffce 	bl	801c502 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c566:	b138      	cbz	r0, 801c578 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c568:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c56c:	4642      	mov	r2, r8
 801c56e:	4620      	mov	r0, r4
 801c570:	f7ff ff93 	bl	801c49a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c574:	2800      	cmp	r0, #0
 801c576:	d1e9      	bne.n	801c54c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c57c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c57c:	b570      	push	{r4, r5, r6, lr}
 801c57e:	694a      	ldr	r2, [r1, #20]
 801c580:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801c582:	684b      	ldr	r3, [r1, #4]
 801c584:	1b54      	subs	r4, r2, r5
 801c586:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801c588:	f000 8107 	beq.w	801c79a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801c58c:	1b9b      	subs	r3, r3, r6
 801c58e:	d003      	beq.n	801c598 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c590:	2210      	movs	r2, #16
 801c592:	4363      	muls	r3, r4
 801c594:	fb93 f3f2 	sdiv	r3, r3, r2
 801c598:	680c      	ldr	r4, [r1, #0]
 801c59a:	698a      	ldr	r2, [r1, #24]
 801c59c:	1b65      	subs	r5, r4, r5
 801c59e:	f000 80fe 	beq.w	801c79e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801c5a2:	1b92      	subs	r2, r2, r6
 801c5a4:	d003      	beq.n	801c5ae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c5a6:	2410      	movs	r4, #16
 801c5a8:	436a      	muls	r2, r5
 801c5aa:	fb92 f2f4 	sdiv	r2, r2, r4
 801c5ae:	1a9b      	subs	r3, r3, r2
 801c5b0:	ee07 3a90 	vmov	s15, r3
 801c5b4:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801c7dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 801c5b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c5bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c5c0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c5c4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c5c8:	460a      	mov	r2, r1
 801c5ca:	eeb1 6a43 	vneg.f32	s12, s6
 801c5ce:	4603      	mov	r3, r0
 801c5d0:	f100 040c 	add.w	r4, r0, #12
 801c5d4:	edd2 7a02 	vldr	s15, [r2, #8]
 801c5d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c5dc:	ece3 6a01 	vstmia	r3!, {s13}
 801c5e0:	edd2 7a03 	vldr	s15, [r2, #12]
 801c5e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c5e8:	edc3 7a02 	vstr	s15, [r3, #8]
 801c5ec:	edd2 7a04 	vldr	s15, [r2, #16]
 801c5f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c5f4:	429c      	cmp	r4, r3
 801c5f6:	edc3 7a05 	vstr	s15, [r3, #20]
 801c5fa:	f102 0214 	add.w	r2, r2, #20
 801c5fe:	d1e9      	bne.n	801c5d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c600:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c602:	698b      	ldr	r3, [r1, #24]
 801c604:	edd0 4a02 	vldr	s9, [r0, #8]
 801c608:	1a9b      	subs	r3, r3, r2
 801c60a:	ee07 3a90 	vmov	s15, r3
 801c60e:	684b      	ldr	r3, [r1, #4]
 801c610:	edd0 3a00 	vldr	s7, [r0]
 801c614:	1a9b      	subs	r3, r3, r2
 801c616:	edd0 6a01 	vldr	s13, [r0, #4]
 801c61a:	ee07 3a10 	vmov	s14, r3
 801c61e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c622:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c626:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c62a:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c62e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c632:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c636:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c63a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c63e:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c642:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801c646:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c648:	694a      	ldr	r2, [r1, #20]
 801c64a:	ed90 5a05 	vldr	s10, [r0, #20]
 801c64e:	1b13      	subs	r3, r2, r4
 801c650:	ee07 3a10 	vmov	s14, r3
 801c654:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c658:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c65c:	680b      	ldr	r3, [r1, #0]
 801c65e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c662:	1b1b      	subs	r3, r3, r4
 801c664:	ee07 3a10 	vmov	s14, r3
 801c668:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c66c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c670:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c674:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c678:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801c67c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c67e:	698b      	ldr	r3, [r1, #24]
 801c680:	ed90 2a03 	vldr	s4, [r0, #12]
 801c684:	1a9b      	subs	r3, r3, r2
 801c686:	ee06 3a90 	vmov	s13, r3
 801c68a:	684b      	ldr	r3, [r1, #4]
 801c68c:	edd0 5a04 	vldr	s11, [r0, #16]
 801c690:	1a9b      	subs	r3, r3, r2
 801c692:	ee07 3a10 	vmov	s14, r3
 801c696:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c69a:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c69e:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c6a2:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c6a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c6aa:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c6ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c6b2:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c6b6:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c6ba:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801c6be:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c6c0:	694a      	ldr	r2, [r1, #20]
 801c6c2:	ed90 1a07 	vldr	s2, [r0, #28]
 801c6c6:	1b13      	subs	r3, r2, r4
 801c6c8:	ee07 3a10 	vmov	s14, r3
 801c6cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c6d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c6d4:	680b      	ldr	r3, [r1, #0]
 801c6d6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c6da:	1b1b      	subs	r3, r3, r4
 801c6dc:	ee07 3a10 	vmov	s14, r3
 801c6e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c6e4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c6e8:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c6ec:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c6f0:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801c6f4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c6f6:	698b      	ldr	r3, [r1, #24]
 801c6f8:	edd0 5a08 	vldr	s11, [r0, #32]
 801c6fc:	1a9b      	subs	r3, r3, r2
 801c6fe:	ee07 3a10 	vmov	s14, r3
 801c702:	684b      	ldr	r3, [r1, #4]
 801c704:	edd0 2a06 	vldr	s5, [r0, #24]
 801c708:	1a9b      	subs	r3, r3, r2
 801c70a:	ee01 3a90 	vmov	s3, r3
 801c70e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c712:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c716:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c71a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c71e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c722:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c726:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c72a:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c72e:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c732:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801c736:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c738:	694a      	ldr	r2, [r1, #20]
 801c73a:	1b13      	subs	r3, r2, r4
 801c73c:	ee03 3a10 	vmov	s6, r3
 801c740:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c744:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c748:	680b      	ldr	r3, [r1, #0]
 801c74a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c74e:	1b1b      	subs	r3, r3, r4
 801c750:	ee03 3a10 	vmov	s6, r3
 801c754:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c758:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c75c:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c760:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c764:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c768:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c76c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c774:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801c778:	dd13      	ble.n	801c7a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c77a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c77e:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c782:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c78e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801c790:	dd15      	ble.n	801c7be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c796:	6403      	str	r3, [r0, #64]	@ 0x40
 801c798:	bd70      	pop	{r4, r5, r6, pc}
 801c79a:	4623      	mov	r3, r4
 801c79c:	e6fc      	b.n	801c598 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c79e:	462a      	mov	r2, r5
 801c7a0:	e705      	b.n	801c5ae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c7a2:	d502      	bpl.n	801c7aa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801c7a4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c7a8:	e7e9      	b.n	801c77e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801c7aa:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c7ae:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c7b2:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7ba:	dade      	bge.n	801c77a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801c7bc:	e7f2      	b.n	801c7a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801c7be:	d502      	bpl.n	801c7c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801c7c0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c7c4:	e7e7      	b.n	801c796 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801c7c6:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c7ca:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c7ce:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7d6:	dadc      	bge.n	801c792 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 801c7d8:	e7f2      	b.n	801c7c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801c7da:	bf00      	nop
 801c7dc:	3d800000 	.word	0x3d800000

0801c7e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7e4:	2714      	movs	r7, #20
 801c7e6:	435f      	muls	r7, r3
 801c7e8:	eb02 0c07 	add.w	ip, r2, r7
 801c7ec:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c7f0:	f115 0e0f 	adds.w	lr, r5, #15
 801c7f4:	f100 80a2 	bmi.w	801c93c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c7f8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c7fc:	2614      	movs	r6, #20
 801c7fe:	9c08      	ldr	r4, [sp, #32]
 801c800:	f8c0 e014 	str.w	lr, [r0, #20]
 801c804:	4366      	muls	r6, r4
 801c806:	eb02 0806 	add.w	r8, r2, r6
 801c80a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c80e:	f115 040f 	adds.w	r4, r5, #15
 801c812:	f100 809f 	bmi.w	801c954 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801c816:	1124      	asrs	r4, r4, #4
 801c818:	eba4 040e 	sub.w	r4, r4, lr
 801c81c:	6184      	str	r4, [r0, #24]
 801c81e:	2c00      	cmp	r4, #0
 801c820:	f000 808a 	beq.w	801c938 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801c824:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c828:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c82c:	5995      	ldr	r5, [r2, r6]
 801c82e:	eba4 0809 	sub.w	r8, r4, r9
 801c832:	59d4      	ldr	r4, [r2, r7]
 801c834:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c838:	eba5 0a04 	sub.w	sl, r5, r4
 801c83c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c840:	fb0e fe05 	mul.w	lr, lr, r5
 801c844:	fb0a ee19 	mls	lr, sl, r9, lr
 801c848:	fb08 e404 	mla	r4, r8, r4, lr
 801c84c:	3c01      	subs	r4, #1
 801c84e:	19a4      	adds	r4, r4, r6
 801c850:	f100 808c 	bmi.w	801c96c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801c854:	fb94 fef6 	sdiv	lr, r4, r6
 801c858:	fb06 441e 	mls	r4, r6, lr, r4
 801c85c:	f8c0 e000 	str.w	lr, [r0]
 801c860:	6104      	str	r4, [r0, #16]
 801c862:	2d00      	cmp	r5, #0
 801c864:	f2c0 8095 	blt.w	801c992 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801c868:	fb95 f4f6 	sdiv	r4, r5, r6
 801c86c:	fb06 5514 	mls	r5, r6, r4, r5
 801c870:	6044      	str	r4, [r0, #4]
 801c872:	6085      	str	r5, [r0, #8]
 801c874:	60c6      	str	r6, [r0, #12]
 801c876:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c87a:	6945      	ldr	r5, [r0, #20]
 801c87c:	59d2      	ldr	r2, [r2, r7]
 801c87e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c882:	ee07 4a10 	vmov	s14, r4
 801c886:	6804      	ldr	r4, [r0, #0]
 801c888:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 801c9b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801c88c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c890:	ee07 2a90 	vmov	s15, r2
 801c894:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c89c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c8a0:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c8a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c8a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c8ac:	edd3 6a00 	vldr	s13, [r3]
 801c8b0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c8b4:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801c8b8:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c8bc:	edc0 6a07 	vstr	s13, [r0, #28]
 801c8c0:	edd0 6a01 	vldr	s13, [r0, #4]
 801c8c4:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801c8c8:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c8cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c8d0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c8d4:	ed80 6a08 	vstr	s12, [r0, #32]
 801c8d8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801c8da:	6242      	str	r2, [r0, #36]	@ 0x24
 801c8dc:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801c8e0:	ed93 6a03 	vldr	s12, [r3, #12]
 801c8e4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c8e8:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801c8ec:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c8f0:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801c8f4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801c8f8:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801c8fc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c900:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801c904:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c906:	6302      	str	r2, [r0, #48]	@ 0x30
 801c908:	ed93 6a06 	vldr	s12, [r3, #24]
 801c90c:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801c910:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c914:	eeb0 7a46 	vmov.f32	s14, s12
 801c918:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801c91c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c920:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801c924:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801c928:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801c92c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c930:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801c934:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801c936:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801c938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c93c:	2410      	movs	r4, #16
 801c93e:	f1c5 0501 	rsb	r5, r5, #1
 801c942:	f015 050f 	ands.w	r5, r5, #15
 801c946:	fb9e fef4 	sdiv	lr, lr, r4
 801c94a:	bf18      	it	ne
 801c94c:	2501      	movne	r5, #1
 801c94e:	ebae 0e05 	sub.w	lr, lr, r5
 801c952:	e753      	b.n	801c7fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801c954:	f04f 0910 	mov.w	r9, #16
 801c958:	f1c5 0501 	rsb	r5, r5, #1
 801c95c:	f015 050f 	ands.w	r5, r5, #15
 801c960:	fb94 f4f9 	sdiv	r4, r4, r9
 801c964:	bf18      	it	ne
 801c966:	2501      	movne	r5, #1
 801c968:	1b64      	subs	r4, r4, r5
 801c96a:	e755      	b.n	801c818 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801c96c:	4264      	negs	r4, r4
 801c96e:	fb94 fef6 	sdiv	lr, r4, r6
 801c972:	fb06 441e 	mls	r4, r6, lr, r4
 801c976:	f1ce 0800 	rsb	r8, lr, #0
 801c97a:	f8c0 8000 	str.w	r8, [r0]
 801c97e:	6104      	str	r4, [r0, #16]
 801c980:	2c00      	cmp	r4, #0
 801c982:	f43f af6e 	beq.w	801c862 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801c986:	ea6f 0e0e 	mvn.w	lr, lr
 801c98a:	1b34      	subs	r4, r6, r4
 801c98c:	f8c0 e000 	str.w	lr, [r0]
 801c990:	e766      	b.n	801c860 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801c992:	426d      	negs	r5, r5
 801c994:	fb95 f4f6 	sdiv	r4, r5, r6
 801c998:	fb06 5514 	mls	r5, r6, r4, r5
 801c99c:	f1c4 0e00 	rsb	lr, r4, #0
 801c9a0:	f8c0 e004 	str.w	lr, [r0, #4]
 801c9a4:	6085      	str	r5, [r0, #8]
 801c9a6:	2d00      	cmp	r5, #0
 801c9a8:	f43f af64 	beq.w	801c874 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801c9ac:	43e4      	mvns	r4, r4
 801c9ae:	1b75      	subs	r5, r6, r5
 801c9b0:	6044      	str	r4, [r0, #4]
 801c9b2:	e75e      	b.n	801c872 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801c9b4:	3d800000 	.word	0x3d800000

0801c9b8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c9b8:	4b01      	ldr	r3, [pc, #4]	@ (801c9c0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c9ba:	6018      	str	r0, [r3, #0]
 801c9bc:	4770      	bx	lr
 801c9be:	bf00      	nop
 801c9c0:	2005bb0c 	.word	0x2005bb0c

0801c9c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c9c4:	4b06      	ldr	r3, [pc, #24]	@ (801c9e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c9c6:	881a      	ldrh	r2, [r3, #0]
 801c9c8:	4282      	cmp	r2, r0
 801c9ca:	d807      	bhi.n	801c9dc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c9cc:	4b05      	ldr	r3, [pc, #20]	@ (801c9e4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c9ce:	881b      	ldrh	r3, [r3, #0]
 801c9d0:	4413      	add	r3, r2
 801c9d2:	4298      	cmp	r0, r3
 801c9d4:	bfac      	ite	ge
 801c9d6:	2000      	movge	r0, #0
 801c9d8:	2001      	movlt	r0, #1
 801c9da:	4770      	bx	lr
 801c9dc:	2000      	movs	r0, #0
 801c9de:	4770      	bx	lr
 801c9e0:	2005bb2c 	.word	0x2005bb2c
 801c9e4:	2005bb30 	.word	0x2005bb30

0801c9e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c9e8:	b508      	push	{r3, lr}
 801c9ea:	4601      	mov	r1, r0
 801c9ec:	f7ff ffea 	bl	801c9c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c9f0:	b118      	cbz	r0, 801c9fa <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c9f2:	4b02      	ldr	r3, [pc, #8]	@ (801c9fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c9f4:	681b      	ldr	r3, [r3, #0]
 801c9f6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c9fa:	bd08      	pop	{r3, pc}
 801c9fc:	2005bb10 	.word	0x2005bb10

0801ca00 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ca00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca02:	4c24      	ldr	r4, [pc, #144]	@ (801ca94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801ca04:	6823      	ldr	r3, [r4, #0]
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d042      	beq.n	801ca90 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ca0a:	4a23      	ldr	r2, [pc, #140]	@ (801ca98 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801ca0c:	4d23      	ldr	r5, [pc, #140]	@ (801ca9c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801ca0e:	8811      	ldrh	r1, [r2, #0]
 801ca10:	f8b5 c000 	ldrh.w	ip, [r5]
 801ca14:	4822      	ldr	r0, [pc, #136]	@ (801caa0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801ca16:	4461      	add	r1, ip
 801ca18:	1c4a      	adds	r2, r1, #1
 801ca1a:	f022 0201 	bic.w	r2, r2, #1
 801ca1e:	008f      	lsls	r7, r1, #2
 801ca20:	0412      	lsls	r2, r2, #16
 801ca22:	19de      	adds	r6, r3, r7
 801ca24:	0c12      	lsrs	r2, r2, #16
 801ca26:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801ca2a:	6006      	str	r6, [r0, #0]
 801ca2c:	4e1d      	ldr	r6, [pc, #116]	@ (801caa4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801ca2e:	19da      	adds	r2, r3, r7
 801ca30:	6032      	str	r2, [r6, #0]
 801ca32:	220e      	movs	r2, #14
 801ca34:	fb02 f20c 	mul.w	r2, r2, ip
 801ca38:	3203      	adds	r2, #3
 801ca3a:	f022 0203 	bic.w	r2, r2, #3
 801ca3e:	443a      	add	r2, r7
 801ca40:	4f19      	ldr	r7, [pc, #100]	@ (801caa8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ca42:	4413      	add	r3, r2
 801ca44:	603b      	str	r3, [r7, #0]
 801ca46:	2300      	movs	r3, #0
 801ca48:	4f18      	ldr	r7, [pc, #96]	@ (801caac <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ca4a:	469c      	mov	ip, r3
 801ca4c:	803b      	strh	r3, [r7, #0]
 801ca4e:	4f18      	ldr	r7, [pc, #96]	@ (801cab0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ca50:	683f      	ldr	r7, [r7, #0]
 801ca52:	1aba      	subs	r2, r7, r2
 801ca54:	4f17      	ldr	r7, [pc, #92]	@ (801cab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ca56:	603a      	str	r2, [r7, #0]
 801ca58:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801ca5c:	4a16      	ldr	r2, [pc, #88]	@ (801cab8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ca5e:	8013      	strh	r3, [r2, #0]
 801ca60:	428b      	cmp	r3, r1
 801ca62:	d10d      	bne.n	801ca80 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801ca64:	2300      	movs	r3, #0
 801ca66:	240e      	movs	r4, #14
 801ca68:	882d      	ldrh	r5, [r5, #0]
 801ca6a:	6830      	ldr	r0, [r6, #0]
 801ca6c:	429d      	cmp	r5, r3
 801ca6e:	d90f      	bls.n	801ca90 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ca70:	fb04 0203 	mla	r2, r4, r3, r0
 801ca74:	7b11      	ldrb	r1, [r2, #12]
 801ca76:	3301      	adds	r3, #1
 801ca78:	f36f 1145 	bfc	r1, #5, #1
 801ca7c:	7311      	strb	r1, [r2, #12]
 801ca7e:	e7f5      	b.n	801ca6c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801ca80:	6822      	ldr	r2, [r4, #0]
 801ca82:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ca86:	6802      	ldr	r2, [r0, #0]
 801ca88:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801ca8c:	3301      	adds	r3, #1
 801ca8e:	e7e7      	b.n	801ca60 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801ca90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca92:	bf00      	nop
 801ca94:	2005bb10 	.word	0x2005bb10
 801ca98:	2005bb2c 	.word	0x2005bb2c
 801ca9c:	2005bb30 	.word	0x2005bb30
 801caa0:	2005bb24 	.word	0x2005bb24
 801caa4:	2005bb14 	.word	0x2005bb14
 801caa8:	2005bb1c 	.word	0x2005bb1c
 801caac:	2005bb2e 	.word	0x2005bb2e
 801cab0:	2005bb18 	.word	0x2005bb18
 801cab4:	2005bb28 	.word	0x2005bb28
 801cab8:	2005bb20 	.word	0x2005bb20

0801cabc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801cabc:	4b06      	ldr	r3, [pc, #24]	@ (801cad8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	b943      	cbnz	r3, 801cad4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801cac2:	b139      	cbz	r1, 801cad4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801cac4:	4b05      	ldr	r3, [pc, #20]	@ (801cadc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801cac6:	801a      	strh	r2, [r3, #0]
 801cac8:	4b05      	ldr	r3, [pc, #20]	@ (801cae0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801caca:	6019      	str	r1, [r3, #0]
 801cacc:	4b05      	ldr	r3, [pc, #20]	@ (801cae4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801cace:	6018      	str	r0, [r3, #0]
 801cad0:	f7ff bf96 	b.w	801ca00 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801cad4:	4770      	bx	lr
 801cad6:	bf00      	nop
 801cad8:	2005bb1c 	.word	0x2005bb1c
 801cadc:	2005bb30 	.word	0x2005bb30
 801cae0:	2005bb18 	.word	0x2005bb18
 801cae4:	2005bb10 	.word	0x2005bb10

0801cae8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801cae8:	b470      	push	{r4, r5, r6}
 801caea:	4c07      	ldr	r4, [pc, #28]	@ (801cb08 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801caec:	4605      	mov	r5, r0
 801caee:	6826      	ldr	r6, [r4, #0]
 801caf0:	4610      	mov	r0, r2
 801caf2:	9a03      	ldr	r2, [sp, #12]
 801caf4:	b936      	cbnz	r6, 801cb04 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801caf6:	6025      	str	r5, [r4, #0]
 801caf8:	4c04      	ldr	r4, [pc, #16]	@ (801cb0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801cafa:	8021      	strh	r1, [r4, #0]
 801cafc:	bc70      	pop	{r4, r5, r6}
 801cafe:	4619      	mov	r1, r3
 801cb00:	f7ff bfdc 	b.w	801cabc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801cb04:	bc70      	pop	{r4, r5, r6}
 801cb06:	4770      	bx	lr
 801cb08:	2005bb34 	.word	0x2005bb34
 801cb0c:	2005bb2c 	.word	0x2005bb2c

0801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801cb10:	4a12      	ldr	r2, [pc, #72]	@ (801cb5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801cb12:	8803      	ldrh	r3, [r0, #0]
 801cb14:	8812      	ldrh	r2, [r2, #0]
 801cb16:	4293      	cmp	r3, r2
 801cb18:	d207      	bcs.n	801cb2a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801cb1a:	2114      	movs	r1, #20
 801cb1c:	4a10      	ldr	r2, [pc, #64]	@ (801cb60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801cb1e:	6812      	ldr	r2, [r2, #0]
 801cb20:	fb01 2303 	mla	r3, r1, r3, r2
 801cb24:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801cb28:	4770      	bx	lr
 801cb2a:	490e      	ldr	r1, [pc, #56]	@ (801cb64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801cb2c:	8809      	ldrh	r1, [r1, #0]
 801cb2e:	4411      	add	r1, r2
 801cb30:	428b      	cmp	r3, r1
 801cb32:	da04      	bge.n	801cb3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801cb34:	1a9b      	subs	r3, r3, r2
 801cb36:	4a0c      	ldr	r2, [pc, #48]	@ (801cb68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801cb38:	210e      	movs	r1, #14
 801cb3a:	6812      	ldr	r2, [r2, #0]
 801cb3c:	e7f0      	b.n	801cb20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801cb3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cb42:	4293      	cmp	r3, r2
 801cb44:	d108      	bne.n	801cb58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801cb46:	4b09      	ldr	r3, [pc, #36]	@ (801cb6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801cb48:	781b      	ldrb	r3, [r3, #0]
 801cb4a:	b91b      	cbnz	r3, 801cb54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801cb4c:	4b08      	ldr	r3, [pc, #32]	@ (801cb70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801cb4e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801cb52:	4770      	bx	lr
 801cb54:	4b07      	ldr	r3, [pc, #28]	@ (801cb74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801cb56:	e7fa      	b.n	801cb4e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801cb58:	2000      	movs	r0, #0
 801cb5a:	4770      	bx	lr
 801cb5c:	2005bb2c 	.word	0x2005bb2c
 801cb60:	2005bb34 	.word	0x2005bb34
 801cb64:	2005bb30 	.word	0x2005bb30
 801cb68:	2005bb14 	.word	0x2005bb14
 801cb6c:	2005ba9c 	.word	0x2005ba9c
 801cb70:	2005ba9e 	.word	0x2005ba9e
 801cb74:	2005baa0 	.word	0x2005baa0

0801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801cb78:	4a12      	ldr	r2, [pc, #72]	@ (801cbc4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801cb7a:	8803      	ldrh	r3, [r0, #0]
 801cb7c:	8812      	ldrh	r2, [r2, #0]
 801cb7e:	4293      	cmp	r3, r2
 801cb80:	d207      	bcs.n	801cb92 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801cb82:	2114      	movs	r1, #20
 801cb84:	4a10      	ldr	r2, [pc, #64]	@ (801cbc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801cb86:	6812      	ldr	r2, [r2, #0]
 801cb88:	fb01 2303 	mla	r3, r1, r3, r2
 801cb8c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801cb90:	4770      	bx	lr
 801cb92:	490e      	ldr	r1, [pc, #56]	@ (801cbcc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801cb94:	8809      	ldrh	r1, [r1, #0]
 801cb96:	4411      	add	r1, r2
 801cb98:	428b      	cmp	r3, r1
 801cb9a:	da04      	bge.n	801cba6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801cb9c:	1a9b      	subs	r3, r3, r2
 801cb9e:	4a0c      	ldr	r2, [pc, #48]	@ (801cbd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801cba0:	210e      	movs	r1, #14
 801cba2:	6812      	ldr	r2, [r2, #0]
 801cba4:	e7f0      	b.n	801cb88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801cba6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cbaa:	4293      	cmp	r3, r2
 801cbac:	d108      	bne.n	801cbc0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801cbae:	4b09      	ldr	r3, [pc, #36]	@ (801cbd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801cbb0:	781b      	ldrb	r3, [r3, #0]
 801cbb2:	b91b      	cbnz	r3, 801cbbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801cbb4:	4b08      	ldr	r3, [pc, #32]	@ (801cbd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801cbb6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801cbba:	4770      	bx	lr
 801cbbc:	4b07      	ldr	r3, [pc, #28]	@ (801cbdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801cbbe:	e7fa      	b.n	801cbb6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801cbc0:	2000      	movs	r0, #0
 801cbc2:	4770      	bx	lr
 801cbc4:	2005bb2c 	.word	0x2005bb2c
 801cbc8:	2005bb34 	.word	0x2005bb34
 801cbcc:	2005bb30 	.word	0x2005bb30
 801cbd0:	2005bb14 	.word	0x2005bb14
 801cbd4:	2005ba9c 	.word	0x2005ba9c
 801cbd8:	2005baa0 	.word	0x2005baa0
 801cbdc:	2005ba9e 	.word	0x2005ba9e

0801cbe0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801cbe0:	b530      	push	{r4, r5, lr}
 801cbe2:	4a22      	ldr	r2, [pc, #136]	@ (801cc6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801cbe4:	880b      	ldrh	r3, [r1, #0]
 801cbe6:	8812      	ldrh	r2, [r2, #0]
 801cbe8:	4293      	cmp	r3, r2
 801cbea:	d213      	bcs.n	801cc14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801cbec:	2114      	movs	r1, #20
 801cbee:	4a20      	ldr	r2, [pc, #128]	@ (801cc70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801cbf0:	6812      	ldr	r2, [r2, #0]
 801cbf2:	fb01 2303 	mla	r3, r1, r3, r2
 801cbf6:	8a1a      	ldrh	r2, [r3, #16]
 801cbf8:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801cbfc:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801cc00:	8a5b      	ldrh	r3, [r3, #18]
 801cc02:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cc06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cc0a:	8004      	strh	r4, [r0, #0]
 801cc0c:	8041      	strh	r1, [r0, #2]
 801cc0e:	8082      	strh	r2, [r0, #4]
 801cc10:	80c3      	strh	r3, [r0, #6]
 801cc12:	e024      	b.n	801cc5e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801cc14:	4917      	ldr	r1, [pc, #92]	@ (801cc74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801cc16:	8809      	ldrh	r1, [r1, #0]
 801cc18:	4411      	add	r1, r2
 801cc1a:	428b      	cmp	r3, r1
 801cc1c:	da10      	bge.n	801cc40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801cc1e:	1a9b      	subs	r3, r3, r2
 801cc20:	220e      	movs	r2, #14
 801cc22:	4353      	muls	r3, r2
 801cc24:	4a14      	ldr	r2, [pc, #80]	@ (801cc78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801cc26:	6811      	ldr	r1, [r2, #0]
 801cc28:	18ca      	adds	r2, r1, r3
 801cc2a:	5ecd      	ldrsh	r5, [r1, r3]
 801cc2c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801cc30:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801cc34:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801cc38:	8005      	strh	r5, [r0, #0]
 801cc3a:	8044      	strh	r4, [r0, #2]
 801cc3c:	8081      	strh	r1, [r0, #4]
 801cc3e:	e7e7      	b.n	801cc10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801cc40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cc44:	4293      	cmp	r3, r2
 801cc46:	d10b      	bne.n	801cc60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801cc48:	4b0c      	ldr	r3, [pc, #48]	@ (801cc7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801cc4a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801cc4e:	4b0c      	ldr	r3, [pc, #48]	@ (801cc80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801cc50:	8081      	strh	r1, [r0, #4]
 801cc52:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cc56:	2300      	movs	r3, #0
 801cc58:	80c2      	strh	r2, [r0, #6]
 801cc5a:	8003      	strh	r3, [r0, #0]
 801cc5c:	8043      	strh	r3, [r0, #2]
 801cc5e:	bd30      	pop	{r4, r5, pc}
 801cc60:	2300      	movs	r3, #0
 801cc62:	8003      	strh	r3, [r0, #0]
 801cc64:	8043      	strh	r3, [r0, #2]
 801cc66:	8083      	strh	r3, [r0, #4]
 801cc68:	e7d2      	b.n	801cc10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801cc6a:	bf00      	nop
 801cc6c:	2005bb2c 	.word	0x2005bb2c
 801cc70:	2005bb34 	.word	0x2005bb34
 801cc74:	2005bb30 	.word	0x2005bb30
 801cc78:	2005bb14 	.word	0x2005bb14
 801cc7c:	2005ba98 	.word	0x2005ba98
 801cc80:	2005ba9a 	.word	0x2005ba9a

0801cc84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801cc84:	4a17      	ldr	r2, [pc, #92]	@ (801cce4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801cc86:	8803      	ldrh	r3, [r0, #0]
 801cc88:	8812      	ldrh	r2, [r2, #0]
 801cc8a:	4293      	cmp	r3, r2
 801cc8c:	d213      	bcs.n	801ccb6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801cc8e:	2114      	movs	r1, #20
 801cc90:	4a15      	ldr	r2, [pc, #84]	@ (801cce8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801cc92:	6812      	ldr	r2, [r2, #0]
 801cc94:	fb01 2303 	mla	r3, r1, r3, r2
 801cc98:	8a1a      	ldrh	r2, [r3, #16]
 801cc9a:	8919      	ldrh	r1, [r3, #8]
 801cc9c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cca0:	428a      	cmp	r2, r1
 801cca2:	db1d      	blt.n	801cce0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801cca4:	8a58      	ldrh	r0, [r3, #18]
 801cca6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ccaa:	895b      	ldrh	r3, [r3, #10]
 801ccac:	4298      	cmp	r0, r3
 801ccae:	bfac      	ite	ge
 801ccb0:	2000      	movge	r0, #0
 801ccb2:	2001      	movlt	r0, #1
 801ccb4:	4770      	bx	lr
 801ccb6:	490d      	ldr	r1, [pc, #52]	@ (801ccec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ccb8:	8809      	ldrh	r1, [r1, #0]
 801ccba:	4411      	add	r1, r2
 801ccbc:	428b      	cmp	r3, r1
 801ccbe:	da0d      	bge.n	801ccdc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801ccc0:	210e      	movs	r1, #14
 801ccc2:	1a9b      	subs	r3, r3, r2
 801ccc4:	4a0a      	ldr	r2, [pc, #40]	@ (801ccf0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ccc6:	6812      	ldr	r2, [r2, #0]
 801ccc8:	fb01 2303 	mla	r3, r1, r3, r2
 801cccc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ccd0:	891a      	ldrh	r2, [r3, #8]
 801ccd2:	4291      	cmp	r1, r2
 801ccd4:	db04      	blt.n	801cce0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ccd6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ccda:	e7e6      	b.n	801ccaa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801ccdc:	2000      	movs	r0, #0
 801ccde:	4770      	bx	lr
 801cce0:	2001      	movs	r0, #1
 801cce2:	4770      	bx	lr
 801cce4:	2005bb2c 	.word	0x2005bb2c
 801cce8:	2005bb34 	.word	0x2005bb34
 801ccec:	2005bb30 	.word	0x2005bb30
 801ccf0:	2005bb14 	.word	0x2005bb14

0801ccf4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ccf4:	4a12      	ldr	r2, [pc, #72]	@ (801cd40 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ccf6:	8803      	ldrh	r3, [r0, #0]
 801ccf8:	8811      	ldrh	r1, [r2, #0]
 801ccfa:	428b      	cmp	r3, r1
 801ccfc:	d20b      	bcs.n	801cd16 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801ccfe:	4a11      	ldr	r2, [pc, #68]	@ (801cd44 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cd00:	6812      	ldr	r2, [r2, #0]
 801cd02:	b112      	cbz	r2, 801cd0a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801cd04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cd08:	b9c0      	cbnz	r0, 801cd3c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801cd0a:	4a0f      	ldr	r2, [pc, #60]	@ (801cd48 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801cd0c:	6811      	ldr	r1, [r2, #0]
 801cd0e:	2214      	movs	r2, #20
 801cd10:	4353      	muls	r3, r2
 801cd12:	58c8      	ldr	r0, [r1, r3]
 801cd14:	4770      	bx	lr
 801cd16:	4a0d      	ldr	r2, [pc, #52]	@ (801cd4c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801cd18:	8812      	ldrh	r2, [r2, #0]
 801cd1a:	440a      	add	r2, r1
 801cd1c:	4293      	cmp	r3, r2
 801cd1e:	da04      	bge.n	801cd2a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801cd20:	4a08      	ldr	r2, [pc, #32]	@ (801cd44 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cd22:	6812      	ldr	r2, [r2, #0]
 801cd24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cd28:	4770      	bx	lr
 801cd2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cd2e:	4293      	cmp	r3, r2
 801cd30:	d103      	bne.n	801cd3a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801cd32:	4b07      	ldr	r3, [pc, #28]	@ (801cd50 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801cd38:	4770      	bx	lr
 801cd3a:	2000      	movs	r0, #0
 801cd3c:	4770      	bx	lr
 801cd3e:	bf00      	nop
 801cd40:	2005bb2c 	.word	0x2005bb2c
 801cd44:	2005bb10 	.word	0x2005bb10
 801cd48:	2005bb34 	.word	0x2005bb34
 801cd4c:	2005bb30 	.word	0x2005bb30
 801cd50:	2005baa4 	.word	0x2005baa4

0801cd54 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801cd54:	4b24      	ldr	r3, [pc, #144]	@ (801cde8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801cd56:	8802      	ldrh	r2, [r0, #0]
 801cd58:	8818      	ldrh	r0, [r3, #0]
 801cd5a:	4282      	cmp	r2, r0
 801cd5c:	d221      	bcs.n	801cda2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801cd5e:	4b23      	ldr	r3, [pc, #140]	@ (801cdec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801cd60:	6819      	ldr	r1, [r3, #0]
 801cd62:	2314      	movs	r3, #20
 801cd64:	fb03 1302 	mla	r3, r3, r2, r1
 801cd68:	6858      	ldr	r0, [r3, #4]
 801cd6a:	2800      	cmp	r0, #0
 801cd6c:	d03a      	beq.n	801cde4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cd6e:	4920      	ldr	r1, [pc, #128]	@ (801cdf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cd70:	6809      	ldr	r1, [r1, #0]
 801cd72:	2900      	cmp	r1, #0
 801cd74:	d036      	beq.n	801cde4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cd76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cd7a:	2900      	cmp	r1, #0
 801cd7c:	d032      	beq.n	801cde4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cd7e:	891a      	ldrh	r2, [r3, #8]
 801cd80:	8958      	ldrh	r0, [r3, #10]
 801cd82:	4350      	muls	r0, r2
 801cd84:	7c5a      	ldrb	r2, [r3, #17]
 801cd86:	7cdb      	ldrb	r3, [r3, #19]
 801cd88:	0952      	lsrs	r2, r2, #5
 801cd8a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801cd8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801cd92:	2b0b      	cmp	r3, #11
 801cd94:	bf18      	it	ne
 801cd96:	0040      	lslne	r0, r0, #1
 801cd98:	3003      	adds	r0, #3
 801cd9a:	f020 0003 	bic.w	r0, r0, #3
 801cd9e:	4408      	add	r0, r1
 801cda0:	4770      	bx	lr
 801cda2:	4b14      	ldr	r3, [pc, #80]	@ (801cdf4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801cda4:	881b      	ldrh	r3, [r3, #0]
 801cda6:	4403      	add	r3, r0
 801cda8:	429a      	cmp	r2, r3
 801cdaa:	da1a      	bge.n	801cde2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cdac:	210e      	movs	r1, #14
 801cdae:	4b12      	ldr	r3, [pc, #72]	@ (801cdf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cdb0:	1a10      	subs	r0, r2, r0
 801cdb2:	681b      	ldr	r3, [r3, #0]
 801cdb4:	fb01 3000 	mla	r0, r1, r0, r3
 801cdb8:	7b03      	ldrb	r3, [r0, #12]
 801cdba:	f003 031f 	and.w	r3, r3, #31
 801cdbe:	2b0b      	cmp	r3, #11
 801cdc0:	d10b      	bne.n	801cdda <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801cdc2:	8903      	ldrh	r3, [r0, #8]
 801cdc4:	8940      	ldrh	r0, [r0, #10]
 801cdc6:	4358      	muls	r0, r3
 801cdc8:	4b09      	ldr	r3, [pc, #36]	@ (801cdf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cdca:	3003      	adds	r0, #3
 801cdcc:	6819      	ldr	r1, [r3, #0]
 801cdce:	f020 0303 	bic.w	r3, r0, #3
 801cdd2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801cdd6:	4418      	add	r0, r3
 801cdd8:	4770      	bx	lr
 801cdda:	2b0d      	cmp	r3, #13
 801cddc:	d101      	bne.n	801cde2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cdde:	300d      	adds	r0, #13
 801cde0:	4770      	bx	lr
 801cde2:	2000      	movs	r0, #0
 801cde4:	4770      	bx	lr
 801cde6:	bf00      	nop
 801cde8:	2005bb2c 	.word	0x2005bb2c
 801cdec:	2005bb34 	.word	0x2005bb34
 801cdf0:	2005bb10 	.word	0x2005bb10
 801cdf4:	2005bb30 	.word	0x2005bb30
 801cdf8:	2005bb14 	.word	0x2005bb14

0801cdfc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801cdfc:	b510      	push	{r4, lr}
 801cdfe:	4b1f      	ldr	r3, [pc, #124]	@ (801ce7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801ce00:	8802      	ldrh	r2, [r0, #0]
 801ce02:	881b      	ldrh	r3, [r3, #0]
 801ce04:	429a      	cmp	r2, r3
 801ce06:	d21a      	bcs.n	801ce3e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801ce08:	2114      	movs	r1, #20
 801ce0a:	4b1d      	ldr	r3, [pc, #116]	@ (801ce80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	fb01 3102 	mla	r1, r1, r2, r3
 801ce12:	7c4b      	ldrb	r3, [r1, #17]
 801ce14:	0958      	lsrs	r0, r3, #5
 801ce16:	7ccb      	ldrb	r3, [r1, #19]
 801ce18:	491a      	ldr	r1, [pc, #104]	@ (801ce84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801ce1a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ce1e:	6809      	ldr	r1, [r1, #0]
 801ce20:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801ce24:	b2d8      	uxtb	r0, r3
 801ce26:	b149      	cbz	r1, 801ce3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ce28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801ce2c:	b132      	cbz	r2, 801ce3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ce2e:	2b0e      	cmp	r3, #14
 801ce30:	d021      	beq.n	801ce76 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801ce32:	280f      	cmp	r0, #15
 801ce34:	d01d      	beq.n	801ce72 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801ce36:	2810      	cmp	r0, #16
 801ce38:	bf08      	it	eq
 801ce3a:	2002      	moveq	r0, #2
 801ce3c:	bd10      	pop	{r4, pc}
 801ce3e:	4912      	ldr	r1, [pc, #72]	@ (801ce88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801ce40:	8809      	ldrh	r1, [r1, #0]
 801ce42:	4419      	add	r1, r3
 801ce44:	428a      	cmp	r2, r1
 801ce46:	da09      	bge.n	801ce5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801ce48:	210e      	movs	r1, #14
 801ce4a:	1ad3      	subs	r3, r2, r3
 801ce4c:	4a0f      	ldr	r2, [pc, #60]	@ (801ce8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801ce4e:	6812      	ldr	r2, [r2, #0]
 801ce50:	fb01 2303 	mla	r3, r1, r3, r2
 801ce54:	7b18      	ldrb	r0, [r3, #12]
 801ce56:	f000 001f 	and.w	r0, r0, #31
 801ce5a:	e7ef      	b.n	801ce3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ce5c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801ce60:	429a      	cmp	r2, r3
 801ce62:	d108      	bne.n	801ce76 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801ce64:	f7f2 fdf0 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 801ce68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce6c:	6803      	ldr	r3, [r0, #0]
 801ce6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce70:	4718      	bx	r3
 801ce72:	2001      	movs	r0, #1
 801ce74:	e7e2      	b.n	801ce3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ce76:	2000      	movs	r0, #0
 801ce78:	e7e0      	b.n	801ce3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ce7a:	bf00      	nop
 801ce7c:	2005bb2c 	.word	0x2005bb2c
 801ce80:	2005bb34 	.word	0x2005bb34
 801ce84:	2005bb10 	.word	0x2005bb10
 801ce88:	2005bb30 	.word	0x2005bb30
 801ce8c:	2005bb14 	.word	0x2005bb14

0801ce90 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801ce90:	2010      	movs	r0, #16
 801ce92:	4770      	bx	lr

0801ce94 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801ce94:	2000      	movs	r0, #0
 801ce96:	4770      	bx	lr

0801ce98 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801ce98:	4b02      	ldr	r3, [pc, #8]	@ (801cea4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801ce9a:	8818      	ldrh	r0, [r3, #0]
 801ce9c:	0040      	lsls	r0, r0, #1
 801ce9e:	b280      	uxth	r0, r0
 801cea0:	4770      	bx	lr
 801cea2:	bf00      	nop
 801cea4:	2005ba9e 	.word	0x2005ba9e

0801cea8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801cea8:	2bff      	cmp	r3, #255	@ 0xff
 801ceaa:	d05e      	beq.n	801cf6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 801ceac:	2a0b      	cmp	r2, #11
 801ceae:	d058      	beq.n	801cf62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801ceb0:	d80e      	bhi.n	801ced0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ceb2:	2a03      	cmp	r2, #3
 801ceb4:	d04d      	beq.n	801cf52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801ceb6:	d804      	bhi.n	801cec2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ceb8:	2a01      	cmp	r2, #1
 801ceba:	d04c      	beq.n	801cf56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 801cebc:	d94d      	bls.n	801cf5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 801cebe:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801cec0:	e031      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cec2:	2a09      	cmp	r2, #9
 801cec4:	d04d      	beq.n	801cf62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801cec6:	d84a      	bhi.n	801cf5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801cec8:	2a08      	cmp	r2, #8
 801ceca:	d048      	beq.n	801cf5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801cecc:	2300      	movs	r3, #0
 801cece:	e02a      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ced0:	2a2f      	cmp	r2, #47	@ 0x2f
 801ced2:	d02c      	beq.n	801cf2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801ced4:	d811      	bhi.n	801cefa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801ced6:	2a2d      	cmp	r2, #45	@ 0x2d
 801ced8:	d018      	beq.n	801cf0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 801ceda:	d831      	bhi.n	801cf40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 801cedc:	2a2c      	cmp	r2, #44	@ 0x2c
 801cede:	d1f5      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cee0:	684a      	ldr	r2, [r1, #4]
 801cee2:	7813      	ldrb	r3, [r2, #0]
 801cee4:	7852      	ldrb	r2, [r2, #1]
 801cee6:	2a00      	cmp	r2, #0
 801cee8:	d1f0      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ceea:	2b01      	cmp	r3, #1
 801ceec:	d01d      	beq.n	801cf2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	d02d      	beq.n	801cf4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801cef2:	2b02      	cmp	r3, #2
 801cef4:	d1ea      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cef6:	68c3      	ldr	r3, [r0, #12]
 801cef8:	e015      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cefa:	2a31      	cmp	r2, #49	@ 0x31
 801cefc:	d004      	beq.n	801cf08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801cefe:	d332      	bcc.n	801cf66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801cf00:	2a32      	cmp	r2, #50	@ 0x32
 801cf02:	d030      	beq.n	801cf66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801cf04:	2a33      	cmp	r2, #51	@ 0x33
 801cf06:	d1e1      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf08:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801cf0a:	e00c      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf0c:	684a      	ldr	r2, [r1, #4]
 801cf0e:	7813      	ldrb	r3, [r2, #0]
 801cf10:	7852      	ldrb	r2, [r2, #1]
 801cf12:	2a00      	cmp	r2, #0
 801cf14:	d1da      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf16:	2b01      	cmp	r3, #1
 801cf18:	d004      	beq.n	801cf24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 801cf1a:	d30f      	bcc.n	801cf3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 801cf1c:	2b02      	cmp	r3, #2
 801cf1e:	d1d5      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf20:	6943      	ldr	r3, [r0, #20]
 801cf22:	e000      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf24:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801cf26:	4618      	mov	r0, r3
 801cf28:	4770      	bx	lr
 801cf2a:	69c3      	ldr	r3, [r0, #28]
 801cf2c:	e7fb      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf2e:	684b      	ldr	r3, [r1, #4]
 801cf30:	781a      	ldrb	r2, [r3, #0]
 801cf32:	785b      	ldrb	r3, [r3, #1]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d1c9      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf38:	2a00      	cmp	r2, #0
 801cf3a:	d1f4      	bne.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf3c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801cf3e:	e7f2      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf40:	684b      	ldr	r3, [r1, #4]
 801cf42:	781a      	ldrb	r2, [r3, #0]
 801cf44:	785b      	ldrb	r3, [r3, #1]
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d1c0      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf4a:	2a00      	cmp	r2, #0
 801cf4c:	d1eb      	bne.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf4e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801cf50:	e7e9      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf52:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801cf54:	e7e7      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf56:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801cf58:	e7e5      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf5a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801cf5c:	e7e3      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf5e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801cf60:	e7e1      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf62:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801cf64:	e7df      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf66:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801cf68:	e7dd      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf6a:	2a0b      	cmp	r2, #11
 801cf6c:	d059      	beq.n	801d022 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801cf6e:	d80e      	bhi.n	801cf8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 801cf70:	2a03      	cmp	r2, #3
 801cf72:	d050      	beq.n	801d016 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801cf74:	d804      	bhi.n	801cf80 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801cf76:	2a01      	cmp	r2, #1
 801cf78:	d04f      	beq.n	801d01a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801cf7a:	d950      	bls.n	801d01e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801cf7c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801cf7e:	e7d2      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf80:	2a09      	cmp	r2, #9
 801cf82:	d04e      	beq.n	801d022 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801cf84:	d801      	bhi.n	801cf8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801cf86:	2a08      	cmp	r2, #8
 801cf88:	d1a0      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf8a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801cf8c:	e7cb      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cf8e:	2a2f      	cmp	r2, #47	@ 0x2f
 801cf90:	d02d      	beq.n	801cfee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801cf92:	d811      	bhi.n	801cfb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801cf94:	2a2d      	cmp	r2, #45	@ 0x2d
 801cf96:	d018      	beq.n	801cfca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801cf98:	d833      	bhi.n	801d002 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 801cf9a:	2a2c      	cmp	r2, #44	@ 0x2c
 801cf9c:	d196      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf9e:	684a      	ldr	r2, [r1, #4]
 801cfa0:	7813      	ldrb	r3, [r2, #0]
 801cfa2:	7852      	ldrb	r2, [r2, #1]
 801cfa4:	2a00      	cmp	r2, #0
 801cfa6:	d191      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfa8:	2b01      	cmp	r3, #1
 801cfaa:	d01e      	beq.n	801cfea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d030      	beq.n	801d012 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 801cfb0:	2b02      	cmp	r3, #2
 801cfb2:	d18b      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfb4:	6903      	ldr	r3, [r0, #16]
 801cfb6:	e7b6      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfb8:	2a31      	cmp	r2, #49	@ 0x31
 801cfba:	d004      	beq.n	801cfc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 801cfbc:	d333      	bcc.n	801d026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801cfbe:	2a32      	cmp	r2, #50	@ 0x32
 801cfc0:	d031      	beq.n	801d026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801cfc2:	2a33      	cmp	r2, #51	@ 0x33
 801cfc4:	d182      	bne.n	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfc6:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801cfc8:	e7ad      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfca:	684a      	ldr	r2, [r1, #4]
 801cfcc:	7813      	ldrb	r3, [r2, #0]
 801cfce:	7852      	ldrb	r2, [r2, #1]
 801cfd0:	2a00      	cmp	r2, #0
 801cfd2:	f47f af7b 	bne.w	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfd6:	2b01      	cmp	r3, #1
 801cfd8:	d005      	beq.n	801cfe6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cfda:	d310      	bcc.n	801cffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 801cfdc:	2b02      	cmp	r3, #2
 801cfde:	f47f af75 	bne.w	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cfe2:	6983      	ldr	r3, [r0, #24]
 801cfe4:	e79f      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfe6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801cfe8:	e79d      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfea:	6a03      	ldr	r3, [r0, #32]
 801cfec:	e79b      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cfee:	684b      	ldr	r3, [r1, #4]
 801cff0:	781a      	ldrb	r2, [r3, #0]
 801cff2:	785b      	ldrb	r3, [r3, #1]
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	f47f af69 	bne.w	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cffa:	2a00      	cmp	r2, #0
 801cffc:	d193      	bne.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cffe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801d000:	e791      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d002:	684b      	ldr	r3, [r1, #4]
 801d004:	781a      	ldrb	r2, [r3, #0]
 801d006:	785b      	ldrb	r3, [r3, #1]
 801d008:	2b00      	cmp	r3, #0
 801d00a:	f47f af5f 	bne.w	801cecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d00e:	2a00      	cmp	r2, #0
 801d010:	d189      	bne.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d012:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801d014:	e787      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d016:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801d018:	e785      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d01a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801d01c:	e783      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d01e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801d020:	e781      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d022:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801d024:	e77f      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d026:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801d028:	e77d      	b.n	801cf26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801d02a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d02a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d02e:	b087      	sub	sp, #28
 801d030:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d032:	9101      	str	r1, [sp, #4]
 801d034:	9205      	str	r2, [sp, #20]
 801d036:	6841      	ldr	r1, [r0, #4]
 801d038:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d03c:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801d040:	9202      	str	r2, [sp, #8]
 801d042:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801d046:	fb01 2404 	mla	r4, r1, r4, r2
 801d04a:	6802      	ldr	r2, [r0, #0]
 801d04c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d050:	f8de 2000 	ldr.w	r2, [lr]
 801d054:	9203      	str	r2, [sp, #12]
 801d056:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d05a:	3204      	adds	r2, #4
 801d05c:	9204      	str	r2, [sp, #16]
 801d05e:	9a02      	ldr	r2, [sp, #8]
 801d060:	43d6      	mvns	r6, r2
 801d062:	b2f6      	uxtb	r6, r6
 801d064:	9a01      	ldr	r2, [sp, #4]
 801d066:	2a00      	cmp	r2, #0
 801d068:	dc03      	bgt.n	801d072 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d06a:	9a05      	ldr	r2, [sp, #20]
 801d06c:	2a00      	cmp	r2, #0
 801d06e:	f340 8129 	ble.w	801d2c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d072:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d074:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801d078:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d07c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d07e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801d082:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d086:	2b00      	cmp	r3, #0
 801d088:	dd0e      	ble.n	801d0a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d08a:	1408      	asrs	r0, r1, #16
 801d08c:	d405      	bmi.n	801d09a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d08e:	4560      	cmp	r0, ip
 801d090:	da03      	bge.n	801d09a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d092:	1410      	asrs	r0, r2, #16
 801d094:	d401      	bmi.n	801d09a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d096:	42b8      	cmp	r0, r7
 801d098:	db07      	blt.n	801d0aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d09a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d09c:	3b01      	subs	r3, #1
 801d09e:	4401      	add	r1, r0
 801d0a0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d0a2:	3402      	adds	r4, #2
 801d0a4:	4402      	add	r2, r0
 801d0a6:	e7ee      	b.n	801d086 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d0a8:	d071      	beq.n	801d18e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d0aa:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d0ac:	1e58      	subs	r0, r3, #1
 801d0ae:	fb05 1500 	mla	r5, r5, r0, r1
 801d0b2:	142d      	asrs	r5, r5, #16
 801d0b4:	d45f      	bmi.n	801d176 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d0b6:	4565      	cmp	r5, ip
 801d0b8:	da5d      	bge.n	801d176 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d0ba:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d0bc:	fb05 2000 	mla	r0, r5, r0, r2
 801d0c0:	1400      	asrs	r0, r0, #16
 801d0c2:	d458      	bmi.n	801d176 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d0c4:	42b8      	cmp	r0, r7
 801d0c6:	da56      	bge.n	801d176 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d0c8:	4699      	mov	r9, r3
 801d0ca:	46a2      	mov	sl, r4
 801d0cc:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801d0d0:	f1b9 0f00 	cmp.w	r9, #0
 801d0d4:	dd57      	ble.n	801d186 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d0d6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d0da:	9803      	ldr	r0, [sp, #12]
 801d0dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d0e0:	fb07 000c 	mla	r0, r7, ip, r0
 801d0e4:	140d      	asrs	r5, r1, #16
 801d0e6:	5d40      	ldrb	r0, [r0, r5]
 801d0e8:	9d04      	ldr	r5, [sp, #16]
 801d0ea:	f109 39ff 	add.w	r9, r9, #4294967295
 801d0ee:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d0f2:	f8ba 5000 	ldrh.w	r5, [sl]
 801d0f6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d0fa:	122f      	asrs	r7, r5, #8
 801d0fc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d100:	fb17 f706 	smulbb	r7, r7, r6
 801d104:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d108:	00ed      	lsls	r5, r5, #3
 801d10a:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801d10e:	b2ed      	uxtb	r5, r5
 801d110:	fb18 f806 	smulbb	r8, r8, r6
 801d114:	fb15 f506 	smulbb	r5, r5, r6
 801d118:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d11c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d120:	10c7      	asrs	r7, r0, #3
 801d122:	00c0      	lsls	r0, r0, #3
 801d124:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d128:	b2c0      	uxtb	r0, r0
 801d12a:	fb07 870b 	mla	r7, r7, fp, r8
 801d12e:	fb00 500b 	mla	r0, r0, fp, r5
 801d132:	fa1f fc8c 	uxth.w	ip, ip
 801d136:	b280      	uxth	r0, r0
 801d138:	b2bf      	uxth	r7, r7
 801d13a:	f10c 0501 	add.w	r5, ip, #1
 801d13e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d142:	f107 0801 	add.w	r8, r7, #1
 801d146:	1c45      	adds	r5, r0, #1
 801d148:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d14c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d150:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d152:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d156:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d15a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d15e:	ea45 0c0c 	orr.w	ip, r5, ip
 801d162:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801d166:	4401      	add	r1, r0
 801d168:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d16a:	ea4c 0c08 	orr.w	ip, ip, r8
 801d16e:	f82a cb02 	strh.w	ip, [sl], #2
 801d172:	4402      	add	r2, r0
 801d174:	e7ac      	b.n	801d0d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d176:	f04f 0800 	mov.w	r8, #0
 801d17a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801d17e:	eb03 0008 	add.w	r0, r3, r8
 801d182:	2800      	cmp	r0, #0
 801d184:	dc41      	bgt.n	801d20a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d186:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d18a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d18e:	9b01      	ldr	r3, [sp, #4]
 801d190:	2b00      	cmp	r3, #0
 801d192:	f340 8097 	ble.w	801d2c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d196:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d19a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d19e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d1a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d1a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d1aa:	eef0 6a62 	vmov.f32	s13, s5
 801d1ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d1b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d1b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d1ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d1be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d1c2:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801d1c6:	eef0 6a43 	vmov.f32	s13, s6
 801d1ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d1ce:	ee12 2a90 	vmov	r2, s5
 801d1d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d1d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d1d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d1dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1e0:	ee13 2a10 	vmov	r2, s6
 801d1e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d1e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d1e8:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801d1ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1f0:	9314      	str	r3, [sp, #80]	@ 0x50
 801d1f2:	9b01      	ldr	r3, [sp, #4]
 801d1f4:	9a05      	ldr	r2, [sp, #20]
 801d1f6:	3b01      	subs	r3, #1
 801d1f8:	9301      	str	r3, [sp, #4]
 801d1fa:	eeb0 3a67 	vmov.f32	s6, s15
 801d1fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d200:	eef0 2a47 	vmov.f32	s5, s14
 801d204:	bf08      	it	eq
 801d206:	4613      	moveq	r3, r2
 801d208:	e72c      	b.n	801d064 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d20a:	140f      	asrs	r7, r1, #16
 801d20c:	d453      	bmi.n	801d2b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d20e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d212:	42bd      	cmp	r5, r7
 801d214:	dd4f      	ble.n	801d2b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d216:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d21a:	d44c      	bmi.n	801d2b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d21c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d220:	4560      	cmp	r0, ip
 801d222:	dd48      	ble.n	801d2b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d224:	9803      	ldr	r0, [sp, #12]
 801d226:	b22d      	sxth	r5, r5
 801d228:	fb0c 0505 	mla	r5, ip, r5, r0
 801d22c:	5de8      	ldrb	r0, [r5, r7]
 801d22e:	9d04      	ldr	r5, [sp, #16]
 801d230:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d234:	f06f 0501 	mvn.w	r5, #1
 801d238:	fb05 fb08 	mul.w	fp, r5, r8
 801d23c:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d240:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d244:	122f      	asrs	r7, r5, #8
 801d246:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d24a:	fb17 f706 	smulbb	r7, r7, r6
 801d24e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d252:	00ed      	lsls	r5, r5, #3
 801d254:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801d258:	b2ed      	uxtb	r5, r5
 801d25a:	fb19 f906 	smulbb	r9, r9, r6
 801d25e:	fb15 f506 	smulbb	r5, r5, r6
 801d262:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d266:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d26a:	10c7      	asrs	r7, r0, #3
 801d26c:	00c0      	lsls	r0, r0, #3
 801d26e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d272:	b2c0      	uxtb	r0, r0
 801d274:	fb07 970a 	mla	r7, r7, sl, r9
 801d278:	fb00 500a 	mla	r0, r0, sl, r5
 801d27c:	fa1f fc8c 	uxth.w	ip, ip
 801d280:	b2bf      	uxth	r7, r7
 801d282:	b280      	uxth	r0, r0
 801d284:	f10c 0501 	add.w	r5, ip, #1
 801d288:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d28c:	f107 0901 	add.w	r9, r7, #1
 801d290:	1c45      	adds	r5, r0, #1
 801d292:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d296:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d29a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d29e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d2a2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d2a6:	ea45 0c0c 	orr.w	ip, r5, ip
 801d2aa:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801d2ae:	ea4c 0c09 	orr.w	ip, ip, r9
 801d2b2:	f824 c00b 	strh.w	ip, [r4, fp]
 801d2b6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d2b8:	f108 38ff 	add.w	r8, r8, #4294967295
 801d2bc:	4401      	add	r1, r0
 801d2be:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d2c0:	4402      	add	r2, r0
 801d2c2:	e75c      	b.n	801d17e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d2c4:	b007      	add	sp, #28
 801d2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d2ca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d2ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d2ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2d2:	b085      	sub	sp, #20
 801d2d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d2d6:	4693      	mov	fp, r2
 801d2d8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d2dc:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801d2e0:	6870      	ldr	r0, [r6, #4]
 801d2e2:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801d2e4:	fb00 2404 	mla	r4, r0, r4, r2
 801d2e8:	6832      	ldr	r2, [r6, #0]
 801d2ea:	9100      	str	r1, [sp, #0]
 801d2ec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d2f0:	682a      	ldr	r2, [r5, #0]
 801d2f2:	9201      	str	r2, [sp, #4]
 801d2f4:	686a      	ldr	r2, [r5, #4]
 801d2f6:	3204      	adds	r2, #4
 801d2f8:	9202      	str	r2, [sp, #8]
 801d2fa:	9a00      	ldr	r2, [sp, #0]
 801d2fc:	2a00      	cmp	r2, #0
 801d2fe:	dc03      	bgt.n	801d308 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d300:	f1bb 0f00 	cmp.w	fp, #0
 801d304:	f340 80a0 	ble.w	801d448 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d308:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d30a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d30e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d312:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d314:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d318:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	dd0c      	ble.n	801d33a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d320:	1406      	asrs	r6, r0, #16
 801d322:	d405      	bmi.n	801d330 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d324:	454e      	cmp	r6, r9
 801d326:	da03      	bge.n	801d330 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d328:	1416      	asrs	r6, r2, #16
 801d32a:	d401      	bmi.n	801d330 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d32c:	4546      	cmp	r6, r8
 801d32e:	db05      	blt.n	801d33c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d330:	4470      	add	r0, lr
 801d332:	4462      	add	r2, ip
 801d334:	3b01      	subs	r3, #1
 801d336:	3402      	adds	r4, #2
 801d338:	e7f0      	b.n	801d31c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d33a:	d00f      	beq.n	801d35c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d33c:	1e5e      	subs	r6, r3, #1
 801d33e:	fb0e 0706 	mla	r7, lr, r6, r0
 801d342:	143f      	asrs	r7, r7, #16
 801d344:	d541      	bpl.n	801d3ca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801d346:	4698      	mov	r8, r3
 801d348:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d34c:	9603      	str	r6, [sp, #12]
 801d34e:	f1b8 0f00 	cmp.w	r8, #0
 801d352:	dc59      	bgt.n	801d408 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d354:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d358:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d35c:	9b00      	ldr	r3, [sp, #0]
 801d35e:	2b00      	cmp	r3, #0
 801d360:	dd72      	ble.n	801d448 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d362:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d366:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d36a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d36e:	eeb0 6a62 	vmov.f32	s12, s5
 801d372:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d376:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d37a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d37e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d382:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d386:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d38a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d38e:	eeb0 6a43 	vmov.f32	s12, s6
 801d392:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d396:	ee12 2a90 	vmov	r2, s5
 801d39a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d39e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d3a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3a4:	fb92 fef3 	sdiv	lr, r2, r3
 801d3a8:	ee13 2a10 	vmov	r2, s6
 801d3ac:	fb92 fcf3 	sdiv	ip, r2, r3
 801d3b0:	9b00      	ldr	r3, [sp, #0]
 801d3b2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d3b6:	3b01      	subs	r3, #1
 801d3b8:	9300      	str	r3, [sp, #0]
 801d3ba:	eeb0 3a67 	vmov.f32	s6, s15
 801d3be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d3c0:	eef0 2a47 	vmov.f32	s5, s14
 801d3c4:	bf08      	it	eq
 801d3c6:	465b      	moveq	r3, fp
 801d3c8:	e797      	b.n	801d2fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d3ca:	454f      	cmp	r7, r9
 801d3cc:	dabb      	bge.n	801d346 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d3ce:	fb0c 2606 	mla	r6, ip, r6, r2
 801d3d2:	1436      	asrs	r6, r6, #16
 801d3d4:	d4b7      	bmi.n	801d346 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d3d6:	4546      	cmp	r6, r8
 801d3d8:	dab5      	bge.n	801d346 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d3da:	461e      	mov	r6, r3
 801d3dc:	46a0      	mov	r8, r4
 801d3de:	2e00      	cmp	r6, #0
 801d3e0:	ddb8      	ble.n	801d354 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d3e2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d3e6:	9901      	ldr	r1, [sp, #4]
 801d3e8:	1417      	asrs	r7, r2, #16
 801d3ea:	fb0a 1707 	mla	r7, sl, r7, r1
 801d3ee:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d3f2:	f817 7009 	ldrb.w	r7, [r7, r9]
 801d3f6:	9902      	ldr	r1, [sp, #8]
 801d3f8:	4470      	add	r0, lr
 801d3fa:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d3fe:	4462      	add	r2, ip
 801d400:	f828 7b02 	strh.w	r7, [r8], #2
 801d404:	3e01      	subs	r6, #1
 801d406:	e7ea      	b.n	801d3de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d408:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d40c:	d417      	bmi.n	801d43e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d40e:	68ae      	ldr	r6, [r5, #8]
 801d410:	454e      	cmp	r6, r9
 801d412:	dd14      	ble.n	801d43e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d414:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d418:	d411      	bmi.n	801d43e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d41a:	68ef      	ldr	r7, [r5, #12]
 801d41c:	4557      	cmp	r7, sl
 801d41e:	dd0e      	ble.n	801d43e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d420:	f06f 0101 	mvn.w	r1, #1
 801d424:	9f01      	ldr	r7, [sp, #4]
 801d426:	b236      	sxth	r6, r6
 801d428:	fb0a 7606 	mla	r6, sl, r6, r7
 801d42c:	9f02      	ldr	r7, [sp, #8]
 801d42e:	f816 6009 	ldrb.w	r6, [r6, r9]
 801d432:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d436:	fb01 f608 	mul.w	r6, r1, r8
 801d43a:	9903      	ldr	r1, [sp, #12]
 801d43c:	538f      	strh	r7, [r1, r6]
 801d43e:	4470      	add	r0, lr
 801d440:	4462      	add	r2, ip
 801d442:	f108 38ff 	add.w	r8, r8, #4294967295
 801d446:	e782      	b.n	801d34e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d448:	b005      	add	sp, #20
 801d44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d44e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d44e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d452:	b087      	sub	sp, #28
 801d454:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d456:	9102      	str	r1, [sp, #8]
 801d458:	9205      	str	r2, [sp, #20]
 801d45a:	6861      	ldr	r1, [r4, #4]
 801d45c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d460:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801d464:	9203      	str	r2, [sp, #12]
 801d466:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801d46a:	fb01 2000 	mla	r0, r1, r0, r2
 801d46e:	6822      	ldr	r2, [r4, #0]
 801d470:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801d474:	9200      	str	r2, [sp, #0]
 801d476:	f8dc 2000 	ldr.w	r2, [ip]
 801d47a:	9204      	str	r2, [sp, #16]
 801d47c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d480:	3204      	adds	r2, #4
 801d482:	9201      	str	r2, [sp, #4]
 801d484:	9a03      	ldr	r2, [sp, #12]
 801d486:	43d5      	mvns	r5, r2
 801d488:	b2ed      	uxtb	r5, r5
 801d48a:	9a02      	ldr	r2, [sp, #8]
 801d48c:	2a00      	cmp	r2, #0
 801d48e:	dc03      	bgt.n	801d498 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d490:	9a05      	ldr	r2, [sp, #20]
 801d492:	2a00      	cmp	r2, #0
 801d494:	f340 812c 	ble.w	801d6f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d498:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d49a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d49e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d4a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d4a4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d4a8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	dd10      	ble.n	801d4d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d4b0:	140c      	asrs	r4, r1, #16
 801d4b2:	d405      	bmi.n	801d4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4b4:	4574      	cmp	r4, lr
 801d4b6:	da03      	bge.n	801d4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4b8:	1414      	asrs	r4, r2, #16
 801d4ba:	d401      	bmi.n	801d4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4bc:	42bc      	cmp	r4, r7
 801d4be:	db09      	blt.n	801d4d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d4c0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d4c2:	9800      	ldr	r0, [sp, #0]
 801d4c4:	4421      	add	r1, r4
 801d4c6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d4c8:	3002      	adds	r0, #2
 801d4ca:	4422      	add	r2, r4
 801d4cc:	3b01      	subs	r3, #1
 801d4ce:	9000      	str	r0, [sp, #0]
 801d4d0:	e7ec      	b.n	801d4ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d4d2:	d071      	beq.n	801d5b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801d4d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d4d6:	1e5c      	subs	r4, r3, #1
 801d4d8:	fb06 1604 	mla	r6, r6, r4, r1
 801d4dc:	1436      	asrs	r6, r6, #16
 801d4de:	d45d      	bmi.n	801d59c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d4e0:	4576      	cmp	r6, lr
 801d4e2:	da5b      	bge.n	801d59c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d4e4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d4e6:	fb06 2404 	mla	r4, r6, r4, r2
 801d4ea:	1424      	asrs	r4, r4, #16
 801d4ec:	d456      	bmi.n	801d59c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d4ee:	42bc      	cmp	r4, r7
 801d4f0:	da54      	bge.n	801d59c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d4f2:	4698      	mov	r8, r3
 801d4f4:	f8dd 9000 	ldr.w	r9, [sp]
 801d4f8:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801d4fc:	f1b8 0f00 	cmp.w	r8, #0
 801d500:	dd54      	ble.n	801d5ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d502:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d506:	9804      	ldr	r0, [sp, #16]
 801d508:	1414      	asrs	r4, r2, #16
 801d50a:	fb07 0404 	mla	r4, r7, r4, r0
 801d50e:	140e      	asrs	r6, r1, #16
 801d510:	f814 e006 	ldrb.w	lr, [r4, r6]
 801d514:	9801      	ldr	r0, [sp, #4]
 801d516:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d51a:	eb00 0b0e 	add.w	fp, r0, lr
 801d51e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d522:	f8b9 4000 	ldrh.w	r4, [r9]
 801d526:	fb16 f60a 	smulbb	r6, r6, sl
 801d52a:	1227      	asrs	r7, r4, #8
 801d52c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d530:	fb07 6705 	mla	r7, r7, r5, r6
 801d534:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d538:	10e6      	asrs	r6, r4, #3
 801d53a:	00e4      	lsls	r4, r4, #3
 801d53c:	b2e4      	uxtb	r4, r4
 801d53e:	fb1b fb0a 	smulbb	fp, fp, sl
 801d542:	fb14 f405 	smulbb	r4, r4, r5
 801d546:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801d54a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d54e:	fb06 b605 	mla	r6, r6, r5, fp
 801d552:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801d556:	b2bf      	uxth	r7, r7
 801d558:	b2b6      	uxth	r6, r6
 801d55a:	fa1f fe8e 	uxth.w	lr, lr
 801d55e:	1c7c      	adds	r4, r7, #1
 801d560:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d564:	f106 0b01 	add.w	fp, r6, #1
 801d568:	f10e 0401 	add.w	r4, lr, #1
 801d56c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d56e:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801d572:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d576:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d57a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d57e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d582:	4327      	orrs	r7, r4
 801d584:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801d588:	4401      	add	r1, r0
 801d58a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d58c:	ea47 070b 	orr.w	r7, r7, fp
 801d590:	f829 7b02 	strh.w	r7, [r9], #2
 801d594:	4402      	add	r2, r0
 801d596:	f108 38ff 	add.w	r8, r8, #4294967295
 801d59a:	e7af      	b.n	801d4fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d59c:	f04f 0e00 	mov.w	lr, #0
 801d5a0:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801d5a4:	eb03 040e 	add.w	r4, r3, lr
 801d5a8:	2c00      	cmp	r4, #0
 801d5aa:	dc43      	bgt.n	801d634 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d5ac:	9a00      	ldr	r2, [sp, #0]
 801d5ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d5b2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d5b6:	9300      	str	r3, [sp, #0]
 801d5b8:	9b02      	ldr	r3, [sp, #8]
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	f340 8098 	ble.w	801d6f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d5c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d5c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d5c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d5cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d5d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d5d4:	eef0 6a62 	vmov.f32	s13, s5
 801d5d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d5dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d5e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d5e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d5e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d5ec:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801d5f0:	eef0 6a43 	vmov.f32	s13, s6
 801d5f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d5f8:	ee12 2a90 	vmov	r2, s5
 801d5fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d600:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d602:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d606:	fb92 f3f3 	sdiv	r3, r2, r3
 801d60a:	ee13 2a10 	vmov	r2, s6
 801d60e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d610:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d612:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801d616:	fb92 f3f3 	sdiv	r3, r2, r3
 801d61a:	9314      	str	r3, [sp, #80]	@ 0x50
 801d61c:	9b02      	ldr	r3, [sp, #8]
 801d61e:	9a05      	ldr	r2, [sp, #20]
 801d620:	3b01      	subs	r3, #1
 801d622:	9302      	str	r3, [sp, #8]
 801d624:	eeb0 3a67 	vmov.f32	s6, s15
 801d628:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d62a:	eef0 2a47 	vmov.f32	s5, s14
 801d62e:	bf08      	it	eq
 801d630:	4613      	moveq	r3, r2
 801d632:	e72a      	b.n	801d48a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d634:	140f      	asrs	r7, r1, #16
 801d636:	d454      	bmi.n	801d6e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d638:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d63c:	42be      	cmp	r6, r7
 801d63e:	dd50      	ble.n	801d6e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d640:	ea5f 4822 	movs.w	r8, r2, asr #16
 801d644:	d44d      	bmi.n	801d6e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d646:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801d64a:	4544      	cmp	r4, r8
 801d64c:	dd49      	ble.n	801d6e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d64e:	f06f 0001 	mvn.w	r0, #1
 801d652:	9c04      	ldr	r4, [sp, #16]
 801d654:	b236      	sxth	r6, r6
 801d656:	fb08 4606 	mla	r6, r8, r6, r4
 801d65a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801d65e:	9c01      	ldr	r4, [sp, #4]
 801d660:	fb00 fa0e 	mul.w	sl, r0, lr
 801d664:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d668:	eb04 0b08 	add.w	fp, r4, r8
 801d66c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d670:	9800      	ldr	r0, [sp, #0]
 801d672:	fb16 f609 	smulbb	r6, r6, r9
 801d676:	f830 400a 	ldrh.w	r4, [r0, sl]
 801d67a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d67e:	1227      	asrs	r7, r4, #8
 801d680:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d684:	fb07 6705 	mla	r7, r7, r5, r6
 801d688:	10e6      	asrs	r6, r4, #3
 801d68a:	00e4      	lsls	r4, r4, #3
 801d68c:	b2e4      	uxtb	r4, r4
 801d68e:	fb1b fb09 	smulbb	fp, fp, r9
 801d692:	9801      	ldr	r0, [sp, #4]
 801d694:	fb14 f405 	smulbb	r4, r4, r5
 801d698:	f810 8008 	ldrb.w	r8, [r0, r8]
 801d69c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d6a0:	fb06 b605 	mla	r6, r6, r5, fp
 801d6a4:	fb08 4809 	mla	r8, r8, r9, r4
 801d6a8:	b2bf      	uxth	r7, r7
 801d6aa:	b2b6      	uxth	r6, r6
 801d6ac:	fa1f f888 	uxth.w	r8, r8
 801d6b0:	1c7c      	adds	r4, r7, #1
 801d6b2:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d6b6:	f106 0b01 	add.w	fp, r6, #1
 801d6ba:	f108 0401 	add.w	r4, r8, #1
 801d6be:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801d6c2:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d6c6:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d6ca:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d6ce:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d6d2:	4327      	orrs	r7, r4
 801d6d4:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801d6d8:	9800      	ldr	r0, [sp, #0]
 801d6da:	ea47 070b 	orr.w	r7, r7, fp
 801d6de:	f820 700a 	strh.w	r7, [r0, sl]
 801d6e2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d6e4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d6e8:	4401      	add	r1, r0
 801d6ea:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d6ec:	4402      	add	r2, r0
 801d6ee:	e759      	b.n	801d5a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d6f0:	b007      	add	sp, #28
 801d6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d6f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d6f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d700:	b085      	sub	sp, #20
 801d702:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d704:	9203      	str	r2, [sp, #12]
 801d706:	6870      	ldr	r0, [r6, #4]
 801d708:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d70c:	fb00 2404 	mla	r4, r0, r4, r2
 801d710:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801d712:	6832      	ldr	r2, [r6, #0]
 801d714:	686f      	ldr	r7, [r5, #4]
 801d716:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d71a:	682a      	ldr	r2, [r5, #0]
 801d71c:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801d720:	9101      	str	r1, [sp, #4]
 801d722:	9202      	str	r2, [sp, #8]
 801d724:	3704      	adds	r7, #4
 801d726:	9a01      	ldr	r2, [sp, #4]
 801d728:	2a00      	cmp	r2, #0
 801d72a:	dc03      	bgt.n	801d734 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d72c:	9a03      	ldr	r2, [sp, #12]
 801d72e:	2a00      	cmp	r2, #0
 801d730:	f340 80cc 	ble.w	801d8cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d734:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d736:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d73a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d73e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d740:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d744:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d748:	2b00      	cmp	r3, #0
 801d74a:	dd0d      	ble.n	801d768 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d74c:	1406      	asrs	r6, r0, #16
 801d74e:	d405      	bmi.n	801d75c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d750:	454e      	cmp	r6, r9
 801d752:	da03      	bge.n	801d75c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d754:	1416      	asrs	r6, r2, #16
 801d756:	d401      	bmi.n	801d75c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d758:	4546      	cmp	r6, r8
 801d75a:	db06      	blt.n	801d76a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d75c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801d75e:	4460      	add	r0, ip
 801d760:	4432      	add	r2, r6
 801d762:	3b01      	subs	r3, #1
 801d764:	3402      	adds	r4, #2
 801d766:	e7ef      	b.n	801d748 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d768:	d00f      	beq.n	801d78a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d76a:	1e5e      	subs	r6, r3, #1
 801d76c:	fb0c 0e06 	mla	lr, ip, r6, r0
 801d770:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d774:	d543      	bpl.n	801d7fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801d776:	4698      	mov	r8, r3
 801d778:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801d77c:	f1b8 0f00 	cmp.w	r8, #0
 801d780:	dc71      	bgt.n	801d866 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d782:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d786:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d78a:	9b01      	ldr	r3, [sp, #4]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	f340 809d 	ble.w	801d8cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d792:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d796:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d79a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d79e:	eeb0 6a62 	vmov.f32	s12, s5
 801d7a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d7a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d7aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d7b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d7b6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d7ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d7be:	eeb0 6a43 	vmov.f32	s12, s6
 801d7c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d7c6:	ee12 2a90 	vmov	r2, s5
 801d7ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d7ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7d4:	fb92 fcf3 	sdiv	ip, r2, r3
 801d7d8:	ee13 2a10 	vmov	r2, s6
 801d7dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7e0:	9312      	str	r3, [sp, #72]	@ 0x48
 801d7e2:	9b01      	ldr	r3, [sp, #4]
 801d7e4:	9a03      	ldr	r2, [sp, #12]
 801d7e6:	3b01      	subs	r3, #1
 801d7e8:	9301      	str	r3, [sp, #4]
 801d7ea:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d7ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7f0:	eeb0 3a67 	vmov.f32	s6, s15
 801d7f4:	bf08      	it	eq
 801d7f6:	4613      	moveq	r3, r2
 801d7f8:	eef0 2a47 	vmov.f32	s5, s14
 801d7fc:	e793      	b.n	801d726 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d7fe:	45ce      	cmp	lr, r9
 801d800:	dab9      	bge.n	801d776 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d802:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d804:	fb01 2606 	mla	r6, r1, r6, r2
 801d808:	1436      	asrs	r6, r6, #16
 801d80a:	d4b4      	bmi.n	801d776 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d80c:	4546      	cmp	r6, r8
 801d80e:	dab2      	bge.n	801d776 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d810:	4698      	mov	r8, r3
 801d812:	46a2      	mov	sl, r4
 801d814:	f1b8 0f00 	cmp.w	r8, #0
 801d818:	ddb3      	ble.n	801d782 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d81a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d81e:	9902      	ldr	r1, [sp, #8]
 801d820:	1416      	asrs	r6, r2, #16
 801d822:	fb09 1606 	mla	r6, r9, r6, r1
 801d826:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801d82a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801d82e:	4929      	ldr	r1, [pc, #164]	@ (801d8d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801d830:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d834:	eb07 0b0e 	add.w	fp, r7, lr
 801d838:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801d83c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d840:	00f6      	lsls	r6, r6, #3
 801d842:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801d846:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801d84a:	ea49 0606 	orr.w	r6, r9, r6
 801d84e:	f817 900e 	ldrb.w	r9, [r7, lr]
 801d852:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d854:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801d858:	f82a 6b02 	strh.w	r6, [sl], #2
 801d85c:	4460      	add	r0, ip
 801d85e:	440a      	add	r2, r1
 801d860:	f108 38ff 	add.w	r8, r8, #4294967295
 801d864:	e7d6      	b.n	801d814 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d866:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d86a:	d429      	bmi.n	801d8c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d86c:	68ae      	ldr	r6, [r5, #8]
 801d86e:	454e      	cmp	r6, r9
 801d870:	dd26      	ble.n	801d8c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d872:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801d876:	d423      	bmi.n	801d8c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d878:	68e9      	ldr	r1, [r5, #12]
 801d87a:	4559      	cmp	r1, fp
 801d87c:	dd20      	ble.n	801d8c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d87e:	9902      	ldr	r1, [sp, #8]
 801d880:	fa0f fe86 	sxth.w	lr, r6
 801d884:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801d888:	f06f 0101 	mvn.w	r1, #1
 801d88c:	f81e e009 	ldrb.w	lr, [lr, r9]
 801d890:	fb01 f908 	mul.w	r9, r1, r8
 801d894:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d898:	eb07 060e 	add.w	r6, r7, lr
 801d89c:	f896 b002 	ldrb.w	fp, [r6, #2]
 801d8a0:	7876      	ldrb	r6, [r6, #1]
 801d8a2:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801d8a6:	00f6      	lsls	r6, r6, #3
 801d8a8:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801d8ac:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801d8b0:	ea4b 0606 	orr.w	r6, fp, r6
 801d8b4:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801d8b8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801d8bc:	f82a 6009 	strh.w	r6, [sl, r9]
 801d8c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d8c2:	4460      	add	r0, ip
 801d8c4:	440a      	add	r2, r1
 801d8c6:	f108 38ff 	add.w	r8, r8, #4294967295
 801d8ca:	e757      	b.n	801d77c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d8cc:	b005      	add	sp, #20
 801d8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8d2:	bf00      	nop
 801d8d4:	fffff800 	.word	0xfffff800

0801d8d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d8d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8e0:	b087      	sub	sp, #28
 801d8e2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d8e4:	468b      	mov	fp, r1
 801d8e6:	9204      	str	r2, [sp, #16]
 801d8e8:	6841      	ldr	r1, [r0, #4]
 801d8ea:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d8ee:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801d8f2:	9205      	str	r2, [sp, #20]
 801d8f4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801d8f8:	fb01 2404 	mla	r4, r1, r4, r2
 801d8fc:	6802      	ldr	r2, [r0, #0]
 801d8fe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d902:	f8dc 2000 	ldr.w	r2, [ip]
 801d906:	9201      	str	r2, [sp, #4]
 801d908:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d90c:	3204      	adds	r2, #4
 801d90e:	9202      	str	r2, [sp, #8]
 801d910:	f1bb 0f00 	cmp.w	fp, #0
 801d914:	dc03      	bgt.n	801d91e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d916:	9a04      	ldr	r2, [sp, #16]
 801d918:	2a00      	cmp	r2, #0
 801d91a:	f340 8138 	ble.w	801db8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d91e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d920:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d924:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d928:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d92a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801d92e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d932:	2b00      	cmp	r3, #0
 801d934:	dd0e      	ble.n	801d954 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d936:	1402      	asrs	r2, r0, #16
 801d938:	d405      	bmi.n	801d946 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d93a:	42ba      	cmp	r2, r7
 801d93c:	da03      	bge.n	801d946 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d93e:	140a      	asrs	r2, r1, #16
 801d940:	d401      	bmi.n	801d946 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d942:	42b2      	cmp	r2, r6
 801d944:	db07      	blt.n	801d956 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d946:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d948:	3b01      	subs	r3, #1
 801d94a:	4410      	add	r0, r2
 801d94c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d94e:	3402      	adds	r4, #2
 801d950:	4411      	add	r1, r2
 801d952:	e7ee      	b.n	801d932 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d954:	d019      	beq.n	801d98a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d956:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d958:	1e5a      	subs	r2, r3, #1
 801d95a:	fb05 0502 	mla	r5, r5, r2, r0
 801d95e:	142d      	asrs	r5, r5, #16
 801d960:	d409      	bmi.n	801d976 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d962:	42bd      	cmp	r5, r7
 801d964:	da07      	bge.n	801d976 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d966:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d968:	fb05 1202 	mla	r2, r5, r2, r1
 801d96c:	1412      	asrs	r2, r2, #16
 801d96e:	d402      	bmi.n	801d976 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d970:	42b2      	cmp	r2, r6
 801d972:	f2c0 80ac 	blt.w	801dace <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801d976:	f04f 0e00 	mov.w	lr, #0
 801d97a:	eb03 020e 	add.w	r2, r3, lr
 801d97e:	2a00      	cmp	r2, #0
 801d980:	dc3e      	bgt.n	801da00 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d982:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d986:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d98a:	f1bb 0f00 	cmp.w	fp, #0
 801d98e:	f340 80fe 	ble.w	801db8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d992:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d996:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d99a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d99e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d9a2:	eeb0 6a62 	vmov.f32	s12, s5
 801d9a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d9aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d9ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d9b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d9b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d9ba:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801d9be:	eeb0 6a43 	vmov.f32	s12, s6
 801d9c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d9c6:	ee12 2a90 	vmov	r2, s5
 801d9ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d9ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d9d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d9d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801d9d8:	ee13 2a10 	vmov	r2, s6
 801d9dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d9de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d9e0:	f1bb 0b01 	subs.w	fp, fp, #1
 801d9e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801d9e8:	9a04      	ldr	r2, [sp, #16]
 801d9ea:	9314      	str	r3, [sp, #80]	@ 0x50
 801d9ec:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801d9f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d9f2:	eeb0 3a67 	vmov.f32	s6, s15
 801d9f6:	bf08      	it	eq
 801d9f8:	4613      	moveq	r3, r2
 801d9fa:	eef0 2a47 	vmov.f32	s5, s14
 801d9fe:	e787      	b.n	801d910 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801da00:	1406      	asrs	r6, r0, #16
 801da02:	d45d      	bmi.n	801dac0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801da04:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801da08:	42b5      	cmp	r5, r6
 801da0a:	dd59      	ble.n	801dac0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801da0c:	140f      	asrs	r7, r1, #16
 801da0e:	d457      	bmi.n	801dac0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801da10:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801da14:	42ba      	cmp	r2, r7
 801da16:	dd53      	ble.n	801dac0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801da18:	9a01      	ldr	r2, [sp, #4]
 801da1a:	b22d      	sxth	r5, r5
 801da1c:	fb07 2505 	mla	r5, r7, r5, r2
 801da20:	5daa      	ldrb	r2, [r5, r6]
 801da22:	9d02      	ldr	r5, [sp, #8]
 801da24:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801da28:	0e2e      	lsrs	r6, r5, #24
 801da2a:	d049      	beq.n	801dac0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801da2c:	f06f 0201 	mvn.w	r2, #1
 801da30:	fb02 f20e 	mul.w	r2, r2, lr
 801da34:	f834 8002 	ldrh.w	r8, [r4, r2]
 801da38:	9203      	str	r2, [sp, #12]
 801da3a:	9a05      	ldr	r2, [sp, #20]
 801da3c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801da40:	4356      	muls	r6, r2
 801da42:	1c72      	adds	r2, r6, #1
 801da44:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801da48:	1212      	asrs	r2, r2, #8
 801da4a:	fa1f f982 	uxth.w	r9, r2
 801da4e:	43d2      	mvns	r2, r2
 801da50:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801da54:	fb16 f609 	smulbb	r6, r6, r9
 801da58:	b2ed      	uxtb	r5, r5
 801da5a:	ea4f 2728 	mov.w	r7, r8, asr #8
 801da5e:	fb15 f509 	smulbb	r5, r5, r9
 801da62:	b2d2      	uxtb	r2, r2
 801da64:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801da68:	fb07 6702 	mla	r7, r7, r2, r6
 801da6c:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801da70:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801da74:	fb1a fa09 	smulbb	sl, sl, r9
 801da78:	fa5f f888 	uxtb.w	r8, r8
 801da7c:	fb08 5502 	mla	r5, r8, r2, r5
 801da80:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801da84:	fb06 a602 	mla	r6, r6, r2, sl
 801da88:	b2bf      	uxth	r7, r7
 801da8a:	b2ad      	uxth	r5, r5
 801da8c:	1c7a      	adds	r2, r7, #1
 801da8e:	f105 0a01 	add.w	sl, r5, #1
 801da92:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801da96:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801da9a:	b2b6      	uxth	r6, r6
 801da9c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801daa0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801daa4:	ea4a 0707 	orr.w	r7, sl, r7
 801daa8:	f106 0a01 	add.w	sl, r6, #1
 801daac:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801dab0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dab4:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801dab8:	9a03      	ldr	r2, [sp, #12]
 801daba:	ea47 070a 	orr.w	r7, r7, sl
 801dabe:	52a7      	strh	r7, [r4, r2]
 801dac0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dac2:	f10e 3eff 	add.w	lr, lr, #4294967295
 801dac6:	4410      	add	r0, r2
 801dac8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801daca:	4411      	add	r1, r2
 801dacc:	e755      	b.n	801d97a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dace:	f04f 0800 	mov.w	r8, #0
 801dad2:	eba3 0208 	sub.w	r2, r3, r8
 801dad6:	2a00      	cmp	r2, #0
 801dad8:	f77f af53 	ble.w	801d982 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801dadc:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801dae0:	9f01      	ldr	r7, [sp, #4]
 801dae2:	140a      	asrs	r2, r1, #16
 801dae4:	fb06 7202 	mla	r2, r6, r2, r7
 801dae8:	1405      	asrs	r5, r0, #16
 801daea:	5d52      	ldrb	r2, [r2, r5]
 801daec:	9d02      	ldr	r5, [sp, #8]
 801daee:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801daf2:	0e2e      	lsrs	r6, r5, #24
 801daf4:	d044      	beq.n	801db80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801daf6:	9a05      	ldr	r2, [sp, #20]
 801daf8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801dafc:	4356      	muls	r6, r2
 801dafe:	1c72      	adds	r2, r6, #1
 801db00:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801db04:	1212      	asrs	r2, r2, #8
 801db06:	fa1f f982 	uxth.w	r9, r2
 801db0a:	43d2      	mvns	r2, r2
 801db0c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801db10:	fb16 f609 	smulbb	r6, r6, r9
 801db14:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801db18:	b2ed      	uxtb	r5, r5
 801db1a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801db1e:	fb15 f509 	smulbb	r5, r5, r9
 801db22:	b2d2      	uxtb	r2, r2
 801db24:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801db28:	fb07 6702 	mla	r7, r7, r2, r6
 801db2c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801db30:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801db34:	fb1a fa09 	smulbb	sl, sl, r9
 801db38:	fa5f fe8e 	uxtb.w	lr, lr
 801db3c:	fb0e 5502 	mla	r5, lr, r2, r5
 801db40:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801db44:	fb06 a602 	mla	r6, r6, r2, sl
 801db48:	b2bf      	uxth	r7, r7
 801db4a:	b2ad      	uxth	r5, r5
 801db4c:	1c7a      	adds	r2, r7, #1
 801db4e:	f105 0a01 	add.w	sl, r5, #1
 801db52:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801db56:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801db5a:	b2b6      	uxth	r6, r6
 801db5c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801db60:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801db64:	ea4a 0707 	orr.w	r7, sl, r7
 801db68:	f106 0a01 	add.w	sl, r6, #1
 801db6c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801db70:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801db74:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801db78:	ea47 070a 	orr.w	r7, r7, sl
 801db7c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801db80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801db82:	f108 0801 	add.w	r8, r8, #1
 801db86:	4410      	add	r0, r2
 801db88:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801db8a:	4411      	add	r1, r2
 801db8c:	e7a1      	b.n	801dad2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801db8e:	b007      	add	sp, #28
 801db90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801db94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801db98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db9c:	b085      	sub	sp, #20
 801db9e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801dba0:	468b      	mov	fp, r1
 801dba2:	6841      	ldr	r1, [r0, #4]
 801dba4:	9203      	str	r2, [sp, #12]
 801dba6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801dbaa:	fb01 2404 	mla	r4, r1, r4, r2
 801dbae:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801dbb2:	6802      	ldr	r2, [r0, #0]
 801dbb4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dbb8:	f8de 2000 	ldr.w	r2, [lr]
 801dbbc:	9200      	str	r2, [sp, #0]
 801dbbe:	f8de 2004 	ldr.w	r2, [lr, #4]
 801dbc2:	3204      	adds	r2, #4
 801dbc4:	9201      	str	r2, [sp, #4]
 801dbc6:	f1bb 0f00 	cmp.w	fp, #0
 801dbca:	dc03      	bgt.n	801dbd4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801dbcc:	9a03      	ldr	r2, [sp, #12]
 801dbce:	2a00      	cmp	r2, #0
 801dbd0:	f340 8153 	ble.w	801de7a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801dbd4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dbd6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801dbda:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801dbde:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801dbe0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801dbe4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	dd0e      	ble.n	801dc0a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dbec:	1408      	asrs	r0, r1, #16
 801dbee:	d405      	bmi.n	801dbfc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dbf0:	42b8      	cmp	r0, r7
 801dbf2:	da03      	bge.n	801dbfc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dbf4:	1410      	asrs	r0, r2, #16
 801dbf6:	d401      	bmi.n	801dbfc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dbf8:	42b0      	cmp	r0, r6
 801dbfa:	db07      	blt.n	801dc0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dbfc:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dbfe:	3b01      	subs	r3, #1
 801dc00:	4401      	add	r1, r0
 801dc02:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dc04:	3402      	adds	r4, #2
 801dc06:	4402      	add	r2, r0
 801dc08:	e7ee      	b.n	801dbe8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801dc0a:	d017      	beq.n	801dc3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801dc0c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801dc0e:	1e58      	subs	r0, r3, #1
 801dc10:	fb05 1500 	mla	r5, r5, r0, r1
 801dc14:	142d      	asrs	r5, r5, #16
 801dc16:	d409      	bmi.n	801dc2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dc18:	42bd      	cmp	r5, r7
 801dc1a:	da07      	bge.n	801dc2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dc1c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801dc1e:	fb05 2000 	mla	r0, r5, r0, r2
 801dc22:	1400      	asrs	r0, r0, #16
 801dc24:	d402      	bmi.n	801dc2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dc26:	42b0      	cmp	r0, r6
 801dc28:	f2c0 80bc 	blt.w	801dda4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801dc2c:	2600      	movs	r6, #0
 801dc2e:	1998      	adds	r0, r3, r6
 801dc30:	2800      	cmp	r0, #0
 801dc32:	dc3e      	bgt.n	801dcb2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801dc34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc38:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dc3c:	f1bb 0f00 	cmp.w	fp, #0
 801dc40:	f340 811b 	ble.w	801de7a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801dc44:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dc48:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dc4c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dc50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dc54:	eeb0 6a62 	vmov.f32	s12, s5
 801dc58:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dc5c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dc60:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dc64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc6c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801dc70:	eeb0 6a43 	vmov.f32	s12, s6
 801dc74:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc78:	ee12 2a90 	vmov	r2, s5
 801dc7c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc86:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc8a:	ee13 2a10 	vmov	r2, s6
 801dc8e:	9311      	str	r3, [sp, #68]	@ 0x44
 801dc90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc92:	f1bb 0b01 	subs.w	fp, fp, #1
 801dc96:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc9a:	9a03      	ldr	r2, [sp, #12]
 801dc9c:	9312      	str	r3, [sp, #72]	@ 0x48
 801dc9e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801dca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dca4:	eeb0 3a67 	vmov.f32	s6, s15
 801dca8:	bf08      	it	eq
 801dcaa:	4613      	moveq	r3, r2
 801dcac:	eef0 2a47 	vmov.f32	s5, s14
 801dcb0:	e789      	b.n	801dbc6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801dcb2:	140f      	asrs	r7, r1, #16
 801dcb4:	d426      	bmi.n	801dd04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dcb6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801dcba:	42bd      	cmp	r5, r7
 801dcbc:	dd22      	ble.n	801dd04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dcbe:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801dcc2:	d41f      	bmi.n	801dd04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dcc4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801dcc8:	4560      	cmp	r0, ip
 801dcca:	dd1b      	ble.n	801dd04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dccc:	9800      	ldr	r0, [sp, #0]
 801dcce:	b22d      	sxth	r5, r5
 801dcd0:	fb0c 0505 	mla	r5, ip, r5, r0
 801dcd4:	5de8      	ldrb	r0, [r5, r7]
 801dcd6:	9d01      	ldr	r5, [sp, #4]
 801dcd8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801dcdc:	0e07      	lsrs	r7, r0, #24
 801dcde:	2fff      	cmp	r7, #255	@ 0xff
 801dce0:	d116      	bne.n	801dd10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801dce2:	f06f 0501 	mvn.w	r5, #1
 801dce6:	fb05 f706 	mul.w	r7, r5, r6
 801dcea:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801dcee:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801dcf2:	0945      	lsrs	r5, r0, #5
 801dcf4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801dcf8:	ea4c 0505 	orr.w	r5, ip, r5
 801dcfc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801dd00:	4305      	orrs	r5, r0
 801dd02:	53e5      	strh	r5, [r4, r7]
 801dd04:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dd06:	3e01      	subs	r6, #1
 801dd08:	4401      	add	r1, r0
 801dd0a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dd0c:	4402      	add	r2, r0
 801dd0e:	e78e      	b.n	801dc2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801dd10:	b2fd      	uxtb	r5, r7
 801dd12:	2f00      	cmp	r7, #0
 801dd14:	d0f6      	beq.n	801dd04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dd16:	f06f 0701 	mvn.w	r7, #1
 801dd1a:	fa1f f985 	uxth.w	r9, r5
 801dd1e:	43ed      	mvns	r5, r5
 801dd20:	4377      	muls	r7, r6
 801dd22:	f834 8007 	ldrh.w	r8, [r4, r7]
 801dd26:	9702      	str	r7, [sp, #8]
 801dd28:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801dd2c:	fb17 f709 	smulbb	r7, r7, r9
 801dd30:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801dd34:	b2c0      	uxtb	r0, r0
 801dd36:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801dd3a:	fb10 f009 	smulbb	r0, r0, r9
 801dd3e:	b2ed      	uxtb	r5, r5
 801dd40:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801dd44:	fb0c 7c05 	mla	ip, ip, r5, r7
 801dd48:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801dd4c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801dd50:	fb1a fa09 	smulbb	sl, sl, r9
 801dd54:	fa5f f888 	uxtb.w	r8, r8
 801dd58:	fb08 0005 	mla	r0, r8, r5, r0
 801dd5c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801dd60:	fb07 a705 	mla	r7, r7, r5, sl
 801dd64:	b280      	uxth	r0, r0
 801dd66:	fa1f fc8c 	uxth.w	ip, ip
 801dd6a:	f100 0a01 	add.w	sl, r0, #1
 801dd6e:	f10c 0501 	add.w	r5, ip, #1
 801dd72:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801dd76:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801dd7a:	b2bf      	uxth	r7, r7
 801dd7c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dd80:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801dd84:	ea4a 0c0c 	orr.w	ip, sl, ip
 801dd88:	f107 0a01 	add.w	sl, r7, #1
 801dd8c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801dd90:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dd94:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801dd98:	9802      	ldr	r0, [sp, #8]
 801dd9a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801dd9e:	f824 c000 	strh.w	ip, [r4, r0]
 801dda2:	e7af      	b.n	801dd04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dda4:	f04f 0800 	mov.w	r8, #0
 801dda8:	eba3 0008 	sub.w	r0, r3, r8
 801ddac:	2800      	cmp	r0, #0
 801ddae:	f77f af41 	ble.w	801dc34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ddb2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ddb6:	9f00      	ldr	r7, [sp, #0]
 801ddb8:	1410      	asrs	r0, r2, #16
 801ddba:	fb06 7000 	mla	r0, r6, r0, r7
 801ddbe:	140d      	asrs	r5, r1, #16
 801ddc0:	5d40      	ldrb	r0, [r0, r5]
 801ddc2:	9d01      	ldr	r5, [sp, #4]
 801ddc4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ddc8:	0e2e      	lsrs	r6, r5, #24
 801ddca:	2eff      	cmp	r6, #255	@ 0xff
 801ddcc:	d112      	bne.n	801ddf4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801ddce:	482c      	ldr	r0, [pc, #176]	@ (801de80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ddd0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ddd4:	0968      	lsrs	r0, r5, #5
 801ddd6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ddda:	4330      	orrs	r0, r6
 801dddc:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801dde0:	4328      	orrs	r0, r5
 801dde2:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801dde6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dde8:	f108 0801 	add.w	r8, r8, #1
 801ddec:	4401      	add	r1, r0
 801ddee:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ddf0:	4402      	add	r2, r0
 801ddf2:	e7d9      	b.n	801dda8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ddf4:	b2f0      	uxtb	r0, r6
 801ddf6:	2e00      	cmp	r6, #0
 801ddf8:	d0f5      	beq.n	801dde6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ddfa:	fa1f f980 	uxth.w	r9, r0
 801ddfe:	43c0      	mvns	r0, r0
 801de00:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801de04:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801de08:	fb16 f609 	smulbb	r6, r6, r9
 801de0c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801de10:	b2ed      	uxtb	r5, r5
 801de12:	ea4f 272c 	mov.w	r7, ip, asr #8
 801de16:	fb15 f509 	smulbb	r5, r5, r9
 801de1a:	b2c0      	uxtb	r0, r0
 801de1c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801de20:	fb07 6700 	mla	r7, r7, r0, r6
 801de24:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801de28:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801de2c:	fb1a fa09 	smulbb	sl, sl, r9
 801de30:	fa5f fc8c 	uxtb.w	ip, ip
 801de34:	fb0c 5500 	mla	r5, ip, r0, r5
 801de38:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801de3c:	fb06 a600 	mla	r6, r6, r0, sl
 801de40:	b2bf      	uxth	r7, r7
 801de42:	b2ad      	uxth	r5, r5
 801de44:	1c78      	adds	r0, r7, #1
 801de46:	f105 0a01 	add.w	sl, r5, #1
 801de4a:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801de4e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801de52:	b2b6      	uxth	r6, r6
 801de54:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801de58:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801de5c:	ea4a 0707 	orr.w	r7, sl, r7
 801de60:	f106 0a01 	add.w	sl, r6, #1
 801de64:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801de68:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801de6c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801de70:	ea47 070a 	orr.w	r7, r7, sl
 801de74:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801de78:	e7b5      	b.n	801dde6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801de7a:	b005      	add	sp, #20
 801de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de80:	fffff800 	.word	0xfffff800

0801de84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de8c:	b087      	sub	sp, #28
 801de8e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801de90:	468b      	mov	fp, r1
 801de92:	9204      	str	r2, [sp, #16]
 801de94:	6861      	ldr	r1, [r4, #4]
 801de96:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801de9a:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801de9e:	9205      	str	r2, [sp, #20]
 801dea0:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801dea4:	fb01 2000 	mla	r0, r1, r0, r2
 801dea8:	6822      	ldr	r2, [r4, #0]
 801deaa:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801deae:	f8de 2000 	ldr.w	r2, [lr]
 801deb2:	9201      	str	r2, [sp, #4]
 801deb4:	f8de 2004 	ldr.w	r2, [lr, #4]
 801deb8:	9202      	str	r2, [sp, #8]
 801deba:	f1bb 0f00 	cmp.w	fp, #0
 801debe:	dc03      	bgt.n	801dec8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801dec0:	9a04      	ldr	r2, [sp, #16]
 801dec2:	2a00      	cmp	r2, #0
 801dec4:	f340 8142 	ble.w	801e14c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801dec8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801deca:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801dece:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ded2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ded4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ded8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801dedc:	2b00      	cmp	r3, #0
 801dede:	dd0e      	ble.n	801defe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801dee0:	140c      	asrs	r4, r1, #16
 801dee2:	d405      	bmi.n	801def0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dee4:	42bc      	cmp	r4, r7
 801dee6:	da03      	bge.n	801def0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dee8:	1414      	asrs	r4, r2, #16
 801deea:	d401      	bmi.n	801def0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801deec:	42b4      	cmp	r4, r6
 801deee:	db07      	blt.n	801df00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801def0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801def2:	3b01      	subs	r3, #1
 801def4:	4421      	add	r1, r4
 801def6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801def8:	3002      	adds	r0, #2
 801defa:	4422      	add	r2, r4
 801defc:	e7ee      	b.n	801dedc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801defe:	d019      	beq.n	801df34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801df00:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801df02:	1e5c      	subs	r4, r3, #1
 801df04:	fb05 1504 	mla	r5, r5, r4, r1
 801df08:	142d      	asrs	r5, r5, #16
 801df0a:	d409      	bmi.n	801df20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801df0c:	42bd      	cmp	r5, r7
 801df0e:	da07      	bge.n	801df20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801df10:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801df12:	fb05 2404 	mla	r4, r5, r4, r2
 801df16:	1424      	asrs	r4, r4, #16
 801df18:	d402      	bmi.n	801df20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801df1a:	42b4      	cmp	r4, r6
 801df1c:	f2c0 80b1 	blt.w	801e082 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801df20:	f04f 0800 	mov.w	r8, #0
 801df24:	eb03 0408 	add.w	r4, r3, r8
 801df28:	2c00      	cmp	r4, #0
 801df2a:	dc3e      	bgt.n	801dfaa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801df2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801df30:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801df34:	f1bb 0f00 	cmp.w	fp, #0
 801df38:	f340 8108 	ble.w	801e14c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801df3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801df40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df44:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801df48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801df4c:	eeb0 6a62 	vmov.f32	s12, s5
 801df50:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df54:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df58:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df64:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801df68:	eeb0 6a43 	vmov.f32	s12, s6
 801df6c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df70:	ee12 2a90 	vmov	r2, s5
 801df74:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801df82:	ee13 2a10 	vmov	r2, s6
 801df86:	9313      	str	r3, [sp, #76]	@ 0x4c
 801df88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df8a:	f1bb 0b01 	subs.w	fp, fp, #1
 801df8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801df92:	9a04      	ldr	r2, [sp, #16]
 801df94:	9314      	str	r3, [sp, #80]	@ 0x50
 801df96:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801df9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df9c:	eeb0 3a67 	vmov.f32	s6, s15
 801dfa0:	bf08      	it	eq
 801dfa2:	4613      	moveq	r3, r2
 801dfa4:	eef0 2a47 	vmov.f32	s5, s14
 801dfa8:	e787      	b.n	801deba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801dfaa:	140e      	asrs	r6, r1, #16
 801dfac:	d462      	bmi.n	801e074 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dfae:	f8de 5008 	ldr.w	r5, [lr, #8]
 801dfb2:	42b5      	cmp	r5, r6
 801dfb4:	dd5e      	ble.n	801e074 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dfb6:	1417      	asrs	r7, r2, #16
 801dfb8:	d45c      	bmi.n	801e074 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dfba:	f8de 400c 	ldr.w	r4, [lr, #12]
 801dfbe:	42bc      	cmp	r4, r7
 801dfc0:	dd58      	ble.n	801e074 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dfc2:	b22d      	sxth	r5, r5
 801dfc4:	fb07 6505 	mla	r5, r7, r5, r6
 801dfc8:	9c02      	ldr	r4, [sp, #8]
 801dfca:	5d66      	ldrb	r6, [r4, r5]
 801dfcc:	2e00      	cmp	r6, #0
 801dfce:	d051      	beq.n	801e074 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dfd0:	9c01      	ldr	r4, [sp, #4]
 801dfd2:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801dfd6:	f06f 0401 	mvn.w	r4, #1
 801dfda:	fb04 f408 	mul.w	r4, r4, r8
 801dfde:	5b05      	ldrh	r5, [r0, r4]
 801dfe0:	9403      	str	r4, [sp, #12]
 801dfe2:	9c05      	ldr	r4, [sp, #20]
 801dfe4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801dfe8:	4366      	muls	r6, r4
 801dfea:	1c74      	adds	r4, r6, #1
 801dfec:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801dff0:	1224      	asrs	r4, r4, #8
 801dff2:	b2a7      	uxth	r7, r4
 801dff4:	43e4      	mvns	r4, r4
 801dff6:	122e      	asrs	r6, r5, #8
 801dff8:	b2e4      	uxtb	r4, r4
 801dffa:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801dffe:	fb16 f604 	smulbb	r6, r6, r4
 801e002:	00ed      	lsls	r5, r5, #3
 801e004:	b2ed      	uxtb	r5, r5
 801e006:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801e00a:	fb15 f504 	smulbb	r5, r5, r4
 801e00e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e012:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e016:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e01a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801e01e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e022:	fb1a fa04 	smulbb	sl, sl, r4
 801e026:	fa5f f989 	uxtb.w	r9, r9
 801e02a:	fb09 5507 	mla	r5, r9, r7, r5
 801e02e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e032:	fb06 a607 	mla	r6, r6, r7, sl
 801e036:	fa1f fc8c 	uxth.w	ip, ip
 801e03a:	b2ad      	uxth	r5, r5
 801e03c:	f10c 0401 	add.w	r4, ip, #1
 801e040:	f105 0a01 	add.w	sl, r5, #1
 801e044:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e048:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e04c:	b2b6      	uxth	r6, r6
 801e04e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e052:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e056:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e05a:	f106 0a01 	add.w	sl, r6, #1
 801e05e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e062:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e066:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e06a:	9c03      	ldr	r4, [sp, #12]
 801e06c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e070:	f820 c004 	strh.w	ip, [r0, r4]
 801e074:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e076:	f108 38ff 	add.w	r8, r8, #4294967295
 801e07a:	4421      	add	r1, r4
 801e07c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e07e:	4422      	add	r2, r4
 801e080:	e750      	b.n	801df24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e082:	f04f 0900 	mov.w	r9, #0
 801e086:	eba3 0409 	sub.w	r4, r3, r9
 801e08a:	2c00      	cmp	r4, #0
 801e08c:	f77f af4e 	ble.w	801df2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e090:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801e094:	140d      	asrs	r5, r1, #16
 801e096:	1414      	asrs	r4, r2, #16
 801e098:	fb06 5404 	mla	r4, r6, r4, r5
 801e09c:	9d02      	ldr	r5, [sp, #8]
 801e09e:	5d2e      	ldrb	r6, [r5, r4]
 801e0a0:	2e00      	cmp	r6, #0
 801e0a2:	d04c      	beq.n	801e13e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e0a4:	9d01      	ldr	r5, [sp, #4]
 801e0a6:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801e0aa:	9c05      	ldr	r4, [sp, #20]
 801e0ac:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e0b0:	4366      	muls	r6, r4
 801e0b2:	1c74      	adds	r4, r6, #1
 801e0b4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801e0b8:	1224      	asrs	r4, r4, #8
 801e0ba:	b2a7      	uxth	r7, r4
 801e0bc:	43e4      	mvns	r4, r4
 801e0be:	122e      	asrs	r6, r5, #8
 801e0c0:	b2e4      	uxtb	r4, r4
 801e0c2:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e0c6:	fb16 f604 	smulbb	r6, r6, r4
 801e0ca:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e0ce:	00ed      	lsls	r5, r5, #3
 801e0d0:	b2ed      	uxtb	r5, r5
 801e0d2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801e0d6:	fb15 f504 	smulbb	r5, r5, r4
 801e0da:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e0de:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e0e2:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e0e6:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e0ea:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e0ee:	fb1a fa04 	smulbb	sl, sl, r4
 801e0f2:	fa5f f888 	uxtb.w	r8, r8
 801e0f6:	fb08 5507 	mla	r5, r8, r7, r5
 801e0fa:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e0fe:	fb06 a607 	mla	r6, r6, r7, sl
 801e102:	fa1f fc8c 	uxth.w	ip, ip
 801e106:	b2ad      	uxth	r5, r5
 801e108:	f10c 0401 	add.w	r4, ip, #1
 801e10c:	f105 0a01 	add.w	sl, r5, #1
 801e110:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e114:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e118:	b2b6      	uxth	r6, r6
 801e11a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e11e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e122:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e126:	f106 0a01 	add.w	sl, r6, #1
 801e12a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e12e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e132:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e136:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e13a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e13e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e140:	f109 0901 	add.w	r9, r9, #1
 801e144:	4421      	add	r1, r4
 801e146:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e148:	4422      	add	r2, r4
 801e14a:	e79c      	b.n	801e086 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801e14c:	b007      	add	sp, #28
 801e14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e152 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e15a:	b085      	sub	sp, #20
 801e15c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e15e:	468b      	mov	fp, r1
 801e160:	6861      	ldr	r1, [r4, #4]
 801e162:	9203      	str	r2, [sp, #12]
 801e164:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801e168:	fb01 2000 	mla	r0, r1, r0, r2
 801e16c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801e170:	6822      	ldr	r2, [r4, #0]
 801e172:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e176:	f8d8 2000 	ldr.w	r2, [r8]
 801e17a:	9200      	str	r2, [sp, #0]
 801e17c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e180:	9201      	str	r2, [sp, #4]
 801e182:	f1bb 0f00 	cmp.w	fp, #0
 801e186:	dc03      	bgt.n	801e190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e188:	9a03      	ldr	r2, [sp, #12]
 801e18a:	2a00      	cmp	r2, #0
 801e18c:	f340 8146 	ble.w	801e41c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e190:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e192:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e196:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e19a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e19c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e1a0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	dd0e      	ble.n	801e1c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e1a8:	140c      	asrs	r4, r1, #16
 801e1aa:	d405      	bmi.n	801e1b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e1ac:	42bc      	cmp	r4, r7
 801e1ae:	da03      	bge.n	801e1b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e1b0:	1414      	asrs	r4, r2, #16
 801e1b2:	d401      	bmi.n	801e1b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e1b4:	42b4      	cmp	r4, r6
 801e1b6:	db07      	blt.n	801e1c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e1b8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e1ba:	3b01      	subs	r3, #1
 801e1bc:	4421      	add	r1, r4
 801e1be:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e1c0:	3002      	adds	r0, #2
 801e1c2:	4422      	add	r2, r4
 801e1c4:	e7ee      	b.n	801e1a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e1c6:	d017      	beq.n	801e1f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e1c8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e1ca:	1e5c      	subs	r4, r3, #1
 801e1cc:	fb05 1504 	mla	r5, r5, r4, r1
 801e1d0:	142d      	asrs	r5, r5, #16
 801e1d2:	d409      	bmi.n	801e1e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e1d4:	42bd      	cmp	r5, r7
 801e1d6:	da07      	bge.n	801e1e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e1d8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e1da:	fb05 2404 	mla	r4, r5, r4, r2
 801e1de:	1424      	asrs	r4, r4, #16
 801e1e0:	d402      	bmi.n	801e1e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e1e2:	42b4      	cmp	r4, r6
 801e1e4:	f2c0 80b3 	blt.w	801e34e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e1e8:	2600      	movs	r6, #0
 801e1ea:	199c      	adds	r4, r3, r6
 801e1ec:	2c00      	cmp	r4, #0
 801e1ee:	dc3e      	bgt.n	801e26e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e1f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e1f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e1f8:	f1bb 0f00 	cmp.w	fp, #0
 801e1fc:	f340 810e 	ble.w	801e41c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e200:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e204:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e208:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e20c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e210:	eeb0 6a62 	vmov.f32	s12, s5
 801e214:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e218:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e21c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e220:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e224:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e228:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e22c:	eeb0 6a43 	vmov.f32	s12, s6
 801e230:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e234:	ee12 2a90 	vmov	r2, s5
 801e238:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e23c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e23e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e242:	fb92 f3f3 	sdiv	r3, r2, r3
 801e246:	ee13 2a10 	vmov	r2, s6
 801e24a:	9311      	str	r3, [sp, #68]	@ 0x44
 801e24c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e24e:	f1bb 0b01 	subs.w	fp, fp, #1
 801e252:	fb92 f3f3 	sdiv	r3, r2, r3
 801e256:	9a03      	ldr	r2, [sp, #12]
 801e258:	9312      	str	r3, [sp, #72]	@ 0x48
 801e25a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e25e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e260:	eeb0 3a67 	vmov.f32	s6, s15
 801e264:	bf08      	it	eq
 801e266:	4613      	moveq	r3, r2
 801e268:	eef0 2a47 	vmov.f32	s5, s14
 801e26c:	e789      	b.n	801e182 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e26e:	140f      	asrs	r7, r1, #16
 801e270:	d418      	bmi.n	801e2a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e272:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e276:	42bd      	cmp	r5, r7
 801e278:	dd14      	ble.n	801e2a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e27a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e27e:	d411      	bmi.n	801e2a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e280:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801e284:	4564      	cmp	r4, ip
 801e286:	dd0d      	ble.n	801e2a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e288:	b22d      	sxth	r5, r5
 801e28a:	fb0c 7505 	mla	r5, ip, r5, r7
 801e28e:	9c01      	ldr	r4, [sp, #4]
 801e290:	5d64      	ldrb	r4, [r4, r5]
 801e292:	2cff      	cmp	r4, #255	@ 0xff
 801e294:	d10c      	bne.n	801e2b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e296:	9c00      	ldr	r4, [sp, #0]
 801e298:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801e29c:	f06f 0401 	mvn.w	r4, #1
 801e2a0:	4374      	muls	r4, r6
 801e2a2:	5305      	strh	r5, [r0, r4]
 801e2a4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e2a6:	3e01      	subs	r6, #1
 801e2a8:	4421      	add	r1, r4
 801e2aa:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e2ac:	4422      	add	r2, r4
 801e2ae:	e79c      	b.n	801e1ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e2b0:	2c00      	cmp	r4, #0
 801e2b2:	d0f7      	beq.n	801e2a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e2b4:	9f00      	ldr	r7, [sp, #0]
 801e2b6:	fa1f fc84 	uxth.w	ip, r4
 801e2ba:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801e2be:	f06f 0501 	mvn.w	r5, #1
 801e2c2:	43e4      	mvns	r4, r4
 801e2c4:	4375      	muls	r5, r6
 801e2c6:	9502      	str	r5, [sp, #8]
 801e2c8:	5b45      	ldrh	r5, [r0, r5]
 801e2ca:	b2e4      	uxtb	r4, r4
 801e2cc:	122f      	asrs	r7, r5, #8
 801e2ce:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e2d2:	fb17 f704 	smulbb	r7, r7, r4
 801e2d6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e2da:	00ed      	lsls	r5, r5, #3
 801e2dc:	b2ed      	uxtb	r5, r5
 801e2de:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801e2e2:	fb15 f504 	smulbb	r5, r5, r4
 801e2e6:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801e2ea:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801e2ee:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e2f2:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801e2f6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e2fa:	fb1a fa04 	smulbb	sl, sl, r4
 801e2fe:	fa5f f989 	uxtb.w	r9, r9
 801e302:	fb09 550c 	mla	r5, r9, ip, r5
 801e306:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e30a:	fb07 a70c 	mla	r7, r7, ip, sl
 801e30e:	fa1f fe8e 	uxth.w	lr, lr
 801e312:	b2ad      	uxth	r5, r5
 801e314:	f10e 0401 	add.w	r4, lr, #1
 801e318:	f105 0a01 	add.w	sl, r5, #1
 801e31c:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801e320:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e324:	b2bf      	uxth	r7, r7
 801e326:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e32a:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801e32e:	ea4a 0e0e 	orr.w	lr, sl, lr
 801e332:	f107 0a01 	add.w	sl, r7, #1
 801e336:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e33a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e33e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e342:	9c02      	ldr	r4, [sp, #8]
 801e344:	ea4e 0e0a 	orr.w	lr, lr, sl
 801e348:	f820 e004 	strh.w	lr, [r0, r4]
 801e34c:	e7aa      	b.n	801e2a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e34e:	f04f 0900 	mov.w	r9, #0
 801e352:	eba3 0409 	sub.w	r4, r3, r9
 801e356:	2c00      	cmp	r4, #0
 801e358:	f77f af4a 	ble.w	801e1f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e35c:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801e360:	1414      	asrs	r4, r2, #16
 801e362:	140d      	asrs	r5, r1, #16
 801e364:	fb06 5504 	mla	r5, r6, r4, r5
 801e368:	9c01      	ldr	r4, [sp, #4]
 801e36a:	5d64      	ldrb	r4, [r4, r5]
 801e36c:	2cff      	cmp	r4, #255	@ 0xff
 801e36e:	d10b      	bne.n	801e388 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e370:	9c00      	ldr	r4, [sp, #0]
 801e372:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801e376:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801e37a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e37c:	f109 0901 	add.w	r9, r9, #1
 801e380:	4421      	add	r1, r4
 801e382:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e384:	4422      	add	r2, r4
 801e386:	e7e4      	b.n	801e352 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e388:	2c00      	cmp	r4, #0
 801e38a:	d0f6      	beq.n	801e37a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e38c:	b2a7      	uxth	r7, r4
 801e38e:	43e4      	mvns	r4, r4
 801e390:	9e00      	ldr	r6, [sp, #0]
 801e392:	b2e4      	uxtb	r4, r4
 801e394:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801e398:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e39c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e3a0:	122e      	asrs	r6, r5, #8
 801e3a2:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e3a6:	fb16 f604 	smulbb	r6, r6, r4
 801e3aa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e3ae:	00ed      	lsls	r5, r5, #3
 801e3b0:	b2ed      	uxtb	r5, r5
 801e3b2:	fb15 f504 	smulbb	r5, r5, r4
 801e3b6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e3ba:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e3be:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e3c2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e3c6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e3ca:	fb1a fa04 	smulbb	sl, sl, r4
 801e3ce:	fa5f fe8e 	uxtb.w	lr, lr
 801e3d2:	fb0e 5507 	mla	r5, lr, r7, r5
 801e3d6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e3da:	fb06 a607 	mla	r6, r6, r7, sl
 801e3de:	fa1f fc8c 	uxth.w	ip, ip
 801e3e2:	b2ad      	uxth	r5, r5
 801e3e4:	f10c 0401 	add.w	r4, ip, #1
 801e3e8:	f105 0a01 	add.w	sl, r5, #1
 801e3ec:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e3f0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e3f4:	b2b6      	uxth	r6, r6
 801e3f6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e3fa:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e3fe:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e402:	f106 0a01 	add.w	sl, r6, #1
 801e406:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e40a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e40e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e412:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e416:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e41a:	e7ae      	b.n	801e37a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e41c:	b005      	add	sp, #20
 801e41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e422 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e426:	b085      	sub	sp, #20
 801e428:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e42a:	9100      	str	r1, [sp, #0]
 801e42c:	9203      	str	r2, [sp, #12]
 801e42e:	6841      	ldr	r1, [r0, #4]
 801e430:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801e434:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801e438:	9201      	str	r2, [sp, #4]
 801e43a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e43e:	fb01 2404 	mla	r4, r1, r4, r2
 801e442:	6802      	ldr	r2, [r0, #0]
 801e444:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e448:	f8de 2000 	ldr.w	r2, [lr]
 801e44c:	9202      	str	r2, [sp, #8]
 801e44e:	9a01      	ldr	r2, [sp, #4]
 801e450:	43d6      	mvns	r6, r2
 801e452:	b2f6      	uxtb	r6, r6
 801e454:	9a00      	ldr	r2, [sp, #0]
 801e456:	2a00      	cmp	r2, #0
 801e458:	dc03      	bgt.n	801e462 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e45a:	9a03      	ldr	r2, [sp, #12]
 801e45c:	2a00      	cmp	r2, #0
 801e45e:	f340 8124 	ble.w	801e6aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e464:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e468:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e46c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e46e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e472:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e476:	2b00      	cmp	r3, #0
 801e478:	dd0e      	ble.n	801e498 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e47a:	1408      	asrs	r0, r1, #16
 801e47c:	d405      	bmi.n	801e48a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e47e:	4560      	cmp	r0, ip
 801e480:	da03      	bge.n	801e48a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e482:	1410      	asrs	r0, r2, #16
 801e484:	d401      	bmi.n	801e48a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e486:	42b8      	cmp	r0, r7
 801e488:	db07      	blt.n	801e49a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e48a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e48c:	3b01      	subs	r3, #1
 801e48e:	4401      	add	r1, r0
 801e490:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e492:	3402      	adds	r4, #2
 801e494:	4402      	add	r2, r0
 801e496:	e7ee      	b.n	801e476 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e498:	d06e      	beq.n	801e578 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e49a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e49c:	1e58      	subs	r0, r3, #1
 801e49e:	fb05 1500 	mla	r5, r5, r0, r1
 801e4a2:	142d      	asrs	r5, r5, #16
 801e4a4:	d45c      	bmi.n	801e560 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e4a6:	4565      	cmp	r5, ip
 801e4a8:	da5a      	bge.n	801e560 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e4aa:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e4ac:	fb05 2000 	mla	r0, r5, r0, r2
 801e4b0:	1400      	asrs	r0, r0, #16
 801e4b2:	d455      	bmi.n	801e560 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e4b4:	42b8      	cmp	r0, r7
 801e4b6:	da53      	bge.n	801e560 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e4b8:	4699      	mov	r9, r3
 801e4ba:	46a2      	mov	sl, r4
 801e4bc:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801e4c0:	f1b9 0f00 	cmp.w	r9, #0
 801e4c4:	dd54      	ble.n	801e570 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e4c6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e4ca:	140d      	asrs	r5, r1, #16
 801e4cc:	1410      	asrs	r0, r2, #16
 801e4ce:	fb07 5000 	mla	r0, r7, r0, r5
 801e4d2:	9d02      	ldr	r5, [sp, #8]
 801e4d4:	f109 39ff 	add.w	r9, r9, #4294967295
 801e4d8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e4dc:	f8ba 5000 	ldrh.w	r5, [sl]
 801e4e0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e4e4:	122f      	asrs	r7, r5, #8
 801e4e6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e4ea:	fb17 f706 	smulbb	r7, r7, r6
 801e4ee:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e4f2:	00ed      	lsls	r5, r5, #3
 801e4f4:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801e4f8:	b2ed      	uxtb	r5, r5
 801e4fa:	fb18 f806 	smulbb	r8, r8, r6
 801e4fe:	fb15 f506 	smulbb	r5, r5, r6
 801e502:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e506:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e50a:	10c7      	asrs	r7, r0, #3
 801e50c:	00c0      	lsls	r0, r0, #3
 801e50e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e512:	b2c0      	uxtb	r0, r0
 801e514:	fb07 870b 	mla	r7, r7, fp, r8
 801e518:	fb00 500b 	mla	r0, r0, fp, r5
 801e51c:	fa1f fc8c 	uxth.w	ip, ip
 801e520:	b280      	uxth	r0, r0
 801e522:	b2bf      	uxth	r7, r7
 801e524:	f10c 0501 	add.w	r5, ip, #1
 801e528:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e52c:	f107 0801 	add.w	r8, r7, #1
 801e530:	1c45      	adds	r5, r0, #1
 801e532:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e536:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e53a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e53c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e540:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e544:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e548:	ea45 0c0c 	orr.w	ip, r5, ip
 801e54c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801e550:	4401      	add	r1, r0
 801e552:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e554:	ea4c 0c08 	orr.w	ip, ip, r8
 801e558:	f82a cb02 	strh.w	ip, [sl], #2
 801e55c:	4402      	add	r2, r0
 801e55e:	e7af      	b.n	801e4c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e560:	f04f 0800 	mov.w	r8, #0
 801e564:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801e568:	eb03 0008 	add.w	r0, r3, r8
 801e56c:	2800      	cmp	r0, #0
 801e56e:	dc41      	bgt.n	801e5f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e570:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e574:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e578:	9b00      	ldr	r3, [sp, #0]
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	f340 8095 	ble.w	801e6aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e580:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e584:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e588:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e58c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e590:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e594:	eef0 6a62 	vmov.f32	s13, s5
 801e598:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e59c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e5a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e5a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e5a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e5ac:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801e5b0:	eef0 6a43 	vmov.f32	s13, s6
 801e5b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e5b8:	ee12 2a90 	vmov	r2, s5
 801e5bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e5c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e5c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e5c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5ca:	ee13 2a10 	vmov	r2, s6
 801e5ce:	9311      	str	r3, [sp, #68]	@ 0x44
 801e5d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e5d2:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801e5d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5da:	9312      	str	r3, [sp, #72]	@ 0x48
 801e5dc:	9b00      	ldr	r3, [sp, #0]
 801e5de:	9a03      	ldr	r2, [sp, #12]
 801e5e0:	3b01      	subs	r3, #1
 801e5e2:	9300      	str	r3, [sp, #0]
 801e5e4:	eeb0 3a67 	vmov.f32	s6, s15
 801e5e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e5ea:	eef0 2a47 	vmov.f32	s5, s14
 801e5ee:	bf08      	it	eq
 801e5f0:	4613      	moveq	r3, r2
 801e5f2:	e72f      	b.n	801e454 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e5f4:	140f      	asrs	r7, r1, #16
 801e5f6:	d451      	bmi.n	801e69c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e5f8:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e5fc:	42bd      	cmp	r5, r7
 801e5fe:	dd4d      	ble.n	801e69c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e600:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e604:	d44a      	bmi.n	801e69c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e606:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e60a:	4560      	cmp	r0, ip
 801e60c:	dd46      	ble.n	801e69c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e60e:	b22d      	sxth	r5, r5
 801e610:	fb0c 7505 	mla	r5, ip, r5, r7
 801e614:	9802      	ldr	r0, [sp, #8]
 801e616:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801e61a:	f06f 0501 	mvn.w	r5, #1
 801e61e:	fb05 fb08 	mul.w	fp, r5, r8
 801e622:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e626:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e62a:	122f      	asrs	r7, r5, #8
 801e62c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e630:	fb17 f706 	smulbb	r7, r7, r6
 801e634:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e638:	00ed      	lsls	r5, r5, #3
 801e63a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801e63e:	b2ed      	uxtb	r5, r5
 801e640:	fb19 f906 	smulbb	r9, r9, r6
 801e644:	fb15 f506 	smulbb	r5, r5, r6
 801e648:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e64c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e650:	10c7      	asrs	r7, r0, #3
 801e652:	00c0      	lsls	r0, r0, #3
 801e654:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e658:	b2c0      	uxtb	r0, r0
 801e65a:	fb07 970a 	mla	r7, r7, sl, r9
 801e65e:	fb00 500a 	mla	r0, r0, sl, r5
 801e662:	fa1f fc8c 	uxth.w	ip, ip
 801e666:	b2bf      	uxth	r7, r7
 801e668:	b280      	uxth	r0, r0
 801e66a:	f10c 0501 	add.w	r5, ip, #1
 801e66e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e672:	f107 0901 	add.w	r9, r7, #1
 801e676:	1c45      	adds	r5, r0, #1
 801e678:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e67c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e680:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e684:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e688:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e68c:	ea45 0c0c 	orr.w	ip, r5, ip
 801e690:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801e694:	ea4c 0c09 	orr.w	ip, ip, r9
 801e698:	f824 c00b 	strh.w	ip, [r4, fp]
 801e69c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e69e:	f108 38ff 	add.w	r8, r8, #4294967295
 801e6a2:	4401      	add	r1, r0
 801e6a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e6a6:	4402      	add	r2, r0
 801e6a8:	e75e      	b.n	801e568 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e6aa:	b005      	add	sp, #20
 801e6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e6b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e6b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6b8:	b085      	sub	sp, #20
 801e6ba:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e6bc:	4693      	mov	fp, r2
 801e6be:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e6c2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801e6c6:	6870      	ldr	r0, [r6, #4]
 801e6c8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801e6ca:	fb00 2404 	mla	r4, r0, r4, r2
 801e6ce:	6832      	ldr	r2, [r6, #0]
 801e6d0:	9101      	str	r1, [sp, #4]
 801e6d2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e6d6:	682a      	ldr	r2, [r5, #0]
 801e6d8:	9202      	str	r2, [sp, #8]
 801e6da:	9a01      	ldr	r2, [sp, #4]
 801e6dc:	2a00      	cmp	r2, #0
 801e6de:	dc03      	bgt.n	801e6e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e6e0:	f1bb 0f00 	cmp.w	fp, #0
 801e6e4:	f340 809a 	ble.w	801e81c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e6e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e6ea:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e6ee:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e6f2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e6f4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e6f8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	dd0c      	ble.n	801e71a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e700:	1406      	asrs	r6, r0, #16
 801e702:	d405      	bmi.n	801e710 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e704:	454e      	cmp	r6, r9
 801e706:	da03      	bge.n	801e710 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e708:	1416      	asrs	r6, r2, #16
 801e70a:	d401      	bmi.n	801e710 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e70c:	4546      	cmp	r6, r8
 801e70e:	db05      	blt.n	801e71c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e710:	4470      	add	r0, lr
 801e712:	4462      	add	r2, ip
 801e714:	3b01      	subs	r3, #1
 801e716:	3402      	adds	r4, #2
 801e718:	e7f0      	b.n	801e6fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e71a:	d00f      	beq.n	801e73c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e71c:	1e5e      	subs	r6, r3, #1
 801e71e:	fb0e 0706 	mla	r7, lr, r6, r0
 801e722:	143f      	asrs	r7, r7, #16
 801e724:	d541      	bpl.n	801e7aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e726:	4698      	mov	r8, r3
 801e728:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e72c:	9603      	str	r6, [sp, #12]
 801e72e:	f1b8 0f00 	cmp.w	r8, #0
 801e732:	dc56      	bgt.n	801e7e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801e734:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e738:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e73c:	9b01      	ldr	r3, [sp, #4]
 801e73e:	2b00      	cmp	r3, #0
 801e740:	dd6c      	ble.n	801e81c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e742:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e746:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e74a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e74e:	eeb0 6a62 	vmov.f32	s12, s5
 801e752:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e756:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e75a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e75e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e762:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e766:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e76a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e76e:	eeb0 6a43 	vmov.f32	s12, s6
 801e772:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e776:	ee12 2a90 	vmov	r2, s5
 801e77a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e77e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e780:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e784:	fb92 fef3 	sdiv	lr, r2, r3
 801e788:	ee13 2a10 	vmov	r2, s6
 801e78c:	fb92 fcf3 	sdiv	ip, r2, r3
 801e790:	9b01      	ldr	r3, [sp, #4]
 801e792:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e796:	3b01      	subs	r3, #1
 801e798:	9301      	str	r3, [sp, #4]
 801e79a:	eeb0 3a67 	vmov.f32	s6, s15
 801e79e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e7a0:	eef0 2a47 	vmov.f32	s5, s14
 801e7a4:	bf08      	it	eq
 801e7a6:	465b      	moveq	r3, fp
 801e7a8:	e797      	b.n	801e6da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e7aa:	454f      	cmp	r7, r9
 801e7ac:	dabb      	bge.n	801e726 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e7ae:	fb0c 2606 	mla	r6, ip, r6, r2
 801e7b2:	1436      	asrs	r6, r6, #16
 801e7b4:	d4b7      	bmi.n	801e726 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e7b6:	4546      	cmp	r6, r8
 801e7b8:	dab5      	bge.n	801e726 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e7ba:	461e      	mov	r6, r3
 801e7bc:	46a0      	mov	r8, r4
 801e7be:	2e00      	cmp	r6, #0
 801e7c0:	ddb8      	ble.n	801e734 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e7c2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e7c6:	1417      	asrs	r7, r2, #16
 801e7c8:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e7cc:	fb0a 9707 	mla	r7, sl, r7, r9
 801e7d0:	9902      	ldr	r1, [sp, #8]
 801e7d2:	4470      	add	r0, lr
 801e7d4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e7d8:	4462      	add	r2, ip
 801e7da:	f828 7b02 	strh.w	r7, [r8], #2
 801e7de:	3e01      	subs	r6, #1
 801e7e0:	e7ed      	b.n	801e7be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801e7e2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e7e6:	d414      	bmi.n	801e812 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e7e8:	68ae      	ldr	r6, [r5, #8]
 801e7ea:	454e      	cmp	r6, r9
 801e7ec:	dd11      	ble.n	801e812 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e7ee:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e7f2:	d40e      	bmi.n	801e812 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e7f4:	68ef      	ldr	r7, [r5, #12]
 801e7f6:	4557      	cmp	r7, sl
 801e7f8:	dd0b      	ble.n	801e812 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e7fa:	f06f 0101 	mvn.w	r1, #1
 801e7fe:	b236      	sxth	r6, r6
 801e800:	fb0a 9606 	mla	r6, sl, r6, r9
 801e804:	9f02      	ldr	r7, [sp, #8]
 801e806:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e80a:	fb01 f608 	mul.w	r6, r1, r8
 801e80e:	9903      	ldr	r1, [sp, #12]
 801e810:	538f      	strh	r7, [r1, r6]
 801e812:	4470      	add	r0, lr
 801e814:	4462      	add	r2, ip
 801e816:	f108 38ff 	add.w	r8, r8, #4294967295
 801e81a:	e788      	b.n	801e72e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e81c:	b005      	add	sp, #20
 801e81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e822 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e826:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e82a:	b087      	sub	sp, #28
 801e82c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e82e:	468b      	mov	fp, r1
 801e830:	9203      	str	r2, [sp, #12]
 801e832:	6841      	ldr	r1, [r0, #4]
 801e834:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e838:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801e83c:	9204      	str	r2, [sp, #16]
 801e83e:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801e842:	fb01 2505 	mla	r5, r1, r5, r2
 801e846:	6802      	ldr	r2, [r0, #0]
 801e848:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801e84c:	f8d9 2000 	ldr.w	r2, [r9]
 801e850:	9201      	str	r2, [sp, #4]
 801e852:	f1bb 0f00 	cmp.w	fp, #0
 801e856:	dc03      	bgt.n	801e860 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e858:	9a03      	ldr	r2, [sp, #12]
 801e85a:	2a00      	cmp	r2, #0
 801e85c:	f340 8159 	ble.w	801eb12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e860:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e862:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801e866:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e86a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e86c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801e870:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e874:	2b00      	cmp	r3, #0
 801e876:	dd0e      	ble.n	801e896 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e878:	1402      	asrs	r2, r0, #16
 801e87a:	d405      	bmi.n	801e888 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e87c:	42ba      	cmp	r2, r7
 801e87e:	da03      	bge.n	801e888 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e880:	140a      	asrs	r2, r1, #16
 801e882:	d401      	bmi.n	801e888 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e884:	42b2      	cmp	r2, r6
 801e886:	db07      	blt.n	801e898 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e888:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e88a:	3b01      	subs	r3, #1
 801e88c:	4410      	add	r0, r2
 801e88e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e890:	3502      	adds	r5, #2
 801e892:	4411      	add	r1, r2
 801e894:	e7ee      	b.n	801e874 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e896:	d017      	beq.n	801e8c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e898:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e89a:	1e5a      	subs	r2, r3, #1
 801e89c:	fb04 0402 	mla	r4, r4, r2, r0
 801e8a0:	1424      	asrs	r4, r4, #16
 801e8a2:	d409      	bmi.n	801e8b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e8a4:	42bc      	cmp	r4, r7
 801e8a6:	da07      	bge.n	801e8b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e8a8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e8aa:	fb04 1202 	mla	r2, r4, r2, r1
 801e8ae:	1412      	asrs	r2, r2, #16
 801e8b0:	d402      	bmi.n	801e8b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e8b2:	42b2      	cmp	r2, r6
 801e8b4:	f2c0 80bf 	blt.w	801ea36 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e8b8:	2700      	movs	r7, #0
 801e8ba:	19da      	adds	r2, r3, r7
 801e8bc:	2a00      	cmp	r2, #0
 801e8be:	dc3e      	bgt.n	801e93e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e8c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8c4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801e8c8:	f1bb 0f00 	cmp.w	fp, #0
 801e8cc:	f340 8121 	ble.w	801eb12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e8d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e8dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e8e0:	eeb0 6a62 	vmov.f32	s12, s5
 801e8e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e8ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e8f8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801e8fc:	eeb0 6a43 	vmov.f32	s12, s6
 801e900:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e904:	ee12 2a90 	vmov	r2, s5
 801e908:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e90c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e90e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e912:	fb92 f3f3 	sdiv	r3, r2, r3
 801e916:	ee13 2a10 	vmov	r2, s6
 801e91a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e91c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e91e:	f1bb 0b01 	subs.w	fp, fp, #1
 801e922:	fb92 f3f3 	sdiv	r3, r2, r3
 801e926:	9a03      	ldr	r2, [sp, #12]
 801e928:	9314      	str	r3, [sp, #80]	@ 0x50
 801e92a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801e92e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e930:	eeb0 3a67 	vmov.f32	s6, s15
 801e934:	bf08      	it	eq
 801e936:	4613      	moveq	r3, r2
 801e938:	eef0 2a47 	vmov.f32	s5, s14
 801e93c:	e789      	b.n	801e852 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e93e:	1406      	asrs	r6, r0, #16
 801e940:	d42d      	bmi.n	801e99e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e942:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801e946:	42b4      	cmp	r4, r6
 801e948:	dd29      	ble.n	801e99e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e94a:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801e94e:	d426      	bmi.n	801e99e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e950:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e954:	4562      	cmp	r2, ip
 801e956:	dd22      	ble.n	801e99e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e958:	b224      	sxth	r4, r4
 801e95a:	fb0c 6404 	mla	r4, ip, r4, r6
 801e95e:	9a01      	ldr	r2, [sp, #4]
 801e960:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801e964:	0e22      	lsrs	r2, r4, #24
 801e966:	d01a      	beq.n	801e99e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e968:	9e04      	ldr	r6, [sp, #16]
 801e96a:	4372      	muls	r2, r6
 801e96c:	1c56      	adds	r6, r2, #1
 801e96e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e972:	1212      	asrs	r2, r2, #8
 801e974:	0a26      	lsrs	r6, r4, #8
 801e976:	2aff      	cmp	r2, #255	@ 0xff
 801e978:	9605      	str	r6, [sp, #20]
 801e97a:	d116      	bne.n	801e9aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801e97c:	f06f 0201 	mvn.w	r2, #1
 801e980:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801e984:	fb02 fc07 	mul.w	ip, r2, r7
 801e988:	0962      	lsrs	r2, r4, #5
 801e98a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e98e:	f026 0607 	bic.w	r6, r6, #7
 801e992:	4316      	orrs	r6, r2
 801e994:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801e998:	4326      	orrs	r6, r4
 801e99a:	f825 600c 	strh.w	r6, [r5, ip]
 801e99e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e9a0:	3f01      	subs	r7, #1
 801e9a2:	4410      	add	r0, r2
 801e9a4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e9a6:	4411      	add	r1, r2
 801e9a8:	e787      	b.n	801e8ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e9aa:	f06f 0601 	mvn.w	r6, #1
 801e9ae:	fa1f fa82 	uxth.w	sl, r2
 801e9b2:	43d2      	mvns	r2, r2
 801e9b4:	437e      	muls	r6, r7
 801e9b6:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801e9ba:	f835 8006 	ldrh.w	r8, [r5, r6]
 801e9be:	fb1c fc0a 	smulbb	ip, ip, sl
 801e9c2:	b2e4      	uxtb	r4, r4
 801e9c4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801e9c8:	fb14 f40a 	smulbb	r4, r4, sl
 801e9cc:	b2d2      	uxtb	r2, r2
 801e9ce:	9602      	str	r6, [sp, #8]
 801e9d0:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801e9d4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801e9d8:	fb0e ce02 	mla	lr, lr, r2, ip
 801e9dc:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801e9e0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e9e4:	fb16 f60a 	smulbb	r6, r6, sl
 801e9e8:	fa5f f888 	uxtb.w	r8, r8
 801e9ec:	fb08 4402 	mla	r4, r8, r2, r4
 801e9f0:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801e9f4:	fb0c 6c02 	mla	ip, ip, r2, r6
 801e9f8:	fa1f fe8e 	uxth.w	lr, lr
 801e9fc:	b2a4      	uxth	r4, r4
 801e9fe:	f10e 0201 	add.w	r2, lr, #1
 801ea02:	1c66      	adds	r6, r4, #1
 801ea04:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ea08:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ea0c:	fa1f fc8c 	uxth.w	ip, ip
 801ea10:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ea14:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801ea18:	ea46 0e0e 	orr.w	lr, r6, lr
 801ea1c:	f10c 0601 	add.w	r6, ip, #1
 801ea20:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801ea24:	0976      	lsrs	r6, r6, #5
 801ea26:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801ea2a:	9a02      	ldr	r2, [sp, #8]
 801ea2c:	ea4e 0e06 	orr.w	lr, lr, r6
 801ea30:	f825 e002 	strh.w	lr, [r5, r2]
 801ea34:	e7b3      	b.n	801e99e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ea36:	f04f 0800 	mov.w	r8, #0
 801ea3a:	eba3 0208 	sub.w	r2, r3, r8
 801ea3e:	2a00      	cmp	r2, #0
 801ea40:	f77f af3e 	ble.w	801e8c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea44:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801ea48:	1404      	asrs	r4, r0, #16
 801ea4a:	140a      	asrs	r2, r1, #16
 801ea4c:	fb06 4202 	mla	r2, r6, r2, r4
 801ea50:	9c01      	ldr	r4, [sp, #4]
 801ea52:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801ea56:	0e22      	lsrs	r2, r4, #24
 801ea58:	d016      	beq.n	801ea88 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801ea5a:	9e04      	ldr	r6, [sp, #16]
 801ea5c:	4372      	muls	r2, r6
 801ea5e:	1c56      	adds	r6, r2, #1
 801ea60:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ea64:	1212      	asrs	r2, r2, #8
 801ea66:	2aff      	cmp	r2, #255	@ 0xff
 801ea68:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801ea6c:	d113      	bne.n	801ea96 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801ea6e:	0962      	lsrs	r2, r4, #5
 801ea70:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801ea74:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ea78:	f026 0607 	bic.w	r6, r6, #7
 801ea7c:	4316      	orrs	r6, r2
 801ea7e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ea82:	4326      	orrs	r6, r4
 801ea84:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801ea88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ea8a:	f108 0801 	add.w	r8, r8, #1
 801ea8e:	4410      	add	r0, r2
 801ea90:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ea92:	4411      	add	r1, r2
 801ea94:	e7d1      	b.n	801ea3a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801ea96:	fa1f fa82 	uxth.w	sl, r2
 801ea9a:	43d2      	mvns	r2, r2
 801ea9c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801eaa0:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801eaa4:	fb17 f70a 	smulbb	r7, r7, sl
 801eaa8:	b2e4      	uxtb	r4, r4
 801eaaa:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801eaae:	fb14 f40a 	smulbb	r4, r4, sl
 801eab2:	b2d2      	uxtb	r2, r2
 801eab4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801eab8:	fb0c 7c02 	mla	ip, ip, r2, r7
 801eabc:	b2f6      	uxtb	r6, r6
 801eabe:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801eac2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eac6:	fb16 f60a 	smulbb	r6, r6, sl
 801eaca:	fa5f fe8e 	uxtb.w	lr, lr
 801eace:	fb0e 4402 	mla	r4, lr, r2, r4
 801ead2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ead6:	fb07 6702 	mla	r7, r7, r2, r6
 801eada:	fa1f fc8c 	uxth.w	ip, ip
 801eade:	b2a4      	uxth	r4, r4
 801eae0:	f10c 0201 	add.w	r2, ip, #1
 801eae4:	1c66      	adds	r6, r4, #1
 801eae6:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801eaea:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801eaee:	b2bf      	uxth	r7, r7
 801eaf0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801eaf4:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801eaf8:	ea46 0c0c 	orr.w	ip, r6, ip
 801eafc:	1c7e      	adds	r6, r7, #1
 801eafe:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801eb02:	0976      	lsrs	r6, r6, #5
 801eb04:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801eb08:	ea4c 0c06 	orr.w	ip, ip, r6
 801eb0c:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801eb10:	e7ba      	b.n	801ea88 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801eb12:	b007      	add	sp, #28
 801eb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb20:	b085      	sub	sp, #20
 801eb22:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801eb24:	468b      	mov	fp, r1
 801eb26:	6841      	ldr	r1, [r0, #4]
 801eb28:	9203      	str	r2, [sp, #12]
 801eb2a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801eb2e:	fb01 2404 	mla	r4, r1, r4, r2
 801eb32:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801eb36:	6802      	ldr	r2, [r0, #0]
 801eb38:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eb3c:	f8d8 2000 	ldr.w	r2, [r8]
 801eb40:	9201      	str	r2, [sp, #4]
 801eb42:	f1bb 0f00 	cmp.w	fp, #0
 801eb46:	dc03      	bgt.n	801eb50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801eb48:	9a03      	ldr	r2, [sp, #12]
 801eb4a:	2a00      	cmp	r2, #0
 801eb4c:	f340 814f 	ble.w	801edee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801eb50:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801eb52:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801eb56:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801eb5a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801eb5c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801eb60:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801eb64:	2b00      	cmp	r3, #0
 801eb66:	dd0e      	ble.n	801eb86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb68:	1408      	asrs	r0, r1, #16
 801eb6a:	d405      	bmi.n	801eb78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801eb6c:	42b8      	cmp	r0, r7
 801eb6e:	da03      	bge.n	801eb78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801eb70:	1410      	asrs	r0, r2, #16
 801eb72:	d401      	bmi.n	801eb78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801eb74:	42b0      	cmp	r0, r6
 801eb76:	db07      	blt.n	801eb88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801eb78:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801eb7a:	3b01      	subs	r3, #1
 801eb7c:	4401      	add	r1, r0
 801eb7e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801eb80:	3402      	adds	r4, #2
 801eb82:	4402      	add	r2, r0
 801eb84:	e7ee      	b.n	801eb64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801eb86:	d017      	beq.n	801ebb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801eb88:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801eb8a:	1e58      	subs	r0, r3, #1
 801eb8c:	fb05 1500 	mla	r5, r5, r0, r1
 801eb90:	142d      	asrs	r5, r5, #16
 801eb92:	d409      	bmi.n	801eba8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eb94:	42bd      	cmp	r5, r7
 801eb96:	da07      	bge.n	801eba8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eb98:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801eb9a:	fb05 2000 	mla	r0, r5, r0, r2
 801eb9e:	1400      	asrs	r0, r0, #16
 801eba0:	d402      	bmi.n	801eba8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eba2:	42b0      	cmp	r0, r6
 801eba4:	f2c0 80ba 	blt.w	801ed1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801eba8:	2600      	movs	r6, #0
 801ebaa:	1998      	adds	r0, r3, r6
 801ebac:	2800      	cmp	r0, #0
 801ebae:	dc3e      	bgt.n	801ec2e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ebb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ebb4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ebb8:	f1bb 0f00 	cmp.w	fp, #0
 801ebbc:	f340 8117 	ble.w	801edee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ebc0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ebc4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ebc8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ebcc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ebd0:	eeb0 6a62 	vmov.f32	s12, s5
 801ebd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ebd8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ebdc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ebe0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebe4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ebe8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ebec:	eeb0 6a43 	vmov.f32	s12, s6
 801ebf0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ebf4:	ee12 2a90 	vmov	r2, s5
 801ebf8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ebfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ebfe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ec02:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec06:	ee13 2a10 	vmov	r2, s6
 801ec0a:	9311      	str	r3, [sp, #68]	@ 0x44
 801ec0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ec0e:	f1bb 0b01 	subs.w	fp, fp, #1
 801ec12:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec16:	9a03      	ldr	r2, [sp, #12]
 801ec18:	9312      	str	r3, [sp, #72]	@ 0x48
 801ec1a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ec1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ec20:	eeb0 3a67 	vmov.f32	s6, s15
 801ec24:	bf08      	it	eq
 801ec26:	4613      	moveq	r3, r2
 801ec28:	eef0 2a47 	vmov.f32	s5, s14
 801ec2c:	e789      	b.n	801eb42 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ec2e:	140f      	asrs	r7, r1, #16
 801ec30:	d424      	bmi.n	801ec7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ec32:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ec36:	42bd      	cmp	r5, r7
 801ec38:	dd20      	ble.n	801ec7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ec3a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ec3e:	d41d      	bmi.n	801ec7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ec40:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801ec44:	4560      	cmp	r0, ip
 801ec46:	dd19      	ble.n	801ec7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ec48:	b22d      	sxth	r5, r5
 801ec4a:	fb0c 7505 	mla	r5, ip, r5, r7
 801ec4e:	9801      	ldr	r0, [sp, #4]
 801ec50:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ec54:	0e07      	lsrs	r7, r0, #24
 801ec56:	2fff      	cmp	r7, #255	@ 0xff
 801ec58:	d116      	bne.n	801ec88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ec5a:	f06f 0501 	mvn.w	r5, #1
 801ec5e:	fb05 f706 	mul.w	r7, r5, r6
 801ec62:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801ec66:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ec6a:	0945      	lsrs	r5, r0, #5
 801ec6c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ec70:	ea4c 0505 	orr.w	r5, ip, r5
 801ec74:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ec78:	4305      	orrs	r5, r0
 801ec7a:	53e5      	strh	r5, [r4, r7]
 801ec7c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ec7e:	3e01      	subs	r6, #1
 801ec80:	4401      	add	r1, r0
 801ec82:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ec84:	4402      	add	r2, r0
 801ec86:	e790      	b.n	801ebaa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ec88:	b2fd      	uxtb	r5, r7
 801ec8a:	2f00      	cmp	r7, #0
 801ec8c:	d0f6      	beq.n	801ec7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ec8e:	f06f 0701 	mvn.w	r7, #1
 801ec92:	fa1f f985 	uxth.w	r9, r5
 801ec96:	43ed      	mvns	r5, r5
 801ec98:	4377      	muls	r7, r6
 801ec9a:	f834 e007 	ldrh.w	lr, [r4, r7]
 801ec9e:	9702      	str	r7, [sp, #8]
 801eca0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801eca4:	fb17 f709 	smulbb	r7, r7, r9
 801eca8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ecac:	b2c0      	uxtb	r0, r0
 801ecae:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ecb2:	fb10 f009 	smulbb	r0, r0, r9
 801ecb6:	b2ed      	uxtb	r5, r5
 801ecb8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ecbc:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ecc0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801ecc4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ecc8:	fb1a fa09 	smulbb	sl, sl, r9
 801eccc:	fa5f fe8e 	uxtb.w	lr, lr
 801ecd0:	fb0e 0005 	mla	r0, lr, r5, r0
 801ecd4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ecd8:	fb07 a705 	mla	r7, r7, r5, sl
 801ecdc:	b280      	uxth	r0, r0
 801ecde:	fa1f fc8c 	uxth.w	ip, ip
 801ece2:	f100 0a01 	add.w	sl, r0, #1
 801ece6:	f10c 0501 	add.w	r5, ip, #1
 801ecea:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ecee:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ecf2:	b2bf      	uxth	r7, r7
 801ecf4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ecf8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801ecfc:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ed00:	f107 0a01 	add.w	sl, r7, #1
 801ed04:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ed08:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ed0c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ed10:	9802      	ldr	r0, [sp, #8]
 801ed12:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ed16:	f824 c000 	strh.w	ip, [r4, r0]
 801ed1a:	e7af      	b.n	801ec7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed1c:	f04f 0e00 	mov.w	lr, #0
 801ed20:	eba3 000e 	sub.w	r0, r3, lr
 801ed24:	2800      	cmp	r0, #0
 801ed26:	f77f af43 	ble.w	801ebb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ed2a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ed2e:	140d      	asrs	r5, r1, #16
 801ed30:	1410      	asrs	r0, r2, #16
 801ed32:	fb06 5000 	mla	r0, r6, r0, r5
 801ed36:	9d01      	ldr	r5, [sp, #4]
 801ed38:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ed3c:	0e2e      	lsrs	r6, r5, #24
 801ed3e:	2eff      	cmp	r6, #255	@ 0xff
 801ed40:	d112      	bne.n	801ed68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ed42:	482c      	ldr	r0, [pc, #176]	@ (801edf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801ed44:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ed48:	0968      	lsrs	r0, r5, #5
 801ed4a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ed4e:	4330      	orrs	r0, r6
 801ed50:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ed54:	4328      	orrs	r0, r5
 801ed56:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801ed5a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ed5c:	f10e 0e01 	add.w	lr, lr, #1
 801ed60:	4401      	add	r1, r0
 801ed62:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ed64:	4402      	add	r2, r0
 801ed66:	e7db      	b.n	801ed20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ed68:	b2f0      	uxtb	r0, r6
 801ed6a:	2e00      	cmp	r6, #0
 801ed6c:	d0f5      	beq.n	801ed5a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ed6e:	fa1f f980 	uxth.w	r9, r0
 801ed72:	43c0      	mvns	r0, r0
 801ed74:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ed78:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ed7c:	fb16 f609 	smulbb	r6, r6, r9
 801ed80:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ed84:	b2ed      	uxtb	r5, r5
 801ed86:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ed8a:	fb15 f509 	smulbb	r5, r5, r9
 801ed8e:	b2c0      	uxtb	r0, r0
 801ed90:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ed94:	fb07 6700 	mla	r7, r7, r0, r6
 801ed98:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ed9c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801eda0:	fb1a fa09 	smulbb	sl, sl, r9
 801eda4:	fa5f fc8c 	uxtb.w	ip, ip
 801eda8:	fb0c 5500 	mla	r5, ip, r0, r5
 801edac:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801edb0:	fb06 a600 	mla	r6, r6, r0, sl
 801edb4:	b2bf      	uxth	r7, r7
 801edb6:	b2ad      	uxth	r5, r5
 801edb8:	1c78      	adds	r0, r7, #1
 801edba:	f105 0a01 	add.w	sl, r5, #1
 801edbe:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801edc2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801edc6:	b2b6      	uxth	r6, r6
 801edc8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801edcc:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801edd0:	ea4a 0707 	orr.w	r7, sl, r7
 801edd4:	f106 0a01 	add.w	sl, r6, #1
 801edd8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eddc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ede0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ede4:	ea47 070a 	orr.w	r7, r7, sl
 801ede8:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801edec:	e7b5      	b.n	801ed5a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801edee:	b005      	add	sp, #20
 801edf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edf4:	fffff800 	.word	0xfffff800

0801edf8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801edf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801edfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee00:	b087      	sub	sp, #28
 801ee02:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ee04:	468b      	mov	fp, r1
 801ee06:	9203      	str	r2, [sp, #12]
 801ee08:	6841      	ldr	r1, [r0, #4]
 801ee0a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ee0e:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801ee12:	9204      	str	r2, [sp, #16]
 801ee14:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801ee18:	fb01 2404 	mla	r4, r1, r4, r2
 801ee1c:	6802      	ldr	r2, [r0, #0]
 801ee1e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ee22:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ee26:	3201      	adds	r2, #1
 801ee28:	f022 0201 	bic.w	r2, r2, #1
 801ee2c:	9200      	str	r2, [sp, #0]
 801ee2e:	f8d9 2000 	ldr.w	r2, [r9]
 801ee32:	9201      	str	r2, [sp, #4]
 801ee34:	f1bb 0f00 	cmp.w	fp, #0
 801ee38:	dc03      	bgt.n	801ee42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ee3a:	9a03      	ldr	r2, [sp, #12]
 801ee3c:	2a00      	cmp	r2, #0
 801ee3e:	f340 816a 	ble.w	801f116 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ee42:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ee44:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ee48:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ee4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ee4e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ee52:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ee56:	2b00      	cmp	r3, #0
 801ee58:	dd0e      	ble.n	801ee78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ee5a:	1402      	asrs	r2, r0, #16
 801ee5c:	d405      	bmi.n	801ee6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ee5e:	42ba      	cmp	r2, r7
 801ee60:	da03      	bge.n	801ee6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ee62:	140a      	asrs	r2, r1, #16
 801ee64:	d401      	bmi.n	801ee6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ee66:	42b2      	cmp	r2, r6
 801ee68:	db07      	blt.n	801ee7a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ee6a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ee6c:	3b01      	subs	r3, #1
 801ee6e:	4410      	add	r0, r2
 801ee70:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ee72:	3402      	adds	r4, #2
 801ee74:	4411      	add	r1, r2
 801ee76:	e7ee      	b.n	801ee56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ee78:	d017      	beq.n	801eeaa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ee7a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ee7c:	1e5a      	subs	r2, r3, #1
 801ee7e:	fb05 0502 	mla	r5, r5, r2, r0
 801ee82:	142d      	asrs	r5, r5, #16
 801ee84:	d409      	bmi.n	801ee9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ee86:	42bd      	cmp	r5, r7
 801ee88:	da07      	bge.n	801ee9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ee8a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ee8c:	fb05 1202 	mla	r2, r5, r2, r1
 801ee90:	1412      	asrs	r2, r2, #16
 801ee92:	d402      	bmi.n	801ee9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ee94:	42b2      	cmp	r2, r6
 801ee96:	f2c0 80c8 	blt.w	801f02a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801ee9a:	2700      	movs	r7, #0
 801ee9c:	19da      	adds	r2, r3, r7
 801ee9e:	2a00      	cmp	r2, #0
 801eea0:	dc3e      	bgt.n	801ef20 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801eea2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eea6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eeaa:	f1bb 0f00 	cmp.w	fp, #0
 801eeae:	f340 8132 	ble.w	801f116 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801eeb2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eeb6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eeba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eebe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eec2:	eeb0 6a62 	vmov.f32	s12, s5
 801eec6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eeca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eece:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eed2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eed6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eeda:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801eede:	eeb0 6a43 	vmov.f32	s12, s6
 801eee2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eee6:	ee12 2a90 	vmov	r2, s5
 801eeea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eeee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eef0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eef4:	fb92 f3f3 	sdiv	r3, r2, r3
 801eef8:	ee13 2a10 	vmov	r2, s6
 801eefc:	9313      	str	r3, [sp, #76]	@ 0x4c
 801eefe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ef00:	f1bb 0b01 	subs.w	fp, fp, #1
 801ef04:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef08:	9a03      	ldr	r2, [sp, #12]
 801ef0a:	9314      	str	r3, [sp, #80]	@ 0x50
 801ef0c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ef10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ef12:	eeb0 3a67 	vmov.f32	s6, s15
 801ef16:	bf08      	it	eq
 801ef18:	4613      	moveq	r3, r2
 801ef1a:	eef0 2a47 	vmov.f32	s5, s14
 801ef1e:	e789      	b.n	801ee34 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ef20:	1405      	asrs	r5, r0, #16
 801ef22:	d436      	bmi.n	801ef92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ef24:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ef28:	42aa      	cmp	r2, r5
 801ef2a:	dd32      	ble.n	801ef92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ef2c:	140e      	asrs	r6, r1, #16
 801ef2e:	d430      	bmi.n	801ef92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ef30:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ef34:	42b2      	cmp	r2, r6
 801ef36:	dd2c      	ble.n	801ef92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ef38:	9a00      	ldr	r2, [sp, #0]
 801ef3a:	fb06 5502 	mla	r5, r6, r2, r5
 801ef3e:	9e01      	ldr	r6, [sp, #4]
 801ef40:	086a      	lsrs	r2, r5, #1
 801ef42:	5cb2      	ldrb	r2, [r6, r2]
 801ef44:	07ee      	lsls	r6, r5, #31
 801ef46:	bf54      	ite	pl
 801ef48:	f002 020f 	andpl.w	r2, r2, #15
 801ef4c:	1112      	asrmi	r2, r2, #4
 801ef4e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ef52:	b2d2      	uxtb	r2, r2
 801ef54:	b1ea      	cbz	r2, 801ef92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ef56:	9d04      	ldr	r5, [sp, #16]
 801ef58:	436a      	muls	r2, r5
 801ef5a:	1c55      	adds	r5, r2, #1
 801ef5c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ef60:	4d6e      	ldr	r5, [pc, #440]	@ (801f11c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ef62:	1212      	asrs	r2, r2, #8
 801ef64:	682d      	ldr	r5, [r5, #0]
 801ef66:	2aff      	cmp	r2, #255	@ 0xff
 801ef68:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ef6c:	9605      	str	r6, [sp, #20]
 801ef6e:	d116      	bne.n	801ef9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ef70:	f06f 0201 	mvn.w	r2, #1
 801ef74:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801ef78:	fb02 fc07 	mul.w	ip, r2, r7
 801ef7c:	096a      	lsrs	r2, r5, #5
 801ef7e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ef82:	f026 0607 	bic.w	r6, r6, #7
 801ef86:	4316      	orrs	r6, r2
 801ef88:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ef8c:	432e      	orrs	r6, r5
 801ef8e:	f824 600c 	strh.w	r6, [r4, ip]
 801ef92:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ef94:	3f01      	subs	r7, #1
 801ef96:	4410      	add	r0, r2
 801ef98:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ef9a:	4411      	add	r1, r2
 801ef9c:	e77e      	b.n	801ee9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ef9e:	f06f 0601 	mvn.w	r6, #1
 801efa2:	fa1f fa82 	uxth.w	sl, r2
 801efa6:	43d2      	mvns	r2, r2
 801efa8:	437e      	muls	r6, r7
 801efaa:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801efae:	f834 8006 	ldrh.w	r8, [r4, r6]
 801efb2:	fb1c fc0a 	smulbb	ip, ip, sl
 801efb6:	b2ed      	uxtb	r5, r5
 801efb8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801efbc:	fb15 f50a 	smulbb	r5, r5, sl
 801efc0:	b2d2      	uxtb	r2, r2
 801efc2:	9602      	str	r6, [sp, #8]
 801efc4:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801efc8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801efcc:	fb0e ce02 	mla	lr, lr, r2, ip
 801efd0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801efd4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801efd8:	fb16 f60a 	smulbb	r6, r6, sl
 801efdc:	fa5f f888 	uxtb.w	r8, r8
 801efe0:	fb08 5502 	mla	r5, r8, r2, r5
 801efe4:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801efe8:	fb0c 6c02 	mla	ip, ip, r2, r6
 801efec:	fa1f fe8e 	uxth.w	lr, lr
 801eff0:	b2ad      	uxth	r5, r5
 801eff2:	f10e 0201 	add.w	r2, lr, #1
 801eff6:	1c6e      	adds	r6, r5, #1
 801eff8:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801effc:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801f000:	fa1f fc8c 	uxth.w	ip, ip
 801f004:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f008:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801f00c:	ea46 0e0e 	orr.w	lr, r6, lr
 801f010:	f10c 0601 	add.w	r6, ip, #1
 801f014:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801f018:	0976      	lsrs	r6, r6, #5
 801f01a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f01e:	9a02      	ldr	r2, [sp, #8]
 801f020:	ea4e 0e06 	orr.w	lr, lr, r6
 801f024:	f824 e002 	strh.w	lr, [r4, r2]
 801f028:	e7b3      	b.n	801ef92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f02a:	f04f 0800 	mov.w	r8, #0
 801f02e:	eba3 0208 	sub.w	r2, r3, r8
 801f032:	2a00      	cmp	r2, #0
 801f034:	f77f af35 	ble.w	801eea2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f038:	9e00      	ldr	r6, [sp, #0]
 801f03a:	1402      	asrs	r2, r0, #16
 801f03c:	140d      	asrs	r5, r1, #16
 801f03e:	fb06 2505 	mla	r5, r6, r5, r2
 801f042:	9e01      	ldr	r6, [sp, #4]
 801f044:	086a      	lsrs	r2, r5, #1
 801f046:	5cb2      	ldrb	r2, [r6, r2]
 801f048:	07ed      	lsls	r5, r5, #31
 801f04a:	bf54      	ite	pl
 801f04c:	f002 020f 	andpl.w	r2, r2, #15
 801f050:	1112      	asrmi	r2, r2, #4
 801f052:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f056:	b2d2      	uxtb	r2, r2
 801f058:	b1c2      	cbz	r2, 801f08c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f05a:	9d04      	ldr	r5, [sp, #16]
 801f05c:	436a      	muls	r2, r5
 801f05e:	1c55      	adds	r5, r2, #1
 801f060:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801f064:	4d2d      	ldr	r5, [pc, #180]	@ (801f11c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801f066:	1212      	asrs	r2, r2, #8
 801f068:	682e      	ldr	r6, [r5, #0]
 801f06a:	2aff      	cmp	r2, #255	@ 0xff
 801f06c:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801f070:	d113      	bne.n	801f09a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f072:	0972      	lsrs	r2, r6, #5
 801f074:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801f078:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f07c:	f025 0507 	bic.w	r5, r5, #7
 801f080:	4315      	orrs	r5, r2
 801f082:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801f086:	4335      	orrs	r5, r6
 801f088:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801f08c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f08e:	f108 0801 	add.w	r8, r8, #1
 801f092:	4410      	add	r0, r2
 801f094:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f096:	4411      	add	r1, r2
 801f098:	e7c9      	b.n	801f02e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f09a:	fa1f fa82 	uxth.w	sl, r2
 801f09e:	43d2      	mvns	r2, r2
 801f0a0:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801f0a4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801f0a8:	fb17 f70a 	smulbb	r7, r7, sl
 801f0ac:	b2f6      	uxtb	r6, r6
 801f0ae:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f0b2:	fb16 f60a 	smulbb	r6, r6, sl
 801f0b6:	b2d2      	uxtb	r2, r2
 801f0b8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f0bc:	fb0c 7c02 	mla	ip, ip, r2, r7
 801f0c0:	b2ed      	uxtb	r5, r5
 801f0c2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801f0c6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f0ca:	fb15 f50a 	smulbb	r5, r5, sl
 801f0ce:	fa5f fe8e 	uxtb.w	lr, lr
 801f0d2:	fb0e 6602 	mla	r6, lr, r2, r6
 801f0d6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f0da:	fb07 5702 	mla	r7, r7, r2, r5
 801f0de:	fa1f fc8c 	uxth.w	ip, ip
 801f0e2:	b2b6      	uxth	r6, r6
 801f0e4:	f10c 0201 	add.w	r2, ip, #1
 801f0e8:	1c75      	adds	r5, r6, #1
 801f0ea:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801f0ee:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801f0f2:	b2bf      	uxth	r7, r7
 801f0f4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f0f8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f0fc:	ea45 0c0c 	orr.w	ip, r5, ip
 801f100:	1c7d      	adds	r5, r7, #1
 801f102:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801f106:	096d      	lsrs	r5, r5, #5
 801f108:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f10c:	ea4c 0c05 	orr.w	ip, ip, r5
 801f110:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801f114:	e7ba      	b.n	801f08c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f116:	b007      	add	sp, #28
 801f118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f11c:	2005bab4 	.word	0x2005bab4

0801f120 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f120:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f128:	b087      	sub	sp, #28
 801f12a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f12c:	9101      	str	r1, [sp, #4]
 801f12e:	6841      	ldr	r1, [r0, #4]
 801f130:	9205      	str	r2, [sp, #20]
 801f132:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801f136:	fb01 2404 	mla	r4, r1, r4, r2
 801f13a:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801f13e:	6802      	ldr	r2, [r0, #0]
 801f140:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 801f434 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801f144:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f148:	f8db 2008 	ldr.w	r2, [fp, #8]
 801f14c:	3201      	adds	r2, #1
 801f14e:	f022 0201 	bic.w	r2, r2, #1
 801f152:	9202      	str	r2, [sp, #8]
 801f154:	f8db 2000 	ldr.w	r2, [fp]
 801f158:	9203      	str	r2, [sp, #12]
 801f15a:	9a01      	ldr	r2, [sp, #4]
 801f15c:	2a00      	cmp	r2, #0
 801f15e:	dc03      	bgt.n	801f168 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f160:	9a05      	ldr	r2, [sp, #20]
 801f162:	2a00      	cmp	r2, #0
 801f164:	f340 8162 	ble.w	801f42c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f168:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f16a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f16e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f172:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f174:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801f178:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	dd0e      	ble.n	801f19e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f180:	1402      	asrs	r2, r0, #16
 801f182:	d405      	bmi.n	801f190 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f184:	42ba      	cmp	r2, r7
 801f186:	da03      	bge.n	801f190 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f188:	140a      	asrs	r2, r1, #16
 801f18a:	d401      	bmi.n	801f190 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f18c:	42b2      	cmp	r2, r6
 801f18e:	db07      	blt.n	801f1a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f190:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f192:	3b01      	subs	r3, #1
 801f194:	4410      	add	r0, r2
 801f196:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f198:	3402      	adds	r4, #2
 801f19a:	4411      	add	r1, r2
 801f19c:	e7ee      	b.n	801f17c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f19e:	d017      	beq.n	801f1d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f1a0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f1a2:	1e5a      	subs	r2, r3, #1
 801f1a4:	fb05 0502 	mla	r5, r5, r2, r0
 801f1a8:	142d      	asrs	r5, r5, #16
 801f1aa:	d409      	bmi.n	801f1c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f1ac:	42bd      	cmp	r5, r7
 801f1ae:	da07      	bge.n	801f1c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f1b0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f1b2:	fb05 1202 	mla	r2, r5, r2, r1
 801f1b6:	1412      	asrs	r2, r2, #16
 801f1b8:	d402      	bmi.n	801f1c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f1ba:	42b2      	cmp	r2, r6
 801f1bc:	f2c0 80c3 	blt.w	801f346 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801f1c0:	2500      	movs	r5, #0
 801f1c2:	195a      	adds	r2, r3, r5
 801f1c4:	2a00      	cmp	r2, #0
 801f1c6:	dc3f      	bgt.n	801f248 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f1c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f1cc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f1d0:	9b01      	ldr	r3, [sp, #4]
 801f1d2:	2b00      	cmp	r3, #0
 801f1d4:	f340 812a 	ble.w	801f42c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f1d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f1dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f1e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f1e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f1e8:	eeb0 6a62 	vmov.f32	s12, s5
 801f1ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f1f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f1f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f1f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f1fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f200:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801f204:	eeb0 6a43 	vmov.f32	s12, s6
 801f208:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f20c:	ee12 2a90 	vmov	r2, s5
 801f210:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f214:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f216:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f21a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f21e:	ee13 2a10 	vmov	r2, s6
 801f222:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f224:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f226:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801f22a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f22e:	9314      	str	r3, [sp, #80]	@ 0x50
 801f230:	9b01      	ldr	r3, [sp, #4]
 801f232:	9a05      	ldr	r2, [sp, #20]
 801f234:	3b01      	subs	r3, #1
 801f236:	9301      	str	r3, [sp, #4]
 801f238:	eeb0 3a67 	vmov.f32	s6, s15
 801f23c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f23e:	eef0 2a47 	vmov.f32	s5, s14
 801f242:	bf08      	it	eq
 801f244:	4613      	moveq	r3, r2
 801f246:	e788      	b.n	801f15a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f248:	1406      	asrs	r6, r0, #16
 801f24a:	d42c      	bmi.n	801f2a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f24c:	f8db 2008 	ldr.w	r2, [fp, #8]
 801f250:	42b2      	cmp	r2, r6
 801f252:	dd28      	ble.n	801f2a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f254:	140f      	asrs	r7, r1, #16
 801f256:	d426      	bmi.n	801f2a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f258:	f8db 200c 	ldr.w	r2, [fp, #12]
 801f25c:	42ba      	cmp	r2, r7
 801f25e:	dd22      	ble.n	801f2a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f260:	9a02      	ldr	r2, [sp, #8]
 801f262:	fb07 6602 	mla	r6, r7, r2, r6
 801f266:	9f03      	ldr	r7, [sp, #12]
 801f268:	0872      	lsrs	r2, r6, #1
 801f26a:	5cba      	ldrb	r2, [r7, r2]
 801f26c:	07f6      	lsls	r6, r6, #31
 801f26e:	bf54      	ite	pl
 801f270:	f002 020f 	andpl.w	r2, r2, #15
 801f274:	1112      	asrmi	r2, r2, #4
 801f276:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f27a:	b2d2      	uxtb	r2, r2
 801f27c:	2aff      	cmp	r2, #255	@ 0xff
 801f27e:	d118      	bne.n	801f2b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801f280:	f06f 0601 	mvn.w	r6, #1
 801f284:	f8d8 2000 	ldr.w	r2, [r8]
 801f288:	fb06 f705 	mul.w	r7, r6, r5
 801f28c:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801f290:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801f294:	0956      	lsrs	r6, r2, #5
 801f296:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f29a:	ea4c 0606 	orr.w	r6, ip, r6
 801f29e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f2a2:	4316      	orrs	r6, r2
 801f2a4:	53e6      	strh	r6, [r4, r7]
 801f2a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f2a8:	3d01      	subs	r5, #1
 801f2aa:	4410      	add	r0, r2
 801f2ac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f2ae:	4411      	add	r1, r2
 801f2b0:	e787      	b.n	801f1c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f2b2:	2a00      	cmp	r2, #0
 801f2b4:	d0f7      	beq.n	801f2a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f2b6:	f06f 0601 	mvn.w	r6, #1
 801f2ba:	fa1f f982 	uxth.w	r9, r2
 801f2be:	43d2      	mvns	r2, r2
 801f2c0:	436e      	muls	r6, r5
 801f2c2:	f8d8 c000 	ldr.w	ip, [r8]
 801f2c6:	f834 e006 	ldrh.w	lr, [r4, r6]
 801f2ca:	9604      	str	r6, [sp, #16]
 801f2cc:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801f2d0:	fb16 f609 	smulbb	r6, r6, r9
 801f2d4:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801f2d8:	fa5f fc8c 	uxtb.w	ip, ip
 801f2dc:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f2e0:	fb1c fc09 	smulbb	ip, ip, r9
 801f2e4:	b2d2      	uxtb	r2, r2
 801f2e6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f2ea:	fb07 6702 	mla	r7, r7, r2, r6
 801f2ee:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f2f2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f2f6:	fb1a fa09 	smulbb	sl, sl, r9
 801f2fa:	fa5f fe8e 	uxtb.w	lr, lr
 801f2fe:	fb0e cc02 	mla	ip, lr, r2, ip
 801f302:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f306:	fb06 a602 	mla	r6, r6, r2, sl
 801f30a:	b2bf      	uxth	r7, r7
 801f30c:	fa1f fc8c 	uxth.w	ip, ip
 801f310:	1c7a      	adds	r2, r7, #1
 801f312:	f10c 0a01 	add.w	sl, ip, #1
 801f316:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f31a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f31e:	b2b6      	uxth	r6, r6
 801f320:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f324:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f328:	ea4a 0707 	orr.w	r7, sl, r7
 801f32c:	f106 0a01 	add.w	sl, r6, #1
 801f330:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f334:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f338:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f33c:	9a04      	ldr	r2, [sp, #16]
 801f33e:	ea47 070a 	orr.w	r7, r7, sl
 801f342:	52a7      	strh	r7, [r4, r2]
 801f344:	e7af      	b.n	801f2a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f346:	f04f 0e00 	mov.w	lr, #0
 801f34a:	eba3 020e 	sub.w	r2, r3, lr
 801f34e:	2a00      	cmp	r2, #0
 801f350:	f77f af3a 	ble.w	801f1c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f354:	9e02      	ldr	r6, [sp, #8]
 801f356:	1402      	asrs	r2, r0, #16
 801f358:	140d      	asrs	r5, r1, #16
 801f35a:	fb06 2505 	mla	r5, r6, r5, r2
 801f35e:	9e03      	ldr	r6, [sp, #12]
 801f360:	086a      	lsrs	r2, r5, #1
 801f362:	5cb2      	ldrb	r2, [r6, r2]
 801f364:	07ed      	lsls	r5, r5, #31
 801f366:	bf54      	ite	pl
 801f368:	f002 020f 	andpl.w	r2, r2, #15
 801f36c:	1112      	asrmi	r2, r2, #4
 801f36e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f372:	b2d2      	uxtb	r2, r2
 801f374:	2aff      	cmp	r2, #255	@ 0xff
 801f376:	d115      	bne.n	801f3a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f378:	f8d8 5000 	ldr.w	r5, [r8]
 801f37c:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 801f380:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801f384:	096a      	lsrs	r2, r5, #5
 801f386:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f38a:	4332      	orrs	r2, r6
 801f38c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f390:	432a      	orrs	r2, r5
 801f392:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801f396:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f398:	f10e 0e01 	add.w	lr, lr, #1
 801f39c:	4410      	add	r0, r2
 801f39e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f3a0:	4411      	add	r1, r2
 801f3a2:	e7d2      	b.n	801f34a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801f3a4:	2a00      	cmp	r2, #0
 801f3a6:	d0f6      	beq.n	801f396 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f3a8:	fa1f f982 	uxth.w	r9, r2
 801f3ac:	43d2      	mvns	r2, r2
 801f3ae:	f8d8 7000 	ldr.w	r7, [r8]
 801f3b2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f3b6:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801f3ba:	fb15 f509 	smulbb	r5, r5, r9
 801f3be:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801f3c2:	b2ff      	uxtb	r7, r7
 801f3c4:	ea4f 262c 	mov.w	r6, ip, asr #8
 801f3c8:	fb17 f709 	smulbb	r7, r7, r9
 801f3cc:	b2d2      	uxtb	r2, r2
 801f3ce:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f3d2:	fb06 5602 	mla	r6, r6, r2, r5
 801f3d6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f3da:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f3de:	fb1a fa09 	smulbb	sl, sl, r9
 801f3e2:	fa5f fc8c 	uxtb.w	ip, ip
 801f3e6:	fb0c 7702 	mla	r7, ip, r2, r7
 801f3ea:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f3ee:	fb05 a502 	mla	r5, r5, r2, sl
 801f3f2:	b2b6      	uxth	r6, r6
 801f3f4:	b2bf      	uxth	r7, r7
 801f3f6:	1c72      	adds	r2, r6, #1
 801f3f8:	f107 0a01 	add.w	sl, r7, #1
 801f3fc:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f400:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f404:	b2ad      	uxth	r5, r5
 801f406:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f40a:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801f40e:	ea4a 0606 	orr.w	r6, sl, r6
 801f412:	f105 0a01 	add.w	sl, r5, #1
 801f416:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f41a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f41e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f422:	ea46 060a 	orr.w	r6, r6, sl
 801f426:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801f42a:	e7b4      	b.n	801f396 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f42c:	b007      	add	sp, #28
 801f42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f432:	bf00      	nop
 801f434:	2005bab4 	.word	0x2005bab4

0801f438 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 801f438:	4770      	bx	lr

0801f43a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801f43a:	4770      	bx	lr

0801f43c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801f43c:	4770      	bx	lr

0801f43e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801f43e:	4770      	bx	lr

0801f440 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f440:	4770      	bx	lr

0801f442 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f442:	4770      	bx	lr

0801f444 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f444:	4770      	bx	lr

0801f446 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f446:	4770      	bx	lr

0801f448 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f448:	4770      	bx	lr

0801f44a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f44a:	4770      	bx	lr

0801f44c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f44c:	4770      	bx	lr

0801f44e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f44e:	4770      	bx	lr

0801f450 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f450:	4770      	bx	lr

0801f452 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f452:	4770      	bx	lr

0801f454 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f454:	4770      	bx	lr

0801f456 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f456:	4770      	bx	lr

0801f458 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f458:	4770      	bx	lr

0801f45a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f45a:	4770      	bx	lr

0801f45c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f45c:	4770      	bx	lr

0801f45e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f45e:	4770      	bx	lr

0801f460 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f460:	4770      	bx	lr

0801f462 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f462:	4770      	bx	lr

0801f464 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f464:	4770      	bx	lr

0801f466 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f466:	4770      	bx	lr

0801f468 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f468:	4770      	bx	lr

0801f46a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f46a:	4770      	bx	lr

0801f46c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f46c:	4770      	bx	lr

0801f46e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f46e:	4770      	bx	lr

0801f470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f470:	4770      	bx	lr

0801f472 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f472:	4770      	bx	lr

0801f474 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f474:	4770      	bx	lr

0801f476 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f476:	4770      	bx	lr

0801f478 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f47c:	b088      	sub	sp, #32
 801f47e:	ac08      	add	r4, sp, #32
 801f480:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801f484:	4606      	mov	r6, r0
 801f486:	4620      	mov	r0, r4
 801f488:	4688      	mov	r8, r1
 801f48a:	4691      	mov	r9, r2
 801f48c:	f7fd fc32 	bl	801ccf4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f490:	6833      	ldr	r3, [r6, #0]
 801f492:	4605      	mov	r5, r0
 801f494:	4620      	mov	r0, r4
 801f496:	699f      	ldr	r7, [r3, #24]
 801f498:	f7fd fb3a 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f49c:	4682      	mov	sl, r0
 801f49e:	4620      	mov	r0, r4
 801f4a0:	f7fd fb6a 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f4a4:	9500      	str	r5, [sp, #0]
 801f4a6:	e9cd a001 	strd	sl, r0, [sp, #4]
 801f4aa:	464b      	mov	r3, r9
 801f4ac:	a806      	add	r0, sp, #24
 801f4ae:	4642      	mov	r2, r8
 801f4b0:	4631      	mov	r1, r6
 801f4b2:	47b8      	blx	r7
 801f4b4:	4628      	mov	r0, r5
 801f4b6:	b008      	add	sp, #32
 801f4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801f4bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f4bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f4c0:	2300      	movs	r3, #0
 801f4c2:	9300      	str	r3, [sp, #0]
 801f4c4:	4b3d      	ldr	r3, [pc, #244]	@ (801f5bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801f4c6:	781b      	ldrb	r3, [r3, #0]
 801f4c8:	2b00      	cmp	r3, #0
 801f4ca:	d137      	bne.n	801f53c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801f4cc:	4a3c      	ldr	r2, [pc, #240]	@ (801f5c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f4ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f4d2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	d132      	bne.n	801f540 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801f4da:	4b3a      	ldr	r3, [pc, #232]	@ (801f5c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f4dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f4e0:	6808      	ldr	r0, [r1, #0]
 801f4e2:	6849      	ldr	r1, [r1, #4]
 801f4e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f4e8:	ac02      	add	r4, sp, #8
 801f4ea:	ab02      	add	r3, sp, #8
 801f4ec:	c303      	stmia	r3!, {r0, r1}
 801f4ee:	4669      	mov	r1, sp
 801f4f0:	4620      	mov	r0, r4
 801f4f2:	f7f9 ff6f 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f4f6:	4668      	mov	r0, sp
 801f4f8:	f7f9 ff44 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f4fc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f500:	f8bd 2000 	ldrh.w	r2, [sp]
 801f504:	4d30      	ldr	r5, [pc, #192]	@ (801f5c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801f506:	4413      	add	r3, r2
 801f508:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f50c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f510:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f514:	6828      	ldr	r0, [r5, #0]
 801f516:	4413      	add	r3, r2
 801f518:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f51c:	6803      	ldr	r3, [r0, #0]
 801f51e:	462f      	mov	r7, r5
 801f520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f522:	4798      	blx	r3
 801f524:	f010 0f01 	tst.w	r0, #1
 801f528:	d00c      	beq.n	801f544 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801f52a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f52e:	6828      	ldr	r0, [r5, #0]
 801f530:	6803      	ldr	r3, [r0, #0]
 801f532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f534:	4798      	blx	r3
 801f536:	b004      	add	sp, #16
 801f538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f53c:	4a21      	ldr	r2, [pc, #132]	@ (801f5c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f53e:	e7c6      	b.n	801f4ce <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f540:	4b1f      	ldr	r3, [pc, #124]	@ (801f5c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f542:	e7cb      	b.n	801f4dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f544:	6838      	ldr	r0, [r7, #0]
 801f546:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801f54a:	6803      	ldr	r3, [r0, #0]
 801f54c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801f550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f552:	4798      	blx	r3
 801f554:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f558:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f55c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801f560:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801f564:	fb16 3602 	smlabb	r6, r6, r2, r3
 801f568:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801f56c:	6838      	ldr	r0, [r7, #0]
 801f56e:	6803      	ldr	r3, [r0, #0]
 801f570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f572:	4798      	blx	r3
 801f574:	4a12      	ldr	r2, [pc, #72]	@ (801f5c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f576:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801f57a:	4691      	mov	r9, r2
 801f57c:	8813      	ldrh	r3, [r2, #0]
 801f57e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801f582:	435d      	muls	r5, r3
 801f584:	fb03 1404 	mla	r4, r3, r4, r1
 801f588:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f58c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f590:	6838      	ldr	r0, [r7, #0]
 801f592:	42ac      	cmp	r4, r5
 801f594:	6803      	ldr	r3, [r0, #0]
 801f596:	d20e      	bcs.n	801f5b6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801f598:	f8d3 a038 	ldr.w	sl, [r3, #56]	@ 0x38
 801f59c:	4632      	mov	r2, r6
 801f59e:	4643      	mov	r3, r8
 801f5a0:	4621      	mov	r1, r4
 801f5a2:	47d0      	blx	sl
 801f5a4:	f8b9 3000 	ldrh.w	r3, [r9]
 801f5a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f5ac:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f5b0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f5b4:	e7ec      	b.n	801f590 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801f5b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f5b8:	4798      	blx	r3
 801f5ba:	e7bc      	b.n	801f536 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801f5bc:	2005ba9c 	.word	0x2005ba9c
 801f5c0:	2005ba9e 	.word	0x2005ba9e
 801f5c4:	2005baa0 	.word	0x2005baa0
 801f5c8:	2005baa4 	.word	0x2005baa4

0801f5cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5d0:	b08b      	sub	sp, #44	@ 0x2c
 801f5d2:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801f5d6:	460f      	mov	r7, r1
 801f5d8:	4616      	mov	r6, r2
 801f5da:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801f5de:	f1bb 0f00 	cmp.w	fp, #0
 801f5e2:	d04a      	beq.n	801f67a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801f5e4:	6810      	ldr	r0, [r2, #0]
 801f5e6:	6851      	ldr	r1, [r2, #4]
 801f5e8:	ad06      	add	r5, sp, #24
 801f5ea:	c503      	stmia	r5!, {r0, r1}
 801f5ec:	6818      	ldr	r0, [r3, #0]
 801f5ee:	6859      	ldr	r1, [r3, #4]
 801f5f0:	ad08      	add	r5, sp, #32
 801f5f2:	c503      	stmia	r5!, {r0, r1}
 801f5f4:	a806      	add	r0, sp, #24
 801f5f6:	f7f9 fec5 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f5fa:	4631      	mov	r1, r6
 801f5fc:	a808      	add	r0, sp, #32
 801f5fe:	f7f9 fee9 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f602:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f606:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801f60a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f60e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801f612:	fb16 2103 	smlabb	r1, r6, r3, r2
 801f616:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801f61a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f61e:	4f60      	ldr	r7, [pc, #384]	@ (801f7a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f620:	440a      	add	r2, r1
 801f622:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f626:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f62a:	6838      	ldr	r0, [r7, #0]
 801f62c:	4413      	add	r3, r2
 801f62e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801f632:	6803      	ldr	r3, [r0, #0]
 801f634:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801f638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f63a:	4798      	blx	r3
 801f63c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f640:	46b9      	mov	r9, r7
 801f642:	d11d      	bne.n	801f680 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801f644:	b9fc      	cbnz	r4, 801f686 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f646:	f010 0f01 	tst.w	r0, #1
 801f64a:	d01c      	beq.n	801f686 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f64c:	2700      	movs	r7, #0
 801f64e:	f8d9 0000 	ldr.w	r0, [r9]
 801f652:	b2ad      	uxth	r5, r5
 801f654:	6801      	ldr	r1, [r0, #0]
 801f656:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801f65a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f65e:	f8cd b00c 	str.w	fp, [sp, #12]
 801f662:	9402      	str	r4, [sp, #8]
 801f664:	fa1f f488 	uxth.w	r4, r8
 801f668:	9501      	str	r5, [sp, #4]
 801f66a:	9400      	str	r4, [sp, #0]
 801f66c:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 801f66e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801f672:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f676:	4631      	mov	r1, r6
 801f678:	47a0      	blx	r4
 801f67a:	b00b      	add	sp, #44	@ 0x2c
 801f67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f680:	f010 0f04 	tst.w	r0, #4
 801f684:	e7e1      	b.n	801f64a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801f686:	f8d9 0000 	ldr.w	r0, [r9]
 801f68a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801f68e:	6803      	ldr	r3, [r0, #0]
 801f690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f692:	4798      	blx	r3
 801f694:	4b43      	ldr	r3, [pc, #268]	@ (801f7a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801f696:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801f69a:	881a      	ldrh	r2, [r3, #0]
 801f69c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f6a0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801f6a4:	fb02 1404 	mla	r4, r2, r4, r1
 801f6a8:	469a      	mov	sl, r3
 801f6aa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f6ae:	fb05 f502 	mul.w	r5, r5, r2
 801f6b2:	d059      	beq.n	801f768 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801f6b4:	469e      	mov	lr, r3
 801f6b6:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801f6ba:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f6be:	fa1f f28b 	uxth.w	r2, fp
 801f6c2:	fa1f f989 	uxth.w	r9, r9
 801f6c6:	42ac      	cmp	r4, r5
 801f6c8:	d264      	bcs.n	801f794 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f6ca:	eb04 0a07 	add.w	sl, r4, r7
 801f6ce:	4554      	cmp	r4, sl
 801f6d0:	d23d      	bcs.n	801f74e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801f6d2:	8821      	ldrh	r1, [r4, #0]
 801f6d4:	f836 3b02 	ldrh.w	r3, [r6], #2
 801f6d8:	1208      	asrs	r0, r1, #8
 801f6da:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801f6de:	fb10 f009 	smulbb	r0, r0, r9
 801f6e2:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801f6e6:	00c9      	lsls	r1, r1, #3
 801f6e8:	b2c9      	uxtb	r1, r1
 801f6ea:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f6ee:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801f6f2:	fb11 f109 	smulbb	r1, r1, r9
 801f6f6:	fb1b fb09 	smulbb	fp, fp, r9
 801f6fa:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f6fe:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f702:	10d8      	asrs	r0, r3, #3
 801f704:	00db      	lsls	r3, r3, #3
 801f706:	b2db      	uxtb	r3, r3
 801f708:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801f70c:	fb03 1302 	mla	r3, r3, r2, r1
 801f710:	fb00 b002 	mla	r0, r0, r2, fp
 801f714:	fa1f fc8c 	uxth.w	ip, ip
 801f718:	f10c 0b01 	add.w	fp, ip, #1
 801f71c:	b29b      	uxth	r3, r3
 801f71e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f722:	b280      	uxth	r0, r0
 801f724:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801f728:	f103 0c01 	add.w	ip, r3, #1
 801f72c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f730:	1c43      	adds	r3, r0, #1
 801f732:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f736:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f73a:	0940      	lsrs	r0, r0, #5
 801f73c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f740:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f744:	ea4c 0c00 	orr.w	ip, ip, r0
 801f748:	f824 cb02 	strh.w	ip, [r4], #2
 801f74c:	e7bf      	b.n	801f6ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801f74e:	f8be 3000 	ldrh.w	r3, [lr]
 801f752:	eba3 0308 	sub.w	r3, r3, r8
 801f756:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f75a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f75e:	eba3 0308 	sub.w	r3, r3, r8
 801f762:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f766:	e7ae      	b.n	801f6c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801f768:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f76c:	f8d9 0000 	ldr.w	r0, [r9]
 801f770:	42ac      	cmp	r4, r5
 801f772:	6803      	ldr	r3, [r0, #0]
 801f774:	d20e      	bcs.n	801f794 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f776:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 801f77a:	4632      	mov	r2, r6
 801f77c:	463b      	mov	r3, r7
 801f77e:	4621      	mov	r1, r4
 801f780:	47c0      	blx	r8
 801f782:	f8ba 3000 	ldrh.w	r3, [sl]
 801f786:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f78a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f78e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f792:	e7eb      	b.n	801f76c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801f794:	4b02      	ldr	r3, [pc, #8]	@ (801f7a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f796:	6818      	ldr	r0, [r3, #0]
 801f798:	6803      	ldr	r3, [r0, #0]
 801f79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f79c:	4798      	blx	r3
 801f79e:	e76c      	b.n	801f67a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801f7a0:	2005baa4 	.word	0x2005baa4
 801f7a4:	2005ba9e 	.word	0x2005ba9e

0801f7a8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801f7a8:	b510      	push	{r4, lr}
 801f7aa:	4604      	mov	r4, r0
 801f7ac:	2104      	movs	r1, #4
 801f7ae:	f00c fa00 	bl	802bbb2 <_ZdlPvj>
 801f7b2:	4620      	mov	r0, r4
 801f7b4:	bd10      	pop	{r4, pc}

0801f7b6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801f7b6:	b510      	push	{r4, lr}
 801f7b8:	4604      	mov	r4, r0
 801f7ba:	2104      	movs	r1, #4
 801f7bc:	f00c f9f9 	bl	802bbb2 <_ZdlPvj>
 801f7c0:	4620      	mov	r0, r4
 801f7c2:	bd10      	pop	{r4, pc}

0801f7c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801f7c4:	b510      	push	{r4, lr}
 801f7c6:	4604      	mov	r4, r0
 801f7c8:	f640 0144 	movw	r1, #2116	@ 0x844
 801f7cc:	f00c f9f1 	bl	802bbb2 <_ZdlPvj>
 801f7d0:	4620      	mov	r0, r4
 801f7d2:	bd10      	pop	{r4, pc}

0801f7d4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 801f7d4:	b510      	push	{r4, lr}
 801f7d6:	4604      	mov	r4, r0
 801f7d8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801f7dc:	f00c f9e9 	bl	802bbb2 <_ZdlPvj>
 801f7e0:	4620      	mov	r0, r4
 801f7e2:	bd10      	pop	{r4, pc}

0801f7e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f7e4:	b510      	push	{r4, lr}
 801f7e6:	4604      	mov	r4, r0
 801f7e8:	2104      	movs	r1, #4
 801f7ea:	f00c f9e2 	bl	802bbb2 <_ZdlPvj>
 801f7ee:	4620      	mov	r0, r4
 801f7f0:	bd10      	pop	{r4, pc}

0801f7f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f7f2:	b510      	push	{r4, lr}
 801f7f4:	4604      	mov	r4, r0
 801f7f6:	2104      	movs	r1, #4
 801f7f8:	f00c f9db 	bl	802bbb2 <_ZdlPvj>
 801f7fc:	4620      	mov	r0, r4
 801f7fe:	bd10      	pop	{r4, pc}

0801f800 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f800:	b510      	push	{r4, lr}
 801f802:	4604      	mov	r4, r0
 801f804:	2104      	movs	r1, #4
 801f806:	f00c f9d4 	bl	802bbb2 <_ZdlPvj>
 801f80a:	4620      	mov	r0, r4
 801f80c:	bd10      	pop	{r4, pc}

0801f80e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f80e:	b510      	push	{r4, lr}
 801f810:	4604      	mov	r4, r0
 801f812:	2104      	movs	r1, #4
 801f814:	f00c f9cd 	bl	802bbb2 <_ZdlPvj>
 801f818:	4620      	mov	r0, r4
 801f81a:	bd10      	pop	{r4, pc}

0801f81c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f81c:	b510      	push	{r4, lr}
 801f81e:	4604      	mov	r4, r0
 801f820:	2104      	movs	r1, #4
 801f822:	f00c f9c6 	bl	802bbb2 <_ZdlPvj>
 801f826:	4620      	mov	r0, r4
 801f828:	bd10      	pop	{r4, pc}

0801f82a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f82a:	b510      	push	{r4, lr}
 801f82c:	4604      	mov	r4, r0
 801f82e:	2104      	movs	r1, #4
 801f830:	f00c f9bf 	bl	802bbb2 <_ZdlPvj>
 801f834:	4620      	mov	r0, r4
 801f836:	bd10      	pop	{r4, pc}

0801f838 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f838:	b510      	push	{r4, lr}
 801f83a:	4604      	mov	r4, r0
 801f83c:	2104      	movs	r1, #4
 801f83e:	f00c f9b8 	bl	802bbb2 <_ZdlPvj>
 801f842:	4620      	mov	r0, r4
 801f844:	bd10      	pop	{r4, pc}

0801f846 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f846:	b510      	push	{r4, lr}
 801f848:	4604      	mov	r4, r0
 801f84a:	2104      	movs	r1, #4
 801f84c:	f00c f9b1 	bl	802bbb2 <_ZdlPvj>
 801f850:	4620      	mov	r0, r4
 801f852:	bd10      	pop	{r4, pc}

0801f854 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f854:	b510      	push	{r4, lr}
 801f856:	4604      	mov	r4, r0
 801f858:	2104      	movs	r1, #4
 801f85a:	f00c f9aa 	bl	802bbb2 <_ZdlPvj>
 801f85e:	4620      	mov	r0, r4
 801f860:	bd10      	pop	{r4, pc}

0801f862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f862:	b510      	push	{r4, lr}
 801f864:	4604      	mov	r4, r0
 801f866:	2104      	movs	r1, #4
 801f868:	f00c f9a3 	bl	802bbb2 <_ZdlPvj>
 801f86c:	4620      	mov	r0, r4
 801f86e:	bd10      	pop	{r4, pc}

0801f870 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f870:	b510      	push	{r4, lr}
 801f872:	4604      	mov	r4, r0
 801f874:	2104      	movs	r1, #4
 801f876:	f00c f99c 	bl	802bbb2 <_ZdlPvj>
 801f87a:	4620      	mov	r0, r4
 801f87c:	bd10      	pop	{r4, pc}

0801f87e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f87e:	b510      	push	{r4, lr}
 801f880:	4604      	mov	r4, r0
 801f882:	2104      	movs	r1, #4
 801f884:	f00c f995 	bl	802bbb2 <_ZdlPvj>
 801f888:	4620      	mov	r0, r4
 801f88a:	bd10      	pop	{r4, pc}

0801f88c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f88c:	b510      	push	{r4, lr}
 801f88e:	4604      	mov	r4, r0
 801f890:	2104      	movs	r1, #4
 801f892:	f00c f98e 	bl	802bbb2 <_ZdlPvj>
 801f896:	4620      	mov	r0, r4
 801f898:	bd10      	pop	{r4, pc}

0801f89a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f89a:	b510      	push	{r4, lr}
 801f89c:	4604      	mov	r4, r0
 801f89e:	2104      	movs	r1, #4
 801f8a0:	f00c f987 	bl	802bbb2 <_ZdlPvj>
 801f8a4:	4620      	mov	r0, r4
 801f8a6:	bd10      	pop	{r4, pc}

0801f8a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f8a8:	b510      	push	{r4, lr}
 801f8aa:	4604      	mov	r4, r0
 801f8ac:	2104      	movs	r1, #4
 801f8ae:	f00c f980 	bl	802bbb2 <_ZdlPvj>
 801f8b2:	4620      	mov	r0, r4
 801f8b4:	bd10      	pop	{r4, pc}

0801f8b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f8b6:	b510      	push	{r4, lr}
 801f8b8:	4604      	mov	r4, r0
 801f8ba:	2104      	movs	r1, #4
 801f8bc:	f00c f979 	bl	802bbb2 <_ZdlPvj>
 801f8c0:	4620      	mov	r0, r4
 801f8c2:	bd10      	pop	{r4, pc}

0801f8c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f8c4:	b510      	push	{r4, lr}
 801f8c6:	4604      	mov	r4, r0
 801f8c8:	2104      	movs	r1, #4
 801f8ca:	f00c f972 	bl	802bbb2 <_ZdlPvj>
 801f8ce:	4620      	mov	r0, r4
 801f8d0:	bd10      	pop	{r4, pc}

0801f8d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f8d2:	b510      	push	{r4, lr}
 801f8d4:	4604      	mov	r4, r0
 801f8d6:	2104      	movs	r1, #4
 801f8d8:	f00c f96b 	bl	802bbb2 <_ZdlPvj>
 801f8dc:	4620      	mov	r0, r4
 801f8de:	bd10      	pop	{r4, pc}

0801f8e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f8e0:	b510      	push	{r4, lr}
 801f8e2:	4604      	mov	r4, r0
 801f8e4:	2104      	movs	r1, #4
 801f8e6:	f00c f964 	bl	802bbb2 <_ZdlPvj>
 801f8ea:	4620      	mov	r0, r4
 801f8ec:	bd10      	pop	{r4, pc}

0801f8ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f8ee:	b510      	push	{r4, lr}
 801f8f0:	4604      	mov	r4, r0
 801f8f2:	2104      	movs	r1, #4
 801f8f4:	f00c f95d 	bl	802bbb2 <_ZdlPvj>
 801f8f8:	4620      	mov	r0, r4
 801f8fa:	bd10      	pop	{r4, pc}

0801f8fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f8fc:	b510      	push	{r4, lr}
 801f8fe:	4604      	mov	r4, r0
 801f900:	2104      	movs	r1, #4
 801f902:	f00c f956 	bl	802bbb2 <_ZdlPvj>
 801f906:	4620      	mov	r0, r4
 801f908:	bd10      	pop	{r4, pc}

0801f90a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f90a:	b510      	push	{r4, lr}
 801f90c:	4604      	mov	r4, r0
 801f90e:	2104      	movs	r1, #4
 801f910:	f00c f94f 	bl	802bbb2 <_ZdlPvj>
 801f914:	4620      	mov	r0, r4
 801f916:	bd10      	pop	{r4, pc}

0801f918 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f918:	b510      	push	{r4, lr}
 801f91a:	4604      	mov	r4, r0
 801f91c:	2104      	movs	r1, #4
 801f91e:	f00c f948 	bl	802bbb2 <_ZdlPvj>
 801f922:	4620      	mov	r0, r4
 801f924:	bd10      	pop	{r4, pc}

0801f926 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f926:	b510      	push	{r4, lr}
 801f928:	4604      	mov	r4, r0
 801f92a:	2104      	movs	r1, #4
 801f92c:	f00c f941 	bl	802bbb2 <_ZdlPvj>
 801f930:	4620      	mov	r0, r4
 801f932:	bd10      	pop	{r4, pc}

0801f934 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f934:	b510      	push	{r4, lr}
 801f936:	4604      	mov	r4, r0
 801f938:	2104      	movs	r1, #4
 801f93a:	f00c f93a 	bl	802bbb2 <_ZdlPvj>
 801f93e:	4620      	mov	r0, r4
 801f940:	bd10      	pop	{r4, pc}

0801f942 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f942:	b510      	push	{r4, lr}
 801f944:	4604      	mov	r4, r0
 801f946:	2104      	movs	r1, #4
 801f948:	f00c f933 	bl	802bbb2 <_ZdlPvj>
 801f94c:	4620      	mov	r0, r4
 801f94e:	bd10      	pop	{r4, pc}

0801f950 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801f950:	b510      	push	{r4, lr}
 801f952:	4604      	mov	r4, r0
 801f954:	2104      	movs	r1, #4
 801f956:	f00c f92c 	bl	802bbb2 <_ZdlPvj>
 801f95a:	4620      	mov	r0, r4
 801f95c:	bd10      	pop	{r4, pc}

0801f95e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801f95e:	b510      	push	{r4, lr}
 801f960:	4604      	mov	r4, r0
 801f962:	2104      	movs	r1, #4
 801f964:	f00c f925 	bl	802bbb2 <_ZdlPvj>
 801f968:	4620      	mov	r0, r4
 801f96a:	bd10      	pop	{r4, pc}

0801f96c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801f96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f970:	b08f      	sub	sp, #60	@ 0x3c
 801f972:	4616      	mov	r6, r2
 801f974:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801f978:	4682      	mov	sl, r0
 801f97a:	460d      	mov	r5, r1
 801f97c:	9205      	str	r2, [sp, #20]
 801f97e:	2a00      	cmp	r2, #0
 801f980:	f000 82b7 	beq.w	801fef2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 801f984:	6830      	ldr	r0, [r6, #0]
 801f986:	6871      	ldr	r1, [r6, #4]
 801f988:	ac0a      	add	r4, sp, #40	@ 0x28
 801f98a:	c403      	stmia	r4!, {r0, r1}
 801f98c:	6818      	ldr	r0, [r3, #0]
 801f98e:	6859      	ldr	r1, [r3, #4]
 801f990:	ac0c      	add	r4, sp, #48	@ 0x30
 801f992:	c403      	stmia	r4!, {r0, r1}
 801f994:	a80a      	add	r0, sp, #40	@ 0x28
 801f996:	f7f9 fcf5 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f99a:	4631      	mov	r1, r6
 801f99c:	a80c      	add	r0, sp, #48	@ 0x30
 801f99e:	f7f9 fd19 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f9a2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801f9a6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801f9aa:	bfdd      	ittte	le
 801f9ac:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801f9b0:	b293      	uxthle	r3, r2
 801f9b2:	fb91 f3f3 	sdivle	r3, r1, r3
 801f9b6:	2301      	movgt	r3, #1
 801f9b8:	9300      	str	r3, [sp, #0]
 801f9ba:	f105 0308 	add.w	r3, r5, #8
 801f9be:	9900      	ldr	r1, [sp, #0]
 801f9c0:	9306      	str	r3, [sp, #24]
 801f9c2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801f9c6:	440b      	add	r3, r1
 801f9c8:	3b01      	subs	r3, #1
 801f9ca:	fb93 f3f1 	sdiv	r3, r3, r1
 801f9ce:	9906      	ldr	r1, [sp, #24]
 801f9d0:	3b01      	subs	r3, #1
 801f9d2:	b29b      	uxth	r3, r3
 801f9d4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f9d8:	9307      	str	r3, [sp, #28]
 801f9da:	9900      	ldr	r1, [sp, #0]
 801f9dc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801f9e0:	fb93 f0f1 	sdiv	r0, r3, r1
 801f9e4:	b284      	uxth	r4, r0
 801f9e6:	9402      	str	r4, [sp, #8]
 801f9e8:	9d02      	ldr	r5, [sp, #8]
 801f9ea:	9c00      	ldr	r4, [sp, #0]
 801f9ec:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801f9f0:	fb05 3414 	mls	r4, r5, r4, r3
 801f9f4:	fb14 f402 	smulbb	r4, r4, r2
 801f9f8:	440c      	add	r4, r1
 801f9fa:	b2a4      	uxth	r4, r4
 801f9fc:	2d00      	cmp	r5, #0
 801f9fe:	d06c      	beq.n	801fada <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 801fa00:	9806      	ldr	r0, [sp, #24]
 801fa02:	1e6a      	subs	r2, r5, #1
 801fa04:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 801fa08:	9a07      	ldr	r2, [sp, #28]
 801fa0a:	ba36      	rev	r6, r6
 801fa0c:	4416      	add	r6, r2
 801fa0e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801fa12:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 801fa16:	4411      	add	r1, r2
 801fa18:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801fa1c:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801fa20:	4413      	add	r3, r2
 801fa22:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801fa26:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801fa2a:	f8df 9320 	ldr.w	r9, [pc, #800]	@ 801fd4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 801fa2e:	9301      	str	r3, [sp, #4]
 801fa30:	4bc4      	ldr	r3, [pc, #784]	@ (801fd44 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 801fa32:	6818      	ldr	r0, [r3, #0]
 801fa34:	6803      	ldr	r3, [r0, #0]
 801fa36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa38:	4798      	blx	r3
 801fa3a:	4bc3      	ldr	r3, [pc, #780]	@ (801fd48 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 801fa3c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801fa40:	881b      	ldrh	r3, [r3, #0]
 801fa42:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 801fa46:	fb03 2808 	mla	r8, r3, r8, r2
 801fa4a:	436b      	muls	r3, r5
 801fa4c:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 801fa50:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801fa54:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa56:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801fa5a:	2500      	movs	r5, #0
 801fa5c:	fb94 f3f3 	sdiv	r3, r4, r3
 801fa60:	9304      	str	r3, [sp, #16]
 801fa62:	f10a 0304 	add.w	r3, sl, #4
 801fa66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801fa6a:	4629      	mov	r1, r5
 801fa6c:	4618      	mov	r0, r3
 801fa6e:	9308      	str	r3, [sp, #32]
 801fa70:	f00d faa0 	bl	802cfb4 <memset>
 801fa74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa76:	4543      	cmp	r3, r8
 801fa78:	f240 8236 	bls.w	801fee8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 801fa7c:	2203      	movs	r2, #3
 801fa7e:	2107      	movs	r1, #7
 801fa80:	200b      	movs	r0, #11
 801fa82:	2c00      	cmp	r4, #0
 801fa84:	f000 8131 	beq.w	801fcea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 801fa88:	7833      	ldrb	r3, [r6, #0]
 801fa8a:	b2db      	uxtb	r3, r3
 801fa8c:	2bfe      	cmp	r3, #254	@ 0xfe
 801fa8e:	d126      	bne.n	801fade <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 801fa90:	f896 e001 	ldrb.w	lr, [r6, #1]
 801fa94:	f896 c002 	ldrb.w	ip, [r6, #2]
 801fa98:	fa5f fe8e 	uxtb.w	lr, lr
 801fa9c:	f896 b003 	ldrb.w	fp, [r6, #3]
 801faa0:	fa5f fc8c 	uxtb.w	ip, ip
 801faa4:	f36e 0507 	bfi	r5, lr, #0, #8
 801faa8:	f36c 250f 	bfi	r5, ip, #8, #8
 801faac:	fa5f fb8b 	uxtb.w	fp, fp
 801fab0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801fab4:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 801fab8:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801fabc:	f36b 4517 	bfi	r5, fp, #16, #8
 801fac0:	0e2b      	lsrs	r3, r5, #24
 801fac2:	fb10 c303 	smlabb	r3, r0, r3, ip
 801fac6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801faca:	3c01      	subs	r4, #1
 801facc:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fad0:	1d37      	adds	r7, r6, #4
 801fad2:	b2a4      	uxth	r4, r4
 801fad4:	605d      	str	r5, [r3, #4]
 801fad6:	463e      	mov	r6, r7
 801fad8:	e7d3      	b.n	801fa82 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 801fada:	9e07      	ldr	r6, [sp, #28]
 801fadc:	e797      	b.n	801fa0e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 801fade:	2bff      	cmp	r3, #255	@ 0xff
 801fae0:	d127      	bne.n	801fb32 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 801fae2:	f896 c001 	ldrb.w	ip, [r6, #1]
 801fae6:	78b3      	ldrb	r3, [r6, #2]
 801fae8:	fa5f fc8c 	uxtb.w	ip, ip
 801faec:	f896 e003 	ldrb.w	lr, [r6, #3]
 801faf0:	b2db      	uxtb	r3, r3
 801faf2:	f36c 0507 	bfi	r5, ip, #0, #8
 801faf6:	f363 250f 	bfi	r5, r3, #8, #8
 801fafa:	fa5f fe8e 	uxtb.w	lr, lr
 801fafe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801fb02:	fb12 330e 	smlabb	r3, r2, lr, r3
 801fb06:	fb11 330c 	smlabb	r3, r1, ip, r3
 801fb0a:	f896 b004 	ldrb.w	fp, [r6, #4]
 801fb0e:	f36e 4517 	bfi	r5, lr, #16, #8
 801fb12:	fa5f fb8b 	uxtb.w	fp, fp
 801fb16:	f36b 651f 	bfi	r5, fp, #24, #8
 801fb1a:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 801fb1e:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 801fb22:	3c01      	subs	r4, #1
 801fb24:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 801fb28:	1d77      	adds	r7, r6, #5
 801fb2a:	b2a4      	uxth	r4, r4
 801fb2c:	f8cb 5004 	str.w	r5, [fp, #4]
 801fb30:	e7d1      	b.n	801fad6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801fb32:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 801fb36:	f106 0701 	add.w	r7, r6, #1
 801fb3a:	d107      	bne.n	801fb4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 801fb3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fb40:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fb44:	685d      	ldr	r5, [r3, #4]
 801fb46:	3c01      	subs	r4, #1
 801fb48:	b2a4      	uxth	r4, r4
 801fb4a:	e7c4      	b.n	801fad6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801fb4c:	f1bc 0f01 	cmp.w	ip, #1
 801fb50:	d12c      	bne.n	801fbac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 801fb52:	f003 0e03 	and.w	lr, r3, #3
 801fb56:	f1ae 0e02 	sub.w	lr, lr, #2
 801fb5a:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 801fb5e:	fa5f fe8e 	uxtb.w	lr, lr
 801fb62:	f003 0c0c 	and.w	ip, r3, #12
 801fb66:	f36e 0507 	bfi	r5, lr, #0, #8
 801fb6a:	f1ac 0c08 	sub.w	ip, ip, #8
 801fb6e:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801fb72:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801fb76:	f36c 250f 	bfi	r5, ip, #8, #8
 801fb7a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801fb7e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fb82:	3b02      	subs	r3, #2
 801fb84:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801fb88:	b2db      	uxtb	r3, r3
 801fb8a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801fb8e:	fb12 cc03 	smlabb	ip, r2, r3, ip
 801fb92:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801fb96:	f363 4517 	bfi	r5, r3, #16, #8
 801fb9a:	0e2e      	lsrs	r6, r5, #24
 801fb9c:	fb10 c606 	smlabb	r6, r0, r6, ip
 801fba0:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 801fba4:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 801fba8:	6075      	str	r5, [r6, #4]
 801fbaa:	e7cc      	b.n	801fb46 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 801fbac:	f1bc 0f02 	cmp.w	ip, #2
 801fbb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fbb4:	d12a      	bne.n	801fc0c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 801fbb6:	1cb7      	adds	r7, r6, #2
 801fbb8:	7876      	ldrb	r6, [r6, #1]
 801fbba:	3b20      	subs	r3, #32
 801fbbc:	b2f6      	uxtb	r6, r6
 801fbbe:	f006 0c0f 	and.w	ip, r6, #15
 801fbc2:	f1ac 0c08 	sub.w	ip, ip, #8
 801fbc6:	449c      	add	ip, r3
 801fbc8:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801fbcc:	fa5f fc8c 	uxtb.w	ip, ip
 801fbd0:	f36c 0507 	bfi	r5, ip, #0, #8
 801fbd4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801fbd8:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 801fbdc:	fa5f fe8e 	uxtb.w	lr, lr
 801fbe0:	1136      	asrs	r6, r6, #4
 801fbe2:	f36e 250f 	bfi	r5, lr, #8, #8
 801fbe6:	3e08      	subs	r6, #8
 801fbe8:	4433      	add	r3, r6
 801fbea:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fbee:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801fbf2:	b2db      	uxtb	r3, r3
 801fbf4:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 801fbf8:	fb12 ee03 	smlabb	lr, r2, r3, lr
 801fbfc:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 801fc00:	f363 4517 	bfi	r5, r3, #16, #8
 801fc04:	0e2e      	lsrs	r6, r5, #24
 801fc06:	fb10 e606 	smlabb	r6, r0, r6, lr
 801fc0a:	e7c9      	b.n	801fba0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 801fc0c:	1c5e      	adds	r6, r3, #1
 801fc0e:	42a6      	cmp	r6, r4
 801fc10:	dd4e      	ble.n	801fcb0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 801fc12:	1b36      	subs	r6, r6, r4
 801fc14:	2e00      	cmp	r6, #0
 801fc16:	dc4e      	bgt.n	801fcb6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 801fc18:	2400      	movs	r4, #0
 801fc1a:	f8dd b004 	ldr.w	fp, [sp, #4]
 801fc1e:	f1bb 0f00 	cmp.w	fp, #0
 801fc22:	f340 8122 	ble.w	801fe6a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 801fc26:	1c7b      	adds	r3, r7, #1
 801fc28:	9303      	str	r3, [sp, #12]
 801fc2a:	783b      	ldrb	r3, [r7, #0]
 801fc2c:	b2db      	uxtb	r3, r3
 801fc2e:	2bfe      	cmp	r3, #254	@ 0xfe
 801fc30:	d160      	bne.n	801fcf4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 801fc32:	1d3b      	adds	r3, r7, #4
 801fc34:	9303      	str	r3, [sp, #12]
 801fc36:	2303      	movs	r3, #3
 801fc38:	7879      	ldrb	r1, [r7, #1]
 801fc3a:	78ba      	ldrb	r2, [r7, #2]
 801fc3c:	b2c9      	uxtb	r1, r1
 801fc3e:	78f8      	ldrb	r0, [r7, #3]
 801fc40:	f361 0507 	bfi	r5, r1, #0, #8
 801fc44:	b2d2      	uxtb	r2, r2
 801fc46:	f362 250f 	bfi	r5, r2, #8, #8
 801fc4a:	b2c0      	uxtb	r0, r0
 801fc4c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fc50:	fb13 2200 	smlabb	r2, r3, r0, r2
 801fc54:	2307      	movs	r3, #7
 801fc56:	fb13 2101 	smlabb	r1, r3, r1, r2
 801fc5a:	230b      	movs	r3, #11
 801fc5c:	f360 4517 	bfi	r5, r0, #16, #8
 801fc60:	0e2e      	lsrs	r6, r5, #24
 801fc62:	fb13 1306 	smlabb	r3, r3, r6, r1
 801fc66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fc6a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fc6e:	605d      	str	r5, [r3, #4]
 801fc70:	2601      	movs	r6, #1
 801fc72:	4637      	mov	r7, r6
 801fc74:	0e2b      	lsrs	r3, r5, #24
 801fc76:	ebab 0b07 	sub.w	fp, fp, r7
 801fc7a:	eba6 0607 	sub.w	r6, r6, r7
 801fc7e:	f040 80d3 	bne.w	801fe28 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 801fc82:	b18c      	cbz	r4, 801fca8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 801fc84:	4648      	mov	r0, r9
 801fc86:	00a1      	lsls	r1, r4, #2
 801fc88:	f7f2 fcaa 	bl	80125e0 <_ZN8touchgfx5paint9flushLineEPmi>
 801fc8c:	9b05      	ldr	r3, [sp, #20]
 801fc8e:	4622      	mov	r2, r4
 801fc90:	4649      	mov	r1, r9
 801fc92:	4640      	mov	r0, r8
 801fc94:	f7f2 fd4e 	bl	8012734 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801fc98:	4b2c      	ldr	r3, [pc, #176]	@ (801fd4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 801fc9a:	4a2d      	ldr	r2, [pc, #180]	@ (801fd50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 801fc9c:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801fca0:	4599      	cmp	r9, r3
 801fca2:	bf08      	it	eq
 801fca4:	4613      	moveq	r3, r2
 801fca6:	4699      	mov	r9, r3
 801fca8:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 801fcac:	2400      	movs	r4, #0
 801fcae:	e0da      	b.n	801fe66 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 801fcb0:	1ba6      	subs	r6, r4, r6
 801fcb2:	b2b4      	uxth	r4, r6
 801fcb4:	e70f      	b.n	801fad6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801fcb6:	9b01      	ldr	r3, [sp, #4]
 801fcb8:	9a01      	ldr	r2, [sp, #4]
 801fcba:	42b3      	cmp	r3, r6
 801fcbc:	bfa8      	it	ge
 801fcbe:	4633      	movge	r3, r6
 801fcc0:	0e2c      	lsrs	r4, r5, #24
 801fcc2:	eba2 0b03 	sub.w	fp, r2, r3
 801fcc6:	eba6 0603 	sub.w	r6, r6, r3
 801fcca:	d00b      	beq.n	801fce4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 801fccc:	461a      	mov	r2, r3
 801fcce:	f1a9 0104 	sub.w	r1, r9, #4
 801fcd2:	2a00      	cmp	r2, #0
 801fcd4:	dc02      	bgt.n	801fcdc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 801fcd6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fcda:	e7a0      	b.n	801fc1e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801fcdc:	f841 5f04 	str.w	r5, [r1, #4]!
 801fce0:	3a01      	subs	r2, #1
 801fce2:	e7f6      	b.n	801fcd2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 801fce4:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801fce8:	e799      	b.n	801fc1e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801fcea:	4637      	mov	r7, r6
 801fcec:	f8dd b004 	ldr.w	fp, [sp, #4]
 801fcf0:	4626      	mov	r6, r4
 801fcf2:	e794      	b.n	801fc1e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801fcf4:	2bff      	cmp	r3, #255	@ 0xff
 801fcf6:	d11d      	bne.n	801fd34 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 801fcf8:	1d7b      	adds	r3, r7, #5
 801fcfa:	7878      	ldrb	r0, [r7, #1]
 801fcfc:	9303      	str	r3, [sp, #12]
 801fcfe:	78ba      	ldrb	r2, [r7, #2]
 801fd00:	78fe      	ldrb	r6, [r7, #3]
 801fd02:	793b      	ldrb	r3, [r7, #4]
 801fd04:	b2c0      	uxtb	r0, r0
 801fd06:	b2d9      	uxtb	r1, r3
 801fd08:	2303      	movs	r3, #3
 801fd0a:	f360 0507 	bfi	r5, r0, #0, #8
 801fd0e:	b2d2      	uxtb	r2, r2
 801fd10:	f362 250f 	bfi	r5, r2, #8, #8
 801fd14:	b2f6      	uxtb	r6, r6
 801fd16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fd1a:	fb13 2206 	smlabb	r2, r3, r6, r2
 801fd1e:	2307      	movs	r3, #7
 801fd20:	fb13 2000 	smlabb	r0, r3, r0, r2
 801fd24:	230b      	movs	r3, #11
 801fd26:	f366 4517 	bfi	r5, r6, #16, #8
 801fd2a:	f361 651f 	bfi	r5, r1, #24, #8
 801fd2e:	fb13 0301 	smlabb	r3, r3, r1, r0
 801fd32:	e798      	b.n	801fc66 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 801fd34:	119e      	asrs	r6, r3, #6
 801fd36:	d10d      	bne.n	801fd54 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801fd38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fd3c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fd40:	685d      	ldr	r5, [r3, #4]
 801fd42:	e795      	b.n	801fc70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801fd44:	2005baa4 	.word	0x2005baa4
 801fd48:	2005ba9e 	.word	0x2005ba9e
 801fd4c:	20045700 	.word	0x20045700
 801fd50:	20045800 	.word	0x20045800
 801fd54:	2e01      	cmp	r6, #1
 801fd56:	ea4f 6115 	mov.w	r1, r5, lsr #24
 801fd5a:	d12b      	bne.n	801fdb4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 801fd5c:	f003 0003 	and.w	r0, r3, #3
 801fd60:	3802      	subs	r0, #2
 801fd62:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 801fd66:	b2c0      	uxtb	r0, r0
 801fd68:	f003 020c 	and.w	r2, r3, #12
 801fd6c:	f360 0507 	bfi	r5, r0, #0, #8
 801fd70:	3a08      	subs	r2, #8
 801fd72:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801fd76:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801fd7a:	f362 250f 	bfi	r5, r2, #8, #8
 801fd7e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801fd82:	1e9f      	subs	r7, r3, #2
 801fd84:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801fd88:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801fd8c:	2703      	movs	r7, #3
 801fd8e:	b2db      	uxtb	r3, r3
 801fd90:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fd94:	fb17 2203 	smlabb	r2, r7, r3, r2
 801fd98:	2707      	movs	r7, #7
 801fd9a:	f363 4517 	bfi	r5, r3, #16, #8
 801fd9e:	230b      	movs	r3, #11
 801fda0:	fb17 2000 	smlabb	r0, r7, r0, r2
 801fda4:	fb13 0101 	smlabb	r1, r3, r1, r0
 801fda8:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801fdac:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801fdb0:	604d      	str	r5, [r1, #4]
 801fdb2:	e75e      	b.n	801fc72 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801fdb4:	2e02      	cmp	r6, #2
 801fdb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fdba:	d12f      	bne.n	801fe1c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 801fdbc:	7878      	ldrb	r0, [r7, #1]
 801fdbe:	1cba      	adds	r2, r7, #2
 801fdc0:	b2c0      	uxtb	r0, r0
 801fdc2:	9203      	str	r2, [sp, #12]
 801fdc4:	f000 020f 	and.w	r2, r0, #15
 801fdc8:	3b20      	subs	r3, #32
 801fdca:	3a08      	subs	r2, #8
 801fdcc:	441a      	add	r2, r3
 801fdce:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801fdd2:	b2d2      	uxtb	r2, r2
 801fdd4:	f362 0507 	bfi	r5, r2, #0, #8
 801fdd8:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801fddc:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801fde0:	b2f6      	uxtb	r6, r6
 801fde2:	1100      	asrs	r0, r0, #4
 801fde4:	f366 250f 	bfi	r5, r6, #8, #8
 801fde8:	3808      	subs	r0, #8
 801fdea:	4403      	add	r3, r0
 801fdec:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801fdf0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801fdf4:	2003      	movs	r0, #3
 801fdf6:	b2db      	uxtb	r3, r3
 801fdf8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801fdfc:	fb10 6603 	smlabb	r6, r0, r3, r6
 801fe00:	2007      	movs	r0, #7
 801fe02:	f363 4517 	bfi	r5, r3, #16, #8
 801fe06:	230b      	movs	r3, #11
 801fe08:	fb10 6202 	smlabb	r2, r0, r2, r6
 801fe0c:	fb13 2101 	smlabb	r1, r3, r1, r2
 801fe10:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801fe14:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801fe18:	604d      	str	r5, [r1, #4]
 801fe1a:	e729      	b.n	801fc70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801fe1c:	1c5e      	adds	r6, r3, #1
 801fe1e:	45b3      	cmp	fp, r6
 801fe20:	465f      	mov	r7, fp
 801fe22:	bfa8      	it	ge
 801fe24:	4637      	movge	r7, r6
 801fe26:	e725      	b.n	801fc74 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 801fe28:	193b      	adds	r3, r7, r4
 801fe2a:	2b40      	cmp	r3, #64	@ 0x40
 801fe2c:	dd13      	ble.n	801fe56 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 801fe2e:	4648      	mov	r0, r9
 801fe30:	00a1      	lsls	r1, r4, #2
 801fe32:	f7f2 fbd5 	bl	80125e0 <_ZN8touchgfx5paint9flushLineEPmi>
 801fe36:	4622      	mov	r2, r4
 801fe38:	4640      	mov	r0, r8
 801fe3a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801fe3e:	2400      	movs	r4, #0
 801fe40:	4649      	mov	r1, r9
 801fe42:	9b05      	ldr	r3, [sp, #20]
 801fe44:	f7f2 fc76 	bl	8012734 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801fe48:	4b2b      	ldr	r3, [pc, #172]	@ (801fef8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 801fe4a:	4599      	cmp	r9, r3
 801fe4c:	bf0c      	ite	eq
 801fe4e:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 801ff04 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 801fe52:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 801fef8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 801fe56:	463b      	mov	r3, r7
 801fe58:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 801fe5c:	3b01      	subs	r3, #1
 801fe5e:	f842 5b04 	str.w	r5, [r2], #4
 801fe62:	d1fb      	bne.n	801fe5c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 801fe64:	443c      	add	r4, r7
 801fe66:	9f03      	ldr	r7, [sp, #12]
 801fe68:	e6d9      	b.n	801fc1e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801fe6a:	b15c      	cbz	r4, 801fe84 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 801fe6c:	00a1      	lsls	r1, r4, #2
 801fe6e:	4648      	mov	r0, r9
 801fe70:	f7f2 fbb6 	bl	80125e0 <_ZN8touchgfx5paint9flushLineEPmi>
 801fe74:	4640      	mov	r0, r8
 801fe76:	9b05      	ldr	r3, [sp, #20]
 801fe78:	4622      	mov	r2, r4
 801fe7a:	4649      	mov	r1, r9
 801fe7c:	f7f2 fc5a 	bl	8012734 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801fe80:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801fe84:	4b1d      	ldr	r3, [pc, #116]	@ (801fefc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 801fe86:	9a01      	ldr	r2, [sp, #4]
 801fe88:	881b      	ldrh	r3, [r3, #0]
 801fe8a:	1a9b      	subs	r3, r3, r2
 801fe8c:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801fe90:	9b04      	ldr	r3, [sp, #16]
 801fe92:	3301      	adds	r3, #1
 801fe94:	9304      	str	r3, [sp, #16]
 801fe96:	9a04      	ldr	r2, [sp, #16]
 801fe98:	9b00      	ldr	r3, [sp, #0]
 801fe9a:	4293      	cmp	r3, r2
 801fe9c:	d11d      	bne.n	801feda <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 801fe9e:	2500      	movs	r5, #0
 801fea0:	9b02      	ldr	r3, [sp, #8]
 801fea2:	9a02      	ldr	r2, [sp, #8]
 801fea4:	f103 0b01 	add.w	fp, r3, #1
 801fea8:	9b06      	ldr	r3, [sp, #24]
 801feaa:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 801feae:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801feb2:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 801feb6:	9b07      	ldr	r3, [sp, #28]
 801feb8:	ba3f      	rev	r7, r7
 801feba:	1ba4      	subs	r4, r4, r6
 801febc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801fec0:	4629      	mov	r1, r5
 801fec2:	9808      	ldr	r0, [sp, #32]
 801fec4:	441f      	add	r7, r3
 801fec6:	b2a4      	uxth	r4, r4
 801fec8:	f00d f874 	bl	802cfb4 <memset>
 801fecc:	f8cd b008 	str.w	fp, [sp, #8]
 801fed0:	9504      	str	r5, [sp, #16]
 801fed2:	f7f2 fb6d 	bl	80125b0 <_ZN8touchgfx5paint8tearDownEv>
 801fed6:	463e      	mov	r6, r7
 801fed8:	e5cc      	b.n	801fa74 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 801feda:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801fede:	9b01      	ldr	r3, [sp, #4]
 801fee0:	1ae4      	subs	r4, r4, r3
 801fee2:	1ba4      	subs	r4, r4, r6
 801fee4:	b2a4      	uxth	r4, r4
 801fee6:	e7f4      	b.n	801fed2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 801fee8:	4b05      	ldr	r3, [pc, #20]	@ (801ff00 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 801feea:	6818      	ldr	r0, [r3, #0]
 801feec:	6803      	ldr	r3, [r0, #0]
 801feee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fef0:	4798      	blx	r3
 801fef2:	b00f      	add	sp, #60	@ 0x3c
 801fef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fef8:	20045700 	.word	0x20045700
 801fefc:	2005ba9e 	.word	0x2005ba9e
 801ff00:	2005baa4 	.word	0x2005baa4
 801ff04:	20045800 	.word	0x20045800

0801ff08 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801ff08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff0c:	b08f      	sub	sp, #60	@ 0x3c
 801ff0e:	9205      	str	r2, [sp, #20]
 801ff10:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ff14:	461c      	mov	r4, r3
 801ff16:	9100      	str	r1, [sp, #0]
 801ff18:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ff1a:	9201      	str	r2, [sp, #4]
 801ff1c:	2a00      	cmp	r2, #0
 801ff1e:	f000 8116 	beq.w	802014e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801ff22:	6820      	ldr	r0, [r4, #0]
 801ff24:	6861      	ldr	r1, [r4, #4]
 801ff26:	aa0a      	add	r2, sp, #40	@ 0x28
 801ff28:	c203      	stmia	r2!, {r0, r1}
 801ff2a:	6818      	ldr	r0, [r3, #0]
 801ff2c:	6859      	ldr	r1, [r3, #4]
 801ff2e:	aa0c      	add	r2, sp, #48	@ 0x30
 801ff30:	c203      	stmia	r2!, {r0, r1}
 801ff32:	a80a      	add	r0, sp, #40	@ 0x28
 801ff34:	f7f9 fa26 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ff38:	4621      	mov	r1, r4
 801ff3a:	a80c      	add	r0, sp, #48	@ 0x30
 801ff3c:	f7f9 fa4a 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ff40:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801ff44:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801ff48:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801ff4c:	bfdd      	ittte	le
 801ff4e:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801ff52:	b2b3      	uxthle	r3, r6
 801ff54:	fb92 f3f3 	sdivle	r3, r2, r3
 801ff58:	2301      	movgt	r3, #1
 801ff5a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ff5e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801ff62:	fb92 f1f3 	sdiv	r1, r2, r3
 801ff66:	fa1f fc81 	uxth.w	ip, r1
 801ff6a:	4661      	mov	r1, ip
 801ff6c:	fb0c 2413 	mls	r4, ip, r3, r2
 801ff70:	fb14 f406 	smulbb	r4, r4, r6
 801ff74:	441d      	add	r5, r3
 801ff76:	3d01      	subs	r5, #1
 801ff78:	4404      	add	r4, r0
 801ff7a:	fb95 f5f3 	sdiv	r5, r5, r3
 801ff7e:	b2a4      	uxth	r4, r4
 801ff80:	b131      	cbz	r1, 801ff90 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801ff82:	9b05      	ldr	r3, [sp, #20]
 801ff84:	9900      	ldr	r1, [sp, #0]
 801ff86:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ff8a:	ba1b      	rev	r3, r3
 801ff8c:	4419      	add	r1, r3
 801ff8e:	9100      	str	r1, [sp, #0]
 801ff90:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ff94:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801ff98:	4418      	add	r0, r3
 801ff9a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801ff9e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801ffa2:	441a      	add	r2, r3
 801ffa4:	4b6b      	ldr	r3, [pc, #428]	@ (8020154 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801ffa6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801ffaa:	6818      	ldr	r0, [r3, #0]
 801ffac:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801ffb0:	6803      	ldr	r3, [r0, #0]
 801ffb2:	b2ad      	uxth	r5, r5
 801ffb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ffb6:	4798      	blx	r3
 801ffb8:	4967      	ldr	r1, [pc, #412]	@ (8020158 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801ffba:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ffbe:	880b      	ldrh	r3, [r1, #0]
 801ffc0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801ffc4:	00ad      	lsls	r5, r5, #2
 801ffc6:	fb03 c202 	mla	r2, r3, r2, ip
 801ffca:	4373      	muls	r3, r6
 801ffcc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ffd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ffd4:	9306      	str	r3, [sp, #24]
 801ffd6:	1d2b      	adds	r3, r5, #4
 801ffd8:	9307      	str	r3, [sp, #28]
 801ffda:	9b01      	ldr	r3, [sp, #4]
 801ffdc:	2c00      	cmp	r4, #0
 801ffde:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 801ffe2:	bf0c      	ite	eq
 801ffe4:	46c6      	moveq	lr, r8
 801ffe6:	f04f 0e00 	movne.w	lr, #0
 801ffea:	2300      	movs	r3, #0
 801ffec:	9109      	str	r1, [sp, #36]	@ 0x24
 801ffee:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801fff2:	b292      	uxth	r2, r2
 801fff4:	fa1f fe8e 	uxth.w	lr, lr
 801fff8:	9302      	str	r3, [sp, #8]
 801fffa:	9103      	str	r1, [sp, #12]
 801fffc:	9204      	str	r2, [sp, #16]
 801fffe:	9a06      	ldr	r2, [sp, #24]
 8020000:	4282      	cmp	r2, r0
 8020002:	f240 809f 	bls.w	8020144 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 8020006:	b963      	cbnz	r3, 8020022 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8020008:	9b00      	ldr	r3, [sp, #0]
 802000a:	781a      	ldrb	r2, [r3, #0]
 802000c:	0993      	lsrs	r3, r2, #6
 802000e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020012:	9202      	str	r2, [sp, #8]
 8020014:	1e5a      	subs	r2, r3, #1
 8020016:	2a02      	cmp	r2, #2
 8020018:	d815      	bhi.n	8020046 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 802001a:	9a00      	ldr	r2, [sp, #0]
 802001c:	b29b      	uxth	r3, r3
 802001e:	3201      	adds	r2, #1
 8020020:	9200      	str	r2, [sp, #0]
 8020022:	b1b4      	cbz	r4, 8020052 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 8020024:	429c      	cmp	r4, r3
 8020026:	bf99      	ittee	ls
 8020028:	1b1c      	subls	r4, r3, r4
 802002a:	fa1f fa84 	uxthls.w	sl, r4
 802002e:	4671      	movhi	r1, lr
 8020030:	f04f 0a00 	movhi.w	sl, #0
 8020034:	bf93      	iteet	ls
 8020036:	2400      	movls	r4, #0
 8020038:	1ae4      	subhi	r4, r4, r3
 802003a:	b2a4      	uxthhi	r4, r4
 802003c:	fa1f f188 	uxthls.w	r1, r8
 8020040:	4653      	mov	r3, sl
 8020042:	468e      	mov	lr, r1
 8020044:	e7db      	b.n	801fffe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 8020046:	9a00      	ldr	r2, [sp, #0]
 8020048:	9b00      	ldr	r3, [sp, #0]
 802004a:	3202      	adds	r2, #2
 802004c:	785b      	ldrb	r3, [r3, #1]
 802004e:	9200      	str	r2, [sp, #0]
 8020050:	e7e7      	b.n	8020022 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8020052:	2202      	movs	r2, #2
 8020054:	4615      	mov	r5, r2
 8020056:	4573      	cmp	r3, lr
 8020058:	bf2c      	ite	cs
 802005a:	46f1      	movcs	r9, lr
 802005c:	4699      	movcc	r9, r3
 802005e:	9907      	ldr	r1, [sp, #28]
 8020060:	9a02      	ldr	r2, [sp, #8]
 8020062:	bf28      	it	cs
 8020064:	eba3 0a0e 	subcs.w	sl, r3, lr
 8020068:	fb15 1202 	smlabb	r2, r5, r2, r1
 802006c:	9905      	ldr	r1, [sp, #20]
 802006e:	bf28      	it	cs
 8020070:	fa1f fa8a 	uxthcs.w	sl, sl
 8020074:	f831 c002 	ldrh.w	ip, [r1, r2]
 8020078:	9a01      	ldr	r2, [sp, #4]
 802007a:	bf37      	itett	cc
 802007c:	ebae 0103 	subcc.w	r1, lr, r3
 8020080:	4621      	movcs	r1, r4
 8020082:	b289      	uxthcc	r1, r1
 8020084:	46a2      	movcc	sl, r4
 8020086:	2aff      	cmp	r2, #255	@ 0xff
 8020088:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802008c:	d105      	bne.n	802009a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 802008e:	4481      	add	r9, r0
 8020090:	4581      	cmp	r9, r0
 8020092:	d045      	beq.n	8020120 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8020094:	f820 cb02 	strh.w	ip, [r0], #2
 8020098:	e7fa      	b.n	8020090 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 802009a:	9d03      	ldr	r5, [sp, #12]
 802009c:	ea4f 222c 	mov.w	r2, ip, asr #8
 80200a0:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80200a4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80200a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80200ac:	436a      	muls	r2, r5
 80200ae:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80200b2:	fa5f fc8c 	uxtb.w	ip, ip
 80200b6:	fb0b fb05 	mul.w	fp, fp, r5
 80200ba:	fb0c fc05 	mul.w	ip, ip, r5
 80200be:	9208      	str	r2, [sp, #32]
 80200c0:	4481      	add	r9, r0
 80200c2:	4581      	cmp	r9, r0
 80200c4:	d02c      	beq.n	8020120 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 80200c6:	8802      	ldrh	r2, [r0, #0]
 80200c8:	9d04      	ldr	r5, [sp, #16]
 80200ca:	1216      	asrs	r6, r2, #8
 80200cc:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80200d0:	fb16 f605 	smulbb	r6, r6, r5
 80200d4:	9d08      	ldr	r5, [sp, #32]
 80200d6:	9f04      	ldr	r7, [sp, #16]
 80200d8:	442e      	add	r6, r5
 80200da:	10d5      	asrs	r5, r2, #3
 80200dc:	00d2      	lsls	r2, r2, #3
 80200de:	b2d2      	uxtb	r2, r2
 80200e0:	fb12 f207 	smulbb	r2, r2, r7
 80200e4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80200e8:	fb15 f507 	smulbb	r5, r5, r7
 80200ec:	b2b6      	uxth	r6, r6
 80200ee:	4462      	add	r2, ip
 80200f0:	b292      	uxth	r2, r2
 80200f2:	1c77      	adds	r7, r6, #1
 80200f4:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80200f8:	1c57      	adds	r7, r2, #1
 80200fa:	445d      	add	r5, fp
 80200fc:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 8020100:	b2ad      	uxth	r5, r5
 8020102:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020106:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 802010a:	4316      	orrs	r6, r2
 802010c:	1c6a      	adds	r2, r5, #1
 802010e:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8020112:	096d      	lsrs	r5, r5, #5
 8020114:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020118:	432e      	orrs	r6, r5
 802011a:	f820 6b02 	strh.w	r6, [r0], #2
 802011e:	e7d0      	b.n	80200c2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 8020120:	4573      	cmp	r3, lr
 8020122:	d38d      	bcc.n	8020040 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8020124:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8020128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802012a:	fa1f f188 	uxth.w	r1, r8
 802012e:	1a64      	subs	r4, r4, r1
 8020130:	881b      	ldrh	r3, [r3, #0]
 8020132:	b2a4      	uxth	r4, r4
 8020134:	2c00      	cmp	r4, #0
 8020136:	eba3 0308 	sub.w	r3, r3, r8
 802013a:	bf18      	it	ne
 802013c:	2100      	movne	r1, #0
 802013e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020142:	e77d      	b.n	8020040 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8020144:	4b03      	ldr	r3, [pc, #12]	@ (8020154 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8020146:	6818      	ldr	r0, [r3, #0]
 8020148:	6803      	ldr	r3, [r0, #0]
 802014a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802014c:	4798      	blx	r3
 802014e:	b00f      	add	sp, #60	@ 0x3c
 8020150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020154:	2005baa4 	.word	0x2005baa4
 8020158:	2005ba9e 	.word	0x2005ba9e

0802015c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802015c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020160:	b09f      	sub	sp, #124	@ 0x7c
 8020162:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 8020166:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 802016a:	461d      	mov	r5, r3
 802016c:	4604      	mov	r4, r0
 802016e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020170:	9209      	str	r2, [sp, #36]	@ 0x24
 8020172:	2a00      	cmp	r2, #0
 8020174:	f000 81e9 	beq.w	802054a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ee>
 8020178:	6828      	ldr	r0, [r5, #0]
 802017a:	6869      	ldr	r1, [r5, #4]
 802017c:	aa1a      	add	r2, sp, #104	@ 0x68
 802017e:	c203      	stmia	r2!, {r0, r1}
 8020180:	6818      	ldr	r0, [r3, #0]
 8020182:	6859      	ldr	r1, [r3, #4]
 8020184:	aa1c      	add	r2, sp, #112	@ 0x70
 8020186:	c203      	stmia	r2!, {r0, r1}
 8020188:	a81a      	add	r0, sp, #104	@ 0x68
 802018a:	f7f9 f8fb 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802018e:	4629      	mov	r1, r5
 8020190:	a81c      	add	r0, sp, #112	@ 0x70
 8020192:	f7f9 f91f 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020196:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 802019a:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 802019e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80201a2:	bfdd      	ittte	le
 80201a4:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80201a8:	b29a      	uxthle	r2, r3
 80201aa:	fb91 f2f2 	sdivle	r2, r1, r2
 80201ae:	2201      	movgt	r2, #1
 80201b0:	9202      	str	r2, [sp, #8]
 80201b2:	9802      	ldr	r0, [sp, #8]
 80201b4:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 80201b8:	9902      	ldr	r1, [sp, #8]
 80201ba:	fb92 f0f0 	sdiv	r0, r2, r0
 80201be:	b280      	uxth	r0, r0
 80201c0:	9010      	str	r0, [sp, #64]	@ 0x40
 80201c2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80201c4:	9802      	ldr	r0, [sp, #8]
 80201c6:	4488      	add	r8, r1
 80201c8:	fb05 2510 	mls	r5, r5, r0, r2
 80201cc:	fb15 f503 	smulbb	r5, r5, r3
 80201d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80201d4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80201d8:	fb98 f8f1 	sdiv	r8, r8, r1
 80201dc:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80201e0:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 80201e4:	440d      	add	r5, r1
 80201e6:	4419      	add	r1, r3
 80201e8:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 80201ec:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 80201f0:	441a      	add	r2, r3
 80201f2:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 80201f6:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 80201fa:	9304      	str	r3, [sp, #16]
 80201fc:	4b93      	ldr	r3, [pc, #588]	@ (802044c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f0>)
 80201fe:	f108 0801 	add.w	r8, r8, #1
 8020202:	6818      	ldr	r0, [r3, #0]
 8020204:	fa1f f888 	uxth.w	r8, r8
 8020208:	6803      	ldr	r3, [r0, #0]
 802020a:	b2ad      	uxth	r5, r5
 802020c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802020e:	4798      	blx	r3
 8020210:	4b8f      	ldr	r3, [pc, #572]	@ (8020450 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 8020212:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 8020216:	881a      	ldrh	r2, [r3, #0]
 8020218:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 802021c:	4356      	muls	r6, r2
 802021e:	fb02 7101 	mla	r1, r2, r1, r7
 8020222:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020226:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 802022a:	920a      	str	r2, [sp, #40]	@ 0x28
 802022c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802022e:	2d00      	cmp	r5, #0
 8020230:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8020234:	f108 0204 	add.w	r2, r8, #4
 8020238:	9211      	str	r2, [sp, #68]	@ 0x44
 802023a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802023c:	f04f 0100 	mov.w	r1, #0
 8020240:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8020244:	9215      	str	r2, [sp, #84]	@ 0x54
 8020246:	9a04      	ldr	r2, [sp, #16]
 8020248:	bf18      	it	ne
 802024a:	2200      	movne	r2, #0
 802024c:	9318      	str	r3, [sp, #96]	@ 0x60
 802024e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8020252:	b292      	uxth	r2, r2
 8020254:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020256:	4b7f      	ldr	r3, [pc, #508]	@ (8020454 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8020258:	910d      	str	r1, [sp, #52]	@ 0x34
 802025a:	1b1b      	subs	r3, r3, r4
 802025c:	9319      	str	r3, [sp, #100]	@ 0x64
 802025e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020260:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020262:	fa11 f383 	uxtah	r3, r1, r3
 8020266:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8020268:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802026c:	3304      	adds	r3, #4
 802026e:	9306      	str	r3, [sp, #24]
 8020270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020272:	4283      	cmp	r3, r0
 8020274:	f240 8164 	bls.w	8020540 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e4>
 8020278:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 802027c:	f04f 0a01 	mov.w	sl, #1
 8020280:	fbb5 f3f3 	udiv	r3, r5, r3
 8020284:	9902      	ldr	r1, [sp, #8]
 8020286:	9e06      	ldr	r6, [sp, #24]
 8020288:	1acb      	subs	r3, r1, r3
 802028a:	b29b      	uxth	r3, r3
 802028c:	9316      	str	r3, [sp, #88]	@ 0x58
 802028e:	9b06      	ldr	r3, [sp, #24]
 8020290:	7836      	ldrb	r6, [r6, #0]
 8020292:	7859      	ldrb	r1, [r3, #1]
 8020294:	789b      	ldrb	r3, [r3, #2]
 8020296:	9612      	str	r6, [sp, #72]	@ 0x48
 8020298:	021b      	lsls	r3, r3, #8
 802029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802029e:	9906      	ldr	r1, [sp, #24]
 80202a0:	3601      	adds	r6, #1
 80202a2:	78c9      	ldrb	r1, [r1, #3]
 80202a4:	9605      	str	r6, [sp, #20]
 80202a6:	430b      	orrs	r3, r1
 80202a8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80202aa:	46d3      	mov	fp, sl
 80202ac:	4419      	add	r1, r3
 80202ae:	1c4e      	adds	r6, r1, #1
 80202b0:	9603      	str	r6, [sp, #12]
 80202b2:	7849      	ldrb	r1, [r1, #1]
 80202b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80202b6:	0209      	lsls	r1, r1, #8
 80202b8:	5cf3      	ldrb	r3, [r6, r3]
 80202ba:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 80202be:	4319      	orrs	r1, r3
 80202c0:	b28b      	uxth	r3, r1
 80202c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80202c4:	2300      	movs	r3, #0
 80202c6:	4657      	mov	r7, sl
 80202c8:	9307      	str	r3, [sp, #28]
 80202ca:	469c      	mov	ip, r3
 80202cc:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80202d0:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80202d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80202d6:	2d00      	cmp	r5, #0
 80202d8:	d07e      	beq.n	80203d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 80202da:	42af      	cmp	r7, r5
 80202dc:	d26e      	bcs.n	80203bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 80202de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80202e0:	1bed      	subs	r5, r5, r7
 80202e2:	4283      	cmp	r3, r0
 80202e4:	b2ad      	uxth	r5, r5
 80202e6:	9201      	str	r2, [sp, #4]
 80202e8:	d802      	bhi.n	80202f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 80202ea:	e073      	b.n	80203d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	d15f      	bne.n	80203b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 80202f0:	9b03      	ldr	r3, [sp, #12]
 80202f2:	f1cb 0207 	rsb	r2, fp, #7
 80202f6:	785b      	ldrb	r3, [r3, #1]
 80202f8:	4093      	lsls	r3, r2
 80202fa:	005b      	lsls	r3, r3, #1
 80202fc:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8020300:	9b03      	ldr	r3, [sp, #12]
 8020302:	781b      	ldrb	r3, [r3, #0]
 8020304:	fa43 f30b 	asr.w	r3, r3, fp
 8020308:	b2db      	uxtb	r3, r3
 802030a:	4313      	orrs	r3, r2
 802030c:	f10b 0201 	add.w	r2, fp, #1
 8020310:	fa5f fb82 	uxtb.w	fp, r2
 8020314:	9a03      	ldr	r2, [sp, #12]
 8020316:	f1bb 0f08 	cmp.w	fp, #8
 802031a:	bf15      	itete	ne
 802031c:	3201      	addne	r2, #1
 802031e:	3202      	addeq	r2, #2
 8020320:	9203      	strne	r2, [sp, #12]
 8020322:	9203      	streq	r2, [sp, #12]
 8020324:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020326:	b29f      	uxth	r7, r3
 8020328:	bf08      	it	eq
 802032a:	f04f 0b00 	moveq.w	fp, #0
 802032e:	42ba      	cmp	r2, r7
 8020330:	d309      	bcc.n	8020346 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 8020332:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8020336:	2301      	movs	r3, #1
 8020338:	9a05      	ldr	r2, [sp, #20]
 802033a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 802033e:	d30e      	bcc.n	802035e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 8020340:	469a      	mov	sl, r3
 8020342:	2600      	movs	r6, #0
 8020344:	e035      	b.n	80203b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 8020346:	9b05      	ldr	r3, [sp, #20]
 8020348:	429f      	cmp	r7, r3
 802034a:	d318      	bcc.n	802037e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 802034c:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8020350:	eb04 030a 	add.w	r3, r4, sl
 8020354:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8020358:	f10a 0301 	add.w	r3, sl, #1
 802035c:	b29b      	uxth	r3, r3
 802035e:	9a05      	ldr	r2, [sp, #20]
 8020360:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8020364:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020368:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802036a:	7116      	strb	r6, [r2, #4]
 802036c:	f10a 0601 	add.w	r6, sl, #1
 8020370:	80d1      	strh	r1, [r2, #6]
 8020372:	7156      	strb	r6, [r2, #5]
 8020374:	9a05      	ldr	r2, [sp, #20]
 8020376:	3201      	adds	r2, #1
 8020378:	b292      	uxth	r2, r2
 802037a:	9205      	str	r2, [sp, #20]
 802037c:	e7e0      	b.n	8020340 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 802037e:	463a      	mov	r2, r7
 8020380:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8020384:	795b      	ldrb	r3, [r3, #5]
 8020386:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 802038a:	4426      	add	r6, r4
 802038c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 802038e:	eb01 0c06 	add.w	ip, r1, r6
 8020392:	f1bc 0f00 	cmp.w	ip, #0
 8020396:	dd07      	ble.n	80203a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 8020398:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802039c:	f892 c004 	ldrb.w	ip, [r2, #4]
 80203a0:	f806 cd01 	strb.w	ip, [r6, #-1]!
 80203a4:	88d2      	ldrh	r2, [r2, #6]
 80203a6:	e7f1      	b.n	802038c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 80203a8:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80203ac:	b29b      	uxth	r3, r3
 80203ae:	e7c3      	b.n	8020338 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 80203b0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80203b2:	970c      	str	r7, [sp, #48]	@ 0x30
 80203b4:	9a01      	ldr	r2, [sp, #4]
 80203b6:	46b4      	mov	ip, r6
 80203b8:	461f      	mov	r7, r3
 80203ba:	e78c      	b.n	80202d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 80203bc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80203c0:	1b7b      	subs	r3, r7, r5
 80203c2:	eb0c 0605 	add.w	r6, ip, r5
 80203c6:	b29b      	uxth	r3, r3
 80203c8:	9201      	str	r2, [sp, #4]
 80203ca:	b2b6      	uxth	r6, r6
 80203cc:	2500      	movs	r5, #0
 80203ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80203d0:	4282      	cmp	r2, r0
 80203d2:	d88b      	bhi.n	80202ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 80203d4:	9a01      	ldr	r2, [sp, #4]
 80203d6:	e74b      	b.n	8020270 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 80203d8:	4297      	cmp	r7, r2
 80203da:	d331      	bcc.n	8020440 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e4>
 80203dc:	1abb      	subs	r3, r7, r2
 80203de:	b29b      	uxth	r3, r3
 80203e0:	9208      	str	r2, [sp, #32]
 80203e2:	9501      	str	r5, [sp, #4]
 80203e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80203e6:	29ff      	cmp	r1, #255	@ 0xff
 80203e8:	9908      	ldr	r1, [sp, #32]
 80203ea:	eb0c 0601 	add.w	r6, ip, r1
 80203ee:	d133      	bne.n	8020458 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>
 80203f0:	f1a0 0e02 	sub.w	lr, r0, #2
 80203f4:	b2b6      	uxth	r6, r6
 80203f6:	45b4      	cmp	ip, r6
 80203f8:	f040 808a 	bne.w	8020510 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b4>
 80203fc:	9908      	ldr	r1, [sp, #32]
 80203fe:	4297      	cmp	r7, r2
 8020400:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020404:	d3e2      	bcc.n	80203cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 8020406:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020408:	9904      	ldr	r1, [sp, #16]
 802040a:	8812      	ldrh	r2, [r2, #0]
 802040c:	1a52      	subs	r2, r2, r1
 802040e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020412:	9a07      	ldr	r2, [sp, #28]
 8020414:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8020416:	3201      	adds	r2, #1
 8020418:	428a      	cmp	r2, r1
 802041a:	9207      	str	r2, [sp, #28]
 802041c:	f040 8085 	bne.w	802052a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ce>
 8020420:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8020424:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 8020428:	9b04      	ldr	r3, [sp, #16]
 802042a:	1bed      	subs	r5, r5, r7
 802042c:	b2ad      	uxth	r5, r5
 802042e:	2d00      	cmp	r5, #0
 8020430:	bf0c      	ite	eq
 8020432:	461a      	moveq	r2, r3
 8020434:	2200      	movne	r2, #0
 8020436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020438:	b292      	uxth	r2, r2
 802043a:	3301      	adds	r3, #1
 802043c:	930d      	str	r3, [sp, #52]	@ 0x34
 802043e:	e70e      	b.n	802025e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 8020440:	1bd1      	subs	r1, r2, r7
 8020442:	b28b      	uxth	r3, r1
 8020444:	9301      	str	r3, [sp, #4]
 8020446:	9708      	str	r7, [sp, #32]
 8020448:	462b      	mov	r3, r5
 802044a:	e7cb      	b.n	80203e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 802044c:	2005baa4 	.word	0x2005baa4
 8020450:	2005ba9e 	.word	0x2005ba9e
 8020454:	fffff7fb 	.word	0xfffff7fb
 8020458:	b2b6      	uxth	r6, r6
 802045a:	900b      	str	r0, [sp, #44]	@ 0x2c
 802045c:	45b4      	cmp	ip, r6
 802045e:	d0cd      	beq.n	80203fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 8020460:	f10c 0101 	add.w	r1, ip, #1
 8020464:	44a4      	add	ip, r4
 8020466:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 802046a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802046c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802046e:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8020472:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020474:	ea4f 2825 	mov.w	r8, r5, asr #8
 8020478:	f8b1 c000 	ldrh.w	ip, [r1]
 802047c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802047e:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 8020482:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8020486:	fb1e fe01 	smulbb	lr, lr, r1
 802048a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802048c:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8020490:	fb08 e801 	mla	r8, r8, r1, lr
 8020494:	ea4f 09ec 	mov.w	r9, ip, asr #3
 8020498:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802049a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 802049e:	fb19 f901 	smulbb	r9, r9, r1
 80204a2:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 80204a6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80204a8:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80204ac:	fb0e 9e01 	mla	lr, lr, r1, r9
 80204b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80204b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80204b6:	fa5f fc8c 	uxtb.w	ip, ip
 80204ba:	fb1c fc01 	smulbb	ip, ip, r1
 80204be:	00ed      	lsls	r5, r5, #3
 80204c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80204c2:	b2ed      	uxtb	r5, r5
 80204c4:	fb05 c501 	mla	r5, r5, r1, ip
 80204c8:	fa1f f888 	uxth.w	r8, r8
 80204cc:	fa1f fe8e 	uxth.w	lr, lr
 80204d0:	b2ad      	uxth	r5, r5
 80204d2:	f108 0c01 	add.w	ip, r8, #1
 80204d6:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80204da:	f10e 0901 	add.w	r9, lr, #1
 80204de:	f105 0c01 	add.w	ip, r5, #1
 80204e2:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 80204e6:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 80204ea:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80204ee:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 80204f2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80204f6:	ea4c 0808 	orr.w	r8, ip, r8
 80204fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80204fc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8020500:	ea48 0809 	orr.w	r8, r8, r9
 8020504:	f821 8b02 	strh.w	r8, [r1], #2
 8020508:	910b      	str	r1, [sp, #44]	@ 0x2c
 802050a:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 802050e:	e7a5      	b.n	802045c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 8020510:	f10c 0801 	add.w	r8, ip, #1
 8020514:	44a4      	add	ip, r4
 8020516:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 802051a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802051c:	fa1f fc88 	uxth.w	ip, r8
 8020520:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8020524:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8020528:	e765      	b.n	80203f6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 802052a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802052e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8020532:	1aad      	subs	r5, r5, r2
 8020534:	b2ad      	uxth	r5, r5
 8020536:	2d00      	cmp	r5, #0
 8020538:	bf18      	it	ne
 802053a:	2200      	movne	r2, #0
 802053c:	9201      	str	r2, [sp, #4]
 802053e:	e746      	b.n	80203ce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 8020540:	4b03      	ldr	r3, [pc, #12]	@ (8020550 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f4>)
 8020542:	6818      	ldr	r0, [r3, #0]
 8020544:	6803      	ldr	r3, [r0, #0]
 8020546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020548:	4798      	blx	r3
 802054a:	b01f      	add	sp, #124	@ 0x7c
 802054c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020550:	2005baa4 	.word	0x2005baa4

08020554 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 8020554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020558:	b093      	sub	sp, #76	@ 0x4c
 802055a:	4616      	mov	r6, r2
 802055c:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8020560:	9003      	str	r0, [sp, #12]
 8020562:	460d      	mov	r5, r1
 8020564:	9201      	str	r2, [sp, #4]
 8020566:	2a00      	cmp	r2, #0
 8020568:	f000 8304 	beq.w	8020b74 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x620>
 802056c:	6830      	ldr	r0, [r6, #0]
 802056e:	6871      	ldr	r1, [r6, #4]
 8020570:	ac0e      	add	r4, sp, #56	@ 0x38
 8020572:	c403      	stmia	r4!, {r0, r1}
 8020574:	6818      	ldr	r0, [r3, #0]
 8020576:	6859      	ldr	r1, [r3, #4]
 8020578:	ac10      	add	r4, sp, #64	@ 0x40
 802057a:	c403      	stmia	r4!, {r0, r1}
 802057c:	a80e      	add	r0, sp, #56	@ 0x38
 802057e:	f7f8 ff01 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020582:	4631      	mov	r1, r6
 8020584:	a810      	add	r0, sp, #64	@ 0x40
 8020586:	f7f8 ff25 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802058a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 802058e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8020592:	bfdd      	ittte	le
 8020594:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020598:	b293      	uxthle	r3, r2
 802059a:	fb91 f3f3 	sdivle	r3, r1, r3
 802059e:	2301      	movgt	r3, #1
 80205a0:	9304      	str	r3, [sp, #16]
 80205a2:	f105 0308 	add.w	r3, r5, #8
 80205a6:	9904      	ldr	r1, [sp, #16]
 80205a8:	9308      	str	r3, [sp, #32]
 80205aa:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80205ae:	440b      	add	r3, r1
 80205b0:	3b01      	subs	r3, #1
 80205b2:	fb93 f3f1 	sdiv	r3, r3, r1
 80205b6:	9908      	ldr	r1, [sp, #32]
 80205b8:	3b01      	subs	r3, #1
 80205ba:	b29b      	uxth	r3, r3
 80205bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80205c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80205c2:	9904      	ldr	r1, [sp, #16]
 80205c4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80205c8:	fb93 f0f1 	sdiv	r0, r3, r1
 80205cc:	b284      	uxth	r4, r0
 80205ce:	9405      	str	r4, [sp, #20]
 80205d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80205d4:	fb05 3914 	mls	r9, r5, r4, r3
 80205d8:	fb19 f902 	smulbb	r9, r9, r2
 80205dc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80205e0:	4489      	add	r9, r1
 80205e2:	fa1f f989 	uxth.w	r9, r9
 80205e6:	2d00      	cmp	r5, #0
 80205e8:	d05d      	beq.n	80206a6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 80205ea:	9808      	ldr	r0, [sp, #32]
 80205ec:	1e6a      	subs	r2, r5, #1
 80205ee:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 80205f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80205f4:	fa9a fa8a 	rev.w	sl, sl
 80205f8:	4492      	add	sl, r2
 80205fa:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80205fe:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8020602:	4411      	add	r1, r2
 8020604:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8020608:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 802060c:	4413      	add	r3, r2
 802060e:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8020612:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8020616:	f04f 0600 	mov.w	r6, #0
 802061a:	9302      	str	r3, [sp, #8]
 802061c:	4bca      	ldr	r3, [pc, #808]	@ (8020948 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 802061e:	6818      	ldr	r0, [r3, #0]
 8020620:	6803      	ldr	r3, [r0, #0]
 8020622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020624:	4798      	blx	r3
 8020626:	4bc9      	ldr	r3, [pc, #804]	@ (802094c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 8020628:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 802062c:	881b      	ldrh	r3, [r3, #0]
 802062e:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8020632:	2100      	movs	r1, #0
 8020634:	fb03 2404 	mla	r4, r3, r4, r2
 8020638:	436b      	muls	r3, r5
 802063a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802063e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020642:	930d      	str	r3, [sp, #52]	@ 0x34
 8020644:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8020648:	2280      	movs	r2, #128	@ 0x80
 802064a:	fb99 f3f3 	sdiv	r3, r9, r3
 802064e:	9306      	str	r3, [sp, #24]
 8020650:	9b01      	ldr	r3, [sp, #4]
 8020652:	43db      	mvns	r3, r3
 8020654:	b2db      	uxtb	r3, r3
 8020656:	930a      	str	r3, [sp, #40]	@ 0x28
 8020658:	9b03      	ldr	r3, [sp, #12]
 802065a:	3304      	adds	r3, #4
 802065c:	4618      	mov	r0, r3
 802065e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020660:	f00c fca8 	bl	802cfb4 <memset>
 8020664:	4bba      	ldr	r3, [pc, #744]	@ (8020950 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 8020666:	9300      	str	r3, [sp, #0]
 8020668:	2300      	movs	r3, #0
 802066a:	9307      	str	r3, [sp, #28]
 802066c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802066e:	42a3      	cmp	r3, r4
 8020670:	f240 827b 	bls.w	8020b6a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x616>
 8020674:	f04f 0e07 	mov.w	lr, #7
 8020678:	f1b9 0f00 	cmp.w	r9, #0
 802067c:	f000 8159 	beq.w	8020932 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 8020680:	f89a 5000 	ldrb.w	r5, [sl]
 8020684:	f10a 0701 	add.w	r7, sl, #1
 8020688:	b2ed      	uxtb	r5, r5
 802068a:	11aa      	asrs	r2, r5, #6
 802068c:	d10e      	bne.n	80206ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 802068e:	9b03      	ldr	r3, [sp, #12]
 8020690:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8020694:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020698:	88ae      	ldrh	r6, [r5, #4]
 802069a:	f109 39ff 	add.w	r9, r9, #4294967295
 802069e:	fa1f f989 	uxth.w	r9, r9
 80206a2:	46ba      	mov	sl, r7
 80206a4:	e7e8      	b.n	8020678 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 80206a6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80206aa:	e7a6      	b.n	80205fa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 80206ac:	2a01      	cmp	r2, #1
 80206ae:	d129      	bne.n	8020704 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 80206b0:	2103      	movs	r1, #3
 80206b2:	f3c6 0304 	ubfx	r3, r6, #0, #5
 80206b6:	f005 0203 	and.w	r2, r5, #3
 80206ba:	3b02      	subs	r3, #2
 80206bc:	4413      	add	r3, r2
 80206be:	f003 031f 	and.w	r3, r3, #31
 80206c2:	f3c5 0281 	ubfx	r2, r5, #2, #2
 80206c6:	f363 0604 	bfi	r6, r3, #0, #5
 80206ca:	3a02      	subs	r2, #2
 80206cc:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 80206d0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80206d4:	f3c5 1501 	ubfx	r5, r5, #4, #2
 80206d8:	f362 164a 	bfi	r6, r2, #5, #6
 80206dc:	3d02      	subs	r5, #2
 80206de:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 80206e2:	f005 051f 	and.w	r5, r5, #31
 80206e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80206ea:	fb11 2205 	smlabb	r2, r1, r5, r2
 80206ee:	fb1e 2303 	smlabb	r3, lr, r3, r2
 80206f2:	9a03      	ldr	r2, [sp, #12]
 80206f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80206f8:	f365 26cf 	bfi	r6, r5, #11, #5
 80206fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020700:	809e      	strh	r6, [r3, #4]
 8020702:	e7ca      	b.n	802069a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 8020704:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8020708:	2a02      	cmp	r2, #2
 802070a:	b2ab      	uxth	r3, r5
 802070c:	d136      	bne.n	802077c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 802070e:	2101      	movs	r1, #1
 8020710:	fb12 1205 	smlabb	r2, r2, r5, r1
 8020714:	4492      	add	sl, r2
 8020716:	463a      	mov	r2, r7
 8020718:	4552      	cmp	r2, sl
 802071a:	d01c      	beq.n	8020756 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 802071c:	4694      	mov	ip, r2
 802071e:	f04f 0b03 	mov.w	fp, #3
 8020722:	f81c 1b02 	ldrb.w	r1, [ip], #2
 8020726:	7852      	ldrb	r2, [r2, #1]
 8020728:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 802072c:	f3c1 1045 	ubfx	r0, r1, #5, #6
 8020730:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 8020734:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020738:	fb1b 0008 	smlabb	r0, fp, r8, r0
 802073c:	f001 021f 	and.w	r2, r1, #31
 8020740:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8020744:	9a03      	ldr	r2, [sp, #12]
 8020746:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 802074a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 802074e:	460e      	mov	r6, r1
 8020750:	8081      	strh	r1, [r0, #4]
 8020752:	4662      	mov	r2, ip
 8020754:	e7e0      	b.n	8020718 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 8020756:	4599      	cmp	r9, r3
 8020758:	d20b      	bcs.n	8020772 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 802075a:	eba5 0509 	sub.w	r5, r5, r9
 802075e:	2d00      	cmp	r5, #0
 8020760:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 8020764:	f300 8209 	bgt.w	8020b7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x626>
 8020768:	2301      	movs	r3, #1
 802076a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802076e:	9307      	str	r3, [sp, #28]
 8020770:	e00c      	b.n	802078c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8020772:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8020776:	eba9 0903 	sub.w	r9, r9, r3
 802077a:	e790      	b.n	802069e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 802077c:	4599      	cmp	r9, r3
 802077e:	d2fa      	bcs.n	8020776 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 8020780:	eba5 0509 	sub.w	r5, r5, r9
 8020784:	2d00      	cmp	r5, #0
 8020786:	dc1d      	bgt.n	80207c4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 8020788:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802078c:	f04f 0b00 	mov.w	fp, #0
 8020790:	f1b8 0f00 	cmp.w	r8, #0
 8020794:	f340 81a1 	ble.w	8020ada <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x586>
 8020798:	783b      	ldrb	r3, [r7, #0]
 802079a:	f107 0a01 	add.w	sl, r7, #1
 802079e:	b2db      	uxtb	r3, r3
 80207a0:	119a      	asrs	r2, r3, #6
 80207a2:	f040 80d7 	bne.w	8020954 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 80207a6:	9a03      	ldr	r2, [sp, #12]
 80207a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80207ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80207b0:	889e      	ldrh	r6, [r3, #4]
 80207b2:	9b01      	ldr	r3, [sp, #4]
 80207b4:	2bff      	cmp	r3, #255	@ 0xff
 80207b6:	f040 81e9 	bne.w	8020b8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x638>
 80207ba:	8026      	strh	r6, [r4, #0]
 80207bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80207c0:	3402      	adds	r4, #2
 80207c2:	e0be      	b.n	8020942 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 80207c4:	9b02      	ldr	r3, [sp, #8]
 80207c6:	9a02      	ldr	r2, [sp, #8]
 80207c8:	42ab      	cmp	r3, r5
 80207ca:	bfa8      	it	ge
 80207cc:	462b      	movge	r3, r5
 80207ce:	eba2 0803 	sub.w	r8, r2, r3
 80207d2:	9a07      	ldr	r2, [sp, #28]
 80207d4:	1aed      	subs	r5, r5, r3
 80207d6:	2a00      	cmp	r2, #0
 80207d8:	d05a      	beq.n	8020890 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 80207da:	9a01      	ldr	r2, [sp, #4]
 80207dc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80207e0:	2aff      	cmp	r2, #255	@ 0xff
 80207e2:	d049      	beq.n	8020878 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 80207e4:	f8bd e004 	ldrh.w	lr, [sp, #4]
 80207e8:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 80207ec:	42a3      	cmp	r3, r4
 80207ee:	f240 80a5 	bls.w	802093c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 80207f2:	46bc      	mov	ip, r7
 80207f4:	8820      	ldrh	r0, [r4, #0]
 80207f6:	f81c 2b02 	ldrb.w	r2, [ip], #2
 80207fa:	7879      	ldrb	r1, [r7, #1]
 80207fc:	ea4f 2a20 	mov.w	sl, r0, asr #8
 8020800:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8020804:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8020808:	b212      	sxth	r2, r2
 802080a:	fb1a fa09 	smulbb	sl, sl, r9
 802080e:	b291      	uxth	r1, r2
 8020810:	120f      	asrs	r7, r1, #8
 8020812:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020816:	fb07 a70e 	mla	r7, r7, lr, sl
 802081a:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 802081e:	00c0      	lsls	r0, r0, #3
 8020820:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8020824:	b2c0      	uxtb	r0, r0
 8020826:	fb1a fa09 	smulbb	sl, sl, r9
 802082a:	fb10 f009 	smulbb	r0, r0, r9
 802082e:	10c9      	asrs	r1, r1, #3
 8020830:	00d2      	lsls	r2, r2, #3
 8020832:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8020836:	b2d2      	uxtb	r2, r2
 8020838:	fb01 a10e 	mla	r1, r1, lr, sl
 802083c:	fb02 020e 	mla	r2, r2, lr, r0
 8020840:	b2bf      	uxth	r7, r7
 8020842:	b289      	uxth	r1, r1
 8020844:	b292      	uxth	r2, r2
 8020846:	1c78      	adds	r0, r7, #1
 8020848:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 802084c:	f101 0a01 	add.w	sl, r1, #1
 8020850:	1c50      	adds	r0, r2, #1
 8020852:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020856:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 802085a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 802085e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8020862:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020866:	4307      	orrs	r7, r0
 8020868:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802086c:	ea47 070a 	orr.w	r7, r7, sl
 8020870:	f824 7b02 	strh.w	r7, [r4], #2
 8020874:	4667      	mov	r7, ip
 8020876:	e7b9      	b.n	80207ec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 8020878:	42a3      	cmp	r3, r4
 802087a:	d95f      	bls.n	802093c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 802087c:	463a      	mov	r2, r7
 802087e:	f812 1b02 	ldrb.w	r1, [r2], #2
 8020882:	7878      	ldrb	r0, [r7, #1]
 8020884:	4617      	mov	r7, r2
 8020886:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 802088a:	f824 1b02 	strh.w	r1, [r4], #2
 802088e:	e7f3      	b.n	8020878 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8020890:	9901      	ldr	r1, [sp, #4]
 8020892:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020896:	29ff      	cmp	r1, #255	@ 0xff
 8020898:	b2b2      	uxth	r2, r6
 802089a:	d044      	beq.n	8020926 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 802089c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80208a0:	ea4f 2922 	mov.w	r9, r2, asr #8
 80208a4:	4608      	mov	r0, r1
 80208a6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80208aa:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 80208ae:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80208b2:	fb09 f901 	mul.w	r9, r9, r1
 80208b6:	fb0e fe01 	mul.w	lr, lr, r1
 80208ba:	00d1      	lsls	r1, r2, #3
 80208bc:	b2c9      	uxtb	r1, r1
 80208be:	4341      	muls	r1, r0
 80208c0:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 80208c4:	429c      	cmp	r4, r3
 80208c6:	f4bf af61 	bcs.w	802078c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 80208ca:	8822      	ldrh	r2, [r4, #0]
 80208cc:	1210      	asrs	r0, r2, #8
 80208ce:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80208d2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80208d6:	00d2      	lsls	r2, r2, #3
 80208d8:	fb00 900a 	mla	r0, r0, sl, r9
 80208dc:	b2d2      	uxtb	r2, r2
 80208de:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80208e2:	fb02 120a 	mla	r2, r2, sl, r1
 80208e6:	fb0c ec0a 	mla	ip, ip, sl, lr
 80208ea:	b280      	uxth	r0, r0
 80208ec:	b292      	uxth	r2, r2
 80208ee:	f100 0b01 	add.w	fp, r0, #1
 80208f2:	fa1f fc8c 	uxth.w	ip, ip
 80208f6:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80208fa:	1c50      	adds	r0, r2, #1
 80208fc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020900:	f10c 0201 	add.w	r2, ip, #1
 8020904:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020908:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 802090c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8020910:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020914:	ea40 0b0b 	orr.w	fp, r0, fp
 8020918:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802091c:	ea4b 0b0c 	orr.w	fp, fp, ip
 8020920:	f824 bb02 	strh.w	fp, [r4], #2
 8020924:	e7ce      	b.n	80208c4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 8020926:	429c      	cmp	r4, r3
 8020928:	f4bf af30 	bcs.w	802078c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 802092c:	f824 2b02 	strh.w	r2, [r4], #2
 8020930:	e7f9      	b.n	8020926 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8020932:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8020936:	4657      	mov	r7, sl
 8020938:	464d      	mov	r5, r9
 802093a:	e727      	b.n	802078c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 802093c:	2300      	movs	r3, #0
 802093e:	e716      	b.n	802076e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 8020940:	44bb      	add	fp, r7
 8020942:	4657      	mov	r7, sl
 8020944:	e724      	b.n	8020790 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 8020946:	bf00      	nop
 8020948:	2005baa4 	.word	0x2005baa4
 802094c:	2005ba9e 	.word	0x2005ba9e
 8020950:	20045700 	.word	0x20045700
 8020954:	2a01      	cmp	r2, #1
 8020956:	d12a      	bne.n	80209ae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 8020958:	f3c6 0104 	ubfx	r1, r6, #0, #5
 802095c:	f003 0203 	and.w	r2, r3, #3
 8020960:	3902      	subs	r1, #2
 8020962:	4411      	add	r1, r2
 8020964:	f001 011f 	and.w	r1, r1, #31
 8020968:	f3c3 0081 	ubfx	r0, r3, #2, #2
 802096c:	f361 0604 	bfi	r6, r1, #0, #5
 8020970:	3802      	subs	r0, #2
 8020972:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 8020976:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 802097a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 802097e:	f360 164a 	bfi	r6, r0, #5, #6
 8020982:	3b02      	subs	r3, #2
 8020984:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 8020988:	f002 031f 	and.w	r3, r2, #31
 802098c:	2203      	movs	r2, #3
 802098e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020992:	f363 26cf 	bfi	r6, r3, #11, #5
 8020996:	fb12 0303 	smlabb	r3, r2, r3, r0
 802099a:	2207      	movs	r2, #7
 802099c:	fb12 3301 	smlabb	r3, r2, r1, r3
 80209a0:	9a03      	ldr	r2, [sp, #12]
 80209a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80209a6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80209aa:	809e      	strh	r6, [r3, #4]
 80209ac:	e701      	b.n	80207b2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 80209ae:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 80209b2:	45a8      	cmp	r8, r5
 80209b4:	4647      	mov	r7, r8
 80209b6:	bfa8      	it	ge
 80209b8:	462f      	movge	r7, r5
 80209ba:	2a02      	cmp	r2, #2
 80209bc:	d154      	bne.n	8020a68 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 80209be:	9b01      	ldr	r3, [sp, #4]
 80209c0:	2bff      	cmp	r3, #255	@ 0xff
 80209c2:	d01a      	beq.n	80209fa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 80209c4:	eb0b 0307 	add.w	r3, fp, r7
 80209c8:	2b40      	cmp	r3, #64	@ 0x40
 80209ca:	dd16      	ble.n	80209fa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 80209cc:	ea4f 094b 	mov.w	r9, fp, lsl #1
 80209d0:	4649      	mov	r1, r9
 80209d2:	9800      	ldr	r0, [sp, #0]
 80209d4:	f7f1 fe04 	bl	80125e0 <_ZN8touchgfx5paint9flushLineEPmi>
 80209d8:	465a      	mov	r2, fp
 80209da:	9b01      	ldr	r3, [sp, #4]
 80209dc:	4620      	mov	r0, r4
 80209de:	9900      	ldr	r1, [sp, #0]
 80209e0:	f7f1 fe5c 	bl	801269c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 80209e4:	9b00      	ldr	r3, [sp, #0]
 80209e6:	f04f 0b00 	mov.w	fp, #0
 80209ea:	461a      	mov	r2, r3
 80209ec:	4b6b      	ldr	r3, [pc, #428]	@ (8020b9c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 80209ee:	444c      	add	r4, r9
 80209f0:	429a      	cmp	r2, r3
 80209f2:	bf0c      	ite	eq
 80209f4:	4b6a      	ldreq	r3, [pc, #424]	@ (8020ba0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 80209f6:	4b69      	ldrne	r3, [pc, #420]	@ (8020b9c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 80209f8:	9300      	str	r3, [sp, #0]
 80209fa:	4652      	mov	r2, sl
 80209fc:	2100      	movs	r1, #0
 80209fe:	42a9      	cmp	r1, r5
 8020a00:	da2c      	bge.n	8020a5c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 8020a02:	4694      	mov	ip, r2
 8020a04:	f04f 0903 	mov.w	r9, #3
 8020a08:	f81c 3b02 	ldrb.w	r3, [ip], #2
 8020a0c:	7852      	ldrb	r2, [r2, #1]
 8020a0e:	42b9      	cmp	r1, r7
 8020a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8020a14:	f3c3 1045 	ubfx	r0, r3, #5, #6
 8020a18:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 8020a1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020a20:	fb19 000e 	smlabb	r0, r9, lr, r0
 8020a24:	f04f 0e07 	mov.w	lr, #7
 8020a28:	f003 021f 	and.w	r2, r3, #31
 8020a2c:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8020a30:	9a03      	ldr	r2, [sp, #12]
 8020a32:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8020a36:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020a3a:	461e      	mov	r6, r3
 8020a3c:	8083      	strh	r3, [r0, #4]
 8020a3e:	da0a      	bge.n	8020a56 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 8020a40:	9a01      	ldr	r2, [sp, #4]
 8020a42:	2aff      	cmp	r2, #255	@ 0xff
 8020a44:	bf15      	itete	ne
 8020a46:	9a00      	ldrne	r2, [sp, #0]
 8020a48:	8023      	strheq	r3, [r4, #0]
 8020a4a:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 8020a4e:	3402      	addeq	r4, #2
 8020a50:	bf18      	it	ne
 8020a52:	f10b 0b01 	addne.w	fp, fp, #1
 8020a56:	3101      	adds	r1, #1
 8020a58:	4662      	mov	r2, ip
 8020a5a:	e7d0      	b.n	80209fe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 8020a5c:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8020a60:	eba8 0807 	sub.w	r8, r8, r7
 8020a64:	1bed      	subs	r5, r5, r7
 8020a66:	e76c      	b.n	8020942 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8020a68:	9b01      	ldr	r3, [sp, #4]
 8020a6a:	eba8 0807 	sub.w	r8, r8, r7
 8020a6e:	2bff      	cmp	r3, #255	@ 0xff
 8020a70:	eba5 0507 	sub.w	r5, r5, r7
 8020a74:	fa1f f986 	uxth.w	r9, r6
 8020a78:	d027      	beq.n	8020aca <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x576>
 8020a7a:	eb0b 0307 	add.w	r3, fp, r7
 8020a7e:	2b40      	cmp	r3, #64	@ 0x40
 8020a80:	dd18      	ble.n	8020ab4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x560>
 8020a82:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8020a86:	4619      	mov	r1, r3
 8020a88:	9800      	ldr	r0, [sp, #0]
 8020a8a:	930c      	str	r3, [sp, #48]	@ 0x30
 8020a8c:	f7f1 fda8 	bl	80125e0 <_ZN8touchgfx5paint9flushLineEPmi>
 8020a90:	465a      	mov	r2, fp
 8020a92:	9b01      	ldr	r3, [sp, #4]
 8020a94:	4620      	mov	r0, r4
 8020a96:	9900      	ldr	r1, [sp, #0]
 8020a98:	f7f1 fe00 	bl	801269c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8020a9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020a9e:	f04f 0b00 	mov.w	fp, #0
 8020aa2:	441c      	add	r4, r3
 8020aa4:	9b00      	ldr	r3, [sp, #0]
 8020aa6:	461a      	mov	r2, r3
 8020aa8:	4b3c      	ldr	r3, [pc, #240]	@ (8020b9c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020aaa:	429a      	cmp	r2, r3
 8020aac:	bf0c      	ite	eq
 8020aae:	4b3c      	ldreq	r3, [pc, #240]	@ (8020ba0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8020ab0:	4b3a      	ldrne	r3, [pc, #232]	@ (8020b9c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020ab2:	9300      	str	r3, [sp, #0]
 8020ab4:	9b00      	ldr	r3, [sp, #0]
 8020ab6:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 8020aba:	463b      	mov	r3, r7
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	f43f af3f 	beq.w	8020940 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 8020ac2:	f822 9b02 	strh.w	r9, [r2], #2
 8020ac6:	3b01      	subs	r3, #1
 8020ac8:	e7f8      	b.n	8020abc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x568>
 8020aca:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8020ace:	42a7      	cmp	r7, r4
 8020ad0:	f67f af37 	bls.w	8020942 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8020ad4:	f824 9b02 	strh.w	r9, [r4], #2
 8020ad8:	e7f9      	b.n	8020ace <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x57a>
 8020ada:	f1bb 0f00 	cmp.w	fp, #0
 8020ade:	d00c      	beq.n	8020afa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a6>
 8020ae0:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8020ae4:	4641      	mov	r1, r8
 8020ae6:	9800      	ldr	r0, [sp, #0]
 8020ae8:	f7f1 fd7a 	bl	80125e0 <_ZN8touchgfx5paint9flushLineEPmi>
 8020aec:	4620      	mov	r0, r4
 8020aee:	9b01      	ldr	r3, [sp, #4]
 8020af0:	465a      	mov	r2, fp
 8020af2:	9900      	ldr	r1, [sp, #0]
 8020af4:	f7f1 fdd2 	bl	801269c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8020af8:	4444      	add	r4, r8
 8020afa:	4b2a      	ldr	r3, [pc, #168]	@ (8020ba4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 8020afc:	9a02      	ldr	r2, [sp, #8]
 8020afe:	881b      	ldrh	r3, [r3, #0]
 8020b00:	1a9b      	subs	r3, r3, r2
 8020b02:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020b06:	9b06      	ldr	r3, [sp, #24]
 8020b08:	3301      	adds	r3, #1
 8020b0a:	9306      	str	r3, [sp, #24]
 8020b0c:	9a06      	ldr	r2, [sp, #24]
 8020b0e:	9b04      	ldr	r3, [sp, #16]
 8020b10:	4293      	cmp	r3, r2
 8020b12:	d120      	bne.n	8020b56 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x602>
 8020b14:	9b05      	ldr	r3, [sp, #20]
 8020b16:	9a05      	ldr	r2, [sp, #20]
 8020b18:	f103 0801 	add.w	r8, r3, #1
 8020b1c:	9b08      	ldr	r3, [sp, #32]
 8020b1e:	2100      	movs	r1, #0
 8020b20:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8020b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b26:	ba3f      	rev	r7, r7
 8020b28:	2280      	movs	r2, #128	@ 0x80
 8020b2a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020b2c:	441f      	add	r7, r3
 8020b2e:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 8020b32:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8020b36:	f00c fa3d 	bl	802cfb4 <memset>
 8020b3a:	2300      	movs	r3, #0
 8020b3c:	f04f 0600 	mov.w	r6, #0
 8020b40:	eba9 0905 	sub.w	r9, r9, r5
 8020b44:	fa1f f989 	uxth.w	r9, r9
 8020b48:	f8cd 8014 	str.w	r8, [sp, #20]
 8020b4c:	9306      	str	r3, [sp, #24]
 8020b4e:	f7f1 fd2f 	bl	80125b0 <_ZN8touchgfx5paint8tearDownEv>
 8020b52:	46ba      	mov	sl, r7
 8020b54:	e58a      	b.n	802066c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 8020b56:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8020b5a:	9b02      	ldr	r3, [sp, #8]
 8020b5c:	eba9 0903 	sub.w	r9, r9, r3
 8020b60:	eba9 0505 	sub.w	r5, r9, r5
 8020b64:	fa1f f985 	uxth.w	r9, r5
 8020b68:	e7f1      	b.n	8020b4e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5fa>
 8020b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8020ba8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x654>)
 8020b6c:	6818      	ldr	r0, [r3, #0]
 8020b6e:	6803      	ldr	r3, [r0, #0]
 8020b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020b72:	4798      	blx	r3
 8020b74:	b013      	add	sp, #76	@ 0x4c
 8020b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b7a:	9b02      	ldr	r3, [sp, #8]
 8020b7c:	9a02      	ldr	r2, [sp, #8]
 8020b7e:	42ab      	cmp	r3, r5
 8020b80:	bfa8      	it	ge
 8020b82:	462b      	movge	r3, r5
 8020b84:	eba2 0803 	sub.w	r8, r2, r3
 8020b88:	1aed      	subs	r5, r5, r3
 8020b8a:	e626      	b.n	80207da <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 8020b8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8020b90:	fa1f f986 	uxth.w	r9, r6
 8020b94:	2500      	movs	r5, #0
 8020b96:	2701      	movs	r7, #1
 8020b98:	e76f      	b.n	8020a7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x526>
 8020b9a:	bf00      	nop
 8020b9c:	20045700 	.word	0x20045700
 8020ba0:	20045800 	.word	0x20045800
 8020ba4:	2005ba9e 	.word	0x2005ba9e
 8020ba8:	2005baa4 	.word	0x2005baa4

08020bac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bb0:	b08f      	sub	sp, #60	@ 0x3c
 8020bb2:	9203      	str	r2, [sp, #12]
 8020bb4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020bb8:	461c      	mov	r4, r3
 8020bba:	460f      	mov	r7, r1
 8020bbc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020bbe:	9202      	str	r2, [sp, #8]
 8020bc0:	2a00      	cmp	r2, #0
 8020bc2:	f000 812a 	beq.w	8020e1a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26e>
 8020bc6:	6820      	ldr	r0, [r4, #0]
 8020bc8:	6861      	ldr	r1, [r4, #4]
 8020bca:	aa0a      	add	r2, sp, #40	@ 0x28
 8020bcc:	c203      	stmia	r2!, {r0, r1}
 8020bce:	6818      	ldr	r0, [r3, #0]
 8020bd0:	6859      	ldr	r1, [r3, #4]
 8020bd2:	aa0c      	add	r2, sp, #48	@ 0x30
 8020bd4:	c203      	stmia	r2!, {r0, r1}
 8020bd6:	a80a      	add	r0, sp, #40	@ 0x28
 8020bd8:	f7f8 fbd4 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020bdc:	4621      	mov	r1, r4
 8020bde:	a80c      	add	r0, sp, #48	@ 0x30
 8020be0:	f7f8 fbf8 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020be4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8020be8:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8020bec:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020bf0:	bfdd      	ittte	le
 8020bf2:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020bf6:	b2b3      	uxthle	r3, r6
 8020bf8:	fb92 f3f3 	sdivle	r3, r2, r3
 8020bfc:	2301      	movgt	r3, #1
 8020bfe:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020c02:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8020c06:	fb92 f1f3 	sdiv	r1, r2, r3
 8020c0a:	fa1f fc81 	uxth.w	ip, r1
 8020c0e:	4661      	mov	r1, ip
 8020c10:	fb0c 2413 	mls	r4, ip, r3, r2
 8020c14:	fb14 f406 	smulbb	r4, r4, r6
 8020c18:	441d      	add	r5, r3
 8020c1a:	3d01      	subs	r5, #1
 8020c1c:	4404      	add	r4, r0
 8020c1e:	fb95 f5f3 	sdiv	r5, r5, r3
 8020c22:	b2a4      	uxth	r4, r4
 8020c24:	b121      	cbz	r1, 8020c30 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 8020c26:	9b03      	ldr	r3, [sp, #12]
 8020c28:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020c2c:	ba1b      	rev	r3, r3
 8020c2e:	441f      	add	r7, r3
 8020c30:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020c34:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8020c38:	4418      	add	r0, r3
 8020c3a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020c3e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8020c42:	441a      	add	r2, r3
 8020c44:	4b76      	ldr	r3, [pc, #472]	@ (8020e20 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8020c46:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8020c4a:	6818      	ldr	r0, [r3, #0]
 8020c4c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8020c50:	6803      	ldr	r3, [r0, #0]
 8020c52:	b2ad      	uxth	r5, r5
 8020c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020c56:	4798      	blx	r3
 8020c58:	4a72      	ldr	r2, [pc, #456]	@ (8020e24 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x278>)
 8020c5a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8020c5e:	8813      	ldrh	r3, [r2, #0]
 8020c60:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8020c64:	00ad      	lsls	r5, r5, #2
 8020c66:	fb03 c101 	mla	r1, r3, r1, ip
 8020c6a:	4373      	muls	r3, r6
 8020c6c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020c70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020c74:	2c00      	cmp	r4, #0
 8020c76:	9304      	str	r3, [sp, #16]
 8020c78:	f105 0304 	add.w	r3, r5, #4
 8020c7c:	9305      	str	r3, [sp, #20]
 8020c7e:	bf0c      	ite	eq
 8020c80:	46c8      	moveq	r8, r9
 8020c82:	f04f 0800 	movne.w	r8, #0
 8020c86:	2300      	movs	r3, #0
 8020c88:	fa1f f888 	uxth.w	r8, r8
 8020c8c:	9301      	str	r3, [sp, #4]
 8020c8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8020c90:	9a04      	ldr	r2, [sp, #16]
 8020c92:	4282      	cmp	r2, r0
 8020c94:	f240 80bc 	bls.w	8020e10 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x264>
 8020c98:	b95b      	cbnz	r3, 8020cb2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x106>
 8020c9a:	783a      	ldrb	r2, [r7, #0]
 8020c9c:	0993      	lsrs	r3, r2, #6
 8020c9e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020ca2:	9201      	str	r2, [sp, #4]
 8020ca4:	1e5a      	subs	r2, r3, #1
 8020ca6:	2a02      	cmp	r2, #2
 8020ca8:	bf8d      	iteet	hi
 8020caa:	787b      	ldrbhi	r3, [r7, #1]
 8020cac:	3701      	addls	r7, #1
 8020cae:	b29b      	uxthls	r3, r3
 8020cb0:	3702      	addhi	r7, #2
 8020cb2:	b184      	cbz	r4, 8020cd6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8020cb4:	429c      	cmp	r4, r3
 8020cb6:	bf99      	ittee	ls
 8020cb8:	1b1c      	subls	r4, r3, r4
 8020cba:	fa1f fa84 	uxthls.w	sl, r4
 8020cbe:	46c4      	movhi	ip, r8
 8020cc0:	f04f 0a00 	movhi.w	sl, #0
 8020cc4:	bf93      	iteet	ls
 8020cc6:	2400      	movls	r4, #0
 8020cc8:	1ae4      	subhi	r4, r4, r3
 8020cca:	b2a4      	uxthhi	r4, r4
 8020ccc:	fa1f fc89 	uxthls.w	ip, r9
 8020cd0:	4653      	mov	r3, sl
 8020cd2:	46e0      	mov	r8, ip
 8020cd4:	e7dc      	b.n	8020c90 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe4>
 8020cd6:	2204      	movs	r2, #4
 8020cd8:	4615      	mov	r5, r2
 8020cda:	4543      	cmp	r3, r8
 8020cdc:	bf2c      	ite	cs
 8020cde:	46c6      	movcs	lr, r8
 8020ce0:	469e      	movcc	lr, r3
 8020ce2:	9905      	ldr	r1, [sp, #20]
 8020ce4:	9a01      	ldr	r2, [sp, #4]
 8020ce6:	bf28      	it	cs
 8020ce8:	eba3 0a08 	subcs.w	sl, r3, r8
 8020cec:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020cf0:	9903      	ldr	r1, [sp, #12]
 8020cf2:	bf38      	it	cc
 8020cf4:	eba8 0c03 	subcc.w	ip, r8, r3
 8020cf8:	588a      	ldr	r2, [r1, r2]
 8020cfa:	bf28      	it	cs
 8020cfc:	fa1f fa8a 	uxthcs.w	sl, sl
 8020d00:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8020d04:	bf2e      	itee	cs
 8020d06:	46a4      	movcs	ip, r4
 8020d08:	fa1f fc8c 	uxthcc.w	ip, ip
 8020d0c:	46a2      	movcc	sl, r4
 8020d0e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8020d12:	2900      	cmp	r1, #0
 8020d14:	d066      	beq.n	8020de4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8020d16:	29ff      	cmp	r1, #255	@ 0xff
 8020d18:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8020d1c:	d114      	bne.n	8020d48 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8020d1e:	9d02      	ldr	r5, [sp, #8]
 8020d20:	2dff      	cmp	r5, #255	@ 0xff
 8020d22:	d111      	bne.n	8020d48 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8020d24:	0951      	lsrs	r1, r2, #5
 8020d26:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8020d2a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020d2e:	f026 0607 	bic.w	r6, r6, #7
 8020d32:	430e      	orrs	r6, r1
 8020d34:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020d38:	4316      	orrs	r6, r2
 8020d3a:	b2b6      	uxth	r6, r6
 8020d3c:	4486      	add	lr, r0
 8020d3e:	4586      	cmp	lr, r0
 8020d40:	d051      	beq.n	8020de6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8020d42:	f820 6b02 	strh.w	r6, [r0], #2
 8020d46:	e7fa      	b.n	8020d3e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x192>
 8020d48:	9d02      	ldr	r5, [sp, #8]
 8020d4a:	b2f6      	uxtb	r6, r6
 8020d4c:	4369      	muls	r1, r5
 8020d4e:	1c4d      	adds	r5, r1, #1
 8020d50:	eb05 2521 	add.w	r5, r5, r1, asr #8
 8020d54:	122d      	asrs	r5, r5, #8
 8020d56:	ea6f 0b05 	mvn.w	fp, r5
 8020d5a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8020d5e:	b2ad      	uxth	r5, r5
 8020d60:	b2d2      	uxtb	r2, r2
 8020d62:	fb11 f105 	smulbb	r1, r1, r5
 8020d66:	fb16 f605 	smulbb	r6, r6, r5
 8020d6a:	fb12 f205 	smulbb	r2, r2, r5
 8020d6e:	b289      	uxth	r1, r1
 8020d70:	b2b6      	uxth	r6, r6
 8020d72:	b292      	uxth	r2, r2
 8020d74:	9106      	str	r1, [sp, #24]
 8020d76:	9607      	str	r6, [sp, #28]
 8020d78:	9208      	str	r2, [sp, #32]
 8020d7a:	4486      	add	lr, r0
 8020d7c:	fa5f fb8b 	uxtb.w	fp, fp
 8020d80:	4586      	cmp	lr, r0
 8020d82:	d030      	beq.n	8020de6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8020d84:	8802      	ldrh	r2, [r0, #0]
 8020d86:	9906      	ldr	r1, [sp, #24]
 8020d88:	1216      	asrs	r6, r2, #8
 8020d8a:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8020d8e:	10d5      	asrs	r5, r2, #3
 8020d90:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020d94:	fb06 160b 	mla	r6, r6, fp, r1
 8020d98:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020d9c:	9907      	ldr	r1, [sp, #28]
 8020d9e:	00d2      	lsls	r2, r2, #3
 8020da0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020da4:	fb05 150b 	mla	r5, r5, fp, r1
 8020da8:	b2d2      	uxtb	r2, r2
 8020daa:	9908      	ldr	r1, [sp, #32]
 8020dac:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020db0:	fb02 120b 	mla	r2, r2, fp, r1
 8020db4:	b2b6      	uxth	r6, r6
 8020db6:	b292      	uxth	r2, r2
 8020db8:	1c71      	adds	r1, r6, #1
 8020dba:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8020dbe:	1c51      	adds	r1, r2, #1
 8020dc0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020dc4:	b2ad      	uxth	r5, r5
 8020dc6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020dca:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8020dce:	4316      	orrs	r6, r2
 8020dd0:	1c6a      	adds	r2, r5, #1
 8020dd2:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8020dd6:	096d      	lsrs	r5, r5, #5
 8020dd8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020ddc:	432e      	orrs	r6, r5
 8020dde:	f820 6b02 	strh.w	r6, [r0], #2
 8020de2:	e7cd      	b.n	8020d80 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d4>
 8020de4:	4470      	add	r0, lr
 8020de6:	4543      	cmp	r3, r8
 8020de8:	f4ff af72 	bcc.w	8020cd0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8020dec:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8020df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020df2:	fa1f fc89 	uxth.w	ip, r9
 8020df6:	eba4 040c 	sub.w	r4, r4, ip
 8020dfa:	881b      	ldrh	r3, [r3, #0]
 8020dfc:	b2a4      	uxth	r4, r4
 8020dfe:	2c00      	cmp	r4, #0
 8020e00:	eba3 0309 	sub.w	r3, r3, r9
 8020e04:	bf18      	it	ne
 8020e06:	f04f 0c00 	movne.w	ip, #0
 8020e0a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020e0e:	e75f      	b.n	8020cd0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8020e10:	4b03      	ldr	r3, [pc, #12]	@ (8020e20 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8020e12:	6818      	ldr	r0, [r3, #0]
 8020e14:	6803      	ldr	r3, [r0, #0]
 8020e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020e18:	4798      	blx	r3
 8020e1a:	b00f      	add	sp, #60	@ 0x3c
 8020e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e20:	2005baa4 	.word	0x2005baa4
 8020e24:	2005ba9e 	.word	0x2005ba9e

08020e28 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8020e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e2c:	b093      	sub	sp, #76	@ 0x4c
 8020e2e:	9205      	str	r2, [sp, #20]
 8020e30:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8020e34:	461c      	mov	r4, r3
 8020e36:	9101      	str	r1, [sp, #4]
 8020e38:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020e3a:	9202      	str	r2, [sp, #8]
 8020e3c:	2a00      	cmp	r2, #0
 8020e3e:	f000 812d 	beq.w	802109c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8020e42:	6820      	ldr	r0, [r4, #0]
 8020e44:	6861      	ldr	r1, [r4, #4]
 8020e46:	aa0e      	add	r2, sp, #56	@ 0x38
 8020e48:	c203      	stmia	r2!, {r0, r1}
 8020e4a:	6818      	ldr	r0, [r3, #0]
 8020e4c:	6859      	ldr	r1, [r3, #4]
 8020e4e:	aa10      	add	r2, sp, #64	@ 0x40
 8020e50:	c203      	stmia	r2!, {r0, r1}
 8020e52:	a80e      	add	r0, sp, #56	@ 0x38
 8020e54:	f7f8 fa96 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e58:	4621      	mov	r1, r4
 8020e5a:	a810      	add	r0, sp, #64	@ 0x40
 8020e5c:	f7f8 faba 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e60:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8020e64:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8020e68:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020e6c:	bfdd      	ittte	le
 8020e6e:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020e72:	b2b3      	uxthle	r3, r6
 8020e74:	fb92 f3f3 	sdivle	r3, r2, r3
 8020e78:	2301      	movgt	r3, #1
 8020e7a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8020e7e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8020e82:	fb92 f1f3 	sdiv	r1, r2, r3
 8020e86:	fa1f fc81 	uxth.w	ip, r1
 8020e8a:	4661      	mov	r1, ip
 8020e8c:	fb0c 2413 	mls	r4, ip, r3, r2
 8020e90:	fb14 f406 	smulbb	r4, r4, r6
 8020e94:	441d      	add	r5, r3
 8020e96:	3d01      	subs	r5, #1
 8020e98:	4404      	add	r4, r0
 8020e9a:	fb95 f5f3 	sdiv	r5, r5, r3
 8020e9e:	b2a4      	uxth	r4, r4
 8020ea0:	b131      	cbz	r1, 8020eb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 8020ea2:	9b05      	ldr	r3, [sp, #20]
 8020ea4:	9901      	ldr	r1, [sp, #4]
 8020ea6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020eaa:	ba1b      	rev	r3, r3
 8020eac:	4419      	add	r1, r3
 8020eae:	9101      	str	r1, [sp, #4]
 8020eb0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8020eb4:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8020eb8:	4418      	add	r0, r3
 8020eba:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8020ebe:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8020ec2:	441a      	add	r2, r3
 8020ec4:	4b77      	ldr	r3, [pc, #476]	@ (80210a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8020ec6:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 8020eca:	6818      	ldr	r0, [r3, #0]
 8020ecc:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 8020ed0:	6803      	ldr	r3, [r0, #0]
 8020ed2:	b2ad      	uxth	r5, r5
 8020ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020ed6:	4798      	blx	r3
 8020ed8:	4973      	ldr	r1, [pc, #460]	@ (80210a8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 8020eda:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 8020ede:	880b      	ldrh	r3, [r1, #0]
 8020ee0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8020ee4:	00ad      	lsls	r5, r5, #2
 8020ee6:	fb03 c202 	mla	r2, r3, r2, ip
 8020eea:	4373      	muls	r3, r6
 8020eec:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020ef0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020ef4:	9308      	str	r3, [sp, #32]
 8020ef6:	1d2b      	adds	r3, r5, #4
 8020ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8020efa:	9b02      	ldr	r3, [sp, #8]
 8020efc:	2c00      	cmp	r4, #0
 8020efe:	ea6f 0203 	mvn.w	r2, r3
 8020f02:	bf0c      	ite	eq
 8020f04:	46dc      	moveq	ip, fp
 8020f06:	f04f 0c00 	movne.w	ip, #0
 8020f0a:	2300      	movs	r3, #0
 8020f0c:	910d      	str	r1, [sp, #52]	@ 0x34
 8020f0e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020f12:	b2d2      	uxtb	r2, r2
 8020f14:	fa1f fc8c 	uxth.w	ip, ip
 8020f18:	9303      	str	r3, [sp, #12]
 8020f1a:	9106      	str	r1, [sp, #24]
 8020f1c:	9207      	str	r2, [sp, #28]
 8020f1e:	9a08      	ldr	r2, [sp, #32]
 8020f20:	4282      	cmp	r2, r0
 8020f22:	f240 80b6 	bls.w	8021092 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8020f26:	b963      	cbnz	r3, 8020f42 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8020f28:	9b01      	ldr	r3, [sp, #4]
 8020f2a:	781a      	ldrb	r2, [r3, #0]
 8020f2c:	0993      	lsrs	r3, r2, #6
 8020f2e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020f32:	9203      	str	r2, [sp, #12]
 8020f34:	1e5a      	subs	r2, r3, #1
 8020f36:	2a02      	cmp	r2, #2
 8020f38:	d815      	bhi.n	8020f66 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 8020f3a:	9a01      	ldr	r2, [sp, #4]
 8020f3c:	b29b      	uxth	r3, r3
 8020f3e:	3201      	adds	r2, #1
 8020f40:	9201      	str	r2, [sp, #4]
 8020f42:	b1b4      	cbz	r4, 8020f72 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 8020f44:	429c      	cmp	r4, r3
 8020f46:	bf99      	ittee	ls
 8020f48:	1b1c      	subls	r4, r3, r4
 8020f4a:	fa1f f884 	uxthls.w	r8, r4
 8020f4e:	4666      	movhi	r6, ip
 8020f50:	f04f 0800 	movhi.w	r8, #0
 8020f54:	bf93      	iteet	ls
 8020f56:	2400      	movls	r4, #0
 8020f58:	1ae4      	subhi	r4, r4, r3
 8020f5a:	b2a4      	uxthhi	r4, r4
 8020f5c:	fa1f f68b 	uxthls.w	r6, fp
 8020f60:	4643      	mov	r3, r8
 8020f62:	46b4      	mov	ip, r6
 8020f64:	e7db      	b.n	8020f1e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8020f66:	9a01      	ldr	r2, [sp, #4]
 8020f68:	9b01      	ldr	r3, [sp, #4]
 8020f6a:	3202      	adds	r2, #2
 8020f6c:	785b      	ldrb	r3, [r3, #1]
 8020f6e:	9201      	str	r2, [sp, #4]
 8020f70:	e7e7      	b.n	8020f42 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8020f72:	2203      	movs	r2, #3
 8020f74:	4615      	mov	r5, r2
 8020f76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020f78:	9a03      	ldr	r2, [sp, #12]
 8020f7a:	4563      	cmp	r3, ip
 8020f7c:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020f80:	9905      	ldr	r1, [sp, #20]
 8020f82:	bf28      	it	cs
 8020f84:	eba3 080c 	subcs.w	r8, r3, ip
 8020f88:	eb01 0502 	add.w	r5, r1, r2
 8020f8c:	9902      	ldr	r1, [sp, #8]
 8020f8e:	bf31      	iteee	cc
 8020f90:	ebac 0603 	subcc.w	r6, ip, r3
 8020f94:	fa1f f888 	uxthcs.w	r8, r8
 8020f98:	46e1      	movcs	r9, ip
 8020f9a:	4626      	movcs	r6, r4
 8020f9c:	bf3e      	ittt	cc
 8020f9e:	b2b6      	uxthcc	r6, r6
 8020fa0:	4699      	movcc	r9, r3
 8020fa2:	46a0      	movcc	r8, r4
 8020fa4:	29ff      	cmp	r1, #255	@ 0xff
 8020fa6:	d04a      	beq.n	802103e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x216>
 8020fa8:	46ca      	mov	sl, r9
 8020faa:	9f06      	ldr	r7, [sp, #24]
 8020fac:	78a9      	ldrb	r1, [r5, #2]
 8020fae:	9004      	str	r0, [sp, #16]
 8020fb0:	4379      	muls	r1, r7
 8020fb2:	910a      	str	r1, [sp, #40]	@ 0x28
 8020fb4:	7869      	ldrb	r1, [r5, #1]
 8020fb6:	4379      	muls	r1, r7
 8020fb8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020fba:	9905      	ldr	r1, [sp, #20]
 8020fbc:	5c8a      	ldrb	r2, [r1, r2]
 8020fbe:	437a      	muls	r2, r7
 8020fc0:	920c      	str	r2, [sp, #48]	@ 0x30
 8020fc2:	f1ba 0f00 	cmp.w	sl, #0
 8020fc6:	d03d      	beq.n	8021044 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 8020fc8:	9f07      	ldr	r7, [sp, #28]
 8020fca:	9a04      	ldr	r2, [sp, #16]
 8020fcc:	46be      	mov	lr, r7
 8020fce:	8812      	ldrh	r2, [r2, #0]
 8020fd0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8020fd2:	1215      	asrs	r5, r2, #8
 8020fd4:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020fd8:	10d1      	asrs	r1, r2, #3
 8020fda:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020fde:	fb05 750e 	mla	r5, r5, lr, r7
 8020fe2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8020fe6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020fe8:	00d2      	lsls	r2, r2, #3
 8020fea:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8020fee:	fb01 710e 	mla	r1, r1, lr, r7
 8020ff2:	b2d2      	uxtb	r2, r2
 8020ff4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020ff6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020ffa:	fb02 720e 	mla	r2, r2, lr, r7
 8020ffe:	b2ad      	uxth	r5, r5
 8021000:	b292      	uxth	r2, r2
 8021002:	f105 0e01 	add.w	lr, r5, #1
 8021006:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802100a:	f102 0e01 	add.w	lr, r2, #1
 802100e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021012:	b289      	uxth	r1, r1
 8021014:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021018:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802101c:	4315      	orrs	r5, r2
 802101e:	1c4a      	adds	r2, r1, #1
 8021020:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021024:	0949      	lsrs	r1, r1, #5
 8021026:	9a04      	ldr	r2, [sp, #16]
 8021028:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802102c:	430d      	orrs	r5, r1
 802102e:	f822 5b02 	strh.w	r5, [r2], #2
 8021032:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021036:	9204      	str	r2, [sp, #16]
 8021038:	fa1f fa8a 	uxth.w	sl, sl
 802103c:	e7c1      	b.n	8020fc2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 802103e:	4649      	mov	r1, r9
 8021040:	4686      	mov	lr, r0
 8021042:	b999      	cbnz	r1, 802106c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 8021044:	4563      	cmp	r3, ip
 8021046:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 802104a:	d389      	bcc.n	8020f60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 802104c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 8021050:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021052:	fa1f f68b 	uxth.w	r6, fp
 8021056:	1ba4      	subs	r4, r4, r6
 8021058:	881b      	ldrh	r3, [r3, #0]
 802105a:	b2a4      	uxth	r4, r4
 802105c:	2c00      	cmp	r4, #0
 802105e:	eba3 030b 	sub.w	r3, r3, fp
 8021062:	bf18      	it	ne
 8021064:	2600      	movne	r6, #0
 8021066:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802106a:	e779      	b.n	8020f60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 802106c:	78aa      	ldrb	r2, [r5, #2]
 802106e:	4f0f      	ldr	r7, [pc, #60]	@ (80210ac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 8021070:	3901      	subs	r1, #1
 8021072:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 8021076:	786a      	ldrb	r2, [r5, #1]
 8021078:	b289      	uxth	r1, r1
 802107a:	00d2      	lsls	r2, r2, #3
 802107c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021080:	ea4a 0202 	orr.w	r2, sl, r2
 8021084:	f895 a000 	ldrb.w	sl, [r5]
 8021088:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 802108c:	f82e 2b02 	strh.w	r2, [lr], #2
 8021090:	e7d7      	b.n	8021042 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 8021092:	4b04      	ldr	r3, [pc, #16]	@ (80210a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8021094:	6818      	ldr	r0, [r3, #0]
 8021096:	6803      	ldr	r3, [r0, #0]
 8021098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802109a:	4798      	blx	r3
 802109c:	b013      	add	sp, #76	@ 0x4c
 802109e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210a2:	bf00      	nop
 80210a4:	2005baa4 	.word	0x2005baa4
 80210a8:	2005ba9e 	.word	0x2005ba9e
 80210ac:	fffff800 	.word	0xfffff800

080210b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80210b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210b4:	b09d      	sub	sp, #116	@ 0x74
 80210b6:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 80210ba:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 80210be:	461c      	mov	r4, r3
 80210c0:	4683      	mov	fp, r0
 80210c2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80210c4:	920e      	str	r2, [sp, #56]	@ 0x38
 80210c6:	2a00      	cmp	r2, #0
 80210c8:	f000 81e1 	beq.w	802148e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3de>
 80210cc:	6820      	ldr	r0, [r4, #0]
 80210ce:	6861      	ldr	r1, [r4, #4]
 80210d0:	aa18      	add	r2, sp, #96	@ 0x60
 80210d2:	c203      	stmia	r2!, {r0, r1}
 80210d4:	6818      	ldr	r0, [r3, #0]
 80210d6:	6859      	ldr	r1, [r3, #4]
 80210d8:	aa1a      	add	r2, sp, #104	@ 0x68
 80210da:	c203      	stmia	r2!, {r0, r1}
 80210dc:	a818      	add	r0, sp, #96	@ 0x60
 80210de:	f7f8 f951 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210e2:	4621      	mov	r1, r4
 80210e4:	a81a      	add	r0, sp, #104	@ 0x68
 80210e6:	f7f8 f975 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80210ea:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80210ee:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 80210f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80210f6:	bfdd      	ittte	le
 80210f8:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80210fc:	b29a      	uxthle	r2, r3
 80210fe:	fb91 f2f2 	sdivle	r2, r1, r2
 8021102:	2201      	movgt	r2, #1
 8021104:	9202      	str	r2, [sp, #8]
 8021106:	9802      	ldr	r0, [sp, #8]
 8021108:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 802110c:	9902      	ldr	r1, [sp, #8]
 802110e:	fb92 f0f0 	sdiv	r0, r2, r0
 8021112:	b280      	uxth	r0, r0
 8021114:	900f      	str	r0, [sp, #60]	@ 0x3c
 8021116:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021118:	9802      	ldr	r0, [sp, #8]
 802111a:	440c      	add	r4, r1
 802111c:	fb05 2510 	mls	r5, r5, r0, r2
 8021120:	fb15 f503 	smulbb	r5, r5, r3
 8021124:	3c01      	subs	r4, #1
 8021126:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 802112a:	fb94 f4f1 	sdiv	r4, r4, r1
 802112e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8021132:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8021136:	440d      	add	r5, r1
 8021138:	4419      	add	r1, r3
 802113a:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 802113e:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8021142:	441a      	add	r2, r3
 8021144:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8021148:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 802114c:	9306      	str	r3, [sp, #24]
 802114e:	4bb3      	ldr	r3, [pc, #716]	@ (802141c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8021150:	3401      	adds	r4, #1
 8021152:	6818      	ldr	r0, [r3, #0]
 8021154:	b2a4      	uxth	r4, r4
 8021156:	6803      	ldr	r3, [r0, #0]
 8021158:	00a4      	lsls	r4, r4, #2
 802115a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802115c:	4798      	blx	r3
 802115e:	4bb0      	ldr	r3, [pc, #704]	@ (8021420 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8021160:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8021164:	881a      	ldrh	r2, [r3, #0]
 8021166:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 802116a:	4356      	muls	r6, r2
 802116c:	fb02 7101 	mla	r1, r2, r1, r7
 8021170:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8021174:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 8021178:	920a      	str	r2, [sp, #40]	@ 0x28
 802117a:	1d22      	adds	r2, r4, #4
 802117c:	b2ad      	uxth	r5, r5
 802117e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021180:	9a06      	ldr	r2, [sp, #24]
 8021182:	2d00      	cmp	r5, #0
 8021184:	bf0c      	ite	eq
 8021186:	4611      	moveq	r1, r2
 8021188:	2100      	movne	r1, #0
 802118a:	2200      	movs	r2, #0
 802118c:	9316      	str	r3, [sp, #88]	@ 0x58
 802118e:	4ba5      	ldr	r3, [pc, #660]	@ (8021424 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 8021190:	b289      	uxth	r1, r1
 8021192:	eba3 030b 	sub.w	r3, r3, fp
 8021196:	920d      	str	r2, [sp, #52]	@ 0x34
 8021198:	9317      	str	r3, [sp, #92]	@ 0x5c
 802119a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802119c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802119e:	fa12 f383 	uxtah	r3, r2, r3
 80211a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80211a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80211a8:	3304      	adds	r3, #4
 80211aa:	9308      	str	r3, [sp, #32]
 80211ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80211ae:	4543      	cmp	r3, r8
 80211b0:	f240 8168 	bls.w	8021484 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d4>
 80211b4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80211b8:	9a02      	ldr	r2, [sp, #8]
 80211ba:	fbb5 f3f3 	udiv	r3, r5, r3
 80211be:	1ad3      	subs	r3, r2, r3
 80211c0:	b29b      	uxth	r3, r3
 80211c2:	9314      	str	r3, [sp, #80]	@ 0x50
 80211c4:	9b08      	ldr	r3, [sp, #32]
 80211c6:	9808      	ldr	r0, [sp, #32]
 80211c8:	785a      	ldrb	r2, [r3, #1]
 80211ca:	789b      	ldrb	r3, [r3, #2]
 80211cc:	7800      	ldrb	r0, [r0, #0]
 80211ce:	021b      	lsls	r3, r3, #8
 80211d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80211d4:	9a08      	ldr	r2, [sp, #32]
 80211d6:	9010      	str	r0, [sp, #64]	@ 0x40
 80211d8:	78d2      	ldrb	r2, [r2, #3]
 80211da:	3001      	adds	r0, #1
 80211dc:	4313      	orrs	r3, r2
 80211de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80211e0:	9007      	str	r0, [sp, #28]
 80211e2:	441a      	add	r2, r3
 80211e4:	1c50      	adds	r0, r2, #1
 80211e6:	9005      	str	r0, [sp, #20]
 80211e8:	7852      	ldrb	r2, [r2, #1]
 80211ea:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80211ec:	0212      	lsls	r2, r2, #8
 80211ee:	5cc3      	ldrb	r3, [r0, r3]
 80211f0:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80211f4:	431a      	orrs	r2, r3
 80211f6:	b293      	uxth	r3, r2
 80211f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80211fa:	2300      	movs	r3, #0
 80211fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80211fe:	2301      	movs	r3, #1
 8021200:	9301      	str	r3, [sp, #4]
 8021202:	9304      	str	r3, [sp, #16]
 8021204:	2300      	movs	r3, #0
 8021206:	f04f 0e01 	mov.w	lr, #1
 802120a:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 802120e:	9303      	str	r3, [sp, #12]
 8021210:	2d00      	cmp	r5, #0
 8021212:	d07c      	beq.n	802130e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8021214:	45ae      	cmp	lr, r5
 8021216:	d26b      	bcs.n	80212f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 8021218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802121a:	eba5 050e 	sub.w	r5, r5, lr
 802121e:	4543      	cmp	r3, r8
 8021220:	b2ad      	uxth	r5, r5
 8021222:	460c      	mov	r4, r1
 8021224:	d802      	bhi.n	802122c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 8021226:	e070      	b.n	802130a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 8021228:	2b00      	cmp	r3, #0
 802122a:	d15c      	bne.n	80212e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 802122c:	9b05      	ldr	r3, [sp, #20]
 802122e:	9a04      	ldr	r2, [sp, #16]
 8021230:	785b      	ldrb	r3, [r3, #1]
 8021232:	f1c2 0207 	rsb	r2, r2, #7
 8021236:	4093      	lsls	r3, r2
 8021238:	005b      	lsls	r3, r3, #1
 802123a:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 802123e:	9b05      	ldr	r3, [sp, #20]
 8021240:	9904      	ldr	r1, [sp, #16]
 8021242:	781b      	ldrb	r3, [r3, #0]
 8021244:	410b      	asrs	r3, r1
 8021246:	3101      	adds	r1, #1
 8021248:	b2c9      	uxtb	r1, r1
 802124a:	2908      	cmp	r1, #8
 802124c:	9104      	str	r1, [sp, #16]
 802124e:	9905      	ldr	r1, [sp, #20]
 8021250:	b2db      	uxtb	r3, r3
 8021252:	bf03      	ittte	eq
 8021254:	3102      	addeq	r1, #2
 8021256:	9105      	streq	r1, [sp, #20]
 8021258:	2100      	moveq	r1, #0
 802125a:	3101      	addne	r1, #1
 802125c:	bf14      	ite	ne
 802125e:	9105      	strne	r1, [sp, #20]
 8021260:	9104      	streq	r1, [sp, #16]
 8021262:	4313      	orrs	r3, r2
 8021264:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021266:	b29a      	uxth	r2, r3
 8021268:	4291      	cmp	r1, r2
 802126a:	d30a      	bcc.n	8021282 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 802126c:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 8021270:	2301      	movs	r3, #1
 8021272:	9907      	ldr	r1, [sp, #28]
 8021274:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021278:	d30f      	bcc.n	802129a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 802127a:	2100      	movs	r1, #0
 802127c:	9301      	str	r3, [sp, #4]
 802127e:	9103      	str	r1, [sp, #12]
 8021280:	e032      	b.n	80212e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8021282:	9b07      	ldr	r3, [sp, #28]
 8021284:	429a      	cmp	r2, r3
 8021286:	d318      	bcc.n	80212ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8021288:	9b01      	ldr	r3, [sp, #4]
 802128a:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 802128e:	445b      	add	r3, fp
 8021290:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8021294:	9b01      	ldr	r3, [sp, #4]
 8021296:	3301      	adds	r3, #1
 8021298:	b29b      	uxth	r3, r3
 802129a:	9907      	ldr	r1, [sp, #28]
 802129c:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 80212a0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80212a4:	7108      	strb	r0, [r1, #4]
 80212a6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80212a8:	80c8      	strh	r0, [r1, #6]
 80212aa:	9801      	ldr	r0, [sp, #4]
 80212ac:	3001      	adds	r0, #1
 80212ae:	7148      	strb	r0, [r1, #5]
 80212b0:	9907      	ldr	r1, [sp, #28]
 80212b2:	3101      	adds	r1, #1
 80212b4:	b289      	uxth	r1, r1
 80212b6:	9107      	str	r1, [sp, #28]
 80212b8:	e7df      	b.n	802127a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 80212ba:	4611      	mov	r1, r2
 80212bc:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 80212c0:	795b      	ldrb	r3, [r3, #5]
 80212c2:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 80212c6:	4458      	add	r0, fp
 80212c8:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80212ca:	4406      	add	r6, r0
 80212cc:	2e00      	cmp	r6, #0
 80212ce:	dd06      	ble.n	80212de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 80212d0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80212d4:	790e      	ldrb	r6, [r1, #4]
 80212d6:	f800 6d01 	strb.w	r6, [r0, #-1]!
 80212da:	88c9      	ldrh	r1, [r1, #6]
 80212dc:	e7f4      	b.n	80212c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 80212de:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 80212e2:	b29b      	uxth	r3, r3
 80212e4:	e7c5      	b.n	8021272 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 80212e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80212e8:	4621      	mov	r1, r4
 80212ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80212ec:	469e      	mov	lr, r3
 80212ee:	e78f      	b.n	8021210 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 80212f0:	9a03      	ldr	r2, [sp, #12]
 80212f2:	ebae 0305 	sub.w	r3, lr, r5
 80212f6:	442a      	add	r2, r5
 80212f8:	b292      	uxth	r2, r2
 80212fa:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80212fe:	b29b      	uxth	r3, r3
 8021300:	9203      	str	r2, [sp, #12]
 8021302:	2500      	movs	r5, #0
 8021304:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021306:	4542      	cmp	r2, r8
 8021308:	d88e      	bhi.n	8021228 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 802130a:	4621      	mov	r1, r4
 802130c:	e74e      	b.n	80211ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 802130e:	458e      	cmp	lr, r1
 8021310:	bf2c      	ite	cs
 8021312:	462c      	movcs	r4, r5
 8021314:	462b      	movcc	r3, r5
 8021316:	f04f 0900 	mov.w	r9, #0
 802131a:	bf29      	itett	cs
 802131c:	ebae 0301 	subcs.w	r3, lr, r1
 8021320:	eba1 040e 	subcc.w	r4, r1, lr
 8021324:	b29b      	uxthcs	r3, r3
 8021326:	910c      	strcs	r1, [sp, #48]	@ 0x30
 8021328:	bf3c      	itt	cc
 802132a:	b2a4      	uxthcc	r4, r4
 802132c:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 8021330:	9a03      	ldr	r2, [sp, #12]
 8021332:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021334:	444a      	add	r2, r9
 8021336:	4548      	cmp	r0, r9
 8021338:	b292      	uxth	r2, r2
 802133a:	d075      	beq.n	8021428 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>
 802133c:	2004      	movs	r0, #4
 802133e:	4605      	mov	r5, r0
 8021340:	445a      	add	r2, fp
 8021342:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021344:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8021348:	fb15 0202 	smlabb	r2, r5, r2, r0
 802134c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802134e:	5880      	ldr	r0, [r0, r2]
 8021350:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8021354:	d014      	beq.n	8021380 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 8021356:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802135a:	ea4f 2510 	mov.w	r5, r0, lsr #8
 802135e:	d112      	bne.n	8021386 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8021360:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021362:	2aff      	cmp	r2, #255	@ 0xff
 8021364:	d10f      	bne.n	8021386 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8021366:	0942      	lsrs	r2, r0, #5
 8021368:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 802136c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021370:	f025 0507 	bic.w	r5, r5, #7
 8021374:	4315      	orrs	r5, r2
 8021376:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802137a:	4305      	orrs	r5, r0
 802137c:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 8021380:	f109 0901 	add.w	r9, r9, #1
 8021384:	e7d4      	b.n	8021330 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 8021386:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 802138a:	b2ed      	uxtb	r5, r5
 802138c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021390:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 8021394:	9215      	str	r2, [sp, #84]	@ 0x54
 8021396:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021398:	f3c0 4607 	ubfx	r6, r0, #16, #8
 802139c:	fb02 fa0a 	mul.w	sl, r2, sl
 80213a0:	f10a 0201 	add.w	r2, sl, #1
 80213a4:	eb02 222a 	add.w	r2, r2, sl, asr #8
 80213a8:	1212      	asrs	r2, r2, #8
 80213aa:	fa1f fa82 	uxth.w	sl, r2
 80213ae:	43d2      	mvns	r2, r2
 80213b0:	b2c0      	uxtb	r0, r0
 80213b2:	fb16 f60a 	smulbb	r6, r6, sl
 80213b6:	fb10 f00a 	smulbb	r0, r0, sl
 80213ba:	ea4f 272c 	mov.w	r7, ip, asr #8
 80213be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80213c2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80213c6:	fa5f fc8c 	uxtb.w	ip, ip
 80213ca:	b2d2      	uxtb	r2, r2
 80213cc:	fb15 f50a 	smulbb	r5, r5, sl
 80213d0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80213d4:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80213d8:	fb07 6702 	mla	r7, r7, r2, r6
 80213dc:	fb0c 0002 	mla	r0, ip, r2, r0
 80213e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80213e2:	b2bf      	uxth	r7, r7
 80213e4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80213e8:	fb06 5602 	mla	r6, r6, r2, r5
 80213ec:	b280      	uxth	r0, r0
 80213ee:	1c7a      	adds	r2, r7, #1
 80213f0:	1c45      	adds	r5, r0, #1
 80213f2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80213f6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80213fa:	b2b6      	uxth	r6, r6
 80213fc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021400:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8021404:	432f      	orrs	r7, r5
 8021406:	1c75      	adds	r5, r6, #1
 8021408:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 802140c:	096d      	lsrs	r5, r5, #5
 802140e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021412:	432f      	orrs	r7, r5
 8021414:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 8021418:	e7b2      	b.n	8021380 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 802141a:	bf00      	nop
 802141c:	2005baa4 	.word	0x2005baa4
 8021420:	2005ba9e 	.word	0x2005ba9e
 8021424:	fffff7fb 	.word	0xfffff7fb
 8021428:	9203      	str	r2, [sp, #12]
 802142a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802142c:	458e      	cmp	lr, r1
 802142e:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8021432:	f4ff af66 	bcc.w	8021302 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 8021436:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021438:	9906      	ldr	r1, [sp, #24]
 802143a:	8812      	ldrh	r2, [r2, #0]
 802143c:	1a52      	subs	r2, r2, r1
 802143e:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8021442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021444:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8021446:	3201      	adds	r2, #1
 8021448:	428a      	cmp	r2, r1
 802144a:	9209      	str	r2, [sp, #36]	@ 0x24
 802144c:	d110      	bne.n	8021470 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 802144e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8021452:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 8021456:	9b06      	ldr	r3, [sp, #24]
 8021458:	eba5 0509 	sub.w	r5, r5, r9
 802145c:	b2ad      	uxth	r5, r5
 802145e:	2d00      	cmp	r5, #0
 8021460:	bf0c      	ite	eq
 8021462:	4619      	moveq	r1, r3
 8021464:	2100      	movne	r1, #0
 8021466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021468:	b289      	uxth	r1, r1
 802146a:	3301      	adds	r3, #1
 802146c:	930d      	str	r3, [sp, #52]	@ 0x34
 802146e:	e694      	b.n	802119a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8021470:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8021474:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8021478:	1b2d      	subs	r5, r5, r4
 802147a:	b2ad      	uxth	r5, r5
 802147c:	2d00      	cmp	r5, #0
 802147e:	bf18      	it	ne
 8021480:	2400      	movne	r4, #0
 8021482:	e73f      	b.n	8021304 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 8021484:	4b03      	ldr	r3, [pc, #12]	@ (8021494 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 8021486:	6818      	ldr	r0, [r3, #0]
 8021488:	6803      	ldr	r3, [r0, #0]
 802148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802148c:	4798      	blx	r3
 802148e:	b01d      	add	sp, #116	@ 0x74
 8021490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021494:	2005baa4 	.word	0x2005baa4

08021498 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802149c:	b09f      	sub	sp, #124	@ 0x7c
 802149e:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 80214a2:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 80214a6:	461d      	mov	r5, r3
 80214a8:	4604      	mov	r4, r0
 80214aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80214ac:	920a      	str	r2, [sp, #40]	@ 0x28
 80214ae:	2a00      	cmp	r2, #0
 80214b0:	f000 81fc 	beq.w	80218ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x414>
 80214b4:	6828      	ldr	r0, [r5, #0]
 80214b6:	6869      	ldr	r1, [r5, #4]
 80214b8:	aa1a      	add	r2, sp, #104	@ 0x68
 80214ba:	c203      	stmia	r2!, {r0, r1}
 80214bc:	6818      	ldr	r0, [r3, #0]
 80214be:	6859      	ldr	r1, [r3, #4]
 80214c0:	aa1c      	add	r2, sp, #112	@ 0x70
 80214c2:	c203      	stmia	r2!, {r0, r1}
 80214c4:	a81a      	add	r0, sp, #104	@ 0x68
 80214c6:	f7f7 ff5d 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80214ca:	4629      	mov	r1, r5
 80214cc:	a81c      	add	r0, sp, #112	@ 0x70
 80214ce:	f7f7 ff81 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80214d2:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80214d6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80214da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80214de:	bfdd      	ittte	le
 80214e0:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80214e4:	b29a      	uxthle	r2, r3
 80214e6:	fb91 f2f2 	sdivle	r2, r1, r2
 80214ea:	2201      	movgt	r2, #1
 80214ec:	9201      	str	r2, [sp, #4]
 80214ee:	9801      	ldr	r0, [sp, #4]
 80214f0:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 80214f4:	9901      	ldr	r1, [sp, #4]
 80214f6:	fb92 f0f0 	sdiv	r0, r2, r0
 80214fa:	b280      	uxth	r0, r0
 80214fc:	9010      	str	r0, [sp, #64]	@ 0x40
 80214fe:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8021500:	9801      	ldr	r0, [sp, #4]
 8021502:	440e      	add	r6, r1
 8021504:	fb05 2510 	mls	r5, r5, r0, r2
 8021508:	fb15 f503 	smulbb	r5, r5, r3
 802150c:	3e01      	subs	r6, #1
 802150e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8021512:	fb96 f6f1 	sdiv	r6, r6, r1
 8021516:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 802151a:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 802151e:	440d      	add	r5, r1
 8021520:	4419      	add	r1, r3
 8021522:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8021526:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 802152a:	441a      	add	r2, r3
 802152c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 8021530:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 8021534:	9304      	str	r3, [sp, #16]
 8021536:	4b96      	ldr	r3, [pc, #600]	@ (8021790 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8021538:	3601      	adds	r6, #1
 802153a:	6818      	ldr	r0, [r3, #0]
 802153c:	b2b6      	uxth	r6, r6
 802153e:	6803      	ldr	r3, [r0, #0]
 8021540:	b2ad      	uxth	r5, r5
 8021542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021544:	4798      	blx	r3
 8021546:	4b93      	ldr	r3, [pc, #588]	@ (8021794 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8021548:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 802154c:	881a      	ldrh	r2, [r3, #0]
 802154e:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 8021552:	4357      	muls	r7, r2
 8021554:	fb02 c101 	mla	r1, r2, r1, ip
 8021558:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 802155c:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8021560:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021562:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021564:	2d00      	cmp	r5, #0
 8021566:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802156a:	f106 0204 	add.w	r2, r6, #4
 802156e:	9206      	str	r2, [sp, #24]
 8021570:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021572:	bf18      	it	ne
 8021574:	2100      	movne	r1, #0
 8021576:	ea6f 0202 	mvn.w	r2, r2
 802157a:	b2d2      	uxtb	r2, r2
 802157c:	9215      	str	r2, [sp, #84]	@ 0x54
 802157e:	9a04      	ldr	r2, [sp, #16]
 8021580:	9318      	str	r3, [sp, #96]	@ 0x60
 8021582:	bf08      	it	eq
 8021584:	4611      	moveq	r1, r2
 8021586:	2200      	movs	r2, #0
 8021588:	4b83      	ldr	r3, [pc, #524]	@ (8021798 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 802158a:	b289      	uxth	r1, r1
 802158c:	1b1b      	subs	r3, r3, r4
 802158e:	920d      	str	r2, [sp, #52]	@ 0x34
 8021590:	9319      	str	r3, [sp, #100]	@ 0x64
 8021592:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021594:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021596:	fa12 f383 	uxtah	r3, r2, r3
 802159a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802159c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80215a0:	3304      	adds	r3, #4
 80215a2:	9307      	str	r3, [sp, #28]
 80215a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80215a6:	455b      	cmp	r3, fp
 80215a8:	f240 817b 	bls.w	80218a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40a>
 80215ac:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 80215b0:	f04f 0801 	mov.w	r8, #1
 80215b4:	fbb5 f3f3 	udiv	r3, r5, r3
 80215b8:	9a01      	ldr	r2, [sp, #4]
 80215ba:	9807      	ldr	r0, [sp, #28]
 80215bc:	1ad3      	subs	r3, r2, r3
 80215be:	b29b      	uxth	r3, r3
 80215c0:	9316      	str	r3, [sp, #88]	@ 0x58
 80215c2:	9b07      	ldr	r3, [sp, #28]
 80215c4:	7800      	ldrb	r0, [r0, #0]
 80215c6:	785a      	ldrb	r2, [r3, #1]
 80215c8:	789b      	ldrb	r3, [r3, #2]
 80215ca:	9011      	str	r0, [sp, #68]	@ 0x44
 80215cc:	021b      	lsls	r3, r3, #8
 80215ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80215d2:	9a07      	ldr	r2, [sp, #28]
 80215d4:	3001      	adds	r0, #1
 80215d6:	78d2      	ldrb	r2, [r2, #3]
 80215d8:	9005      	str	r0, [sp, #20]
 80215da:	4313      	orrs	r3, r2
 80215dc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80215de:	46c4      	mov	ip, r8
 80215e0:	441a      	add	r2, r3
 80215e2:	1c50      	adds	r0, r2, #1
 80215e4:	9003      	str	r0, [sp, #12]
 80215e6:	7852      	ldrb	r2, [r2, #1]
 80215e8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80215ea:	0212      	lsls	r2, r2, #8
 80215ec:	5cc3      	ldrb	r3, [r0, r3]
 80215ee:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80215f2:	431a      	orrs	r2, r3
 80215f4:	b293      	uxth	r3, r2
 80215f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80215f8:	2300      	movs	r3, #0
 80215fa:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80215fe:	9308      	str	r3, [sp, #32]
 8021600:	461a      	mov	r2, r3
 8021602:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021606:	f8cd 8008 	str.w	r8, [sp, #8]
 802160a:	930e      	str	r3, [sp, #56]	@ 0x38
 802160c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8021610:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021612:	2d00      	cmp	r5, #0
 8021614:	d07c      	beq.n	8021710 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8021616:	45ac      	cmp	ip, r5
 8021618:	d26c      	bcs.n	80216f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 802161a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802161c:	eba5 050c 	sub.w	r5, r5, ip
 8021620:	455b      	cmp	r3, fp
 8021622:	b2ad      	uxth	r5, r5
 8021624:	4608      	mov	r0, r1
 8021626:	d802      	bhi.n	802162e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8021628:	e070      	b.n	802170c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 802162a:	2b00      	cmp	r3, #0
 802162c:	d15c      	bne.n	80216e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802162e:	9b03      	ldr	r3, [sp, #12]
 8021630:	9a02      	ldr	r2, [sp, #8]
 8021632:	785b      	ldrb	r3, [r3, #1]
 8021634:	f1c2 0207 	rsb	r2, r2, #7
 8021638:	4093      	lsls	r3, r2
 802163a:	005b      	lsls	r3, r3, #1
 802163c:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021640:	9b03      	ldr	r3, [sp, #12]
 8021642:	9902      	ldr	r1, [sp, #8]
 8021644:	781b      	ldrb	r3, [r3, #0]
 8021646:	410b      	asrs	r3, r1
 8021648:	3101      	adds	r1, #1
 802164a:	b2c9      	uxtb	r1, r1
 802164c:	2908      	cmp	r1, #8
 802164e:	9102      	str	r1, [sp, #8]
 8021650:	9903      	ldr	r1, [sp, #12]
 8021652:	b2db      	uxtb	r3, r3
 8021654:	bf03      	ittte	eq
 8021656:	3102      	addeq	r1, #2
 8021658:	9103      	streq	r1, [sp, #12]
 802165a:	2100      	moveq	r1, #0
 802165c:	3101      	addne	r1, #1
 802165e:	bf14      	ite	ne
 8021660:	9103      	strne	r1, [sp, #12]
 8021662:	9102      	streq	r1, [sp, #8]
 8021664:	4313      	orrs	r3, r2
 8021666:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021668:	b29a      	uxth	r2, r3
 802166a:	4291      	cmp	r1, r2
 802166c:	d30a      	bcc.n	8021684 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 802166e:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8021672:	2301      	movs	r3, #1
 8021674:	9905      	ldr	r1, [sp, #20]
 8021676:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802167a:	d30f      	bcc.n	802169c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x204>
 802167c:	2100      	movs	r1, #0
 802167e:	4698      	mov	r8, r3
 8021680:	9100      	str	r1, [sp, #0]
 8021682:	e032      	b.n	80216ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8021684:	9b05      	ldr	r3, [sp, #20]
 8021686:	429a      	cmp	r2, r3
 8021688:	d318      	bcc.n	80216bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x224>
 802168a:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 802168e:	eb04 0308 	add.w	r3, r4, r8
 8021692:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8021696:	f108 0301 	add.w	r3, r8, #1
 802169a:	b29b      	uxth	r3, r3
 802169c:	9905      	ldr	r1, [sp, #20]
 802169e:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 80216a2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80216a6:	710e      	strb	r6, [r1, #4]
 80216a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80216aa:	80ce      	strh	r6, [r1, #6]
 80216ac:	f108 0601 	add.w	r6, r8, #1
 80216b0:	714e      	strb	r6, [r1, #5]
 80216b2:	9905      	ldr	r1, [sp, #20]
 80216b4:	3101      	adds	r1, #1
 80216b6:	b289      	uxth	r1, r1
 80216b8:	9105      	str	r1, [sp, #20]
 80216ba:	e7df      	b.n	802167c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 80216bc:	4611      	mov	r1, r2
 80216be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80216c2:	795b      	ldrb	r3, [r3, #5]
 80216c4:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 80216c8:	4426      	add	r6, r4
 80216ca:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80216cc:	4437      	add	r7, r6
 80216ce:	2f00      	cmp	r7, #0
 80216d0:	dd06      	ble.n	80216e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 80216d2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80216d6:	790f      	ldrb	r7, [r1, #4]
 80216d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80216dc:	88c9      	ldrh	r1, [r1, #6]
 80216de:	e7f4      	b.n	80216ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x232>
 80216e0:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80216e4:	b29b      	uxth	r3, r3
 80216e6:	e7c5      	b.n	8021674 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1dc>
 80216e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80216ea:	920c      	str	r2, [sp, #48]	@ 0x30
 80216ec:	4601      	mov	r1, r0
 80216ee:	9a00      	ldr	r2, [sp, #0]
 80216f0:	469c      	mov	ip, r3
 80216f2:	e78e      	b.n	8021612 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 80216f4:	1957      	adds	r7, r2, r5
 80216f6:	ebac 0305 	sub.w	r3, ip, r5
 80216fa:	b2ba      	uxth	r2, r7
 80216fc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021700:	b29b      	uxth	r3, r3
 8021702:	9200      	str	r2, [sp, #0]
 8021704:	2500      	movs	r5, #0
 8021706:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021708:	455a      	cmp	r2, fp
 802170a:	d88e      	bhi.n	802162a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 802170c:	4601      	mov	r1, r0
 802170e:	e749      	b.n	80215a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 8021710:	458c      	cmp	ip, r1
 8021712:	bf2c      	ite	cs
 8021714:	4628      	movcs	r0, r5
 8021716:	462b      	movcc	r3, r5
 8021718:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802171a:	bf27      	ittee	cs
 802171c:	ebac 0301 	subcs.w	r3, ip, r1
 8021720:	9109      	strcs	r1, [sp, #36]	@ 0x24
 8021722:	eba1 000c 	subcc.w	r0, r1, ip
 8021726:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 802172a:	bf2c      	ite	cs
 802172c:	b29b      	uxthcs	r3, r3
 802172e:	b280      	uxthcc	r0, r0
 8021730:	2dff      	cmp	r5, #255	@ 0xff
 8021732:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021734:	eb02 0705 	add.w	r7, r2, r5
 8021738:	b2bd      	uxth	r5, r7
 802173a:	9500      	str	r5, [sp, #0]
 802173c:	d12e      	bne.n	802179c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>
 802173e:	465e      	mov	r6, fp
 8021740:	9d00      	ldr	r5, [sp, #0]
 8021742:	42aa      	cmp	r2, r5
 8021744:	f040 8083 	bne.w	802184e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b6>
 8021748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802174a:	458c      	cmp	ip, r1
 802174c:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8021750:	d3d8      	bcc.n	8021704 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 8021752:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021754:	9904      	ldr	r1, [sp, #16]
 8021756:	8812      	ldrh	r2, [r2, #0]
 8021758:	1a52      	subs	r2, r2, r1
 802175a:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 802175e:	9a08      	ldr	r2, [sp, #32]
 8021760:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8021762:	3201      	adds	r2, #1
 8021764:	428a      	cmp	r2, r1
 8021766:	9208      	str	r2, [sp, #32]
 8021768:	f040 8091 	bne.w	802188e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f6>
 802176c:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8021770:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 8021774:	9b04      	ldr	r3, [sp, #16]
 8021776:	eba5 050c 	sub.w	r5, r5, ip
 802177a:	b2ad      	uxth	r5, r5
 802177c:	2d00      	cmp	r5, #0
 802177e:	bf0c      	ite	eq
 8021780:	4619      	moveq	r1, r3
 8021782:	2100      	movne	r1, #0
 8021784:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021786:	b289      	uxth	r1, r1
 8021788:	3301      	adds	r3, #1
 802178a:	930d      	str	r3, [sp, #52]	@ 0x34
 802178c:	e701      	b.n	8021592 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfa>
 802178e:	bf00      	nop
 8021790:	2005baa4 	.word	0x2005baa4
 8021794:	2005ba9e 	.word	0x2005ba9e
 8021798:	fffff7fb 	.word	0xfffff7fb
 802179c:	46d9      	mov	r9, fp
 802179e:	9d00      	ldr	r5, [sp, #0]
 80217a0:	42aa      	cmp	r2, r5
 80217a2:	d0d1      	beq.n	8021748 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b0>
 80217a4:	1c55      	adds	r5, r2, #1
 80217a6:	4422      	add	r2, r4
 80217a8:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 80217ac:	9a06      	ldr	r2, [sp, #24]
 80217ae:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80217b2:	4472      	add	r2, lr
 80217b4:	9212      	str	r2, [sp, #72]	@ 0x48
 80217b6:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80217b8:	f8b9 2000 	ldrh.w	r2, [r9]
 80217bc:	f897 a002 	ldrb.w	sl, [r7, #2]
 80217c0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80217c2:	1216      	asrs	r6, r2, #8
 80217c4:	fb1a fa07 	smulbb	sl, sl, r7
 80217c8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80217cc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80217ce:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80217d2:	fb06 a607 	mla	r6, r6, r7, sl
 80217d6:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80217d8:	9517      	str	r5, [sp, #92]	@ 0x5c
 80217da:	f897 a001 	ldrb.w	sl, [r7, #1]
 80217de:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80217e0:	10d5      	asrs	r5, r2, #3
 80217e2:	fb1a fa07 	smulbb	sl, sl, r7
 80217e6:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80217ea:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80217ec:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80217f0:	fb05 a507 	mla	r5, r5, r7, sl
 80217f4:	9f06      	ldr	r7, [sp, #24]
 80217f6:	00d2      	lsls	r2, r2, #3
 80217f8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80217fc:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80217fe:	b2d2      	uxtb	r2, r2
 8021800:	fb1e fe07 	smulbb	lr, lr, r7
 8021804:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8021806:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802180a:	fb02 e207 	mla	r2, r2, r7, lr
 802180e:	b2b6      	uxth	r6, r6
 8021810:	b292      	uxth	r2, r2
 8021812:	b2ad      	uxth	r5, r5
 8021814:	f106 0a01 	add.w	sl, r6, #1
 8021818:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 802181c:	f102 0e01 	add.w	lr, r2, #1
 8021820:	f105 0a01 	add.w	sl, r5, #1
 8021824:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8021828:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802182c:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8021830:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021834:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021838:	ea4e 0606 	orr.w	r6, lr, r6
 802183c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8021840:	ea46 060a 	orr.w	r6, r6, sl
 8021844:	f829 6b02 	strh.w	r6, [r9], #2
 8021848:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 802184c:	e7a7      	b.n	802179e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x306>
 802184e:	f102 0e01 	add.w	lr, r2, #1
 8021852:	4422      	add	r2, r4
 8021854:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 8021858:	9a06      	ldr	r2, [sp, #24]
 802185a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802185e:	eb02 0a05 	add.w	sl, r2, r5
 8021862:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021866:	4a13      	ldr	r2, [pc, #76]	@ (80218b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 8021868:	9f06      	ldr	r7, [sp, #24]
 802186a:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 802186e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021872:	00d2      	lsls	r2, r2, #3
 8021874:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021878:	ea49 0202 	orr.w	r2, r9, r2
 802187c:	f817 9005 	ldrb.w	r9, [r7, r5]
 8021880:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8021884:	f826 2b02 	strh.w	r2, [r6], #2
 8021888:	fa1f f28e 	uxth.w	r2, lr
 802188c:	e758      	b.n	8021740 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>
 802188e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021892:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8021896:	1a2d      	subs	r5, r5, r0
 8021898:	b2ad      	uxth	r5, r5
 802189a:	2d00      	cmp	r5, #0
 802189c:	bf18      	it	ne
 802189e:	2000      	movne	r0, #0
 80218a0:	e731      	b.n	8021706 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 80218a2:	4b05      	ldr	r3, [pc, #20]	@ (80218b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 80218a4:	6818      	ldr	r0, [r3, #0]
 80218a6:	6803      	ldr	r3, [r0, #0]
 80218a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80218aa:	4798      	blx	r3
 80218ac:	b01f      	add	sp, #124	@ 0x7c
 80218ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218b2:	bf00      	nop
 80218b4:	fffff800 	.word	0xfffff800
 80218b8:	2005baa4 	.word	0x2005baa4

080218bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80218bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c0:	469b      	mov	fp, r3
 80218c2:	4616      	mov	r6, r2
 80218c4:	b091      	sub	sp, #68	@ 0x44
 80218c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80218ca:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 80218ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80218d2:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80218d6:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80218da:	4604      	mov	r4, r0
 80218dc:	460d      	mov	r5, r1
 80218de:	4640      	mov	r0, r8
 80218e0:	4659      	mov	r1, fp
 80218e2:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80218e6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80218ea:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 80218ee:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 80218f2:	f7f2 fbb1 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 80218f6:	4631      	mov	r1, r6
 80218f8:	4640      	mov	r0, r8
 80218fa:	f7f2 fbad 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 80218fe:	4b74      	ldr	r3, [pc, #464]	@ (8021ad0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8021900:	8818      	ldrh	r0, [r3, #0]
 8021902:	4b74      	ldr	r3, [pc, #464]	@ (8021ad4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8021904:	b202      	sxth	r2, r0
 8021906:	8819      	ldrh	r1, [r3, #0]
 8021908:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 802190c:	b20e      	sxth	r6, r1
 802190e:	2b00      	cmp	r3, #0
 8021910:	da07      	bge.n	8021922 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8021912:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8021916:	4463      	add	r3, ip
 8021918:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 802191c:	2300      	movs	r3, #0
 802191e:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8021922:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8021926:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 802192a:	1ad2      	subs	r2, r2, r3
 802192c:	4594      	cmp	ip, r2
 802192e:	bfc4      	itt	gt
 8021930:	1ac2      	subgt	r2, r0, r3
 8021932:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8021936:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 802193a:	2a00      	cmp	r2, #0
 802193c:	da07      	bge.n	802194e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 802193e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8021942:	4462      	add	r2, ip
 8021944:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8021948:	2200      	movs	r2, #0
 802194a:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 802194e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8021952:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8021956:	eba6 060a 	sub.w	r6, r6, sl
 802195a:	42b2      	cmp	r2, r6
 802195c:	bfc4      	itt	gt
 802195e:	eba1 020a 	subgt.w	r2, r1, sl
 8021962:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8021966:	4a5c      	ldr	r2, [pc, #368]	@ (8021ad8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8021968:	7812      	ldrb	r2, [r2, #0]
 802196a:	b9a2      	cbnz	r2, 8021996 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 802196c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8021970:	4286      	cmp	r6, r0
 8021972:	4640      	mov	r0, r8
 8021974:	9303      	str	r3, [sp, #12]
 8021976:	bf14      	ite	ne
 8021978:	2600      	movne	r6, #0
 802197a:	2601      	moveq	r6, #1
 802197c:	f7f2 fbaf 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 8021980:	9b03      	ldr	r3, [sp, #12]
 8021982:	b160      	cbz	r0, 802199e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8021984:	2300      	movs	r3, #0
 8021986:	8023      	strh	r3, [r4, #0]
 8021988:	8063      	strh	r3, [r4, #2]
 802198a:	80a3      	strh	r3, [r4, #4]
 802198c:	4620      	mov	r0, r4
 802198e:	80e3      	strh	r3, [r4, #6]
 8021990:	b011      	add	sp, #68	@ 0x44
 8021992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021996:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 802199a:	428e      	cmp	r6, r1
 802199c:	e7e9      	b.n	8021972 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 802199e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80219a2:	a90e      	add	r1, sp, #56	@ 0x38
 80219a4:	9205      	str	r2, [sp, #20]
 80219a6:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 80219aa:	900e      	str	r0, [sp, #56]	@ 0x38
 80219ac:	9206      	str	r2, [sp, #24]
 80219ae:	f8bb 2000 	ldrh.w	r2, [fp]
 80219b2:	a80c      	add	r0, sp, #48	@ 0x30
 80219b4:	1a9b      	subs	r3, r3, r2
 80219b6:	b21b      	sxth	r3, r3
 80219b8:	9303      	str	r3, [sp, #12]
 80219ba:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80219be:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 80219c2:	ebaa 0a03 	sub.w	sl, sl, r3
 80219c6:	fa0f f38a 	sxth.w	r3, sl
 80219ca:	9304      	str	r3, [sp, #16]
 80219cc:	9b03      	ldr	r3, [sp, #12]
 80219ce:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 80219d2:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80219d6:	9b04      	ldr	r3, [sp, #16]
 80219d8:	f8df b104 	ldr.w	fp, [pc, #260]	@ 8021ae0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80219dc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80219e0:	9b05      	ldr	r3, [sp, #20]
 80219e2:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80219e6:	9b06      	ldr	r3, [sp, #24]
 80219e8:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80219ec:	f7f7 fcf2 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219f0:	4640      	mov	r0, r8
 80219f2:	f7f7 fcc7 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219f6:	a80e      	add	r0, sp, #56	@ 0x38
 80219f8:	f7f7 fcc4 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219fc:	4b37      	ldr	r3, [pc, #220]	@ (8021adc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80219fe:	4628      	mov	r0, r5
 8021a00:	881b      	ldrh	r3, [r3, #0]
 8021a02:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8021a06:	9307      	str	r3, [sp, #28]
 8021a08:	682b      	ldr	r3, [r5, #0]
 8021a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021a0c:	4798      	blx	r3
 8021a0e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8021a12:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8021a16:	4681      	mov	r9, r0
 8021a18:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8021a1c:	f8db 0000 	ldr.w	r0, [fp]
 8021a20:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8021a22:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021a26:	6803      	ldr	r3, [r0, #0]
 8021a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021a2a:	4798      	blx	r3
 8021a2c:	4607      	mov	r7, r0
 8021a2e:	f8db 0000 	ldr.w	r0, [fp]
 8021a32:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8021a36:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8021a3a:	6803      	ldr	r3, [r0, #0]
 8021a3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8021a3e:	9208      	str	r2, [sp, #32]
 8021a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021a42:	4798      	blx	r3
 8021a44:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8021a48:	f010 0f01 	tst.w	r0, #1
 8021a4c:	d012      	beq.n	8021a74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8021a4e:	f8db 0000 	ldr.w	r0, [fp]
 8021a52:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8021a56:	6803      	ldr	r3, [r0, #0]
 8021a58:	9200      	str	r2, [sp, #0]
 8021a5a:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8021a5c:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021a60:	462b      	mov	r3, r5
 8021a62:	47b0      	blx	r6
 8021a64:	9b03      	ldr	r3, [sp, #12]
 8021a66:	8023      	strh	r3, [r4, #0]
 8021a68:	9b04      	ldr	r3, [sp, #16]
 8021a6a:	8063      	strh	r3, [r4, #2]
 8021a6c:	9b05      	ldr	r3, [sp, #20]
 8021a6e:	80a3      	strh	r3, [r4, #4]
 8021a70:	9b06      	ldr	r3, [sp, #24]
 8021a72:	e78b      	b.n	802198c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8021a74:	fb09 f202 	mul.w	r2, r9, r2
 8021a78:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021a7c:	440f      	add	r7, r1
 8021a7e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8021a82:	b166      	cbz	r6, 8021a9e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021a84:	9a07      	ldr	r2, [sp, #28]
 8021a86:	4592      	cmp	sl, r2
 8021a88:	d109      	bne.n	8021a9e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021a8a:	f8db 0000 	ldr.w	r0, [fp]
 8021a8e:	fb09 f303 	mul.w	r3, r9, r3
 8021a92:	6802      	ldr	r2, [r0, #0]
 8021a94:	4629      	mov	r1, r5
 8021a96:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 8021a98:	463a      	mov	r2, r7
 8021a9a:	47b0      	blx	r6
 8021a9c:	e7e2      	b.n	8021a64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021a9e:	fb0a f303 	mul.w	r3, sl, r3
 8021aa2:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8021ae0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021aa6:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8021aaa:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8021aae:	4545      	cmp	r5, r8
 8021ab0:	d2d8      	bcs.n	8021a64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021ab2:	f8db 0000 	ldr.w	r0, [fp]
 8021ab6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8021aba:	6802      	ldr	r2, [r0, #0]
 8021abc:	4629      	mov	r1, r5
 8021abe:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 8021ac2:	005b      	lsls	r3, r3, #1
 8021ac4:	463a      	mov	r2, r7
 8021ac6:	47d0      	blx	sl
 8021ac8:	444f      	add	r7, r9
 8021aca:	4435      	add	r5, r6
 8021acc:	e7ef      	b.n	8021aae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8021ace:	bf00      	nop
 8021ad0:	2005ba98 	.word	0x2005ba98
 8021ad4:	2005ba9a 	.word	0x2005ba9a
 8021ad8:	2005ba9c 	.word	0x2005ba9c
 8021adc:	2005ba9e 	.word	0x2005ba9e
 8021ae0:	2005baa4 	.word	0x2005baa4

08021ae4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ae6:	4606      	mov	r6, r0
 8021ae8:	b087      	sub	sp, #28
 8021aea:	460c      	mov	r4, r1
 8021aec:	4617      	mov	r7, r2
 8021aee:	461d      	mov	r5, r3
 8021af0:	b333      	cbz	r3, 8021b40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021af2:	4608      	mov	r0, r1
 8021af4:	f7f2 faf3 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 8021af8:	bb10      	cbnz	r0, 8021b40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021afa:	6820      	ldr	r0, [r4, #0]
 8021afc:	6861      	ldr	r1, [r4, #4]
 8021afe:	ab04      	add	r3, sp, #16
 8021b00:	4c1b      	ldr	r4, [pc, #108]	@ (8021b70 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8021b02:	c303      	stmia	r3!, {r0, r1}
 8021b04:	a804      	add	r0, sp, #16
 8021b06:	f7f7 fc3d 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b0a:	6820      	ldr	r0, [r4, #0]
 8021b0c:	6803      	ldr	r3, [r0, #0]
 8021b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021b10:	4798      	blx	r3
 8021b12:	2dff      	cmp	r5, #255	@ 0xff
 8021b14:	d016      	beq.n	8021b44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8021b16:	f010 0f08 	tst.w	r0, #8
 8021b1a:	6820      	ldr	r0, [r4, #0]
 8021b1c:	d015      	beq.n	8021b4a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021b1e:	2400      	movs	r4, #0
 8021b20:	6801      	ldr	r1, [r0, #0]
 8021b22:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8021b26:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021b2a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021b2e:	9401      	str	r4, [sp, #4]
 8021b30:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021b34:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021b38:	9400      	str	r4, [sp, #0]
 8021b3a:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 8021b3c:	4639      	mov	r1, r7
 8021b3e:	47a0      	blx	r4
 8021b40:	b007      	add	sp, #28
 8021b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b44:	f010 0f02 	tst.w	r0, #2
 8021b48:	e7e7      	b.n	8021b1a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8021b4a:	6803      	ldr	r3, [r0, #0]
 8021b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021b4e:	4798      	blx	r3
 8021b50:	4b08      	ldr	r3, [pc, #32]	@ (8021b74 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021b52:	4601      	mov	r1, r0
 8021b54:	881a      	ldrh	r2, [r3, #0]
 8021b56:	e9cd 7500 	strd	r7, r5, [sp]
 8021b5a:	6833      	ldr	r3, [r6, #0]
 8021b5c:	4630      	mov	r0, r6
 8021b5e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8021b60:	ab04      	add	r3, sp, #16
 8021b62:	47a8      	blx	r5
 8021b64:	6820      	ldr	r0, [r4, #0]
 8021b66:	6803      	ldr	r3, [r0, #0]
 8021b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021b6a:	4798      	blx	r3
 8021b6c:	e7e8      	b.n	8021b40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021b6e:	bf00      	nop
 8021b70:	2005baa4 	.word	0x2005baa4
 8021b74:	2005ba9e 	.word	0x2005ba9e

08021b78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b7c:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8021b80:	4688      	mov	r8, r1
 8021b82:	4614      	mov	r4, r2
 8021b84:	461d      	mov	r5, r3
 8021b86:	9e08      	ldr	r6, [sp, #32]
 8021b88:	2f00      	cmp	r7, #0
 8021b8a:	f000 80a9 	beq.w	8021ce0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021b8e:	4618      	mov	r0, r3
 8021b90:	f7f2 faa5 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 8021b94:	2800      	cmp	r0, #0
 8021b96:	f040 80a3 	bne.w	8021ce0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021b9a:	f9b5 1000 	ldrsh.w	r1, [r5]
 8021b9e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021ba2:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8021ba6:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8021baa:	fb04 1303 	mla	r3, r4, r3, r1
 8021bae:	4365      	muls	r5, r4
 8021bb0:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8021bb4:	2fff      	cmp	r7, #255	@ 0xff
 8021bb6:	eba4 0200 	sub.w	r2, r4, r0
 8021bba:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021bbe:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8021bc2:	d04a      	beq.n	8021c5a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8021bc4:	b2bc      	uxth	r4, r7
 8021bc6:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8021bca:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8021bce:	fa5f f788 	uxtb.w	r7, r8
 8021bd2:	b2f3      	uxtb	r3, r6
 8021bd4:	fb0e fe04 	mul.w	lr, lr, r4
 8021bd8:	4367      	muls	r7, r4
 8021bda:	4363      	muls	r3, r4
 8021bdc:	0040      	lsls	r0, r0, #1
 8021bde:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021be2:	fa1f fc8c 	uxth.w	ip, ip
 8021be6:	42a9      	cmp	r1, r5
 8021be8:	d27a      	bcs.n	8021ce0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021bea:	eb01 0900 	add.w	r9, r1, r0
 8021bee:	4549      	cmp	r1, r9
 8021bf0:	d231      	bcs.n	8021c56 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8021bf2:	880a      	ldrh	r2, [r1, #0]
 8021bf4:	1214      	asrs	r4, r2, #8
 8021bf6:	10d6      	asrs	r6, r2, #3
 8021bf8:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8021bfc:	00d2      	lsls	r2, r2, #3
 8021bfe:	b2d2      	uxtb	r2, r2
 8021c00:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021c04:	fb14 f40c 	smulbb	r4, r4, ip
 8021c08:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021c0c:	fb12 f20c 	smulbb	r2, r2, ip
 8021c10:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021c14:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021c18:	4474      	add	r4, lr
 8021c1a:	fb16 f60c 	smulbb	r6, r6, ip
 8021c1e:	b2a4      	uxth	r4, r4
 8021c20:	441a      	add	r2, r3
 8021c22:	b292      	uxth	r2, r2
 8021c24:	f104 0a01 	add.w	sl, r4, #1
 8021c28:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021c2c:	f102 0a01 	add.w	sl, r2, #1
 8021c30:	443e      	add	r6, r7
 8021c32:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8021c36:	b2b6      	uxth	r6, r6
 8021c38:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8021c3c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021c40:	4322      	orrs	r2, r4
 8021c42:	1c74      	adds	r4, r6, #1
 8021c44:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021c48:	0976      	lsrs	r6, r6, #5
 8021c4a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8021c4e:	4332      	orrs	r2, r6
 8021c50:	f821 2b02 	strh.w	r2, [r1], #2
 8021c54:	e7cb      	b.n	8021bee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8021c56:	4441      	add	r1, r8
 8021c58:	e7c5      	b.n	8021be6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8021c5a:	4f22      	ldr	r7, [pc, #136]	@ (8021ce4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8021c5c:	0973      	lsrs	r3, r6, #5
 8021c5e:	ea08 0707 	and.w	r7, r8, r7
 8021c62:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021c66:	433b      	orrs	r3, r7
 8021c68:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021c6c:	4333      	orrs	r3, r6
 8021c6e:	07e7      	lsls	r7, r4, #31
 8021c70:	b29b      	uxth	r3, r3
 8021c72:	d50b      	bpl.n	8021c8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8021c74:	0040      	lsls	r0, r0, #1
 8021c76:	0052      	lsls	r2, r2, #1
 8021c78:	42a9      	cmp	r1, r5
 8021c7a:	d231      	bcs.n	8021ce0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021c7c:	180c      	adds	r4, r1, r0
 8021c7e:	42a1      	cmp	r1, r4
 8021c80:	d202      	bcs.n	8021c88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8021c82:	f821 3b02 	strh.w	r3, [r1], #2
 8021c86:	e7fa      	b.n	8021c7e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8021c88:	4411      	add	r1, r2
 8021c8a:	e7f5      	b.n	8021c78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8021c8c:	078e      	lsls	r6, r1, #30
 8021c8e:	d008      	beq.n	8021ca2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8021c90:	460a      	mov	r2, r1
 8021c92:	0066      	lsls	r6, r4, #1
 8021c94:	42aa      	cmp	r2, r5
 8021c96:	d202      	bcs.n	8021c9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8021c98:	8013      	strh	r3, [r2, #0]
 8021c9a:	4432      	add	r2, r6
 8021c9c:	e7fa      	b.n	8021c94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8021c9e:	3102      	adds	r1, #2
 8021ca0:	3801      	subs	r0, #1
 8021ca2:	07c2      	lsls	r2, r0, #31
 8021ca4:	d50b      	bpl.n	8021cbe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8021ca6:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8021caa:	3a01      	subs	r2, #1
 8021cac:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021cb0:	0066      	lsls	r6, r4, #1
 8021cb2:	42aa      	cmp	r2, r5
 8021cb4:	d202      	bcs.n	8021cbc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8021cb6:	8013      	strh	r3, [r2, #0]
 8021cb8:	4432      	add	r2, r6
 8021cba:	e7fa      	b.n	8021cb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8021cbc:	3801      	subs	r0, #1
 8021cbe:	b178      	cbz	r0, 8021ce0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021cc0:	1040      	asrs	r0, r0, #1
 8021cc2:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021cc6:	0080      	lsls	r0, r0, #2
 8021cc8:	0064      	lsls	r4, r4, #1
 8021cca:	42a9      	cmp	r1, r5
 8021ccc:	d208      	bcs.n	8021ce0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021cce:	460a      	mov	r2, r1
 8021cd0:	180e      	adds	r6, r1, r0
 8021cd2:	42b2      	cmp	r2, r6
 8021cd4:	d202      	bcs.n	8021cdc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8021cd6:	f842 3b04 	str.w	r3, [r2], #4
 8021cda:	e7fa      	b.n	8021cd2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8021cdc:	4421      	add	r1, r4
 8021cde:	e7f4      	b.n	8021cca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8021ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ce4:	00fff800 	.word	0x00fff800

08021ce8 <_ZN8touchgfx8LCD16bppC1Ev>:
 8021ce8:	2200      	movs	r2, #0
 8021cea:	4912      	ldr	r1, [pc, #72]	@ (8021d34 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8021cec:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8021cf0:	6001      	str	r1, [r0, #0]
 8021cf2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8021cf6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8021cfa:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8021cfe:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8021d02:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8021d06:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8021d0a:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8021d0e:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8021d12:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8021d16:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8021d1a:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8021d1e:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8021d22:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8021d26:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8021d2a:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8021d2e:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8021d32:	4770      	bx	lr
 8021d34:	0802fd64 	.word	0x0802fd64

08021d38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d3c:	460d      	mov	r5, r1
 8021d3e:	4604      	mov	r4, r0
 8021d40:	4699      	mov	r9, r3
 8021d42:	b08d      	sub	sp, #52	@ 0x34
 8021d44:	6808      	ldr	r0, [r1, #0]
 8021d46:	6849      	ldr	r1, [r1, #4]
 8021d48:	ab08      	add	r3, sp, #32
 8021d4a:	c303      	stmia	r3!, {r0, r1}
 8021d4c:	6810      	ldr	r0, [r2, #0]
 8021d4e:	6851      	ldr	r1, [r2, #4]
 8021d50:	ab0a      	add	r3, sp, #40	@ 0x28
 8021d52:	c303      	stmia	r3!, {r0, r1}
 8021d54:	a808      	add	r0, sp, #32
 8021d56:	f7f7 fb15 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021d5a:	4629      	mov	r1, r5
 8021d5c:	a80a      	add	r0, sp, #40	@ 0x28
 8021d5e:	f7f7 fb39 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021d62:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8021d66:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8021d6a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8021d6e:	4d63      	ldr	r5, [pc, #396]	@ (8021efc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021d70:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021d74:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021d78:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8021d7c:	6828      	ldr	r0, [r5, #0]
 8021d7e:	440a      	add	r2, r1
 8021d80:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8021d84:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8021d88:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8021d8c:	4413      	add	r3, r2
 8021d8e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8021d92:	6803      	ldr	r3, [r0, #0]
 8021d94:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8021d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021d9a:	4798      	blx	r3
 8021d9c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021da0:	d119      	bne.n	8021dd6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8021da2:	f010 0f20 	tst.w	r0, #32
 8021da6:	6828      	ldr	r0, [r5, #0]
 8021da8:	d018      	beq.n	8021ddc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021daa:	2500      	movs	r5, #0
 8021dac:	6801      	ldr	r1, [r0, #0]
 8021dae:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8021db2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8021db6:	b2b6      	uxth	r6, r6
 8021db8:	9502      	str	r5, [sp, #8]
 8021dba:	fa1f f588 	uxth.w	r5, r8
 8021dbe:	9601      	str	r6, [sp, #4]
 8021dc0:	9500      	str	r5, [sp, #0]
 8021dc2:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8021dc4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021dc8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8021dcc:	4621      	mov	r1, r4
 8021dce:	47a8      	blx	r5
 8021dd0:	b00d      	add	sp, #52	@ 0x34
 8021dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dd6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021dda:	e7e4      	b.n	8021da6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8021ddc:	6803      	ldr	r3, [r0, #0]
 8021dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021de0:	4798      	blx	r3
 8021de2:	4947      	ldr	r1, [pc, #284]	@ (8021f00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8021de4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8021de8:	468a      	mov	sl, r1
 8021dea:	880b      	ldrh	r3, [r1, #0]
 8021dec:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8021df0:	fb03 5202 	mla	r2, r3, r2, r5
 8021df4:	4373      	muls	r3, r6
 8021df6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021dfa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021dfe:	9307      	str	r3, [sp, #28]
 8021e00:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021e04:	9306      	str	r3, [sp, #24]
 8021e06:	9b07      	ldr	r3, [sp, #28]
 8021e08:	4298      	cmp	r0, r3
 8021e0a:	d270      	bcs.n	8021eee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8021e0c:	4621      	mov	r1, r4
 8021e0e:	9b06      	ldr	r3, [sp, #24]
 8021e10:	eb00 0b03 	add.w	fp, r0, r3
 8021e14:	4558      	cmp	r0, fp
 8021e16:	d25d      	bcs.n	8021ed4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8021e18:	f851 4b04 	ldr.w	r4, [r1], #4
 8021e1c:	0e23      	lsrs	r3, r4, #24
 8021e1e:	d014      	beq.n	8021e4a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021e20:	2bff      	cmp	r3, #255	@ 0xff
 8021e22:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8021e26:	d112      	bne.n	8021e4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021e28:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021e2c:	d10f      	bne.n	8021e4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021e2e:	0963      	lsrs	r3, r4, #5
 8021e30:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8021e34:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021e38:	f02c 0c07 	bic.w	ip, ip, #7
 8021e3c:	ea43 0c0c 	orr.w	ip, r3, ip
 8021e40:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021e44:	ea4c 0404 	orr.w	r4, ip, r4
 8021e48:	8004      	strh	r4, [r0, #0]
 8021e4a:	3002      	adds	r0, #2
 8021e4c:	e7e2      	b.n	8021e14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8021e4e:	fb09 f303 	mul.w	r3, r9, r3
 8021e52:	1c5a      	adds	r2, r3, #1
 8021e54:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8021e58:	1212      	asrs	r2, r2, #8
 8021e5a:	b293      	uxth	r3, r2
 8021e5c:	43d2      	mvns	r2, r2
 8021e5e:	8807      	ldrh	r7, [r0, #0]
 8021e60:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8021e64:	fb1e fe03 	smulbb	lr, lr, r3
 8021e68:	123e      	asrs	r6, r7, #8
 8021e6a:	fa5f fc8c 	uxtb.w	ip, ip
 8021e6e:	b2e4      	uxtb	r4, r4
 8021e70:	fb1c fc03 	smulbb	ip, ip, r3
 8021e74:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021e78:	fb14 f403 	smulbb	r4, r4, r3
 8021e7c:	b2d2      	uxtb	r2, r2
 8021e7e:	10fd      	asrs	r5, r7, #3
 8021e80:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021e84:	00ff      	lsls	r7, r7, #3
 8021e86:	fb06 e602 	mla	r6, r6, r2, lr
 8021e8a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021e8e:	b2ff      	uxtb	r7, r7
 8021e90:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021e94:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021e98:	fb05 c502 	mla	r5, r5, r2, ip
 8021e9c:	fb07 4702 	mla	r7, r7, r2, r4
 8021ea0:	b2b6      	uxth	r6, r6
 8021ea2:	f106 0e01 	add.w	lr, r6, #1
 8021ea6:	b2ad      	uxth	r5, r5
 8021ea8:	b2bf      	uxth	r7, r7
 8021eaa:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021eae:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8021eb2:	f105 0c01 	add.w	ip, r5, #1
 8021eb6:	1c7e      	adds	r6, r7, #1
 8021eb8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021ebc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021ec0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021ec4:	096d      	lsrs	r5, r5, #5
 8021ec6:	ea46 060e 	orr.w	r6, r6, lr
 8021eca:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021ece:	432e      	orrs	r6, r5
 8021ed0:	8006      	strh	r6, [r0, #0]
 8021ed2:	e7ba      	b.n	8021e4a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021ed4:	f8ba 3000 	ldrh.w	r3, [sl]
 8021ed8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8021edc:	eba3 0308 	sub.w	r3, r3, r8
 8021ee0:	eba4 0408 	sub.w	r4, r4, r8
 8021ee4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021ee8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021eec:	e78b      	b.n	8021e06 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8021eee:	4b03      	ldr	r3, [pc, #12]	@ (8021efc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021ef0:	6818      	ldr	r0, [r3, #0]
 8021ef2:	6803      	ldr	r3, [r0, #0]
 8021ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021ef6:	4798      	blx	r3
 8021ef8:	e76a      	b.n	8021dd0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021efa:	bf00      	nop
 8021efc:	2005baa4 	.word	0x2005baa4
 8021f00:	2005ba9e 	.word	0x2005ba9e

08021f04 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8021f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021f08:	b085      	sub	sp, #20
 8021f0a:	466d      	mov	r5, sp
 8021f0c:	4616      	mov	r6, r2
 8021f0e:	460c      	mov	r4, r1
 8021f10:	6810      	ldr	r0, [r2, #0]
 8021f12:	6851      	ldr	r1, [r2, #4]
 8021f14:	c503      	stmia	r5!, {r0, r1}
 8021f16:	6818      	ldr	r0, [r3, #0]
 8021f18:	6859      	ldr	r1, [r3, #4]
 8021f1a:	c503      	stmia	r5!, {r0, r1}
 8021f1c:	4668      	mov	r0, sp
 8021f1e:	f7f7 fa31 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f22:	4631      	mov	r1, r6
 8021f24:	a802      	add	r0, sp, #8
 8021f26:	f7f7 fa55 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021f2a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8021f2e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021f32:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021f36:	4d28      	ldr	r5, [pc, #160]	@ (8021fd8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8021f38:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021f3c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021f40:	f8bd 1000 	ldrh.w	r1, [sp]
 8021f44:	6828      	ldr	r0, [r5, #0]
 8021f46:	440a      	add	r2, r1
 8021f48:	f8ad 2008 	strh.w	r2, [sp, #8]
 8021f4c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021f50:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8021f54:	4413      	add	r3, r2
 8021f56:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021f5a:	6803      	ldr	r3, [r0, #0]
 8021f5c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8021f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021f62:	4798      	blx	r3
 8021f64:	4e1d      	ldr	r6, [pc, #116]	@ (8021fdc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8021f66:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021f6a:	8833      	ldrh	r3, [r6, #0]
 8021f6c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8021f70:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8021fe0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8021f74:	fb03 1202 	mla	r2, r3, r2, r1
 8021f78:	fb08 f303 	mul.w	r3, r8, r3
 8021f7c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021f80:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021f84:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8021f88:	4298      	cmp	r0, r3
 8021f8a:	d21d      	bcs.n	8021fc8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8021f8c:	eb00 080c 	add.w	r8, r0, ip
 8021f90:	4540      	cmp	r0, r8
 8021f92:	d20f      	bcs.n	8021fb4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8021f94:	f854 1b04 	ldr.w	r1, [r4], #4
 8021f98:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8021f9c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8021fa0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8021fa4:	ea42 0209 	orr.w	r2, r2, r9
 8021fa8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021fac:	430a      	orrs	r2, r1
 8021fae:	f820 2b02 	strh.w	r2, [r0], #2
 8021fb2:	e7ed      	b.n	8021f90 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8021fb4:	8832      	ldrh	r2, [r6, #0]
 8021fb6:	1bd2      	subs	r2, r2, r7
 8021fb8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021fbc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8021fc0:	1bd2      	subs	r2, r2, r7
 8021fc2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8021fc6:	e7df      	b.n	8021f88 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8021fc8:	6828      	ldr	r0, [r5, #0]
 8021fca:	6803      	ldr	r3, [r0, #0]
 8021fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021fce:	4798      	blx	r3
 8021fd0:	b005      	add	sp, #20
 8021fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021fd6:	bf00      	nop
 8021fd8:	2005baa4 	.word	0x2005baa4
 8021fdc:	2005ba9e 	.word	0x2005ba9e
 8021fe0:	fffff800 	.word	0xfffff800

08021fe4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8021fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fe8:	460e      	mov	r6, r1
 8021fea:	4604      	mov	r4, r0
 8021fec:	461d      	mov	r5, r3
 8021fee:	b08e      	sub	sp, #56	@ 0x38
 8021ff0:	6808      	ldr	r0, [r1, #0]
 8021ff2:	6849      	ldr	r1, [r1, #4]
 8021ff4:	ab0a      	add	r3, sp, #40	@ 0x28
 8021ff6:	c303      	stmia	r3!, {r0, r1}
 8021ff8:	6810      	ldr	r0, [r2, #0]
 8021ffa:	6851      	ldr	r1, [r2, #4]
 8021ffc:	ab0c      	add	r3, sp, #48	@ 0x30
 8021ffe:	c303      	stmia	r3!, {r0, r1}
 8022000:	a80a      	add	r0, sp, #40	@ 0x28
 8022002:	f7f7 f9bf 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022006:	4631      	mov	r1, r6
 8022008:	a80c      	add	r0, sp, #48	@ 0x30
 802200a:	f7f7 f9e3 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802200e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022012:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8022016:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 802201a:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 80221cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 802201e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022022:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022026:	440c      	add	r4, r1
 8022028:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 802202c:	f8d8 0000 	ldr.w	r0, [r8]
 8022030:	440a      	add	r2, r1
 8022032:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8022036:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 802203a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 802203e:	4413      	add	r3, r2
 8022040:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022044:	6803      	ldr	r3, [r0, #0]
 8022046:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 802204a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802204c:	4798      	blx	r3
 802204e:	2dff      	cmp	r5, #255	@ 0xff
 8022050:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80221d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8022054:	d124      	bne.n	80220a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8022056:	f010 0f01 	tst.w	r0, #1
 802205a:	f8d8 0000 	ldr.w	r0, [r8]
 802205e:	d022      	beq.n	80220a6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022060:	2100      	movs	r1, #0
 8022062:	f04f 0e01 	mov.w	lr, #1
 8022066:	f8d0 c000 	ldr.w	ip, [r0]
 802206a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802206e:	f8cd e018 	str.w	lr, [sp, #24]
 8022072:	f8b9 e000 	ldrh.w	lr, [r9]
 8022076:	b2b6      	uxth	r6, r6
 8022078:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 802207c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022080:	b2bf      	uxth	r7, r7
 8022082:	9102      	str	r1, [sp, #8]
 8022084:	9503      	str	r5, [sp, #12]
 8022086:	9601      	str	r6, [sp, #4]
 8022088:	9700      	str	r7, [sp, #0]
 802208a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 802208e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022092:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 8022096:	4621      	mov	r1, r4
 8022098:	47a8      	blx	r5
 802209a:	b00e      	add	sp, #56	@ 0x38
 802209c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220a0:	f010 0f04 	tst.w	r0, #4
 80220a4:	e7d9      	b.n	802205a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80220a6:	6803      	ldr	r3, [r0, #0]
 80220a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80220aa:	4798      	blx	r3
 80220ac:	f8b9 3000 	ldrh.w	r3, [r9]
 80220b0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80220b4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80220b8:	435e      	muls	r6, r3
 80220ba:	fb03 1202 	mla	r2, r3, r2, r1
 80220be:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80220c2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80220c6:	ebac 0c07 	sub.w	ip, ip, r7
 80220ca:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80220ce:	2dff      	cmp	r5, #255	@ 0xff
 80220d0:	eba3 0707 	sub.w	r7, r3, r7
 80220d4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80220d8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80220dc:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80220e0:	d049      	beq.n	8022176 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80220e2:	43eb      	mvns	r3, r5
 80220e4:	fa1f f985 	uxth.w	r9, r5
 80220e8:	b2db      	uxtb	r3, r3
 80220ea:	42b0      	cmp	r0, r6
 80220ec:	d266      	bcs.n	80221bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80220ee:	eb00 0a0e 	add.w	sl, r0, lr
 80220f2:	4550      	cmp	r0, sl
 80220f4:	4621      	mov	r1, r4
 80220f6:	f104 0403 	add.w	r4, r4, #3
 80220fa:	d25b      	bcs.n	80221b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80220fc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022100:	8802      	ldrh	r2, [r0, #0]
 8022102:	fb11 f109 	smulbb	r1, r1, r9
 8022106:	ea4f 2822 	mov.w	r8, r2, asr #8
 802210a:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 802210e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8022112:	fb08 1803 	mla	r8, r8, r3, r1
 8022116:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 802211a:	10d5      	asrs	r5, r2, #3
 802211c:	fb11 f109 	smulbb	r1, r1, r9
 8022120:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8022124:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022128:	fb05 1503 	mla	r5, r5, r3, r1
 802212c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022130:	00d2      	lsls	r2, r2, #3
 8022132:	fb11 f109 	smulbb	r1, r1, r9
 8022136:	b2d2      	uxtb	r2, r2
 8022138:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802213c:	fb02 1203 	mla	r2, r2, r3, r1
 8022140:	fa1f f888 	uxth.w	r8, r8
 8022144:	b292      	uxth	r2, r2
 8022146:	f108 0101 	add.w	r1, r8, #1
 802214a:	b2ad      	uxth	r5, r5
 802214c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022150:	1c51      	adds	r1, r2, #1
 8022152:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022156:	1c69      	adds	r1, r5, #1
 8022158:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802215c:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8022160:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022164:	096d      	lsrs	r5, r5, #5
 8022166:	ea42 0208 	orr.w	r2, r2, r8
 802216a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802216e:	432a      	orrs	r2, r5
 8022170:	f820 2b02 	strh.w	r2, [r0], #2
 8022174:	e7bd      	b.n	80220f2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8022176:	4a14      	ldr	r2, [pc, #80]	@ (80221c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022178:	42b0      	cmp	r0, r6
 802217a:	d21f      	bcs.n	80221bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802217c:	eb00 050e 	add.w	r5, r0, lr
 8022180:	42a8      	cmp	r0, r5
 8022182:	4621      	mov	r1, r4
 8022184:	f104 0403 	add.w	r4, r4, #3
 8022188:	d210      	bcs.n	80221ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802218a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802218e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022192:	00db      	lsls	r3, r3, #3
 8022194:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022198:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802219c:	430b      	orrs	r3, r1
 802219e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80221a2:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80221a6:	f820 3b02 	strh.w	r3, [r0], #2
 80221aa:	e7e9      	b.n	8022180 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80221ac:	4438      	add	r0, r7
 80221ae:	eb01 040c 	add.w	r4, r1, ip
 80221b2:	e7e1      	b.n	8022178 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80221b4:	4438      	add	r0, r7
 80221b6:	eb01 040c 	add.w	r4, r1, ip
 80221ba:	e796      	b.n	80220ea <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80221bc:	4b03      	ldr	r3, [pc, #12]	@ (80221cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80221be:	6818      	ldr	r0, [r3, #0]
 80221c0:	6803      	ldr	r3, [r0, #0]
 80221c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80221c4:	4798      	blx	r3
 80221c6:	e768      	b.n	802209a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80221c8:	fffff800 	.word	0xfffff800
 80221cc:	2005baa4 	.word	0x2005baa4
 80221d0:	2005ba9e 	.word	0x2005ba9e

080221d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80221d4:	b4f0      	push	{r4, r5, r6, r7}
 80221d6:	4616      	mov	r6, r2
 80221d8:	2e01      	cmp	r6, #1
 80221da:	461c      	mov	r4, r3
 80221dc:	460d      	mov	r5, r1
 80221de:	9a04      	ldr	r2, [sp, #16]
 80221e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80221e4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80221e8:	d012      	beq.n	8022210 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80221ea:	d303      	bcc.n	80221f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80221ec:	2e02      	cmp	r6, #2
 80221ee:	d00a      	beq.n	8022206 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80221f0:	bcf0      	pop	{r4, r5, r6, r7}
 80221f2:	4770      	bx	lr
 80221f4:	6805      	ldr	r5, [r0, #0]
 80221f6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80221fa:	68ed      	ldr	r5, [r5, #12]
 80221fc:	4613      	mov	r3, r2
 80221fe:	46ac      	mov	ip, r5
 8022200:	4622      	mov	r2, r4
 8022202:	bcf0      	pop	{r4, r5, r6, r7}
 8022204:	4760      	bx	ip
 8022206:	4621      	mov	r1, r4
 8022208:	4628      	mov	r0, r5
 802220a:	bcf0      	pop	{r4, r5, r6, r7}
 802220c:	f7ff bd94 	b.w	8021d38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022210:	4621      	mov	r1, r4
 8022212:	4628      	mov	r0, r5
 8022214:	bcf0      	pop	{r4, r5, r6, r7}
 8022216:	f7ff bee5 	b.w	8021fe4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0802221c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022220:	4616      	mov	r6, r2
 8022222:	4681      	mov	r9, r0
 8022224:	b093      	sub	sp, #76	@ 0x4c
 8022226:	6810      	ldr	r0, [r2, #0]
 8022228:	4688      	mov	r8, r1
 802222a:	6851      	ldr	r1, [r2, #4]
 802222c:	ac0e      	add	r4, sp, #56	@ 0x38
 802222e:	c403      	stmia	r4!, {r0, r1}
 8022230:	6818      	ldr	r0, [r3, #0]
 8022232:	6859      	ldr	r1, [r3, #4]
 8022234:	ac10      	add	r4, sp, #64	@ 0x40
 8022236:	c403      	stmia	r4!, {r0, r1}
 8022238:	a80e      	add	r0, sp, #56	@ 0x38
 802223a:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 802223e:	f7f7 f8a1 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022242:	4631      	mov	r1, r6
 8022244:	a810      	add	r0, sp, #64	@ 0x40
 8022246:	f7f7 f8c5 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802224a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 802224e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8022252:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8022256:	4e62      	ldr	r6, [pc, #392]	@ (80223e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8022258:	fb11 2103 	smlabb	r1, r1, r3, r2
 802225c:	4489      	add	r9, r1
 802225e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8022262:	6830      	ldr	r0, [r6, #0]
 8022264:	440a      	add	r2, r1
 8022266:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 802226a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802226e:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8022272:	4413      	add	r3, r2
 8022274:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8022278:	6803      	ldr	r3, [r0, #0]
 802227a:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 802227e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022280:	4798      	blx	r3
 8022282:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8022286:	4f57      	ldr	r7, [pc, #348]	@ (80223e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8022288:	6830      	ldr	r0, [r6, #0]
 802228a:	d01d      	beq.n	80222c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802228c:	2200      	movs	r2, #0
 802228e:	6801      	ldr	r1, [r0, #0]
 8022290:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022294:	220b      	movs	r2, #11
 8022296:	9207      	str	r2, [sp, #28]
 8022298:	883a      	ldrh	r2, [r7, #0]
 802229a:	b2a4      	uxth	r4, r4
 802229c:	9206      	str	r2, [sp, #24]
 802229e:	2201      	movs	r2, #1
 80222a0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80222a4:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 80222a8:	b2ad      	uxth	r5, r5
 80222aa:	9203      	str	r2, [sp, #12]
 80222ac:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80222b0:	9502      	str	r5, [sp, #8]
 80222b2:	9200      	str	r2, [sp, #0]
 80222b4:	9401      	str	r4, [sp, #4]
 80222b6:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 80222b8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80222bc:	4642      	mov	r2, r8
 80222be:	4649      	mov	r1, r9
 80222c0:	47a0      	blx	r4
 80222c2:	b013      	add	sp, #76	@ 0x4c
 80222c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222c8:	6803      	ldr	r3, [r0, #0]
 80222ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222cc:	4798      	blx	r3
 80222ce:	f04f 0e04 	mov.w	lr, #4
 80222d2:	883b      	ldrh	r3, [r7, #0]
 80222d4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80222d8:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80222dc:	435d      	muls	r5, r3
 80222de:	fb03 1202 	mla	r2, r3, r2, r1
 80222e2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80222e6:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80222ea:	920c      	str	r2, [sp, #48]	@ 0x30
 80222ec:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80222f0:	1b12      	subs	r2, r2, r4
 80222f2:	920d      	str	r2, [sp, #52]	@ 0x34
 80222f4:	0062      	lsls	r2, r4, #1
 80222f6:	1b1c      	subs	r4, r3, r4
 80222f8:	0063      	lsls	r3, r4, #1
 80222fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80222fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80222fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022300:	4298      	cmp	r0, r3
 8022302:	d266      	bcs.n	80223d2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8022304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022306:	eb00 0b03 	add.w	fp, r0, r3
 802230a:	4558      	cmp	r0, fp
 802230c:	d25c      	bcs.n	80223c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 802230e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8022312:	fb1e e303 	smlabb	r3, lr, r3, lr
 8022316:	f858 2003 	ldr.w	r2, [r8, r3]
 802231a:	0e11      	lsrs	r1, r2, #24
 802231c:	d012      	beq.n	8022344 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802231e:	29ff      	cmp	r1, #255	@ 0xff
 8022320:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8022324:	d110      	bne.n	8022348 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022326:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802232a:	d10d      	bne.n	8022348 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802232c:	0953      	lsrs	r3, r2, #5
 802232e:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8022332:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022336:	f027 0707 	bic.w	r7, r7, #7
 802233a:	431f      	orrs	r7, r3
 802233c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022340:	433a      	orrs	r2, r7
 8022342:	8002      	strh	r2, [r0, #0]
 8022344:	3002      	adds	r0, #2
 8022346:	e7e0      	b.n	802230a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8022348:	fb0a f101 	mul.w	r1, sl, r1
 802234c:	1c4b      	adds	r3, r1, #1
 802234e:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8022352:	121b      	asrs	r3, r3, #8
 8022354:	b299      	uxth	r1, r3
 8022356:	43db      	mvns	r3, r3
 8022358:	8806      	ldrh	r6, [r0, #0]
 802235a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802235e:	b2d2      	uxtb	r2, r2
 8022360:	fb1c fc01 	smulbb	ip, ip, r1
 8022364:	fb12 f201 	smulbb	r2, r2, r1
 8022368:	1235      	asrs	r5, r6, #8
 802236a:	10f4      	asrs	r4, r6, #3
 802236c:	00f6      	lsls	r6, r6, #3
 802236e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8022372:	b2f6      	uxtb	r6, r6
 8022374:	b2ff      	uxtb	r7, r7
 8022376:	b2db      	uxtb	r3, r3
 8022378:	fb17 f701 	smulbb	r7, r7, r1
 802237c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022380:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022384:	fb05 c503 	mla	r5, r5, r3, ip
 8022388:	fb06 2203 	mla	r2, r6, r3, r2
 802238c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8022390:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022394:	fb04 7403 	mla	r4, r4, r3, r7
 8022398:	b2ad      	uxth	r5, r5
 802239a:	b292      	uxth	r2, r2
 802239c:	f105 0c01 	add.w	ip, r5, #1
 80223a0:	1c57      	adds	r7, r2, #1
 80223a2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80223a6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80223aa:	b2a4      	uxth	r4, r4
 80223ac:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80223b0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80223b4:	433d      	orrs	r5, r7
 80223b6:	1c67      	adds	r7, r4, #1
 80223b8:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80223bc:	0964      	lsrs	r4, r4, #5
 80223be:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80223c2:	4325      	orrs	r5, r4
 80223c4:	8005      	strh	r5, [r0, #0]
 80223c6:	e7bd      	b.n	8022344 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80223c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80223ca:	4418      	add	r0, r3
 80223cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80223ce:	4499      	add	r9, r3
 80223d0:	e795      	b.n	80222fe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80223d2:	4b03      	ldr	r3, [pc, #12]	@ (80223e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80223d4:	6818      	ldr	r0, [r3, #0]
 80223d6:	6803      	ldr	r3, [r0, #0]
 80223d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80223da:	4798      	blx	r3
 80223dc:	e771      	b.n	80222c2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80223de:	bf00      	nop
 80223e0:	2005baa4 	.word	0x2005baa4
 80223e4:	2005ba9e 	.word	0x2005ba9e

080223e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80223e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223ec:	b087      	sub	sp, #28
 80223ee:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80223f2:	4680      	mov	r8, r0
 80223f4:	460d      	mov	r5, r1
 80223f6:	4614      	mov	r4, r2
 80223f8:	2e00      	cmp	r6, #0
 80223fa:	f000 80b9 	beq.w	8022570 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80223fe:	6810      	ldr	r0, [r2, #0]
 8022400:	6851      	ldr	r1, [r2, #4]
 8022402:	af02      	add	r7, sp, #8
 8022404:	c703      	stmia	r7!, {r0, r1}
 8022406:	6818      	ldr	r0, [r3, #0]
 8022408:	6859      	ldr	r1, [r3, #4]
 802240a:	af04      	add	r7, sp, #16
 802240c:	c703      	stmia	r7!, {r0, r1}
 802240e:	a802      	add	r0, sp, #8
 8022410:	f7f6 ffb8 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022414:	4621      	mov	r1, r4
 8022416:	a804      	add	r0, sp, #16
 8022418:	f7f6 ffdc 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802241c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022420:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022424:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8022428:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 802242c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8022430:	eb08 0401 	add.w	r4, r8, r1
 8022434:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022438:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802243c:	440a      	add	r2, r1
 802243e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022442:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022446:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802244a:	4413      	add	r3, r2
 802244c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022450:	4b49      	ldr	r3, [pc, #292]	@ (8022578 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022452:	6818      	ldr	r0, [r3, #0]
 8022454:	6803      	ldr	r3, [r0, #0]
 8022456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022458:	4798      	blx	r3
 802245a:	4b48      	ldr	r3, [pc, #288]	@ (802257c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 802245c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022460:	881a      	ldrh	r2, [r3, #0]
 8022462:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8022466:	2eff      	cmp	r6, #255	@ 0xff
 8022468:	fb02 c101 	mla	r1, r2, r1, ip
 802246c:	fb02 f207 	mul.w	r2, r2, r7
 8022470:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022474:	f105 0104 	add.w	r1, r5, #4
 8022478:	461d      	mov	r5, r3
 802247a:	d05a      	beq.n	8022532 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 802247c:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8022480:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022484:	b2b6      	uxth	r6, r6
 8022486:	fa1f fe8e 	uxth.w	lr, lr
 802248a:	9301      	str	r3, [sp, #4]
 802248c:	4282      	cmp	r2, r0
 802248e:	d96a      	bls.n	8022566 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022490:	eb00 0b0a 	add.w	fp, r0, sl
 8022494:	4583      	cmp	fp, r0
 8022496:	d940      	bls.n	802251a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8022498:	8805      	ldrh	r5, [r0, #0]
 802249a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802249e:	122f      	asrs	r7, r5, #8
 80224a0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80224a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80224a8:	fb17 f70e 	smulbb	r7, r7, lr
 80224ac:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80224b0:	00ed      	lsls	r5, r5, #3
 80224b2:	b2ed      	uxtb	r5, r5
 80224b4:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80224b8:	fb15 f50e 	smulbb	r5, r5, lr
 80224bc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80224c0:	fb0c 7c06 	mla	ip, ip, r6, r7
 80224c4:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80224c8:	10df      	asrs	r7, r3, #3
 80224ca:	00db      	lsls	r3, r3, #3
 80224cc:	fb19 f90e 	smulbb	r9, r9, lr
 80224d0:	b2db      	uxtb	r3, r3
 80224d2:	fb03 5306 	mla	r3, r3, r6, r5
 80224d6:	fa1f fc8c 	uxth.w	ip, ip
 80224da:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80224de:	fb07 9706 	mla	r7, r7, r6, r9
 80224e2:	f10c 0901 	add.w	r9, ip, #1
 80224e6:	b29b      	uxth	r3, r3
 80224e8:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80224ec:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80224f0:	f103 0c01 	add.w	ip, r3, #1
 80224f4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80224f8:	b2bf      	uxth	r7, r7
 80224fa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80224fe:	ea4c 0c09 	orr.w	ip, ip, r9
 8022502:	f107 0901 	add.w	r9, r7, #1
 8022506:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 802250a:	097f      	lsrs	r7, r7, #5
 802250c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8022510:	ea4c 0c07 	orr.w	ip, ip, r7
 8022514:	f820 cb02 	strh.w	ip, [r0], #2
 8022518:	e7bc      	b.n	8022494 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 802251a:	9b01      	ldr	r3, [sp, #4]
 802251c:	881b      	ldrh	r3, [r3, #0]
 802251e:	eba3 0308 	sub.w	r3, r3, r8
 8022522:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022526:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802252a:	eba3 0308 	sub.w	r3, r3, r8
 802252e:	441c      	add	r4, r3
 8022530:	e7ac      	b.n	802248c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8022532:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022536:	4282      	cmp	r2, r0
 8022538:	d915      	bls.n	8022566 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 802253a:	eb00 060a 	add.w	r6, r0, sl
 802253e:	4286      	cmp	r6, r0
 8022540:	d906      	bls.n	8022550 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8022542:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022546:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802254a:	f820 3b02 	strh.w	r3, [r0], #2
 802254e:	e7f6      	b.n	802253e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8022550:	882b      	ldrh	r3, [r5, #0]
 8022552:	eba3 0308 	sub.w	r3, r3, r8
 8022556:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802255a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802255e:	eba3 0308 	sub.w	r3, r3, r8
 8022562:	441c      	add	r4, r3
 8022564:	e7e7      	b.n	8022536 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8022566:	4b04      	ldr	r3, [pc, #16]	@ (8022578 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022568:	6818      	ldr	r0, [r3, #0]
 802256a:	6803      	ldr	r3, [r0, #0]
 802256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802256e:	4798      	blx	r3
 8022570:	b007      	add	sp, #28
 8022572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022576:	bf00      	nop
 8022578:	2005baa4 	.word	0x2005baa4
 802257c:	2005ba9e 	.word	0x2005ba9e

08022580 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022584:	b091      	sub	sp, #68	@ 0x44
 8022586:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 802258a:	4680      	mov	r8, r0
 802258c:	460f      	mov	r7, r1
 802258e:	4614      	mov	r4, r2
 8022590:	2d00      	cmp	r5, #0
 8022592:	d051      	beq.n	8022638 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022594:	6810      	ldr	r0, [r2, #0]
 8022596:	6851      	ldr	r1, [r2, #4]
 8022598:	ae0c      	add	r6, sp, #48	@ 0x30
 802259a:	c603      	stmia	r6!, {r0, r1}
 802259c:	6818      	ldr	r0, [r3, #0]
 802259e:	6859      	ldr	r1, [r3, #4]
 80225a0:	ae0e      	add	r6, sp, #56	@ 0x38
 80225a2:	c603      	stmia	r6!, {r0, r1}
 80225a4:	a80c      	add	r0, sp, #48	@ 0x30
 80225a6:	f7f6 feed 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80225aa:	4621      	mov	r1, r4
 80225ac:	a80e      	add	r0, sp, #56	@ 0x38
 80225ae:	f7f6 ff11 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80225b2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80225b6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80225ba:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80225be:	f8df 91dc 	ldr.w	r9, [pc, #476]	@ 802279c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80225c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80225c6:	eb08 0401 	add.w	r4, r8, r1
 80225ca:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80225ce:	f8d9 0000 	ldr.w	r0, [r9]
 80225d2:	440a      	add	r2, r1
 80225d4:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80225d8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80225dc:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 80225e0:	4413      	add	r3, r2
 80225e2:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80225e6:	6803      	ldr	r3, [r0, #0]
 80225e8:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 80225ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80225ee:	4798      	blx	r3
 80225f0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80225f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80227a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80225f8:	f8d9 0000 	ldr.w	r0, [r9]
 80225fc:	d01f      	beq.n	802263e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80225fe:	2200      	movs	r2, #0
 8022600:	6801      	ldr	r1, [r0, #0]
 8022602:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022606:	220b      	movs	r2, #11
 8022608:	9207      	str	r2, [sp, #28]
 802260a:	f8b8 2000 	ldrh.w	r2, [r8]
 802260e:	b2b6      	uxth	r6, r6
 8022610:	9206      	str	r2, [sp, #24]
 8022612:	2201      	movs	r2, #1
 8022614:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8022618:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 802261c:	9601      	str	r6, [sp, #4]
 802261e:	9203      	str	r2, [sp, #12]
 8022620:	fa1f f28a 	uxth.w	r2, sl
 8022624:	9202      	str	r2, [sp, #8]
 8022626:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802262a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 802262e:	9200      	str	r2, [sp, #0]
 8022630:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 8022632:	463a      	mov	r2, r7
 8022634:	4621      	mov	r1, r4
 8022636:	47a8      	blx	r5
 8022638:	b011      	add	sp, #68	@ 0x44
 802263a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802263e:	6803      	ldr	r3, [r0, #0]
 8022640:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8022644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022646:	4798      	blx	r3
 8022648:	f8b8 2000 	ldrh.w	r2, [r8]
 802264c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022650:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8022654:	2dff      	cmp	r5, #255	@ 0xff
 8022656:	fb02 1303 	mla	r3, r2, r3, r1
 802265a:	fb0a fa02 	mul.w	sl, sl, r2
 802265e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022662:	d062      	beq.n	802272a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8022664:	ea6f 0c05 	mvn.w	ip, r5
 8022668:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802266c:	930a      	str	r3, [sp, #40]	@ 0x28
 802266e:	b2ad      	uxth	r5, r5
 8022670:	fa5f fc8c 	uxtb.w	ip, ip
 8022674:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8022678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802267a:	4298      	cmp	r0, r3
 802267c:	f080 8085 	bcs.w	802278a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022680:	eb00 0b09 	add.w	fp, r0, r9
 8022684:	4558      	cmp	r0, fp
 8022686:	d246      	bcs.n	8022716 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8022688:	2303      	movs	r3, #3
 802268a:	2204      	movs	r2, #4
 802268c:	f814 eb01 	ldrb.w	lr, [r4], #1
 8022690:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8022694:	eb07 0a0e 	add.w	sl, r7, lr
 8022698:	f89a 8002 	ldrb.w	r8, [sl, #2]
 802269c:	8803      	ldrh	r3, [r0, #0]
 802269e:	fb18 f805 	smulbb	r8, r8, r5
 80226a2:	1219      	asrs	r1, r3, #8
 80226a4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80226a8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80226ac:	fb01 810c 	mla	r1, r1, ip, r8
 80226b0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80226b4:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80226b8:	fb1e fe05 	smulbb	lr, lr, r5
 80226bc:	fb18 f805 	smulbb	r8, r8, r5
 80226c0:	10da      	asrs	r2, r3, #3
 80226c2:	00db      	lsls	r3, r3, #3
 80226c4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80226c8:	b2db      	uxtb	r3, r3
 80226ca:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80226ce:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80226d2:	fb02 820c 	mla	r2, r2, ip, r8
 80226d6:	fb03 e30c 	mla	r3, r3, ip, lr
 80226da:	b289      	uxth	r1, r1
 80226dc:	b292      	uxth	r2, r2
 80226de:	b29b      	uxth	r3, r3
 80226e0:	f101 0801 	add.w	r8, r1, #1
 80226e4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80226e8:	f103 0e01 	add.w	lr, r3, #1
 80226ec:	f102 0801 	add.w	r8, r2, #1
 80226f0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80226f4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80226f8:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80226fc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022700:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8022704:	ea4e 0101 	orr.w	r1, lr, r1
 8022708:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802270c:	ea41 0108 	orr.w	r1, r1, r8
 8022710:	f820 1b02 	strh.w	r1, [r0], #2
 8022714:	e7b6      	b.n	8022684 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8022716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022718:	881b      	ldrh	r3, [r3, #0]
 802271a:	1b9b      	subs	r3, r3, r6
 802271c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022720:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022724:	1b9b      	subs	r3, r3, r6
 8022726:	441c      	add	r4, r3
 8022728:	e7a6      	b.n	8022678 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 802272a:	2203      	movs	r2, #3
 802272c:	2504      	movs	r5, #4
 802272e:	491a      	ldr	r1, [pc, #104]	@ (8022798 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8022730:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8022734:	4550      	cmp	r0, sl
 8022736:	d228      	bcs.n	802278a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022738:	eb00 0c09 	add.w	ip, r0, r9
 802273c:	4560      	cmp	r0, ip
 802273e:	4623      	mov	r3, r4
 8022740:	d219      	bcs.n	8022776 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8022742:	f893 e000 	ldrb.w	lr, [r3]
 8022746:	3401      	adds	r4, #1
 8022748:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 802274c:	eb07 0b0e 	add.w	fp, r7, lr
 8022750:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022754:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022758:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802275c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022760:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8022764:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8022768:	ea43 030b 	orr.w	r3, r3, fp
 802276c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8022770:	f820 3b02 	strh.w	r3, [r0], #2
 8022774:	e7e2      	b.n	802273c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8022776:	f8b8 3000 	ldrh.w	r3, [r8]
 802277a:	1b9b      	subs	r3, r3, r6
 802277c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022780:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022784:	1b9b      	subs	r3, r3, r6
 8022786:	441c      	add	r4, r3
 8022788:	e7d4      	b.n	8022734 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802278a:	4b04      	ldr	r3, [pc, #16]	@ (802279c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 802278c:	6818      	ldr	r0, [r3, #0]
 802278e:	6803      	ldr	r3, [r0, #0]
 8022790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022792:	4798      	blx	r3
 8022794:	e750      	b.n	8022638 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022796:	bf00      	nop
 8022798:	fffff800 	.word	0xfffff800
 802279c:	2005baa4 	.word	0x2005baa4
 80227a0:	2005ba9e 	.word	0x2005ba9e

080227a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80227a4:	b4f0      	push	{r4, r5, r6, r7}
 80227a6:	460c      	mov	r4, r1
 80227a8:	4611      	mov	r1, r2
 80227aa:	780f      	ldrb	r7, [r1, #0]
 80227ac:	461a      	mov	r2, r3
 80227ae:	2f01      	cmp	r7, #1
 80227b0:	9b04      	ldr	r3, [sp, #16]
 80227b2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80227b6:	784e      	ldrb	r6, [r1, #1]
 80227b8:	d038      	beq.n	802282c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 80227ba:	d31f      	bcc.n	80227fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 80227bc:	2f02      	cmp	r7, #2
 80227be:	d14d      	bne.n	802285c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80227c0:	2e03      	cmp	r6, #3
 80227c2:	d84b      	bhi.n	802285c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80227c4:	e8df f006 	tbb	[pc, r6]
 80227c8:	17140702 	.word	0x17140702
 80227cc:	9504      	str	r5, [sp, #16]
 80227ce:	4620      	mov	r0, r4
 80227d0:	bcf0      	pop	{r4, r5, r6, r7}
 80227d2:	f7ff be09 	b.w	80223e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80227d6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80227d8:	2800      	cmp	r0, #0
 80227da:	d03f      	beq.n	802285c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80227dc:	6806      	ldr	r6, [r0, #0]
 80227de:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80227e2:	68b5      	ldr	r5, [r6, #8]
 80227e4:	4613      	mov	r3, r2
 80227e6:	46ac      	mov	ip, r5
 80227e8:	460a      	mov	r2, r1
 80227ea:	4621      	mov	r1, r4
 80227ec:	bcf0      	pop	{r4, r5, r6, r7}
 80227ee:	4760      	bx	ip
 80227f0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80227f4:	e7f0      	b.n	80227d8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80227f6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80227fa:	e7ed      	b.n	80227d8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80227fc:	2e03      	cmp	r6, #3
 80227fe:	d82d      	bhi.n	802285c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022800:	e8df f006 	tbb	[pc, r6]
 8022804:	110e0702 	.word	0x110e0702
 8022808:	9504      	str	r5, [sp, #16]
 802280a:	4620      	mov	r0, r4
 802280c:	bcf0      	pop	{r4, r5, r6, r7}
 802280e:	f7ff bd05 	b.w	802221c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022812:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8022814:	b310      	cbz	r0, 802285c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022816:	6806      	ldr	r6, [r0, #0]
 8022818:	e9cd 3504 	strd	r3, r5, [sp, #16]
 802281c:	68f5      	ldr	r5, [r6, #12]
 802281e:	e7e1      	b.n	80227e4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022820:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8022824:	e7f6      	b.n	8022814 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8022826:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 802282a:	e7f3      	b.n	8022814 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 802282c:	2e03      	cmp	r6, #3
 802282e:	d815      	bhi.n	802285c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022830:	e8df f006 	tbb	[pc, r6]
 8022834:	110e0702 	.word	0x110e0702
 8022838:	9504      	str	r5, [sp, #16]
 802283a:	4620      	mov	r0, r4
 802283c:	bcf0      	pop	{r4, r5, r6, r7}
 802283e:	f7ff be9f 	b.w	8022580 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022842:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8022844:	b150      	cbz	r0, 802285c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022846:	6806      	ldr	r6, [r0, #0]
 8022848:	e9cd 3504 	strd	r3, r5, [sp, #16]
 802284c:	6935      	ldr	r5, [r6, #16]
 802284e:	e7c9      	b.n	80227e4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022850:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8022854:	e7f6      	b.n	8022844 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8022856:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 802285a:	e7f3      	b.n	8022844 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 802285c:	bcf0      	pop	{r4, r5, r6, r7}
 802285e:	4770      	bx	lr

08022860 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022864:	4617      	mov	r7, r2
 8022866:	4604      	mov	r4, r0
 8022868:	460e      	mov	r6, r1
 802286a:	b087      	sub	sp, #28
 802286c:	6810      	ldr	r0, [r2, #0]
 802286e:	6851      	ldr	r1, [r2, #4]
 8022870:	ad02      	add	r5, sp, #8
 8022872:	c503      	stmia	r5!, {r0, r1}
 8022874:	6818      	ldr	r0, [r3, #0]
 8022876:	6859      	ldr	r1, [r3, #4]
 8022878:	ad04      	add	r5, sp, #16
 802287a:	c503      	stmia	r5!, {r0, r1}
 802287c:	a802      	add	r0, sp, #8
 802287e:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8022882:	f7f6 fd7f 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022886:	4639      	mov	r1, r7
 8022888:	a804      	add	r0, sp, #16
 802288a:	f7f6 fda3 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802288e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022892:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022896:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802289a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802289e:	fb11 2103 	smlabb	r1, r1, r3, r2
 80228a2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80228a6:	440e      	add	r6, r1
 80228a8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80228ac:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80228b0:	440a      	add	r2, r1
 80228b2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80228b6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80228ba:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 8022aa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80228be:	4413      	add	r3, r2
 80228c0:	f8ad 3012 	strh.w	r3, [sp, #18]
 80228c4:	4b77      	ldr	r3, [pc, #476]	@ (8022aa4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80228c6:	6818      	ldr	r0, [r3, #0]
 80228c8:	6803      	ldr	r3, [r0, #0]
 80228ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80228cc:	4798      	blx	r3
 80228ce:	f8b9 b000 	ldrh.w	fp, [r9]
 80228d2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80228d6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80228da:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80228de:	fb0b 2303 	mla	r3, fp, r3, r2
 80228e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80228e6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80228ea:	fb05 f50b 	mul.w	r5, r5, fp
 80228ee:	9300      	str	r3, [sp, #0]
 80228f0:	d069      	beq.n	80229c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80228f2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80228f6:	4558      	cmp	r0, fp
 80228f8:	f080 80cc 	bcs.w	8022a94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80228fc:	4631      	mov	r1, r6
 80228fe:	9b00      	ldr	r3, [sp, #0]
 8022900:	18c3      	adds	r3, r0, r3
 8022902:	9301      	str	r3, [sp, #4]
 8022904:	9b01      	ldr	r3, [sp, #4]
 8022906:	4298      	cmp	r0, r3
 8022908:	d24f      	bcs.n	80229aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802290a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802290e:	2a00      	cmp	r2, #0
 8022910:	d048      	beq.n	80229a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022912:	fb0a f202 	mul.w	r2, sl, r2
 8022916:	1c53      	adds	r3, r2, #1
 8022918:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802291c:	121b      	asrs	r3, r3, #8
 802291e:	d041      	beq.n	80229a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022920:	b29e      	uxth	r6, r3
 8022922:	43db      	mvns	r3, r3
 8022924:	8802      	ldrh	r2, [r0, #0]
 8022926:	b2db      	uxtb	r3, r3
 8022928:	1215      	asrs	r5, r2, #8
 802292a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802292e:	f8b4 c000 	ldrh.w	ip, [r4]
 8022932:	fb15 f503 	smulbb	r5, r5, r3
 8022936:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802293a:	00d2      	lsls	r2, r2, #3
 802293c:	b2d2      	uxtb	r2, r2
 802293e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022942:	fb12 f203 	smulbb	r2, r2, r3
 8022946:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802294a:	fb07 5706 	mla	r7, r7, r6, r5
 802294e:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8022952:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022956:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802295a:	fb1e fe03 	smulbb	lr, lr, r3
 802295e:	fa5f fc8c 	uxtb.w	ip, ip
 8022962:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022966:	b2bf      	uxth	r7, r7
 8022968:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802296c:	fb05 e506 	mla	r5, r5, r6, lr
 8022970:	f107 0e01 	add.w	lr, r7, #1
 8022974:	fa1f fc8c 	uxth.w	ip, ip
 8022978:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 802297c:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8022980:	f10c 0701 	add.w	r7, ip, #1
 8022984:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022988:	b2ad      	uxth	r5, r5
 802298a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802298e:	ea47 070e 	orr.w	r7, r7, lr
 8022992:	f105 0e01 	add.w	lr, r5, #1
 8022996:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802299a:	096d      	lsrs	r5, r5, #5
 802299c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80229a0:	432f      	orrs	r7, r5
 80229a2:	8007      	strh	r7, [r0, #0]
 80229a4:	3002      	adds	r0, #2
 80229a6:	3402      	adds	r4, #2
 80229a8:	e7ac      	b.n	8022904 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80229aa:	f8b9 3000 	ldrh.w	r3, [r9]
 80229ae:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80229b2:	eba3 0308 	sub.w	r3, r3, r8
 80229b6:	eba6 0608 	sub.w	r6, r6, r8
 80229ba:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80229be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80229c2:	440e      	add	r6, r1
 80229c4:	e797      	b.n	80228f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80229c6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80229ca:	42a8      	cmp	r0, r5
 80229cc:	d262      	bcs.n	8022a94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80229ce:	4631      	mov	r1, r6
 80229d0:	9b00      	ldr	r3, [sp, #0]
 80229d2:	eb00 0b03 	add.w	fp, r0, r3
 80229d6:	4558      	cmp	r0, fp
 80229d8:	d24e      	bcs.n	8022a78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80229da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80229de:	b12b      	cbz	r3, 80229ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80229e0:	2bff      	cmp	r3, #255	@ 0xff
 80229e2:	f8b4 e000 	ldrh.w	lr, [r4]
 80229e6:	d104      	bne.n	80229f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80229e8:	f8a0 e000 	strh.w	lr, [r0]
 80229ec:	3002      	adds	r0, #2
 80229ee:	3402      	adds	r4, #2
 80229f0:	e7f1      	b.n	80229d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80229f2:	b29f      	uxth	r7, r3
 80229f4:	43db      	mvns	r3, r3
 80229f6:	8802      	ldrh	r2, [r0, #0]
 80229f8:	b2db      	uxtb	r3, r3
 80229fa:	1216      	asrs	r6, r2, #8
 80229fc:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8022a00:	fb16 f603 	smulbb	r6, r6, r3
 8022a04:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022a08:	00d2      	lsls	r2, r2, #3
 8022a0a:	b2d2      	uxtb	r2, r2
 8022a0c:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8022a10:	fb1a fa03 	smulbb	sl, sl, r3
 8022a14:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022a18:	fb12 f303 	smulbb	r3, r2, r3
 8022a1c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8022a20:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022a24:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022a28:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022a2c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8022a30:	fa5f fe8e 	uxtb.w	lr, lr
 8022a34:	fb06 a607 	mla	r6, r6, r7, sl
 8022a38:	fb0e 3307 	mla	r3, lr, r7, r3
 8022a3c:	fa1f fc8c 	uxth.w	ip, ip
 8022a40:	f10c 0201 	add.w	r2, ip, #1
 8022a44:	b2b6      	uxth	r6, r6
 8022a46:	b29b      	uxth	r3, r3
 8022a48:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022a4c:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8022a50:	f106 0a01 	add.w	sl, r6, #1
 8022a54:	f103 0c01 	add.w	ip, r3, #1
 8022a58:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022a5c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022a60:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022a64:	0976      	lsrs	r6, r6, #5
 8022a66:	ea4c 0c02 	orr.w	ip, ip, r2
 8022a6a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8022a6e:	ea4c 0c06 	orr.w	ip, ip, r6
 8022a72:	f8a0 c000 	strh.w	ip, [r0]
 8022a76:	e7b9      	b.n	80229ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022a78:	f8b9 3000 	ldrh.w	r3, [r9]
 8022a7c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022a80:	eba3 0308 	sub.w	r3, r3, r8
 8022a84:	eba6 0608 	sub.w	r6, r6, r8
 8022a88:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022a8c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a90:	440e      	add	r6, r1
 8022a92:	e79a      	b.n	80229ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022a94:	4b03      	ldr	r3, [pc, #12]	@ (8022aa4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022a96:	6818      	ldr	r0, [r3, #0]
 8022a98:	6803      	ldr	r3, [r0, #0]
 8022a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a9c:	4798      	blx	r3
 8022a9e:	b007      	add	sp, #28
 8022aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022aa4:	2005baa4 	.word	0x2005baa4
 8022aa8:	2005ba9e 	.word	0x2005ba9e

08022aac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ab0:	b089      	sub	sp, #36	@ 0x24
 8022ab2:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8022ab6:	4607      	mov	r7, r0
 8022ab8:	4688      	mov	r8, r1
 8022aba:	4692      	mov	sl, r2
 8022abc:	4699      	mov	r9, r3
 8022abe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022ac0:	2e00      	cmp	r6, #0
 8022ac2:	d048      	beq.n	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022ac4:	4608      	mov	r0, r1
 8022ac6:	f7fa f823 	bl	801cb10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022aca:	4605      	mov	r5, r0
 8022acc:	4640      	mov	r0, r8
 8022ace:	f7fa f853 	bl	801cb78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022ad2:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022ad6:	4640      	mov	r0, r8
 8022ad8:	f8ad a008 	strh.w	sl, [sp, #8]
 8022adc:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022ae0:	f8ad 900a 	strh.w	r9, [sp, #10]
 8022ae4:	f7fa f906 	bl	801ccf4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022ae8:	4605      	mov	r5, r0
 8022aea:	4640      	mov	r0, r8
 8022aec:	f7fa f932 	bl	801cd54 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022af0:	4682      	mov	sl, r0
 8022af2:	4640      	mov	r0, r8
 8022af4:	f7fa f982 	bl	801cdfc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022af8:	2810      	cmp	r0, #16
 8022afa:	d82c      	bhi.n	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022afc:	e8df f010 	tbh	[pc, r0, lsl #1]
 8022b00:	00ba00ca 	.word	0x00ba00ca
 8022b04:	002b0011 	.word	0x002b0011
 8022b08:	002b002b 	.word	0x002b002b
 8022b0c:	002b002b 	.word	0x002b002b
 8022b10:	002b002b 	.word	0x002b002b
 8022b14:	00c1002b 	.word	0x00c1002b
 8022b18:	002b002b 	.word	0x002b002b
 8022b1c:	002b0180 	.word	0x002b0180
 8022b20:	0173      	.short	0x0173
 8022b22:	4bbc      	ldr	r3, [pc, #752]	@ (8022e14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8022b24:	6818      	ldr	r0, [r3, #0]
 8022b26:	6803      	ldr	r3, [r0, #0]
 8022b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022b2a:	4798      	blx	r3
 8022b2c:	2eff      	cmp	r6, #255	@ 0xff
 8022b2e:	d101      	bne.n	8022b34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8022b30:	0683      	lsls	r3, r0, #26
 8022b32:	d506      	bpl.n	8022b42 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8022b34:	4633      	mov	r3, r6
 8022b36:	4622      	mov	r2, r4
 8022b38:	a902      	add	r1, sp, #8
 8022b3a:	4628      	mov	r0, r5
 8022b3c:	f7ff f8fc 	bl	8021d38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022b40:	e009      	b.n	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022b42:	4640      	mov	r0, r8
 8022b44:	f7fa f89e 	bl	801cc84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022b48:	b940      	cbnz	r0, 8022b5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8022b4a:	4623      	mov	r3, r4
 8022b4c:	aa02      	add	r2, sp, #8
 8022b4e:	4629      	mov	r1, r5
 8022b50:	4638      	mov	r0, r7
 8022b52:	f7ff f9d7 	bl	8021f04 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022b56:	b009      	add	sp, #36	@ 0x24
 8022b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b5c:	f10d 0918 	add.w	r9, sp, #24
 8022b60:	4641      	mov	r1, r8
 8022b62:	4648      	mov	r0, r9
 8022b64:	f10d 0810 	add.w	r8, sp, #16
 8022b68:	f7fa f83a 	bl	801cbe0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022b6c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8022b70:	e888 0003 	stmia.w	r8, {r0, r1}
 8022b74:	4640      	mov	r0, r8
 8022b76:	4621      	mov	r1, r4
 8022b78:	f7f1 fa6e 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 8022b7c:	4640      	mov	r0, r8
 8022b7e:	f7f1 faae 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 8022b82:	2800      	cmp	r0, #0
 8022b84:	d1d6      	bne.n	8022b34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8022b86:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022b8a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022b8e:	4293      	cmp	r3, r2
 8022b90:	dd12      	ble.n	8022bb8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8022b92:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022b96:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022b9a:	1a9b      	subs	r3, r3, r2
 8022b9c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022ba0:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022ba4:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022ba8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022bac:	464a      	mov	r2, r9
 8022bae:	4633      	mov	r3, r6
 8022bb0:	a902      	add	r1, sp, #8
 8022bb2:	4628      	mov	r0, r5
 8022bb4:	f7ff f8c0 	bl	8021d38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022bb8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022bbc:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022bc0:	4293      	cmp	r3, r2
 8022bc2:	dd12      	ble.n	8022bea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8022bc4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022bc8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022bcc:	1a9b      	subs	r3, r3, r2
 8022bce:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022bd2:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022bd6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022bda:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022bde:	23ff      	movs	r3, #255	@ 0xff
 8022be0:	464a      	mov	r2, r9
 8022be2:	a902      	add	r1, sp, #8
 8022be4:	4628      	mov	r0, r5
 8022be6:	f7ff f8a7 	bl	8021d38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022bea:	4643      	mov	r3, r8
 8022bec:	aa02      	add	r2, sp, #8
 8022bee:	4629      	mov	r1, r5
 8022bf0:	4638      	mov	r0, r7
 8022bf2:	f7ff f987 	bl	8021f04 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022bf6:	88a2      	ldrh	r2, [r4, #4]
 8022bf8:	8823      	ldrh	r3, [r4, #0]
 8022bfa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022bfe:	4413      	add	r3, r2
 8022c00:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022c04:	b29b      	uxth	r3, r3
 8022c06:	440a      	add	r2, r1
 8022c08:	b292      	uxth	r2, r2
 8022c0a:	b211      	sxth	r1, r2
 8022c0c:	b218      	sxth	r0, r3
 8022c0e:	4288      	cmp	r0, r1
 8022c10:	dd12      	ble.n	8022c38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8022c12:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022c16:	1a9b      	subs	r3, r3, r2
 8022c18:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8022c1c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022c20:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022c24:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022c28:	23ff      	movs	r3, #255	@ 0xff
 8022c2a:	464a      	mov	r2, r9
 8022c2c:	a902      	add	r1, sp, #8
 8022c2e:	4628      	mov	r0, r5
 8022c30:	f8ad 601a 	strh.w	r6, [sp, #26]
 8022c34:	f7ff f880 	bl	8021d38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022c38:	88e2      	ldrh	r2, [r4, #6]
 8022c3a:	8863      	ldrh	r3, [r4, #2]
 8022c3c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022c40:	4413      	add	r3, r2
 8022c42:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022c46:	b29b      	uxth	r3, r3
 8022c48:	440a      	add	r2, r1
 8022c4a:	b292      	uxth	r2, r2
 8022c4c:	b211      	sxth	r1, r2
 8022c4e:	b218      	sxth	r0, r3
 8022c50:	4288      	cmp	r0, r1
 8022c52:	dd80      	ble.n	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022c54:	f9b4 6000 	ldrsh.w	r6, [r4]
 8022c58:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022c5c:	1a9b      	subs	r3, r3, r2
 8022c5e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022c62:	f8ad 6018 	strh.w	r6, [sp, #24]
 8022c66:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022c6a:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022c6e:	23ff      	movs	r3, #255	@ 0xff
 8022c70:	464a      	mov	r2, r9
 8022c72:	e761      	b.n	8022b38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8022c74:	4633      	mov	r3, r6
 8022c76:	4622      	mov	r2, r4
 8022c78:	a902      	add	r1, sp, #8
 8022c7a:	4628      	mov	r0, r5
 8022c7c:	f7ff f9b2 	bl	8021fe4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022c80:	e769      	b.n	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022c82:	e9cd 4600 	strd	r4, r6, [sp]
 8022c86:	ab02      	add	r3, sp, #8
 8022c88:	4652      	mov	r2, sl
 8022c8a:	4629      	mov	r1, r5
 8022c8c:	4638      	mov	r0, r7
 8022c8e:	f7ff fd89 	bl	80227a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022c92:	e760      	b.n	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022c94:	4640      	mov	r0, r8
 8022c96:	f7f9 fff5 	bl	801cc84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022c9a:	b948      	cbnz	r0, 8022cb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8022c9c:	683b      	ldr	r3, [r7, #0]
 8022c9e:	e9cd 6000 	strd	r6, r0, [sp]
 8022ca2:	aa02      	add	r2, sp, #8
 8022ca4:	68de      	ldr	r6, [r3, #12]
 8022ca6:	4629      	mov	r1, r5
 8022ca8:	4623      	mov	r3, r4
 8022caa:	4638      	mov	r0, r7
 8022cac:	47b0      	blx	r6
 8022cae:	e752      	b.n	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022cb0:	f10d 0918 	add.w	r9, sp, #24
 8022cb4:	4641      	mov	r1, r8
 8022cb6:	4648      	mov	r0, r9
 8022cb8:	f10d 0810 	add.w	r8, sp, #16
 8022cbc:	f7f9 ff90 	bl	801cbe0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022cc0:	e899 0003 	ldmia.w	r9, {r0, r1}
 8022cc4:	e888 0003 	stmia.w	r8, {r0, r1}
 8022cc8:	4640      	mov	r0, r8
 8022cca:	4621      	mov	r1, r4
 8022ccc:	f7f1 f9c4 	bl	8014058 <_ZN8touchgfx4RectaNERKS0_>
 8022cd0:	4640      	mov	r0, r8
 8022cd2:	f7f1 fa04 	bl	80140de <_ZNK8touchgfx4Rect7isEmptyEv>
 8022cd6:	b138      	cbz	r0, 8022ce8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8022cd8:	4623      	mov	r3, r4
 8022cda:	9600      	str	r6, [sp, #0]
 8022cdc:	aa02      	add	r2, sp, #8
 8022cde:	4651      	mov	r1, sl
 8022ce0:	4628      	mov	r0, r5
 8022ce2:	f7ff fdbd 	bl	8022860 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022ce6:	e736      	b.n	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022ce8:	683b      	ldr	r3, [r7, #0]
 8022cea:	e9cd 6000 	strd	r6, r0, [sp]
 8022cee:	aa02      	add	r2, sp, #8
 8022cf0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8022cf4:	4629      	mov	r1, r5
 8022cf6:	4643      	mov	r3, r8
 8022cf8:	4638      	mov	r0, r7
 8022cfa:	47d8      	blx	fp
 8022cfc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022d00:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022d04:	4293      	cmp	r3, r2
 8022d06:	dd13      	ble.n	8022d30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8022d08:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022d0c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022d10:	1a9b      	subs	r3, r3, r2
 8022d12:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022d16:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022d1a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022d1e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022d22:	9600      	str	r6, [sp, #0]
 8022d24:	464b      	mov	r3, r9
 8022d26:	aa02      	add	r2, sp, #8
 8022d28:	4651      	mov	r1, sl
 8022d2a:	4628      	mov	r0, r5
 8022d2c:	f7ff fd98 	bl	8022860 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022d30:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022d34:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022d38:	4293      	cmp	r3, r2
 8022d3a:	dd13      	ble.n	8022d64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8022d3c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022d40:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022d44:	1a9b      	subs	r3, r3, r2
 8022d46:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022d4a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022d4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022d52:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022d56:	9600      	str	r6, [sp, #0]
 8022d58:	464b      	mov	r3, r9
 8022d5a:	aa02      	add	r2, sp, #8
 8022d5c:	4651      	mov	r1, sl
 8022d5e:	4628      	mov	r0, r5
 8022d60:	f7ff fd7e 	bl	8022860 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022d64:	88a2      	ldrh	r2, [r4, #4]
 8022d66:	8823      	ldrh	r3, [r4, #0]
 8022d68:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022d6c:	4413      	add	r3, r2
 8022d6e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022d72:	b29b      	uxth	r3, r3
 8022d74:	440a      	add	r2, r1
 8022d76:	b292      	uxth	r2, r2
 8022d78:	b211      	sxth	r1, r2
 8022d7a:	b218      	sxth	r0, r3
 8022d7c:	4288      	cmp	r0, r1
 8022d7e:	dd13      	ble.n	8022da8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8022d80:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022d84:	1a9b      	subs	r3, r3, r2
 8022d86:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8022d8a:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022d8e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022d92:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022d96:	9600      	str	r6, [sp, #0]
 8022d98:	464b      	mov	r3, r9
 8022d9a:	aa02      	add	r2, sp, #8
 8022d9c:	4651      	mov	r1, sl
 8022d9e:	4628      	mov	r0, r5
 8022da0:	f8ad 701a 	strh.w	r7, [sp, #26]
 8022da4:	f7ff fd5c 	bl	8022860 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022da8:	88e2      	ldrh	r2, [r4, #6]
 8022daa:	8863      	ldrh	r3, [r4, #2]
 8022dac:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022db0:	4413      	add	r3, r2
 8022db2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022db6:	b29b      	uxth	r3, r3
 8022db8:	440a      	add	r2, r1
 8022dba:	b292      	uxth	r2, r2
 8022dbc:	b211      	sxth	r1, r2
 8022dbe:	b218      	sxth	r0, r3
 8022dc0:	4288      	cmp	r0, r1
 8022dc2:	f77f aec8 	ble.w	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022dc6:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022dca:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022dce:	1a9b      	subs	r3, r3, r2
 8022dd0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022dd4:	f8ad 7018 	strh.w	r7, [sp, #24]
 8022dd8:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022ddc:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022de0:	9600      	str	r6, [sp, #0]
 8022de2:	464b      	mov	r3, r9
 8022de4:	e77a      	b.n	8022cdc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8022de6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8022dea:	2800      	cmp	r0, #0
 8022dec:	f43f aeb3 	beq.w	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022df0:	6803      	ldr	r3, [r0, #0]
 8022df2:	9600      	str	r6, [sp, #0]
 8022df4:	68de      	ldr	r6, [r3, #12]
 8022df6:	4623      	mov	r3, r4
 8022df8:	aa02      	add	r2, sp, #8
 8022dfa:	4629      	mov	r1, r5
 8022dfc:	47b0      	blx	r6
 8022dfe:	e6aa      	b.n	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022e00:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8022e04:	2800      	cmp	r0, #0
 8022e06:	f43f aea6 	beq.w	8022b56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022e0a:	6803      	ldr	r3, [r0, #0]
 8022e0c:	9600      	str	r6, [sp, #0]
 8022e0e:	689e      	ldr	r6, [r3, #8]
 8022e10:	e7f1      	b.n	8022df6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8022e12:	bf00      	nop
 8022e14:	2005baa4 	.word	0x2005baa4

08022e18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8022e18:	b180      	cbz	r0, 8022e3c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8022e1a:	2903      	cmp	r1, #3
 8022e1c:	d81c      	bhi.n	8022e58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022e1e:	e8df f001 	tbb	[pc, r1]
 8022e22:	1d02      	.short	0x1d02
 8022e24:	1f08      	.short	0x1f08
 8022e26:	4b10      	ldr	r3, [pc, #64]	@ (8022e68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022e28:	8818      	ldrh	r0, [r3, #0]
 8022e2a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e2e:	4240      	negs	r0, r0
 8022e30:	4770      	bx	lr
 8022e32:	4b0d      	ldr	r3, [pc, #52]	@ (8022e68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022e34:	8818      	ldrh	r0, [r3, #0]
 8022e36:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e3a:	4770      	bx	lr
 8022e3c:	2903      	cmp	r1, #3
 8022e3e:	d80b      	bhi.n	8022e58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022e40:	a301      	add	r3, pc, #4	@ (adr r3, 8022e48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8022e42:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022e46:	bf00      	nop
 8022e48:	08022e5d 	.word	0x08022e5d
 8022e4c:	08022e33 	.word	0x08022e33
 8022e50:	08022e61 	.word	0x08022e61
 8022e54:	08022e27 	.word	0x08022e27
 8022e58:	2000      	movs	r0, #0
 8022e5a:	4770      	bx	lr
 8022e5c:	2001      	movs	r0, #1
 8022e5e:	4770      	bx	lr
 8022e60:	f04f 30ff 	mov.w	r0, #4294967295
 8022e64:	4770      	bx	lr
 8022e66:	bf00      	nop
 8022e68:	2005ba9e 	.word	0x2005ba9e

08022e6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8022e6c:	b180      	cbz	r0, 8022e90 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8022e6e:	2903      	cmp	r1, #3
 8022e70:	d81c      	bhi.n	8022eac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8022e72:	e8df f001 	tbb	[pc, r1]
 8022e76:	021d      	.short	0x021d
 8022e78:	071f      	.short	0x071f
 8022e7a:	4b10      	ldr	r3, [pc, #64]	@ (8022ebc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022e7c:	8818      	ldrh	r0, [r3, #0]
 8022e7e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e82:	4770      	bx	lr
 8022e84:	4b0d      	ldr	r3, [pc, #52]	@ (8022ebc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022e86:	8818      	ldrh	r0, [r3, #0]
 8022e88:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022e8c:	4240      	negs	r0, r0
 8022e8e:	4770      	bx	lr
 8022e90:	2903      	cmp	r1, #3
 8022e92:	d80b      	bhi.n	8022eac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8022e94:	a301      	add	r3, pc, #4	@ (adr r3, 8022e9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8022e96:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022e9a:	bf00      	nop
 8022e9c:	08022e7b 	.word	0x08022e7b
 8022ea0:	08022eb5 	.word	0x08022eb5
 8022ea4:	08022e85 	.word	0x08022e85
 8022ea8:	08022eb1 	.word	0x08022eb1
 8022eac:	2000      	movs	r0, #0
 8022eae:	4770      	bx	lr
 8022eb0:	2001      	movs	r0, #1
 8022eb2:	4770      	bx	lr
 8022eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8022eb8:	4770      	bx	lr
 8022eba:	bf00      	nop
 8022ebc:	2005ba9e 	.word	0x2005ba9e

08022ec0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8022ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ec4:	b099      	sub	sp, #100	@ 0x64
 8022ec6:	910d      	str	r1, [sp, #52]	@ 0x34
 8022ec8:	a914      	add	r1, sp, #80	@ 0x50
 8022eca:	e881 000c 	stmia.w	r1, {r2, r3}
 8022ece:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8022ed2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8022ed6:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8022eda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022edc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8022ee0:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8022ee4:	9310      	str	r3, [sp, #64]	@ 0x40
 8022ee6:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8022eea:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8022eee:	9308      	str	r3, [sp, #32]
 8022ef0:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8022ef4:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8022ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8022ef8:	7b4b      	ldrb	r3, [r1, #13]
 8022efa:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 8022efe:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8022f02:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 8022f06:	f891 8006 	ldrb.w	r8, [r1, #6]
 8022f0a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8022f0e:	ea58 0800 	orrs.w	r8, r8, r0
 8022f12:	f000 81cc 	beq.w	80232ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022f16:	011b      	lsls	r3, r3, #4
 8022f18:	79c8      	ldrb	r0, [r1, #7]
 8022f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022f1e:	4303      	orrs	r3, r0
 8022f20:	930c      	str	r3, [sp, #48]	@ 0x30
 8022f22:	f000 81c4 	beq.w	80232ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022f26:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022f2a:	b29b      	uxth	r3, r3
 8022f2c:	2d00      	cmp	r5, #0
 8022f2e:	f000 812a 	beq.w	8023186 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c6>
 8022f32:	1aed      	subs	r5, r5, r3
 8022f34:	b2ad      	uxth	r5, r5
 8022f36:	0429      	lsls	r1, r5, #16
 8022f38:	d502      	bpl.n	8022f40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8022f3a:	1b64      	subs	r4, r4, r5
 8022f3c:	2500      	movs	r5, #0
 8022f3e:	b224      	sxth	r4, r4
 8022f40:	f9b2 0000 	ldrsh.w	r0, [r2]
 8022f44:	8891      	ldrh	r1, [r2, #4]
 8022f46:	4284      	cmp	r4, r0
 8022f48:	b283      	uxth	r3, r0
 8022f4a:	bfbf      	itttt	lt
 8022f4c:	18ed      	addlt	r5, r5, r3
 8022f4e:	1b2c      	sublt	r4, r5, r4
 8022f50:	b2a5      	uxthlt	r5, r4
 8022f52:	4604      	movlt	r4, r0
 8022f54:	440b      	add	r3, r1
 8022f56:	b21b      	sxth	r3, r3
 8022f58:	930a      	str	r3, [sp, #40]	@ 0x28
 8022f5a:	88d3      	ldrh	r3, [r2, #6]
 8022f5c:	8852      	ldrh	r2, [r2, #2]
 8022f5e:	4621      	mov	r1, r4
 8022f60:	4413      	add	r3, r2
 8022f62:	b21b      	sxth	r3, r3
 8022f64:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022f66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022f68:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022f6a:	930e      	str	r3, [sp, #56]	@ 0x38
 8022f6c:	4bb2      	ldr	r3, [pc, #712]	@ (8023238 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8022f6e:	a814      	add	r0, sp, #80	@ 0x50
 8022f70:	f893 b000 	ldrb.w	fp, [r3]
 8022f74:	4653      	mov	r3, sl
 8022f76:	f7f6 f879 	bl	801906c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022f7a:	4621      	mov	r1, r4
 8022f7c:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8022f80:	4653      	mov	r3, sl
 8022f82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022f84:	a814      	add	r0, sp, #80	@ 0x50
 8022f86:	f7f6 f88e 	bl	80190a6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022f8a:	a918      	add	r1, sp, #96	@ 0x60
 8022f8c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022f90:	a817      	add	r0, sp, #92	@ 0x5c
 8022f92:	f7f6 f9b5 	bl	8019300 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022f96:	f1ba 0f00 	cmp.w	sl, #0
 8022f9a:	f040 80f7 	bne.w	802318c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8022f9e:	f1bb 0f01 	cmp.w	fp, #1
 8022fa2:	f040 80fb 	bne.w	802319c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8022fa6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022fa8:	2b00      	cmp	r3, #0
 8022faa:	f040 81a8 	bne.w	80232fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x43e>
 8022fae:	fa1f f288 	uxth.w	r2, r8
 8022fb2:	b905      	cbnz	r5, 8022fb6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf6>
 8022fb4:	b15e      	cbz	r6, 8022fce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022fb6:	4631      	mov	r1, r6
 8022fb8:	fb06 5302 	mla	r3, r6, r2, r5
 8022fbc:	9808      	ldr	r0, [sp, #32]
 8022fbe:	4343      	muls	r3, r0
 8022fc0:	f003 0607 	and.w	r6, r3, #7
 8022fc4:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 8022fc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022fca:	1a5b      	subs	r3, r3, r1
 8022fcc:	930e      	str	r3, [sp, #56]	@ 0x38
 8022fce:	f10b 31ff 	add.w	r1, fp, #4294967295
 8022fd2:	424b      	negs	r3, r1
 8022fd4:	414b      	adcs	r3, r1
 8022fd6:	4618      	mov	r0, r3
 8022fd8:	4651      	mov	r1, sl
 8022fda:	930c      	str	r3, [sp, #48]	@ 0x30
 8022fdc:	f7ff ff1c 	bl	8022e18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022fe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022fe2:	4683      	mov	fp, r0
 8022fe4:	4618      	mov	r0, r3
 8022fe6:	f7ff ff41 	bl	8022e6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022fea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022fec:	4603      	mov	r3, r0
 8022fee:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8022ff0:	eba1 0a00 	sub.w	sl, r1, r0
 8022ff4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022ff6:	458a      	cmp	sl, r1
 8022ff8:	bfa8      	it	ge
 8022ffa:	468a      	movge	sl, r1
 8022ffc:	f1ba 0f00 	cmp.w	sl, #0
 8023000:	f340 8155 	ble.w	80232ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8023004:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023006:	1b64      	subs	r4, r4, r5
 8023008:	1b0c      	subs	r4, r1, r4
 802300a:	4544      	cmp	r4, r8
 802300c:	bfd4      	ite	le
 802300e:	ebc5 0504 	rsble	r5, r5, r4
 8023012:	ebc5 0508 	rsbgt	r5, r5, r8
 8023016:	2d00      	cmp	r5, #0
 8023018:	f340 8149 	ble.w	80232ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 802301c:	9908      	ldr	r1, [sp, #32]
 802301e:	1b52      	subs	r2, r2, r5
 8023020:	434a      	muls	r2, r1
 8023022:	920e      	str	r2, [sp, #56]	@ 0x38
 8023024:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023026:	2a00      	cmp	r2, #0
 8023028:	f040 8175 	bne.w	8023316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x456>
 802302c:	4a83      	ldr	r2, [pc, #524]	@ (802323c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 802302e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023030:	6810      	ldr	r0, [r2, #0]
 8023032:	6802      	ldr	r2, [r0, #0]
 8023034:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8023036:	4790      	blx	r2
 8023038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802303a:	2201      	movs	r2, #1
 802303c:	9908      	ldr	r1, [sp, #32]
 802303e:	408a      	lsls	r2, r1
 8023040:	3a01      	subs	r2, #1
 8023042:	497f      	ldr	r1, [pc, #508]	@ (8023240 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8023044:	b2d2      	uxtb	r2, r2
 8023046:	880c      	ldrh	r4, [r1, #0]
 8023048:	920c      	str	r2, [sp, #48]	@ 0x30
 802304a:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	@ 0x5c
 802304e:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 8023052:	fb04 1202 	mla	r2, r4, r2, r1
 8023056:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802305a:	ea4f 2419 	mov.w	r4, r9, lsr #8
 802305e:	920a      	str	r2, [sp, #40]	@ 0x28
 8023060:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8023064:	9212      	str	r2, [sp, #72]	@ 0x48
 8023066:	b2e2      	uxtb	r2, r4
 8023068:	9211      	str	r2, [sp, #68]	@ 0x44
 802306a:	fa5f f289 	uxtb.w	r2, r9
 802306e:	9210      	str	r2, [sp, #64]	@ 0x40
 8023070:	4a74      	ldr	r2, [pc, #464]	@ (8023244 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8023072:	ea4f 1159 	mov.w	r1, r9, lsr #5
 8023076:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802307a:	4022      	ands	r2, r4
 802307c:	430a      	orrs	r2, r1
 802307e:	ea4f 014b 	mov.w	r1, fp, lsl #1
 8023082:	fb05 3b1b 	mls	fp, r5, fp, r3
 8023086:	460b      	mov	r3, r1
 8023088:	f3c9 09c4 	ubfx	r9, r9, #3, #5
 802308c:	ea42 0209 	orr.w	r2, r2, r9
 8023090:	436b      	muls	r3, r5
 8023092:	b292      	uxth	r2, r2
 8023094:	920f      	str	r2, [sp, #60]	@ 0x3c
 8023096:	783a      	ldrb	r2, [r7, #0]
 8023098:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 802309c:	4132      	asrs	r2, r6
 802309e:	b2d2      	uxtb	r2, r2
 80230a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80230a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80230a4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80230a8:	f0c0 8149 	bcc.w	802333e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x47e>
 80230ac:	46a9      	mov	r9, r5
 80230ae:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80230b2:	f119 39ff 	adds.w	r9, r9, #4294967295
 80230b6:	f0c0 8132 	bcc.w	802331e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45e>
 80230ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230bc:	4013      	ands	r3, r2
 80230be:	d054      	beq.n	802316a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 80230c0:	20ff      	movs	r0, #255	@ 0xff
 80230c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80230c4:	fb90 f1f1 	sdiv	r1, r0, r1
 80230c8:	434b      	muls	r3, r1
 80230ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80230cc:	dd03      	ble.n	80230d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x216>
 80230ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80230d0:	4281      	cmp	r1, r0
 80230d2:	f000 8122 	beq.w	802331a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45a>
 80230d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80230d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80230da:	fb11 f303 	smulbb	r3, r1, r3
 80230de:	b29b      	uxth	r3, r3
 80230e0:	1c59      	adds	r1, r3, #1
 80230e2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80230e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80230ea:	fa1f fe83 	uxth.w	lr, r3
 80230ee:	43db      	mvns	r3, r3
 80230f0:	f8b8 4000 	ldrh.w	r4, [r8]
 80230f4:	fb10 fb0e 	smulbb	fp, r0, lr
 80230f8:	1221      	asrs	r1, r4, #8
 80230fa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80230fc:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8023100:	b2db      	uxtb	r3, r3
 8023102:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8023106:	fb01 b103 	mla	r1, r1, r3, fp
 802310a:	fb10 fb0e 	smulbb	fp, r0, lr
 802310e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023110:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 8023114:	fb10 fe0e 	smulbb	lr, r0, lr
 8023118:	00e4      	lsls	r4, r4, #3
 802311a:	b2e4      	uxtb	r4, r4
 802311c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8023120:	fb04 e403 	mla	r4, r4, r3, lr
 8023124:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8023128:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 802312c:	fb0c bc03 	mla	ip, ip, r3, fp
 8023130:	b289      	uxth	r1, r1
 8023132:	b2a4      	uxth	r4, r4
 8023134:	1c4b      	adds	r3, r1, #1
 8023136:	f104 0b01 	add.w	fp, r4, #1
 802313a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802313e:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 8023142:	fa1f fc8c 	uxth.w	ip, ip
 8023146:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802314a:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802314e:	ea4b 0101 	orr.w	r1, fp, r1
 8023152:	f10c 0b01 	add.w	fp, ip, #1
 8023156:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 802315a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802315e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8023162:	ea41 010b 	orr.w	r1, r1, fp
 8023166:	f8a8 1000 	strh.w	r1, [r8]
 802316a:	9b08      	ldr	r3, [sp, #32]
 802316c:	441e      	add	r6, r3
 802316e:	b2b6      	uxth	r6, r6
 8023170:	2e07      	cmp	r6, #7
 8023172:	bf98      	it	ls
 8023174:	411a      	asrls	r2, r3
 8023176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023178:	bf89      	itett	hi
 802317a:	787a      	ldrbhi	r2, [r7, #1]
 802317c:	b2d2      	uxtbls	r2, r2
 802317e:	3701      	addhi	r7, #1
 8023180:	2600      	movhi	r6, #0
 8023182:	4498      	add	r8, r3
 8023184:	e795      	b.n	80230b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f2>
 8023186:	441c      	add	r4, r3
 8023188:	b224      	sxth	r4, r4
 802318a:	e6d9      	b.n	8022f40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 802318c:	f1ba 0f01 	cmp.w	sl, #1
 8023190:	f47f af09 	bne.w	8022fa6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8023194:	f1bb 0f01 	cmp.w	fp, #1
 8023198:	f47f af05 	bne.w	8022fa6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 802319c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802319e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80231a0:	1a99      	subs	r1, r3, r2
 80231a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80231a4:	1b9b      	subs	r3, r3, r6
 80231a6:	4299      	cmp	r1, r3
 80231a8:	bfa8      	it	ge
 80231aa:	4619      	movge	r1, r3
 80231ac:	2900      	cmp	r1, #0
 80231ae:	9112      	str	r1, [sp, #72]	@ 0x48
 80231b0:	dd7d      	ble.n	80232ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 80231b2:	4a22      	ldr	r2, [pc, #136]	@ (802323c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 80231b4:	6810      	ldr	r0, [r2, #0]
 80231b6:	9211      	str	r2, [sp, #68]	@ 0x44
 80231b8:	6803      	ldr	r3, [r0, #0]
 80231ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80231bc:	4798      	blx	r3
 80231be:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80231c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80231c4:	d006      	beq.n	80231d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x314>
 80231c6:	9b08      	ldr	r3, [sp, #32]
 80231c8:	2b04      	cmp	r3, #4
 80231ca:	d133      	bne.n	8023234 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80231cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80231ce:	3300      	adds	r3, #0
 80231d0:	bf18      	it	ne
 80231d2:	2301      	movne	r3, #1
 80231d4:	0582      	lsls	r2, r0, #22
 80231d6:	fa1f fc88 	uxth.w	ip, r8
 80231da:	f140 80b9 	bpl.w	8023350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x490>
 80231de:	9808      	ldr	r0, [sp, #32]
 80231e0:	2808      	cmp	r0, #8
 80231e2:	f040 80b5 	bne.w	8023350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x490>
 80231e6:	2b00      	cmp	r3, #0
 80231e8:	d064      	beq.n	80232b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>
 80231ea:	f10c 0c01 	add.w	ip, ip, #1
 80231ee:	f02c 0301 	bic.w	r3, ip, #1
 80231f2:	b29b      	uxth	r3, r3
 80231f4:	bb45      	cbnz	r5, 8023248 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80231f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80231f8:	eb08 0004 	add.w	r0, r8, r4
 80231fc:	4290      	cmp	r0, r2
 80231fe:	dc23      	bgt.n	8023248 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 8023200:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023202:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 8023206:	6810      	ldr	r0, [r2, #0]
 8023208:	b289      	uxth	r1, r1
 802320a:	6804      	ldr	r4, [r0, #0]
 802320c:	9506      	str	r5, [sp, #24]
 802320e:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8023212:	e9cd 3100 	strd	r3, r1, [sp]
 8023216:	9302      	str	r3, [sp, #8]
 8023218:	4673      	mov	r3, lr
 802321a:	9505      	str	r5, [sp, #20]
 802321c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802321e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8023222:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8023226:	fb06 710c 	mla	r1, r6, ip, r7
 802322a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 802322e:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 8023230:	47a0      	blx	r4
 8023232:	e03c      	b.n	80232ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8023234:	2300      	movs	r3, #0
 8023236:	e7cd      	b.n	80231d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x314>
 8023238:	2005ba9c 	.word	0x2005ba9c
 802323c:	2005baa4 	.word	0x2005baa4
 8023240:	2005ba9e 	.word	0x2005ba9e
 8023244:	00fff800 	.word	0x00fff800
 8023248:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802324a:	eba4 0e05 	sub.w	lr, r4, r5
 802324e:	eba2 0e0e 	sub.w	lr, r2, lr
 8023252:	45c6      	cmp	lr, r8
 8023254:	bfd4      	ite	le
 8023256:	ebc5 0e0e 	rsble	lr, r5, lr
 802325a:	ebc5 0e08 	rsbgt	lr, r5, r8
 802325e:	f1be 0f00 	cmp.w	lr, #0
 8023262:	d024      	beq.n	80232ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8023264:	07e8      	lsls	r0, r5, #31
 8023266:	f53f ae9e 	bmi.w	8022fa6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 802326a:	f01e 0001 	ands.w	r0, lr, #1
 802326e:	f47f ae9a 	bne.w	8022fa6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8023272:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023274:	086d      	lsrs	r5, r5, #1
 8023276:	6814      	ldr	r4, [r2, #0]
 8023278:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 802327c:	fb06 560c 	mla	r6, r6, ip, r5
 8023280:	6825      	ldr	r5, [r4, #0]
 8023282:	9006      	str	r0, [sp, #24]
 8023284:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8023288:	9005      	str	r0, [sp, #20]
 802328a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802328c:	9302      	str	r3, [sp, #8]
 802328e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8023292:	b289      	uxth	r1, r1
 8023294:	fa1f f38e 	uxth.w	r3, lr
 8023298:	f8bd 805e 	ldrh.w	r8, [sp, #94]	@ 0x5e
 802329c:	9101      	str	r1, [sp, #4]
 802329e:	9300      	str	r3, [sp, #0]
 80232a0:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80232a4:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 80232a6:	4643      	mov	r3, r8
 80232a8:	19b9      	adds	r1, r7, r6
 80232aa:	4620      	mov	r0, r4
 80232ac:	47a8      	blx	r5
 80232ae:	b019      	add	sp, #100	@ 0x64
 80232b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232b4:	4a28      	ldr	r2, [pc, #160]	@ (8023358 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>)
 80232b6:	1b64      	subs	r4, r4, r5
 80232b8:	6810      	ldr	r0, [r2, #0]
 80232ba:	fb06 5608 	mla	r6, r6, r8, r5
 80232be:	f8d0 a000 	ldr.w	sl, [r0]
 80232c2:	9306      	str	r3, [sp, #24]
 80232c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80232c8:	9305      	str	r3, [sp, #20]
 80232ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80232cc:	b289      	uxth	r1, r1
 80232ce:	e9cd 9303 	strd	r9, r3, [sp, #12]
 80232d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80232d4:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 80232d8:	1b1c      	subs	r4, r3, r4
 80232da:	4544      	cmp	r4, r8
 80232dc:	bfd4      	ite	le
 80232de:	ebc5 0504 	rsble	r5, r5, r4
 80232e2:	ebc5 0508 	rsbgt	r5, r5, r8
 80232e6:	b2ad      	uxth	r5, r5
 80232e8:	9101      	str	r1, [sp, #4]
 80232ea:	f8cd c008 	str.w	ip, [sp, #8]
 80232ee:	9500      	str	r5, [sp, #0]
 80232f0:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80232f4:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 80232f8:	4673      	mov	r3, lr
 80232fa:	19b9      	adds	r1, r7, r6
 80232fc:	e798      	b.n	8023230 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>
 80232fe:	2208      	movs	r2, #8
 8023300:	9b08      	ldr	r3, [sp, #32]
 8023302:	fb92 f3f3 	sdiv	r3, r2, r3
 8023306:	1e5a      	subs	r2, r3, #1
 8023308:	4442      	add	r2, r8
 802330a:	fb92 f2f3 	sdiv	r2, r2, r3
 802330e:	fb12 f203 	smulbb	r2, r2, r3
 8023312:	b292      	uxth	r2, r2
 8023314:	e64d      	b.n	8022fb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8023316:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023318:	e68f      	b.n	802303a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17a>
 802331a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802331c:	e723      	b.n	8023166 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a6>
 802331e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023320:	b143      	cbz	r3, 8023334 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x474>
 8023322:	441e      	add	r6, r3
 8023324:	b2b6      	uxth	r6, r6
 8023326:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
 802332a:	783a      	ldrb	r2, [r7, #0]
 802332c:	f006 0607 	and.w	r6, r6, #7
 8023330:	4132      	asrs	r2, r6
 8023332:	b2d2      	uxtb	r2, r2
 8023334:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023336:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023338:	4419      	add	r1, r3
 802333a:	910a      	str	r1, [sp, #40]	@ 0x28
 802333c:	e6b2      	b.n	80230a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 802333e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023340:	2b00      	cmp	r3, #0
 8023342:	d1b4      	bne.n	80232ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8023344:	4b04      	ldr	r3, [pc, #16]	@ (8023358 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>)
 8023346:	6818      	ldr	r0, [r3, #0]
 8023348:	6803      	ldr	r3, [r0, #0]
 802334a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802334c:	4798      	blx	r3
 802334e:	e7ae      	b.n	80232ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8023350:	2b00      	cmp	r3, #0
 8023352:	f47f af4a 	bne.w	80231ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32a>
 8023356:	e626      	b.n	8022fa6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8023358:	2005baa4 	.word	0x2005baa4

0802335c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 802335c:	b538      	push	{r3, r4, r5, lr}
 802335e:	4605      	mov	r5, r0
 8023360:	4c13      	ldr	r4, [pc, #76]	@ (80233b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 8023362:	e8d4 3f8f 	ldab	r3, [r4]
 8023366:	07da      	lsls	r2, r3, #31
 8023368:	d40b      	bmi.n	8023382 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 802336a:	4620      	mov	r0, r4
 802336c:	f008 fc23 	bl	802bbb6 <__cxa_guard_acquire>
 8023370:	b138      	cbz	r0, 8023382 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 8023372:	4620      	mov	r0, r4
 8023374:	f008 fc2b 	bl	802bbce <__cxa_guard_release>
 8023378:	4a0e      	ldr	r2, [pc, #56]	@ (80233b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 802337a:	490f      	ldr	r1, [pc, #60]	@ (80233b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 802337c:	480f      	ldr	r0, [pc, #60]	@ (80233bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802337e:	f008 fc13 	bl	802bba8 <__aeabi_atexit>
 8023382:	4c0f      	ldr	r4, [pc, #60]	@ (80233c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8023384:	e8d4 3f8f 	ldab	r3, [r4]
 8023388:	07db      	lsls	r3, r3, #31
 802338a:	d40b      	bmi.n	80233a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 802338c:	4620      	mov	r0, r4
 802338e:	f008 fc12 	bl	802bbb6 <__cxa_guard_acquire>
 8023392:	b138      	cbz	r0, 80233a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 8023394:	4620      	mov	r0, r4
 8023396:	f008 fc1a 	bl	802bbce <__cxa_guard_release>
 802339a:	4a06      	ldr	r2, [pc, #24]	@ (80233b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 802339c:	4909      	ldr	r1, [pc, #36]	@ (80233c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802339e:	480a      	ldr	r0, [pc, #40]	@ (80233c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80233a0:	f008 fc02 	bl	802bba8 <__aeabi_atexit>
 80233a4:	4b05      	ldr	r3, [pc, #20]	@ (80233bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80233a6:	616b      	str	r3, [r5, #20]
 80233a8:	4b07      	ldr	r3, [pc, #28]	@ (80233c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80233aa:	61ab      	str	r3, [r5, #24]
 80233ac:	bd38      	pop	{r3, r4, r5, pc}
 80233ae:	bf00      	nop
 80233b0:	2005bb88 	.word	0x2005bb88
 80233b4:	20000000 	.word	0x20000000
 80233b8:	0801f473 	.word	0x0801f473
 80233bc:	20000068 	.word	0x20000068
 80233c0:	2005bb8c 	.word	0x2005bb8c
 80233c4:	0801f471 	.word	0x0801f471
 80233c8:	2000006c 	.word	0x2000006c

080233cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80233cc:	b538      	push	{r3, r4, r5, lr}
 80233ce:	4605      	mov	r5, r0
 80233d0:	4c13      	ldr	r4, [pc, #76]	@ (8023420 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 80233d2:	e8d4 3f8f 	ldab	r3, [r4]
 80233d6:	07da      	lsls	r2, r3, #31
 80233d8:	d40b      	bmi.n	80233f2 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 80233da:	4620      	mov	r0, r4
 80233dc:	f008 fbeb 	bl	802bbb6 <__cxa_guard_acquire>
 80233e0:	b138      	cbz	r0, 80233f2 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 80233e2:	4620      	mov	r0, r4
 80233e4:	f008 fbf3 	bl	802bbce <__cxa_guard_release>
 80233e8:	4a0e      	ldr	r2, [pc, #56]	@ (8023424 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80233ea:	490f      	ldr	r1, [pc, #60]	@ (8023428 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80233ec:	480f      	ldr	r0, [pc, #60]	@ (802342c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80233ee:	f008 fbdb 	bl	802bba8 <__aeabi_atexit>
 80233f2:	4c0f      	ldr	r4, [pc, #60]	@ (8023430 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80233f4:	e8d4 3f8f 	ldab	r3, [r4]
 80233f8:	07db      	lsls	r3, r3, #31
 80233fa:	d40b      	bmi.n	8023414 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 80233fc:	4620      	mov	r0, r4
 80233fe:	f008 fbda 	bl	802bbb6 <__cxa_guard_acquire>
 8023402:	b138      	cbz	r0, 8023414 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 8023404:	4620      	mov	r0, r4
 8023406:	f008 fbe2 	bl	802bbce <__cxa_guard_release>
 802340a:	4a06      	ldr	r2, [pc, #24]	@ (8023424 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802340c:	4909      	ldr	r1, [pc, #36]	@ (8023434 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802340e:	480a      	ldr	r0, [pc, #40]	@ (8023438 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8023410:	f008 fbca 	bl	802bba8 <__aeabi_atexit>
 8023414:	4b05      	ldr	r3, [pc, #20]	@ (802342c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8023416:	60eb      	str	r3, [r5, #12]
 8023418:	4b07      	ldr	r3, [pc, #28]	@ (8023438 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802341a:	612b      	str	r3, [r5, #16]
 802341c:	bd38      	pop	{r3, r4, r5, pc}
 802341e:	bf00      	nop
 8023420:	2005bb60 	.word	0x2005bb60
 8023424:	20000000 	.word	0x20000000
 8023428:	0801f477 	.word	0x0801f477
 802342c:	20000040 	.word	0x20000040
 8023430:	2005bb64 	.word	0x2005bb64
 8023434:	0801f475 	.word	0x0801f475
 8023438:	20000044 	.word	0x20000044

0802343c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 802343c:	b510      	push	{r4, lr}
 802343e:	4604      	mov	r4, r0
 8023440:	f7ff ff8c 	bl	802335c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8023444:	4620      	mov	r0, r4
 8023446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802344a:	f7ff bfbf 	b.w	80233cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08023450 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8023450:	b538      	push	{r3, r4, r5, lr}
 8023452:	4605      	mov	r5, r0
 8023454:	4c13      	ldr	r4, [pc, #76]	@ (80234a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 8023456:	e8d4 3f8f 	ldab	r3, [r4]
 802345a:	07da      	lsls	r2, r3, #31
 802345c:	d40b      	bmi.n	8023476 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 802345e:	4620      	mov	r0, r4
 8023460:	f008 fba9 	bl	802bbb6 <__cxa_guard_acquire>
 8023464:	b138      	cbz	r0, 8023476 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 8023466:	4620      	mov	r0, r4
 8023468:	f008 fbb1 	bl	802bbce <__cxa_guard_release>
 802346c:	4a0e      	ldr	r2, [pc, #56]	@ (80234a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 802346e:	490f      	ldr	r1, [pc, #60]	@ (80234ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023470:	480f      	ldr	r0, [pc, #60]	@ (80234b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8023472:	f008 fb99 	bl	802bba8 <__aeabi_atexit>
 8023476:	4c0f      	ldr	r4, [pc, #60]	@ (80234b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023478:	e8d4 3f8f 	ldab	r3, [r4]
 802347c:	07db      	lsls	r3, r3, #31
 802347e:	d40b      	bmi.n	8023498 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 8023480:	4620      	mov	r0, r4
 8023482:	f008 fb98 	bl	802bbb6 <__cxa_guard_acquire>
 8023486:	b138      	cbz	r0, 8023498 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 8023488:	4620      	mov	r0, r4
 802348a:	f008 fba0 	bl	802bbce <__cxa_guard_release>
 802348e:	4a06      	ldr	r2, [pc, #24]	@ (80234a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023490:	4909      	ldr	r1, [pc, #36]	@ (80234b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8023492:	480a      	ldr	r0, [pc, #40]	@ (80234bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8023494:	f008 fb88 	bl	802bba8 <__aeabi_atexit>
 8023498:	4b05      	ldr	r3, [pc, #20]	@ (80234b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802349a:	626b      	str	r3, [r5, #36]	@ 0x24
 802349c:	4b07      	ldr	r3, [pc, #28]	@ (80234bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802349e:	62ab      	str	r3, [r5, #40]	@ 0x28
 80234a0:	bd38      	pop	{r3, r4, r5, pc}
 80234a2:	bf00      	nop
 80234a4:	2005bb90 	.word	0x2005bb90
 80234a8:	20000000 	.word	0x20000000
 80234ac:	0801f46b 	.word	0x0801f46b
 80234b0:	20000070 	.word	0x20000070
 80234b4:	2005bb94 	.word	0x2005bb94
 80234b8:	0801f469 	.word	0x0801f469
 80234bc:	20000074 	.word	0x20000074

080234c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80234c0:	b538      	push	{r3, r4, r5, lr}
 80234c2:	4605      	mov	r5, r0
 80234c4:	4c13      	ldr	r4, [pc, #76]	@ (8023514 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 80234c6:	e8d4 3f8f 	ldab	r3, [r4]
 80234ca:	07da      	lsls	r2, r3, #31
 80234cc:	d40b      	bmi.n	80234e6 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 80234ce:	4620      	mov	r0, r4
 80234d0:	f008 fb71 	bl	802bbb6 <__cxa_guard_acquire>
 80234d4:	b138      	cbz	r0, 80234e6 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 80234d6:	4620      	mov	r0, r4
 80234d8:	f008 fb79 	bl	802bbce <__cxa_guard_release>
 80234dc:	4a0e      	ldr	r2, [pc, #56]	@ (8023518 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80234de:	490f      	ldr	r1, [pc, #60]	@ (802351c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80234e0:	480f      	ldr	r0, [pc, #60]	@ (8023520 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80234e2:	f008 fb61 	bl	802bba8 <__aeabi_atexit>
 80234e6:	4c0f      	ldr	r4, [pc, #60]	@ (8023524 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80234e8:	e8d4 3f8f 	ldab	r3, [r4]
 80234ec:	07db      	lsls	r3, r3, #31
 80234ee:	d40b      	bmi.n	8023508 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 80234f0:	4620      	mov	r0, r4
 80234f2:	f008 fb60 	bl	802bbb6 <__cxa_guard_acquire>
 80234f6:	b138      	cbz	r0, 8023508 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 80234f8:	4620      	mov	r0, r4
 80234fa:	f008 fb68 	bl	802bbce <__cxa_guard_release>
 80234fe:	4a06      	ldr	r2, [pc, #24]	@ (8023518 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023500:	4909      	ldr	r1, [pc, #36]	@ (8023528 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8023502:	480a      	ldr	r0, [pc, #40]	@ (802352c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8023504:	f008 fb50 	bl	802bba8 <__aeabi_atexit>
 8023508:	4b05      	ldr	r3, [pc, #20]	@ (8023520 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802350a:	61eb      	str	r3, [r5, #28]
 802350c:	4b07      	ldr	r3, [pc, #28]	@ (802352c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802350e:	622b      	str	r3, [r5, #32]
 8023510:	bd38      	pop	{r3, r4, r5, pc}
 8023512:	bf00      	nop
 8023514:	2005bb68 	.word	0x2005bb68
 8023518:	20000000 	.word	0x20000000
 802351c:	0801f46f 	.word	0x0801f46f
 8023520:	20000048 	.word	0x20000048
 8023524:	2005bb6c 	.word	0x2005bb6c
 8023528:	0801f46d 	.word	0x0801f46d
 802352c:	2000004c 	.word	0x2000004c

08023530 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8023530:	b510      	push	{r4, lr}
 8023532:	4604      	mov	r4, r0
 8023534:	f7ff ff8c 	bl	8023450 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023538:	4620      	mov	r0, r4
 802353a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802353e:	f7ff bfbf 	b.w	80234c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08023544 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8023544:	b538      	push	{r3, r4, r5, lr}
 8023546:	4605      	mov	r5, r0
 8023548:	4c13      	ldr	r4, [pc, #76]	@ (8023598 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 802354a:	e8d4 3f8f 	ldab	r3, [r4]
 802354e:	07da      	lsls	r2, r3, #31
 8023550:	d40b      	bmi.n	802356a <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 8023552:	4620      	mov	r0, r4
 8023554:	f008 fb2f 	bl	802bbb6 <__cxa_guard_acquire>
 8023558:	b138      	cbz	r0, 802356a <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 802355a:	4620      	mov	r0, r4
 802355c:	f008 fb37 	bl	802bbce <__cxa_guard_release>
 8023560:	4a0e      	ldr	r2, [pc, #56]	@ (802359c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023562:	490f      	ldr	r1, [pc, #60]	@ (80235a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023564:	480f      	ldr	r0, [pc, #60]	@ (80235a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8023566:	f008 fb1f 	bl	802bba8 <__aeabi_atexit>
 802356a:	4c0f      	ldr	r4, [pc, #60]	@ (80235a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802356c:	e8d4 3f8f 	ldab	r3, [r4]
 8023570:	07db      	lsls	r3, r3, #31
 8023572:	d40b      	bmi.n	802358c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 8023574:	4620      	mov	r0, r4
 8023576:	f008 fb1e 	bl	802bbb6 <__cxa_guard_acquire>
 802357a:	b138      	cbz	r0, 802358c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 802357c:	4620      	mov	r0, r4
 802357e:	f008 fb26 	bl	802bbce <__cxa_guard_release>
 8023582:	4a06      	ldr	r2, [pc, #24]	@ (802359c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023584:	4909      	ldr	r1, [pc, #36]	@ (80235ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8023586:	480a      	ldr	r0, [pc, #40]	@ (80235b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023588:	f008 fb0e 	bl	802bba8 <__aeabi_atexit>
 802358c:	4b05      	ldr	r3, [pc, #20]	@ (80235a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802358e:	636b      	str	r3, [r5, #52]	@ 0x34
 8023590:	4b07      	ldr	r3, [pc, #28]	@ (80235b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023592:	63ab      	str	r3, [r5, #56]	@ 0x38
 8023594:	bd38      	pop	{r3, r4, r5, pc}
 8023596:	bf00      	nop
 8023598:	2005bba0 	.word	0x2005bba0
 802359c:	20000000 	.word	0x20000000
 80235a0:	0801f463 	.word	0x0801f463
 80235a4:	20000080 	.word	0x20000080
 80235a8:	2005bba4 	.word	0x2005bba4
 80235ac:	0801f461 	.word	0x0801f461
 80235b0:	20000084 	.word	0x20000084

080235b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80235b4:	b538      	push	{r3, r4, r5, lr}
 80235b6:	4605      	mov	r5, r0
 80235b8:	4c13      	ldr	r4, [pc, #76]	@ (8023608 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 80235ba:	e8d4 3f8f 	ldab	r3, [r4]
 80235be:	07da      	lsls	r2, r3, #31
 80235c0:	d40b      	bmi.n	80235da <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 80235c2:	4620      	mov	r0, r4
 80235c4:	f008 faf7 	bl	802bbb6 <__cxa_guard_acquire>
 80235c8:	b138      	cbz	r0, 80235da <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 80235ca:	4620      	mov	r0, r4
 80235cc:	f008 faff 	bl	802bbce <__cxa_guard_release>
 80235d0:	4a0e      	ldr	r2, [pc, #56]	@ (802360c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80235d2:	490f      	ldr	r1, [pc, #60]	@ (8023610 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80235d4:	480f      	ldr	r0, [pc, #60]	@ (8023614 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80235d6:	f008 fae7 	bl	802bba8 <__aeabi_atexit>
 80235da:	4c0f      	ldr	r4, [pc, #60]	@ (8023618 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80235dc:	e8d4 3f8f 	ldab	r3, [r4]
 80235e0:	07db      	lsls	r3, r3, #31
 80235e2:	d40b      	bmi.n	80235fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 80235e4:	4620      	mov	r0, r4
 80235e6:	f008 fae6 	bl	802bbb6 <__cxa_guard_acquire>
 80235ea:	b138      	cbz	r0, 80235fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 80235ec:	4620      	mov	r0, r4
 80235ee:	f008 faee 	bl	802bbce <__cxa_guard_release>
 80235f2:	4a06      	ldr	r2, [pc, #24]	@ (802360c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80235f4:	4909      	ldr	r1, [pc, #36]	@ (802361c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80235f6:	480a      	ldr	r0, [pc, #40]	@ (8023620 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80235f8:	f008 fad6 	bl	802bba8 <__aeabi_atexit>
 80235fc:	4b05      	ldr	r3, [pc, #20]	@ (8023614 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80235fe:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8023600:	4b07      	ldr	r3, [pc, #28]	@ (8023620 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8023602:	632b      	str	r3, [r5, #48]	@ 0x30
 8023604:	bd38      	pop	{r3, r4, r5, pc}
 8023606:	bf00      	nop
 8023608:	2005bb70 	.word	0x2005bb70
 802360c:	20000000 	.word	0x20000000
 8023610:	0801f467 	.word	0x0801f467
 8023614:	20000050 	.word	0x20000050
 8023618:	2005bb74 	.word	0x2005bb74
 802361c:	0801f465 	.word	0x0801f465
 8023620:	20000054 	.word	0x20000054

08023624 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023624:	b510      	push	{r4, lr}
 8023626:	4604      	mov	r4, r0
 8023628:	f7ff ff8c 	bl	8023544 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802362c:	4620      	mov	r0, r4
 802362e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023632:	f7ff bfbf 	b.w	80235b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023638 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8023638:	b538      	push	{r3, r4, r5, lr}
 802363a:	4605      	mov	r5, r0
 802363c:	4c13      	ldr	r4, [pc, #76]	@ (802368c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 802363e:	e8d4 3f8f 	ldab	r3, [r4]
 8023642:	07da      	lsls	r2, r3, #31
 8023644:	d40b      	bmi.n	802365e <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 8023646:	4620      	mov	r0, r4
 8023648:	f008 fab5 	bl	802bbb6 <__cxa_guard_acquire>
 802364c:	b138      	cbz	r0, 802365e <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 802364e:	4620      	mov	r0, r4
 8023650:	f008 fabd 	bl	802bbce <__cxa_guard_release>
 8023654:	4a0e      	ldr	r2, [pc, #56]	@ (8023690 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8023656:	490f      	ldr	r1, [pc, #60]	@ (8023694 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023658:	480f      	ldr	r0, [pc, #60]	@ (8023698 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802365a:	f008 faa5 	bl	802bba8 <__aeabi_atexit>
 802365e:	4c0f      	ldr	r4, [pc, #60]	@ (802369c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8023660:	e8d4 3f8f 	ldab	r3, [r4]
 8023664:	07db      	lsls	r3, r3, #31
 8023666:	d40b      	bmi.n	8023680 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 8023668:	4620      	mov	r0, r4
 802366a:	f008 faa4 	bl	802bbb6 <__cxa_guard_acquire>
 802366e:	b138      	cbz	r0, 8023680 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 8023670:	4620      	mov	r0, r4
 8023672:	f008 faac 	bl	802bbce <__cxa_guard_release>
 8023676:	4a06      	ldr	r2, [pc, #24]	@ (8023690 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8023678:	4909      	ldr	r1, [pc, #36]	@ (80236a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802367a:	480a      	ldr	r0, [pc, #40]	@ (80236a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802367c:	f008 fa94 	bl	802bba8 <__aeabi_atexit>
 8023680:	4b05      	ldr	r3, [pc, #20]	@ (8023698 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8023682:	656b      	str	r3, [r5, #84]	@ 0x54
 8023684:	4b07      	ldr	r3, [pc, #28]	@ (80236a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8023686:	65ab      	str	r3, [r5, #88]	@ 0x58
 8023688:	bd38      	pop	{r3, r4, r5, pc}
 802368a:	bf00      	nop
 802368c:	2005bba8 	.word	0x2005bba8
 8023690:	20000000 	.word	0x20000000
 8023694:	0801f453 	.word	0x0801f453
 8023698:	20000088 	.word	0x20000088
 802369c:	2005bbac 	.word	0x2005bbac
 80236a0:	0801f451 	.word	0x0801f451
 80236a4:	2000008c 	.word	0x2000008c

080236a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80236a8:	b538      	push	{r3, r4, r5, lr}
 80236aa:	4605      	mov	r5, r0
 80236ac:	4c13      	ldr	r4, [pc, #76]	@ (80236fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 80236ae:	e8d4 3f8f 	ldab	r3, [r4]
 80236b2:	07da      	lsls	r2, r3, #31
 80236b4:	d40b      	bmi.n	80236ce <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 80236b6:	4620      	mov	r0, r4
 80236b8:	f008 fa7d 	bl	802bbb6 <__cxa_guard_acquire>
 80236bc:	b138      	cbz	r0, 80236ce <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 80236be:	4620      	mov	r0, r4
 80236c0:	f008 fa85 	bl	802bbce <__cxa_guard_release>
 80236c4:	4a0e      	ldr	r2, [pc, #56]	@ (8023700 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80236c6:	490f      	ldr	r1, [pc, #60]	@ (8023704 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80236c8:	480f      	ldr	r0, [pc, #60]	@ (8023708 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80236ca:	f008 fa6d 	bl	802bba8 <__aeabi_atexit>
 80236ce:	4c0f      	ldr	r4, [pc, #60]	@ (802370c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80236d0:	e8d4 3f8f 	ldab	r3, [r4]
 80236d4:	07db      	lsls	r3, r3, #31
 80236d6:	d40b      	bmi.n	80236f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 80236d8:	4620      	mov	r0, r4
 80236da:	f008 fa6c 	bl	802bbb6 <__cxa_guard_acquire>
 80236de:	b138      	cbz	r0, 80236f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 80236e0:	4620      	mov	r0, r4
 80236e2:	f008 fa74 	bl	802bbce <__cxa_guard_release>
 80236e6:	4a06      	ldr	r2, [pc, #24]	@ (8023700 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80236e8:	4909      	ldr	r1, [pc, #36]	@ (8023710 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80236ea:	480a      	ldr	r0, [pc, #40]	@ (8023714 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80236ec:	f008 fa5c 	bl	802bba8 <__aeabi_atexit>
 80236f0:	4b05      	ldr	r3, [pc, #20]	@ (8023708 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80236f2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80236f4:	4b07      	ldr	r3, [pc, #28]	@ (8023714 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80236f6:	652b      	str	r3, [r5, #80]	@ 0x50
 80236f8:	bd38      	pop	{r3, r4, r5, pc}
 80236fa:	bf00      	nop
 80236fc:	2005bbb0 	.word	0x2005bbb0
 8023700:	20000000 	.word	0x20000000
 8023704:	0801f457 	.word	0x0801f457
 8023708:	20000090 	.word	0x20000090
 802370c:	2005bbb4 	.word	0x2005bbb4
 8023710:	0801f455 	.word	0x0801f455
 8023714:	20000094 	.word	0x20000094

08023718 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8023718:	b538      	push	{r3, r4, r5, lr}
 802371a:	4605      	mov	r5, r0
 802371c:	4c13      	ldr	r4, [pc, #76]	@ (802376c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 802371e:	e8d4 3f8f 	ldab	r3, [r4]
 8023722:	07da      	lsls	r2, r3, #31
 8023724:	d40b      	bmi.n	802373e <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 8023726:	4620      	mov	r0, r4
 8023728:	f008 fa45 	bl	802bbb6 <__cxa_guard_acquire>
 802372c:	b138      	cbz	r0, 802373e <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 802372e:	4620      	mov	r0, r4
 8023730:	f008 fa4d 	bl	802bbce <__cxa_guard_release>
 8023734:	4a0e      	ldr	r2, [pc, #56]	@ (8023770 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023736:	490f      	ldr	r1, [pc, #60]	@ (8023774 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023738:	480f      	ldr	r0, [pc, #60]	@ (8023778 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802373a:	f008 fa35 	bl	802bba8 <__aeabi_atexit>
 802373e:	4c0f      	ldr	r4, [pc, #60]	@ (802377c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023740:	e8d4 3f8f 	ldab	r3, [r4]
 8023744:	07db      	lsls	r3, r3, #31
 8023746:	d40b      	bmi.n	8023760 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8023748:	4620      	mov	r0, r4
 802374a:	f008 fa34 	bl	802bbb6 <__cxa_guard_acquire>
 802374e:	b138      	cbz	r0, 8023760 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8023750:	4620      	mov	r0, r4
 8023752:	f008 fa3c 	bl	802bbce <__cxa_guard_release>
 8023756:	4a06      	ldr	r2, [pc, #24]	@ (8023770 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023758:	4909      	ldr	r1, [pc, #36]	@ (8023780 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802375a:	480a      	ldr	r0, [pc, #40]	@ (8023784 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802375c:	f008 fa24 	bl	802bba8 <__aeabi_atexit>
 8023760:	4b05      	ldr	r3, [pc, #20]	@ (8023778 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023762:	646b      	str	r3, [r5, #68]	@ 0x44
 8023764:	4b07      	ldr	r3, [pc, #28]	@ (8023784 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8023766:	64ab      	str	r3, [r5, #72]	@ 0x48
 8023768:	bd38      	pop	{r3, r4, r5, pc}
 802376a:	bf00      	nop
 802376c:	2005bb78 	.word	0x2005bb78
 8023770:	20000000 	.word	0x20000000
 8023774:	0801f45b 	.word	0x0801f45b
 8023778:	20000058 	.word	0x20000058
 802377c:	2005bb7c 	.word	0x2005bb7c
 8023780:	0801f459 	.word	0x0801f459
 8023784:	2000005c 	.word	0x2000005c

08023788 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8023788:	b538      	push	{r3, r4, r5, lr}
 802378a:	4605      	mov	r5, r0
 802378c:	4c13      	ldr	r4, [pc, #76]	@ (80237dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 802378e:	e8d4 3f8f 	ldab	r3, [r4]
 8023792:	07da      	lsls	r2, r3, #31
 8023794:	d40b      	bmi.n	80237ae <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 8023796:	4620      	mov	r0, r4
 8023798:	f008 fa0d 	bl	802bbb6 <__cxa_guard_acquire>
 802379c:	b138      	cbz	r0, 80237ae <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 802379e:	4620      	mov	r0, r4
 80237a0:	f008 fa15 	bl	802bbce <__cxa_guard_release>
 80237a4:	4a0e      	ldr	r2, [pc, #56]	@ (80237e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80237a6:	490f      	ldr	r1, [pc, #60]	@ (80237e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80237a8:	480f      	ldr	r0, [pc, #60]	@ (80237e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80237aa:	f008 f9fd 	bl	802bba8 <__aeabi_atexit>
 80237ae:	4c0f      	ldr	r4, [pc, #60]	@ (80237ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80237b0:	e8d4 3f8f 	ldab	r3, [r4]
 80237b4:	07db      	lsls	r3, r3, #31
 80237b6:	d40b      	bmi.n	80237d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 80237b8:	4620      	mov	r0, r4
 80237ba:	f008 f9fc 	bl	802bbb6 <__cxa_guard_acquire>
 80237be:	b138      	cbz	r0, 80237d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 80237c0:	4620      	mov	r0, r4
 80237c2:	f008 fa04 	bl	802bbce <__cxa_guard_release>
 80237c6:	4a06      	ldr	r2, [pc, #24]	@ (80237e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80237c8:	4909      	ldr	r1, [pc, #36]	@ (80237f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80237ca:	480a      	ldr	r0, [pc, #40]	@ (80237f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80237cc:	f008 f9ec 	bl	802bba8 <__aeabi_atexit>
 80237d0:	4b05      	ldr	r3, [pc, #20]	@ (80237e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80237d2:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80237d4:	4b07      	ldr	r3, [pc, #28]	@ (80237f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80237d6:	642b      	str	r3, [r5, #64]	@ 0x40
 80237d8:	bd38      	pop	{r3, r4, r5, pc}
 80237da:	bf00      	nop
 80237dc:	2005bb98 	.word	0x2005bb98
 80237e0:	20000000 	.word	0x20000000
 80237e4:	0801f45f 	.word	0x0801f45f
 80237e8:	20000078 	.word	0x20000078
 80237ec:	2005bb9c 	.word	0x2005bb9c
 80237f0:	0801f45d 	.word	0x0801f45d
 80237f4:	2000007c 	.word	0x2000007c

080237f8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80237f8:	b510      	push	{r4, lr}
 80237fa:	4604      	mov	r4, r0
 80237fc:	f7ff ff1c 	bl	8023638 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8023800:	4620      	mov	r0, r4
 8023802:	f7ff ff89 	bl	8023718 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8023806:	4620      	mov	r0, r4
 8023808:	f7ff ff4e 	bl	80236a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 802380c:	4620      	mov	r0, r4
 802380e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023812:	f7ff bfb9 	b.w	8023788 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08023818 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023818:	b538      	push	{r3, r4, r5, lr}
 802381a:	4605      	mov	r5, r0
 802381c:	4c13      	ldr	r4, [pc, #76]	@ (802386c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 802381e:	e8d4 3f8f 	ldab	r3, [r4]
 8023822:	07da      	lsls	r2, r3, #31
 8023824:	d40b      	bmi.n	802383e <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 8023826:	4620      	mov	r0, r4
 8023828:	f008 f9c5 	bl	802bbb6 <__cxa_guard_acquire>
 802382c:	b138      	cbz	r0, 802383e <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 802382e:	4620      	mov	r0, r4
 8023830:	f008 f9cd 	bl	802bbce <__cxa_guard_release>
 8023834:	4a0e      	ldr	r2, [pc, #56]	@ (8023870 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023836:	490f      	ldr	r1, [pc, #60]	@ (8023874 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023838:	480f      	ldr	r0, [pc, #60]	@ (8023878 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802383a:	f008 f9b5 	bl	802bba8 <__aeabi_atexit>
 802383e:	4c0f      	ldr	r4, [pc, #60]	@ (802387c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023840:	e8d4 3f8f 	ldab	r3, [r4]
 8023844:	07db      	lsls	r3, r3, #31
 8023846:	d40b      	bmi.n	8023860 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8023848:	4620      	mov	r0, r4
 802384a:	f008 f9b4 	bl	802bbb6 <__cxa_guard_acquire>
 802384e:	b138      	cbz	r0, 8023860 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8023850:	4620      	mov	r0, r4
 8023852:	f008 f9bc 	bl	802bbce <__cxa_guard_release>
 8023856:	4a06      	ldr	r2, [pc, #24]	@ (8023870 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023858:	4909      	ldr	r1, [pc, #36]	@ (8023880 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802385a:	480a      	ldr	r0, [pc, #40]	@ (8023884 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802385c:	f008 f9a4 	bl	802bba8 <__aeabi_atexit>
 8023860:	4b05      	ldr	r3, [pc, #20]	@ (8023878 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023862:	666b      	str	r3, [r5, #100]	@ 0x64
 8023864:	4b07      	ldr	r3, [pc, #28]	@ (8023884 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023866:	66ab      	str	r3, [r5, #104]	@ 0x68
 8023868:	bd38      	pop	{r3, r4, r5, pc}
 802386a:	bf00      	nop
 802386c:	2005bb80 	.word	0x2005bb80
 8023870:	20000000 	.word	0x20000000
 8023874:	0801f44b 	.word	0x0801f44b
 8023878:	20000060 	.word	0x20000060
 802387c:	2005bb84 	.word	0x2005bb84
 8023880:	0801f449 	.word	0x0801f449
 8023884:	20000064 	.word	0x20000064

08023888 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023888:	b538      	push	{r3, r4, r5, lr}
 802388a:	4605      	mov	r5, r0
 802388c:	4c13      	ldr	r4, [pc, #76]	@ (80238dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 802388e:	e8d4 3f8f 	ldab	r3, [r4]
 8023892:	07da      	lsls	r2, r3, #31
 8023894:	d40b      	bmi.n	80238ae <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 8023896:	4620      	mov	r0, r4
 8023898:	f008 f98d 	bl	802bbb6 <__cxa_guard_acquire>
 802389c:	b138      	cbz	r0, 80238ae <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 802389e:	4620      	mov	r0, r4
 80238a0:	f008 f995 	bl	802bbce <__cxa_guard_release>
 80238a4:	4a0e      	ldr	r2, [pc, #56]	@ (80238e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80238a6:	490f      	ldr	r1, [pc, #60]	@ (80238e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80238a8:	480f      	ldr	r0, [pc, #60]	@ (80238e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80238aa:	f008 f97d 	bl	802bba8 <__aeabi_atexit>
 80238ae:	4c0f      	ldr	r4, [pc, #60]	@ (80238ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80238b0:	e8d4 3f8f 	ldab	r3, [r4]
 80238b4:	07db      	lsls	r3, r3, #31
 80238b6:	d40b      	bmi.n	80238d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 80238b8:	4620      	mov	r0, r4
 80238ba:	f008 f97c 	bl	802bbb6 <__cxa_guard_acquire>
 80238be:	b138      	cbz	r0, 80238d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 80238c0:	4620      	mov	r0, r4
 80238c2:	f008 f984 	bl	802bbce <__cxa_guard_release>
 80238c6:	4a06      	ldr	r2, [pc, #24]	@ (80238e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80238c8:	4909      	ldr	r1, [pc, #36]	@ (80238f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80238ca:	480a      	ldr	r0, [pc, #40]	@ (80238f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80238cc:	f008 f96c 	bl	802bba8 <__aeabi_atexit>
 80238d0:	4b05      	ldr	r3, [pc, #20]	@ (80238e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80238d2:	65eb      	str	r3, [r5, #92]	@ 0x5c
 80238d4:	4b07      	ldr	r3, [pc, #28]	@ (80238f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80238d6:	662b      	str	r3, [r5, #96]	@ 0x60
 80238d8:	bd38      	pop	{r3, r4, r5, pc}
 80238da:	bf00      	nop
 80238dc:	2005bb58 	.word	0x2005bb58
 80238e0:	20000000 	.word	0x20000000
 80238e4:	0801f44f 	.word	0x0801f44f
 80238e8:	20000038 	.word	0x20000038
 80238ec:	2005bb5c 	.word	0x2005bb5c
 80238f0:	0801f44d 	.word	0x0801f44d
 80238f4:	2000003c 	.word	0x2000003c

080238f8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80238f8:	b510      	push	{r4, lr}
 80238fa:	4604      	mov	r4, r0
 80238fc:	f7ff ff8c 	bl	8023818 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023900:	4620      	mov	r0, r4
 8023902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023906:	f7ff bfbf 	b.w	8023888 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0802390c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 802390c:	b538      	push	{r3, r4, r5, lr}
 802390e:	4605      	mov	r5, r0
 8023910:	4c13      	ldr	r4, [pc, #76]	@ (8023960 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 8023912:	e8d4 3f8f 	ldab	r3, [r4]
 8023916:	07da      	lsls	r2, r3, #31
 8023918:	d40b      	bmi.n	8023932 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 802391a:	4620      	mov	r0, r4
 802391c:	f008 f94b 	bl	802bbb6 <__cxa_guard_acquire>
 8023920:	b138      	cbz	r0, 8023932 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 8023922:	4620      	mov	r0, r4
 8023924:	f008 f953 	bl	802bbce <__cxa_guard_release>
 8023928:	4a0e      	ldr	r2, [pc, #56]	@ (8023964 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 802392a:	490f      	ldr	r1, [pc, #60]	@ (8023968 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802392c:	480f      	ldr	r0, [pc, #60]	@ (802396c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802392e:	f008 f93b 	bl	802bba8 <__aeabi_atexit>
 8023932:	4c0f      	ldr	r4, [pc, #60]	@ (8023970 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023934:	e8d4 3f8f 	ldab	r3, [r4]
 8023938:	07db      	lsls	r3, r3, #31
 802393a:	d40b      	bmi.n	8023954 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 802393c:	4620      	mov	r0, r4
 802393e:	f008 f93a 	bl	802bbb6 <__cxa_guard_acquire>
 8023942:	b138      	cbz	r0, 8023954 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 8023944:	4620      	mov	r0, r4
 8023946:	f008 f942 	bl	802bbce <__cxa_guard_release>
 802394a:	4a06      	ldr	r2, [pc, #24]	@ (8023964 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 802394c:	4909      	ldr	r1, [pc, #36]	@ (8023974 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802394e:	480a      	ldr	r0, [pc, #40]	@ (8023978 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023950:	f008 f92a 	bl	802bba8 <__aeabi_atexit>
 8023954:	4b05      	ldr	r3, [pc, #20]	@ (802396c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023956:	676b      	str	r3, [r5, #116]	@ 0x74
 8023958:	4b07      	ldr	r3, [pc, #28]	@ (8023978 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802395a:	67ab      	str	r3, [r5, #120]	@ 0x78
 802395c:	bd38      	pop	{r3, r4, r5, pc}
 802395e:	bf00      	nop
 8023960:	2005bb50 	.word	0x2005bb50
 8023964:	20000000 	.word	0x20000000
 8023968:	0801f443 	.word	0x0801f443
 802396c:	20000030 	.word	0x20000030
 8023970:	2005bb54 	.word	0x2005bb54
 8023974:	0801f441 	.word	0x0801f441
 8023978:	20000034 	.word	0x20000034

0802397c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 802397c:	b538      	push	{r3, r4, r5, lr}
 802397e:	4605      	mov	r5, r0
 8023980:	4c13      	ldr	r4, [pc, #76]	@ (80239d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 8023982:	e8d4 3f8f 	ldab	r3, [r4]
 8023986:	07da      	lsls	r2, r3, #31
 8023988:	d40b      	bmi.n	80239a2 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 802398a:	4620      	mov	r0, r4
 802398c:	f008 f913 	bl	802bbb6 <__cxa_guard_acquire>
 8023990:	b138      	cbz	r0, 80239a2 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 8023992:	4620      	mov	r0, r4
 8023994:	f008 f91b 	bl	802bbce <__cxa_guard_release>
 8023998:	4a0e      	ldr	r2, [pc, #56]	@ (80239d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802399a:	490f      	ldr	r1, [pc, #60]	@ (80239d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802399c:	480f      	ldr	r0, [pc, #60]	@ (80239dc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802399e:	f008 f903 	bl	802bba8 <__aeabi_atexit>
 80239a2:	4c0f      	ldr	r4, [pc, #60]	@ (80239e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80239a4:	e8d4 3f8f 	ldab	r3, [r4]
 80239a8:	07db      	lsls	r3, r3, #31
 80239aa:	d40b      	bmi.n	80239c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 80239ac:	4620      	mov	r0, r4
 80239ae:	f008 f902 	bl	802bbb6 <__cxa_guard_acquire>
 80239b2:	b138      	cbz	r0, 80239c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 80239b4:	4620      	mov	r0, r4
 80239b6:	f008 f90a 	bl	802bbce <__cxa_guard_release>
 80239ba:	4a06      	ldr	r2, [pc, #24]	@ (80239d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80239bc:	4909      	ldr	r1, [pc, #36]	@ (80239e4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80239be:	480a      	ldr	r0, [pc, #40]	@ (80239e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80239c0:	f008 f8f2 	bl	802bba8 <__aeabi_atexit>
 80239c4:	4b05      	ldr	r3, [pc, #20]	@ (80239dc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80239c6:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80239c8:	4b07      	ldr	r3, [pc, #28]	@ (80239e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80239ca:	672b      	str	r3, [r5, #112]	@ 0x70
 80239cc:	bd38      	pop	{r3, r4, r5, pc}
 80239ce:	bf00      	nop
 80239d0:	2005bb48 	.word	0x2005bb48
 80239d4:	20000000 	.word	0x20000000
 80239d8:	0801f447 	.word	0x0801f447
 80239dc:	20000028 	.word	0x20000028
 80239e0:	2005bb4c 	.word	0x2005bb4c
 80239e4:	0801f445 	.word	0x0801f445
 80239e8:	2000002c 	.word	0x2000002c

080239ec <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80239ec:	b510      	push	{r4, lr}
 80239ee:	4604      	mov	r4, r0
 80239f0:	f7ff ff8c 	bl	802390c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80239f4:	4620      	mov	r0, r4
 80239f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239fa:	f7ff bfbf 	b.w	802397c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080239fe <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80239fe:	b510      	push	{r4, lr}
 8023a00:	4604      	mov	r4, r0
 8023a02:	f7ff fff3 	bl	80239ec <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8023a06:	4620      	mov	r0, r4
 8023a08:	f7ff ff76 	bl	80238f8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8023a0c:	4620      	mov	r0, r4
 8023a0e:	f7ff fe09 	bl	8023624 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023a12:	4620      	mov	r0, r4
 8023a14:	f7ff fd12 	bl	802343c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023a18:	4620      	mov	r0, r4
 8023a1a:	f7ff fd89 	bl	8023530 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8023a1e:	4620      	mov	r0, r4
 8023a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023a24:	f7ff bee8 	b.w	80237f8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08023a28 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8023a28:	b538      	push	{r3, r4, r5, lr}
 8023a2a:	4605      	mov	r5, r0
 8023a2c:	4c09      	ldr	r4, [pc, #36]	@ (8023a54 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x2c>)
 8023a2e:	e8d4 3f8f 	ldab	r3, [r4]
 8023a32:	07db      	lsls	r3, r3, #31
 8023a34:	d40b      	bmi.n	8023a4e <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8023a36:	4620      	mov	r0, r4
 8023a38:	f008 f8bd 	bl	802bbb6 <__cxa_guard_acquire>
 8023a3c:	b138      	cbz	r0, 8023a4e <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8023a3e:	4620      	mov	r0, r4
 8023a40:	f008 f8c5 	bl	802bbce <__cxa_guard_release>
 8023a44:	4a04      	ldr	r2, [pc, #16]	@ (8023a58 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8023a46:	4905      	ldr	r1, [pc, #20]	@ (8023a5c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8023a48:	4805      	ldr	r0, [pc, #20]	@ (8023a60 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8023a4a:	f008 f8ad 	bl	802bba8 <__aeabi_atexit>
 8023a4e:	4b04      	ldr	r3, [pc, #16]	@ (8023a60 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8023a50:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8023a52:	bd38      	pop	{r3, r4, r5, pc}
 8023a54:	2005bb3c 	.word	0x2005bb3c
 8023a58:	20000000 	.word	0x20000000
 8023a5c:	0801f43f 	.word	0x0801f43f
 8023a60:	20000020 	.word	0x20000020

08023a64 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8023a64:	b538      	push	{r3, r4, r5, lr}
 8023a66:	4605      	mov	r5, r0
 8023a68:	4c0a      	ldr	r4, [pc, #40]	@ (8023a94 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8023a6a:	e8d4 3f8f 	ldab	r3, [r4]
 8023a6e:	07db      	lsls	r3, r3, #31
 8023a70:	d40b      	bmi.n	8023a8a <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8023a72:	4620      	mov	r0, r4
 8023a74:	f008 f89f 	bl	802bbb6 <__cxa_guard_acquire>
 8023a78:	b138      	cbz	r0, 8023a8a <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8023a7a:	4620      	mov	r0, r4
 8023a7c:	f008 f8a7 	bl	802bbce <__cxa_guard_release>
 8023a80:	4a05      	ldr	r2, [pc, #20]	@ (8023a98 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8023a82:	4906      	ldr	r1, [pc, #24]	@ (8023a9c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8023a84:	4806      	ldr	r0, [pc, #24]	@ (8023aa0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023a86:	f008 f88f 	bl	802bba8 <__aeabi_atexit>
 8023a8a:	4b05      	ldr	r3, [pc, #20]	@ (8023aa0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023a8c:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8023a90:	bd38      	pop	{r3, r4, r5, pc}
 8023a92:	bf00      	nop
 8023a94:	2005bb40 	.word	0x2005bb40
 8023a98:	20000000 	.word	0x20000000
 8023a9c:	0801f43d 	.word	0x0801f43d
 8023aa0:	20000024 	.word	0x20000024

08023aa4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8023aa4:	b570      	push	{r4, r5, r6, lr}
 8023aa6:	4606      	mov	r6, r0
 8023aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8023ad8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8023aaa:	e8d5 3f8f 	ldab	r3, [r5]
 8023aae:	f013 0f01 	tst.w	r3, #1
 8023ab2:	4c0a      	ldr	r4, [pc, #40]	@ (8023adc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8023ab4:	d10d      	bne.n	8023ad2 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8023ab6:	4628      	mov	r0, r5
 8023ab8:	f008 f87d 	bl	802bbb6 <__cxa_guard_acquire>
 8023abc:	b148      	cbz	r0, 8023ad2 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8023abe:	4b08      	ldr	r3, [pc, #32]	@ (8023ae0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8023ac0:	4628      	mov	r0, r5
 8023ac2:	6023      	str	r3, [r4, #0]
 8023ac4:	f008 f883 	bl	802bbce <__cxa_guard_release>
 8023ac8:	4a06      	ldr	r2, [pc, #24]	@ (8023ae4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8023aca:	4907      	ldr	r1, [pc, #28]	@ (8023ae8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8023acc:	4620      	mov	r0, r4
 8023ace:	f008 f86b 	bl	802bba8 <__aeabi_atexit>
 8023ad2:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8023ad6:	bd70      	pop	{r4, r5, r6, pc}
 8023ad8:	2005bb44 	.word	0x2005bb44
 8023adc:	2005bcbc 	.word	0x2005bcbc
 8023ae0:	0802fb00 	.word	0x0802fb00
 8023ae4:	20000000 	.word	0x20000000
 8023ae8:	0801f43b 	.word	0x0801f43b

08023aec <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8023aec:	b510      	push	{r4, lr}
 8023aee:	4604      	mov	r4, r0
 8023af0:	f7ff ff9a 	bl	8023a28 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8023af4:	4620      	mov	r0, r4
 8023af6:	f7ff ffb5 	bl	8023a64 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8023afa:	4620      	mov	r0, r4
 8023afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023b00:	f7ff bfd0 	b.w	8023aa4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08023b04 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 8023b04:	b570      	push	{r4, r5, r6, lr}
 8023b06:	4606      	mov	r6, r0
 8023b08:	4d0b      	ldr	r5, [pc, #44]	@ (8023b38 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x34>)
 8023b0a:	e8d5 3f8f 	ldab	r3, [r5]
 8023b0e:	f013 0f01 	tst.w	r3, #1
 8023b12:	4c0a      	ldr	r4, [pc, #40]	@ (8023b3c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8023b14:	d10d      	bne.n	8023b32 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8023b16:	4628      	mov	r0, r5
 8023b18:	f008 f84d 	bl	802bbb6 <__cxa_guard_acquire>
 8023b1c:	b148      	cbz	r0, 8023b32 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8023b1e:	4b08      	ldr	r3, [pc, #32]	@ (8023b40 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8023b20:	4628      	mov	r0, r5
 8023b22:	6023      	str	r3, [r4, #0]
 8023b24:	f008 f853 	bl	802bbce <__cxa_guard_release>
 8023b28:	4a06      	ldr	r2, [pc, #24]	@ (8023b44 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 8023b2a:	4907      	ldr	r1, [pc, #28]	@ (8023b48 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8023b2c:	4620      	mov	r0, r4
 8023b2e:	f008 f83b 	bl	802bba8 <__aeabi_atexit>
 8023b32:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8023b36:	bd70      	pop	{r4, r5, r6, pc}
 8023b38:	2005bb38 	.word	0x2005bb38
 8023b3c:	2005bbb8 	.word	0x2005bbb8
 8023b40:	0802fb1c 	.word	0x0802fb1c
 8023b44:	20000000 	.word	0x20000000
 8023b48:	0801f439 	.word	0x0801f439

08023b4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b50:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8023b54:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8023b58:	fb05 4c0e 	mla	ip, r5, lr, r4
 8023b5c:	2d00      	cmp	r5, #0
 8023b5e:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8023b62:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8023b66:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8023b6a:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8023b6e:	eb02 0a0c 	add.w	sl, r2, ip
 8023b72:	8808      	ldrh	r0, [r1, #0]
 8023b74:	f2c0 80b0 	blt.w	8023cd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023b78:	45ab      	cmp	fp, r5
 8023b7a:	f340 80ad 	ble.w	8023cd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023b7e:	2c00      	cmp	r4, #0
 8023b80:	f2c0 80a8 	blt.w	8023cd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023b84:	45a6      	cmp	lr, r4
 8023b86:	f340 80a5 	ble.w	8023cd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023b8a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8023b8e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8023b92:	1c62      	adds	r2, r4, #1
 8023b94:	f100 80a3 	bmi.w	8023cde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023b98:	4596      	cmp	lr, r2
 8023b9a:	f340 80a0 	ble.w	8023cde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023b9e:	f1b9 0f00 	cmp.w	r9, #0
 8023ba2:	f000 809c 	beq.w	8023cde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023ba6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023baa:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8023bae:	3501      	adds	r5, #1
 8023bb0:	f100 8099 	bmi.w	8023ce6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023bb4:	45ab      	cmp	fp, r5
 8023bb6:	f340 8096 	ble.w	8023ce6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023bba:	2f00      	cmp	r7, #0
 8023bbc:	f000 8093 	beq.w	8023ce6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023bc0:	2c00      	cmp	r4, #0
 8023bc2:	f2c0 808e 	blt.w	8023ce2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023bc6:	45a6      	cmp	lr, r4
 8023bc8:	f340 808b 	ble.w	8023ce2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023bcc:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8023bd0:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8023bd4:	3401      	adds	r4, #1
 8023bd6:	f100 8089 	bmi.w	8023cec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023bda:	45a6      	cmp	lr, r4
 8023bdc:	f340 8086 	ble.w	8023cec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023be0:	f1b9 0f00 	cmp.w	r9, #0
 8023be4:	f000 8082 	beq.w	8023cec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023be8:	44d6      	add	lr, sl
 8023bea:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023bee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8023bf2:	fb19 fe07 	smulbb	lr, r9, r7
 8023bf6:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8023bfa:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023bfe:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8023c02:	ea44 0808 	orr.w	r8, r4, r8
 8023c06:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8023c0a:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8023c0e:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023c12:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8023c16:	ea44 0c0c 	orr.w	ip, r4, ip
 8023c1a:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8023c1e:	fb04 f40c 	mul.w	r4, r4, ip
 8023c22:	f1c7 0210 	rsb	r2, r7, #16
 8023c26:	eba2 0209 	sub.w	r2, r2, r9
 8023c2a:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8023c2e:	fb02 4808 	mla	r8, r2, r8, r4
 8023c32:	b2b4      	uxth	r4, r6
 8023c34:	43f6      	mvns	r6, r6
 8023c36:	041a      	lsls	r2, r3, #16
 8023c38:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023c3c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023c40:	4313      	orrs	r3, r2
 8023c42:	fb0e 8303 	mla	r3, lr, r3, r8
 8023c46:	042a      	lsls	r2, r5, #16
 8023c48:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023c4c:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8023c50:	432a      	orrs	r2, r5
 8023c52:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8023c56:	fb07 3202 	mla	r2, r7, r2, r3
 8023c5a:	0d53      	lsrs	r3, r2, #21
 8023c5c:	0952      	lsrs	r2, r2, #5
 8023c5e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023c62:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023c66:	431a      	orrs	r2, r3
 8023c68:	b293      	uxth	r3, r2
 8023c6a:	1202      	asrs	r2, r0, #8
 8023c6c:	b2f6      	uxtb	r6, r6
 8023c6e:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023c72:	fb12 f206 	smulbb	r2, r2, r6
 8023c76:	10c7      	asrs	r7, r0, #3
 8023c78:	00c0      	lsls	r0, r0, #3
 8023c7a:	b2c0      	uxtb	r0, r0
 8023c7c:	121d      	asrs	r5, r3, #8
 8023c7e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8023c82:	fb10 f006 	smulbb	r0, r0, r6
 8023c86:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023c8a:	fb17 f706 	smulbb	r7, r7, r6
 8023c8e:	fb05 2504 	mla	r5, r5, r4, r2
 8023c92:	10da      	asrs	r2, r3, #3
 8023c94:	00db      	lsls	r3, r3, #3
 8023c96:	b2db      	uxtb	r3, r3
 8023c98:	fb03 0004 	mla	r0, r3, r4, r0
 8023c9c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023ca0:	fb02 7204 	mla	r2, r2, r4, r7
 8023ca4:	b2ad      	uxth	r5, r5
 8023ca6:	b280      	uxth	r0, r0
 8023ca8:	1c6b      	adds	r3, r5, #1
 8023caa:	b292      	uxth	r2, r2
 8023cac:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023cb0:	1c43      	adds	r3, r0, #1
 8023cb2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023cb6:	1c50      	adds	r0, r2, #1
 8023cb8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023cbc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8023cc0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023cc4:	0952      	lsrs	r2, r2, #5
 8023cc6:	432b      	orrs	r3, r5
 8023cc8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023ccc:	4313      	orrs	r3, r2
 8023cce:	800b      	strh	r3, [r1, #0]
 8023cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cd4:	4680      	mov	r8, r0
 8023cd6:	e75c      	b.n	8023b92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8023cd8:	4684      	mov	ip, r0
 8023cda:	4680      	mov	r8, r0
 8023cdc:	e767      	b.n	8023bae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8023cde:	4684      	mov	ip, r0
 8023ce0:	e765      	b.n	8023bae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8023ce2:	4605      	mov	r5, r0
 8023ce4:	e776      	b.n	8023bd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8023ce6:	4603      	mov	r3, r0
 8023ce8:	4605      	mov	r5, r0
 8023cea:	e782      	b.n	8023bf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8023cec:	4603      	mov	r3, r0
 8023cee:	e780      	b.n	8023bf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08023cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cf4:	b099      	sub	sp, #100	@ 0x64
 8023cf6:	9215      	str	r2, [sp, #84]	@ 0x54
 8023cf8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8023cfa:	9016      	str	r0, [sp, #88]	@ 0x58
 8023cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8023cfe:	6850      	ldr	r0, [r2, #4]
 8023d00:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8023d04:	910c      	str	r1, [sp, #48]	@ 0x30
 8023d06:	930d      	str	r3, [sp, #52]	@ 0x34
 8023d08:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8023d0c:	fb00 1303 	mla	r3, r0, r3, r1
 8023d10:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8023d14:	6812      	ldr	r2, [r2, #0]
 8023d16:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8023d1a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023d1c:	681b      	ldr	r3, [r3, #0]
 8023d1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023d20:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023d22:	685e      	ldr	r6, [r3, #4]
 8023d24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023d26:	3604      	adds	r6, #4
 8023d28:	43db      	mvns	r3, r3
 8023d2a:	b2db      	uxtb	r3, r3
 8023d2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8023d2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023d30:	2b00      	cmp	r3, #0
 8023d32:	dc03      	bgt.n	8023d3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023d34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023d36:	2b00      	cmp	r3, #0
 8023d38:	f340 8225 	ble.w	8024186 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023d3c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023d3e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023d42:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023d46:	1e48      	subs	r0, r1, #1
 8023d48:	1e57      	subs	r7, r2, #1
 8023d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d4c:	2b00      	cmp	r3, #0
 8023d4e:	f340 80e3 	ble.w	8023f18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023d52:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8023d56:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023d5a:	d406      	bmi.n	8023d6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023d5c:	4584      	cmp	ip, r0
 8023d5e:	da04      	bge.n	8023d6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023d60:	2b00      	cmp	r3, #0
 8023d62:	db02      	blt.n	8023d6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023d64:	42bb      	cmp	r3, r7
 8023d66:	f2c0 80d8 	blt.w	8023f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023d6a:	f11c 0c01 	adds.w	ip, ip, #1
 8023d6e:	f100 80c9 	bmi.w	8023f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023d72:	4561      	cmp	r1, ip
 8023d74:	f2c0 80c6 	blt.w	8023f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023d78:	3301      	adds	r3, #1
 8023d7a:	f100 80c3 	bmi.w	8023f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023d7e:	429a      	cmp	r2, r3
 8023d80:	f2c0 80c0 	blt.w	8023f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023d84:	4647      	mov	r7, r8
 8023d86:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8023d8a:	f1bb 0f00 	cmp.w	fp, #0
 8023d8e:	f340 80e3 	ble.w	8023f58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8023d92:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8023d94:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023d96:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023d9a:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023d9e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023da2:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023da6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023daa:	689b      	ldr	r3, [r3, #8]
 8023dac:	f100 8121 	bmi.w	8023ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023db0:	f103 39ff 	add.w	r9, r3, #4294967295
 8023db4:	454a      	cmp	r2, r9
 8023db6:	f280 811c 	bge.w	8023ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023dba:	f1bc 0f00 	cmp.w	ip, #0
 8023dbe:	f2c0 8118 	blt.w	8023ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023dc2:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023dc6:	45cc      	cmp	ip, r9
 8023dc8:	f280 8113 	bge.w	8023ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023dcc:	b21b      	sxth	r3, r3
 8023dce:	fb0c 2203 	mla	r2, ip, r3, r2
 8023dd2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023dd4:	eb04 0902 	add.w	r9, r4, r2
 8023dd8:	5ca2      	ldrb	r2, [r4, r2]
 8023dda:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8023dde:	2800      	cmp	r0, #0
 8023de0:	f000 80fe 	beq.w	8023fe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8023de4:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023de8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8023dec:	9211      	str	r2, [sp, #68]	@ 0x44
 8023dee:	b151      	cbz	r1, 8023e06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023df0:	eb09 0203 	add.w	r2, r9, r3
 8023df4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023df8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023dfc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023dfe:	7853      	ldrb	r3, [r2, #1]
 8023e00:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023e04:	9312      	str	r3, [sp, #72]	@ 0x48
 8023e06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023e08:	fb10 f201 	smulbb	r2, r0, r1
 8023e0c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023e10:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023e14:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023e18:	ea4c 0c03 	orr.w	ip, ip, r3
 8023e1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023e1e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023e20:	041b      	lsls	r3, r3, #16
 8023e22:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8023e26:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8023e2a:	10d2      	asrs	r2, r2, #3
 8023e2c:	4323      	orrs	r3, r4
 8023e2e:	4353      	muls	r3, r2
 8023e30:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8023e34:	fb09 330c 	mla	r3, r9, ip, r3
 8023e38:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023e3c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023e40:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8023e44:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023e48:	f1c1 0c10 	rsb	ip, r1, #16
 8023e4c:	ebac 0c00 	sub.w	ip, ip, r0
 8023e50:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023e54:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023e5a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023e5e:	0418      	lsls	r0, r3, #16
 8023e60:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8023e64:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023e68:	4318      	orrs	r0, r3
 8023e6a:	fb02 c200 	mla	r2, r2, r0, ip
 8023e6e:	8838      	ldrh	r0, [r7, #0]
 8023e70:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023e72:	0d53      	lsrs	r3, r2, #21
 8023e74:	1201      	asrs	r1, r0, #8
 8023e76:	0952      	lsrs	r2, r2, #5
 8023e78:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023e7c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023e80:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8023e84:	431a      	orrs	r2, r3
 8023e86:	fb11 f104 	smulbb	r1, r1, r4
 8023e8a:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8023e8e:	00c0      	lsls	r0, r0, #3
 8023e90:	b292      	uxth	r2, r2
 8023e92:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8023e96:	b2c0      	uxtb	r0, r0
 8023e98:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8023e9c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8023ea0:	fb1e fe04 	smulbb	lr, lr, r4
 8023ea4:	fb10 f004 	smulbb	r0, r0, r4
 8023ea8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8023eac:	fb0c 1c03 	mla	ip, ip, r3, r1
 8023eb0:	10d1      	asrs	r1, r2, #3
 8023eb2:	00d2      	lsls	r2, r2, #3
 8023eb4:	b2d2      	uxtb	r2, r2
 8023eb6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023eba:	fb01 e103 	mla	r1, r1, r3, lr
 8023ebe:	fb02 0303 	mla	r3, r2, r3, r0
 8023ec2:	fa1f fc8c 	uxth.w	ip, ip
 8023ec6:	b29a      	uxth	r2, r3
 8023ec8:	f10c 0301 	add.w	r3, ip, #1
 8023ecc:	b289      	uxth	r1, r1
 8023ece:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023ed2:	1c53      	adds	r3, r2, #1
 8023ed4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023ed8:	1c4a      	adds	r2, r1, #1
 8023eda:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023ede:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8023ee2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023ee6:	0949      	lsrs	r1, r1, #5
 8023ee8:	ea43 030c 	orr.w	r3, r3, ip
 8023eec:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023ef0:	430b      	orrs	r3, r1
 8023ef2:	803b      	strh	r3, [r7, #0]
 8023ef4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023ef6:	3702      	adds	r7, #2
 8023ef8:	449a      	add	sl, r3
 8023efa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023efc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023f00:	441d      	add	r5, r3
 8023f02:	e742      	b.n	8023d8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023f04:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023f06:	f108 0802 	add.w	r8, r8, #2
 8023f0a:	449a      	add	sl, r3
 8023f0c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023f0e:	441d      	add	r5, r3
 8023f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f12:	3b01      	subs	r3, #1
 8023f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f16:	e718      	b.n	8023d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023f18:	d023      	beq.n	8023f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8023f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f1c:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8023f1e:	3b01      	subs	r3, #1
 8023f20:	fb00 a003 	mla	r0, r0, r3, sl
 8023f24:	1400      	asrs	r0, r0, #16
 8023f26:	f53f af2d 	bmi.w	8023d84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023f2a:	3901      	subs	r1, #1
 8023f2c:	4288      	cmp	r0, r1
 8023f2e:	f6bf af29 	bge.w	8023d84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023f32:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8023f34:	fb01 5303 	mla	r3, r1, r3, r5
 8023f38:	141b      	asrs	r3, r3, #16
 8023f3a:	f53f af23 	bmi.w	8023d84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023f3e:	3a01      	subs	r2, #1
 8023f40:	4293      	cmp	r3, r2
 8023f42:	f6bf af1f 	bge.w	8023d84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023f46:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8023f4a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8023f4e:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8023f52:	f1be 0f00 	cmp.w	lr, #0
 8023f56:	dc6c      	bgt.n	8024032 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f5a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023f5e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8023f62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	f340 810e 	ble.w	8024186 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023f6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023f6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023f72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023f76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023f7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023f7e:	eef0 6a62 	vmov.f32	s13, s5
 8023f82:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023f86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023f8a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023f8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023f96:	ee16 aa90 	vmov	sl, s13
 8023f9a:	eef0 6a43 	vmov.f32	s13, s6
 8023f9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023fa2:	ee12 2a90 	vmov	r2, s5
 8023fa6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023faa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023fac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023fb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8023fb4:	ee13 2a10 	vmov	r2, s6
 8023fb8:	9325      	str	r3, [sp, #148]	@ 0x94
 8023fba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023fbc:	ee16 5a90 	vmov	r5, s13
 8023fc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8023fc4:	9326      	str	r3, [sp, #152]	@ 0x98
 8023fc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023fc8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023fca:	3b01      	subs	r3, #1
 8023fcc:	930c      	str	r3, [sp, #48]	@ 0x30
 8023fce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023fd0:	bf08      	it	eq
 8023fd2:	4613      	moveq	r3, r2
 8023fd4:	eeb0 3a67 	vmov.f32	s6, s15
 8023fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fda:	eef0 2a47 	vmov.f32	s5, s14
 8023fde:	e6a6      	b.n	8023d2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023fe0:	2900      	cmp	r1, #0
 8023fe2:	f43f af10 	beq.w	8023e06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023fe6:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023fea:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023fee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023ff0:	e709      	b.n	8023e06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023ff2:	f112 0901 	adds.w	r9, r2, #1
 8023ff6:	f53f af7d 	bmi.w	8023ef4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023ffa:	454b      	cmp	r3, r9
 8023ffc:	f6ff af7a 	blt.w	8023ef4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024000:	f11c 0901 	adds.w	r9, ip, #1
 8024004:	f53f af76 	bmi.w	8023ef4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024008:	45ce      	cmp	lr, r9
 802400a:	f6ff af73 	blt.w	8023ef4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802400e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024010:	9202      	str	r2, [sp, #8]
 8024012:	b21b      	sxth	r3, r3
 8024014:	fa0f f28e 	sxth.w	r2, lr
 8024018:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802401c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024020:	9201      	str	r2, [sp, #4]
 8024022:	9300      	str	r3, [sp, #0]
 8024024:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024026:	4633      	mov	r3, r6
 8024028:	4639      	mov	r1, r7
 802402a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802402c:	f7ff fd8e 	bl	8023b4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8024030:	e760      	b.n	8023ef4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024032:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024034:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024038:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802403c:	1429      	asrs	r1, r5, #16
 802403e:	fb03 2101 	mla	r1, r3, r1, r2
 8024042:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024044:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024046:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802404a:	440a      	add	r2, r1
 802404c:	5c61      	ldrb	r1, [r4, r1]
 802404e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024052:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8024056:	f1bc 0f00 	cmp.w	ip, #0
 802405a:	f000 808c 	beq.w	8024176 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802405e:	7857      	ldrb	r7, [r2, #1]
 8024060:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8024064:	9413      	str	r4, [sp, #76]	@ 0x4c
 8024066:	b140      	cbz	r0, 802407a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024068:	18d7      	adds	r7, r2, r3
 802406a:	5cd3      	ldrb	r3, [r2, r3]
 802406c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024070:	9310      	str	r3, [sp, #64]	@ 0x40
 8024072:	787b      	ldrb	r3, [r7, #1]
 8024074:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024078:	9314      	str	r3, [sp, #80]	@ 0x50
 802407a:	fb1c f200 	smulbb	r2, ip, r0
 802407e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024080:	10d2      	asrs	r2, r2, #3
 8024082:	041f      	lsls	r7, r3, #16
 8024084:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 8024088:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802408c:	431f      	orrs	r7, r3
 802408e:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8024092:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024094:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024096:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024098:	041b      	lsls	r3, r3, #16
 802409a:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 802409e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80240a2:	ea43 030b 	orr.w	r3, r3, fp
 80240a6:	4353      	muls	r3, r2
 80240a8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80240aa:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80240ae:	fb04 3707 	mla	r7, r4, r7, r3
 80240b2:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80240b6:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80240ba:	ea43 0b01 	orr.w	fp, r3, r1
 80240be:	f1c0 0110 	rsb	r1, r0, #16
 80240c2:	eba1 0c0c 	sub.w	ip, r1, ip
 80240c6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80240ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80240cc:	fb0c 770b 	mla	r7, ip, fp, r7
 80240d0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80240d4:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 80240d8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80240dc:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80240e0:	ea4c 0c0b 	orr.w	ip, ip, fp
 80240e4:	fb02 770c 	mla	r7, r2, ip, r7
 80240e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80240ea:	0d79      	lsrs	r1, r7, #21
 80240ec:	8812      	ldrh	r2, [r2, #0]
 80240ee:	097f      	lsrs	r7, r7, #5
 80240f0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80240f4:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80240f8:	430f      	orrs	r7, r1
 80240fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80240fc:	1211      	asrs	r1, r2, #8
 80240fe:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8024102:	b2bb      	uxth	r3, r7
 8024104:	fb11 f104 	smulbb	r1, r1, r4
 8024108:	10d7      	asrs	r7, r2, #3
 802410a:	00d2      	lsls	r2, r2, #3
 802410c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8024110:	b2d2      	uxtb	r2, r2
 8024112:	1218      	asrs	r0, r3, #8
 8024114:	fb17 f704 	smulbb	r7, r7, r4
 8024118:	fb12 f204 	smulbb	r2, r2, r4
 802411c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8024120:	fb00 1009 	mla	r0, r0, r9, r1
 8024124:	10d9      	asrs	r1, r3, #3
 8024126:	00db      	lsls	r3, r3, #3
 8024128:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802412c:	b2db      	uxtb	r3, r3
 802412e:	fb01 7109 	mla	r1, r1, r9, r7
 8024132:	fb03 2309 	mla	r3, r3, r9, r2
 8024136:	b280      	uxth	r0, r0
 8024138:	b29b      	uxth	r3, r3
 802413a:	b289      	uxth	r1, r1
 802413c:	1c42      	adds	r2, r0, #1
 802413e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024142:	1c4f      	adds	r7, r1, #1
 8024144:	1c5a      	adds	r2, r3, #1
 8024146:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802414a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802414e:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8024152:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024156:	0949      	lsrs	r1, r1, #5
 8024158:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802415a:	4310      	orrs	r0, r2
 802415c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024160:	4308      	orrs	r0, r1
 8024162:	f823 0b02 	strh.w	r0, [r3], #2
 8024166:	930e      	str	r3, [sp, #56]	@ 0x38
 8024168:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802416a:	f10e 3eff 	add.w	lr, lr, #4294967295
 802416e:	449a      	add	sl, r3
 8024170:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024172:	441d      	add	r5, r3
 8024174:	e6ed      	b.n	8023f52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8024176:	2800      	cmp	r0, #0
 8024178:	f43f af7f 	beq.w	802407a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802417c:	5cd3      	ldrb	r3, [r2, r3]
 802417e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024182:	9310      	str	r3, [sp, #64]	@ 0x40
 8024184:	e779      	b.n	802407a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024186:	b019      	add	sp, #100	@ 0x64
 8024188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802418c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802418c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024190:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8024194:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 8024198:	fb08 470e 	mla	r7, r8, lr, r4
 802419c:	f1b8 0f00 	cmp.w	r8, #0
 80241a0:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 80241a4:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 80241a8:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 80241ac:	eb02 0907 	add.w	r9, r2, r7
 80241b0:	8808      	ldrh	r0, [r1, #0]
 80241b2:	db67      	blt.n	8024284 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80241b4:	45c2      	cmp	sl, r8
 80241b6:	dd65      	ble.n	8024284 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80241b8:	2c00      	cmp	r4, #0
 80241ba:	db61      	blt.n	8024280 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80241bc:	45a6      	cmp	lr, r4
 80241be:	dd5f      	ble.n	8024280 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80241c0:	5dd2      	ldrb	r2, [r2, r7]
 80241c2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80241c6:	1c62      	adds	r2, r4, #1
 80241c8:	d45f      	bmi.n	802428a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80241ca:	4596      	cmp	lr, r2
 80241cc:	dd5d      	ble.n	802428a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80241ce:	2d00      	cmp	r5, #0
 80241d0:	d05b      	beq.n	802428a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80241d2:	f899 2001 	ldrb.w	r2, [r9, #1]
 80241d6:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80241da:	f118 0801 	adds.w	r8, r8, #1
 80241de:	d458      	bmi.n	8024292 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80241e0:	45c2      	cmp	sl, r8
 80241e2:	dd56      	ble.n	8024292 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80241e4:	2e00      	cmp	r6, #0
 80241e6:	d054      	beq.n	8024292 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80241e8:	2c00      	cmp	r4, #0
 80241ea:	db50      	blt.n	802428e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80241ec:	45a6      	cmp	lr, r4
 80241ee:	dd4e      	ble.n	802428e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80241f0:	f819 200e 	ldrb.w	r2, [r9, lr]
 80241f4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80241f8:	3401      	adds	r4, #1
 80241fa:	d407      	bmi.n	802420c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80241fc:	45a6      	cmp	lr, r4
 80241fe:	dd05      	ble.n	802420c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024200:	b125      	cbz	r5, 802420c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024202:	44ce      	add	lr, r9
 8024204:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024208:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 802420c:	fb15 f406 	smulbb	r4, r5, r6
 8024210:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8024214:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8024218:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802421c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8024220:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8024224:	ea43 0c0c 	orr.w	ip, r3, ip
 8024228:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 802422c:	f1c6 0310 	rsb	r3, r6, #16
 8024230:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8024234:	1b5b      	subs	r3, r3, r5
 8024236:	ea4e 0707 	orr.w	r7, lr, r7
 802423a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802423e:	437d      	muls	r5, r7
 8024240:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8024244:	fb03 5c0c 	mla	ip, r3, ip, r5
 8024248:	0403      	lsls	r3, r0, #16
 802424a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802424e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024252:	4318      	orrs	r0, r3
 8024254:	fb04 c000 	mla	r0, r4, r0, ip
 8024258:	0413      	lsls	r3, r2, #16
 802425a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802425e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024262:	4313      	orrs	r3, r2
 8024264:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8024268:	fb06 0003 	mla	r0, r6, r3, r0
 802426c:	0d43      	lsrs	r3, r0, #21
 802426e:	0940      	lsrs	r0, r0, #5
 8024270:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024274:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024278:	4318      	orrs	r0, r3
 802427a:	8008      	strh	r0, [r1, #0]
 802427c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024280:	4684      	mov	ip, r0
 8024282:	e7a0      	b.n	80241c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8024284:	4607      	mov	r7, r0
 8024286:	4684      	mov	ip, r0
 8024288:	e7a7      	b.n	80241da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802428a:	4607      	mov	r7, r0
 802428c:	e7a5      	b.n	80241da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802428e:	4602      	mov	r2, r0
 8024290:	e7b2      	b.n	80241f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8024292:	4602      	mov	r2, r0
 8024294:	e7ba      	b.n	802420c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08024296 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802429a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802429e:	b093      	sub	sp, #76	@ 0x4c
 80242a0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80242a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80242a4:	9010      	str	r0, [sp, #64]	@ 0x40
 80242a6:	6850      	ldr	r0, [r2, #4]
 80242a8:	9108      	str	r1, [sp, #32]
 80242aa:	9306      	str	r3, [sp, #24]
 80242ac:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80242b0:	fb00 1303 	mla	r3, r0, r3, r1
 80242b4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 80242b8:	6812      	ldr	r2, [r2, #0]
 80242ba:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80242be:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80242c0:	681b      	ldr	r3, [r3, #0]
 80242c2:	9307      	str	r3, [sp, #28]
 80242c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80242c6:	685f      	ldr	r7, [r3, #4]
 80242c8:	3704      	adds	r7, #4
 80242ca:	9b08      	ldr	r3, [sp, #32]
 80242cc:	2b00      	cmp	r3, #0
 80242ce:	dc03      	bgt.n	80242d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80242d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80242d2:	2b00      	cmp	r3, #0
 80242d4:	f340 81b2 	ble.w	802463c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80242d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80242da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80242de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80242e2:	1e48      	subs	r0, r1, #1
 80242e4:	f102 3cff 	add.w	ip, r2, #4294967295
 80242e8:	9b06      	ldr	r3, [sp, #24]
 80242ea:	2b00      	cmp	r3, #0
 80242ec:	f340 80a9 	ble.w	8024442 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80242f0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80242f4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80242f8:	d406      	bmi.n	8024308 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80242fa:	4586      	cmp	lr, r0
 80242fc:	da04      	bge.n	8024308 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80242fe:	2b00      	cmp	r3, #0
 8024300:	db02      	blt.n	8024308 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024302:	4563      	cmp	r3, ip
 8024304:	f2c0 809e 	blt.w	8024444 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024308:	f11e 0e01 	adds.w	lr, lr, #1
 802430c:	f100 808f 	bmi.w	802442e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024310:	4571      	cmp	r1, lr
 8024312:	f2c0 808c 	blt.w	802442e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024316:	3301      	adds	r3, #1
 8024318:	f100 8089 	bmi.w	802442e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802431c:	429a      	cmp	r2, r3
 802431e:	f2c0 8086 	blt.w	802442e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024322:	46c8      	mov	r8, r9
 8024324:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024328:	f1bb 0f00 	cmp.w	fp, #0
 802432c:	f340 80a6 	ble.w	802447c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024330:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8024332:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024334:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024338:	1422      	asrs	r2, r4, #16
 802433a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802433e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024342:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024346:	689b      	ldr	r3, [r3, #8]
 8024348:	f100 80e3 	bmi.w	8024512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802434c:	f103 3aff 	add.w	sl, r3, #4294967295
 8024350:	4552      	cmp	r2, sl
 8024352:	f280 80de 	bge.w	8024512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024356:	f1bc 0f00 	cmp.w	ip, #0
 802435a:	f2c0 80da 	blt.w	8024512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802435e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8024362:	45d4      	cmp	ip, sl
 8024364:	f280 80d5 	bge.w	8024512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024368:	b21b      	sxth	r3, r3
 802436a:	fb0c 2203 	mla	r2, ip, r3, r2
 802436e:	9d07      	ldr	r5, [sp, #28]
 8024370:	eb05 0a02 	add.w	sl, r5, r2
 8024374:	5caa      	ldrb	r2, [r5, r2]
 8024376:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 802437a:	2800      	cmp	r0, #0
 802437c:	f000 80c0 	beq.w	8024500 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8024380:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024384:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8024388:	920b      	str	r2, [sp, #44]	@ 0x2c
 802438a:	b151      	cbz	r1, 80243a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802438c:	eb0a 0203 	add.w	r2, sl, r3
 8024390:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024394:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024398:	9309      	str	r3, [sp, #36]	@ 0x24
 802439a:	7853      	ldrb	r3, [r2, #1]
 802439c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80243a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80243a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80243a4:	fb10 f201 	smulbb	r2, r0, r1
 80243a8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80243ac:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80243b0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80243b4:	ea4c 0c03 	orr.w	ip, ip, r3
 80243b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243ba:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80243bc:	041b      	lsls	r3, r3, #16
 80243be:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80243c2:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80243c6:	10d2      	asrs	r2, r2, #3
 80243c8:	432b      	orrs	r3, r5
 80243ca:	4353      	muls	r3, r2
 80243cc:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80243d0:	fb0a 330c 	mla	r3, sl, ip, r3
 80243d4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80243d8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80243dc:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80243e0:	ea4c 0e0e 	orr.w	lr, ip, lr
 80243e4:	f1c1 0c10 	rsb	ip, r1, #16
 80243e8:	ebac 0c00 	sub.w	ip, ip, r0
 80243ec:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80243f0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80243f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80243f6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80243fa:	0418      	lsls	r0, r3, #16
 80243fc:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8024400:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024404:	4318      	orrs	r0, r3
 8024406:	fb02 c200 	mla	r2, r2, r0, ip
 802440a:	0d53      	lsrs	r3, r2, #21
 802440c:	0952      	lsrs	r2, r2, #5
 802440e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024412:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024416:	431a      	orrs	r2, r3
 8024418:	f8a8 2000 	strh.w	r2, [r8]
 802441c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802441e:	f108 0802 	add.w	r8, r8, #2
 8024422:	441c      	add	r4, r3
 8024424:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024426:	f10b 3bff 	add.w	fp, fp, #4294967295
 802442a:	441e      	add	r6, r3
 802442c:	e77c      	b.n	8024328 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802442e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024430:	f109 0902 	add.w	r9, r9, #2
 8024434:	441c      	add	r4, r3
 8024436:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024438:	441e      	add	r6, r3
 802443a:	9b06      	ldr	r3, [sp, #24]
 802443c:	3b01      	subs	r3, #1
 802443e:	9306      	str	r3, [sp, #24]
 8024440:	e752      	b.n	80242e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024442:	d020      	beq.n	8024486 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8024444:	9b06      	ldr	r3, [sp, #24]
 8024446:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8024448:	3b01      	subs	r3, #1
 802444a:	fb00 4003 	mla	r0, r0, r3, r4
 802444e:	1400      	asrs	r0, r0, #16
 8024450:	f53f af67 	bmi.w	8024322 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024454:	3901      	subs	r1, #1
 8024456:	4288      	cmp	r0, r1
 8024458:	f6bf af63 	bge.w	8024322 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802445c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802445e:	fb01 6303 	mla	r3, r1, r3, r6
 8024462:	141b      	asrs	r3, r3, #16
 8024464:	f53f af5d 	bmi.w	8024322 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024468:	3a01      	subs	r2, #1
 802446a:	4293      	cmp	r3, r2
 802446c:	f6bf af59 	bge.w	8024322 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024470:	46ca      	mov	sl, r9
 8024472:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8024476:	f1b8 0f00 	cmp.w	r8, #0
 802447a:	dc67      	bgt.n	802454c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802447c:	9b06      	ldr	r3, [sp, #24]
 802447e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024482:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024486:	9b08      	ldr	r3, [sp, #32]
 8024488:	2b00      	cmp	r3, #0
 802448a:	f340 80d7 	ble.w	802463c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802448e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024492:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024496:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802449a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802449e:	eeb0 6a62 	vmov.f32	s12, s5
 80244a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80244a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80244aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80244ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80244b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80244b6:	ee16 4a10 	vmov	r4, s12
 80244ba:	eeb0 6a43 	vmov.f32	s12, s6
 80244be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80244c2:	ee12 2a90 	vmov	r2, s5
 80244c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80244ca:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80244cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80244d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80244d4:	ee13 2a10 	vmov	r2, s6
 80244d8:	931f      	str	r3, [sp, #124]	@ 0x7c
 80244da:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80244dc:	ee16 6a10 	vmov	r6, s12
 80244e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80244e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80244e6:	9b08      	ldr	r3, [sp, #32]
 80244e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80244ea:	3b01      	subs	r3, #1
 80244ec:	9308      	str	r3, [sp, #32]
 80244ee:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80244f0:	bf08      	it	eq
 80244f2:	4613      	moveq	r3, r2
 80244f4:	eeb0 3a67 	vmov.f32	s6, s15
 80244f8:	9306      	str	r3, [sp, #24]
 80244fa:	eef0 2a47 	vmov.f32	s5, s14
 80244fe:	e6e4      	b.n	80242ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024500:	2900      	cmp	r1, #0
 8024502:	f43f af4e 	beq.w	80243a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8024506:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802450a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802450e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024510:	e747      	b.n	80243a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8024512:	f112 0a01 	adds.w	sl, r2, #1
 8024516:	d481      	bmi.n	802441c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024518:	4553      	cmp	r3, sl
 802451a:	f6ff af7f 	blt.w	802441c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802451e:	f11c 0a01 	adds.w	sl, ip, #1
 8024522:	f53f af7b 	bmi.w	802441c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024526:	45d6      	cmp	lr, sl
 8024528:	f6ff af78 	blt.w	802441c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802452c:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8024530:	b21b      	sxth	r3, r3
 8024532:	fa0f f28e 	sxth.w	r2, lr
 8024536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802453a:	9201      	str	r2, [sp, #4]
 802453c:	9300      	str	r3, [sp, #0]
 802453e:	9a07      	ldr	r2, [sp, #28]
 8024540:	463b      	mov	r3, r7
 8024542:	4641      	mov	r1, r8
 8024544:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024546:	f7ff fe21 	bl	802418c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802454a:	e767      	b.n	802441c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802454c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802454e:	1422      	asrs	r2, r4, #16
 8024550:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024554:	1431      	asrs	r1, r6, #16
 8024556:	fb03 2101 	mla	r1, r3, r1, r2
 802455a:	9d07      	ldr	r5, [sp, #28]
 802455c:	9a07      	ldr	r2, [sp, #28]
 802455e:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8024562:	440a      	add	r2, r1
 8024564:	5c69      	ldrb	r1, [r5, r1]
 8024566:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802456a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802456e:	f1be 0f00 	cmp.w	lr, #0
 8024572:	d05c      	beq.n	802462e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8024574:	f892 c001 	ldrb.w	ip, [r2, #1]
 8024578:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802457c:	950d      	str	r5, [sp, #52]	@ 0x34
 802457e:	b150      	cbz	r0, 8024596 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024580:	eb02 0c03 	add.w	ip, r2, r3
 8024584:	5cd3      	ldrb	r3, [r2, r3]
 8024586:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802458a:	930a      	str	r3, [sp, #40]	@ 0x28
 802458c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024590:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024594:	930e      	str	r3, [sp, #56]	@ 0x38
 8024596:	fb1e f200 	smulbb	r2, lr, r0
 802459a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802459c:	10d2      	asrs	r2, r2, #3
 802459e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80245a2:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80245a6:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80245aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80245ae:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80245b2:	9311      	str	r3, [sp, #68]	@ 0x44
 80245b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80245b6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80245b8:	041b      	lsls	r3, r3, #16
 80245ba:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 80245be:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80245c2:	ea43 030b 	orr.w	r3, r3, fp
 80245c6:	4353      	muls	r3, r2
 80245c8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80245ca:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80245ce:	fb05 3c0c 	mla	ip, r5, ip, r3
 80245d2:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80245d6:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80245da:	ea43 0b01 	orr.w	fp, r3, r1
 80245de:	f1c0 0110 	rsb	r1, r0, #16
 80245e2:	eba1 0e0e 	sub.w	lr, r1, lr
 80245e6:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80245ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80245ec:	fb0e cc0b 	mla	ip, lr, fp, ip
 80245f0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80245f4:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80245f8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80245fc:	ea4b 0e0e 	orr.w	lr, fp, lr
 8024600:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024604:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024608:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802460c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024610:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024614:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8024618:	ea43 0c0c 	orr.w	ip, r3, ip
 802461c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802461e:	f82a cb02 	strh.w	ip, [sl], #2
 8024622:	441c      	add	r4, r3
 8024624:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024626:	f108 38ff 	add.w	r8, r8, #4294967295
 802462a:	441e      	add	r6, r3
 802462c:	e723      	b.n	8024476 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802462e:	2800      	cmp	r0, #0
 8024630:	d0b1      	beq.n	8024596 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024632:	5cd3      	ldrb	r3, [r2, r3]
 8024634:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024638:	930a      	str	r3, [sp, #40]	@ 0x28
 802463a:	e7ac      	b.n	8024596 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802463c:	b013      	add	sp, #76	@ 0x4c
 802463e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024642 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8024642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024646:	880d      	ldrh	r5, [r1, #0]
 8024648:	b087      	sub	sp, #28
 802464a:	10ef      	asrs	r7, r5, #3
 802464c:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8024650:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8024654:	00ed      	lsls	r5, r5, #3
 8024656:	9701      	str	r7, [sp, #4]
 8024658:	b2ed      	uxtb	r5, r5
 802465a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 802465e:	9502      	str	r5, [sp, #8]
 8024660:	9d01      	ldr	r5, [sp, #4]
 8024662:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8024666:	fb06 0709 	mla	r7, r6, r9, r0
 802466a:	9103      	str	r1, [sp, #12]
 802466c:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8024670:	022d      	lsls	r5, r5, #8
 8024672:	9902      	ldr	r1, [sp, #8]
 8024674:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8024678:	430d      	orrs	r5, r1
 802467a:	2e00      	cmp	r6, #0
 802467c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8024680:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8024684:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 8024688:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 802468c:	eb02 0c07 	add.w	ip, r2, r7
 8024690:	9505      	str	r5, [sp, #20]
 8024692:	f2c0 80b6 	blt.w	8024802 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8024696:	45b3      	cmp	fp, r6
 8024698:	f340 80b3 	ble.w	8024802 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 802469c:	2800      	cmp	r0, #0
 802469e:	f2c0 80ae 	blt.w	80247fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80246a2:	4581      	cmp	r9, r0
 80246a4:	f340 80ab 	ble.w	80247fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80246a8:	5dd7      	ldrb	r7, [r2, r7]
 80246aa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80246ae:	441f      	add	r7, r3
 80246b0:	1c42      	adds	r2, r0, #1
 80246b2:	f100 80a9 	bmi.w	8024808 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80246b6:	4591      	cmp	r9, r2
 80246b8:	f340 80a6 	ble.w	8024808 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80246bc:	2c00      	cmp	r4, #0
 80246be:	f000 80a3 	beq.w	8024808 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80246c2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80246c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80246ca:	441d      	add	r5, r3
 80246cc:	3601      	adds	r6, #1
 80246ce:	f100 809f 	bmi.w	8024810 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80246d2:	45b3      	cmp	fp, r6
 80246d4:	f340 809c 	ble.w	8024810 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80246d8:	f1be 0f00 	cmp.w	lr, #0
 80246dc:	f000 8098 	beq.w	8024810 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80246e0:	2800      	cmp	r0, #0
 80246e2:	f2c0 8093 	blt.w	802480c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80246e6:	4581      	cmp	r9, r0
 80246e8:	f340 8090 	ble.w	802480c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80246ec:	f81c 6009 	ldrb.w	r6, [ip, r9]
 80246f0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80246f4:	441e      	add	r6, r3
 80246f6:	3001      	adds	r0, #1
 80246f8:	f100 808d 	bmi.w	8024816 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80246fc:	4581      	cmp	r9, r0
 80246fe:	f340 808a 	ble.w	8024816 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024702:	2c00      	cmp	r4, #0
 8024704:	f000 8087 	beq.w	8024816 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024708:	44e1      	add	r9, ip
 802470a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802470e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024712:	4413      	add	r3, r2
 8024714:	b2a4      	uxth	r4, r4
 8024716:	fa1f fe8e 	uxth.w	lr, lr
 802471a:	fb04 fb0e 	mul.w	fp, r4, lr
 802471e:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8024722:	fa1f f08e 	uxth.w	r0, lr
 8024726:	fa1f fe88 	uxth.w	lr, r8
 802472a:	ea6f 0808 	mvn.w	r8, r8
 802472e:	0124      	lsls	r4, r4, #4
 8024730:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8024734:	eba4 040b 	sub.w	r4, r4, fp
 8024738:	b2a2      	uxth	r2, r4
 802473a:	78ac      	ldrb	r4, [r5, #2]
 802473c:	f897 c002 	ldrb.w	ip, [r7, #2]
 8024740:	4354      	muls	r4, r2
 8024742:	eba9 0900 	sub.w	r9, r9, r0
 8024746:	fa1f f989 	uxth.w	r9, r9
 802474a:	fb09 440c 	mla	r4, r9, ip, r4
 802474e:	f896 c002 	ldrb.w	ip, [r6, #2]
 8024752:	fa5f f888 	uxtb.w	r8, r8
 8024756:	fb00 440c 	mla	r4, r0, ip, r4
 802475a:	f893 c002 	ldrb.w	ip, [r3, #2]
 802475e:	fb1a fa08 	smulbb	sl, sl, r8
 8024762:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8024766:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802476a:	fb0c ac0e 	mla	ip, ip, lr, sl
 802476e:	f895 a001 	ldrb.w	sl, [r5, #1]
 8024772:	782d      	ldrb	r5, [r5, #0]
 8024774:	fb02 fa0a 	mul.w	sl, r2, sl
 8024778:	436a      	muls	r2, r5
 802477a:	787c      	ldrb	r4, [r7, #1]
 802477c:	783f      	ldrb	r7, [r7, #0]
 802477e:	fb09 aa04 	mla	sl, r9, r4, sl
 8024782:	fb09 2207 	mla	r2, r9, r7, r2
 8024786:	7874      	ldrb	r4, [r6, #1]
 8024788:	7835      	ldrb	r5, [r6, #0]
 802478a:	fb00 aa04 	mla	sl, r0, r4, sl
 802478e:	fb00 2005 	mla	r0, r0, r5, r2
 8024792:	785c      	ldrb	r4, [r3, #1]
 8024794:	781b      	ldrb	r3, [r3, #0]
 8024796:	fb0b a404 	mla	r4, fp, r4, sl
 802479a:	9901      	ldr	r1, [sp, #4]
 802479c:	fb0b 0b03 	mla	fp, fp, r3, r0
 80247a0:	9b02      	ldr	r3, [sp, #8]
 80247a2:	fb11 fa08 	smulbb	sl, r1, r8
 80247a6:	fb13 f808 	smulbb	r8, r3, r8
 80247aa:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80247ae:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80247b2:	fb04 a40e 	mla	r4, r4, lr, sl
 80247b6:	fb0b 8e0e 	mla	lr, fp, lr, r8
 80247ba:	fa1f fc8c 	uxth.w	ip, ip
 80247be:	f10c 0301 	add.w	r3, ip, #1
 80247c2:	fa1f fe8e 	uxth.w	lr, lr
 80247c6:	b2a4      	uxth	r4, r4
 80247c8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80247cc:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 80247d0:	f104 0a01 	add.w	sl, r4, #1
 80247d4:	f10e 0c01 	add.w	ip, lr, #1
 80247d8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80247dc:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80247e0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80247e4:	0964      	lsrs	r4, r4, #5
 80247e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80247ea:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80247ee:	9b03      	ldr	r3, [sp, #12]
 80247f0:	ea4c 0c04 	orr.w	ip, ip, r4
 80247f4:	f8a3 c000 	strh.w	ip, [r3]
 80247f8:	b007      	add	sp, #28
 80247fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247fe:	af05      	add	r7, sp, #20
 8024800:	e756      	b.n	80246b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8024802:	ad05      	add	r5, sp, #20
 8024804:	462f      	mov	r7, r5
 8024806:	e761      	b.n	80246cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8024808:	ad05      	add	r5, sp, #20
 802480a:	e75f      	b.n	80246cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 802480c:	ae05      	add	r6, sp, #20
 802480e:	e772      	b.n	80246f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8024810:	ab05      	add	r3, sp, #20
 8024812:	461e      	mov	r6, r3
 8024814:	e77e      	b.n	8024714 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8024816:	ab05      	add	r3, sp, #20
 8024818:	e77c      	b.n	8024714 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0802481a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802481a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802481e:	b095      	sub	sp, #84	@ 0x54
 8024820:	9212      	str	r2, [sp, #72]	@ 0x48
 8024822:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024824:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024826:	9309      	str	r3, [sp, #36]	@ 0x24
 8024828:	6850      	ldr	r0, [r2, #4]
 802482a:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 802482e:	910e      	str	r1, [sp, #56]	@ 0x38
 8024830:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024832:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 8024836:	fb00 1303 	mla	r3, r0, r3, r1
 802483a:	6812      	ldr	r2, [r2, #0]
 802483c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024840:	930a      	str	r3, [sp, #40]	@ 0x28
 8024842:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024844:	681b      	ldr	r3, [r3, #0]
 8024846:	930d      	str	r3, [sp, #52]	@ 0x34
 8024848:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802484a:	685c      	ldr	r4, [r3, #4]
 802484c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802484e:	3404      	adds	r4, #4
 8024850:	43db      	mvns	r3, r3
 8024852:	b2db      	uxtb	r3, r3
 8024854:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024858:	2b00      	cmp	r3, #0
 802485a:	dc03      	bgt.n	8024864 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802485c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802485e:	2b00      	cmp	r3, #0
 8024860:	f340 8255 	ble.w	8024d0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024864:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024866:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802486a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802486e:	1e48      	subs	r0, r1, #1
 8024870:	1e55      	subs	r5, r2, #1
 8024872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024874:	2b00      	cmp	r3, #0
 8024876:	f340 80f9 	ble.w	8024a6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802487a:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 802487c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802487e:	1436      	asrs	r6, r6, #16
 8024880:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024884:	d406      	bmi.n	8024894 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024886:	4286      	cmp	r6, r0
 8024888:	da04      	bge.n	8024894 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802488a:	2b00      	cmp	r3, #0
 802488c:	db02      	blt.n	8024894 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802488e:	42ab      	cmp	r3, r5
 8024890:	f2c0 80ed 	blt.w	8024a6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8024894:	3601      	adds	r6, #1
 8024896:	f100 80da 	bmi.w	8024a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802489a:	42b1      	cmp	r1, r6
 802489c:	f2c0 80d7 	blt.w	8024a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80248a0:	3301      	adds	r3, #1
 80248a2:	f100 80d4 	bmi.w	8024a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80248a6:	429a      	cmp	r2, r3
 80248a8:	f2c0 80d1 	blt.w	8024a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80248ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80248b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80248b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80248b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80248b6:	2b00      	cmp	r3, #0
 80248b8:	f340 80fa 	ble.w	8024ab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80248bc:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80248be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80248c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80248c2:	68c6      	ldr	r6, [r0, #12]
 80248c4:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80248c6:	141d      	asrs	r5, r3, #16
 80248c8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80248cc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80248ce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80248d0:	1400      	asrs	r0, r0, #16
 80248d2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80248d6:	6892      	ldr	r2, [r2, #8]
 80248d8:	f100 813e 	bmi.w	8024b58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80248dc:	1e57      	subs	r7, r2, #1
 80248de:	42b8      	cmp	r0, r7
 80248e0:	f280 813a 	bge.w	8024b58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80248e4:	2d00      	cmp	r5, #0
 80248e6:	f2c0 8137 	blt.w	8024b58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80248ea:	1e77      	subs	r7, r6, #1
 80248ec:	42bd      	cmp	r5, r7
 80248ee:	f280 8133 	bge.w	8024b58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80248f2:	b212      	sxth	r2, r2
 80248f4:	fb05 0002 	mla	r0, r5, r2, r0
 80248f8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80248fa:	f815 a000 	ldrb.w	sl, [r5, r0]
 80248fe:	182e      	adds	r6, r5, r0
 8024900:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024904:	eb04 050a 	add.w	r5, r4, sl
 8024908:	2b00      	cmp	r3, #0
 802490a:	f000 8117 	beq.w	8024b3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802490e:	f896 c001 	ldrb.w	ip, [r6, #1]
 8024912:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024916:	44a4      	add	ip, r4
 8024918:	2900      	cmp	r1, #0
 802491a:	f000 8117 	beq.w	8024b4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802491e:	18b0      	adds	r0, r6, r2
 8024920:	7840      	ldrb	r0, [r0, #1]
 8024922:	5cb2      	ldrb	r2, [r6, r2]
 8024924:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024928:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802492c:	4422      	add	r2, r4
 802492e:	4420      	add	r0, r4
 8024930:	b29b      	uxth	r3, r3
 8024932:	b289      	uxth	r1, r1
 8024934:	fb03 f901 	mul.w	r9, r3, r1
 8024938:	011b      	lsls	r3, r3, #4
 802493a:	f89c 7002 	ldrb.w	r7, [ip, #2]
 802493e:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8024942:	eba3 0309 	sub.w	r3, r3, r9
 8024946:	b29b      	uxth	r3, r3
 8024948:	435f      	muls	r7, r3
 802494a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802494e:	b289      	uxth	r1, r1
 8024950:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024954:	eba8 0801 	sub.w	r8, r8, r1
 8024958:	fa1f f888 	uxth.w	r8, r8
 802495c:	fb08 770b 	mla	r7, r8, fp, r7
 8024960:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024964:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024966:	fb01 770b 	mla	r7, r1, fp, r7
 802496a:	f8b6 e000 	ldrh.w	lr, [r6]
 802496e:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024972:	9310      	str	r3, [sp, #64]	@ 0x40
 8024974:	fb09 770b 	mla	r7, r9, fp, r7
 8024978:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802497a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 802497e:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024982:	fb1b fb03 	smulbb	fp, fp, r3
 8024986:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 802498a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802498e:	fb07 b706 	mla	r7, r7, r6, fp
 8024992:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024994:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024998:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802499c:	f89c c000 	ldrb.w	ip, [ip]
 80249a0:	435d      	muls	r5, r3
 80249a2:	fb08 550b 	mla	r5, r8, fp, r5
 80249a6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80249aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80249ac:	fb01 550b 	mla	r5, r1, fp, r5
 80249b0:	f890 b001 	ldrb.w	fp, [r0, #1]
 80249b4:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80249b8:	fb09 550b 	mla	r5, r9, fp, r5
 80249bc:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80249c0:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80249c4:	fb1b fb03 	smulbb	fp, fp, r3
 80249c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80249ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80249ce:	fb03 f30c 	mul.w	r3, r3, ip
 80249d2:	fb08 330a 	mla	r3, r8, sl, r3
 80249d6:	f892 c000 	ldrb.w	ip, [r2]
 80249da:	fa5f fe8e 	uxtb.w	lr, lr
 80249de:	fb01 330c 	mla	r3, r1, ip, r3
 80249e2:	f890 c000 	ldrb.w	ip, [r0]
 80249e6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80249ea:	fb09 3c0c 	mla	ip, r9, ip, r3
 80249ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80249f0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80249f4:	fb1e fe03 	smulbb	lr, lr, r3
 80249f8:	fb05 b506 	mla	r5, r5, r6, fp
 80249fc:	fb0c e606 	mla	r6, ip, r6, lr
 8024a00:	b2bf      	uxth	r7, r7
 8024a02:	1c7b      	adds	r3, r7, #1
 8024a04:	b2ad      	uxth	r5, r5
 8024a06:	b2b6      	uxth	r6, r6
 8024a08:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024a0c:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8024a10:	f105 0b01 	add.w	fp, r5, #1
 8024a14:	1c77      	adds	r7, r6, #1
 8024a16:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024a1a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024a1e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024a22:	096d      	lsrs	r5, r5, #5
 8024a24:	431f      	orrs	r7, r3
 8024a26:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024a2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024a2c:	433d      	orrs	r5, r7
 8024a2e:	801d      	strh	r5, [r3, #0]
 8024a30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024a32:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024a34:	3302      	adds	r3, #2
 8024a36:	930c      	str	r3, [sp, #48]	@ 0x30
 8024a38:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024a3a:	4413      	add	r3, r2
 8024a3c:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024a3e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024a40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024a42:	4413      	add	r3, r2
 8024a44:	9320      	str	r3, [sp, #128]	@ 0x80
 8024a46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024a48:	3b01      	subs	r3, #1
 8024a4a:	9311      	str	r3, [sp, #68]	@ 0x44
 8024a4c:	e732      	b.n	80248b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024a4e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024a50:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8024a52:	4433      	add	r3, r6
 8024a54:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024a56:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8024a58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024a5a:	4433      	add	r3, r6
 8024a5c:	9320      	str	r3, [sp, #128]	@ 0x80
 8024a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a60:	3b01      	subs	r3, #1
 8024a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8024a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024a66:	3302      	adds	r3, #2
 8024a68:	930a      	str	r3, [sp, #40]	@ 0x28
 8024a6a:	e702      	b.n	8024872 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024a6c:	d027      	beq.n	8024abe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a70:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8024a72:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8024a74:	3b01      	subs	r3, #1
 8024a76:	fb00 5003 	mla	r0, r0, r3, r5
 8024a7a:	1400      	asrs	r0, r0, #16
 8024a7c:	f53f af16 	bmi.w	80248ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024a80:	3901      	subs	r1, #1
 8024a82:	4288      	cmp	r0, r1
 8024a84:	f6bf af12 	bge.w	80248ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024a88:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8024a8a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8024a8c:	fb01 0303 	mla	r3, r1, r3, r0
 8024a90:	141b      	asrs	r3, r3, #16
 8024a92:	f53f af0b 	bmi.w	80248ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024a96:	3a01      	subs	r2, #1
 8024a98:	4293      	cmp	r3, r2
 8024a9a:	f6bf af07 	bge.w	80248ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024aa0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8024aa4:	9311      	str	r3, [sp, #68]	@ 0x44
 8024aa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024aa8:	930c      	str	r3, [sp, #48]	@ 0x30
 8024aaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024aac:	2b00      	cmp	r3, #0
 8024aae:	dc70      	bgt.n	8024b92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8024ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ab2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024ab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024ab8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024abc:	930a      	str	r3, [sp, #40]	@ 0x28
 8024abe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024ac0:	2b00      	cmp	r3, #0
 8024ac2:	f340 8124 	ble.w	8024d0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024ac6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024aca:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024ace:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024ad2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024ad6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024ada:	eef0 6a62 	vmov.f32	s13, s5
 8024ade:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024ae2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024ae6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024aea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024aee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024af2:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8024af6:	eef0 6a43 	vmov.f32	s13, s6
 8024afa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024afe:	ee12 2a90 	vmov	r2, s5
 8024b02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024b06:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024b08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b10:	ee13 2a10 	vmov	r2, s6
 8024b14:	9321      	str	r3, [sp, #132]	@ 0x84
 8024b16:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024b18:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8024b1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b20:	9322      	str	r3, [sp, #136]	@ 0x88
 8024b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024b24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024b26:	3b01      	subs	r3, #1
 8024b28:	930e      	str	r3, [sp, #56]	@ 0x38
 8024b2a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024b2c:	bf08      	it	eq
 8024b2e:	4613      	moveq	r3, r2
 8024b30:	eeb0 3a67 	vmov.f32	s6, s15
 8024b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b36:	eef0 2a47 	vmov.f32	s5, s14
 8024b3a:	e68c      	b.n	8024856 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024b3c:	b149      	cbz	r1, 8024b52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8024b3e:	4628      	mov	r0, r5
 8024b40:	5cb2      	ldrb	r2, [r6, r2]
 8024b42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024b46:	4422      	add	r2, r4
 8024b48:	46ac      	mov	ip, r5
 8024b4a:	e6f1      	b.n	8024930 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024b4c:	4628      	mov	r0, r5
 8024b4e:	462a      	mov	r2, r5
 8024b50:	e6ee      	b.n	8024930 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024b52:	4628      	mov	r0, r5
 8024b54:	462a      	mov	r2, r5
 8024b56:	e7f7      	b.n	8024b48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024b58:	1c47      	adds	r7, r0, #1
 8024b5a:	f53f af69 	bmi.w	8024a30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024b5e:	42ba      	cmp	r2, r7
 8024b60:	f6ff af66 	blt.w	8024a30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024b64:	1c6f      	adds	r7, r5, #1
 8024b66:	f53f af63 	bmi.w	8024a30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024b6a:	42be      	cmp	r6, r7
 8024b6c:	f6ff af60 	blt.w	8024a30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024b70:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8024b72:	b236      	sxth	r6, r6
 8024b74:	b212      	sxth	r2, r2
 8024b76:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8024b7a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024b7e:	9002      	str	r0, [sp, #8]
 8024b80:	9200      	str	r2, [sp, #0]
 8024b82:	9601      	str	r6, [sp, #4]
 8024b84:	4623      	mov	r3, r4
 8024b86:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8024b8a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024b8c:	f7ff fd59 	bl	8024642 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8024b90:	e74e      	b.n	8024a30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024b92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024b94:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8024b96:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024b9a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024b9c:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8024b9e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024ba2:	142d      	asrs	r5, r5, #16
 8024ba4:	1400      	asrs	r0, r0, #16
 8024ba6:	fb02 5000 	mla	r0, r2, r0, r5
 8024baa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024bac:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024bae:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024bb2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024bb6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024bba:	182e      	adds	r6, r5, r0
 8024bbc:	eb04 0509 	add.w	r5, r4, r9
 8024bc0:	2b00      	cmp	r3, #0
 8024bc2:	f000 8096 	beq.w	8024cf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024bc6:	7877      	ldrb	r7, [r6, #1]
 8024bc8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024bcc:	4427      	add	r7, r4
 8024bce:	2900      	cmp	r1, #0
 8024bd0:	f000 8097 	beq.w	8024d02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8024bd4:	18b0      	adds	r0, r6, r2
 8024bd6:	7840      	ldrb	r0, [r0, #1]
 8024bd8:	5cb2      	ldrb	r2, [r6, r2]
 8024bda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024bde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024be2:	4422      	add	r2, r4
 8024be4:	4420      	add	r0, r4
 8024be6:	b29b      	uxth	r3, r3
 8024be8:	b289      	uxth	r1, r1
 8024bea:	fb03 f801 	mul.w	r8, r3, r1
 8024bee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024bf0:	011b      	lsls	r3, r3, #4
 8024bf2:	f8b6 c000 	ldrh.w	ip, [r6]
 8024bf6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024bfa:	78be      	ldrb	r6, [r7, #2]
 8024bfc:	eba3 0308 	sub.w	r3, r3, r8
 8024c00:	b29b      	uxth	r3, r3
 8024c02:	435e      	muls	r6, r3
 8024c04:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024c08:	b289      	uxth	r1, r1
 8024c0a:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024c0e:	ebae 0e01 	sub.w	lr, lr, r1
 8024c12:	fa1f fe8e 	uxth.w	lr, lr
 8024c16:	fb0e 660b 	mla	r6, lr, fp, r6
 8024c1a:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024c1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024c20:	fb01 660b 	mla	r6, r1, fp, r6
 8024c24:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c2a:	fb08 660b 	mla	r6, r8, fp, r6
 8024c2e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024c32:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024c36:	fb1b fb03 	smulbb	fp, fp, r3
 8024c3a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024c3e:	fb06 b60a 	mla	r6, r6, sl, fp
 8024c42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024c44:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024c48:	787d      	ldrb	r5, [r7, #1]
 8024c4a:	783f      	ldrb	r7, [r7, #0]
 8024c4c:	435d      	muls	r5, r3
 8024c4e:	fb0e 550b 	mla	r5, lr, fp, r5
 8024c52:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c58:	fb01 550b 	mla	r5, r1, fp, r5
 8024c5c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024c60:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024c64:	fb08 550b 	mla	r5, r8, fp, r5
 8024c68:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8024c6c:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024c70:	fb1b fb03 	smulbb	fp, fp, r3
 8024c74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024c76:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024c7a:	437b      	muls	r3, r7
 8024c7c:	fb0e 3309 	mla	r3, lr, r9, r3
 8024c80:	7817      	ldrb	r7, [r2, #0]
 8024c82:	fa5f fc8c 	uxtb.w	ip, ip
 8024c86:	fb01 3307 	mla	r3, r1, r7, r3
 8024c8a:	7807      	ldrb	r7, [r0, #0]
 8024c8c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024c90:	fb08 3707 	mla	r7, r8, r7, r3
 8024c94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c96:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024c9a:	fb1c fc03 	smulbb	ip, ip, r3
 8024c9e:	fb05 b50a 	mla	r5, r5, sl, fp
 8024ca2:	fb07 c70a 	mla	r7, r7, sl, ip
 8024ca6:	b2b6      	uxth	r6, r6
 8024ca8:	b2ad      	uxth	r5, r5
 8024caa:	b2bf      	uxth	r7, r7
 8024cac:	1c73      	adds	r3, r6, #1
 8024cae:	1c7a      	adds	r2, r7, #1
 8024cb0:	f105 0b01 	add.w	fp, r5, #1
 8024cb4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024cb8:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024cbc:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024cc0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024cc4:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8024cc8:	096d      	lsrs	r5, r5, #5
 8024cca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ccc:	4316      	orrs	r6, r2
 8024cce:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024cd2:	432e      	orrs	r6, r5
 8024cd4:	f823 6b02 	strh.w	r6, [r3], #2
 8024cd8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024cda:	930c      	str	r3, [sp, #48]	@ 0x30
 8024cdc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024cde:	4413      	add	r3, r2
 8024ce0:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024ce2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024ce4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024ce6:	4413      	add	r3, r2
 8024ce8:	9320      	str	r3, [sp, #128]	@ 0x80
 8024cea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024cec:	3b01      	subs	r3, #1
 8024cee:	9311      	str	r3, [sp, #68]	@ 0x44
 8024cf0:	e6db      	b.n	8024aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8024cf2:	b149      	cbz	r1, 8024d08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8024cf4:	4628      	mov	r0, r5
 8024cf6:	5cb2      	ldrb	r2, [r6, r2]
 8024cf8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024cfc:	4422      	add	r2, r4
 8024cfe:	462f      	mov	r7, r5
 8024d00:	e771      	b.n	8024be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024d02:	4628      	mov	r0, r5
 8024d04:	462a      	mov	r2, r5
 8024d06:	e76e      	b.n	8024be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024d08:	4628      	mov	r0, r5
 8024d0a:	462a      	mov	r2, r5
 8024d0c:	e7f7      	b.n	8024cfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024d0e:	b015      	add	sp, #84	@ 0x54
 8024d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024d14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8024d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d18:	880f      	ldrh	r7, [r1, #0]
 8024d1a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8024d1e:	023c      	lsls	r4, r7, #8
 8024d20:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 8024d24:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8024d28:	fb05 ca0e 	mla	sl, r5, lr, ip
 8024d2c:	017c      	lsls	r4, r7, #5
 8024d2e:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8024d32:	00ff      	lsls	r7, r7, #3
 8024d34:	ea4b 0404 	orr.w	r4, fp, r4
 8024d38:	b2ff      	uxtb	r7, r7
 8024d3a:	4327      	orrs	r7, r4
 8024d3c:	2d00      	cmp	r5, #0
 8024d3e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8024d42:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8024d46:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8024d4a:	eb02 080a 	add.w	r8, r2, sl
 8024d4e:	9701      	str	r7, [sp, #4]
 8024d50:	db7e      	blt.n	8024e50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8024d52:	45a9      	cmp	r9, r5
 8024d54:	dd7c      	ble.n	8024e50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8024d56:	f1bc 0f00 	cmp.w	ip, #0
 8024d5a:	db77      	blt.n	8024e4c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8024d5c:	45e6      	cmp	lr, ip
 8024d5e:	dd75      	ble.n	8024e4c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8024d60:	f812 700a 	ldrb.w	r7, [r2, sl]
 8024d64:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024d68:	441f      	add	r7, r3
 8024d6a:	f11c 0201 	adds.w	r2, ip, #1
 8024d6e:	d472      	bmi.n	8024e56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024d70:	4596      	cmp	lr, r2
 8024d72:	dd70      	ble.n	8024e56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024d74:	2800      	cmp	r0, #0
 8024d76:	d06e      	beq.n	8024e56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024d78:	f898 4001 	ldrb.w	r4, [r8, #1]
 8024d7c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024d80:	441c      	add	r4, r3
 8024d82:	3501      	adds	r5, #1
 8024d84:	d46b      	bmi.n	8024e5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024d86:	45a9      	cmp	r9, r5
 8024d88:	dd69      	ble.n	8024e5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024d8a:	2e00      	cmp	r6, #0
 8024d8c:	d067      	beq.n	8024e5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024d8e:	f1bc 0f00 	cmp.w	ip, #0
 8024d92:	db62      	blt.n	8024e5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8024d94:	45e6      	cmp	lr, ip
 8024d96:	dd60      	ble.n	8024e5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8024d98:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024da0:	441d      	add	r5, r3
 8024da2:	f11c 0201 	adds.w	r2, ip, #1
 8024da6:	d45d      	bmi.n	8024e64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024da8:	4596      	cmp	lr, r2
 8024daa:	dd5b      	ble.n	8024e64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024dac:	2800      	cmp	r0, #0
 8024dae:	d059      	beq.n	8024e64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024db0:	44c6      	add	lr, r8
 8024db2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024db6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024dba:	4413      	add	r3, r2
 8024dbc:	b280      	uxth	r0, r0
 8024dbe:	b2b2      	uxth	r2, r6
 8024dc0:	fb00 f602 	mul.w	r6, r0, r2
 8024dc4:	0100      	lsls	r0, r0, #4
 8024dc6:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024dca:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8024dce:	1b80      	subs	r0, r0, r6
 8024dd0:	fa1f fc82 	uxth.w	ip, r2
 8024dd4:	b282      	uxth	r2, r0
 8024dd6:	78a0      	ldrb	r0, [r4, #2]
 8024dd8:	f897 e002 	ldrb.w	lr, [r7, #2]
 8024ddc:	4350      	muls	r0, r2
 8024dde:	eba8 080c 	sub.w	r8, r8, ip
 8024de2:	fa1f f888 	uxth.w	r8, r8
 8024de6:	fb08 0e0e 	mla	lr, r8, lr, r0
 8024dea:	78a8      	ldrb	r0, [r5, #2]
 8024dec:	f897 9000 	ldrb.w	r9, [r7]
 8024df0:	fb0c e000 	mla	r0, ip, r0, lr
 8024df4:	f893 e002 	ldrb.w	lr, [r3, #2]
 8024df8:	787f      	ldrb	r7, [r7, #1]
 8024dfa:	fb06 0e0e 	mla	lr, r6, lr, r0
 8024dfe:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 8024e02:	f894 e000 	ldrb.w	lr, [r4]
 8024e06:	fb02 fe0e 	mul.w	lr, r2, lr
 8024e0a:	fb08 e909 	mla	r9, r8, r9, lr
 8024e0e:	f895 e000 	ldrb.w	lr, [r5]
 8024e12:	fb0c 990e 	mla	r9, ip, lr, r9
 8024e16:	f893 e000 	ldrb.w	lr, [r3]
 8024e1a:	785b      	ldrb	r3, [r3, #1]
 8024e1c:	fb06 9e0e 	mla	lr, r6, lr, r9
 8024e20:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8024e24:	ea4e 0e00 	orr.w	lr, lr, r0
 8024e28:	7860      	ldrb	r0, [r4, #1]
 8024e2a:	4350      	muls	r0, r2
 8024e2c:	fb08 0007 	mla	r0, r8, r7, r0
 8024e30:	786a      	ldrb	r2, [r5, #1]
 8024e32:	fb0c 0202 	mla	r2, ip, r2, r0
 8024e36:	fb06 2303 	mla	r3, r6, r3, r2
 8024e3a:	095b      	lsrs	r3, r3, #5
 8024e3c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024e40:	ea4e 0303 	orr.w	r3, lr, r3
 8024e44:	800b      	strh	r3, [r1, #0]
 8024e46:	b003      	add	sp, #12
 8024e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e4c:	af01      	add	r7, sp, #4
 8024e4e:	e78c      	b.n	8024d6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8024e50:	ac01      	add	r4, sp, #4
 8024e52:	4627      	mov	r7, r4
 8024e54:	e795      	b.n	8024d82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024e56:	ac01      	add	r4, sp, #4
 8024e58:	e793      	b.n	8024d82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024e5a:	ad01      	add	r5, sp, #4
 8024e5c:	e7a1      	b.n	8024da2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8024e5e:	ab01      	add	r3, sp, #4
 8024e60:	461d      	mov	r5, r3
 8024e62:	e7ab      	b.n	8024dbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8024e64:	ab01      	add	r3, sp, #4
 8024e66:	e7a9      	b.n	8024dbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08024e68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e6c:	b08f      	sub	sp, #60	@ 0x3c
 8024e6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8024e70:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024e72:	900d      	str	r0, [sp, #52]	@ 0x34
 8024e74:	6850      	ldr	r0, [r2, #4]
 8024e76:	910a      	str	r1, [sp, #40]	@ 0x28
 8024e78:	9306      	str	r3, [sp, #24]
 8024e7a:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8024e7e:	fb00 1303 	mla	r3, r0, r3, r1
 8024e82:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 8024e86:	6812      	ldr	r2, [r2, #0]
 8024e88:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024e8c:	9307      	str	r3, [sp, #28]
 8024e8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024e90:	681b      	ldr	r3, [r3, #0]
 8024e92:	9308      	str	r3, [sp, #32]
 8024e94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024e96:	685c      	ldr	r4, [r3, #4]
 8024e98:	3404      	adds	r4, #4
 8024e9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024e9c:	2b00      	cmp	r3, #0
 8024e9e:	dc03      	bgt.n	8024ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8024ea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ea2:	2b00      	cmp	r3, #0
 8024ea4:	f340 81d6 	ble.w	8025254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8024ea8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024eaa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024eae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024eb2:	1e48      	subs	r0, r1, #1
 8024eb4:	1e56      	subs	r6, r2, #1
 8024eb6:	9b06      	ldr	r3, [sp, #24]
 8024eb8:	2b00      	cmp	r3, #0
 8024eba:	f340 80b7 	ble.w	802502c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8024ebe:	ea5f 472b 	movs.w	r7, fp, asr #16
 8024ec2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024ec6:	d406      	bmi.n	8024ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024ec8:	4287      	cmp	r7, r0
 8024eca:	da04      	bge.n	8024ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024ecc:	2b00      	cmp	r3, #0
 8024ece:	db02      	blt.n	8024ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024ed0:	42b3      	cmp	r3, r6
 8024ed2:	f2c0 80ac 	blt.w	802502e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024ed6:	3701      	adds	r7, #1
 8024ed8:	f100 809d 	bmi.w	8025016 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024edc:	42b9      	cmp	r1, r7
 8024ede:	f2c0 809a 	blt.w	8025016 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024ee2:	3301      	adds	r3, #1
 8024ee4:	f100 8097 	bmi.w	8025016 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024ee8:	429a      	cmp	r2, r3
 8024eea:	f2c0 8094 	blt.w	8025016 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024eee:	9b06      	ldr	r3, [sp, #24]
 8024ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024ef2:	9b07      	ldr	r3, [sp, #28]
 8024ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024ef8:	2b00      	cmp	r3, #0
 8024efa:	f340 80b5 	ble.w	8025068 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8024efe:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8024f00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024f02:	68c7      	ldr	r7, [r0, #12]
 8024f04:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024f08:	ea4f 4625 	mov.w	r6, r5, asr #16
 8024f0c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024f10:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024f14:	6892      	ldr	r2, [r2, #8]
 8024f16:	f100 80fb 	bmi.w	8025110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8024f1a:	f102 3cff 	add.w	ip, r2, #4294967295
 8024f1e:	4560      	cmp	r0, ip
 8024f20:	f280 80f6 	bge.w	8025110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8024f24:	2e00      	cmp	r6, #0
 8024f26:	f2c0 80f3 	blt.w	8025110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8024f2a:	f107 3cff 	add.w	ip, r7, #4294967295
 8024f2e:	4566      	cmp	r6, ip
 8024f30:	f280 80ee 	bge.w	8025110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8024f34:	b212      	sxth	r2, r2
 8024f36:	fb06 0002 	mla	r0, r6, r2, r0
 8024f3a:	9e08      	ldr	r6, [sp, #32]
 8024f3c:	1837      	adds	r7, r6, r0
 8024f3e:	5c30      	ldrb	r0, [r6, r0]
 8024f40:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8024f44:	eb04 0c08 	add.w	ip, r4, r8
 8024f48:	2b00      	cmp	r3, #0
 8024f4a:	f000 80d3 	beq.w	80250f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024f4e:	787e      	ldrb	r6, [r7, #1]
 8024f50:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024f54:	4426      	add	r6, r4
 8024f56:	2900      	cmp	r1, #0
 8024f58:	f000 80d4 	beq.w	8025104 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8024f5c:	18b8      	adds	r0, r7, r2
 8024f5e:	7840      	ldrb	r0, [r0, #1]
 8024f60:	5cba      	ldrb	r2, [r7, r2]
 8024f62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024f66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024f6a:	4422      	add	r2, r4
 8024f6c:	4420      	add	r0, r4
 8024f6e:	b29b      	uxth	r3, r3
 8024f70:	b289      	uxth	r1, r1
 8024f72:	fb03 f901 	mul.w	r9, r3, r1
 8024f76:	011b      	lsls	r3, r3, #4
 8024f78:	78b7      	ldrb	r7, [r6, #2]
 8024f7a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024f7e:	eba3 0309 	sub.w	r3, r3, r9
 8024f82:	b29b      	uxth	r3, r3
 8024f84:	435f      	muls	r7, r3
 8024f86:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024f8a:	b289      	uxth	r1, r1
 8024f8c:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024f90:	ebae 0e01 	sub.w	lr, lr, r1
 8024f94:	fa1f fe8e 	uxth.w	lr, lr
 8024f98:	fb0e 770a 	mla	r7, lr, sl, r7
 8024f9c:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024fa0:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024fa4:	fb01 770a 	mla	r7, r1, sl, r7
 8024fa8:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024fac:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024fb0:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024fb4:	f896 8000 	ldrb.w	r8, [r6]
 8024fb8:	7876      	ldrb	r6, [r6, #1]
 8024fba:	fb03 f808 	mul.w	r8, r3, r8
 8024fbe:	fb0e 8807 	mla	r8, lr, r7, r8
 8024fc2:	7817      	ldrb	r7, [r2, #0]
 8024fc4:	4373      	muls	r3, r6
 8024fc6:	fb01 8807 	mla	r8, r1, r7, r8
 8024fca:	7807      	ldrb	r7, [r0, #0]
 8024fcc:	fb0e 330c 	mla	r3, lr, ip, r3
 8024fd0:	fb09 8707 	mla	r7, r9, r7, r8
 8024fd4:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8024fd8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024fdc:	ea47 070a 	orr.w	r7, r7, sl
 8024fe0:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024fe4:	fb01 310a 	mla	r1, r1, sl, r3
 8024fe8:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024fee:	fb09 1a0a 	mla	sl, r9, sl, r1
 8024ff2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024ff6:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8024ffa:	ea47 070a 	orr.w	r7, r7, sl
 8024ffe:	801f      	strh	r7, [r3, #0]
 8025000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025002:	3302      	adds	r3, #2
 8025004:	9309      	str	r3, [sp, #36]	@ 0x24
 8025006:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025008:	449b      	add	fp, r3
 802500a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802500c:	441d      	add	r5, r3
 802500e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025010:	3b01      	subs	r3, #1
 8025012:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025014:	e76f      	b.n	8024ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025016:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025018:	449b      	add	fp, r3
 802501a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802501c:	441d      	add	r5, r3
 802501e:	9b06      	ldr	r3, [sp, #24]
 8025020:	3b01      	subs	r3, #1
 8025022:	9306      	str	r3, [sp, #24]
 8025024:	9b07      	ldr	r3, [sp, #28]
 8025026:	3302      	adds	r3, #2
 8025028:	9307      	str	r3, [sp, #28]
 802502a:	e744      	b.n	8024eb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802502c:	d023      	beq.n	8025076 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802502e:	9b06      	ldr	r3, [sp, #24]
 8025030:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8025032:	3b01      	subs	r3, #1
 8025034:	fb00 b003 	mla	r0, r0, r3, fp
 8025038:	1400      	asrs	r0, r0, #16
 802503a:	f53f af58 	bmi.w	8024eee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802503e:	3901      	subs	r1, #1
 8025040:	4288      	cmp	r0, r1
 8025042:	f6bf af54 	bge.w	8024eee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025046:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8025048:	fb01 5303 	mla	r3, r1, r3, r5
 802504c:	141b      	asrs	r3, r3, #16
 802504e:	f53f af4e 	bmi.w	8024eee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025052:	3a01      	subs	r2, #1
 8025054:	4293      	cmp	r3, r2
 8025056:	f6bf af4a 	bge.w	8024eee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802505a:	9b06      	ldr	r3, [sp, #24]
 802505c:	9309      	str	r3, [sp, #36]	@ 0x24
 802505e:	9b07      	ldr	r3, [sp, #28]
 8025060:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025064:	2b00      	cmp	r3, #0
 8025066:	dc70      	bgt.n	802514a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8025068:	9b06      	ldr	r3, [sp, #24]
 802506a:	9a07      	ldr	r2, [sp, #28]
 802506c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025070:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025074:	9307      	str	r3, [sp, #28]
 8025076:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025078:	2b00      	cmp	r3, #0
 802507a:	f340 80eb 	ble.w	8025254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802507e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025082:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025086:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802508a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802508e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025092:	eef0 6a62 	vmov.f32	s13, s5
 8025096:	ee31 1a05 	vadd.f32	s2, s2, s10
 802509a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802509e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80250a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80250a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80250aa:	ee16 ba90 	vmov	fp, s13
 80250ae:	eef0 6a43 	vmov.f32	s13, s6
 80250b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80250b6:	ee12 2a90 	vmov	r2, s5
 80250ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80250be:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80250c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80250c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80250c8:	ee13 2a10 	vmov	r2, s6
 80250cc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80250ce:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80250d0:	ee16 5a90 	vmov	r5, s13
 80250d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80250d8:	931c      	str	r3, [sp, #112]	@ 0x70
 80250da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80250dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80250de:	3b01      	subs	r3, #1
 80250e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80250e2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80250e4:	bf08      	it	eq
 80250e6:	4613      	moveq	r3, r2
 80250e8:	eeb0 3a67 	vmov.f32	s6, s15
 80250ec:	9306      	str	r3, [sp, #24]
 80250ee:	eef0 2a47 	vmov.f32	s5, s14
 80250f2:	e6d2      	b.n	8024e9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80250f4:	b149      	cbz	r1, 802510a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80250f6:	4660      	mov	r0, ip
 80250f8:	5cba      	ldrb	r2, [r7, r2]
 80250fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80250fe:	4422      	add	r2, r4
 8025100:	4666      	mov	r6, ip
 8025102:	e734      	b.n	8024f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8025104:	4660      	mov	r0, ip
 8025106:	4662      	mov	r2, ip
 8025108:	e731      	b.n	8024f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 802510a:	4660      	mov	r0, ip
 802510c:	4662      	mov	r2, ip
 802510e:	e7f7      	b.n	8025100 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8025110:	f110 0c01 	adds.w	ip, r0, #1
 8025114:	f53f af74 	bmi.w	8025000 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025118:	4562      	cmp	r2, ip
 802511a:	f6ff af71 	blt.w	8025000 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802511e:	f116 0c01 	adds.w	ip, r6, #1
 8025122:	f53f af6d 	bmi.w	8025000 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025126:	4567      	cmp	r7, ip
 8025128:	f6ff af6a 	blt.w	8025000 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802512c:	b23f      	sxth	r7, r7
 802512e:	b212      	sxth	r2, r2
 8025130:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8025134:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025138:	9200      	str	r2, [sp, #0]
 802513a:	9701      	str	r7, [sp, #4]
 802513c:	4623      	mov	r3, r4
 802513e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8025142:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025144:	f7ff fde6 	bl	8024d14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8025148:	e75a      	b.n	8025000 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802514a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802514c:	ea4f 462b 	mov.w	r6, fp, asr #16
 8025150:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025154:	1428      	asrs	r0, r5, #16
 8025156:	fb02 6000 	mla	r0, r2, r0, r6
 802515a:	9e08      	ldr	r6, [sp, #32]
 802515c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025160:	f816 8000 	ldrb.w	r8, [r6, r0]
 8025164:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025168:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802516c:	1837      	adds	r7, r6, r0
 802516e:	eb04 0c08 	add.w	ip, r4, r8
 8025172:	2b00      	cmp	r3, #0
 8025174:	d060      	beq.n	8025238 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8025176:	787e      	ldrb	r6, [r7, #1]
 8025178:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802517c:	4426      	add	r6, r4
 802517e:	2900      	cmp	r1, #0
 8025180:	d062      	beq.n	8025248 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8025182:	18b8      	adds	r0, r7, r2
 8025184:	7840      	ldrb	r0, [r0, #1]
 8025186:	5cba      	ldrb	r2, [r7, r2]
 8025188:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802518c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025190:	4422      	add	r2, r4
 8025192:	4420      	add	r0, r4
 8025194:	b29b      	uxth	r3, r3
 8025196:	b289      	uxth	r1, r1
 8025198:	fb03 f901 	mul.w	r9, r3, r1
 802519c:	011b      	lsls	r3, r3, #4
 802519e:	78b7      	ldrb	r7, [r6, #2]
 80251a0:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80251a4:	eba3 0309 	sub.w	r3, r3, r9
 80251a8:	b29b      	uxth	r3, r3
 80251aa:	435f      	muls	r7, r3
 80251ac:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80251b0:	b289      	uxth	r1, r1
 80251b2:	f89c a002 	ldrb.w	sl, [ip, #2]
 80251b6:	ebae 0e01 	sub.w	lr, lr, r1
 80251ba:	fa1f fe8e 	uxth.w	lr, lr
 80251be:	fb0e 770a 	mla	r7, lr, sl, r7
 80251c2:	f892 a002 	ldrb.w	sl, [r2, #2]
 80251c6:	f89c c001 	ldrb.w	ip, [ip, #1]
 80251ca:	fb01 770a 	mla	r7, r1, sl, r7
 80251ce:	f890 a002 	ldrb.w	sl, [r0, #2]
 80251d2:	fb09 7a0a 	mla	sl, r9, sl, r7
 80251d6:	f814 7008 	ldrb.w	r7, [r4, r8]
 80251da:	f896 8000 	ldrb.w	r8, [r6]
 80251de:	7876      	ldrb	r6, [r6, #1]
 80251e0:	fb03 f808 	mul.w	r8, r3, r8
 80251e4:	fb0e 8807 	mla	r8, lr, r7, r8
 80251e8:	7817      	ldrb	r7, [r2, #0]
 80251ea:	4373      	muls	r3, r6
 80251ec:	fb01 8807 	mla	r8, r1, r7, r8
 80251f0:	7807      	ldrb	r7, [r0, #0]
 80251f2:	fb0e 330c 	mla	r3, lr, ip, r3
 80251f6:	fb09 8707 	mla	r7, r9, r7, r8
 80251fa:	7856      	ldrb	r6, [r2, #1]
 80251fc:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8025200:	fb01 3306 	mla	r3, r1, r6, r3
 8025204:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025208:	ea47 070a 	orr.w	r7, r7, sl
 802520c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025210:	fb09 3a0a 	mla	sl, r9, sl, r3
 8025214:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025218:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802521a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802521e:	ea47 070a 	orr.w	r7, r7, sl
 8025222:	f823 7b02 	strh.w	r7, [r3], #2
 8025226:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025228:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802522a:	449b      	add	fp, r3
 802522c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802522e:	441d      	add	r5, r3
 8025230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025232:	3b01      	subs	r3, #1
 8025234:	9309      	str	r3, [sp, #36]	@ 0x24
 8025236:	e714      	b.n	8025062 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025238:	b149      	cbz	r1, 802524e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802523a:	4660      	mov	r0, ip
 802523c:	5cba      	ldrb	r2, [r7, r2]
 802523e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025242:	4422      	add	r2, r4
 8025244:	4666      	mov	r6, ip
 8025246:	e7a5      	b.n	8025194 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8025248:	4660      	mov	r0, ip
 802524a:	4662      	mov	r2, ip
 802524c:	e7a2      	b.n	8025194 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802524e:	4660      	mov	r0, ip
 8025250:	4662      	mov	r2, ip
 8025252:	e7f7      	b.n	8025244 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8025254:	b00f      	add	sp, #60	@ 0x3c
 8025256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802525a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 802525a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802525e:	b085      	sub	sp, #20
 8025260:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8025264:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 8025268:	9102      	str	r1, [sp, #8]
 802526a:	fb04 710c 	mla	r1, r4, ip, r7
 802526e:	2c00      	cmp	r4, #0
 8025270:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8025274:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 8025278:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802527c:	eb02 0e01 	add.w	lr, r2, r1
 8025280:	f2c0 8122 	blt.w	80254c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8025284:	45a0      	cmp	r8, r4
 8025286:	f340 811f 	ble.w	80254c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802528a:	2f00      	cmp	r7, #0
 802528c:	f2c0 811a 	blt.w	80254c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8025290:	45bc      	cmp	ip, r7
 8025292:	f340 8117 	ble.w	80254c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8025296:	5c52      	ldrb	r2, [r2, r1]
 8025298:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802529c:	1c7a      	adds	r2, r7, #1
 802529e:	f100 8116 	bmi.w	80254ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80252a2:	4594      	cmp	ip, r2
 80252a4:	f340 8113 	ble.w	80254ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80252a8:	2e00      	cmp	r6, #0
 80252aa:	f000 8112 	beq.w	80254d2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80252ae:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80252b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80252b6:	3401      	adds	r4, #1
 80252b8:	f100 810f 	bmi.w	80254da <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80252bc:	45a0      	cmp	r8, r4
 80252be:	f340 810c 	ble.w	80254da <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80252c2:	2800      	cmp	r0, #0
 80252c4:	f000 810c 	beq.w	80254e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80252c8:	2f00      	cmp	r7, #0
 80252ca:	f2c0 8104 	blt.w	80254d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80252ce:	45bc      	cmp	ip, r7
 80252d0:	f340 8101 	ble.w	80254d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80252d4:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80252d8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80252dc:	3701      	adds	r7, #1
 80252de:	f100 8102 	bmi.w	80254e6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80252e2:	45bc      	cmp	ip, r7
 80252e4:	f340 80ff 	ble.w	80254e6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80252e8:	2e00      	cmp	r6, #0
 80252ea:	f000 80fe 	beq.w	80254ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80252ee:	44f4      	add	ip, lr
 80252f0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80252f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80252f8:	b2b6      	uxth	r6, r6
 80252fa:	b280      	uxth	r0, r0
 80252fc:	fb00 fe06 	mul.w	lr, r0, r6
 8025300:	0136      	lsls	r6, r6, #4
 8025302:	eba6 070e 	sub.w	r7, r6, lr
 8025306:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802530a:	b2bf      	uxth	r7, r7
 802530c:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8025310:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8025314:	fb0a f607 	mul.w	r6, sl, r7
 8025318:	b280      	uxth	r0, r0
 802531a:	1a1b      	subs	r3, r3, r0
 802531c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8025320:	b29b      	uxth	r3, r3
 8025322:	fb0b 6603 	mla	r6, fp, r3, r6
 8025326:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802532a:	fb00 6609 	mla	r6, r0, r9, r6
 802532e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8025332:	fb0e 6608 	mla	r6, lr, r8, r6
 8025336:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802533a:	9600      	str	r6, [sp, #0]
 802533c:	2e00      	cmp	r6, #0
 802533e:	f000 80be 	beq.w	80254be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8025342:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8025346:	fb0b fc0c 	mul.w	ip, fp, ip
 802534a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802534e:	fb0b f505 	mul.w	r5, fp, r5
 8025352:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8025356:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802535a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802535e:	44dc      	add	ip, fp
 8025360:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025364:	9501      	str	r5, [sp, #4]
 8025366:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 802536a:	9503      	str	r5, [sp, #12]
 802536c:	9d01      	ldr	r5, [sp, #4]
 802536e:	9e02      	ldr	r6, [sp, #8]
 8025370:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8025374:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8025378:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802537c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025380:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8025384:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8025388:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802538c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025390:	4465      	add	r5, ip
 8025392:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025396:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802539a:	fb09 fc0c 	mul.w	ip, r9, ip
 802539e:	fb09 f904 	mul.w	r9, r9, r4
 80253a2:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80253a6:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80253aa:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80253ae:	fb08 f404 	mul.w	r4, r8, r4
 80253b2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80253b6:	fb08 f802 	mul.w	r8, r8, r2
 80253ba:	0a2d      	lsrs	r5, r5, #8
 80253bc:	0a22      	lsrs	r2, r4, #8
 80253be:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80253c2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80253c6:	437d      	muls	r5, r7
 80253c8:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80253cc:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80253d0:	4414      	add	r4, r2
 80253d2:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80253d6:	fb0a fa01 	mul.w	sl, sl, r1
 80253da:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80253de:	9a03      	ldr	r2, [sp, #12]
 80253e0:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80253e4:	fb02 5503 	mla	r5, r2, r3, r5
 80253e8:	0a24      	lsrs	r4, r4, #8
 80253ea:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80253ee:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80253f2:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80253f6:	fb04 540e 	mla	r4, r4, lr, r5
 80253fa:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80253fe:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025402:	4461      	add	r1, ip
 8025404:	0a09      	lsrs	r1, r1, #8
 8025406:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802540a:	fb01 4100 	mla	r1, r1, r0, r4
 802540e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025412:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025416:	fb07 f70a 	mul.w	r7, r7, sl
 802541a:	0a09      	lsrs	r1, r1, #8
 802541c:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8025420:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8025424:	fb03 7101 	mla	r1, r3, r1, r7
 8025428:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802542c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8025430:	fb0e 1e08 	mla	lr, lr, r8, r1
 8025434:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025438:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802543c:	fb00 e101 	mla	r1, r0, r1, lr
 8025440:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8025444:	9a00      	ldr	r2, [sp, #0]
 8025446:	b287      	uxth	r7, r0
 8025448:	437a      	muls	r2, r7
 802544a:	1c53      	adds	r3, r2, #1
 802544c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025450:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8025454:	0a09      	lsrs	r1, r1, #8
 8025456:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802545a:	4321      	orrs	r1, r4
 802545c:	0c0a      	lsrs	r2, r1, #16
 802545e:	8836      	ldrh	r6, [r6, #0]
 8025460:	fb12 f207 	smulbb	r2, r2, r7
 8025464:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8025468:	b2c8      	uxtb	r0, r1
 802546a:	1235      	asrs	r5, r6, #8
 802546c:	fb14 f407 	smulbb	r4, r4, r7
 8025470:	fb10 f007 	smulbb	r0, r0, r7
 8025474:	b2db      	uxtb	r3, r3
 8025476:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802547a:	fb05 2503 	mla	r5, r5, r3, r2
 802547e:	10f2      	asrs	r2, r6, #3
 8025480:	00f6      	lsls	r6, r6, #3
 8025482:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025486:	b2f6      	uxtb	r6, r6
 8025488:	fb02 4203 	mla	r2, r2, r3, r4
 802548c:	fb06 0303 	mla	r3, r6, r3, r0
 8025490:	b2ad      	uxth	r5, r5
 8025492:	b299      	uxth	r1, r3
 8025494:	b294      	uxth	r4, r2
 8025496:	1c6b      	adds	r3, r5, #1
 8025498:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802549c:	1c62      	adds	r2, r4, #1
 802549e:	1c4b      	adds	r3, r1, #1
 80254a0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80254a4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80254a8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80254ac:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80254b0:	0952      	lsrs	r2, r2, #5
 80254b2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80254b6:	432b      	orrs	r3, r5
 80254b8:	4313      	orrs	r3, r2
 80254ba:	9a02      	ldr	r2, [sp, #8]
 80254bc:	8013      	strh	r3, [r2, #0]
 80254be:	b005      	add	sp, #20
 80254c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80254c4:	2500      	movs	r5, #0
 80254c6:	e6e9      	b.n	802529c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80254c8:	2100      	movs	r1, #0
 80254ca:	460d      	mov	r5, r1
 80254cc:	e6f3      	b.n	80252b6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80254ce:	2100      	movs	r1, #0
 80254d0:	e6f1      	b.n	80252b6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80254d2:	4631      	mov	r1, r6
 80254d4:	e6ef      	b.n	80252b6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80254d6:	2400      	movs	r4, #0
 80254d8:	e700      	b.n	80252dc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80254da:	2200      	movs	r2, #0
 80254dc:	4614      	mov	r4, r2
 80254de:	e70b      	b.n	80252f8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80254e0:	4602      	mov	r2, r0
 80254e2:	4604      	mov	r4, r0
 80254e4:	e708      	b.n	80252f8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80254e6:	2200      	movs	r2, #0
 80254e8:	e706      	b.n	80252f8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80254ea:	4632      	mov	r2, r6
 80254ec:	e704      	b.n	80252f8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080254ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80254ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254f2:	b09f      	sub	sp, #124	@ 0x7c
 80254f4:	921b      	str	r2, [sp, #108]	@ 0x6c
 80254f6:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80254f8:	901d      	str	r0, [sp, #116]	@ 0x74
 80254fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80254fc:	6850      	ldr	r0, [r2, #4]
 80254fe:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8025502:	9119      	str	r1, [sp, #100]	@ 0x64
 8025504:	931c      	str	r3, [sp, #112]	@ 0x70
 8025506:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 802550a:	fb00 1303 	mla	r3, r0, r3, r1
 802550e:	6812      	ldr	r2, [r2, #0]
 8025510:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8025512:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025516:	930c      	str	r3, [sp, #48]	@ 0x30
 8025518:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802551a:	681b      	ldr	r3, [r3, #0]
 802551c:	9312      	str	r3, [sp, #72]	@ 0x48
 802551e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025520:	685e      	ldr	r6, [r3, #4]
 8025522:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8025526:	3604      	adds	r6, #4
 8025528:	930d      	str	r3, [sp, #52]	@ 0x34
 802552a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802552c:	2b00      	cmp	r3, #0
 802552e:	dc03      	bgt.n	8025538 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025530:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025532:	2b00      	cmp	r3, #0
 8025534:	f340 8387 	ble.w	8025c46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025538:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802553a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802553e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025542:	1e48      	subs	r0, r1, #1
 8025544:	1e57      	subs	r7, r2, #1
 8025546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025548:	2b00      	cmp	r3, #0
 802554a:	f340 8194 	ble.w	8025876 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 802554e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025550:	142b      	asrs	r3, r5, #16
 8025552:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025556:	d406      	bmi.n	8025566 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025558:	4584      	cmp	ip, r0
 802555a:	da04      	bge.n	8025566 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802555c:	2b00      	cmp	r3, #0
 802555e:	db02      	blt.n	8025566 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025560:	42bb      	cmp	r3, r7
 8025562:	f2c0 8189 	blt.w	8025878 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025566:	f11c 0c01 	adds.w	ip, ip, #1
 802556a:	f100 8177 	bmi.w	802585c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802556e:	4561      	cmp	r1, ip
 8025570:	f2c0 8174 	blt.w	802585c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025574:	3301      	adds	r3, #1
 8025576:	f100 8171 	bmi.w	802585c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802557a:	429a      	cmp	r2, r3
 802557c:	f2c0 816e 	blt.w	802585c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025582:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025584:	931a      	str	r3, [sp, #104]	@ 0x68
 8025586:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025588:	2b00      	cmp	r3, #0
 802558a:	f340 8193 	ble.w	80258b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 802558e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025590:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025594:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025598:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802559a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802559e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80255a2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80255a4:	141b      	asrs	r3, r3, #16
 80255a6:	f100 81d6 	bmi.w	8025956 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80255aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80255ae:	4543      	cmp	r3, r8
 80255b0:	f280 81d1 	bge.w	8025956 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80255b4:	f1bc 0f00 	cmp.w	ip, #0
 80255b8:	f2c0 81cd 	blt.w	8025956 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80255bc:	f10e 38ff 	add.w	r8, lr, #4294967295
 80255c0:	45c4      	cmp	ip, r8
 80255c2:	f280 81c8 	bge.w	8025956 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80255c6:	b200      	sxth	r0, r0
 80255c8:	fb0c 3300 	mla	r3, ip, r0, r3
 80255cc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80255ce:	eb04 0803 	add.w	r8, r4, r3
 80255d2:	5ce3      	ldrb	r3, [r4, r3]
 80255d4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80255d8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80255dc:	2a00      	cmp	r2, #0
 80255de:	f000 81af 	beq.w	8025940 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80255e2:	f898 c001 	ldrb.w	ip, [r8, #1]
 80255e6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80255ea:	940e      	str	r4, [sp, #56]	@ 0x38
 80255ec:	0e24      	lsrs	r4, r4, #24
 80255ee:	9415      	str	r4, [sp, #84]	@ 0x54
 80255f0:	b179      	cbz	r1, 8025612 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80255f2:	eb08 0c00 	add.w	ip, r8, r0
 80255f6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80255fa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80255fe:	900a      	str	r0, [sp, #40]	@ 0x28
 8025600:	0e00      	lsrs	r0, r0, #24
 8025602:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025604:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025608:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802560c:	900f      	str	r0, [sp, #60]	@ 0x3c
 802560e:	0e00      	lsrs	r0, r0, #24
 8025610:	9016      	str	r0, [sp, #88]	@ 0x58
 8025612:	b292      	uxth	r2, r2
 8025614:	b289      	uxth	r1, r1
 8025616:	fb02 f901 	mul.w	r9, r2, r1
 802561a:	0112      	lsls	r2, r2, #4
 802561c:	eba2 0809 	sub.w	r8, r2, r9
 8025620:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8025622:	fa1f f888 	uxth.w	r8, r8
 8025626:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802562a:	fb08 f000 	mul.w	r0, r8, r0
 802562e:	b289      	uxth	r1, r1
 8025630:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025634:	1a52      	subs	r2, r2, r1
 8025636:	b292      	uxth	r2, r2
 8025638:	fb02 000e 	mla	r0, r2, lr, r0
 802563c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802563e:	fb01 0004 	mla	r0, r1, r4, r0
 8025642:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8025644:	fb09 0004 	mla	r0, r9, r4, r0
 8025648:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802564c:	2800      	cmp	r0, #0
 802564e:	f000 80fa 	beq.w	8025846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025652:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025656:	d01b      	beq.n	8025690 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025658:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802565c:	fb0e fa0a 	mul.w	sl, lr, sl
 8025660:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025664:	fb0e fe03 	mul.w	lr, lr, r3
 8025668:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802566c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025670:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025674:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025678:	4453      	add	r3, sl
 802567a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802567e:	0a1b      	lsrs	r3, r3, #8
 8025680:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025684:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025688:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802568c:	ea43 030c 	orr.w	r3, r3, ip
 8025690:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025692:	2cff      	cmp	r4, #255	@ 0xff
 8025694:	d021      	beq.n	80256da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8025696:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025698:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802569c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802569e:	fb04 fb0b 	mul.w	fp, r4, fp
 80256a2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80256a4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80256a8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80256ac:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80256ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80256b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80256b6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80256ba:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80256be:	44de      	add	lr, fp
 80256c0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80256c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80256c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80256cc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80256d0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80256d4:	ea4e 040a 	orr.w	r4, lr, sl
 80256d8:	940e      	str	r4, [sp, #56]	@ 0x38
 80256da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80256dc:	2cff      	cmp	r4, #255	@ 0xff
 80256de:	d021      	beq.n	8025724 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80256e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80256e2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80256e6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80256e8:	fb04 fb0b 	mul.w	fp, r4, fp
 80256ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80256ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80256f2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80256f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80256f8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80256fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8025700:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025704:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025708:	44de      	add	lr, fp
 802570a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802570e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025712:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025716:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802571a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802571e:	ea4e 040a 	orr.w	r4, lr, sl
 8025722:	940a      	str	r4, [sp, #40]	@ 0x28
 8025724:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8025726:	2cff      	cmp	r4, #255	@ 0xff
 8025728:	d021      	beq.n	802576e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 802572a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802572c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025730:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8025732:	fb04 fb0b 	mul.w	fp, r4, fp
 8025736:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025738:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802573c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025740:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8025742:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025746:	fb04 fa0a 	mul.w	sl, r4, sl
 802574a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802574e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025752:	44de      	add	lr, fp
 8025754:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025758:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802575c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025760:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025764:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025768:	ea4e 040a 	orr.w	r4, lr, sl
 802576c:	940f      	str	r4, [sp, #60]	@ 0x3c
 802576e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025770:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8025774:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025778:	fb08 fc0c 	mul.w	ip, r8, ip
 802577c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025780:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025782:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025786:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802578a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802578e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025790:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025794:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025796:	fb09 cc0e 	mla	ip, r9, lr, ip
 802579a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802579e:	fb08 f80e 	mul.w	r8, r8, lr
 80257a2:	fb02 8303 	mla	r3, r2, r3, r8
 80257a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80257a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80257ac:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80257b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80257b2:	fb01 330a 	mla	r3, r1, sl, r3
 80257b6:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 80257ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80257bc:	fb09 3901 	mla	r9, r9, r1, r3
 80257c0:	4342      	muls	r2, r0
 80257c2:	1c50      	adds	r0, r2, #1
 80257c4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80257c8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80257cc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80257d0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80257d4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80257d8:	ea4c 0c09 	orr.w	ip, ip, r9
 80257dc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80257de:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80257e2:	883b      	ldrh	r3, [r7, #0]
 80257e4:	fb12 f204 	smulbb	r2, r2, r4
 80257e8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80257ec:	fa5f fc8c 	uxtb.w	ip, ip
 80257f0:	1219      	asrs	r1, r3, #8
 80257f2:	fb1c fc04 	smulbb	ip, ip, r4
 80257f6:	b2c0      	uxtb	r0, r0
 80257f8:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80257fc:	fb01 2100 	mla	r1, r1, r0, r2
 8025800:	10da      	asrs	r2, r3, #3
 8025802:	00db      	lsls	r3, r3, #3
 8025804:	fb1e fe04 	smulbb	lr, lr, r4
 8025808:	b2db      	uxtb	r3, r3
 802580a:	fb03 c300 	mla	r3, r3, r0, ip
 802580e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025812:	b289      	uxth	r1, r1
 8025814:	fb02 e200 	mla	r2, r2, r0, lr
 8025818:	fa1f fc83 	uxth.w	ip, r3
 802581c:	1c4b      	adds	r3, r1, #1
 802581e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025822:	f10c 0301 	add.w	r3, ip, #1
 8025826:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802582a:	b292      	uxth	r2, r2
 802582c:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8025830:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025834:	430b      	orrs	r3, r1
 8025836:	1c51      	adds	r1, r2, #1
 8025838:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802583c:	0952      	lsrs	r2, r2, #5
 802583e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025842:	4313      	orrs	r3, r2
 8025844:	803b      	strh	r3, [r7, #0]
 8025846:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025848:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802584a:	3702      	adds	r7, #2
 802584c:	441a      	add	r2, r3
 802584e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025850:	9229      	str	r2, [sp, #164]	@ 0xa4
 8025852:	441d      	add	r5, r3
 8025854:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025856:	3b01      	subs	r3, #1
 8025858:	931a      	str	r3, [sp, #104]	@ 0x68
 802585a:	e694      	b.n	8025586 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802585c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802585e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025860:	441c      	add	r4, r3
 8025862:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025864:	9429      	str	r4, [sp, #164]	@ 0xa4
 8025866:	441d      	add	r5, r3
 8025868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802586a:	3b01      	subs	r3, #1
 802586c:	9309      	str	r3, [sp, #36]	@ 0x24
 802586e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025870:	3302      	adds	r3, #2
 8025872:	930c      	str	r3, [sp, #48]	@ 0x30
 8025874:	e667      	b.n	8025546 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025876:	d024      	beq.n	80258c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8025878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802587a:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802587c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802587e:	3b01      	subs	r3, #1
 8025880:	fb00 4003 	mla	r0, r0, r3, r4
 8025884:	1400      	asrs	r0, r0, #16
 8025886:	f53f ae7b 	bmi.w	8025580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802588a:	3901      	subs	r1, #1
 802588c:	4288      	cmp	r0, r1
 802588e:	f6bf ae77 	bge.w	8025580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025892:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8025894:	fb01 5303 	mla	r3, r1, r3, r5
 8025898:	141b      	asrs	r3, r3, #16
 802589a:	f53f ae71 	bmi.w	8025580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802589e:	3a01      	subs	r2, #1
 80258a0:	4293      	cmp	r3, r2
 80258a2:	f6bf ae6d 	bge.w	8025580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80258a6:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80258aa:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80258ae:	f1bb 0f00 	cmp.w	fp, #0
 80258b2:	dc70      	bgt.n	8025996 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80258b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80258b6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80258ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80258bc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80258c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80258c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80258c4:	2b00      	cmp	r3, #0
 80258c6:	f340 81be 	ble.w	8025c46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80258ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80258ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80258d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80258d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80258da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80258de:	eef0 6a62 	vmov.f32	s13, s5
 80258e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80258e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80258ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80258ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80258f6:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 80258fa:	eef0 6a43 	vmov.f32	s13, s6
 80258fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025902:	ee12 2a90 	vmov	r2, s5
 8025906:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802590a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802590c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025910:	fb92 f3f3 	sdiv	r3, r2, r3
 8025914:	ee13 2a10 	vmov	r2, s6
 8025918:	932b      	str	r3, [sp, #172]	@ 0xac
 802591a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802591c:	ee16 5a90 	vmov	r5, s13
 8025920:	fb92 f3f3 	sdiv	r3, r2, r3
 8025924:	932c      	str	r3, [sp, #176]	@ 0xb0
 8025926:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025928:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802592a:	3b01      	subs	r3, #1
 802592c:	9319      	str	r3, [sp, #100]	@ 0x64
 802592e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025930:	bf08      	it	eq
 8025932:	4613      	moveq	r3, r2
 8025934:	eeb0 3a67 	vmov.f32	s6, s15
 8025938:	9309      	str	r3, [sp, #36]	@ 0x24
 802593a:	eef0 2a47 	vmov.f32	s5, s14
 802593e:	e5f4      	b.n	802552a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025940:	2900      	cmp	r1, #0
 8025942:	f43f ae66 	beq.w	8025612 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025946:	f818 0000 	ldrb.w	r0, [r8, r0]
 802594a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802594e:	900a      	str	r0, [sp, #40]	@ 0x28
 8025950:	0e00      	lsrs	r0, r0, #24
 8025952:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025954:	e65d      	b.n	8025612 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025956:	f113 0801 	adds.w	r8, r3, #1
 802595a:	f53f af74 	bmi.w	8025846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802595e:	4540      	cmp	r0, r8
 8025960:	f6ff af71 	blt.w	8025846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025964:	f11c 0801 	adds.w	r8, ip, #1
 8025968:	f53f af6d 	bmi.w	8025846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802596c:	45c6      	cmp	lr, r8
 802596e:	f6ff af6a 	blt.w	8025846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025972:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025974:	9302      	str	r3, [sp, #8]
 8025976:	b200      	sxth	r0, r0
 8025978:	fa0f f38e 	sxth.w	r3, lr
 802597c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025980:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025984:	9301      	str	r3, [sp, #4]
 8025986:	9000      	str	r0, [sp, #0]
 8025988:	4633      	mov	r3, r6
 802598a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802598c:	4639      	mov	r1, r7
 802598e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8025990:	f7ff fc63 	bl	802525a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8025994:	e757      	b.n	8025846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025996:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025998:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802599a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802599e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80259a0:	1427      	asrs	r7, r4, #16
 80259a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80259a6:	142b      	asrs	r3, r5, #16
 80259a8:	fb01 7303 	mla	r3, r1, r3, r7
 80259ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80259ae:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80259b2:	18e7      	adds	r7, r4, r3
 80259b4:	5ce3      	ldrb	r3, [r4, r3]
 80259b6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80259ba:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80259be:	2a00      	cmp	r2, #0
 80259c0:	f000 8137 	beq.w	8025c32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80259c4:	f897 e001 	ldrb.w	lr, [r7, #1]
 80259c8:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80259cc:	9410      	str	r4, [sp, #64]	@ 0x40
 80259ce:	0e24      	lsrs	r4, r4, #24
 80259d0:	9417      	str	r4, [sp, #92]	@ 0x5c
 80259d2:	b170      	cbz	r0, 80259f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80259d4:	eb07 0e01 	add.w	lr, r7, r1
 80259d8:	5c79      	ldrb	r1, [r7, r1]
 80259da:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80259de:	910b      	str	r1, [sp, #44]	@ 0x2c
 80259e0:	0e09      	lsrs	r1, r1, #24
 80259e2:	9114      	str	r1, [sp, #80]	@ 0x50
 80259e4:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80259e8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80259ec:	9111      	str	r1, [sp, #68]	@ 0x44
 80259ee:	0e09      	lsrs	r1, r1, #24
 80259f0:	9118      	str	r1, [sp, #96]	@ 0x60
 80259f2:	b292      	uxth	r2, r2
 80259f4:	b280      	uxth	r0, r0
 80259f6:	fb02 f800 	mul.w	r8, r2, r0
 80259fa:	0112      	lsls	r2, r2, #4
 80259fc:	eba2 0e08 	sub.w	lr, r2, r8
 8025a00:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025a02:	fa1f fe8e 	uxth.w	lr, lr
 8025a06:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025a0a:	fb0e f101 	mul.w	r1, lr, r1
 8025a0e:	b280      	uxth	r0, r0
 8025a10:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025a14:	1a12      	subs	r2, r2, r0
 8025a16:	b292      	uxth	r2, r2
 8025a18:	fb02 110c 	mla	r1, r2, ip, r1
 8025a1c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025a1e:	fb00 1104 	mla	r1, r0, r4, r1
 8025a22:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025a24:	fb08 1104 	mla	r1, r8, r4, r1
 8025a28:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025a2c:	2900      	cmp	r1, #0
 8025a2e:	f000 80f5 	beq.w	8025c1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8025a32:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025a36:	d019      	beq.n	8025a6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8025a38:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025a3c:	fb0c fa0a 	mul.w	sl, ip, sl
 8025a40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025a44:	fb0c fc03 	mul.w	ip, ip, r3
 8025a48:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025a4c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025a50:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025a54:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8025a58:	4453      	add	r3, sl
 8025a5a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025a5e:	0a1b      	lsrs	r3, r3, #8
 8025a60:	0a3f      	lsrs	r7, r7, #8
 8025a62:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025a66:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025a6a:	433b      	orrs	r3, r7
 8025a6c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025a6e:	2cff      	cmp	r4, #255	@ 0xff
 8025a70:	d020      	beq.n	8025ab4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8025a72:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025a74:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025a78:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025a7a:	4367      	muls	r7, r4
 8025a7c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025a7e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025a82:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025a86:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025a88:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025a8c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a90:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a94:	44bc      	add	ip, r7
 8025a96:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025a9a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025a9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025aa2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025aa6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025aaa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025aae:	ea4c 040a 	orr.w	r4, ip, sl
 8025ab2:	9410      	str	r4, [sp, #64]	@ 0x40
 8025ab4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025ab6:	2cff      	cmp	r4, #255	@ 0xff
 8025ab8:	d020      	beq.n	8025afc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8025aba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025abc:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025ac0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025ac2:	4367      	muls	r7, r4
 8025ac4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025ac6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025aca:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025ace:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025ad0:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025ad4:	fb04 fa0a 	mul.w	sl, r4, sl
 8025ad8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025adc:	44bc      	add	ip, r7
 8025ade:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025ae2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025ae6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025aea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025aee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025af2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025af6:	ea4c 040a 	orr.w	r4, ip, sl
 8025afa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025afc:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025afe:	2cff      	cmp	r4, #255	@ 0xff
 8025b00:	d020      	beq.n	8025b44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8025b02:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025b04:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025b08:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025b0a:	4367      	muls	r7, r4
 8025b0c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025b0e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025b12:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025b16:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025b18:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025b1c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025b20:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025b24:	44bc      	add	ip, r7
 8025b26:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025b2a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025b2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b36:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025b3a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025b3e:	ea4c 040a 	orr.w	r4, ip, sl
 8025b42:	9411      	str	r4, [sp, #68]	@ 0x44
 8025b44:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025b46:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025b4a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025b4e:	fb0e f707 	mul.w	r7, lr, r7
 8025b52:	fb02 770c 	mla	r7, r2, ip, r7
 8025b56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025b5c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025b60:	fb00 770c 	mla	r7, r0, ip, r7
 8025b64:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025b66:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025b6a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025b6c:	fb08 770c 	mla	r7, r8, ip, r7
 8025b70:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025b74:	fb0e fe0c 	mul.w	lr, lr, ip
 8025b78:	fb02 e303 	mla	r3, r2, r3, lr
 8025b7c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025b7e:	0a3f      	lsrs	r7, r7, #8
 8025b80:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025b84:	fb00 330a 	mla	r3, r0, sl, r3
 8025b88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025b8a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025b8e:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8025b92:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025b96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025b98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b9c:	434b      	muls	r3, r1
 8025b9e:	1c59      	adds	r1, r3, #1
 8025ba0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025ba4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025ba8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025bac:	ea47 070c 	orr.w	r7, r7, ip
 8025bb0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025bb2:	0c3b      	lsrs	r3, r7, #16
 8025bb4:	f8b9 0000 	ldrh.w	r0, [r9]
 8025bb8:	fb13 f304 	smulbb	r3, r3, r4
 8025bbc:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025bc0:	b2ff      	uxtb	r7, r7
 8025bc2:	1202      	asrs	r2, r0, #8
 8025bc4:	fb17 f704 	smulbb	r7, r7, r4
 8025bc8:	b2c9      	uxtb	r1, r1
 8025bca:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025bce:	fb02 3201 	mla	r2, r2, r1, r3
 8025bd2:	10c3      	asrs	r3, r0, #3
 8025bd4:	00c0      	lsls	r0, r0, #3
 8025bd6:	fb1c fc04 	smulbb	ip, ip, r4
 8025bda:	b2c0      	uxtb	r0, r0
 8025bdc:	fb00 7001 	mla	r0, r0, r1, r7
 8025be0:	b292      	uxth	r2, r2
 8025be2:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8025be6:	fb03 c301 	mla	r3, r3, r1, ip
 8025bea:	f102 0c01 	add.w	ip, r2, #1
 8025bee:	b280      	uxth	r0, r0
 8025bf0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025bf4:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8025bf8:	1c42      	adds	r2, r0, #1
 8025bfa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025bfe:	b29b      	uxth	r3, r3
 8025c00:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025c04:	ea42 020c 	orr.w	r2, r2, ip
 8025c08:	f103 0c01 	add.w	ip, r3, #1
 8025c0c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025c10:	095b      	lsrs	r3, r3, #5
 8025c12:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025c16:	431a      	orrs	r2, r3
 8025c18:	f8a9 2000 	strh.w	r2, [r9]
 8025c1c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025c1e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025c20:	f109 0902 	add.w	r9, r9, #2
 8025c24:	441a      	add	r2, r3
 8025c26:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025c28:	9229      	str	r2, [sp, #164]	@ 0xa4
 8025c2a:	441d      	add	r5, r3
 8025c2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025c30:	e63d      	b.n	80258ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8025c32:	2800      	cmp	r0, #0
 8025c34:	f43f aedd 	beq.w	80259f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025c38:	5c79      	ldrb	r1, [r7, r1]
 8025c3a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025c3e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025c40:	0e09      	lsrs	r1, r1, #24
 8025c42:	9114      	str	r1, [sp, #80]	@ 0x50
 8025c44:	e6d5      	b.n	80259f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025c46:	b01f      	add	sp, #124	@ 0x7c
 8025c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025c4c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c50:	b089      	sub	sp, #36	@ 0x24
 8025c52:	9101      	str	r1, [sp, #4]
 8025c54:	9801      	ldr	r0, [sp, #4]
 8025c56:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8025c5a:	8800      	ldrh	r0, [r0, #0]
 8025c5c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8025c60:	1206      	asrs	r6, r0, #8
 8025c62:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8025c66:	9602      	str	r6, [sp, #8]
 8025c68:	10c6      	asrs	r6, r0, #3
 8025c6a:	00c0      	lsls	r0, r0, #3
 8025c6c:	b2c0      	uxtb	r0, r0
 8025c6e:	9004      	str	r0, [sp, #16]
 8025c70:	fb07 100c 	mla	r0, r7, ip, r1
 8025c74:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8025c78:	2f00      	cmp	r7, #0
 8025c7a:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8025c7e:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8025c82:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8025c86:	9603      	str	r6, [sp, #12]
 8025c88:	eb02 0e00 	add.w	lr, r2, r0
 8025c8c:	f2c0 810a 	blt.w	8025ea4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025c90:	45b8      	cmp	r8, r7
 8025c92:	f340 8107 	ble.w	8025ea4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025c96:	2900      	cmp	r1, #0
 8025c98:	f2c0 8102 	blt.w	8025ea0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025c9c:	458c      	cmp	ip, r1
 8025c9e:	f340 80ff 	ble.w	8025ea0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025ca2:	5c12      	ldrb	r2, [r2, r0]
 8025ca4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8025ca8:	1c4a      	adds	r2, r1, #1
 8025caa:	f100 80fe 	bmi.w	8025eaa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8025cae:	4594      	cmp	ip, r2
 8025cb0:	f340 80fb 	ble.w	8025eaa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8025cb4:	2d00      	cmp	r5, #0
 8025cb6:	f000 80fa 	beq.w	8025eae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8025cba:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025cbe:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025cc2:	3701      	adds	r7, #1
 8025cc4:	f100 80f7 	bmi.w	8025eb6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8025cc8:	45b8      	cmp	r8, r7
 8025cca:	f340 80f4 	ble.w	8025eb6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8025cce:	2c00      	cmp	r4, #0
 8025cd0:	f000 80f4 	beq.w	8025ebc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8025cd4:	2900      	cmp	r1, #0
 8025cd6:	eb0e 020c 	add.w	r2, lr, ip
 8025cda:	f2c0 80ea 	blt.w	8025eb2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8025cde:	458c      	cmp	ip, r1
 8025ce0:	f340 80e7 	ble.w	8025eb2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8025ce4:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8025ce8:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8025cec:	3101      	adds	r1, #1
 8025cee:	f100 80e8 	bmi.w	8025ec2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8025cf2:	458c      	cmp	ip, r1
 8025cf4:	f340 80e5 	ble.w	8025ec2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8025cf8:	2d00      	cmp	r5, #0
 8025cfa:	f000 80e4 	beq.w	8025ec6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8025cfe:	7852      	ldrb	r2, [r2, #1]
 8025d00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025d04:	0e0b      	lsrs	r3, r1, #24
 8025d06:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8025d0a:	9300      	str	r3, [sp, #0]
 8025d0c:	b2a4      	uxth	r4, r4
 8025d0e:	b2ab      	uxth	r3, r5
 8025d10:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8025d14:	fb03 f904 	mul.w	r9, r3, r4
 8025d18:	fb0a f505 	mul.w	r5, sl, r5
 8025d1c:	011b      	lsls	r3, r3, #4
 8025d1e:	eba3 0e09 	sub.w	lr, r3, r9
 8025d22:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8025d26:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8025d2a:	0a28      	lsrs	r0, r5, #8
 8025d2c:	fb0a f303 	mul.w	r3, sl, r3
 8025d30:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025d34:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8025d38:	4405      	add	r5, r0
 8025d3a:	0a2d      	lsrs	r5, r5, #8
 8025d3c:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8025d40:	9005      	str	r0, [sp, #20]
 8025d42:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8025d46:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025d4a:	0a1b      	lsrs	r3, r3, #8
 8025d4c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025d50:	9306      	str	r3, [sp, #24]
 8025d52:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8025d56:	fb0b f303 	mul.w	r3, fp, r3
 8025d5a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025d5e:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8025d62:	fb0b f606 	mul.w	r6, fp, r6
 8025d66:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8025d6a:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025d6e:	fb08 f707 	mul.w	r7, r8, r7
 8025d72:	0a1d      	lsrs	r5, r3, #8
 8025d74:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025d78:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8025d7c:	441d      	add	r5, r3
 8025d7e:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 8025d82:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025d86:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8025d8a:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025d8e:	fb08 fc0c 	mul.w	ip, r8, ip
 8025d92:	0a1b      	lsrs	r3, r3, #8
 8025d94:	9307      	str	r3, [sp, #28]
 8025d96:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8025d9a:	0e0b      	lsrs	r3, r1, #24
 8025d9c:	0a2d      	lsrs	r5, r5, #8
 8025d9e:	fa1f fe8e 	uxth.w	lr, lr
 8025da2:	435f      	muls	r7, r3
 8025da4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025da8:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8025dac:	fb05 f50e 	mul.w	r5, r5, lr
 8025db0:	b2a4      	uxth	r4, r4
 8025db2:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8025db6:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8025dba:	4359      	muls	r1, r3
 8025dbc:	1b12      	subs	r2, r2, r4
 8025dbe:	9b05      	ldr	r3, [sp, #20]
 8025dc0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025dc4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025dc8:	b292      	uxth	r2, r2
 8025dca:	4460      	add	r0, ip
 8025dcc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025dd0:	fb03 5502 	mla	r5, r3, r2, r5
 8025dd4:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025dd8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025ddc:	44bc      	add	ip, r7
 8025dde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025de2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025de6:	0a36      	lsrs	r6, r6, #8
 8025de8:	fb0c 5509 	mla	r5, ip, r9, r5
 8025dec:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025df0:	fb0e f606 	mul.w	r6, lr, r6
 8025df4:	9b06      	ldr	r3, [sp, #24]
 8025df6:	0a00      	lsrs	r0, r0, #8
 8025df8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025dfc:	fb00 5504 	mla	r5, r0, r4, r5
 8025e00:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8025e04:	fb02 6000 	mla	r0, r2, r0, r6
 8025e08:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8025e0c:	fb0e fe0b 	mul.w	lr, lr, fp
 8025e10:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8025e14:	0a09      	lsrs	r1, r1, #8
 8025e16:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8025e1a:	fb09 0001 	mla	r0, r9, r1, r0
 8025e1e:	fb02 e20a 	mla	r2, r2, sl, lr
 8025e22:	9b07      	ldr	r3, [sp, #28]
 8025e24:	0a2d      	lsrs	r5, r5, #8
 8025e26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025e2a:	fb04 0003 	mla	r0, r4, r3, r0
 8025e2e:	fb04 2408 	mla	r4, r4, r8, r2
 8025e32:	9b00      	ldr	r3, [sp, #0]
 8025e34:	9a04      	ldr	r2, [sp, #16]
 8025e36:	fb09 4903 	mla	r9, r9, r3, r4
 8025e3a:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8025e3e:	9b02      	ldr	r3, [sp, #8]
 8025e40:	fa5f f989 	uxtb.w	r9, r9
 8025e44:	fb03 f109 	mul.w	r1, r3, r9
 8025e48:	9b03      	ldr	r3, [sp, #12]
 8025e4a:	0a00      	lsrs	r0, r0, #8
 8025e4c:	fb03 f309 	mul.w	r3, r3, r9
 8025e50:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025e54:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025e58:	4305      	orrs	r5, r0
 8025e5a:	fb02 f909 	mul.w	r9, r2, r9
 8025e5e:	1c58      	adds	r0, r3, #1
 8025e60:	1c4a      	adds	r2, r1, #1
 8025e62:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025e66:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025e6a:	0a2b      	lsrs	r3, r5, #8
 8025e6c:	0c2a      	lsrs	r2, r5, #16
 8025e6e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025e72:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8025e76:	00db      	lsls	r3, r3, #3
 8025e78:	0212      	lsls	r2, r2, #8
 8025e7a:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8025e7e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025e82:	4313      	orrs	r3, r2
 8025e84:	f109 0201 	add.w	r2, r9, #1
 8025e88:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8025e8c:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8025e90:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8025e94:	431d      	orrs	r5, r3
 8025e96:	9b01      	ldr	r3, [sp, #4]
 8025e98:	801d      	strh	r5, [r3, #0]
 8025e9a:	b009      	add	sp, #36	@ 0x24
 8025e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ea0:	2000      	movs	r0, #0
 8025ea2:	e701      	b.n	8025ca8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8025ea4:	2600      	movs	r6, #0
 8025ea6:	4630      	mov	r0, r6
 8025ea8:	e70b      	b.n	8025cc2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025eaa:	2600      	movs	r6, #0
 8025eac:	e709      	b.n	8025cc2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025eae:	462e      	mov	r6, r5
 8025eb0:	e707      	b.n	8025cc2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025eb2:	2700      	movs	r7, #0
 8025eb4:	e71a      	b.n	8025cec <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8025eb6:	2100      	movs	r1, #0
 8025eb8:	460f      	mov	r7, r1
 8025eba:	e723      	b.n	8025d04 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025ebc:	4621      	mov	r1, r4
 8025ebe:	4627      	mov	r7, r4
 8025ec0:	e720      	b.n	8025d04 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025ec2:	2100      	movs	r1, #0
 8025ec4:	e71e      	b.n	8025d04 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025ec6:	4629      	mov	r1, r5
 8025ec8:	e71c      	b.n	8025d04 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

08025ecc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ed0:	b09b      	sub	sp, #108	@ 0x6c
 8025ed2:	9218      	str	r2, [sp, #96]	@ 0x60
 8025ed4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025ed6:	9019      	str	r0, [sp, #100]	@ 0x64
 8025ed8:	6850      	ldr	r0, [r2, #4]
 8025eda:	9116      	str	r1, [sp, #88]	@ 0x58
 8025edc:	9307      	str	r3, [sp, #28]
 8025ede:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8025ee2:	fb00 1303 	mla	r3, r0, r3, r1
 8025ee6:	6812      	ldr	r2, [r2, #0]
 8025ee8:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8025eea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8025ef0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025ef2:	681b      	ldr	r3, [r3, #0]
 8025ef4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025ef6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025ef8:	685e      	ldr	r6, [r3, #4]
 8025efa:	3604      	adds	r6, #4
 8025efc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025efe:	2b00      	cmp	r3, #0
 8025f00:	dc03      	bgt.n	8025f0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8025f02:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025f04:	2b00      	cmp	r3, #0
 8025f06:	f340 8373 	ble.w	80265f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8025f0a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025f0c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f10:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025f14:	1e48      	subs	r0, r1, #1
 8025f16:	1e57      	subs	r7, r2, #1
 8025f18:	9b07      	ldr	r3, [sp, #28]
 8025f1a:	2b00      	cmp	r3, #0
 8025f1c:	f340 818f 	ble.w	802623e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8025f20:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025f22:	142b      	asrs	r3, r5, #16
 8025f24:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025f28:	d406      	bmi.n	8025f38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025f2a:	4584      	cmp	ip, r0
 8025f2c:	da04      	bge.n	8025f38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025f2e:	2b00      	cmp	r3, #0
 8025f30:	db02      	blt.n	8025f38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025f32:	42bb      	cmp	r3, r7
 8025f34:	f2c0 8184 	blt.w	8026240 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025f38:	f11c 0c01 	adds.w	ip, ip, #1
 8025f3c:	f100 8172 	bmi.w	8026224 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025f40:	4561      	cmp	r1, ip
 8025f42:	f2c0 816f 	blt.w	8026224 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025f46:	3301      	adds	r3, #1
 8025f48:	f100 816c 	bmi.w	8026224 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025f4c:	429a      	cmp	r2, r3
 8025f4e:	f2c0 8169 	blt.w	8026224 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025f52:	9b07      	ldr	r3, [sp, #28]
 8025f54:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8025f56:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025f58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025f5a:	2b00      	cmp	r3, #0
 8025f5c:	f340 818e 	ble.w	802627c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8025f60:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025f62:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025f66:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025f6a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025f6c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025f70:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8025f74:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025f76:	141b      	asrs	r3, r3, #16
 8025f78:	f100 81d1 	bmi.w	802631e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025f7c:	f101 38ff 	add.w	r8, r1, #4294967295
 8025f80:	4543      	cmp	r3, r8
 8025f82:	f280 81cc 	bge.w	802631e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025f86:	f1bc 0f00 	cmp.w	ip, #0
 8025f8a:	f2c0 81c8 	blt.w	802631e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025f8e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025f92:	45c4      	cmp	ip, r8
 8025f94:	f280 81c3 	bge.w	802631e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025f98:	b209      	sxth	r1, r1
 8025f9a:	fb0c 3301 	mla	r3, ip, r1, r3
 8025f9e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025fa0:	eb04 0803 	add.w	r8, r4, r3
 8025fa4:	5ce3      	ldrb	r3, [r4, r3]
 8025fa6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025faa:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025fae:	2a00      	cmp	r2, #0
 8025fb0:	f000 81aa 	beq.w	8026308 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8025fb4:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025fb8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025fbc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025fbe:	0e24      	lsrs	r4, r4, #24
 8025fc0:	9412      	str	r4, [sp, #72]	@ 0x48
 8025fc2:	b178      	cbz	r0, 8025fe4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8025fc4:	eb08 0c01 	add.w	ip, r8, r1
 8025fc8:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025fcc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025fd0:	9108      	str	r1, [sp, #32]
 8025fd2:	0e09      	lsrs	r1, r1, #24
 8025fd4:	9110      	str	r1, [sp, #64]	@ 0x40
 8025fd6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8025fda:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025fde:	910c      	str	r1, [sp, #48]	@ 0x30
 8025fe0:	0e09      	lsrs	r1, r1, #24
 8025fe2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025fe4:	b292      	uxth	r2, r2
 8025fe6:	b280      	uxth	r0, r0
 8025fe8:	fb02 f900 	mul.w	r9, r2, r0
 8025fec:	0112      	lsls	r2, r2, #4
 8025fee:	eba2 0809 	sub.w	r8, r2, r9
 8025ff2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025ff4:	fa1f f888 	uxth.w	r8, r8
 8025ff8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025ffc:	fb08 f101 	mul.w	r1, r8, r1
 8026000:	b280      	uxth	r0, r0
 8026002:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8026006:	1a12      	subs	r2, r2, r0
 8026008:	b292      	uxth	r2, r2
 802600a:	fb02 110e 	mla	r1, r2, lr, r1
 802600e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026010:	fb00 1104 	mla	r1, r0, r4, r1
 8026014:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026016:	fb09 1104 	mla	r1, r9, r4, r1
 802601a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802601e:	2900      	cmp	r1, #0
 8026020:	f000 80f5 	beq.w	802620e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026024:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026028:	d01b      	beq.n	8026062 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802602a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802602e:	fb0e fa0a 	mul.w	sl, lr, sl
 8026032:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026036:	fb0e fe03 	mul.w	lr, lr, r3
 802603a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802603e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026042:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026046:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802604a:	4453      	add	r3, sl
 802604c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026050:	0a1b      	lsrs	r3, r3, #8
 8026052:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026056:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802605a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802605e:	ea43 030c 	orr.w	r3, r3, ip
 8026062:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026064:	2cff      	cmp	r4, #255	@ 0xff
 8026066:	d021      	beq.n	80260ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8026068:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802606a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802606e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026070:	fb04 fb0b 	mul.w	fp, r4, fp
 8026074:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026076:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802607a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802607e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026080:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026084:	fb04 fa0a 	mul.w	sl, r4, sl
 8026088:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802608c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026090:	44de      	add	lr, fp
 8026092:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026096:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802609a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802609e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80260a2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80260a6:	ea4e 040a 	orr.w	r4, lr, sl
 80260aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80260ac:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80260ae:	2cff      	cmp	r4, #255	@ 0xff
 80260b0:	d021      	beq.n	80260f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80260b2:	9c08      	ldr	r4, [sp, #32]
 80260b4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80260b8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80260ba:	fb04 fb0b 	mul.w	fp, r4, fp
 80260be:	9c08      	ldr	r4, [sp, #32]
 80260c0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80260c4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80260c8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80260ca:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80260ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80260d2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80260d6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80260da:	44de      	add	lr, fp
 80260dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80260e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80260e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80260e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80260ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80260f0:	ea4e 040a 	orr.w	r4, lr, sl
 80260f4:	9408      	str	r4, [sp, #32]
 80260f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80260f8:	2cff      	cmp	r4, #255	@ 0xff
 80260fa:	d021      	beq.n	8026140 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80260fc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80260fe:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026102:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026104:	fb04 fb0b 	mul.w	fp, r4, fp
 8026108:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802610a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802610e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026112:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026114:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026118:	fb04 fa0a 	mul.w	sl, r4, sl
 802611c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026120:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026124:	44de      	add	lr, fp
 8026126:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802612a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802612e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026132:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026136:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802613a:	ea4e 040a 	orr.w	r4, lr, sl
 802613e:	940c      	str	r4, [sp, #48]	@ 0x30
 8026140:	43c9      	mvns	r1, r1
 8026142:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026144:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8026148:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802614c:	fb08 fc0c 	mul.w	ip, r8, ip
 8026150:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026154:	9c08      	ldr	r4, [sp, #32]
 8026156:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802615a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802615e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026162:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026164:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026168:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802616a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802616e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026172:	fb08 f80e 	mul.w	r8, r8, lr
 8026176:	fb02 8303 	mla	r3, r2, r3, r8
 802617a:	9a08      	ldr	r2, [sp, #32]
 802617c:	f8b7 8000 	ldrh.w	r8, [r7]
 8026180:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8026184:	fb00 330a 	mla	r3, r0, sl, r3
 8026188:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802618a:	fa5f fe81 	uxtb.w	lr, r1
 802618e:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8026192:	fb09 3900 	mla	r9, r9, r0, r3
 8026196:	ea4f 2228 	mov.w	r2, r8, asr #8
 802619a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802619e:	fb02 f20e 	mul.w	r2, r2, lr
 80261a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80261a6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80261aa:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80261ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80261b2:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80261b6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80261ba:	ea4c 0c09 	orr.w	ip, ip, r9
 80261be:	fb00 f00e 	mul.w	r0, r0, lr
 80261c2:	1c53      	adds	r3, r2, #1
 80261c4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80261c8:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80261cc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80261d0:	4a62      	ldr	r2, [pc, #392]	@ (802635c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80261d2:	b2db      	uxtb	r3, r3
 80261d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80261d8:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80261dc:	b2c9      	uxtb	r1, r1
 80261de:	1c43      	adds	r3, r0, #1
 80261e0:	fb01 f10e 	mul.w	r1, r1, lr
 80261e4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80261e8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80261ec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80261f0:	00db      	lsls	r3, r3, #3
 80261f2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80261f6:	4313      	orrs	r3, r2
 80261f8:	1c4a      	adds	r2, r1, #1
 80261fa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80261fe:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026202:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8026206:	ea4c 0c03 	orr.w	ip, ip, r3
 802620a:	f8a7 c000 	strh.w	ip, [r7]
 802620e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026210:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8026212:	3702      	adds	r7, #2
 8026214:	441a      	add	r2, r3
 8026216:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026218:	9225      	str	r2, [sp, #148]	@ 0x94
 802621a:	441d      	add	r5, r3
 802621c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802621e:	3b01      	subs	r3, #1
 8026220:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026222:	e699      	b.n	8025f58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026224:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026226:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8026228:	441c      	add	r4, r3
 802622a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802622c:	9425      	str	r4, [sp, #148]	@ 0x94
 802622e:	441d      	add	r5, r3
 8026230:	9b07      	ldr	r3, [sp, #28]
 8026232:	3b01      	subs	r3, #1
 8026234:	9307      	str	r3, [sp, #28]
 8026236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026238:	3302      	adds	r3, #2
 802623a:	930a      	str	r3, [sp, #40]	@ 0x28
 802623c:	e66c      	b.n	8025f18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802623e:	d024      	beq.n	802628a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8026240:	9b07      	ldr	r3, [sp, #28]
 8026242:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8026244:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8026246:	3b01      	subs	r3, #1
 8026248:	fb00 4003 	mla	r0, r0, r3, r4
 802624c:	1400      	asrs	r0, r0, #16
 802624e:	f53f ae80 	bmi.w	8025f52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026252:	3901      	subs	r1, #1
 8026254:	4288      	cmp	r0, r1
 8026256:	f6bf ae7c 	bge.w	8025f52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802625a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802625c:	fb01 5303 	mla	r3, r1, r3, r5
 8026260:	141b      	asrs	r3, r3, #16
 8026262:	f53f ae76 	bmi.w	8025f52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026266:	3a01      	subs	r2, #1
 8026268:	4293      	cmp	r3, r2
 802626a:	f6bf ae72 	bge.w	8025f52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802626e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026272:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8026276:	f1bb 0f00 	cmp.w	fp, #0
 802627a:	dc71      	bgt.n	8026360 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802627c:	9b07      	ldr	r3, [sp, #28]
 802627e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026284:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026288:	930a      	str	r3, [sp, #40]	@ 0x28
 802628a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802628c:	2b00      	cmp	r3, #0
 802628e:	f340 81af 	ble.w	80265f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8026292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026296:	ee30 0a04 	vadd.f32	s0, s0, s8
 802629a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802629e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80262a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80262a6:	eef0 6a62 	vmov.f32	s13, s5
 80262aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80262ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80262b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80262b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80262ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80262be:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 80262c2:	eef0 6a43 	vmov.f32	s13, s6
 80262c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80262ca:	ee12 2a90 	vmov	r2, s5
 80262ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80262d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80262d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80262d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80262dc:	ee13 2a10 	vmov	r2, s6
 80262e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80262e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80262e4:	ee16 5a90 	vmov	r5, s13
 80262e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80262ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80262ee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80262f0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80262f2:	3b01      	subs	r3, #1
 80262f4:	9316      	str	r3, [sp, #88]	@ 0x58
 80262f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80262f8:	bf08      	it	eq
 80262fa:	4613      	moveq	r3, r2
 80262fc:	eeb0 3a67 	vmov.f32	s6, s15
 8026300:	9307      	str	r3, [sp, #28]
 8026302:	eef0 2a47 	vmov.f32	s5, s14
 8026306:	e5f9      	b.n	8025efc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8026308:	2800      	cmp	r0, #0
 802630a:	f43f ae6b 	beq.w	8025fe4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802630e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026312:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026316:	9108      	str	r1, [sp, #32]
 8026318:	0e09      	lsrs	r1, r1, #24
 802631a:	9110      	str	r1, [sp, #64]	@ 0x40
 802631c:	e662      	b.n	8025fe4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802631e:	f113 0801 	adds.w	r8, r3, #1
 8026322:	f53f af74 	bmi.w	802620e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026326:	4541      	cmp	r1, r8
 8026328:	f6ff af71 	blt.w	802620e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802632c:	f11c 0801 	adds.w	r8, ip, #1
 8026330:	f53f af6d 	bmi.w	802620e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026334:	45c6      	cmp	lr, r8
 8026336:	f6ff af6a 	blt.w	802620e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802633a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802633e:	b209      	sxth	r1, r1
 8026340:	fa0f f38e 	sxth.w	r3, lr
 8026344:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8026348:	9301      	str	r3, [sp, #4]
 802634a:	9100      	str	r1, [sp, #0]
 802634c:	4633      	mov	r3, r6
 802634e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026350:	4639      	mov	r1, r7
 8026352:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8026354:	f7ff fc7a 	bl	8025c4c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8026358:	e759      	b.n	802620e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802635a:	bf00      	nop
 802635c:	fffff800 	.word	0xfffff800
 8026360:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8026362:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8026364:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026368:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802636a:	1427      	asrs	r7, r4, #16
 802636c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026370:	142b      	asrs	r3, r5, #16
 8026372:	fb01 7303 	mla	r3, r1, r3, r7
 8026376:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026378:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802637c:	18e7      	adds	r7, r4, r3
 802637e:	5ce3      	ldrb	r3, [r4, r3]
 8026380:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026384:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026388:	2a00      	cmp	r2, #0
 802638a:	f000 8127 	beq.w	80265dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802638e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8026392:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026396:	940d      	str	r4, [sp, #52]	@ 0x34
 8026398:	0e24      	lsrs	r4, r4, #24
 802639a:	9414      	str	r4, [sp, #80]	@ 0x50
 802639c:	b170      	cbz	r0, 80263bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802639e:	eb07 0e01 	add.w	lr, r7, r1
 80263a2:	5c79      	ldrb	r1, [r7, r1]
 80263a4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80263a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80263aa:	0e09      	lsrs	r1, r1, #24
 80263ac:	9111      	str	r1, [sp, #68]	@ 0x44
 80263ae:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80263b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80263b6:	910e      	str	r1, [sp, #56]	@ 0x38
 80263b8:	0e09      	lsrs	r1, r1, #24
 80263ba:	9115      	str	r1, [sp, #84]	@ 0x54
 80263bc:	b292      	uxth	r2, r2
 80263be:	b280      	uxth	r0, r0
 80263c0:	fb02 f800 	mul.w	r8, r2, r0
 80263c4:	0112      	lsls	r2, r2, #4
 80263c6:	eba2 0e08 	sub.w	lr, r2, r8
 80263ca:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80263ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80263d0:	fa1f fe8e 	uxth.w	lr, lr
 80263d4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80263d8:	fb0e f202 	mul.w	r2, lr, r2
 80263dc:	b280      	uxth	r0, r0
 80263de:	1a09      	subs	r1, r1, r0
 80263e0:	b289      	uxth	r1, r1
 80263e2:	fb01 220c 	mla	r2, r1, ip, r2
 80263e6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80263e8:	fb00 2204 	mla	r2, r0, r4, r2
 80263ec:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80263ee:	fb08 2204 	mla	r2, r8, r4, r2
 80263f2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80263f6:	2a00      	cmp	r2, #0
 80263f8:	f000 80e5 	beq.w	80265c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80263fc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026400:	d019      	beq.n	8026436 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8026402:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026406:	fb0c fa0a 	mul.w	sl, ip, sl
 802640a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802640e:	fb0c fc03 	mul.w	ip, ip, r3
 8026412:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026416:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802641a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802641e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8026422:	4453      	add	r3, sl
 8026424:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026428:	0a1b      	lsrs	r3, r3, #8
 802642a:	0a3f      	lsrs	r7, r7, #8
 802642c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026430:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026434:	433b      	orrs	r3, r7
 8026436:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026438:	2cff      	cmp	r4, #255	@ 0xff
 802643a:	d020      	beq.n	802647e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 802643c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802643e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026442:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026444:	4367      	muls	r7, r4
 8026446:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026448:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802644c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026450:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026452:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026456:	fb04 fa0a 	mul.w	sl, r4, sl
 802645a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802645e:	44bc      	add	ip, r7
 8026460:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026464:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026468:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802646c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026470:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026474:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026478:	ea4c 040a 	orr.w	r4, ip, sl
 802647c:	940d      	str	r4, [sp, #52]	@ 0x34
 802647e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026480:	2cff      	cmp	r4, #255	@ 0xff
 8026482:	d020      	beq.n	80264c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8026484:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026486:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802648a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802648c:	4367      	muls	r7, r4
 802648e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026490:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026494:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026498:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802649a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802649e:	fb04 fa0a 	mul.w	sl, r4, sl
 80264a2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80264a6:	44bc      	add	ip, r7
 80264a8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80264ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80264b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80264b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80264b8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80264bc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80264c0:	ea4c 040a 	orr.w	r4, ip, sl
 80264c4:	9409      	str	r4, [sp, #36]	@ 0x24
 80264c6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80264c8:	2cff      	cmp	r4, #255	@ 0xff
 80264ca:	d020      	beq.n	802650e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80264cc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80264ce:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80264d2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80264d4:	4367      	muls	r7, r4
 80264d6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80264d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80264dc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80264e0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80264e2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80264e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80264ea:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80264ee:	44bc      	add	ip, r7
 80264f0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80264f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80264f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80264fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026500:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026504:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026508:	ea4c 040a 	orr.w	r4, ip, sl
 802650c:	940e      	str	r4, [sp, #56]	@ 0x38
 802650e:	43d2      	mvns	r2, r2
 8026510:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026512:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8026516:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802651a:	fb0e f707 	mul.w	r7, lr, r7
 802651e:	fb01 770c 	mla	r7, r1, ip, r7
 8026522:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026524:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026528:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802652c:	fb00 770c 	mla	r7, r0, ip, r7
 8026530:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026532:	b2d2      	uxtb	r2, r2
 8026534:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026538:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802653a:	fb08 770c 	mla	r7, r8, ip, r7
 802653e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8026542:	fb0e fe0c 	mul.w	lr, lr, ip
 8026546:	fb01 e303 	mla	r3, r1, r3, lr
 802654a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802654c:	0a3f      	lsrs	r7, r7, #8
 802654e:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8026552:	fb00 330a 	mla	r3, r0, sl, r3
 8026556:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8026558:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802655c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8026560:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026564:	f8b9 3000 	ldrh.w	r3, [r9]
 8026568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802656c:	1218      	asrs	r0, r3, #8
 802656e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026572:	4350      	muls	r0, r2
 8026574:	10d9      	asrs	r1, r3, #3
 8026576:	00db      	lsls	r3, r3, #3
 8026578:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802657c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026580:	b2db      	uxtb	r3, r3
 8026582:	ea47 070c 	orr.w	r7, r7, ip
 8026586:	4351      	muls	r1, r2
 8026588:	4353      	muls	r3, r2
 802658a:	1c42      	adds	r2, r0, #1
 802658c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026590:	0c3a      	lsrs	r2, r7, #16
 8026592:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026596:	4a18      	ldr	r2, [pc, #96]	@ (80265f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8026598:	b2c0      	uxtb	r0, r0
 802659a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802659e:	1c4a      	adds	r2, r1, #1
 80265a0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80265a4:	0a3a      	lsrs	r2, r7, #8
 80265a6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80265aa:	00c9      	lsls	r1, r1, #3
 80265ac:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80265b0:	4301      	orrs	r1, r0
 80265b2:	1c58      	adds	r0, r3, #1
 80265b4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80265b8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80265bc:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80265c0:	4308      	orrs	r0, r1
 80265c2:	f8a9 0000 	strh.w	r0, [r9]
 80265c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80265c8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80265ca:	f109 0902 	add.w	r9, r9, #2
 80265ce:	441a      	add	r2, r3
 80265d0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80265d2:	9225      	str	r2, [sp, #148]	@ 0x94
 80265d4:	441d      	add	r5, r3
 80265d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80265da:	e64c      	b.n	8026276 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80265dc:	2800      	cmp	r0, #0
 80265de:	f43f aeed 	beq.w	80263bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80265e2:	5c79      	ldrb	r1, [r7, r1]
 80265e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80265e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80265ea:	0e09      	lsrs	r1, r1, #24
 80265ec:	9111      	str	r1, [sp, #68]	@ 0x44
 80265ee:	e6e5      	b.n	80263bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80265f0:	b01b      	add	sp, #108	@ 0x6c
 80265f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265f6:	bf00      	nop
 80265f8:	fffff800 	.word	0xfffff800

080265fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80265fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026600:	b085      	sub	sp, #20
 8026602:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8026606:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 802660a:	fb00 7406 	mla	r4, r0, r6, r7
 802660e:	2800      	cmp	r0, #0
 8026610:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8026614:	9103      	str	r1, [sp, #12]
 8026616:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 802661a:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 802661e:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8026622:	9501      	str	r5, [sp, #4]
 8026624:	eb03 0904 	add.w	r9, r3, r4
 8026628:	f2c0 8150 	blt.w	80268cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802662c:	4583      	cmp	fp, r0
 802662e:	f340 814d 	ble.w	80268cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8026632:	2f00      	cmp	r7, #0
 8026634:	f2c0 8146 	blt.w	80268c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026638:	42be      	cmp	r6, r7
 802663a:	f340 8143 	ble.w	80268c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802663e:	f813 c004 	ldrb.w	ip, [r3, r4]
 8026642:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8026646:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 802664a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802664e:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8026652:	4355      	muls	r5, r2
 8026654:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026658:	fb0c f203 	mul.w	r2, ip, r3
 802665c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8026660:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8026664:	441d      	add	r5, r3
 8026666:	f102 0320 	add.w	r3, r2, #32
 802666a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802666e:	0a1b      	lsrs	r3, r3, #8
 8026670:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8026674:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026678:	431c      	orrs	r4, r3
 802667a:	1c7b      	adds	r3, r7, #1
 802667c:	f100 812b 	bmi.w	80268d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8026680:	429e      	cmp	r6, r3
 8026682:	f340 8128 	ble.w	80268d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8026686:	2900      	cmp	r1, #0
 8026688:	f000 8128 	beq.w	80268dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 802668c:	9a01      	ldr	r2, [sp, #4]
 802668e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8026692:	8855      	ldrh	r5, [r2, #2]
 8026694:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8026698:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 802669c:	fb08 f802 	mul.w	r8, r8, r2
 80266a0:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80266a4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80266a8:	435d      	muls	r5, r3
 80266aa:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80266ae:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80266b2:	44d0      	add	r8, sl
 80266b4:	f105 0a20 	add.w	sl, r5, #32
 80266b8:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80266bc:	0a2d      	lsrs	r5, r5, #8
 80266be:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80266c2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80266c6:	432a      	orrs	r2, r5
 80266c8:	3001      	adds	r0, #1
 80266ca:	f100 810d 	bmi.w	80268e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80266ce:	4583      	cmp	fp, r0
 80266d0:	f340 810a 	ble.w	80268e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80266d4:	f1be 0f00 	cmp.w	lr, #0
 80266d8:	f000 810b 	beq.w	80268f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80266dc:	2f00      	cmp	r7, #0
 80266de:	f2c0 8100 	blt.w	80268e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80266e2:	42be      	cmp	r6, r7
 80266e4:	f340 80fd 	ble.w	80268e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80266e8:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80266ec:	9801      	ldr	r0, [sp, #4]
 80266ee:	f819 5006 	ldrb.w	r5, [r9, r6]
 80266f2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80266f6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80266fa:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80266fe:	fb0a fa00 	mul.w	sl, sl, r0
 8026702:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8026706:	fb05 f808 	mul.w	r8, r5, r8
 802670a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802670e:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8026712:	4482      	add	sl, r0
 8026714:	f108 0020 	add.w	r0, r8, #32
 8026718:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802671c:	0a00      	lsrs	r0, r0, #8
 802671e:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8026722:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026726:	ea4b 0b00 	orr.w	fp, fp, r0
 802672a:	3701      	adds	r7, #1
 802672c:	f100 80e6 	bmi.w	80268fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026730:	42be      	cmp	r6, r7
 8026732:	f340 80e3 	ble.w	80268fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026736:	2900      	cmp	r1, #0
 8026738:	f000 80e3 	beq.w	8026902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 802673c:	9801      	ldr	r0, [sp, #4]
 802673e:	3601      	adds	r6, #1
 8026740:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8026744:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026748:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 802674c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026750:	fb07 f800 	mul.w	r8, r7, r0
 8026754:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8026758:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802675c:	fb09 f906 	mul.w	r9, r9, r6
 8026760:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8026764:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8026768:	44d1      	add	r9, sl
 802676a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802676e:	f108 0020 	add.w	r0, r8, #32
 8026772:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026776:	0a00      	lsrs	r0, r0, #8
 8026778:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802677c:	4330      	orrs	r0, r6
 802677e:	b28e      	uxth	r6, r1
 8026780:	fa1f f98e 	uxth.w	r9, lr
 8026784:	fb06 f809 	mul.w	r8, r6, r9
 8026788:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802678c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026790:	0136      	lsls	r6, r6, #4
 8026792:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026796:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 802679a:	9601      	str	r6, [sp, #4]
 802679c:	ea4a 0404 	orr.w	r4, sl, r4
 80267a0:	fa1f f689 	uxth.w	r6, r9
 80267a4:	9602      	str	r6, [sp, #8]
 80267a6:	4626      	mov	r6, r4
 80267a8:	fb11 f90e 	smulbb	r9, r1, lr
 80267ac:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80267b0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80267b4:	f1ce 0410 	rsb	r4, lr, #16
 80267b8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80267bc:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80267c0:	1a64      	subs	r4, r4, r1
 80267c2:	ea4a 0202 	orr.w	r2, sl, r2
 80267c6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80267ca:	434a      	muls	r2, r1
 80267cc:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80267d0:	fb04 2406 	mla	r4, r4, r6, r2
 80267d4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80267d8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80267dc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80267e0:	ea4a 0000 	orr.w	r0, sl, r0
 80267e4:	fb09 4200 	mla	r2, r9, r0, r4
 80267e8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80267ec:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80267f0:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80267f4:	ea44 0b0b 	orr.w	fp, r4, fp
 80267f8:	9c01      	ldr	r4, [sp, #4]
 80267fa:	9e02      	ldr	r6, [sp, #8]
 80267fc:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 8026800:	1ba4      	subs	r4, r4, r6
 8026802:	9e01      	ldr	r6, [sp, #4]
 8026804:	b2a4      	uxth	r4, r4
 8026806:	eba6 0608 	sub.w	r6, r6, r8
 802680a:	b2b6      	uxth	r6, r6
 802680c:	4373      	muls	r3, r6
 802680e:	fb0c 3304 	mla	r3, ip, r4, r3
 8026812:	9c02      	ldr	r4, [sp, #8]
 8026814:	9903      	ldr	r1, [sp, #12]
 8026816:	fb04 3505 	mla	r5, r4, r5, r3
 802681a:	fb08 5707 	mla	r7, r8, r7, r5
 802681e:	8808      	ldrh	r0, [r1, #0]
 8026820:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 8026824:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8026828:	b289      	uxth	r1, r1
 802682a:	434f      	muls	r7, r1
 802682c:	1c7b      	adds	r3, r7, #1
 802682e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8026832:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8026836:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802683a:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802683e:	1203      	asrs	r3, r0, #8
 8026840:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026844:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026848:	b2ff      	uxtb	r7, r7
 802684a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802684e:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026852:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026856:	fb13 f307 	smulbb	r3, r3, r7
 802685a:	ea42 0e0e 	orr.w	lr, r2, lr
 802685e:	fa1f f28e 	uxth.w	r2, lr
 8026862:	1215      	asrs	r5, r2, #8
 8026864:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026868:	fb05 3501 	mla	r5, r5, r1, r3
 802686c:	10c3      	asrs	r3, r0, #3
 802686e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026872:	fb13 f307 	smulbb	r3, r3, r7
 8026876:	10d4      	asrs	r4, r2, #3
 8026878:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802687c:	fb04 3401 	mla	r4, r4, r1, r3
 8026880:	00c3      	lsls	r3, r0, #3
 8026882:	b2db      	uxtb	r3, r3
 8026884:	fb13 f307 	smulbb	r3, r3, r7
 8026888:	00d2      	lsls	r2, r2, #3
 802688a:	b2d2      	uxtb	r2, r2
 802688c:	fb02 3101 	mla	r1, r2, r1, r3
 8026890:	b2ad      	uxth	r5, r5
 8026892:	b289      	uxth	r1, r1
 8026894:	b2a4      	uxth	r4, r4
 8026896:	1c6b      	adds	r3, r5, #1
 8026898:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802689c:	1c62      	adds	r2, r4, #1
 802689e:	1c4b      	adds	r3, r1, #1
 80268a0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80268a4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80268a8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80268ac:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80268b0:	0964      	lsrs	r4, r4, #5
 80268b2:	432b      	orrs	r3, r5
 80268b4:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80268b8:	9a03      	ldr	r2, [sp, #12]
 80268ba:	4323      	orrs	r3, r4
 80268bc:	8013      	strh	r3, [r2, #0]
 80268be:	b005      	add	sp, #20
 80268c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80268c4:	f04f 0c00 	mov.w	ip, #0
 80268c8:	4664      	mov	r4, ip
 80268ca:	e6d6      	b.n	802667a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80268cc:	2300      	movs	r3, #0
 80268ce:	469c      	mov	ip, r3
 80268d0:	461a      	mov	r2, r3
 80268d2:	461c      	mov	r4, r3
 80268d4:	e6f8      	b.n	80266c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80268d6:	2300      	movs	r3, #0
 80268d8:	461a      	mov	r2, r3
 80268da:	e6f5      	b.n	80266c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80268dc:	460b      	mov	r3, r1
 80268de:	460a      	mov	r2, r1
 80268e0:	e6f2      	b.n	80266c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80268e2:	2500      	movs	r5, #0
 80268e4:	46ab      	mov	fp, r5
 80268e6:	e720      	b.n	802672a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 80268e8:	2700      	movs	r7, #0
 80268ea:	463d      	mov	r5, r7
 80268ec:	4638      	mov	r0, r7
 80268ee:	46bb      	mov	fp, r7
 80268f0:	e745      	b.n	802677e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80268f2:	4677      	mov	r7, lr
 80268f4:	4675      	mov	r5, lr
 80268f6:	4670      	mov	r0, lr
 80268f8:	46f3      	mov	fp, lr
 80268fa:	e740      	b.n	802677e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80268fc:	2700      	movs	r7, #0
 80268fe:	4638      	mov	r0, r7
 8026900:	e73d      	b.n	802677e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026902:	460f      	mov	r7, r1
 8026904:	4608      	mov	r0, r1
 8026906:	e73a      	b.n	802677e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08026908 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802690c:	b097      	sub	sp, #92	@ 0x5c
 802690e:	9214      	str	r2, [sp, #80]	@ 0x50
 8026910:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8026912:	9015      	str	r0, [sp, #84]	@ 0x54
 8026914:	9308      	str	r3, [sp, #32]
 8026916:	6850      	ldr	r0, [r2, #4]
 8026918:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802691c:	9111      	str	r1, [sp, #68]	@ 0x44
 802691e:	9312      	str	r3, [sp, #72]	@ 0x48
 8026920:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8026924:	fb00 1303 	mla	r3, r0, r3, r1
 8026928:	6812      	ldr	r2, [r2, #0]
 802692a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802692e:	9309      	str	r3, [sp, #36]	@ 0x24
 8026930:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026932:	681b      	ldr	r3, [r3, #0]
 8026934:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026936:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026938:	685b      	ldr	r3, [r3, #4]
 802693a:	930c      	str	r3, [sp, #48]	@ 0x30
 802693c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8026940:	930a      	str	r3, [sp, #40]	@ 0x28
 8026942:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026944:	2b00      	cmp	r3, #0
 8026946:	dc03      	bgt.n	8026950 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026948:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802694a:	2b00      	cmp	r3, #0
 802694c:	f340 83cb 	ble.w	80270e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026950:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026952:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026956:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802695a:	1e48      	subs	r0, r1, #1
 802695c:	1e55      	subs	r5, r2, #1
 802695e:	9b08      	ldr	r3, [sp, #32]
 8026960:	2b00      	cmp	r3, #0
 8026962:	f340 81a3 	ble.w	8026cac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8026966:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8026968:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802696a:	1436      	asrs	r6, r6, #16
 802696c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026970:	d406      	bmi.n	8026980 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026972:	4286      	cmp	r6, r0
 8026974:	da04      	bge.n	8026980 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026976:	2b00      	cmp	r3, #0
 8026978:	db02      	blt.n	8026980 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802697a:	42ab      	cmp	r3, r5
 802697c:	f2c0 8197 	blt.w	8026cae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8026980:	3601      	adds	r6, #1
 8026982:	f100 8184 	bmi.w	8026c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026986:	42b1      	cmp	r1, r6
 8026988:	f2c0 8181 	blt.w	8026c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802698c:	3301      	adds	r3, #1
 802698e:	f100 817e 	bmi.w	8026c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026992:	429a      	cmp	r2, r3
 8026994:	f2c0 817b 	blt.w	8026c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026998:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802699c:	9b08      	ldr	r3, [sp, #32]
 802699e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80269a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80269a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80269a4:	2b00      	cmp	r3, #0
 80269a6:	f340 81a4 	ble.w	8026cf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80269aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80269ac:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 80269ae:	1418      	asrs	r0, r3, #16
 80269b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80269b2:	142d      	asrs	r5, r5, #16
 80269b4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80269b8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80269ba:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80269be:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80269c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80269c4:	f100 81f8 	bmi.w	8026db8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80269c8:	f102 3eff 	add.w	lr, r2, #4294967295
 80269cc:	4575      	cmp	r5, lr
 80269ce:	f280 81f3 	bge.w	8026db8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80269d2:	2800      	cmp	r0, #0
 80269d4:	f2c0 81f0 	blt.w	8026db8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80269d8:	f103 3eff 	add.w	lr, r3, #4294967295
 80269dc:	4570      	cmp	r0, lr
 80269de:	f280 81eb 	bge.w	8026db8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80269e2:	b212      	sxth	r2, r2
 80269e4:	fb00 5002 	mla	r0, r0, r2, r5
 80269e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80269ea:	fa1f fe81 	uxth.w	lr, r1
 80269ee:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80269f2:	eb03 0a00 	add.w	sl, r3, r0
 80269f6:	f813 9000 	ldrb.w	r9, [r3, r0]
 80269fa:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80269fe:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026a02:	b29b      	uxth	r3, r3
 8026a04:	f1bc 0f00 	cmp.w	ip, #0
 8026a08:	f000 81b9 	beq.w	8026d7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8026a0c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026a10:	eb0a 0b02 	add.w	fp, sl, r2
 8026a14:	fa1f fa8c 	uxth.w	sl, ip
 8026a18:	fb0a fe0e 	mul.w	lr, sl, lr
 8026a1c:	eba5 050e 	sub.w	r5, r5, lr
 8026a20:	b2ad      	uxth	r5, r5
 8026a22:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026a26:	fb08 f505 	mul.w	r5, r8, r5
 8026a2a:	fa1f fa8a 	uxth.w	sl, sl
 8026a2e:	eba3 030a 	sub.w	r3, r3, sl
 8026a32:	b29b      	uxth	r3, r3
 8026a34:	940d      	str	r4, [sp, #52]	@ 0x34
 8026a36:	fb09 5303 	mla	r3, r9, r3, r5
 8026a3a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026a3e:	940e      	str	r4, [sp, #56]	@ 0x38
 8026a40:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026a42:	fb0a 3304 	mla	r3, sl, r4, r3
 8026a46:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026a48:	fb0e 3304 	mla	r3, lr, r4, r3
 8026a4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026a50:	2b00      	cmp	r3, #0
 8026a52:	f000 810f 	beq.w	8026c74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026a56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026a58:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026a5c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026a60:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026a64:	f000 8190 	beq.w	8026d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026a68:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026a6c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026a70:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026a74:	fb09 f000 	mul.w	r0, r9, r0
 8026a78:	fb0a fe0e 	mul.w	lr, sl, lr
 8026a7c:	f100 0b20 	add.w	fp, r0, #32
 8026a80:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026a84:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026a88:	44ce      	add	lr, r9
 8026a8a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026a8e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026a92:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026a96:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026a9a:	ea4e 0909 	orr.w	r9, lr, r9
 8026a9e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026aa2:	8868      	ldrh	r0, [r5, #2]
 8026aa4:	d019      	beq.n	8026ada <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8026aa6:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026aaa:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026aae:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026ab2:	fb08 f800 	mul.w	r8, r8, r0
 8026ab6:	fb0a fe0e 	mul.w	lr, sl, lr
 8026aba:	f108 0b20 	add.w	fp, r8, #32
 8026abe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026ac2:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026ac6:	4486      	add	lr, r0
 8026ac8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026acc:	0a00      	lsrs	r0, r0, #8
 8026ace:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026ad2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026ad6:	ea4e 0000 	orr.w	r0, lr, r0
 8026ada:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026ade:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026ae2:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8026ae6:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026aea:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026aee:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026af2:	ea4e 0909 	orr.w	r9, lr, r9
 8026af6:	ea4a 0000 	orr.w	r0, sl, r0
 8026afa:	f1bc 0f00 	cmp.w	ip, #0
 8026afe:	f000 8145 	beq.w	8026d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8026b02:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8026b06:	3a01      	subs	r2, #1
 8026b08:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026b0a:	0052      	lsls	r2, r2, #1
 8026b0c:	3202      	adds	r2, #2
 8026b0e:	2cff      	cmp	r4, #255	@ 0xff
 8026b10:	eb05 0e02 	add.w	lr, r5, r2
 8026b14:	5aaa      	ldrh	r2, [r5, r2]
 8026b16:	d018      	beq.n	8026b4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026b18:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8026b1c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026b20:	fb04 fa02 	mul.w	sl, r4, r2
 8026b24:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026b28:	fb08 f805 	mul.w	r8, r8, r5
 8026b2c:	f10a 0520 	add.w	r5, sl, #32
 8026b30:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026b34:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026b38:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026b3c:	4442      	add	r2, r8
 8026b3e:	0a2d      	lsrs	r5, r5, #8
 8026b40:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026b44:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026b48:	432a      	orrs	r2, r5
 8026b4a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026b4c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026b50:	2cff      	cmp	r4, #255	@ 0xff
 8026b52:	d01a      	beq.n	8026b8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8026b54:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8026b58:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026b5c:	fb04 fa05 	mul.w	sl, r4, r5
 8026b60:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026b64:	fb08 f80e 	mul.w	r8, r8, lr
 8026b68:	f10a 0e20 	add.w	lr, sl, #32
 8026b6c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026b70:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026b74:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026b78:	4445      	add	r5, r8
 8026b7a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026b7e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026b82:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8026b86:	ea45 050e 	orr.w	r5, r5, lr
 8026b8a:	fb1c fe01 	smulbb	lr, ip, r1
 8026b8e:	f1cc 0810 	rsb	r8, ip, #16
 8026b92:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026b96:	eba8 0801 	sub.w	r8, r8, r1
 8026b9a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026b9e:	4341      	muls	r1, r0
 8026ba0:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026ba4:	fb09 1108 	mla	r1, r9, r8, r1
 8026ba8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026bac:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026bb0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026bb4:	ea4a 0202 	orr.w	r2, sl, r2
 8026bb8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026bbc:	fb0c 1102 	mla	r1, ip, r2, r1
 8026bc0:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026bc4:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026bc8:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8026bcc:	ea4b 0505 	orr.w	r5, fp, r5
 8026bd0:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026bd4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026bd8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026bdc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026be0:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026be4:	ea42 0e0e 	orr.w	lr, r2, lr
 8026be8:	fa1f f28e 	uxth.w	r2, lr
 8026bec:	2bff      	cmp	r3, #255	@ 0xff
 8026bee:	d103      	bne.n	8026bf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8026bf0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026bf2:	29ff      	cmp	r1, #255	@ 0xff
 8026bf4:	f000 80de 	beq.w	8026db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8026bf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026bfa:	8838      	ldrh	r0, [r7, #0]
 8026bfc:	434b      	muls	r3, r1
 8026bfe:	f103 0c01 	add.w	ip, r3, #1
 8026c02:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026c06:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026c0a:	fa5f fc83 	uxtb.w	ip, r3
 8026c0e:	1203      	asrs	r3, r0, #8
 8026c10:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026c14:	fb13 f30c 	smulbb	r3, r3, ip
 8026c18:	1215      	asrs	r5, r2, #8
 8026c1a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026c1e:	fb05 3501 	mla	r5, r5, r1, r3
 8026c22:	10c3      	asrs	r3, r0, #3
 8026c24:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026c28:	fb13 f30c 	smulbb	r3, r3, ip
 8026c2c:	10d1      	asrs	r1, r2, #3
 8026c2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026c30:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026c34:	fb01 3104 	mla	r1, r1, r4, r3
 8026c38:	00c3      	lsls	r3, r0, #3
 8026c3a:	b2db      	uxtb	r3, r3
 8026c3c:	fb13 f30c 	smulbb	r3, r3, ip
 8026c40:	00d2      	lsls	r2, r2, #3
 8026c42:	b2d2      	uxtb	r2, r2
 8026c44:	fb02 3304 	mla	r3, r2, r4, r3
 8026c48:	b2ad      	uxth	r5, r5
 8026c4a:	b29a      	uxth	r2, r3
 8026c4c:	1c6b      	adds	r3, r5, #1
 8026c4e:	b289      	uxth	r1, r1
 8026c50:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026c54:	1c53      	adds	r3, r2, #1
 8026c56:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026c5a:	1c4a      	adds	r2, r1, #1
 8026c5c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026c60:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026c64:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026c68:	0949      	lsrs	r1, r1, #5
 8026c6a:	432b      	orrs	r3, r5
 8026c6c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026c70:	430b      	orrs	r3, r1
 8026c72:	803b      	strh	r3, [r7, #0]
 8026c74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026c76:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026c78:	3702      	adds	r7, #2
 8026c7a:	4413      	add	r3, r2
 8026c7c:	9321      	str	r3, [sp, #132]	@ 0x84
 8026c7e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026c80:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026c82:	441a      	add	r2, r3
 8026c84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026c86:	9222      	str	r2, [sp, #136]	@ 0x88
 8026c88:	3b01      	subs	r3, #1
 8026c8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026c8c:	e689      	b.n	80269a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026c8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026c90:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8026c92:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8026c94:	4433      	add	r3, r6
 8026c96:	9321      	str	r3, [sp, #132]	@ 0x84
 8026c98:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026c9a:	441c      	add	r4, r3
 8026c9c:	9b08      	ldr	r3, [sp, #32]
 8026c9e:	9422      	str	r4, [sp, #136]	@ 0x88
 8026ca0:	3b01      	subs	r3, #1
 8026ca2:	9308      	str	r3, [sp, #32]
 8026ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026ca6:	3302      	adds	r3, #2
 8026ca8:	9309      	str	r3, [sp, #36]	@ 0x24
 8026caa:	e658      	b.n	802695e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026cac:	d028      	beq.n	8026d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8026cae:	9b08      	ldr	r3, [sp, #32]
 8026cb0:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8026cb2:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8026cb4:	3b01      	subs	r3, #1
 8026cb6:	fb00 5003 	mla	r0, r0, r3, r5
 8026cba:	1400      	asrs	r0, r0, #16
 8026cbc:	f53f ae6c 	bmi.w	8026998 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026cc0:	3901      	subs	r1, #1
 8026cc2:	4288      	cmp	r0, r1
 8026cc4:	f6bf ae68 	bge.w	8026998 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026cc8:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8026cca:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8026ccc:	fb01 0303 	mla	r3, r1, r3, r0
 8026cd0:	141b      	asrs	r3, r3, #16
 8026cd2:	f53f ae61 	bmi.w	8026998 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026cd6:	3a01      	subs	r2, #1
 8026cd8:	4293      	cmp	r3, r2
 8026cda:	f6bf ae5d 	bge.w	8026998 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026cde:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8026ce2:	9b08      	ldr	r3, [sp, #32]
 8026ce4:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8026ce8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026cea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026cec:	2b00      	cmp	r3, #0
 8026cee:	f300 8082 	bgt.w	8026df6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8026cf2:	9b08      	ldr	r3, [sp, #32]
 8026cf4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026cfa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d02:	2b00      	cmp	r3, #0
 8026d04:	f340 81ef 	ble.w	80270e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026d08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026d0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026d10:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026d14:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026d18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026d1c:	eef0 6a62 	vmov.f32	s13, s5
 8026d20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026d24:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026d28:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026d2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d30:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026d34:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8026d38:	eef0 6a43 	vmov.f32	s13, s6
 8026d3c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026d40:	ee12 2a90 	vmov	r2, s5
 8026d44:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026d48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026d4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026d52:	ee13 2a10 	vmov	r2, s6
 8026d56:	9323      	str	r3, [sp, #140]	@ 0x8c
 8026d58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026d5a:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8026d5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026d62:	9324      	str	r3, [sp, #144]	@ 0x90
 8026d64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8026d68:	3b01      	subs	r3, #1
 8026d6a:	9311      	str	r3, [sp, #68]	@ 0x44
 8026d6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026d6e:	bf08      	it	eq
 8026d70:	4613      	moveq	r3, r2
 8026d72:	eeb0 3a67 	vmov.f32	s6, s15
 8026d76:	9308      	str	r3, [sp, #32]
 8026d78:	eef0 2a47 	vmov.f32	s5, s14
 8026d7c:	e5e1      	b.n	8026942 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026d7e:	fb08 f505 	mul.w	r5, r8, r5
 8026d82:	fb09 5303 	mla	r3, r9, r3, r5
 8026d86:	e661      	b.n	8026a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8026d88:	4681      	mov	r9, r0
 8026d8a:	e688      	b.n	8026a9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026d8c:	f1c1 0210 	rsb	r2, r1, #16
 8026d90:	4341      	muls	r1, r0
 8026d92:	fb09 1902 	mla	r9, r9, r2, r1
 8026d96:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026d9a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026d9e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026da2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026da6:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026daa:	ea42 0909 	orr.w	r9, r2, r9
 8026dae:	fa1f f289 	uxth.w	r2, r9
 8026db2:	e71b      	b.n	8026bec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8026db4:	803a      	strh	r2, [r7, #0]
 8026db6:	e75d      	b.n	8026c74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026db8:	f115 0e01 	adds.w	lr, r5, #1
 8026dbc:	f53f af5a 	bmi.w	8026c74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026dc0:	4572      	cmp	r2, lr
 8026dc2:	f6ff af57 	blt.w	8026c74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026dc6:	f110 0e01 	adds.w	lr, r0, #1
 8026dca:	f53f af53 	bmi.w	8026c74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026dce:	4573      	cmp	r3, lr
 8026dd0:	f6ff af50 	blt.w	8026c74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026dd4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026dd6:	b21b      	sxth	r3, r3
 8026dd8:	b212      	sxth	r2, r2
 8026dda:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8026dde:	9301      	str	r3, [sp, #4]
 8026de0:	9200      	str	r2, [sp, #0]
 8026de2:	e9cd c405 	strd	ip, r4, [sp, #20]
 8026de6:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8026dea:	9502      	str	r5, [sp, #8]
 8026dec:	4639      	mov	r1, r7
 8026dee:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8026df0:	f7ff fc04 	bl	80265fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8026df4:	e73e      	b.n	8026c74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026df6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026df8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026dfc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026dfe:	fa1f fc82 	uxth.w	ip, r2
 8026e02:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026e06:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026e08:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026e0c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026e10:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026e12:	141f      	asrs	r7, r3, #16
 8026e14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026e16:	141b      	asrs	r3, r3, #16
 8026e18:	fb01 3707 	mla	r7, r1, r7, r3
 8026e1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026e1e:	eb03 0a07 	add.w	sl, r3, r7
 8026e22:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026e26:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8026e2a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026e2e:	b29b      	uxth	r3, r3
 8026e30:	2d00      	cmp	r5, #0
 8026e32:	f000 813d 	beq.w	80270b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8026e36:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026e3a:	eb0a 0b01 	add.w	fp, sl, r1
 8026e3e:	fa1f fa85 	uxth.w	sl, r5
 8026e42:	fb0a fc0c 	mul.w	ip, sl, ip
 8026e46:	eba0 000c 	sub.w	r0, r0, ip
 8026e4a:	b280      	uxth	r0, r0
 8026e4c:	fb08 f000 	mul.w	r0, r8, r0
 8026e50:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026e54:	fa1f fa8a 	uxth.w	sl, sl
 8026e58:	eba3 030a 	sub.w	r3, r3, sl
 8026e5c:	b29b      	uxth	r3, r3
 8026e5e:	fb09 0303 	mla	r3, r9, r3, r0
 8026e62:	940f      	str	r4, [sp, #60]	@ 0x3c
 8026e64:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026e66:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026e6a:	fb0a 3300 	mla	r3, sl, r0, r3
 8026e6e:	fb0c 3304 	mla	r3, ip, r4, r3
 8026e72:	9410      	str	r4, [sp, #64]	@ 0x40
 8026e74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026e78:	2b00      	cmp	r3, #0
 8026e7a:	f000 810b 	beq.w	8027094 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8026e7e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8026e80:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026e82:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026e86:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026e8a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026e8e:	f000 8114 	beq.w	80270ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8026e92:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8026e96:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026e9a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026e9e:	fb09 f707 	mul.w	r7, r9, r7
 8026ea2:	fb0a fc0c 	mul.w	ip, sl, ip
 8026ea6:	f107 0b20 	add.w	fp, r7, #32
 8026eaa:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026eae:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8026eb2:	44cc      	add	ip, r9
 8026eb4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026eb8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026ebc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026ec0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026ec4:	ea4c 0909 	orr.w	r9, ip, r9
 8026ec8:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026ecc:	8847      	ldrh	r7, [r0, #2]
 8026ece:	d019      	beq.n	8026f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8026ed0:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8026ed4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026ed8:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026edc:	fb08 f807 	mul.w	r8, r8, r7
 8026ee0:	fb0a fc0c 	mul.w	ip, sl, ip
 8026ee4:	f108 0b20 	add.w	fp, r8, #32
 8026ee8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026eec:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8026ef0:	44bc      	add	ip, r7
 8026ef2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026ef6:	0a3f      	lsrs	r7, r7, #8
 8026ef8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026efc:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026f00:	ea4c 0707 	orr.w	r7, ip, r7
 8026f04:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026f08:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026f0c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8026f10:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026f14:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026f18:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8026f1c:	ea4c 0909 	orr.w	r9, ip, r9
 8026f20:	ea4a 0707 	orr.w	r7, sl, r7
 8026f24:	2d00      	cmp	r5, #0
 8026f26:	f000 80ca 	beq.w	80270be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8026f2a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8026f2e:	3901      	subs	r1, #1
 8026f30:	0049      	lsls	r1, r1, #1
 8026f32:	3102      	adds	r1, #2
 8026f34:	eb00 0c01 	add.w	ip, r0, r1
 8026f38:	5a41      	ldrh	r1, [r0, r1]
 8026f3a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026f3c:	28ff      	cmp	r0, #255	@ 0xff
 8026f3e:	d019      	beq.n	8026f74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8026f40:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026f42:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8026f46:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026f4a:	fb04 fa01 	mul.w	sl, r4, r1
 8026f4e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026f52:	fb08 f800 	mul.w	r8, r8, r0
 8026f56:	f10a 0020 	add.w	r0, sl, #32
 8026f5a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026f5e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026f62:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026f66:	4441      	add	r1, r8
 8026f68:	0a00      	lsrs	r0, r0, #8
 8026f6a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026f6e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026f72:	4301      	orrs	r1, r0
 8026f74:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026f76:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026f7a:	2cff      	cmp	r4, #255	@ 0xff
 8026f7c:	d01a      	beq.n	8026fb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8026f7e:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8026f82:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026f86:	fb04 fa00 	mul.w	sl, r4, r0
 8026f8a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026f8e:	fb08 f80c 	mul.w	r8, r8, ip
 8026f92:	f10a 0c20 	add.w	ip, sl, #32
 8026f96:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026f9a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026f9e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026fa2:	4440      	add	r0, r8
 8026fa4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026fa8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026fac:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8026fb0:	ea40 000c 	orr.w	r0, r0, ip
 8026fb4:	fb15 fc02 	smulbb	ip, r5, r2
 8026fb8:	f1c5 0810 	rsb	r8, r5, #16
 8026fbc:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026fc0:	eba8 0802 	sub.w	r8, r8, r2
 8026fc4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026fc8:	437a      	muls	r2, r7
 8026fca:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026fce:	fb09 2208 	mla	r2, r9, r8, r2
 8026fd2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026fd6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026fda:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026fde:	ea4a 0101 	orr.w	r1, sl, r1
 8026fe2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026fe6:	fb05 2201 	mla	r2, r5, r1, r2
 8026fea:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026fee:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026ff2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026ff6:	ea4b 0000 	orr.w	r0, fp, r0
 8026ffa:	fb0c 2200 	mla	r2, ip, r0, r2
 8026ffe:	0d57      	lsrs	r7, r2, #21
 8027000:	0952      	lsrs	r2, r2, #5
 8027002:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027006:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802700a:	433a      	orrs	r2, r7
 802700c:	2bff      	cmp	r3, #255	@ 0xff
 802700e:	b292      	uxth	r2, r2
 8027010:	d102      	bne.n	8027018 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8027012:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027014:	29ff      	cmp	r1, #255	@ 0xff
 8027016:	d063      	beq.n	80270e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8027018:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802701a:	f8be 1000 	ldrh.w	r1, [lr]
 802701e:	4343      	muls	r3, r0
 8027020:	1c58      	adds	r0, r3, #1
 8027022:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8027026:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802702a:	1208      	asrs	r0, r1, #8
 802702c:	b2db      	uxtb	r3, r3
 802702e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027032:	fb10 f003 	smulbb	r0, r0, r3
 8027036:	10cf      	asrs	r7, r1, #3
 8027038:	00c9      	lsls	r1, r1, #3
 802703a:	b2c9      	uxtb	r1, r1
 802703c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802703e:	1215      	asrs	r5, r2, #8
 8027040:	fb11 f103 	smulbb	r1, r1, r3
 8027044:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027048:	fb05 0504 	mla	r5, r5, r4, r0
 802704c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8027050:	10d0      	asrs	r0, r2, #3
 8027052:	00d2      	lsls	r2, r2, #3
 8027054:	fb17 f703 	smulbb	r7, r7, r3
 8027058:	b2d2      	uxtb	r2, r2
 802705a:	fb02 1204 	mla	r2, r2, r4, r1
 802705e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027062:	fb00 7004 	mla	r0, r0, r4, r7
 8027066:	b2ad      	uxth	r5, r5
 8027068:	b292      	uxth	r2, r2
 802706a:	1c6b      	adds	r3, r5, #1
 802706c:	1c57      	adds	r7, r2, #1
 802706e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027072:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027076:	b280      	uxth	r0, r0
 8027078:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802707c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027080:	433d      	orrs	r5, r7
 8027082:	1c47      	adds	r7, r0, #1
 8027084:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027088:	097f      	lsrs	r7, r7, #5
 802708a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802708e:	433d      	orrs	r5, r7
 8027090:	f8ae 5000 	strh.w	r5, [lr]
 8027094:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027096:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027098:	f10e 0e02 	add.w	lr, lr, #2
 802709c:	4413      	add	r3, r2
 802709e:	9321      	str	r3, [sp, #132]	@ 0x84
 80270a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80270a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80270a4:	441a      	add	r2, r3
 80270a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80270a8:	9222      	str	r2, [sp, #136]	@ 0x88
 80270aa:	3b01      	subs	r3, #1
 80270ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 80270ae:	e61c      	b.n	8026cea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80270b0:	fb08 f000 	mul.w	r0, r8, r0
 80270b4:	fb09 0303 	mla	r3, r9, r3, r0
 80270b8:	e6dc      	b.n	8026e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 80270ba:	46b9      	mov	r9, r7
 80270bc:	e704      	b.n	8026ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 80270be:	f1c2 0110 	rsb	r1, r2, #16
 80270c2:	437a      	muls	r2, r7
 80270c4:	fb09 2901 	mla	r9, r9, r1, r2
 80270c8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80270cc:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80270d0:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80270d4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80270d8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80270dc:	4302      	orrs	r2, r0
 80270de:	e795      	b.n	802700c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80270e0:	f8ae 2000 	strh.w	r2, [lr]
 80270e4:	e7d6      	b.n	8027094 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80270e6:	b017      	add	sp, #92	@ 0x5c
 80270e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080270ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80270ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270f0:	b085      	sub	sp, #20
 80270f2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80270f6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80270fa:	fb00 7406 	mla	r4, r0, r6, r7
 80270fe:	2800      	cmp	r0, #0
 8027100:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8027104:	9103      	str	r1, [sp, #12]
 8027106:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 802710a:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 802710e:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8027112:	9501      	str	r5, [sp, #4]
 8027114:	eb02 0904 	add.w	r9, r2, r4
 8027118:	f2c0 8141 	blt.w	802739e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802711c:	4583      	cmp	fp, r0
 802711e:	f340 813e 	ble.w	802739e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8027122:	2f00      	cmp	r7, #0
 8027124:	f2c0 8137 	blt.w	8027396 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8027128:	42be      	cmp	r6, r7
 802712a:	f340 8134 	ble.w	8027396 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802712e:	f812 c004 	ldrb.w	ip, [r2, r4]
 8027132:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8027136:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 802713a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802713e:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8027142:	4355      	muls	r5, r2
 8027144:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027148:	fb0c f203 	mul.w	r2, ip, r3
 802714c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8027150:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8027154:	441d      	add	r5, r3
 8027156:	f102 0320 	add.w	r3, r2, #32
 802715a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802715e:	0a1b      	lsrs	r3, r3, #8
 8027160:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8027164:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027168:	431c      	orrs	r4, r3
 802716a:	1c7b      	adds	r3, r7, #1
 802716c:	f100 811c 	bmi.w	80273a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8027170:	429e      	cmp	r6, r3
 8027172:	f340 8119 	ble.w	80273a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8027176:	2900      	cmp	r1, #0
 8027178:	f000 8119 	beq.w	80273ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 802717c:	9a01      	ldr	r2, [sp, #4]
 802717e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8027182:	8855      	ldrh	r5, [r2, #2]
 8027184:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8027188:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 802718c:	fb08 f802 	mul.w	r8, r8, r2
 8027190:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8027194:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027198:	435d      	muls	r5, r3
 802719a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802719e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80271a2:	44d0      	add	r8, sl
 80271a4:	f105 0a20 	add.w	sl, r5, #32
 80271a8:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80271ac:	0a2d      	lsrs	r5, r5, #8
 80271ae:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80271b2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80271b6:	432a      	orrs	r2, r5
 80271b8:	3001      	adds	r0, #1
 80271ba:	f100 80fe 	bmi.w	80273ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80271be:	4583      	cmp	fp, r0
 80271c0:	f340 80fb 	ble.w	80273ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80271c4:	f1be 0f00 	cmp.w	lr, #0
 80271c8:	f000 80fc 	beq.w	80273c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 80271cc:	2f00      	cmp	r7, #0
 80271ce:	f2c0 80f1 	blt.w	80273b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80271d2:	42be      	cmp	r6, r7
 80271d4:	f340 80ee 	ble.w	80273b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80271d8:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80271dc:	9801      	ldr	r0, [sp, #4]
 80271de:	f819 5006 	ldrb.w	r5, [r9, r6]
 80271e2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80271e6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80271ea:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80271ee:	fb0a fa00 	mul.w	sl, sl, r0
 80271f2:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80271f6:	fb05 f808 	mul.w	r8, r5, r8
 80271fa:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80271fe:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8027202:	4482      	add	sl, r0
 8027204:	f108 0020 	add.w	r0, r8, #32
 8027208:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802720c:	0a00      	lsrs	r0, r0, #8
 802720e:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8027212:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027216:	ea4b 0b00 	orr.w	fp, fp, r0
 802721a:	3701      	adds	r7, #1
 802721c:	f100 80d7 	bmi.w	80273ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8027220:	42be      	cmp	r6, r7
 8027222:	f340 80d4 	ble.w	80273ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8027226:	2900      	cmp	r1, #0
 8027228:	f000 80d4 	beq.w	80273d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 802722c:	9801      	ldr	r0, [sp, #4]
 802722e:	3601      	adds	r6, #1
 8027230:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8027234:	f819 7006 	ldrb.w	r7, [r9, r6]
 8027238:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 802723c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027240:	fb07 f800 	mul.w	r8, r7, r0
 8027244:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8027248:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802724c:	fb09 f906 	mul.w	r9, r9, r6
 8027250:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8027254:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8027258:	44d1      	add	r9, sl
 802725a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802725e:	f108 0020 	add.w	r0, r8, #32
 8027262:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027266:	0a00      	lsrs	r0, r0, #8
 8027268:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802726c:	4330      	orrs	r0, r6
 802726e:	b28e      	uxth	r6, r1
 8027270:	fa1f f98e 	uxth.w	r9, lr
 8027274:	fb06 f809 	mul.w	r8, r6, r9
 8027278:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802727c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8027280:	0136      	lsls	r6, r6, #4
 8027282:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027286:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 802728a:	9601      	str	r6, [sp, #4]
 802728c:	ea4a 0404 	orr.w	r4, sl, r4
 8027290:	fa1f f689 	uxth.w	r6, r9
 8027294:	9602      	str	r6, [sp, #8]
 8027296:	4626      	mov	r6, r4
 8027298:	fb11 f90e 	smulbb	r9, r1, lr
 802729c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80272a0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80272a4:	f1ce 0410 	rsb	r4, lr, #16
 80272a8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80272ac:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80272b0:	1a64      	subs	r4, r4, r1
 80272b2:	ea4a 0202 	orr.w	r2, sl, r2
 80272b6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80272ba:	434a      	muls	r2, r1
 80272bc:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80272c0:	fb04 2406 	mla	r4, r4, r6, r2
 80272c4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80272c8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80272cc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80272d0:	ea4a 0000 	orr.w	r0, sl, r0
 80272d4:	fb09 4200 	mla	r2, r9, r0, r4
 80272d8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80272dc:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80272e0:	9801      	ldr	r0, [sp, #4]
 80272e2:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80272e6:	ea44 0b0b 	orr.w	fp, r4, fp
 80272ea:	9c02      	ldr	r4, [sp, #8]
 80272ec:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 80272f0:	1b00      	subs	r0, r0, r4
 80272f2:	9c01      	ldr	r4, [sp, #4]
 80272f4:	b280      	uxth	r0, r0
 80272f6:	eba4 0608 	sub.w	r6, r4, r8
 80272fa:	b2b6      	uxth	r6, r6
 80272fc:	4373      	muls	r3, r6
 80272fe:	fb0c 3300 	mla	r3, ip, r0, r3
 8027302:	9802      	ldr	r0, [sp, #8]
 8027304:	9903      	ldr	r1, [sp, #12]
 8027306:	fb00 3505 	mla	r5, r0, r5, r3
 802730a:	fb08 5707 	mla	r7, r8, r7, r5
 802730e:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8027312:	8809      	ldrh	r1, [r1, #0]
 8027314:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027318:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802731c:	120b      	asrs	r3, r1, #8
 802731e:	b2ff      	uxtb	r7, r7
 8027320:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8027324:	437b      	muls	r3, r7
 8027326:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802732a:	10c8      	asrs	r0, r1, #3
 802732c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027330:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027334:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027338:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802733c:	00c9      	lsls	r1, r1, #3
 802733e:	4378      	muls	r0, r7
 8027340:	ea42 0e0e 	orr.w	lr, r2, lr
 8027344:	b2c9      	uxtb	r1, r1
 8027346:	fa1f f28e 	uxth.w	r2, lr
 802734a:	434f      	muls	r7, r1
 802734c:	1c59      	adds	r1, r3, #1
 802734e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027352:	1213      	asrs	r3, r2, #8
 8027354:	f023 0307 	bic.w	r3, r3, #7
 8027358:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802735c:	1c41      	adds	r1, r0, #1
 802735e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027362:	10d1      	asrs	r1, r2, #3
 8027364:	f021 0103 	bic.w	r1, r1, #3
 8027368:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802736c:	021b      	lsls	r3, r3, #8
 802736e:	00c9      	lsls	r1, r1, #3
 8027370:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027374:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8027378:	430b      	orrs	r3, r1
 802737a:	1c79      	adds	r1, r7, #1
 802737c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027380:	00d2      	lsls	r2, r2, #3
 8027382:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8027386:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802738a:	431a      	orrs	r2, r3
 802738c:	9b03      	ldr	r3, [sp, #12]
 802738e:	801a      	strh	r2, [r3, #0]
 8027390:	b005      	add	sp, #20
 8027392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027396:	f04f 0c00 	mov.w	ip, #0
 802739a:	4664      	mov	r4, ip
 802739c:	e6e5      	b.n	802716a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802739e:	2300      	movs	r3, #0
 80273a0:	469c      	mov	ip, r3
 80273a2:	461a      	mov	r2, r3
 80273a4:	461c      	mov	r4, r3
 80273a6:	e707      	b.n	80271b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80273a8:	2300      	movs	r3, #0
 80273aa:	461a      	mov	r2, r3
 80273ac:	e704      	b.n	80271b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80273ae:	460b      	mov	r3, r1
 80273b0:	460a      	mov	r2, r1
 80273b2:	e701      	b.n	80271b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80273b4:	2500      	movs	r5, #0
 80273b6:	46ab      	mov	fp, r5
 80273b8:	e72f      	b.n	802721a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 80273ba:	2700      	movs	r7, #0
 80273bc:	463d      	mov	r5, r7
 80273be:	4638      	mov	r0, r7
 80273c0:	46bb      	mov	fp, r7
 80273c2:	e754      	b.n	802726e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80273c4:	4677      	mov	r7, lr
 80273c6:	4675      	mov	r5, lr
 80273c8:	4670      	mov	r0, lr
 80273ca:	46f3      	mov	fp, lr
 80273cc:	e74f      	b.n	802726e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80273ce:	2700      	movs	r7, #0
 80273d0:	4638      	mov	r0, r7
 80273d2:	e74c      	b.n	802726e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80273d4:	460f      	mov	r7, r1
 80273d6:	4608      	mov	r0, r1
 80273d8:	e749      	b.n	802726e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080273dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80273dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273e0:	b093      	sub	sp, #76	@ 0x4c
 80273e2:	9210      	str	r2, [sp, #64]	@ 0x40
 80273e4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80273e6:	9011      	str	r0, [sp, #68]	@ 0x44
 80273e8:	6850      	ldr	r0, [r2, #4]
 80273ea:	910e      	str	r1, [sp, #56]	@ 0x38
 80273ec:	9306      	str	r3, [sp, #24]
 80273ee:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80273f2:	fb00 1303 	mla	r3, r0, r3, r1
 80273f6:	6812      	ldr	r2, [r2, #0]
 80273f8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80273fc:	9307      	str	r3, [sp, #28]
 80273fe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027400:	681b      	ldr	r3, [r3, #0]
 8027402:	9308      	str	r3, [sp, #32]
 8027404:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027406:	685b      	ldr	r3, [r3, #4]
 8027408:	9309      	str	r3, [sp, #36]	@ 0x24
 802740a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802740c:	2b00      	cmp	r3, #0
 802740e:	dc03      	bgt.n	8027418 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8027410:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027412:	2b00      	cmp	r3, #0
 8027414:	f340 83b4 	ble.w	8027b80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8027418:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802741a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802741e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027422:	1e48      	subs	r0, r1, #1
 8027424:	1e55      	subs	r5, r2, #1
 8027426:	9b06      	ldr	r3, [sp, #24]
 8027428:	2b00      	cmp	r3, #0
 802742a:	f340 8163 	ble.w	80276f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802742e:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8027430:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8027432:	1436      	asrs	r6, r6, #16
 8027434:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027438:	d406      	bmi.n	8027448 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802743a:	4286      	cmp	r6, r0
 802743c:	da04      	bge.n	8027448 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802743e:	2b00      	cmp	r3, #0
 8027440:	db02      	blt.n	8027448 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027442:	42ab      	cmp	r3, r5
 8027444:	f2c0 8157 	blt.w	80276f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027448:	3601      	adds	r6, #1
 802744a:	f100 8144 	bmi.w	80276d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802744e:	42b1      	cmp	r1, r6
 8027450:	f2c0 8141 	blt.w	80276d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8027454:	3301      	adds	r3, #1
 8027456:	f100 813e 	bmi.w	80276d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802745a:	429a      	cmp	r2, r3
 802745c:	f2c0 813b 	blt.w	80276d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8027460:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027464:	9b06      	ldr	r3, [sp, #24]
 8027466:	9f07      	ldr	r7, [sp, #28]
 8027468:	930f      	str	r3, [sp, #60]	@ 0x3c
 802746a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802746c:	2b00      	cmp	r3, #0
 802746e:	f340 8164 	ble.w	802773a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027472:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8027474:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8027476:	1418      	asrs	r0, r3, #16
 8027478:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802747a:	142d      	asrs	r5, r5, #16
 802747c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027480:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8027482:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027486:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027488:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802748c:	f100 81ee 	bmi.w	802786c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027490:	f102 3eff 	add.w	lr, r2, #4294967295
 8027494:	4575      	cmp	r5, lr
 8027496:	f280 81e9 	bge.w	802786c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802749a:	2800      	cmp	r0, #0
 802749c:	f2c0 81e6 	blt.w	802786c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80274a0:	f103 3eff 	add.w	lr, r3, #4294967295
 80274a4:	4570      	cmp	r0, lr
 80274a6:	f280 81e1 	bge.w	802786c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80274aa:	b212      	sxth	r2, r2
 80274ac:	fb00 5002 	mla	r0, r0, r2, r5
 80274b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80274b2:	fa1f fe81 	uxth.w	lr, r1
 80274b6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80274ba:	eb03 0a00 	add.w	sl, r3, r0
 80274be:	f813 9000 	ldrb.w	r9, [r3, r0]
 80274c2:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80274c6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80274ca:	b29b      	uxth	r3, r3
 80274cc:	f1bc 0f00 	cmp.w	ip, #0
 80274d0:	f000 8179 	beq.w	80277c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80274d4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80274d8:	eb0a 0b02 	add.w	fp, sl, r2
 80274dc:	fa1f fa8c 	uxth.w	sl, ip
 80274e0:	fb0a fe0e 	mul.w	lr, sl, lr
 80274e4:	eba5 050e 	sub.w	r5, r5, lr
 80274e8:	b2ad      	uxth	r5, r5
 80274ea:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80274ee:	fb08 f505 	mul.w	r5, r8, r5
 80274f2:	fa1f fa8a 	uxth.w	sl, sl
 80274f6:	eba3 030a 	sub.w	r3, r3, sl
 80274fa:	b29b      	uxth	r3, r3
 80274fc:	940a      	str	r4, [sp, #40]	@ 0x28
 80274fe:	fb09 5303 	mla	r3, r9, r3, r5
 8027502:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027506:	940b      	str	r4, [sp, #44]	@ 0x2c
 8027508:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802750a:	fb0a 3304 	mla	r3, sl, r4, r3
 802750e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027510:	fb0e 3304 	mla	r3, lr, r4, r3
 8027514:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027518:	2b00      	cmp	r3, #0
 802751a:	f000 80cf 	beq.w	80276bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802751e:	9c08      	ldr	r4, [sp, #32]
 8027520:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027524:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027528:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802752c:	f000 8150 	beq.w	80277d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8027530:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027534:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027538:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802753c:	fb09 f000 	mul.w	r0, r9, r0
 8027540:	fb0a fe0e 	mul.w	lr, sl, lr
 8027544:	f100 0b20 	add.w	fp, r0, #32
 8027548:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802754c:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027550:	44ce      	add	lr, r9
 8027552:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027556:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802755a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802755e:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027562:	ea4e 0909 	orr.w	r9, lr, r9
 8027566:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802756a:	8868      	ldrh	r0, [r5, #2]
 802756c:	d019      	beq.n	80275a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802756e:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027572:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027576:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802757a:	fb08 f800 	mul.w	r8, r8, r0
 802757e:	fb0a fe0e 	mul.w	lr, sl, lr
 8027582:	f108 0b20 	add.w	fp, r8, #32
 8027586:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802758a:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802758e:	4486      	add	lr, r0
 8027590:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027594:	0a00      	lsrs	r0, r0, #8
 8027596:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802759a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802759e:	ea4e 0000 	orr.w	r0, lr, r0
 80275a2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80275a6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80275aa:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80275ae:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80275b2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80275b6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80275ba:	ea4e 0909 	orr.w	r9, lr, r9
 80275be:	ea4a 0000 	orr.w	r0, sl, r0
 80275c2:	f1bc 0f00 	cmp.w	ip, #0
 80275c6:	f000 8105 	beq.w	80277d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80275ca:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80275ce:	3a01      	subs	r2, #1
 80275d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80275d2:	0052      	lsls	r2, r2, #1
 80275d4:	3202      	adds	r2, #2
 80275d6:	2cff      	cmp	r4, #255	@ 0xff
 80275d8:	eb05 0e02 	add.w	lr, r5, r2
 80275dc:	5aaa      	ldrh	r2, [r5, r2]
 80275de:	d018      	beq.n	8027612 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80275e0:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80275e4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80275e8:	fb04 fa02 	mul.w	sl, r4, r2
 80275ec:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80275f0:	fb08 f805 	mul.w	r8, r8, r5
 80275f4:	f10a 0520 	add.w	r5, sl, #32
 80275f8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80275fc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027600:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027604:	4442      	add	r2, r8
 8027606:	0a2d      	lsrs	r5, r5, #8
 8027608:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802760c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027610:	432a      	orrs	r2, r5
 8027612:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027614:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027618:	2cff      	cmp	r4, #255	@ 0xff
 802761a:	d01a      	beq.n	8027652 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802761c:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8027620:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027624:	fb04 fa05 	mul.w	sl, r4, r5
 8027628:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802762c:	fb08 f80e 	mul.w	r8, r8, lr
 8027630:	f10a 0e20 	add.w	lr, sl, #32
 8027634:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027638:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802763c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027640:	4445      	add	r5, r8
 8027642:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027646:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802764a:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802764e:	ea45 050e 	orr.w	r5, r5, lr
 8027652:	fb1c fe01 	smulbb	lr, ip, r1
 8027656:	f1cc 0810 	rsb	r8, ip, #16
 802765a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802765e:	eba8 0801 	sub.w	r8, r8, r1
 8027662:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027666:	4341      	muls	r1, r0
 8027668:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802766c:	fb09 1108 	mla	r1, r9, r8, r1
 8027670:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027674:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027678:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802767c:	ea4a 0202 	orr.w	r2, sl, r2
 8027680:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027684:	fb0c 1102 	mla	r1, ip, r2, r1
 8027688:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802768c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027690:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027694:	ea4b 0505 	orr.w	r5, fp, r5
 8027698:	fb0e 1e05 	mla	lr, lr, r5, r1
 802769c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80276a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80276a4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80276a8:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80276ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80276b0:	fa1f f28e 	uxth.w	r2, lr
 80276b4:	2bff      	cmp	r3, #255	@ 0xff
 80276b6:	f040 80a1 	bne.w	80277fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80276ba:	803a      	strh	r2, [r7, #0]
 80276bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80276be:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80276c0:	3702      	adds	r7, #2
 80276c2:	4413      	add	r3, r2
 80276c4:	931d      	str	r3, [sp, #116]	@ 0x74
 80276c6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80276c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80276ca:	441a      	add	r2, r3
 80276cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80276ce:	921e      	str	r2, [sp, #120]	@ 0x78
 80276d0:	3b01      	subs	r3, #1
 80276d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80276d4:	e6c9      	b.n	802746a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80276d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80276d8:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80276da:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80276dc:	4433      	add	r3, r6
 80276de:	931d      	str	r3, [sp, #116]	@ 0x74
 80276e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80276e2:	441c      	add	r4, r3
 80276e4:	9b06      	ldr	r3, [sp, #24]
 80276e6:	941e      	str	r4, [sp, #120]	@ 0x78
 80276e8:	3b01      	subs	r3, #1
 80276ea:	9306      	str	r3, [sp, #24]
 80276ec:	9b07      	ldr	r3, [sp, #28]
 80276ee:	3302      	adds	r3, #2
 80276f0:	9307      	str	r3, [sp, #28]
 80276f2:	e698      	b.n	8027426 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80276f4:	d028      	beq.n	8027748 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80276f6:	9b06      	ldr	r3, [sp, #24]
 80276f8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80276fa:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80276fc:	3b01      	subs	r3, #1
 80276fe:	fb00 5003 	mla	r0, r0, r3, r5
 8027702:	1400      	asrs	r0, r0, #16
 8027704:	f53f aeac 	bmi.w	8027460 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027708:	3901      	subs	r1, #1
 802770a:	4288      	cmp	r0, r1
 802770c:	f6bf aea8 	bge.w	8027460 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027710:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8027712:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8027714:	fb01 0303 	mla	r3, r1, r3, r0
 8027718:	141b      	asrs	r3, r3, #16
 802771a:	f53f aea1 	bmi.w	8027460 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802771e:	3a01      	subs	r2, #1
 8027720:	4293      	cmp	r3, r2
 8027722:	f6bf ae9d 	bge.w	8027460 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027726:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802772a:	9b06      	ldr	r3, [sp, #24]
 802772c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027730:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027732:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027734:	2b00      	cmp	r3, #0
 8027736:	f300 80b6 	bgt.w	80278a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 802773a:	9b06      	ldr	r3, [sp, #24]
 802773c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027740:	9b07      	ldr	r3, [sp, #28]
 8027742:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027746:	9307      	str	r3, [sp, #28]
 8027748:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802774a:	2b00      	cmp	r3, #0
 802774c:	f340 8218 	ble.w	8027b80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8027750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027754:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027758:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802775c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027760:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027764:	eef0 6a62 	vmov.f32	s13, s5
 8027768:	ee31 1a05 	vadd.f32	s2, s2, s10
 802776c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027770:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027774:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027778:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802777c:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8027780:	eef0 6a43 	vmov.f32	s13, s6
 8027784:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027788:	ee12 2a90 	vmov	r2, s5
 802778c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027790:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027792:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027796:	fb92 f3f3 	sdiv	r3, r2, r3
 802779a:	ee13 2a10 	vmov	r2, s6
 802779e:	931f      	str	r3, [sp, #124]	@ 0x7c
 80277a0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80277a2:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 80277a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80277aa:	9320      	str	r3, [sp, #128]	@ 0x80
 80277ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80277ae:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80277b0:	3b01      	subs	r3, #1
 80277b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80277b4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80277b6:	bf08      	it	eq
 80277b8:	4613      	moveq	r3, r2
 80277ba:	eeb0 3a67 	vmov.f32	s6, s15
 80277be:	9306      	str	r3, [sp, #24]
 80277c0:	eef0 2a47 	vmov.f32	s5, s14
 80277c4:	e621      	b.n	802740a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80277c6:	fb08 f505 	mul.w	r5, r8, r5
 80277ca:	fb09 5303 	mla	r3, r9, r3, r5
 80277ce:	e6a1      	b.n	8027514 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80277d0:	4681      	mov	r9, r0
 80277d2:	e6c8      	b.n	8027566 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80277d4:	f1c1 0210 	rsb	r2, r1, #16
 80277d8:	4341      	muls	r1, r0
 80277da:	fb09 1902 	mla	r9, r9, r2, r1
 80277de:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80277e2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80277e6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80277ea:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80277ee:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80277f2:	ea42 0909 	orr.w	r9, r2, r9
 80277f6:	fa1f f289 	uxth.w	r2, r9
 80277fa:	e75b      	b.n	80276b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80277fc:	43db      	mvns	r3, r3
 80277fe:	f8b7 c000 	ldrh.w	ip, [r7]
 8027802:	fa5f fe83 	uxtb.w	lr, r3
 8027806:	ea4f 202c 	mov.w	r0, ip, asr #8
 802780a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802780e:	fb00 f00e 	mul.w	r0, r0, lr
 8027812:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8027816:	1c41      	adds	r1, r0, #1
 8027818:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802781c:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027820:	fb05 f50e 	mul.w	r5, r5, lr
 8027824:	1211      	asrs	r1, r2, #8
 8027826:	f021 0107 	bic.w	r1, r1, #7
 802782a:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802782e:	48d6      	ldr	r0, [pc, #856]	@ (8027b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8027830:	b2c9      	uxtb	r1, r1
 8027832:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8027836:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802783a:	1c69      	adds	r1, r5, #1
 802783c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8027840:	b2db      	uxtb	r3, r3
 8027842:	10d1      	asrs	r1, r2, #3
 8027844:	fb03 f30e 	mul.w	r3, r3, lr
 8027848:	f021 0103 	bic.w	r1, r1, #3
 802784c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027850:	00c9      	lsls	r1, r1, #3
 8027852:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027856:	4301      	orrs	r1, r0
 8027858:	1c58      	adds	r0, r3, #1
 802785a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802785e:	00d2      	lsls	r2, r2, #3
 8027860:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027864:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027868:	430a      	orrs	r2, r1
 802786a:	e726      	b.n	80276ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 802786c:	f115 0e01 	adds.w	lr, r5, #1
 8027870:	f53f af24 	bmi.w	80276bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027874:	4572      	cmp	r2, lr
 8027876:	f6ff af21 	blt.w	80276bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802787a:	f110 0e01 	adds.w	lr, r0, #1
 802787e:	f53f af1d 	bmi.w	80276bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027882:	4573      	cmp	r3, lr
 8027884:	f6ff af1a 	blt.w	80276bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027888:	b21b      	sxth	r3, r3
 802788a:	b212      	sxth	r2, r2
 802788c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8027890:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8027894:	9301      	str	r3, [sp, #4]
 8027896:	9200      	str	r2, [sp, #0]
 8027898:	4639      	mov	r1, r7
 802789a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802789e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80278a0:	f7ff fc24 	bl	80270ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80278a4:	e70a      	b.n	80276bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80278a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80278a8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80278ac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80278ae:	fa1f fc82 	uxth.w	ip, r2
 80278b2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80278b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80278b8:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80278bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80278c0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80278c2:	141f      	asrs	r7, r3, #16
 80278c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80278c6:	141b      	asrs	r3, r3, #16
 80278c8:	fb01 3707 	mla	r7, r1, r7, r3
 80278cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80278ce:	eb03 0a07 	add.w	sl, r3, r7
 80278d2:	f813 9007 	ldrb.w	r9, [r3, r7]
 80278d6:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80278da:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80278de:	b29b      	uxth	r3, r3
 80278e0:	2d00      	cmp	r5, #0
 80278e2:	f000 80fe 	beq.w	8027ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80278e6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80278ea:	eb0a 0b01 	add.w	fp, sl, r1
 80278ee:	fa1f fa85 	uxth.w	sl, r5
 80278f2:	fb0a fc0c 	mul.w	ip, sl, ip
 80278f6:	eba0 000c 	sub.w	r0, r0, ip
 80278fa:	b280      	uxth	r0, r0
 80278fc:	fb08 f000 	mul.w	r0, r8, r0
 8027900:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027904:	fa1f fa8a 	uxth.w	sl, sl
 8027908:	eba3 030a 	sub.w	r3, r3, sl
 802790c:	b29b      	uxth	r3, r3
 802790e:	fb09 0303 	mla	r3, r9, r3, r0
 8027912:	940c      	str	r4, [sp, #48]	@ 0x30
 8027914:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8027916:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802791a:	fb0a 3300 	mla	r3, sl, r0, r3
 802791e:	fb0c 3304 	mla	r3, ip, r4, r3
 8027922:	940d      	str	r4, [sp, #52]	@ 0x34
 8027924:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027928:	2b00      	cmp	r3, #0
 802792a:	f000 80cc 	beq.w	8027ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 802792e:	9808      	ldr	r0, [sp, #32]
 8027930:	9c08      	ldr	r4, [sp, #32]
 8027932:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027936:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802793a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802793e:	f000 80d5 	beq.w	8027aec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8027942:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027946:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802794a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802794e:	fb09 f707 	mul.w	r7, r9, r7
 8027952:	fb0a fc0c 	mul.w	ip, sl, ip
 8027956:	f107 0b20 	add.w	fp, r7, #32
 802795a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802795e:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027962:	44cc      	add	ip, r9
 8027964:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027968:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802796c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027970:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027974:	ea4c 0909 	orr.w	r9, ip, r9
 8027978:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802797c:	8847      	ldrh	r7, [r0, #2]
 802797e:	d019      	beq.n	80279b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8027980:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027984:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027988:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802798c:	fb08 f807 	mul.w	r8, r8, r7
 8027990:	fb0a fc0c 	mul.w	ip, sl, ip
 8027994:	f108 0b20 	add.w	fp, r8, #32
 8027998:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802799c:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80279a0:	44bc      	add	ip, r7
 80279a2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80279a6:	0a3f      	lsrs	r7, r7, #8
 80279a8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80279ac:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80279b0:	ea4c 0707 	orr.w	r7, ip, r7
 80279b4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80279b8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80279bc:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80279c0:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80279c4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80279c8:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80279cc:	ea4c 0909 	orr.w	r9, ip, r9
 80279d0:	ea4a 0707 	orr.w	r7, sl, r7
 80279d4:	2d00      	cmp	r5, #0
 80279d6:	f000 808b 	beq.w	8027af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80279da:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80279de:	3901      	subs	r1, #1
 80279e0:	0049      	lsls	r1, r1, #1
 80279e2:	3102      	adds	r1, #2
 80279e4:	eb00 0c01 	add.w	ip, r0, r1
 80279e8:	5a41      	ldrh	r1, [r0, r1]
 80279ea:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80279ec:	28ff      	cmp	r0, #255	@ 0xff
 80279ee:	d019      	beq.n	8027a24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 80279f0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80279f2:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 80279f6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80279fa:	fb04 fa01 	mul.w	sl, r4, r1
 80279fe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027a02:	fb08 f800 	mul.w	r8, r8, r0
 8027a06:	f10a 0020 	add.w	r0, sl, #32
 8027a0a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027a0e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027a12:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027a16:	4441      	add	r1, r8
 8027a18:	0a00      	lsrs	r0, r0, #8
 8027a1a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027a1e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027a22:	4301      	orrs	r1, r0
 8027a24:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027a26:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027a2a:	2cff      	cmp	r4, #255	@ 0xff
 8027a2c:	d01a      	beq.n	8027a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8027a2e:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8027a32:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027a36:	fb04 fa00 	mul.w	sl, r4, r0
 8027a3a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027a3e:	fb08 f80c 	mul.w	r8, r8, ip
 8027a42:	f10a 0c20 	add.w	ip, sl, #32
 8027a46:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027a4a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027a4e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027a52:	4440      	add	r0, r8
 8027a54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a58:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027a5c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027a60:	ea40 000c 	orr.w	r0, r0, ip
 8027a64:	fb15 fc02 	smulbb	ip, r5, r2
 8027a68:	f1c5 0810 	rsb	r8, r5, #16
 8027a6c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027a70:	eba8 0802 	sub.w	r8, r8, r2
 8027a74:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027a78:	437a      	muls	r2, r7
 8027a7a:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027a7e:	fb09 2208 	mla	r2, r9, r8, r2
 8027a82:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027a86:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027a8a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027a8e:	ea4a 0101 	orr.w	r1, sl, r1
 8027a92:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027a96:	fb05 2201 	mla	r2, r5, r1, r2
 8027a9a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027a9e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027aa2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027aa6:	ea4b 0000 	orr.w	r0, fp, r0
 8027aaa:	fb0c 2200 	mla	r2, ip, r0, r2
 8027aae:	0d57      	lsrs	r7, r2, #21
 8027ab0:	0952      	lsrs	r2, r2, #5
 8027ab2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027ab6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027aba:	433a      	orrs	r2, r7
 8027abc:	2bff      	cmp	r3, #255	@ 0xff
 8027abe:	b292      	uxth	r2, r2
 8027ac0:	d127      	bne.n	8027b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8027ac2:	f8ae 2000 	strh.w	r2, [lr]
 8027ac6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027ac8:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8027aca:	f10e 0e02 	add.w	lr, lr, #2
 8027ace:	4413      	add	r3, r2
 8027ad0:	931d      	str	r3, [sp, #116]	@ 0x74
 8027ad2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8027ad4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027ad6:	441a      	add	r2, r3
 8027ad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027ada:	921e      	str	r2, [sp, #120]	@ 0x78
 8027adc:	3b01      	subs	r3, #1
 8027ade:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027ae0:	e627      	b.n	8027732 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8027ae2:	fb08 f000 	mul.w	r0, r8, r0
 8027ae6:	fb09 0303 	mla	r3, r9, r3, r0
 8027aea:	e71b      	b.n	8027924 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8027aec:	46b9      	mov	r9, r7
 8027aee:	e743      	b.n	8027978 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8027af0:	f1c2 0110 	rsb	r1, r2, #16
 8027af4:	437a      	muls	r2, r7
 8027af6:	fb09 2901 	mla	r9, r9, r1, r2
 8027afa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027afe:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027b02:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027b06:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027b0a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027b0e:	4302      	orrs	r2, r0
 8027b10:	e7d4      	b.n	8027abc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8027b12:	43db      	mvns	r3, r3
 8027b14:	f8be 7000 	ldrh.w	r7, [lr]
 8027b18:	fa5f fc83 	uxtb.w	ip, r3
 8027b1c:	1238      	asrs	r0, r7, #8
 8027b1e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027b22:	fb00 f00c 	mul.w	r0, r0, ip
 8027b26:	10fd      	asrs	r5, r7, #3
 8027b28:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8027b2c:	fb05 f10c 	mul.w	r1, r5, ip
 8027b30:	1c45      	adds	r5, r0, #1
 8027b32:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027b36:	1215      	asrs	r5, r2, #8
 8027b38:	f025 0507 	bic.w	r5, r5, #7
 8027b3c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027b40:	00fb      	lsls	r3, r7, #3
 8027b42:	1c4d      	adds	r5, r1, #1
 8027b44:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027b48:	b2db      	uxtb	r3, r3
 8027b4a:	10d1      	asrs	r1, r2, #3
 8027b4c:	fb03 f30c 	mul.w	r3, r3, ip
 8027b50:	f021 0103 	bic.w	r1, r1, #3
 8027b54:	4c0c      	ldr	r4, [pc, #48]	@ (8027b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8027b56:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027b5a:	b2c0      	uxtb	r0, r0
 8027b5c:	00c9      	lsls	r1, r1, #3
 8027b5e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027b62:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8027b66:	4308      	orrs	r0, r1
 8027b68:	1c59      	adds	r1, r3, #1
 8027b6a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027b6e:	00d2      	lsls	r2, r2, #3
 8027b70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027b74:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8027b78:	4318      	orrs	r0, r3
 8027b7a:	f8ae 0000 	strh.w	r0, [lr]
 8027b7e:	e7a2      	b.n	8027ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8027b80:	b013      	add	sp, #76	@ 0x4c
 8027b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b86:	bf00      	nop
 8027b88:	fffff800 	.word	0xfffff800

08027b8c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027b90:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8027b94:	fb05 4c03 	mla	ip, r5, r3, r4
 8027b98:	2d00      	cmp	r5, #0
 8027b9a:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8027b9e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8027ba2:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8027ba6:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8027baa:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027bae:	8808      	ldrh	r0, [r1, #0]
 8027bb0:	f2c0 80a7 	blt.w	8027d02 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027bb4:	45aa      	cmp	sl, r5
 8027bb6:	f340 80a4 	ble.w	8027d02 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027bba:	2c00      	cmp	r4, #0
 8027bbc:	f2c0 809f 	blt.w	8027cfe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027bc0:	42a3      	cmp	r3, r4
 8027bc2:	f340 809c 	ble.w	8027cfe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027bc6:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8027bca:	1c62      	adds	r2, r4, #1
 8027bcc:	f100 809c 	bmi.w	8027d08 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027bd0:	4293      	cmp	r3, r2
 8027bd2:	f340 8099 	ble.w	8027d08 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027bd6:	f1b9 0f00 	cmp.w	r9, #0
 8027bda:	f000 8095 	beq.w	8027d08 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027bde:	f8be c002 	ldrh.w	ip, [lr, #2]
 8027be2:	3501      	adds	r5, #1
 8027be4:	f100 8094 	bmi.w	8027d10 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027be8:	45aa      	cmp	sl, r5
 8027bea:	f340 8091 	ble.w	8027d10 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027bee:	2f00      	cmp	r7, #0
 8027bf0:	f000 808e 	beq.w	8027d10 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027bf4:	2c00      	cmp	r4, #0
 8027bf6:	f2c0 8089 	blt.w	8027d0c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027bfa:	42a3      	cmp	r3, r4
 8027bfc:	f340 8086 	ble.w	8027d0c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027c00:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8027c04:	3401      	adds	r4, #1
 8027c06:	f100 8086 	bmi.w	8027d16 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027c0a:	42a3      	cmp	r3, r4
 8027c0c:	f340 8083 	ble.w	8027d16 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027c10:	f1b9 0f00 	cmp.w	r9, #0
 8027c14:	d07f      	beq.n	8027d16 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027c16:	3301      	adds	r3, #1
 8027c18:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8027c1c:	fb19 fe07 	smulbb	lr, r9, r7
 8027c20:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8027c24:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027c28:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8027c2c:	ea44 0808 	orr.w	r8, r4, r8
 8027c30:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8027c34:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8027c38:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027c3c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8027c40:	ea44 0c0c 	orr.w	ip, r4, ip
 8027c44:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8027c48:	fb04 f40c 	mul.w	r4, r4, ip
 8027c4c:	f1c7 0210 	rsb	r2, r7, #16
 8027c50:	eba2 0209 	sub.w	r2, r2, r9
 8027c54:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8027c58:	fb02 4808 	mla	r8, r2, r8, r4
 8027c5c:	b2b4      	uxth	r4, r6
 8027c5e:	43f6      	mvns	r6, r6
 8027c60:	041a      	lsls	r2, r3, #16
 8027c62:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027c66:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027c6a:	4313      	orrs	r3, r2
 8027c6c:	fb0e 8303 	mla	r3, lr, r3, r8
 8027c70:	042a      	lsls	r2, r5, #16
 8027c72:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027c76:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027c7a:	432a      	orrs	r2, r5
 8027c7c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8027c80:	fb07 3202 	mla	r2, r7, r2, r3
 8027c84:	0d53      	lsrs	r3, r2, #21
 8027c86:	0952      	lsrs	r2, r2, #5
 8027c88:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027c8c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027c90:	431a      	orrs	r2, r3
 8027c92:	b293      	uxth	r3, r2
 8027c94:	1202      	asrs	r2, r0, #8
 8027c96:	b2f6      	uxtb	r6, r6
 8027c98:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027c9c:	fb12 f206 	smulbb	r2, r2, r6
 8027ca0:	10c7      	asrs	r7, r0, #3
 8027ca2:	00c0      	lsls	r0, r0, #3
 8027ca4:	b2c0      	uxtb	r0, r0
 8027ca6:	121d      	asrs	r5, r3, #8
 8027ca8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8027cac:	fb10 f006 	smulbb	r0, r0, r6
 8027cb0:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027cb4:	fb17 f706 	smulbb	r7, r7, r6
 8027cb8:	fb05 2504 	mla	r5, r5, r4, r2
 8027cbc:	10da      	asrs	r2, r3, #3
 8027cbe:	00db      	lsls	r3, r3, #3
 8027cc0:	b2db      	uxtb	r3, r3
 8027cc2:	fb03 0004 	mla	r0, r3, r4, r0
 8027cc6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8027cca:	fb02 7204 	mla	r2, r2, r4, r7
 8027cce:	b2ad      	uxth	r5, r5
 8027cd0:	b280      	uxth	r0, r0
 8027cd2:	1c6b      	adds	r3, r5, #1
 8027cd4:	b292      	uxth	r2, r2
 8027cd6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027cda:	1c43      	adds	r3, r0, #1
 8027cdc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027ce0:	1c50      	adds	r0, r2, #1
 8027ce2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8027ce6:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027cea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027cee:	0952      	lsrs	r2, r2, #5
 8027cf0:	432b      	orrs	r3, r5
 8027cf2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027cf6:	4313      	orrs	r3, r2
 8027cf8:	800b      	strh	r3, [r1, #0]
 8027cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027cfe:	4680      	mov	r8, r0
 8027d00:	e763      	b.n	8027bca <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8027d02:	4684      	mov	ip, r0
 8027d04:	4680      	mov	r8, r0
 8027d06:	e76c      	b.n	8027be2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8027d08:	4684      	mov	ip, r0
 8027d0a:	e76a      	b.n	8027be2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8027d0c:	4605      	mov	r5, r0
 8027d0e:	e779      	b.n	8027c04 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8027d10:	4603      	mov	r3, r0
 8027d12:	4605      	mov	r5, r0
 8027d14:	e782      	b.n	8027c1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8027d16:	4603      	mov	r3, r0
 8027d18:	e780      	b.n	8027c1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08027d1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027d1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d1e:	b093      	sub	sp, #76	@ 0x4c
 8027d20:	461d      	mov	r5, r3
 8027d22:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8027d26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027d28:	910a      	str	r1, [sp, #40]	@ 0x28
 8027d2a:	9210      	str	r2, [sp, #64]	@ 0x40
 8027d2c:	6859      	ldr	r1, [r3, #4]
 8027d2e:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8027d32:	681b      	ldr	r3, [r3, #0]
 8027d34:	920b      	str	r2, [sp, #44]	@ 0x2c
 8027d36:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8027d3a:	fb01 2707 	mla	r7, r1, r7, r2
 8027d3e:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8027d42:	9307      	str	r3, [sp, #28]
 8027d44:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027d46:	9011      	str	r0, [sp, #68]	@ 0x44
 8027d48:	681b      	ldr	r3, [r3, #0]
 8027d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8027d4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027d4e:	43db      	mvns	r3, r3
 8027d50:	b2db      	uxtb	r3, r3
 8027d52:	9308      	str	r3, [sp, #32]
 8027d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027d56:	2b00      	cmp	r3, #0
 8027d58:	dc03      	bgt.n	8027d62 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027d5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027d5c:	2b00      	cmp	r3, #0
 8027d5e:	f340 8203 	ble.w	8028168 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8027d62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027d64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027d68:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027d6c:	1e48      	subs	r0, r1, #1
 8027d6e:	f102 3cff 	add.w	ip, r2, #4294967295
 8027d72:	2d00      	cmp	r5, #0
 8027d74:	f340 80da 	ble.w	8027f2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027d78:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027d7c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027d80:	d406      	bmi.n	8027d90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027d82:	4586      	cmp	lr, r0
 8027d84:	da04      	bge.n	8027d90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027d86:	2b00      	cmp	r3, #0
 8027d88:	db02      	blt.n	8027d90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027d8a:	4563      	cmp	r3, ip
 8027d8c:	f2c0 80cf 	blt.w	8027f2e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8027d90:	f11e 0e01 	adds.w	lr, lr, #1
 8027d94:	f100 80c1 	bmi.w	8027f1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027d98:	4571      	cmp	r1, lr
 8027d9a:	f2c0 80be 	blt.w	8027f1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027d9e:	3301      	adds	r3, #1
 8027da0:	f100 80bb 	bmi.w	8027f1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027da4:	429a      	cmp	r2, r3
 8027da6:	f2c0 80b8 	blt.w	8027f1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027daa:	46a9      	mov	r9, r5
 8027dac:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027db0:	f1b9 0f00 	cmp.w	r9, #0
 8027db4:	f340 80d8 	ble.w	8027f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8027db8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027dba:	1421      	asrs	r1, r4, #16
 8027dbc:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027dc0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027dc4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027dc8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027dcc:	f100 8111 	bmi.w	8027ff2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027dd0:	f10e 3aff 	add.w	sl, lr, #4294967295
 8027dd4:	4551      	cmp	r1, sl
 8027dd6:	f280 810c 	bge.w	8027ff2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027dda:	2800      	cmp	r0, #0
 8027ddc:	f2c0 8109 	blt.w	8027ff2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027de0:	f103 3aff 	add.w	sl, r3, #4294967295
 8027de4:	4550      	cmp	r0, sl
 8027de6:	f280 8104 	bge.w	8027ff2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027dea:	fa0f f38e 	sxth.w	r3, lr
 8027dee:	fb00 1103 	mla	r1, r0, r3, r1
 8027df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027df4:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8027df8:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8027dfc:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8027e00:	f1bc 0f00 	cmp.w	ip, #0
 8027e04:	d007      	beq.n	8027e16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8027e06:	005b      	lsls	r3, r3, #1
 8027e08:	eb0a 0003 	add.w	r0, sl, r3
 8027e0c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8027e10:	930c      	str	r3, [sp, #48]	@ 0x30
 8027e12:	8843      	ldrh	r3, [r0, #2]
 8027e14:	930d      	str	r3, [sp, #52]	@ 0x34
 8027e16:	fb12 f30c 	smulbb	r3, r2, ip
 8027e1a:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8027e1e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027e22:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027e26:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027e2a:	10db      	asrs	r3, r3, #3
 8027e2c:	ea40 000e 	orr.w	r0, r0, lr
 8027e30:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027e34:	f1cc 0e10 	rsb	lr, ip, #16
 8027e38:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027e3c:	ebae 0e02 	sub.w	lr, lr, r2
 8027e40:	ea4a 0101 	orr.w	r1, sl, r1
 8027e44:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027e48:	4351      	muls	r1, r2
 8027e4a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027e4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027e50:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027e54:	0410      	lsls	r0, r2, #16
 8027e56:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027e5a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027e5e:	4310      	orrs	r0, r2
 8027e60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8027e62:	fb03 e000 	mla	r0, r3, r0, lr
 8027e66:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027e68:	0412      	lsls	r2, r2, #16
 8027e6a:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8027e6e:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027e72:	ea42 020e 	orr.w	r2, r2, lr
 8027e76:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027e7a:	fb03 0302 	mla	r3, r3, r2, r0
 8027e7e:	f8b8 0000 	ldrh.w	r0, [r8]
 8027e82:	9f08      	ldr	r7, [sp, #32]
 8027e84:	0d5a      	lsrs	r2, r3, #21
 8027e86:	1201      	asrs	r1, r0, #8
 8027e88:	095b      	lsrs	r3, r3, #5
 8027e8a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027e8e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027e92:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8027e96:	4313      	orrs	r3, r2
 8027e98:	fb11 f107 	smulbb	r1, r1, r7
 8027e9c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027ea0:	00c0      	lsls	r0, r0, #3
 8027ea2:	b29b      	uxth	r3, r3
 8027ea4:	b2c0      	uxtb	r0, r0
 8027ea6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8027eaa:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027eae:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8027eb2:	fb10 f007 	smulbb	r0, r0, r7
 8027eb6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8027eba:	fb1e fe07 	smulbb	lr, lr, r7
 8027ebe:	fb0c 1c02 	mla	ip, ip, r2, r1
 8027ec2:	10d9      	asrs	r1, r3, #3
 8027ec4:	00db      	lsls	r3, r3, #3
 8027ec6:	b2db      	uxtb	r3, r3
 8027ec8:	fb03 0302 	mla	r3, r3, r2, r0
 8027ecc:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027ed0:	fb01 e102 	mla	r1, r1, r2, lr
 8027ed4:	fa1f fc8c 	uxth.w	ip, ip
 8027ed8:	b29a      	uxth	r2, r3
 8027eda:	f10c 0301 	add.w	r3, ip, #1
 8027ede:	b289      	uxth	r1, r1
 8027ee0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027ee4:	1c53      	adds	r3, r2, #1
 8027ee6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027eea:	1c4a      	adds	r2, r1, #1
 8027eec:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027ef0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8027ef4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027ef8:	0949      	lsrs	r1, r1, #5
 8027efa:	ea43 030c 	orr.w	r3, r3, ip
 8027efe:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027f02:	430b      	orrs	r3, r1
 8027f04:	f8a8 3000 	strh.w	r3, [r8]
 8027f08:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027f0a:	f108 0802 	add.w	r8, r8, #2
 8027f0e:	441c      	add	r4, r3
 8027f10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f12:	f109 39ff 	add.w	r9, r9, #4294967295
 8027f16:	441e      	add	r6, r3
 8027f18:	e74a      	b.n	8027db0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027f1a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027f1c:	3d01      	subs	r5, #1
 8027f1e:	441c      	add	r4, r3
 8027f20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f22:	441e      	add	r6, r3
 8027f24:	9b07      	ldr	r3, [sp, #28]
 8027f26:	3302      	adds	r3, #2
 8027f28:	9307      	str	r3, [sp, #28]
 8027f2a:	e722      	b.n	8027d72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8027f2c:	d022      	beq.n	8027f74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8027f2e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8027f30:	1e6b      	subs	r3, r5, #1
 8027f32:	fb00 4003 	mla	r0, r0, r3, r4
 8027f36:	1400      	asrs	r0, r0, #16
 8027f38:	f53f af37 	bmi.w	8027daa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027f3c:	3901      	subs	r1, #1
 8027f3e:	4288      	cmp	r0, r1
 8027f40:	f6bf af33 	bge.w	8027daa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027f44:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8027f46:	fb01 6303 	mla	r3, r1, r3, r6
 8027f4a:	141b      	asrs	r3, r3, #16
 8027f4c:	f53f af2d 	bmi.w	8027daa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027f50:	3a01      	subs	r2, #1
 8027f52:	4293      	cmp	r3, r2
 8027f54:	f6bf af29 	bge.w	8027daa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027f58:	46a8      	mov	r8, r5
 8027f5a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8027f5e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8027f62:	f1b8 0f00 	cmp.w	r8, #0
 8027f66:	dc5e      	bgt.n	8028026 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027f68:	9b07      	ldr	r3, [sp, #28]
 8027f6a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027f6e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027f72:	9307      	str	r3, [sp, #28]
 8027f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027f76:	2b00      	cmp	r3, #0
 8027f78:	f340 80f6 	ble.w	8028168 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8027f7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027f80:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027f84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027f88:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027f8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027f90:	eef0 6a62 	vmov.f32	s13, s5
 8027f94:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027f98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027f9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027fa0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027fa4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027fa8:	ee16 4a90 	vmov	r4, s13
 8027fac:	eef0 6a43 	vmov.f32	s13, s6
 8027fb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027fb4:	ee12 2a90 	vmov	r2, s5
 8027fb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027fbc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027fbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027fc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8027fc6:	ee13 2a10 	vmov	r2, s6
 8027fca:	931f      	str	r3, [sp, #124]	@ 0x7c
 8027fcc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027fce:	ee16 6a90 	vmov	r6, s13
 8027fd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8027fd6:	9320      	str	r3, [sp, #128]	@ 0x80
 8027fd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027fda:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027fdc:	3b01      	subs	r3, #1
 8027fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8027fe0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027fe2:	bf0c      	ite	eq
 8027fe4:	4615      	moveq	r5, r2
 8027fe6:	461d      	movne	r5, r3
 8027fe8:	eeb0 3a67 	vmov.f32	s6, s15
 8027fec:	eef0 2a47 	vmov.f32	s5, s14
 8027ff0:	e6b0      	b.n	8027d54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027ff2:	f111 0a01 	adds.w	sl, r1, #1
 8027ff6:	d487      	bmi.n	8027f08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027ff8:	45d6      	cmp	lr, sl
 8027ffa:	db85      	blt.n	8027f08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027ffc:	f110 0a01 	adds.w	sl, r0, #1
 8028000:	d482      	bmi.n	8027f08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028002:	4553      	cmp	r3, sl
 8028004:	db80      	blt.n	8027f08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028006:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8028008:	b21b      	sxth	r3, r3
 802800a:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802800e:	9101      	str	r1, [sp, #4]
 8028010:	9300      	str	r3, [sp, #0]
 8028012:	e9cd c704 	strd	ip, r7, [sp, #16]
 8028016:	fa0f f38e 	sxth.w	r3, lr
 802801a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802801c:	4641      	mov	r1, r8
 802801e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028020:	f7ff fdb4 	bl	8027b8c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8028024:	e770      	b.n	8027f08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028026:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028028:	1430      	asrs	r0, r6, #16
 802802a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802802e:	1423      	asrs	r3, r4, #16
 8028030:	fb01 3000 	mla	r0, r1, r0, r3
 8028034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028036:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8028038:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802803c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028040:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8028044:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028048:	8858      	ldrh	r0, [r3, #2]
 802804a:	f1be 0f00 	cmp.w	lr, #0
 802804e:	d00b      	beq.n	8028068 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028050:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8028054:	3901      	subs	r1, #1
 8028056:	0049      	lsls	r1, r1, #1
 8028058:	3102      	adds	r1, #2
 802805a:	eb03 0b01 	add.w	fp, r3, r1
 802805e:	5a5b      	ldrh	r3, [r3, r1]
 8028060:	930e      	str	r3, [sp, #56]	@ 0x38
 8028062:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028066:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028068:	fb12 f30e 	smulbb	r3, r2, lr
 802806c:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8028070:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028074:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028078:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 802807c:	10db      	asrs	r3, r3, #3
 802807e:	ea41 010c 	orr.w	r1, r1, ip
 8028082:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028086:	f1ce 0c10 	rsb	ip, lr, #16
 802808a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802808e:	ebac 0c02 	sub.w	ip, ip, r2
 8028092:	ea4b 0000 	orr.w	r0, fp, r0
 8028096:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802809a:	4350      	muls	r0, r2
 802809c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80280a0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80280a2:	fb0c 0c01 	mla	ip, ip, r1, r0
 80280a6:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80280aa:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80280ae:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 80280b2:	ea4b 0101 	orr.w	r1, fp, r1
 80280b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80280b8:	fb03 c101 	mla	r1, r3, r1, ip
 80280bc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80280be:	0412      	lsls	r2, r2, #16
 80280c0:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80280c4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80280c8:	4302      	orrs	r2, r0
 80280ca:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80280ce:	fb03 1202 	mla	r2, r3, r2, r1
 80280d2:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80280d6:	0952      	lsrs	r2, r2, #5
 80280d8:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 80280dc:	f8b9 2000 	ldrh.w	r2, [r9]
 80280e0:	9f08      	ldr	r7, [sp, #32]
 80280e2:	1211      	asrs	r1, r2, #8
 80280e4:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80280e8:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80280ec:	fb11 f107 	smulbb	r1, r1, r7
 80280f0:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80280f4:	ea4b 0303 	orr.w	r3, fp, r3
 80280f8:	00d2      	lsls	r2, r2, #3
 80280fa:	b29b      	uxth	r3, r3
 80280fc:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8028100:	b2d2      	uxtb	r2, r2
 8028102:	1218      	asrs	r0, r3, #8
 8028104:	fb1c fc07 	smulbb	ip, ip, r7
 8028108:	fb12 f207 	smulbb	r2, r2, r7
 802810c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028110:	fb00 100a 	mla	r0, r0, sl, r1
 8028114:	10d9      	asrs	r1, r3, #3
 8028116:	00db      	lsls	r3, r3, #3
 8028118:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802811c:	b2db      	uxtb	r3, r3
 802811e:	fb01 c10a 	mla	r1, r1, sl, ip
 8028122:	fb03 230a 	mla	r3, r3, sl, r2
 8028126:	b280      	uxth	r0, r0
 8028128:	b29b      	uxth	r3, r3
 802812a:	b289      	uxth	r1, r1
 802812c:	1c42      	adds	r2, r0, #1
 802812e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028132:	f101 0c01 	add.w	ip, r1, #1
 8028136:	1c5a      	adds	r2, r3, #1
 8028138:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802813c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028140:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028142:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8028146:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802814a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802814e:	4310      	orrs	r0, r2
 8028150:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028154:	441c      	add	r4, r3
 8028156:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028158:	ea40 000c 	orr.w	r0, r0, ip
 802815c:	f829 0b02 	strh.w	r0, [r9], #2
 8028160:	441e      	add	r6, r3
 8028162:	f108 38ff 	add.w	r8, r8, #4294967295
 8028166:	e6fc      	b.n	8027f62 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8028168:	b013      	add	sp, #76	@ 0x4c
 802816a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802816e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802816e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028172:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8028176:	fb0e 4703 	mla	r7, lr, r3, r4
 802817a:	f1be 0f00 	cmp.w	lr, #0
 802817e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8028182:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8028186:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 802818a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802818e:	8808      	ldrh	r0, [r1, #0]
 8028190:	db60      	blt.n	8028254 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8028192:	45f1      	cmp	r9, lr
 8028194:	dd5e      	ble.n	8028254 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8028196:	2c00      	cmp	r4, #0
 8028198:	db5a      	blt.n	8028250 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802819a:	42a3      	cmp	r3, r4
 802819c:	dd58      	ble.n	8028250 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802819e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80281a2:	1c62      	adds	r2, r4, #1
 80281a4:	d459      	bmi.n	802825a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80281a6:	4293      	cmp	r3, r2
 80281a8:	dd57      	ble.n	802825a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80281aa:	2d00      	cmp	r5, #0
 80281ac:	d055      	beq.n	802825a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80281ae:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 80281b2:	f11e 0e01 	adds.w	lr, lr, #1
 80281b6:	d454      	bmi.n	8028262 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80281b8:	45f1      	cmp	r9, lr
 80281ba:	dd52      	ble.n	8028262 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80281bc:	2e00      	cmp	r6, #0
 80281be:	d050      	beq.n	8028262 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80281c0:	2c00      	cmp	r4, #0
 80281c2:	db4c      	blt.n	802825e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80281c4:	42a3      	cmp	r3, r4
 80281c6:	dd4a      	ble.n	802825e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80281c8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80281cc:	3401      	adds	r4, #1
 80281ce:	d405      	bmi.n	80281dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80281d0:	42a3      	cmp	r3, r4
 80281d2:	dd03      	ble.n	80281dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80281d4:	b115      	cbz	r5, 80281dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80281d6:	3301      	adds	r3, #1
 80281d8:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 80281dc:	fb15 f406 	smulbb	r4, r5, r6
 80281e0:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80281e4:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80281e8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80281ec:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80281f0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80281f4:	ea43 0c0c 	orr.w	ip, r3, ip
 80281f8:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80281fc:	f1c6 0310 	rsb	r3, r6, #16
 8028200:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8028204:	1b5b      	subs	r3, r3, r5
 8028206:	ea4e 0707 	orr.w	r7, lr, r7
 802820a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802820e:	437d      	muls	r5, r7
 8028210:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8028214:	fb03 5c0c 	mla	ip, r3, ip, r5
 8028218:	0403      	lsls	r3, r0, #16
 802821a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802821e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028222:	4318      	orrs	r0, r3
 8028224:	fb04 c000 	mla	r0, r4, r0, ip
 8028228:	0413      	lsls	r3, r2, #16
 802822a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802822e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028232:	4313      	orrs	r3, r2
 8028234:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8028238:	fb06 0003 	mla	r0, r6, r3, r0
 802823c:	0d43      	lsrs	r3, r0, #21
 802823e:	0940      	lsrs	r0, r0, #5
 8028240:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028244:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028248:	4318      	orrs	r0, r3
 802824a:	8008      	strh	r0, [r1, #0]
 802824c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028250:	4684      	mov	ip, r0
 8028252:	e7a6      	b.n	80281a2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8028254:	4607      	mov	r7, r0
 8028256:	4684      	mov	ip, r0
 8028258:	e7ab      	b.n	80281b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802825a:	4607      	mov	r7, r0
 802825c:	e7a9      	b.n	80281b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802825e:	4602      	mov	r2, r0
 8028260:	e7b4      	b.n	80281cc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8028262:	4602      	mov	r2, r0
 8028264:	e7ba      	b.n	80281dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08028266 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028266:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802826a:	b08f      	sub	sp, #60	@ 0x3c
 802826c:	461d      	mov	r5, r3
 802826e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 8028272:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028274:	9107      	str	r1, [sp, #28]
 8028276:	6859      	ldr	r1, [r3, #4]
 8028278:	920c      	str	r2, [sp, #48]	@ 0x30
 802827a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 802827e:	fb01 2707 	mla	r7, r1, r7, r2
 8028282:	681b      	ldr	r3, [r3, #0]
 8028284:	900d      	str	r0, [sp, #52]	@ 0x34
 8028286:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802828a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802828c:	f8d3 8000 	ldr.w	r8, [r3]
 8028290:	9b07      	ldr	r3, [sp, #28]
 8028292:	2b00      	cmp	r3, #0
 8028294:	dc03      	bgt.n	802829e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028296:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028298:	2b00      	cmp	r3, #0
 802829a:	f340 8181 	ble.w	80285a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802829e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80282a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80282a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80282a8:	1e48      	subs	r0, r1, #1
 80282aa:	f102 3cff 	add.w	ip, r2, #4294967295
 80282ae:	2d00      	cmp	r5, #0
 80282b0:	f340 809b 	ble.w	80283ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 80282b4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80282b8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80282bc:	d406      	bmi.n	80282cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80282be:	4586      	cmp	lr, r0
 80282c0:	da04      	bge.n	80282cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80282c2:	2b00      	cmp	r3, #0
 80282c4:	db02      	blt.n	80282cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80282c6:	4563      	cmp	r3, ip
 80282c8:	f2c0 8090 	blt.w	80283ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80282cc:	f11e 0e01 	adds.w	lr, lr, #1
 80282d0:	f100 8084 	bmi.w	80283dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80282d4:	4571      	cmp	r1, lr
 80282d6:	f2c0 8081 	blt.w	80283dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80282da:	3301      	adds	r3, #1
 80282dc:	d47e      	bmi.n	80283dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80282de:	429a      	cmp	r2, r3
 80282e0:	db7c      	blt.n	80283dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80282e2:	46aa      	mov	sl, r5
 80282e4:	46b9      	mov	r9, r7
 80282e6:	f1ba 0f00 	cmp.w	sl, #0
 80282ea:	f340 8099 	ble.w	8028420 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80282ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80282f0:	1421      	asrs	r1, r4, #16
 80282f2:	ea4f 4026 	mov.w	r0, r6, asr #16
 80282f6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80282fa:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80282fe:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028302:	f100 80d0 	bmi.w	80284a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8028306:	f10e 3bff 	add.w	fp, lr, #4294967295
 802830a:	4559      	cmp	r1, fp
 802830c:	f280 80cb 	bge.w	80284a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8028310:	2800      	cmp	r0, #0
 8028312:	f2c0 80c8 	blt.w	80284a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8028316:	f103 3bff 	add.w	fp, r3, #4294967295
 802831a:	4558      	cmp	r0, fp
 802831c:	f280 80c3 	bge.w	80284a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8028320:	fa0f fe8e 	sxth.w	lr, lr
 8028324:	fb00 110e 	mla	r1, r0, lr, r1
 8028328:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802832c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8028330:	8841      	ldrh	r1, [r0, #2]
 8028332:	f1bc 0f00 	cmp.w	ip, #0
 8028336:	d00b      	beq.n	8028350 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8028338:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 802833c:	3b01      	subs	r3, #1
 802833e:	005b      	lsls	r3, r3, #1
 8028340:	3302      	adds	r3, #2
 8028342:	eb00 0e03 	add.w	lr, r0, r3
 8028346:	5ac3      	ldrh	r3, [r0, r3]
 8028348:	9308      	str	r3, [sp, #32]
 802834a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802834e:	9309      	str	r3, [sp, #36]	@ 0x24
 8028350:	fb12 f30c 	smulbb	r3, r2, ip
 8028354:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8028358:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802835c:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8028360:	ea40 000b 	orr.w	r0, r0, fp
 8028364:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028368:	10db      	asrs	r3, r3, #3
 802836a:	f1cc 0e10 	rsb	lr, ip, #16
 802836e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028372:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8028376:	ebae 0e02 	sub.w	lr, lr, r2
 802837a:	ea4b 0101 	orr.w	r1, fp, r1
 802837e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028382:	4351      	muls	r1, r2
 8028384:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802838a:	fb0e 1e00 	mla	lr, lr, r0, r1
 802838e:	0410      	lsls	r0, r2, #16
 8028390:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028394:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028398:	4310      	orrs	r0, r2
 802839a:	9a08      	ldr	r2, [sp, #32]
 802839c:	fb03 e000 	mla	r0, r3, r0, lr
 80283a0:	9908      	ldr	r1, [sp, #32]
 80283a2:	0412      	lsls	r2, r2, #16
 80283a4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80283a8:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80283ac:	ea42 020e 	orr.w	r2, r2, lr
 80283b0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80283b4:	fb03 0302 	mla	r3, r3, r2, r0
 80283b8:	0d5a      	lsrs	r2, r3, #21
 80283ba:	095b      	lsrs	r3, r3, #5
 80283bc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80283c0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80283c4:	4313      	orrs	r3, r2
 80283c6:	f8a9 3000 	strh.w	r3, [r9]
 80283ca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80283cc:	f109 0902 	add.w	r9, r9, #2
 80283d0:	441c      	add	r4, r3
 80283d2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80283d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80283d8:	441e      	add	r6, r3
 80283da:	e784      	b.n	80282e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80283dc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80283de:	3d01      	subs	r5, #1
 80283e0:	441c      	add	r4, r3
 80283e2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80283e4:	3702      	adds	r7, #2
 80283e6:	441e      	add	r6, r3
 80283e8:	e761      	b.n	80282ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80283ea:	d01d      	beq.n	8028428 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80283ec:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80283ee:	1e6b      	subs	r3, r5, #1
 80283f0:	fb00 4003 	mla	r0, r0, r3, r4
 80283f4:	1400      	asrs	r0, r0, #16
 80283f6:	f53f af74 	bmi.w	80282e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80283fa:	3901      	subs	r1, #1
 80283fc:	4288      	cmp	r0, r1
 80283fe:	f6bf af70 	bge.w	80282e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028402:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8028404:	fb01 6303 	mla	r3, r1, r3, r6
 8028408:	141b      	asrs	r3, r3, #16
 802840a:	f53f af6a 	bmi.w	80282e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802840e:	3a01      	subs	r2, #1
 8028410:	4293      	cmp	r3, r2
 8028412:	f6bf af66 	bge.w	80282e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028416:	46a9      	mov	r9, r5
 8028418:	46ba      	mov	sl, r7
 802841a:	f1b9 0f00 	cmp.w	r9, #0
 802841e:	dc5a      	bgt.n	80284d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8028420:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028424:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8028428:	9b07      	ldr	r3, [sp, #28]
 802842a:	2b00      	cmp	r3, #0
 802842c:	f340 80b8 	ble.w	80285a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8028430:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028434:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028438:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802843c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028440:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028444:	eef0 6a62 	vmov.f32	s13, s5
 8028448:	ee31 1a05 	vadd.f32	s2, s2, s10
 802844c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028450:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028454:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028458:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802845c:	ee16 4a90 	vmov	r4, s13
 8028460:	eef0 6a43 	vmov.f32	s13, s6
 8028464:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028468:	ee12 2a90 	vmov	r2, s5
 802846c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028470:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028472:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028476:	fb92 f3f3 	sdiv	r3, r2, r3
 802847a:	ee13 2a10 	vmov	r2, s6
 802847e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8028480:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028482:	ee16 6a90 	vmov	r6, s13
 8028486:	fb92 f3f3 	sdiv	r3, r2, r3
 802848a:	931c      	str	r3, [sp, #112]	@ 0x70
 802848c:	9b07      	ldr	r3, [sp, #28]
 802848e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028490:	3b01      	subs	r3, #1
 8028492:	9307      	str	r3, [sp, #28]
 8028494:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028496:	bf0c      	ite	eq
 8028498:	4615      	moveq	r5, r2
 802849a:	461d      	movne	r5, r3
 802849c:	eeb0 3a67 	vmov.f32	s6, s15
 80284a0:	eef0 2a47 	vmov.f32	s5, s14
 80284a4:	e6f4      	b.n	8028290 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80284a6:	f111 0b01 	adds.w	fp, r1, #1
 80284aa:	d48e      	bmi.n	80283ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80284ac:	45de      	cmp	lr, fp
 80284ae:	db8c      	blt.n	80283ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80284b0:	f110 0b01 	adds.w	fp, r0, #1
 80284b4:	d489      	bmi.n	80283ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80284b6:	455b      	cmp	r3, fp
 80284b8:	db87      	blt.n	80283ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80284ba:	b21b      	sxth	r3, r3
 80284bc:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80284c0:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80284c4:	9300      	str	r3, [sp, #0]
 80284c6:	4642      	mov	r2, r8
 80284c8:	fa0f f38e 	sxth.w	r3, lr
 80284cc:	4649      	mov	r1, r9
 80284ce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80284d0:	f7ff fe4d 	bl	802816e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80284d4:	e779      	b.n	80283ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80284d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80284d8:	1420      	asrs	r0, r4, #16
 80284da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80284de:	1431      	asrs	r1, r6, #16
 80284e0:	fb03 0101 	mla	r1, r3, r1, r0
 80284e4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80284e8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80284ec:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80284f0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80284f4:	8841      	ldrh	r1, [r0, #2]
 80284f6:	f1be 0f00 	cmp.w	lr, #0
 80284fa:	d00b      	beq.n	8028514 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80284fc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8028500:	3b01      	subs	r3, #1
 8028502:	005b      	lsls	r3, r3, #1
 8028504:	3302      	adds	r3, #2
 8028506:	eb00 0b03 	add.w	fp, r0, r3
 802850a:	5ac3      	ldrh	r3, [r0, r3]
 802850c:	930a      	str	r3, [sp, #40]	@ 0x28
 802850e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028512:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028514:	fb12 f30e 	smulbb	r3, r2, lr
 8028518:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802851c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028520:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028524:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028528:	10db      	asrs	r3, r3, #3
 802852a:	ea40 000c 	orr.w	r0, r0, ip
 802852e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028532:	f1ce 0c10 	rsb	ip, lr, #16
 8028536:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802853a:	ebac 0c02 	sub.w	ip, ip, r2
 802853e:	ea4b 0101 	orr.w	r1, fp, r1
 8028542:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028546:	4351      	muls	r1, r2
 8028548:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802854c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802854e:	fb0c 1c00 	mla	ip, ip, r0, r1
 8028552:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028556:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802855a:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 802855e:	ea4b 0000 	orr.w	r0, fp, r0
 8028562:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028564:	fb03 c000 	mla	r0, r3, r0, ip
 8028568:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802856a:	0412      	lsls	r2, r2, #16
 802856c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028570:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8028574:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028578:	ea42 0b0b 	orr.w	fp, r2, fp
 802857c:	fb03 000b 	mla	r0, r3, fp, r0
 8028580:	0d43      	lsrs	r3, r0, #21
 8028582:	0940      	lsrs	r0, r0, #5
 8028584:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028588:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802858c:	4318      	orrs	r0, r3
 802858e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8028590:	f82a 0b02 	strh.w	r0, [sl], #2
 8028594:	441c      	add	r4, r3
 8028596:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028598:	f109 39ff 	add.w	r9, r9, #4294967295
 802859c:	441e      	add	r6, r3
 802859e:	e73c      	b.n	802841a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80285a0:	b00f      	add	sp, #60	@ 0x3c
 80285a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080285a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80285a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285aa:	b085      	sub	sp, #20
 80285ac:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 80285b0:	9102      	str	r1, [sp, #8]
 80285b2:	fb04 7103 	mla	r1, r4, r3, r7
 80285b6:	2c00      	cmp	r4, #0
 80285b8:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 80285bc:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 80285c0:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 80285c4:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80285c8:	f2c0 811b 	blt.w	8028802 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80285cc:	45a6      	cmp	lr, r4
 80285ce:	f340 8118 	ble.w	8028802 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80285d2:	2f00      	cmp	r7, #0
 80285d4:	f2c0 8113 	blt.w	80287fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80285d8:	42bb      	cmp	r3, r7
 80285da:	f340 8110 	ble.w	80287fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80285de:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80285e2:	1c7a      	adds	r2, r7, #1
 80285e4:	f100 8110 	bmi.w	8028808 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80285e8:	4293      	cmp	r3, r2
 80285ea:	f340 810d 	ble.w	8028808 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80285ee:	2e00      	cmp	r6, #0
 80285f0:	f000 810c 	beq.w	802880c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80285f4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80285f8:	3401      	adds	r4, #1
 80285fa:	f100 810b 	bmi.w	8028814 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80285fe:	45a6      	cmp	lr, r4
 8028600:	f340 8108 	ble.w	8028814 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8028604:	2800      	cmp	r0, #0
 8028606:	f000 8108 	beq.w	802881a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 802860a:	2f00      	cmp	r7, #0
 802860c:	f2c0 8100 	blt.w	8028810 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8028610:	42bb      	cmp	r3, r7
 8028612:	f340 80fd 	ble.w	8028810 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8028616:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802861a:	3701      	adds	r7, #1
 802861c:	f100 8100 	bmi.w	8028820 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8028620:	42bb      	cmp	r3, r7
 8028622:	f340 80fd 	ble.w	8028820 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8028626:	2e00      	cmp	r6, #0
 8028628:	f000 80fc 	beq.w	8028824 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 802862c:	3301      	adds	r3, #1
 802862e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8028632:	b2b6      	uxth	r6, r6
 8028634:	b280      	uxth	r0, r0
 8028636:	fb00 fe06 	mul.w	lr, r0, r6
 802863a:	0136      	lsls	r6, r6, #4
 802863c:	eba6 070e 	sub.w	r7, r6, lr
 8028640:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8028644:	b2bf      	uxth	r7, r7
 8028646:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802864a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802864e:	fb0a f607 	mul.w	r6, sl, r7
 8028652:	b280      	uxth	r0, r0
 8028654:	1a1b      	subs	r3, r3, r0
 8028656:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802865a:	b29b      	uxth	r3, r3
 802865c:	fb0b 6603 	mla	r6, fp, r3, r6
 8028660:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028664:	fb00 6609 	mla	r6, r0, r9, r6
 8028668:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802866c:	fb0e 6608 	mla	r6, lr, r8, r6
 8028670:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028674:	9600      	str	r6, [sp, #0]
 8028676:	2e00      	cmp	r6, #0
 8028678:	f000 80be 	beq.w	80287f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802867c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028680:	fb0b fc0c 	mul.w	ip, fp, ip
 8028684:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8028688:	fb0b f505 	mul.w	r5, fp, r5
 802868c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8028690:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8028694:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028698:	44dc      	add	ip, fp
 802869a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802869e:	9501      	str	r5, [sp, #4]
 80286a0:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80286a4:	9503      	str	r5, [sp, #12]
 80286a6:	9d01      	ldr	r5, [sp, #4]
 80286a8:	9e02      	ldr	r6, [sp, #8]
 80286aa:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80286ae:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80286b2:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80286b6:	fb0a fc0c 	mul.w	ip, sl, ip
 80286ba:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80286be:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80286c2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80286c6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80286ca:	4465      	add	r5, ip
 80286cc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80286d0:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80286d4:	fb09 fc0c 	mul.w	ip, r9, ip
 80286d8:	fb09 f904 	mul.w	r9, r9, r4
 80286dc:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80286e0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80286e4:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80286e8:	fb08 f404 	mul.w	r4, r8, r4
 80286ec:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80286f0:	fb08 f802 	mul.w	r8, r8, r2
 80286f4:	0a2d      	lsrs	r5, r5, #8
 80286f6:	0a22      	lsrs	r2, r4, #8
 80286f8:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80286fc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028700:	437d      	muls	r5, r7
 8028702:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8028706:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802870a:	4414      	add	r4, r2
 802870c:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8028710:	fb0a fa01 	mul.w	sl, sl, r1
 8028714:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8028718:	9a03      	ldr	r2, [sp, #12]
 802871a:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802871e:	fb02 5503 	mla	r5, r2, r3, r5
 8028722:	0a24      	lsrs	r4, r4, #8
 8028724:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8028728:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802872c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8028730:	fb04 540e 	mla	r4, r4, lr, r5
 8028734:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8028738:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802873c:	4461      	add	r1, ip
 802873e:	0a09      	lsrs	r1, r1, #8
 8028740:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8028744:	fb01 4100 	mla	r1, r1, r0, r4
 8028748:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802874c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028750:	fb07 f70a 	mul.w	r7, r7, sl
 8028754:	0a09      	lsrs	r1, r1, #8
 8028756:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802875a:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802875e:	fb03 7101 	mla	r1, r3, r1, r7
 8028762:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028766:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802876a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802876e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028772:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8028776:	fb00 e101 	mla	r1, r0, r1, lr
 802877a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802877e:	9a00      	ldr	r2, [sp, #0]
 8028780:	b287      	uxth	r7, r0
 8028782:	437a      	muls	r2, r7
 8028784:	1c53      	adds	r3, r2, #1
 8028786:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802878a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802878e:	0a09      	lsrs	r1, r1, #8
 8028790:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8028794:	4321      	orrs	r1, r4
 8028796:	0c0a      	lsrs	r2, r1, #16
 8028798:	8836      	ldrh	r6, [r6, #0]
 802879a:	fb12 f207 	smulbb	r2, r2, r7
 802879e:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80287a2:	b2c8      	uxtb	r0, r1
 80287a4:	1235      	asrs	r5, r6, #8
 80287a6:	fb14 f407 	smulbb	r4, r4, r7
 80287aa:	fb10 f007 	smulbb	r0, r0, r7
 80287ae:	b2db      	uxtb	r3, r3
 80287b0:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80287b4:	fb05 2503 	mla	r5, r5, r3, r2
 80287b8:	10f2      	asrs	r2, r6, #3
 80287ba:	00f6      	lsls	r6, r6, #3
 80287bc:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80287c0:	b2f6      	uxtb	r6, r6
 80287c2:	fb02 4203 	mla	r2, r2, r3, r4
 80287c6:	fb06 0303 	mla	r3, r6, r3, r0
 80287ca:	b2ad      	uxth	r5, r5
 80287cc:	b299      	uxth	r1, r3
 80287ce:	b294      	uxth	r4, r2
 80287d0:	1c6b      	adds	r3, r5, #1
 80287d2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80287d6:	1c62      	adds	r2, r4, #1
 80287d8:	1c4b      	adds	r3, r1, #1
 80287da:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80287de:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80287e2:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80287e6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80287ea:	0952      	lsrs	r2, r2, #5
 80287ec:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80287f0:	432b      	orrs	r3, r5
 80287f2:	4313      	orrs	r3, r2
 80287f4:	9a02      	ldr	r2, [sp, #8]
 80287f6:	8013      	strh	r3, [r2, #0]
 80287f8:	b005      	add	sp, #20
 80287fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287fe:	2500      	movs	r5, #0
 8028800:	e6ef      	b.n	80285e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8028802:	2100      	movs	r1, #0
 8028804:	460d      	mov	r5, r1
 8028806:	e6f7      	b.n	80285f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028808:	2100      	movs	r1, #0
 802880a:	e6f5      	b.n	80285f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802880c:	4631      	mov	r1, r6
 802880e:	e6f3      	b.n	80285f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028810:	2400      	movs	r4, #0
 8028812:	e702      	b.n	802861a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8028814:	2200      	movs	r2, #0
 8028816:	4614      	mov	r4, r2
 8028818:	e70b      	b.n	8028632 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802881a:	4602      	mov	r2, r0
 802881c:	4604      	mov	r4, r0
 802881e:	e708      	b.n	8028632 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028820:	2200      	movs	r2, #0
 8028822:	e706      	b.n	8028632 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028824:	4632      	mov	r2, r6
 8028826:	e704      	b.n	8028632 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08028828 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802882c:	b09d      	sub	sp, #116	@ 0x74
 802882e:	9219      	str	r2, [sp, #100]	@ 0x64
 8028830:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8028832:	901b      	str	r0, [sp, #108]	@ 0x6c
 8028834:	9307      	str	r3, [sp, #28]
 8028836:	6850      	ldr	r0, [r2, #4]
 8028838:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 802883c:	9117      	str	r1, [sp, #92]	@ 0x5c
 802883e:	931a      	str	r3, [sp, #104]	@ 0x68
 8028840:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8028844:	fb00 1303 	mla	r3, r0, r3, r1
 8028848:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 802884c:	6812      	ldr	r2, [r2, #0]
 802884e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028852:	930a      	str	r3, [sp, #40]	@ 0x28
 8028854:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028856:	681b      	ldr	r3, [r3, #0]
 8028858:	9310      	str	r3, [sp, #64]	@ 0x40
 802885a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 802885e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028860:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028862:	2b00      	cmp	r3, #0
 8028864:	dc03      	bgt.n	802886e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8028866:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028868:	2b00      	cmp	r3, #0
 802886a:	f340 8375 	ble.w	8028f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802886e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028870:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028874:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028878:	1e48      	subs	r0, r1, #1
 802887a:	1e57      	subs	r7, r2, #1
 802887c:	9b07      	ldr	r3, [sp, #28]
 802887e:	2b00      	cmp	r3, #0
 8028880:	f340 818e 	ble.w	8028ba0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8028884:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028888:	ea4f 4326 	mov.w	r3, r6, asr #16
 802888c:	d406      	bmi.n	802889c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802888e:	4584      	cmp	ip, r0
 8028890:	da04      	bge.n	802889c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028892:	2b00      	cmp	r3, #0
 8028894:	db02      	blt.n	802889c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028896:	42bb      	cmp	r3, r7
 8028898:	f2c0 8183 	blt.w	8028ba2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802889c:	f11c 0c01 	adds.w	ip, ip, #1
 80288a0:	f100 8173 	bmi.w	8028b8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80288a4:	4561      	cmp	r1, ip
 80288a6:	f2c0 8170 	blt.w	8028b8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80288aa:	3301      	adds	r3, #1
 80288ac:	f100 816d 	bmi.w	8028b8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80288b0:	429a      	cmp	r2, r3
 80288b2:	f2c0 816a 	blt.w	8028b8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80288b6:	9b07      	ldr	r3, [sp, #28]
 80288b8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80288ba:	9318      	str	r3, [sp, #96]	@ 0x60
 80288bc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80288be:	2b00      	cmp	r3, #0
 80288c0:	f340 818c 	ble.w	8028bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80288c4:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80288c6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80288c8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80288cc:	1422      	asrs	r2, r4, #16
 80288ce:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80288d2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80288d6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80288da:	689b      	ldr	r3, [r3, #8]
 80288dc:	f100 81cd 	bmi.w	8028c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80288e0:	f103 38ff 	add.w	r8, r3, #4294967295
 80288e4:	4542      	cmp	r2, r8
 80288e6:	f280 81c8 	bge.w	8028c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80288ea:	f1bc 0f00 	cmp.w	ip, #0
 80288ee:	f2c0 81c4 	blt.w	8028c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80288f2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80288f6:	45c4      	cmp	ip, r8
 80288f8:	f280 81bf 	bge.w	8028c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80288fc:	b21b      	sxth	r3, r3
 80288fe:	fb0c 2203 	mla	r2, ip, r3, r2
 8028902:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8028904:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028908:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802890c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028910:	2800      	cmp	r0, #0
 8028912:	f000 81a9 	beq.w	8028c68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8028916:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802891a:	950c      	str	r5, [sp, #48]	@ 0x30
 802891c:	0e2d      	lsrs	r5, r5, #24
 802891e:	9513      	str	r5, [sp, #76]	@ 0x4c
 8028920:	b181      	cbz	r1, 8028944 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028922:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8028926:	3b01      	subs	r3, #1
 8028928:	009b      	lsls	r3, r3, #2
 802892a:	3304      	adds	r3, #4
 802892c:	eb08 0c03 	add.w	ip, r8, r3
 8028930:	f858 3003 	ldr.w	r3, [r8, r3]
 8028934:	9308      	str	r3, [sp, #32]
 8028936:	0e1b      	lsrs	r3, r3, #24
 8028938:	9311      	str	r3, [sp, #68]	@ 0x44
 802893a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802893e:	930d      	str	r3, [sp, #52]	@ 0x34
 8028940:	0e1b      	lsrs	r3, r3, #24
 8028942:	9314      	str	r3, [sp, #80]	@ 0x50
 8028944:	b280      	uxth	r0, r0
 8028946:	b289      	uxth	r1, r1
 8028948:	fb00 f901 	mul.w	r9, r0, r1
 802894c:	0100      	lsls	r0, r0, #4
 802894e:	eba0 0809 	sub.w	r8, r0, r9
 8028952:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8028956:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8028958:	fa1f f888 	uxth.w	r8, r8
 802895c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028960:	fb08 f000 	mul.w	r0, r8, r0
 8028964:	b289      	uxth	r1, r1
 8028966:	1a5b      	subs	r3, r3, r1
 8028968:	b29b      	uxth	r3, r3
 802896a:	fb03 000e 	mla	r0, r3, lr, r0
 802896e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028970:	fb01 0005 	mla	r0, r1, r5, r0
 8028974:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028976:	fb09 0005 	mla	r0, r9, r5, r0
 802897a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802897e:	2800      	cmp	r0, #0
 8028980:	f000 80fa 	beq.w	8028b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028984:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8028988:	d01b      	beq.n	80289c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802898a:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802898e:	fb0e fa0a 	mul.w	sl, lr, sl
 8028992:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028996:	fb0e fe02 	mul.w	lr, lr, r2
 802899a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802899e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80289a2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80289a6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80289aa:	4452      	add	r2, sl
 80289ac:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80289b0:	0a12      	lsrs	r2, r2, #8
 80289b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80289b6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80289ba:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80289be:	ea42 020c 	orr.w	r2, r2, ip
 80289c2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80289c4:	2dff      	cmp	r5, #255	@ 0xff
 80289c6:	d021      	beq.n	8028a0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80289c8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80289ca:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80289ce:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80289d0:	fb05 fb0b 	mul.w	fp, r5, fp
 80289d4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80289d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80289da:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80289de:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80289e0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80289e4:	fb05 fa0a 	mul.w	sl, r5, sl
 80289e8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80289ec:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80289f0:	44de      	add	lr, fp
 80289f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80289f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80289fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80289fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028a02:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028a06:	ea4e 050a 	orr.w	r5, lr, sl
 8028a0a:	950c      	str	r5, [sp, #48]	@ 0x30
 8028a0c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028a0e:	2dff      	cmp	r5, #255	@ 0xff
 8028a10:	d021      	beq.n	8028a56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8028a12:	9d08      	ldr	r5, [sp, #32]
 8028a14:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028a18:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028a1a:	fb05 fb0b 	mul.w	fp, r5, fp
 8028a1e:	9d08      	ldr	r5, [sp, #32]
 8028a20:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028a24:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028a28:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028a2a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028a2e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028a32:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028a36:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028a3a:	44de      	add	lr, fp
 8028a3c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028a40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028a44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028a48:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028a4c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028a50:	ea4e 050a 	orr.w	r5, lr, sl
 8028a54:	9508      	str	r5, [sp, #32]
 8028a56:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028a58:	2dff      	cmp	r5, #255	@ 0xff
 8028a5a:	d021      	beq.n	8028aa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8028a5c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028a5e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028a62:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028a64:	fb05 fb0b 	mul.w	fp, r5, fp
 8028a68:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028a6a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028a6e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028a72:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028a74:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028a78:	fb05 fa0a 	mul.w	sl, r5, sl
 8028a7c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028a80:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028a84:	44de      	add	lr, fp
 8028a86:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028a8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028a8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028a92:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028a96:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028a9a:	ea4e 050a 	orr.w	r5, lr, sl
 8028a9e:	950d      	str	r5, [sp, #52]	@ 0x34
 8028aa0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028aa2:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8028aa6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028aaa:	fb08 fc0c 	mul.w	ip, r8, ip
 8028aae:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028ab2:	9d08      	ldr	r5, [sp, #32]
 8028ab4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028ab8:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028abc:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028ac0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028ac2:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028ac6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028ac8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028acc:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8028ad0:	fb08 f80e 	mul.w	r8, r8, lr
 8028ad4:	fb03 8202 	mla	r2, r3, r2, r8
 8028ad8:	9b08      	ldr	r3, [sp, #32]
 8028ada:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ade:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8028ae2:	fb01 220a 	mla	r2, r1, sl, r2
 8028ae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028ae8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028aec:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8028af0:	fb09 2901 	mla	r9, r9, r1, r2
 8028af4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028af6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028afa:	4342      	muls	r2, r0
 8028afc:	1c50      	adds	r0, r2, #1
 8028afe:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028b02:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028b06:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8028b0a:	ea4c 0c09 	orr.w	ip, ip, r9
 8028b0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028b10:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028b14:	883b      	ldrh	r3, [r7, #0]
 8028b16:	fb12 f205 	smulbb	r2, r2, r5
 8028b1a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028b1e:	fa5f fc8c 	uxtb.w	ip, ip
 8028b22:	1219      	asrs	r1, r3, #8
 8028b24:	fb1c fc05 	smulbb	ip, ip, r5
 8028b28:	b2c0      	uxtb	r0, r0
 8028b2a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028b2e:	fb01 2100 	mla	r1, r1, r0, r2
 8028b32:	10da      	asrs	r2, r3, #3
 8028b34:	00db      	lsls	r3, r3, #3
 8028b36:	fb1e fe05 	smulbb	lr, lr, r5
 8028b3a:	b2db      	uxtb	r3, r3
 8028b3c:	fb03 c300 	mla	r3, r3, r0, ip
 8028b40:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028b44:	b289      	uxth	r1, r1
 8028b46:	fb02 e200 	mla	r2, r2, r0, lr
 8028b4a:	fa1f fc83 	uxth.w	ip, r3
 8028b4e:	1c4b      	adds	r3, r1, #1
 8028b50:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028b54:	f10c 0301 	add.w	r3, ip, #1
 8028b58:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8028b5c:	b292      	uxth	r2, r2
 8028b5e:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8028b62:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028b66:	430b      	orrs	r3, r1
 8028b68:	1c51      	adds	r1, r2, #1
 8028b6a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028b6e:	0952      	lsrs	r2, r2, #5
 8028b70:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028b74:	4313      	orrs	r3, r2
 8028b76:	803b      	strh	r3, [r7, #0]
 8028b78:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028b7a:	3702      	adds	r7, #2
 8028b7c:	441c      	add	r4, r3
 8028b7e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028b80:	441e      	add	r6, r3
 8028b82:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028b84:	3b01      	subs	r3, #1
 8028b86:	9318      	str	r3, [sp, #96]	@ 0x60
 8028b88:	e698      	b.n	80288bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028b8a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028b8c:	441c      	add	r4, r3
 8028b8e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028b90:	441e      	add	r6, r3
 8028b92:	9b07      	ldr	r3, [sp, #28]
 8028b94:	3b01      	subs	r3, #1
 8028b96:	9307      	str	r3, [sp, #28]
 8028b98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028b9a:	3302      	adds	r3, #2
 8028b9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8028b9e:	e66d      	b.n	802887c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8028ba0:	d023      	beq.n	8028bea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8028ba2:	9b07      	ldr	r3, [sp, #28]
 8028ba4:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8028ba6:	3b01      	subs	r3, #1
 8028ba8:	fb00 4003 	mla	r0, r0, r3, r4
 8028bac:	1400      	asrs	r0, r0, #16
 8028bae:	f53f ae82 	bmi.w	80288b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028bb2:	3901      	subs	r1, #1
 8028bb4:	4288      	cmp	r0, r1
 8028bb6:	f6bf ae7e 	bge.w	80288b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028bba:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8028bbc:	fb01 6303 	mla	r3, r1, r3, r6
 8028bc0:	141b      	asrs	r3, r3, #16
 8028bc2:	f53f ae78 	bmi.w	80288b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028bc6:	3a01      	subs	r2, #1
 8028bc8:	4293      	cmp	r3, r2
 8028bca:	f6bf ae74 	bge.w	80288b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028bce:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028bd2:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8028bd6:	f1bb 0f00 	cmp.w	fp, #0
 8028bda:	dc6c      	bgt.n	8028cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8028bdc:	9b07      	ldr	r3, [sp, #28]
 8028bde:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028be2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028be4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028be8:	930a      	str	r3, [sp, #40]	@ 0x28
 8028bea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028bec:	2b00      	cmp	r3, #0
 8028bee:	f340 81b3 	ble.w	8028f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028bf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028bf6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028bfa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028bfe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028c02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028c06:	eef0 6a62 	vmov.f32	s13, s5
 8028c0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028c0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028c12:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028c16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028c1e:	ee16 4a90 	vmov	r4, s13
 8028c22:	eef0 6a43 	vmov.f32	s13, s6
 8028c26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028c2a:	ee12 2a90 	vmov	r2, s5
 8028c2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028c32:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028c34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c38:	fb92 f3f3 	sdiv	r3, r2, r3
 8028c3c:	ee13 2a10 	vmov	r2, s6
 8028c40:	9329      	str	r3, [sp, #164]	@ 0xa4
 8028c42:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028c44:	ee16 6a90 	vmov	r6, s13
 8028c48:	fb92 f3f3 	sdiv	r3, r2, r3
 8028c4c:	932a      	str	r3, [sp, #168]	@ 0xa8
 8028c4e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028c50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8028c52:	3b01      	subs	r3, #1
 8028c54:	9317      	str	r3, [sp, #92]	@ 0x5c
 8028c56:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028c58:	bf08      	it	eq
 8028c5a:	4613      	moveq	r3, r2
 8028c5c:	eeb0 3a67 	vmov.f32	s6, s15
 8028c60:	9307      	str	r3, [sp, #28]
 8028c62:	eef0 2a47 	vmov.f32	s5, s14
 8028c66:	e5fb      	b.n	8028860 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028c68:	2900      	cmp	r1, #0
 8028c6a:	f43f ae6b 	beq.w	8028944 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028c6e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028c72:	9308      	str	r3, [sp, #32]
 8028c74:	0e1b      	lsrs	r3, r3, #24
 8028c76:	9311      	str	r3, [sp, #68]	@ 0x44
 8028c78:	e664      	b.n	8028944 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028c7a:	f112 0801 	adds.w	r8, r2, #1
 8028c7e:	f53f af7b 	bmi.w	8028b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028c82:	4543      	cmp	r3, r8
 8028c84:	f6ff af78 	blt.w	8028b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028c88:	f11c 0801 	adds.w	r8, ip, #1
 8028c8c:	f53f af74 	bmi.w	8028b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028c90:	45c6      	cmp	lr, r8
 8028c92:	f6ff af71 	blt.w	8028b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028c96:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8028c98:	9201      	str	r2, [sp, #4]
 8028c9a:	fa0f f28e 	sxth.w	r2, lr
 8028c9e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8028ca2:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028ca6:	9200      	str	r2, [sp, #0]
 8028ca8:	b21b      	sxth	r3, r3
 8028caa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028cac:	4639      	mov	r1, r7
 8028cae:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8028cb0:	f7ff fc79 	bl	80285a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8028cb4:	e760      	b.n	8028b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028cb6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028cb8:	1427      	asrs	r7, r4, #16
 8028cba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028cbe:	1433      	asrs	r3, r6, #16
 8028cc0:	fb01 7303 	mla	r3, r1, r3, r7
 8028cc4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8028cc6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028cca:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8028cce:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028cd2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028cd6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028cda:	2a00      	cmp	r2, #0
 8028cdc:	f000 8133 	beq.w	8028f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8028ce0:	687d      	ldr	r5, [r7, #4]
 8028ce2:	950e      	str	r5, [sp, #56]	@ 0x38
 8028ce4:	0e2d      	lsrs	r5, r5, #24
 8028ce6:	9515      	str	r5, [sp, #84]	@ 0x54
 8028ce8:	b178      	cbz	r0, 8028d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028cea:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8028cee:	3901      	subs	r1, #1
 8028cf0:	0089      	lsls	r1, r1, #2
 8028cf2:	3104      	adds	r1, #4
 8028cf4:	eb07 0e01 	add.w	lr, r7, r1
 8028cf8:	5879      	ldr	r1, [r7, r1]
 8028cfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8028cfc:	0e09      	lsrs	r1, r1, #24
 8028cfe:	9112      	str	r1, [sp, #72]	@ 0x48
 8028d00:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028d04:	910f      	str	r1, [sp, #60]	@ 0x3c
 8028d06:	0e09      	lsrs	r1, r1, #24
 8028d08:	9116      	str	r1, [sp, #88]	@ 0x58
 8028d0a:	b292      	uxth	r2, r2
 8028d0c:	b280      	uxth	r0, r0
 8028d0e:	fb02 f800 	mul.w	r8, r2, r0
 8028d12:	0112      	lsls	r2, r2, #4
 8028d14:	eba2 0e08 	sub.w	lr, r2, r8
 8028d18:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8028d1a:	fa1f fe8e 	uxth.w	lr, lr
 8028d1e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028d22:	fb0e f101 	mul.w	r1, lr, r1
 8028d26:	b280      	uxth	r0, r0
 8028d28:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8028d2c:	1a12      	subs	r2, r2, r0
 8028d2e:	b292      	uxth	r2, r2
 8028d30:	fb02 110c 	mla	r1, r2, ip, r1
 8028d34:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028d36:	fb00 1105 	mla	r1, r0, r5, r1
 8028d3a:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028d3c:	fb08 1105 	mla	r1, r8, r5, r1
 8028d40:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028d44:	2900      	cmp	r1, #0
 8028d46:	f000 80f5 	beq.w	8028f34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8028d4a:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8028d4e:	d019      	beq.n	8028d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8028d50:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8028d54:	fb0c fa0a 	mul.w	sl, ip, sl
 8028d58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028d5c:	fb0c fc03 	mul.w	ip, ip, r3
 8028d60:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028d64:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028d68:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028d6c:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8028d70:	4453      	add	r3, sl
 8028d72:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028d76:	0a1b      	lsrs	r3, r3, #8
 8028d78:	0a3f      	lsrs	r7, r7, #8
 8028d7a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028d7e:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8028d82:	433b      	orrs	r3, r7
 8028d84:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028d86:	2dff      	cmp	r5, #255	@ 0xff
 8028d88:	d020      	beq.n	8028dcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8028d8a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028d8c:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028d90:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028d92:	436f      	muls	r7, r5
 8028d94:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028d96:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028d9a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028d9e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028da0:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028da4:	fb05 fa0a 	mul.w	sl, r5, sl
 8028da8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028dac:	44bc      	add	ip, r7
 8028dae:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028db2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028db6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028dba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028dbe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028dc2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028dc6:	ea4c 050a 	orr.w	r5, ip, sl
 8028dca:	950e      	str	r5, [sp, #56]	@ 0x38
 8028dcc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028dce:	2dff      	cmp	r5, #255	@ 0xff
 8028dd0:	d020      	beq.n	8028e14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8028dd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028dd4:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028dd8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028dda:	436f      	muls	r7, r5
 8028ddc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028dde:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028de2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028de6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028de8:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028dec:	fb05 fa0a 	mul.w	sl, r5, sl
 8028df0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028df4:	44bc      	add	ip, r7
 8028df6:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028dfa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028dfe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e06:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028e0a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028e0e:	ea4c 050a 	orr.w	r5, ip, sl
 8028e12:	9509      	str	r5, [sp, #36]	@ 0x24
 8028e14:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028e16:	2dff      	cmp	r5, #255	@ 0xff
 8028e18:	d020      	beq.n	8028e5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8028e1a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028e1c:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028e20:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028e22:	436f      	muls	r7, r5
 8028e24:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028e26:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028e2a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028e2e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8028e30:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028e34:	fb05 fa0a 	mul.w	sl, r5, sl
 8028e38:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028e3c:	44bc      	add	ip, r7
 8028e3e:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028e42:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028e46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e4e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028e52:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028e56:	ea4c 050a 	orr.w	r5, ip, sl
 8028e5a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8028e5c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028e5e:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8028e62:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028e66:	fb0e f707 	mul.w	r7, lr, r7
 8028e6a:	fb02 770c 	mla	r7, r2, ip, r7
 8028e6e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028e70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028e74:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028e78:	fb00 770c 	mla	r7, r0, ip, r7
 8028e7c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028e7e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028e82:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028e84:	fb08 770c 	mla	r7, r8, ip, r7
 8028e88:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8028e8c:	fb0e fe0c 	mul.w	lr, lr, ip
 8028e90:	fb02 e303 	mla	r3, r2, r3, lr
 8028e94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028e96:	0a3f      	lsrs	r7, r7, #8
 8028e98:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8028e9c:	fb00 330a 	mla	r3, r0, sl, r3
 8028ea0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028ea2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8028ea6:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8028eaa:	fb08 3c0c 	mla	ip, r8, ip, r3
 8028eae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028eb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028eb4:	4359      	muls	r1, r3
 8028eb6:	1c4b      	adds	r3, r1, #1
 8028eb8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028ebc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8028ec0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8028ec4:	ea47 070c 	orr.w	r7, r7, ip
 8028ec8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028eca:	0c3b      	lsrs	r3, r7, #16
 8028ecc:	f8b9 0000 	ldrh.w	r0, [r9]
 8028ed0:	fb13 f305 	smulbb	r3, r3, r5
 8028ed4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8028ed8:	b2ff      	uxtb	r7, r7
 8028eda:	1202      	asrs	r2, r0, #8
 8028edc:	fb17 f705 	smulbb	r7, r7, r5
 8028ee0:	b2c9      	uxtb	r1, r1
 8028ee2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8028ee6:	fb02 3201 	mla	r2, r2, r1, r3
 8028eea:	10c3      	asrs	r3, r0, #3
 8028eec:	00c0      	lsls	r0, r0, #3
 8028eee:	fb1c fc05 	smulbb	ip, ip, r5
 8028ef2:	b2c0      	uxtb	r0, r0
 8028ef4:	fb00 7001 	mla	r0, r0, r1, r7
 8028ef8:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8028efc:	fb03 c301 	mla	r3, r3, r1, ip
 8028f00:	b292      	uxth	r2, r2
 8028f02:	b280      	uxth	r0, r0
 8028f04:	1c51      	adds	r1, r2, #1
 8028f06:	f100 0c01 	add.w	ip, r0, #1
 8028f0a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028f0e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8028f12:	b29b      	uxth	r3, r3
 8028f14:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028f18:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8028f1c:	ea4c 0202 	orr.w	r2, ip, r2
 8028f20:	f103 0c01 	add.w	ip, r3, #1
 8028f24:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8028f28:	095b      	lsrs	r3, r3, #5
 8028f2a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028f2e:	431a      	orrs	r2, r3
 8028f30:	f8a9 2000 	strh.w	r2, [r9]
 8028f34:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028f36:	f109 0902 	add.w	r9, r9, #2
 8028f3a:	441c      	add	r4, r3
 8028f3c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028f3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028f42:	441e      	add	r6, r3
 8028f44:	e647      	b.n	8028bd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8028f46:	2800      	cmp	r0, #0
 8028f48:	f43f aedf 	beq.w	8028d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028f4c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8028f50:	9109      	str	r1, [sp, #36]	@ 0x24
 8028f52:	0e09      	lsrs	r1, r1, #24
 8028f54:	9112      	str	r1, [sp, #72]	@ 0x48
 8028f56:	e6d8      	b.n	8028d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028f58:	b01d      	add	sp, #116	@ 0x74
 8028f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028f5e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8028f5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f62:	b085      	sub	sp, #20
 8028f64:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8028f68:	9102      	str	r1, [sp, #8]
 8028f6a:	fb04 7103 	mla	r1, r4, r3, r7
 8028f6e:	2c00      	cmp	r4, #0
 8028f70:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8028f74:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8028f78:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8028f7c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8028f80:	f2c0 810c 	blt.w	802919c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8028f84:	45a6      	cmp	lr, r4
 8028f86:	f340 8109 	ble.w	802919c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8028f8a:	2f00      	cmp	r7, #0
 8028f8c:	f2c0 8104 	blt.w	8029198 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8028f90:	42bb      	cmp	r3, r7
 8028f92:	f340 8101 	ble.w	8029198 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8028f96:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8028f9a:	1c7a      	adds	r2, r7, #1
 8028f9c:	f100 8101 	bmi.w	80291a2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8028fa0:	4293      	cmp	r3, r2
 8028fa2:	f340 80fe 	ble.w	80291a2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8028fa6:	2e00      	cmp	r6, #0
 8028fa8:	f000 80fd 	beq.w	80291a6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8028fac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8028fb0:	3401      	adds	r4, #1
 8028fb2:	f100 80fc 	bmi.w	80291ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8028fb6:	45a6      	cmp	lr, r4
 8028fb8:	f340 80f9 	ble.w	80291ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8028fbc:	2800      	cmp	r0, #0
 8028fbe:	f000 80f9 	beq.w	80291b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8028fc2:	2f00      	cmp	r7, #0
 8028fc4:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8028fc8:	f2c0 80ef 	blt.w	80291aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8028fcc:	42bb      	cmp	r3, r7
 8028fce:	f340 80ec 	ble.w	80291aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8028fd2:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028fd6:	3701      	adds	r7, #1
 8028fd8:	f100 80ef 	bmi.w	80291ba <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8028fdc:	42bb      	cmp	r3, r7
 8028fde:	f340 80ec 	ble.w	80291ba <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8028fe2:	2e00      	cmp	r6, #0
 8028fe4:	f000 80eb 	beq.w	80291be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8028fe8:	6852      	ldr	r2, [r2, #4]
 8028fea:	b2b6      	uxth	r6, r6
 8028fec:	b280      	uxth	r0, r0
 8028fee:	fb00 fe06 	mul.w	lr, r0, r6
 8028ff2:	0136      	lsls	r6, r6, #4
 8028ff4:	eba6 070e 	sub.w	r7, r6, lr
 8028ff8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8028ffc:	b2bf      	uxth	r7, r7
 8028ffe:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8029002:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8029006:	fb07 f60a 	mul.w	r6, r7, sl
 802900a:	b280      	uxth	r0, r0
 802900c:	1a1b      	subs	r3, r3, r0
 802900e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8029012:	b29b      	uxth	r3, r3
 8029014:	fb0b 6603 	mla	r6, fp, r3, r6
 8029018:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802901c:	fb00 6609 	mla	r6, r0, r9, r6
 8029020:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8029024:	fb0e 6608 	mla	r6, lr, r8, r6
 8029028:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802902c:	9600      	str	r6, [sp, #0]
 802902e:	2e00      	cmp	r6, #0
 8029030:	f000 80af 	beq.w	8029192 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8029034:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029038:	fb0b fc0c 	mul.w	ip, fp, ip
 802903c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8029040:	fb0b f505 	mul.w	r5, fp, r5
 8029044:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8029048:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802904c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029050:	44dc      	add	ip, fp
 8029052:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029056:	9501      	str	r5, [sp, #4]
 8029058:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 802905c:	9503      	str	r5, [sp, #12]
 802905e:	9d01      	ldr	r5, [sp, #4]
 8029060:	9e02      	ldr	r6, [sp, #8]
 8029062:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8029066:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802906a:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802906e:	fb0a fc0c 	mul.w	ip, sl, ip
 8029072:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8029076:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802907a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802907e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029082:	4465      	add	r5, ip
 8029084:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029088:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802908c:	fb09 fc0c 	mul.w	ip, r9, ip
 8029090:	fb09 f904 	mul.w	r9, r9, r4
 8029094:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8029098:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802909c:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80290a0:	fb08 f404 	mul.w	r4, r8, r4
 80290a4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80290a8:	fb08 f802 	mul.w	r8, r8, r2
 80290ac:	0a2d      	lsrs	r5, r5, #8
 80290ae:	0a22      	lsrs	r2, r4, #8
 80290b0:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80290b4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80290b8:	437d      	muls	r5, r7
 80290ba:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80290be:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80290c2:	4414      	add	r4, r2
 80290c4:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80290c8:	fb0a fa01 	mul.w	sl, sl, r1
 80290cc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80290d0:	9a03      	ldr	r2, [sp, #12]
 80290d2:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80290d6:	fb02 5503 	mla	r5, r2, r3, r5
 80290da:	0a24      	lsrs	r4, r4, #8
 80290dc:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80290e0:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80290e4:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80290e8:	fb04 540e 	mla	r4, r4, lr, r5
 80290ec:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80290f0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80290f4:	4461      	add	r1, ip
 80290f6:	0a09      	lsrs	r1, r1, #8
 80290f8:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80290fc:	fb01 4100 	mla	r1, r1, r0, r4
 8029100:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029104:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029108:	fb07 f70a 	mul.w	r7, r7, sl
 802910c:	0a09      	lsrs	r1, r1, #8
 802910e:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8029112:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8029116:	fb03 7101 	mla	r1, r3, r1, r7
 802911a:	9b00      	ldr	r3, [sp, #0]
 802911c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029120:	43da      	mvns	r2, r3
 8029122:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8029126:	fb0e 1e08 	mla	lr, lr, r8, r1
 802912a:	8836      	ldrh	r6, [r6, #0]
 802912c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029130:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8029134:	fb00 e101 	mla	r1, r0, r1, lr
 8029138:	1233      	asrs	r3, r6, #8
 802913a:	b2d2      	uxtb	r2, r2
 802913c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8029140:	4353      	muls	r3, r2
 8029142:	10f0      	asrs	r0, r6, #3
 8029144:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029148:	4350      	muls	r0, r2
 802914a:	0a09      	lsrs	r1, r1, #8
 802914c:	00f6      	lsls	r6, r6, #3
 802914e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8029152:	b2f6      	uxtb	r6, r6
 8029154:	4321      	orrs	r1, r4
 8029156:	4356      	muls	r6, r2
 8029158:	1c5a      	adds	r2, r3, #1
 802915a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802915e:	0c0b      	lsrs	r3, r1, #16
 8029160:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029164:	1c42      	adds	r2, r0, #1
 8029166:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802916a:	0a0a      	lsrs	r2, r1, #8
 802916c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029170:	021b      	lsls	r3, r3, #8
 8029172:	00d2      	lsls	r2, r2, #3
 8029174:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029178:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802917c:	4313      	orrs	r3, r2
 802917e:	1c72      	adds	r2, r6, #1
 8029180:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8029184:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8029188:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802918c:	4319      	orrs	r1, r3
 802918e:	9b02      	ldr	r3, [sp, #8]
 8029190:	8019      	strh	r1, [r3, #0]
 8029192:	b005      	add	sp, #20
 8029194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029198:	2500      	movs	r5, #0
 802919a:	e6fe      	b.n	8028f9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802919c:	2100      	movs	r1, #0
 802919e:	460d      	mov	r5, r1
 80291a0:	e706      	b.n	8028fb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80291a2:	2100      	movs	r1, #0
 80291a4:	e704      	b.n	8028fb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80291a6:	4631      	mov	r1, r6
 80291a8:	e702      	b.n	8028fb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80291aa:	2400      	movs	r4, #0
 80291ac:	e713      	b.n	8028fd6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 80291ae:	2200      	movs	r2, #0
 80291b0:	4614      	mov	r4, r2
 80291b2:	e71a      	b.n	8028fea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80291b4:	4602      	mov	r2, r0
 80291b6:	4604      	mov	r4, r0
 80291b8:	e717      	b.n	8028fea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80291ba:	2200      	movs	r2, #0
 80291bc:	e715      	b.n	8028fea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80291be:	4632      	mov	r2, r6
 80291c0:	e713      	b.n	8028fea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

080291c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80291c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80291c8:	b09b      	sub	sp, #108	@ 0x6c
 80291ca:	9218      	str	r2, [sp, #96]	@ 0x60
 80291cc:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80291ce:	9019      	str	r0, [sp, #100]	@ 0x64
 80291d0:	6850      	ldr	r0, [r2, #4]
 80291d2:	9116      	str	r1, [sp, #88]	@ 0x58
 80291d4:	9307      	str	r3, [sp, #28]
 80291d6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80291da:	fb00 1303 	mla	r3, r0, r3, r1
 80291de:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 80291e2:	6812      	ldr	r2, [r2, #0]
 80291e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80291e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80291ea:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80291ec:	681b      	ldr	r3, [r3, #0]
 80291ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80291f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80291f2:	2b00      	cmp	r3, #0
 80291f4:	dc03      	bgt.n	80291fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80291f6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80291f8:	2b00      	cmp	r3, #0
 80291fa:	f340 8387 	ble.w	802990c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80291fe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029200:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029204:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029208:	1e48      	subs	r0, r1, #1
 802920a:	1e57      	subs	r7, r2, #1
 802920c:	9b07      	ldr	r3, [sp, #28]
 802920e:	2b00      	cmp	r3, #0
 8029210:	f340 8166 	ble.w	80294e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8029214:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029218:	ea4f 4326 	mov.w	r3, r6, asr #16
 802921c:	d406      	bmi.n	802922c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802921e:	4584      	cmp	ip, r0
 8029220:	da04      	bge.n	802922c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029222:	2b00      	cmp	r3, #0
 8029224:	db02      	blt.n	802922c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029226:	42bb      	cmp	r3, r7
 8029228:	f2c0 815b 	blt.w	80294e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802922c:	f11c 0c01 	adds.w	ip, ip, #1
 8029230:	f100 814b 	bmi.w	80294ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029234:	4561      	cmp	r1, ip
 8029236:	f2c0 8148 	blt.w	80294ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802923a:	3301      	adds	r3, #1
 802923c:	f100 8145 	bmi.w	80294ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029240:	429a      	cmp	r2, r3
 8029242:	f2c0 8142 	blt.w	80294ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029246:	9b07      	ldr	r3, [sp, #28]
 8029248:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802924a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802924c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802924e:	2b00      	cmp	r3, #0
 8029250:	f340 8165 	ble.w	802951e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8029254:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8029256:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029258:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802925c:	1422      	asrs	r2, r4, #16
 802925e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029262:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029266:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802926a:	689b      	ldr	r3, [r3, #8]
 802926c:	f100 81d5 	bmi.w	802961a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029270:	f103 38ff 	add.w	r8, r3, #4294967295
 8029274:	4542      	cmp	r2, r8
 8029276:	f280 81d0 	bge.w	802961a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802927a:	f1bc 0f00 	cmp.w	ip, #0
 802927e:	f2c0 81cc 	blt.w	802961a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029282:	f10e 38ff 	add.w	r8, lr, #4294967295
 8029286:	45c4      	cmp	ip, r8
 8029288:	f280 81c7 	bge.w	802961a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802928c:	b21b      	sxth	r3, r3
 802928e:	fb0c 2203 	mla	r2, ip, r3, r2
 8029292:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029294:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029298:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802929c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80292a0:	2900      	cmp	r1, #0
 80292a2:	f000 8182 	beq.w	80295aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80292a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80292aa:	950b      	str	r5, [sp, #44]	@ 0x2c
 80292ac:	0e2d      	lsrs	r5, r5, #24
 80292ae:	9512      	str	r5, [sp, #72]	@ 0x48
 80292b0:	b180      	cbz	r0, 80292d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80292b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80292b6:	3b01      	subs	r3, #1
 80292b8:	009b      	lsls	r3, r3, #2
 80292ba:	3304      	adds	r3, #4
 80292bc:	eb08 0c03 	add.w	ip, r8, r3
 80292c0:	f858 3003 	ldr.w	r3, [r8, r3]
 80292c4:	9308      	str	r3, [sp, #32]
 80292c6:	0e1b      	lsrs	r3, r3, #24
 80292c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80292ca:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80292ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80292d0:	0e1b      	lsrs	r3, r3, #24
 80292d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80292d4:	b289      	uxth	r1, r1
 80292d6:	b280      	uxth	r0, r0
 80292d8:	fb01 f900 	mul.w	r9, r1, r0
 80292dc:	0109      	lsls	r1, r1, #4
 80292de:	eba1 0809 	sub.w	r8, r1, r9
 80292e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80292e4:	fa1f f888 	uxth.w	r8, r8
 80292e8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80292ec:	fb08 f303 	mul.w	r3, r8, r3
 80292f0:	b280      	uxth	r0, r0
 80292f2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80292f6:	1a09      	subs	r1, r1, r0
 80292f8:	b289      	uxth	r1, r1
 80292fa:	fb01 330e 	mla	r3, r1, lr, r3
 80292fe:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029300:	fb00 3305 	mla	r3, r0, r5, r3
 8029304:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029306:	fb09 3305 	mla	r3, r9, r5, r3
 802930a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802930e:	2b00      	cmp	r3, #0
 8029310:	f000 80d2 	beq.w	80294b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029314:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8029318:	d01b      	beq.n	8029352 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802931a:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802931e:	fb0e fa0a 	mul.w	sl, lr, sl
 8029322:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029326:	fb0e fe02 	mul.w	lr, lr, r2
 802932a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802932e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029332:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8029336:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802933a:	4452      	add	r2, sl
 802933c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029340:	0a12      	lsrs	r2, r2, #8
 8029342:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029346:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802934a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802934e:	ea42 020c 	orr.w	r2, r2, ip
 8029352:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029354:	2dff      	cmp	r5, #255	@ 0xff
 8029356:	d021      	beq.n	802939c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8029358:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802935a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802935e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029360:	fb05 fb0b 	mul.w	fp, r5, fp
 8029364:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029366:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802936a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802936e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029370:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029374:	fb05 fa0a 	mul.w	sl, r5, sl
 8029378:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802937c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029380:	44de      	add	lr, fp
 8029382:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029386:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802938a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802938e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029392:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029396:	ea4e 050a 	orr.w	r5, lr, sl
 802939a:	950b      	str	r5, [sp, #44]	@ 0x2c
 802939c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802939e:	2dff      	cmp	r5, #255	@ 0xff
 80293a0:	d021      	beq.n	80293e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80293a2:	9d08      	ldr	r5, [sp, #32]
 80293a4:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80293a8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80293aa:	fb05 fb0b 	mul.w	fp, r5, fp
 80293ae:	9d08      	ldr	r5, [sp, #32]
 80293b0:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80293b4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80293b6:	fb05 fa0e 	mul.w	sl, r5, lr
 80293ba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80293be:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80293c2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80293c6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80293ca:	44de      	add	lr, fp
 80293cc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80293d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80293d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80293d8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80293dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80293e0:	ea4e 050a 	orr.w	r5, lr, sl
 80293e4:	9508      	str	r5, [sp, #32]
 80293e6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80293e8:	2dff      	cmp	r5, #255	@ 0xff
 80293ea:	d021      	beq.n	8029430 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80293ec:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80293ee:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80293f2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80293f4:	fb05 fb0b 	mul.w	fp, r5, fp
 80293f8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80293fa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80293fe:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029402:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029404:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029408:	fb05 fa0a 	mul.w	sl, r5, sl
 802940c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029410:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029414:	44de      	add	lr, fp
 8029416:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802941a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802941e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029422:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029426:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802942a:	ea4e 050a 	orr.w	r5, lr, sl
 802942e:	950c      	str	r5, [sp, #48]	@ 0x30
 8029430:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029432:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8029436:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802943a:	fb08 fc0c 	mul.w	ip, r8, ip
 802943e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8029442:	9d08      	ldr	r5, [sp, #32]
 8029444:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029448:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802944c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8029450:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029452:	2bff      	cmp	r3, #255	@ 0xff
 8029454:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8029458:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802945a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802945e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8029462:	fb08 f80e 	mul.w	r8, r8, lr
 8029466:	fb01 8202 	mla	r2, r1, r2, r8
 802946a:	9908      	ldr	r1, [sp, #32]
 802946c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029470:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8029474:	fb00 220a 	mla	r2, r0, sl, r2
 8029478:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802947a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802947e:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8029482:	fb09 2900 	mla	r9, r9, r0, r2
 8029486:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802948a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802948e:	ea4c 0c09 	orr.w	ip, ip, r9
 8029492:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8029496:	f040 8091 	bne.w	80295bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802949a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802949e:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 80294a2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80294a6:	f022 0207 	bic.w	r2, r2, #7
 80294aa:	431a      	orrs	r2, r3
 80294ac:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80294b0:	ea4c 0c02 	orr.w	ip, ip, r2
 80294b4:	f8a7 c000 	strh.w	ip, [r7]
 80294b8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80294ba:	3702      	adds	r7, #2
 80294bc:	441c      	add	r4, r3
 80294be:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80294c0:	441e      	add	r6, r3
 80294c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80294c4:	3b01      	subs	r3, #1
 80294c6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80294c8:	e6c0      	b.n	802924c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80294ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80294cc:	441c      	add	r4, r3
 80294ce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80294d0:	441e      	add	r6, r3
 80294d2:	9b07      	ldr	r3, [sp, #28]
 80294d4:	3b01      	subs	r3, #1
 80294d6:	9307      	str	r3, [sp, #28]
 80294d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80294da:	3302      	adds	r3, #2
 80294dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80294de:	e695      	b.n	802920c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80294e0:	d024      	beq.n	802952c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80294e2:	9b07      	ldr	r3, [sp, #28]
 80294e4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80294e6:	3b01      	subs	r3, #1
 80294e8:	fb00 4003 	mla	r0, r0, r3, r4
 80294ec:	1400      	asrs	r0, r0, #16
 80294ee:	f53f aeaa 	bmi.w	8029246 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80294f2:	3901      	subs	r1, #1
 80294f4:	4288      	cmp	r0, r1
 80294f6:	f6bf aea6 	bge.w	8029246 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80294fa:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80294fc:	fb01 6303 	mla	r3, r1, r3, r6
 8029500:	141b      	asrs	r3, r3, #16
 8029502:	f53f aea0 	bmi.w	8029246 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029506:	3a01      	subs	r2, #1
 8029508:	4293      	cmp	r3, r2
 802950a:	f6bf ae9c 	bge.w	8029246 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802950e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029512:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8029516:	f1bb 0f00 	cmp.w	fp, #0
 802951a:	f300 809a 	bgt.w	8029652 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802951e:	9b07      	ldr	r3, [sp, #28]
 8029520:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029526:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802952a:	930a      	str	r3, [sp, #40]	@ 0x28
 802952c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802952e:	2b00      	cmp	r3, #0
 8029530:	f340 81ec 	ble.w	802990c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8029534:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029538:	ee30 0a04 	vadd.f32	s0, s0, s8
 802953c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029540:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029544:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029548:	eef0 6a62 	vmov.f32	s13, s5
 802954c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029550:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029554:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029558:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802955c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029560:	ee16 4a90 	vmov	r4, s13
 8029564:	eef0 6a43 	vmov.f32	s13, s6
 8029568:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802956c:	ee12 2a90 	vmov	r2, s5
 8029570:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029574:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029576:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802957a:	fb92 f3f3 	sdiv	r3, r2, r3
 802957e:	ee13 2a10 	vmov	r2, s6
 8029582:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029584:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029586:	ee16 6a90 	vmov	r6, s13
 802958a:	fb92 f3f3 	sdiv	r3, r2, r3
 802958e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029590:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029592:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8029594:	3b01      	subs	r3, #1
 8029596:	9316      	str	r3, [sp, #88]	@ 0x58
 8029598:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802959a:	bf08      	it	eq
 802959c:	4613      	moveq	r3, r2
 802959e:	eeb0 3a67 	vmov.f32	s6, s15
 80295a2:	9307      	str	r3, [sp, #28]
 80295a4:	eef0 2a47 	vmov.f32	s5, s14
 80295a8:	e622      	b.n	80291f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80295aa:	2800      	cmp	r0, #0
 80295ac:	f43f ae92 	beq.w	80292d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80295b0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80295b4:	9308      	str	r3, [sp, #32]
 80295b6:	0e1b      	lsrs	r3, r3, #24
 80295b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80295ba:	e68b      	b.n	80292d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80295bc:	43db      	mvns	r3, r3
 80295be:	8839      	ldrh	r1, [r7, #0]
 80295c0:	fa5f f883 	uxtb.w	r8, r3
 80295c4:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80295c8:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80295cc:	fb0e fe08 	mul.w	lr, lr, r8
 80295d0:	10c8      	asrs	r0, r1, #3
 80295d2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80295d6:	fb00 f008 	mul.w	r0, r0, r8
 80295da:	00cb      	lsls	r3, r1, #3
 80295dc:	f10e 0101 	add.w	r1, lr, #1
 80295e0:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80295e4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80295e8:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80295ec:	b2db      	uxtb	r3, r3
 80295ee:	f100 0e01 	add.w	lr, r0, #1
 80295f2:	fb03 f308 	mul.w	r3, r3, r8
 80295f6:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80295fa:	4dc6      	ldr	r5, [pc, #792]	@ (8029914 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80295fc:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029600:	b2c9      	uxtb	r1, r1
 8029602:	00d2      	lsls	r2, r2, #3
 8029604:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8029608:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802960c:	430a      	orrs	r2, r1
 802960e:	1c59      	adds	r1, r3, #1
 8029610:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029614:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8029618:	e748      	b.n	80294ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802961a:	f112 0801 	adds.w	r8, r2, #1
 802961e:	f53f af4b 	bmi.w	80294b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029622:	4543      	cmp	r3, r8
 8029624:	f6ff af48 	blt.w	80294b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029628:	f11c 0801 	adds.w	r8, ip, #1
 802962c:	f53f af44 	bmi.w	80294b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029630:	45c6      	cmp	lr, r8
 8029632:	f6ff af41 	blt.w	80294b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029636:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802963a:	fa0f f28e 	sxth.w	r2, lr
 802963e:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8029642:	9200      	str	r2, [sp, #0]
 8029644:	b21b      	sxth	r3, r3
 8029646:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029648:	4639      	mov	r1, r7
 802964a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802964c:	f7ff fc87 	bl	8028f5e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8029650:	e732      	b.n	80294b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029652:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029654:	1421      	asrs	r1, r4, #16
 8029656:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802965a:	1433      	asrs	r3, r6, #16
 802965c:	fb07 1303 	mla	r3, r7, r3, r1
 8029660:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029662:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8029664:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029668:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802966c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029670:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029674:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029678:	2a00      	cmp	r2, #0
 802967a:	f000 8108 	beq.w	802988e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802967e:	684d      	ldr	r5, [r1, #4]
 8029680:	950d      	str	r5, [sp, #52]	@ 0x34
 8029682:	0e2d      	lsrs	r5, r5, #24
 8029684:	9514      	str	r5, [sp, #80]	@ 0x50
 8029686:	b178      	cbz	r0, 80296a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029688:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 802968c:	3f01      	subs	r7, #1
 802968e:	00bf      	lsls	r7, r7, #2
 8029690:	3704      	adds	r7, #4
 8029692:	eb01 0e07 	add.w	lr, r1, r7
 8029696:	59c9      	ldr	r1, [r1, r7]
 8029698:	9109      	str	r1, [sp, #36]	@ 0x24
 802969a:	0e09      	lsrs	r1, r1, #24
 802969c:	9111      	str	r1, [sp, #68]	@ 0x44
 802969e:	f8de 1004 	ldr.w	r1, [lr, #4]
 80296a2:	910e      	str	r1, [sp, #56]	@ 0x38
 80296a4:	0e09      	lsrs	r1, r1, #24
 80296a6:	9115      	str	r1, [sp, #84]	@ 0x54
 80296a8:	b292      	uxth	r2, r2
 80296aa:	b280      	uxth	r0, r0
 80296ac:	fb02 f900 	mul.w	r9, r2, r0
 80296b0:	0112      	lsls	r2, r2, #4
 80296b2:	eba2 0e09 	sub.w	lr, r2, r9
 80296b6:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80296ba:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80296bc:	fa1f fe8e 	uxth.w	lr, lr
 80296c0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80296c4:	fb0e f202 	mul.w	r2, lr, r2
 80296c8:	b280      	uxth	r0, r0
 80296ca:	1a09      	subs	r1, r1, r0
 80296cc:	b289      	uxth	r1, r1
 80296ce:	fb01 220c 	mla	r2, r1, ip, r2
 80296d2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80296d4:	fb00 2205 	mla	r2, r0, r5, r2
 80296d8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80296da:	fb09 2205 	mla	r2, r9, r5, r2
 80296de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80296e2:	2a00      	cmp	r2, #0
 80296e4:	f000 80ca 	beq.w	802987c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80296e8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80296ec:	d019      	beq.n	8029722 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80296ee:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80296f2:	fb0c fa0a 	mul.w	sl, ip, sl
 80296f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80296fa:	fb0c fc03 	mul.w	ip, ip, r3
 80296fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029702:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029706:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802970a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802970e:	4453      	add	r3, sl
 8029710:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029714:	0a1b      	lsrs	r3, r3, #8
 8029716:	0a3f      	lsrs	r7, r7, #8
 8029718:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802971c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029720:	433b      	orrs	r3, r7
 8029722:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029724:	2dff      	cmp	r5, #255	@ 0xff
 8029726:	d020      	beq.n	802976a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8029728:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802972a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802972e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029730:	436f      	muls	r7, r5
 8029732:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029734:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029738:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802973c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802973e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029742:	fb05 fa0a 	mul.w	sl, r5, sl
 8029746:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802974a:	44bc      	add	ip, r7
 802974c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029750:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029754:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029758:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802975c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029760:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029764:	ea4c 050a 	orr.w	r5, ip, sl
 8029768:	950d      	str	r5, [sp, #52]	@ 0x34
 802976a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802976c:	2dff      	cmp	r5, #255	@ 0xff
 802976e:	d020      	beq.n	80297b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8029770:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029772:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029776:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029778:	436f      	muls	r7, r5
 802977a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802977c:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029780:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029782:	fb05 fa0c 	mul.w	sl, r5, ip
 8029786:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802978a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802978e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029792:	44bc      	add	ip, r7
 8029794:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029798:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802979c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80297a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80297a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80297a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80297ac:	ea4c 050a 	orr.w	r5, ip, sl
 80297b0:	9509      	str	r5, [sp, #36]	@ 0x24
 80297b2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80297b4:	2dff      	cmp	r5, #255	@ 0xff
 80297b6:	d020      	beq.n	80297fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80297b8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80297ba:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80297be:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80297c0:	436f      	muls	r7, r5
 80297c2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80297c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80297c8:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80297cc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80297ce:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80297d2:	fb05 fa0a 	mul.w	sl, r5, sl
 80297d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80297da:	44bc      	add	ip, r7
 80297dc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80297e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80297e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80297e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80297ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80297f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80297f4:	ea4c 050a 	orr.w	r5, ip, sl
 80297f8:	950e      	str	r5, [sp, #56]	@ 0x38
 80297fa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80297fc:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8029800:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029804:	fb0e f707 	mul.w	r7, lr, r7
 8029808:	fb01 770c 	mla	r7, r1, ip, r7
 802980c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802980e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029812:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029816:	fb00 770c 	mla	r7, r0, ip, r7
 802981a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802981c:	2aff      	cmp	r2, #255	@ 0xff
 802981e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029822:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029824:	fb09 770c 	mla	r7, r9, ip, r7
 8029828:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802982c:	fb0e fe0c 	mul.w	lr, lr, ip
 8029830:	fb01 e303 	mla	r3, r1, r3, lr
 8029834:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029836:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802983a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802983e:	fb00 330a 	mla	r3, r0, sl, r3
 8029842:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8029844:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029848:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 802984c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029850:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029854:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029858:	ea47 070c 	orr.w	r7, r7, ip
 802985c:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8029860:	d11e      	bne.n	80298a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029862:	097a      	lsrs	r2, r7, #5
 8029864:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8029868:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802986c:	f023 0307 	bic.w	r3, r3, #7
 8029870:	4313      	orrs	r3, r2
 8029872:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029876:	431f      	orrs	r7, r3
 8029878:	f8a8 7000 	strh.w	r7, [r8]
 802987c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802987e:	f108 0802 	add.w	r8, r8, #2
 8029882:	441c      	add	r4, r3
 8029884:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029886:	f10b 3bff 	add.w	fp, fp, #4294967295
 802988a:	441e      	add	r6, r3
 802988c:	e643      	b.n	8029516 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802988e:	2800      	cmp	r0, #0
 8029890:	f43f af0a 	beq.w	80296a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029894:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8029898:	9109      	str	r1, [sp, #36]	@ 0x24
 802989a:	0e09      	lsrs	r1, r1, #24
 802989c:	9111      	str	r1, [sp, #68]	@ 0x44
 802989e:	e703      	b.n	80296a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80298a0:	43d2      	mvns	r2, r2
 80298a2:	f8b8 1000 	ldrh.w	r1, [r8]
 80298a6:	fa5f fe82 	uxtb.w	lr, r2
 80298aa:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80298ae:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80298b2:	fb0c fc0e 	mul.w	ip, ip, lr
 80298b6:	10c8      	asrs	r0, r1, #3
 80298b8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80298bc:	fb00 f00e 	mul.w	r0, r0, lr
 80298c0:	00ca      	lsls	r2, r1, #3
 80298c2:	f10c 0101 	add.w	r1, ip, #1
 80298c6:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80298ca:	b2d2      	uxtb	r2, r2
 80298cc:	0c39      	lsrs	r1, r7, #16
 80298ce:	fb02 f20e 	mul.w	r2, r2, lr
 80298d2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80298d6:	490f      	ldr	r1, [pc, #60]	@ (8029914 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80298d8:	fa5f fc8c 	uxtb.w	ip, ip
 80298dc:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80298e0:	1c41      	adds	r1, r0, #1
 80298e2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80298e6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80298ea:	1c51      	adds	r1, r2, #1
 80298ec:	00c0      	lsls	r0, r0, #3
 80298ee:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80298f2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80298f6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80298fa:	ea4c 0c00 	orr.w	ip, ip, r0
 80298fe:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029902:	ea47 0c0c 	orr.w	ip, r7, ip
 8029906:	f8a8 c000 	strh.w	ip, [r8]
 802990a:	e7b7      	b.n	802987c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802990c:	b01b      	add	sp, #108	@ 0x6c
 802990e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029912:	bf00      	nop
 8029914:	fffff800 	.word	0xfffff800

08029918 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8029918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802991c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8029920:	2d00      	cmp	r5, #0
 8029922:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029926:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802992a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802992e:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8029932:	fb05 0e03 	mla	lr, r5, r3, r0
 8029936:	f2c0 808c 	blt.w	8029a52 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802993a:	45a9      	cmp	r9, r5
 802993c:	f340 8089 	ble.w	8029a52 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8029940:	2800      	cmp	r0, #0
 8029942:	f2c0 8084 	blt.w	8029a4e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8029946:	4580      	cmp	r8, r0
 8029948:	f340 8081 	ble.w	8029a4e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802994c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8029950:	5d16      	ldrb	r6, [r2, r4]
 8029952:	f01e 0f01 	tst.w	lr, #1
 8029956:	bf0c      	ite	eq
 8029958:	f006 060f 	andeq.w	r6, r6, #15
 802995c:	1136      	asrne	r6, r6, #4
 802995e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029962:	b2f6      	uxtb	r6, r6
 8029964:	1c44      	adds	r4, r0, #1
 8029966:	d477      	bmi.n	8029a58 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8029968:	45a0      	cmp	r8, r4
 802996a:	dd75      	ble.n	8029a58 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802996c:	2f00      	cmp	r7, #0
 802996e:	d075      	beq.n	8029a5c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8029970:	f10e 0a01 	add.w	sl, lr, #1
 8029974:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8029978:	5d14      	ldrb	r4, [r2, r4]
 802997a:	f01a 0f01 	tst.w	sl, #1
 802997e:	bf0c      	ite	eq
 8029980:	f004 040f 	andeq.w	r4, r4, #15
 8029984:	1124      	asrne	r4, r4, #4
 8029986:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802998a:	b2e4      	uxtb	r4, r4
 802998c:	3501      	adds	r5, #1
 802998e:	d469      	bmi.n	8029a64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029990:	45a9      	cmp	r9, r5
 8029992:	dd67      	ble.n	8029a64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029994:	f1bc 0f00 	cmp.w	ip, #0
 8029998:	d067      	beq.n	8029a6a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802999a:	2800      	cmp	r0, #0
 802999c:	db60      	blt.n	8029a60 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802999e:	4580      	cmp	r8, r0
 80299a0:	dd5e      	ble.n	8029a60 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80299a2:	eb03 090e 	add.w	r9, r3, lr
 80299a6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80299aa:	5d55      	ldrb	r5, [r2, r5]
 80299ac:	f019 0f01 	tst.w	r9, #1
 80299b0:	bf0c      	ite	eq
 80299b2:	f005 050f 	andeq.w	r5, r5, #15
 80299b6:	112d      	asrne	r5, r5, #4
 80299b8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80299bc:	b2ed      	uxtb	r5, r5
 80299be:	3001      	adds	r0, #1
 80299c0:	d456      	bmi.n	8029a70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80299c2:	4580      	cmp	r8, r0
 80299c4:	dd54      	ble.n	8029a70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80299c6:	2f00      	cmp	r7, #0
 80299c8:	d054      	beq.n	8029a74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80299ca:	3301      	adds	r3, #1
 80299cc:	449e      	add	lr, r3
 80299ce:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80299d2:	5cd0      	ldrb	r0, [r2, r3]
 80299d4:	f01e 0f01 	tst.w	lr, #1
 80299d8:	bf0c      	ite	eq
 80299da:	f000 000f 	andeq.w	r0, r0, #15
 80299de:	1100      	asrne	r0, r0, #4
 80299e0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80299e4:	b2c3      	uxtb	r3, r0
 80299e6:	b2ba      	uxth	r2, r7
 80299e8:	fa1f fc8c 	uxth.w	ip, ip
 80299ec:	fb02 f00c 	mul.w	r0, r2, ip
 80299f0:	0112      	lsls	r2, r2, #4
 80299f2:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80299f6:	1a12      	subs	r2, r2, r0
 80299f8:	b292      	uxth	r2, r2
 80299fa:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80299fe:	4362      	muls	r2, r4
 8029a00:	fa1f fc8c 	uxth.w	ip, ip
 8029a04:	eba7 070c 	sub.w	r7, r7, ip
 8029a08:	b2bf      	uxth	r7, r7
 8029a0a:	fb06 2207 	mla	r2, r6, r7, r2
 8029a0e:	fb0c 2505 	mla	r5, ip, r5, r2
 8029a12:	fb00 5303 	mla	r3, r0, r3, r5
 8029a16:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029a1a:	b1b3      	cbz	r3, 8029a4a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029a1c:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8029a20:	435a      	muls	r2, r3
 8029a22:	1c53      	adds	r3, r2, #1
 8029a24:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029a28:	4a2d      	ldr	r2, [pc, #180]	@ (8029ae0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8029a2a:	121b      	asrs	r3, r3, #8
 8029a2c:	6812      	ldr	r2, [r2, #0]
 8029a2e:	2bff      	cmp	r3, #255	@ 0xff
 8029a30:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8029a34:	d120      	bne.n	8029a78 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8029a36:	4b2b      	ldr	r3, [pc, #172]	@ (8029ae4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8029a38:	0950      	lsrs	r0, r2, #5
 8029a3a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029a3e:	4033      	ands	r3, r6
 8029a40:	4318      	orrs	r0, r3
 8029a42:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029a46:	4302      	orrs	r2, r0
 8029a48:	800a      	strh	r2, [r1, #0]
 8029a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029a4e:	2600      	movs	r6, #0
 8029a50:	e788      	b.n	8029964 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8029a52:	2400      	movs	r4, #0
 8029a54:	4626      	mov	r6, r4
 8029a56:	e799      	b.n	802998c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029a58:	2400      	movs	r4, #0
 8029a5a:	e797      	b.n	802998c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029a5c:	463c      	mov	r4, r7
 8029a5e:	e795      	b.n	802998c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029a60:	2500      	movs	r5, #0
 8029a62:	e7ac      	b.n	80299be <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8029a64:	2300      	movs	r3, #0
 8029a66:	461d      	mov	r5, r3
 8029a68:	e7bd      	b.n	80299e6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029a6a:	4663      	mov	r3, ip
 8029a6c:	4665      	mov	r5, ip
 8029a6e:	e7ba      	b.n	80299e6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029a70:	2300      	movs	r3, #0
 8029a72:	e7b8      	b.n	80299e6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029a74:	463b      	mov	r3, r7
 8029a76:	e7b6      	b.n	80299e6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029a78:	b29f      	uxth	r7, r3
 8029a7a:	43db      	mvns	r3, r3
 8029a7c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029a80:	880d      	ldrh	r5, [r1, #0]
 8029a82:	fb10 f007 	smulbb	r0, r0, r7
 8029a86:	b2f6      	uxtb	r6, r6
 8029a88:	b2d2      	uxtb	r2, r2
 8029a8a:	122c      	asrs	r4, r5, #8
 8029a8c:	fb12 f207 	smulbb	r2, r2, r7
 8029a90:	fb16 f607 	smulbb	r6, r6, r7
 8029a94:	b2db      	uxtb	r3, r3
 8029a96:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8029a9a:	fb04 0403 	mla	r4, r4, r3, r0
 8029a9e:	10e8      	asrs	r0, r5, #3
 8029aa0:	00ed      	lsls	r5, r5, #3
 8029aa2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029aa6:	b2ed      	uxtb	r5, r5
 8029aa8:	fb00 6603 	mla	r6, r0, r3, r6
 8029aac:	fb05 2303 	mla	r3, r5, r3, r2
 8029ab0:	b2a4      	uxth	r4, r4
 8029ab2:	b29a      	uxth	r2, r3
 8029ab4:	1c63      	adds	r3, r4, #1
 8029ab6:	b2b0      	uxth	r0, r6
 8029ab8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029abc:	1c53      	adds	r3, r2, #1
 8029abe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029ac2:	1c42      	adds	r2, r0, #1
 8029ac4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029ac8:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8029acc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029ad0:	0940      	lsrs	r0, r0, #5
 8029ad2:	4323      	orrs	r3, r4
 8029ad4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029ad8:	4303      	orrs	r3, r0
 8029ada:	800b      	strh	r3, [r1, #0]
 8029adc:	e7b5      	b.n	8029a4a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029ade:	bf00      	nop
 8029ae0:	2005bab4 	.word	0x2005bab4
 8029ae4:	00fff800 	.word	0x00fff800

08029ae8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029aec:	b097      	sub	sp, #92	@ 0x5c
 8029aee:	9214      	str	r2, [sp, #80]	@ 0x50
 8029af0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8029af2:	9015      	str	r0, [sp, #84]	@ 0x54
 8029af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8029af6:	6850      	ldr	r0, [r2, #4]
 8029af8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8029afc:	910d      	str	r1, [sp, #52]	@ 0x34
 8029afe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029b00:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8029b04:	fb00 1303 	mla	r3, r0, r3, r1
 8029b08:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 8029b0c:	6812      	ldr	r2, [r2, #0]
 8029b0e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029b12:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029b14:	689b      	ldr	r3, [r3, #8]
 8029b16:	3301      	adds	r3, #1
 8029b18:	f023 0301 	bic.w	r3, r3, #1
 8029b1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8029b1e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029b20:	681f      	ldr	r7, [r3, #0]
 8029b22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029b24:	2b00      	cmp	r3, #0
 8029b26:	dc03      	bgt.n	8029b30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029b28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029b2a:	2b00      	cmp	r3, #0
 8029b2c:	f340 8287 	ble.w	802a03e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8029b30:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029b32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029b36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029b3a:	1e48      	subs	r0, r1, #1
 8029b3c:	f102 3cff 	add.w	ip, r2, #4294967295
 8029b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b42:	2b00      	cmp	r3, #0
 8029b44:	f340 80c3 	ble.w	8029cce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029b48:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029b4c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029b50:	d406      	bmi.n	8029b60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029b52:	4586      	cmp	lr, r0
 8029b54:	da04      	bge.n	8029b60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029b56:	2b00      	cmp	r3, #0
 8029b58:	db02      	blt.n	8029b60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029b5a:	4563      	cmp	r3, ip
 8029b5c:	f2c0 80b8 	blt.w	8029cd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8029b60:	f11e 0e01 	adds.w	lr, lr, #1
 8029b64:	f100 80a9 	bmi.w	8029cba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029b68:	4571      	cmp	r1, lr
 8029b6a:	f2c0 80a6 	blt.w	8029cba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029b6e:	3301      	adds	r3, #1
 8029b70:	f100 80a3 	bmi.w	8029cba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029b74:	429a      	cmp	r2, r3
 8029b76:	f2c0 80a0 	blt.w	8029cba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029b7a:	46c8      	mov	r8, r9
 8029b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b7e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8029b82:	930e      	str	r3, [sp, #56]	@ 0x38
 8029b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029b86:	2b00      	cmp	r3, #0
 8029b88:	f340 80c2 	ble.w	8029d10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8029b8c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029b8e:	1430      	asrs	r0, r6, #16
 8029b90:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029b94:	1423      	asrs	r3, r4, #16
 8029b96:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029b9a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029b9e:	f100 814d 	bmi.w	8029e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029ba2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029ba6:	455b      	cmp	r3, fp
 8029ba8:	f280 8148 	bge.w	8029e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029bac:	2800      	cmp	r0, #0
 8029bae:	f2c0 8145 	blt.w	8029e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029bb2:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029bb6:	4558      	cmp	r0, fp
 8029bb8:	f280 8140 	bge.w	8029e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029bbc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029bbe:	fb00 3305 	mla	r3, r0, r5, r3
 8029bc2:	0858      	lsrs	r0, r3, #1
 8029bc4:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029bc8:	07dd      	lsls	r5, r3, #31
 8029bca:	bf54      	ite	pl
 8029bcc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029bd0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029bd4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029bd8:	fa5f fc8c 	uxtb.w	ip, ip
 8029bdc:	2a00      	cmp	r2, #0
 8029bde:	f000 80db 	beq.w	8029d98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8029be2:	1c58      	adds	r0, r3, #1
 8029be4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029be8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029bec:	07c0      	lsls	r0, r0, #31
 8029bee:	bf54      	ite	pl
 8029bf0:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029bf4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029bf8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029bfc:	fa5f f08e 	uxtb.w	r0, lr
 8029c00:	9010      	str	r0, [sp, #64]	@ 0x40
 8029c02:	b1c9      	cbz	r1, 8029c38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8029c04:	4453      	add	r3, sl
 8029c06:	0858      	lsrs	r0, r3, #1
 8029c08:	5c38      	ldrb	r0, [r7, r0]
 8029c0a:	07dd      	lsls	r5, r3, #31
 8029c0c:	bf54      	ite	pl
 8029c0e:	f000 000f 	andpl.w	r0, r0, #15
 8029c12:	1100      	asrmi	r0, r0, #4
 8029c14:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029c18:	3301      	adds	r3, #1
 8029c1a:	b2c0      	uxtb	r0, r0
 8029c1c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8029c1e:	0858      	lsrs	r0, r3, #1
 8029c20:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029c24:	07dd      	lsls	r5, r3, #31
 8029c26:	bf54      	ite	pl
 8029c28:	f00e 030f 	andpl.w	r3, lr, #15
 8029c2c:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029c30:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029c34:	b2db      	uxtb	r3, r3
 8029c36:	9311      	str	r3, [sp, #68]	@ 0x44
 8029c38:	b292      	uxth	r2, r2
 8029c3a:	b289      	uxth	r1, r1
 8029c3c:	fb02 f301 	mul.w	r3, r2, r1
 8029c40:	0112      	lsls	r2, r2, #4
 8029c42:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8029c46:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029c48:	1ad2      	subs	r2, r2, r3
 8029c4a:	b292      	uxth	r2, r2
 8029c4c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029c50:	436a      	muls	r2, r5
 8029c52:	b289      	uxth	r1, r1
 8029c54:	1a40      	subs	r0, r0, r1
 8029c56:	b280      	uxth	r0, r0
 8029c58:	fb0c 2c00 	mla	ip, ip, r0, r2
 8029c5c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029c5e:	fb01 c102 	mla	r1, r1, r2, ip
 8029c62:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029c64:	fb03 1302 	mla	r3, r3, r2, r1
 8029c68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029c6c:	b1db      	cbz	r3, 8029ca6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029c6e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029c70:	4353      	muls	r3, r2
 8029c72:	1c5a      	adds	r2, r3, #1
 8029c74:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029c78:	4ac6      	ldr	r2, [pc, #792]	@ (8029f94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8029c7a:	121b      	asrs	r3, r3, #8
 8029c7c:	6812      	ldr	r2, [r2, #0]
 8029c7e:	2bff      	cmp	r3, #255	@ 0xff
 8029c80:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029c84:	f040 8099 	bne.w	8029dba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8029c88:	0953      	lsrs	r3, r2, #5
 8029c8a:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8029c8e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029c92:	f02c 0c07 	bic.w	ip, ip, #7
 8029c96:	ea43 0c0c 	orr.w	ip, r3, ip
 8029c9a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029c9e:	ea4c 0202 	orr.w	r2, ip, r2
 8029ca2:	f8a8 2000 	strh.w	r2, [r8]
 8029ca6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029ca8:	f108 0802 	add.w	r8, r8, #2
 8029cac:	441c      	add	r4, r3
 8029cae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029cb0:	441e      	add	r6, r3
 8029cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029cb4:	3b01      	subs	r3, #1
 8029cb6:	930e      	str	r3, [sp, #56]	@ 0x38
 8029cb8:	e764      	b.n	8029b84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029cba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029cbc:	f109 0902 	add.w	r9, r9, #2
 8029cc0:	441c      	add	r4, r3
 8029cc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029cc4:	441e      	add	r6, r3
 8029cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029cc8:	3b01      	subs	r3, #1
 8029cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8029ccc:	e738      	b.n	8029b40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8029cce:	d024      	beq.n	8029d1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8029cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029cd2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8029cd4:	3b01      	subs	r3, #1
 8029cd6:	fb00 4003 	mla	r0, r0, r3, r4
 8029cda:	1400      	asrs	r0, r0, #16
 8029cdc:	f53f af4d 	bmi.w	8029b7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029ce0:	3901      	subs	r1, #1
 8029ce2:	4288      	cmp	r0, r1
 8029ce4:	f6bf af49 	bge.w	8029b7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029ce8:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8029cea:	fb01 6303 	mla	r3, r1, r3, r6
 8029cee:	141b      	asrs	r3, r3, #16
 8029cf0:	f53f af43 	bmi.w	8029b7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029cf4:	3a01      	subs	r2, #1
 8029cf6:	4293      	cmp	r3, r2
 8029cf8:	f6bf af3f 	bge.w	8029b7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029cfc:	46c8      	mov	r8, r9
 8029cfe:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8029d02:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8029d06:	930e      	str	r3, [sp, #56]	@ 0x38
 8029d08:	f1bb 0f00 	cmp.w	fp, #0
 8029d0c:	f300 80b7 	bgt.w	8029e7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8029d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029d12:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029d16:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029d1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029d1c:	2b00      	cmp	r3, #0
 8029d1e:	f340 818e 	ble.w	802a03e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8029d22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029d26:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029d2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029d2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029d32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029d36:	eef0 6a62 	vmov.f32	s13, s5
 8029d3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029d3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029d42:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029d46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029d4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029d4e:	ee16 4a90 	vmov	r4, s13
 8029d52:	eef0 6a43 	vmov.f32	s13, s6
 8029d56:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029d5a:	ee12 2a90 	vmov	r2, s5
 8029d5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029d62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029d64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029d68:	fb92 f3f3 	sdiv	r3, r2, r3
 8029d6c:	ee13 2a10 	vmov	r2, s6
 8029d70:	9323      	str	r3, [sp, #140]	@ 0x8c
 8029d72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029d74:	ee16 6a90 	vmov	r6, s13
 8029d78:	fb92 f3f3 	sdiv	r3, r2, r3
 8029d7c:	9324      	str	r3, [sp, #144]	@ 0x90
 8029d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029d80:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8029d82:	3b01      	subs	r3, #1
 8029d84:	930d      	str	r3, [sp, #52]	@ 0x34
 8029d86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029d88:	bf08      	it	eq
 8029d8a:	4613      	moveq	r3, r2
 8029d8c:	eeb0 3a67 	vmov.f32	s6, s15
 8029d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8029d92:	eef0 2a47 	vmov.f32	s5, s14
 8029d96:	e6c4      	b.n	8029b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8029d98:	2900      	cmp	r1, #0
 8029d9a:	f43f af4d 	beq.w	8029c38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8029d9e:	eb0a 0003 	add.w	r0, sl, r3
 8029da2:	0843      	lsrs	r3, r0, #1
 8029da4:	5cfb      	ldrb	r3, [r7, r3]
 8029da6:	07c0      	lsls	r0, r0, #31
 8029da8:	bf54      	ite	pl
 8029daa:	f003 030f 	andpl.w	r3, r3, #15
 8029dae:	111b      	asrmi	r3, r3, #4
 8029db0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029db4:	b2db      	uxtb	r3, r3
 8029db6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029db8:	e73e      	b.n	8029c38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8029dba:	fa1f fb83 	uxth.w	fp, r3
 8029dbe:	43db      	mvns	r3, r3
 8029dc0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029dc4:	f8b8 e000 	ldrh.w	lr, [r8]
 8029dc8:	fb11 f10b 	smulbb	r1, r1, fp
 8029dcc:	fa5f fc8c 	uxtb.w	ip, ip
 8029dd0:	b2d2      	uxtb	r2, r2
 8029dd2:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029dd6:	fb1c fc0b 	smulbb	ip, ip, fp
 8029dda:	fb12 fb0b 	smulbb	fp, r2, fp
 8029dde:	b2db      	uxtb	r3, r3
 8029de0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029de4:	fb00 1003 	mla	r0, r0, r3, r1
 8029de8:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029dec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029df0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8029df4:	fa5f fe8e 	uxtb.w	lr, lr
 8029df8:	fb01 cc03 	mla	ip, r1, r3, ip
 8029dfc:	fb0e bb03 	mla	fp, lr, r3, fp
 8029e00:	b280      	uxth	r0, r0
 8029e02:	1c43      	adds	r3, r0, #1
 8029e04:	fa1f fc8c 	uxth.w	ip, ip
 8029e08:	fa1f fb8b 	uxth.w	fp, fp
 8029e0c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029e10:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 8029e14:	f10c 0101 	add.w	r1, ip, #1
 8029e18:	f10b 0001 	add.w	r0, fp, #1
 8029e1c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029e20:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029e24:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029e28:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029e2c:	4318      	orrs	r0, r3
 8029e2e:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8029e32:	ea40 000c 	orr.w	r0, r0, ip
 8029e36:	f8a8 0000 	strh.w	r0, [r8]
 8029e3a:	e734      	b.n	8029ca6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029e3c:	f113 0b01 	adds.w	fp, r3, #1
 8029e40:	f53f af31 	bmi.w	8029ca6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029e44:	45dc      	cmp	ip, fp
 8029e46:	f6ff af2e 	blt.w	8029ca6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029e4a:	f110 0b01 	adds.w	fp, r0, #1
 8029e4e:	f53f af2a 	bmi.w	8029ca6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029e52:	45de      	cmp	lr, fp
 8029e54:	f6ff af27 	blt.w	8029ca6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029e58:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029e5a:	9302      	str	r3, [sp, #8]
 8029e5c:	fa0f f38e 	sxth.w	r3, lr
 8029e60:	9301      	str	r3, [sp, #4]
 8029e62:	fa0f f38c 	sxth.w	r3, ip
 8029e66:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029e6a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8029e6e:	9300      	str	r3, [sp, #0]
 8029e70:	463a      	mov	r2, r7
 8029e72:	4653      	mov	r3, sl
 8029e74:	4641      	mov	r1, r8
 8029e76:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8029e78:	f7ff fd4e 	bl	8029918 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8029e7c:	e713      	b.n	8029ca6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029e7e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029e80:	1422      	asrs	r2, r4, #16
 8029e82:	1433      	asrs	r3, r6, #16
 8029e84:	fb05 2303 	mla	r3, r5, r3, r2
 8029e88:	085a      	lsrs	r2, r3, #1
 8029e8a:	5cba      	ldrb	r2, [r7, r2]
 8029e8c:	07dd      	lsls	r5, r3, #31
 8029e8e:	bf54      	ite	pl
 8029e90:	f002 020f 	andpl.w	r2, r2, #15
 8029e94:	1112      	asrmi	r2, r2, #4
 8029e96:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029e9a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029e9e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029ea2:	b2d2      	uxtb	r2, r2
 8029ea4:	2900      	cmp	r1, #0
 8029ea6:	d077      	beq.n	8029f98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8029ea8:	f103 0e01 	add.w	lr, r3, #1
 8029eac:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8029eb0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029eb4:	f01e 0f01 	tst.w	lr, #1
 8029eb8:	bf0c      	ite	eq
 8029eba:	f00c 0c0f 	andeq.w	ip, ip, #15
 8029ebe:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8029ec2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029ec6:	fa5f f58c 	uxtb.w	r5, ip
 8029eca:	9512      	str	r5, [sp, #72]	@ 0x48
 8029ecc:	b300      	cbz	r0, 8029f10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8029ece:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029ed0:	442b      	add	r3, r5
 8029ed2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029ed6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029eda:	07dd      	lsls	r5, r3, #31
 8029edc:	bf54      	ite	pl
 8029ede:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029ee2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029ee6:	3301      	adds	r3, #1
 8029ee8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029eec:	fa5f f58c 	uxtb.w	r5, ip
 8029ef0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029ef4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029ef8:	950c      	str	r5, [sp, #48]	@ 0x30
 8029efa:	07dd      	lsls	r5, r3, #31
 8029efc:	bf54      	ite	pl
 8029efe:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029f02:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029f06:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029f0a:	fa5f f38c 	uxtb.w	r3, ip
 8029f0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029f10:	b289      	uxth	r1, r1
 8029f12:	b280      	uxth	r0, r0
 8029f14:	fb01 f300 	mul.w	r3, r1, r0
 8029f18:	0109      	lsls	r1, r1, #4
 8029f1a:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8029f1e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029f20:	1ac9      	subs	r1, r1, r3
 8029f22:	b289      	uxth	r1, r1
 8029f24:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8029f28:	4369      	muls	r1, r5
 8029f2a:	b280      	uxth	r0, r0
 8029f2c:	ebac 0c00 	sub.w	ip, ip, r0
 8029f30:	fa1f fc8c 	uxth.w	ip, ip
 8029f34:	fb02 120c 	mla	r2, r2, ip, r1
 8029f38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029f3a:	fb00 2001 	mla	r0, r0, r1, r2
 8029f3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029f40:	fb03 0302 	mla	r3, r3, r2, r0
 8029f44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029f48:	b1d3      	cbz	r3, 8029f80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8029f4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029f4c:	4353      	muls	r3, r2
 8029f4e:	1c5a      	adds	r2, r3, #1
 8029f50:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029f54:	4a0f      	ldr	r2, [pc, #60]	@ (8029f94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8029f56:	121b      	asrs	r3, r3, #8
 8029f58:	6812      	ldr	r2, [r2, #0]
 8029f5a:	2bff      	cmp	r3, #255	@ 0xff
 8029f5c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029f60:	d12e      	bne.n	8029fc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8029f62:	0953      	lsrs	r3, r2, #5
 8029f64:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8029f68:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029f6c:	f02c 0c07 	bic.w	ip, ip, #7
 8029f70:	ea43 0c0c 	orr.w	ip, r3, ip
 8029f74:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029f78:	ea4c 0202 	orr.w	r2, ip, r2
 8029f7c:	f8a8 2000 	strh.w	r2, [r8]
 8029f80:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029f82:	f108 0802 	add.w	r8, r8, #2
 8029f86:	441c      	add	r4, r3
 8029f88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029f8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029f8e:	441e      	add	r6, r3
 8029f90:	e6ba      	b.n	8029d08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8029f92:	bf00      	nop
 8029f94:	2005bab4 	.word	0x2005bab4
 8029f98:	2800      	cmp	r0, #0
 8029f9a:	d0b9      	beq.n	8029f10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8029f9c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029f9e:	442b      	add	r3, r5
 8029fa0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029fa4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029fa8:	07db      	lsls	r3, r3, #31
 8029faa:	bf54      	ite	pl
 8029fac:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029fb0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029fb4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029fb8:	fa5f f38c 	uxtb.w	r3, ip
 8029fbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8029fbe:	e7a7      	b.n	8029f10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8029fc0:	fa1f fa83 	uxth.w	sl, r3
 8029fc4:	43db      	mvns	r3, r3
 8029fc6:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029fca:	f8b8 e000 	ldrh.w	lr, [r8]
 8029fce:	fb11 f10a 	smulbb	r1, r1, sl
 8029fd2:	b2d2      	uxtb	r2, r2
 8029fd4:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029fd8:	fb12 f20a 	smulbb	r2, r2, sl
 8029fdc:	b2db      	uxtb	r3, r3
 8029fde:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029fe2:	fb00 1003 	mla	r0, r0, r3, r1
 8029fe6:	fa5f fc8c 	uxtb.w	ip, ip
 8029fea:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029fee:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029ff2:	fb1c fc0a 	smulbb	ip, ip, sl
 8029ff6:	fa5f fe8e 	uxtb.w	lr, lr
 8029ffa:	fb0e 2203 	mla	r2, lr, r3, r2
 8029ffe:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802a002:	fb01 cc03 	mla	ip, r1, r3, ip
 802a006:	b280      	uxth	r0, r0
 802a008:	b292      	uxth	r2, r2
 802a00a:	1c43      	adds	r3, r0, #1
 802a00c:	1c51      	adds	r1, r2, #1
 802a00e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a012:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802a016:	fa1f fc8c 	uxth.w	ip, ip
 802a01a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a01e:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802a022:	4308      	orrs	r0, r1
 802a024:	f10c 0101 	add.w	r1, ip, #1
 802a028:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a02c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a030:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802a034:	ea40 000c 	orr.w	r0, r0, ip
 802a038:	f8a8 0000 	strh.w	r0, [r8]
 802a03c:	e7a0      	b.n	8029f80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802a03e:	b017      	add	sp, #92	@ 0x5c
 802a040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a044 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802a044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a048:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802a04c:	2d00      	cmp	r5, #0
 802a04e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a052:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802a056:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802a05a:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802a05e:	fb05 0e03 	mla	lr, r5, r3, r0
 802a062:	f2c0 80b0 	blt.w	802a1c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a066:	45a9      	cmp	r9, r5
 802a068:	f340 80ad 	ble.w	802a1c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a06c:	2800      	cmp	r0, #0
 802a06e:	f2c0 80a8 	blt.w	802a1c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a072:	4580      	cmp	r8, r0
 802a074:	f340 80a5 	ble.w	802a1c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a078:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802a07c:	5d16      	ldrb	r6, [r2, r4]
 802a07e:	f01e 0f01 	tst.w	lr, #1
 802a082:	bf0c      	ite	eq
 802a084:	f006 060f 	andeq.w	r6, r6, #15
 802a088:	1136      	asrne	r6, r6, #4
 802a08a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a08e:	b2f6      	uxtb	r6, r6
 802a090:	1c44      	adds	r4, r0, #1
 802a092:	f100 809b 	bmi.w	802a1cc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a096:	45a0      	cmp	r8, r4
 802a098:	f340 8098 	ble.w	802a1cc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a09c:	2f00      	cmp	r7, #0
 802a09e:	f000 8097 	beq.w	802a1d0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802a0a2:	f10e 0a01 	add.w	sl, lr, #1
 802a0a6:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802a0aa:	5d14      	ldrb	r4, [r2, r4]
 802a0ac:	f01a 0f01 	tst.w	sl, #1
 802a0b0:	bf0c      	ite	eq
 802a0b2:	f004 040f 	andeq.w	r4, r4, #15
 802a0b6:	1124      	asrne	r4, r4, #4
 802a0b8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a0bc:	b2e4      	uxtb	r4, r4
 802a0be:	3501      	adds	r5, #1
 802a0c0:	f100 808a 	bmi.w	802a1d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a0c4:	45a9      	cmp	r9, r5
 802a0c6:	f340 8087 	ble.w	802a1d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a0ca:	f1bc 0f00 	cmp.w	ip, #0
 802a0ce:	f000 8086 	beq.w	802a1de <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802a0d2:	2800      	cmp	r0, #0
 802a0d4:	db7e      	blt.n	802a1d4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a0d6:	4580      	cmp	r8, r0
 802a0d8:	dd7c      	ble.n	802a1d4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a0da:	eb03 090e 	add.w	r9, r3, lr
 802a0de:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802a0e2:	5d55      	ldrb	r5, [r2, r5]
 802a0e4:	f019 0f01 	tst.w	r9, #1
 802a0e8:	bf0c      	ite	eq
 802a0ea:	f005 050f 	andeq.w	r5, r5, #15
 802a0ee:	112d      	asrne	r5, r5, #4
 802a0f0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a0f4:	b2ed      	uxtb	r5, r5
 802a0f6:	3001      	adds	r0, #1
 802a0f8:	d474      	bmi.n	802a1e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a0fa:	4580      	cmp	r8, r0
 802a0fc:	dd72      	ble.n	802a1e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a0fe:	2f00      	cmp	r7, #0
 802a100:	d072      	beq.n	802a1e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a102:	3301      	adds	r3, #1
 802a104:	449e      	add	lr, r3
 802a106:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a10a:	5cd0      	ldrb	r0, [r2, r3]
 802a10c:	f01e 0f01 	tst.w	lr, #1
 802a110:	bf0c      	ite	eq
 802a112:	f000 000f 	andeq.w	r0, r0, #15
 802a116:	1100      	asrne	r0, r0, #4
 802a118:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a11c:	b2c3      	uxtb	r3, r0
 802a11e:	b2ba      	uxth	r2, r7
 802a120:	fa1f fc8c 	uxth.w	ip, ip
 802a124:	fb02 f00c 	mul.w	r0, r2, ip
 802a128:	0112      	lsls	r2, r2, #4
 802a12a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802a12e:	1a12      	subs	r2, r2, r0
 802a130:	b292      	uxth	r2, r2
 802a132:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802a136:	4362      	muls	r2, r4
 802a138:	fa1f fc8c 	uxth.w	ip, ip
 802a13c:	eba7 070c 	sub.w	r7, r7, ip
 802a140:	b2bf      	uxth	r7, r7
 802a142:	fb06 2207 	mla	r2, r6, r7, r2
 802a146:	fb0c 2505 	mla	r5, ip, r5, r2
 802a14a:	fb00 5303 	mla	r3, r0, r3, r5
 802a14e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a152:	b3a3      	cbz	r3, 802a1be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802a154:	4a25      	ldr	r2, [pc, #148]	@ (802a1ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802a156:	880e      	ldrh	r6, [r1, #0]
 802a158:	6815      	ldr	r5, [r2, #0]
 802a15a:	b29a      	uxth	r2, r3
 802a15c:	43db      	mvns	r3, r3
 802a15e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a162:	fb10 f002 	smulbb	r0, r0, r2
 802a166:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a16a:	b2ed      	uxtb	r5, r5
 802a16c:	1234      	asrs	r4, r6, #8
 802a16e:	fb17 f702 	smulbb	r7, r7, r2
 802a172:	fb15 f202 	smulbb	r2, r5, r2
 802a176:	b2db      	uxtb	r3, r3
 802a178:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802a17c:	fb04 0403 	mla	r4, r4, r3, r0
 802a180:	10f0      	asrs	r0, r6, #3
 802a182:	00f6      	lsls	r6, r6, #3
 802a184:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a188:	b2f6      	uxtb	r6, r6
 802a18a:	fb00 7003 	mla	r0, r0, r3, r7
 802a18e:	fb06 2303 	mla	r3, r6, r3, r2
 802a192:	b2a4      	uxth	r4, r4
 802a194:	b29a      	uxth	r2, r3
 802a196:	1c63      	adds	r3, r4, #1
 802a198:	b280      	uxth	r0, r0
 802a19a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a19e:	1c53      	adds	r3, r2, #1
 802a1a0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a1a4:	1c42      	adds	r2, r0, #1
 802a1a6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a1aa:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802a1ae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a1b2:	0940      	lsrs	r0, r0, #5
 802a1b4:	4323      	orrs	r3, r4
 802a1b6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a1ba:	4303      	orrs	r3, r0
 802a1bc:	800b      	strh	r3, [r1, #0]
 802a1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a1c2:	2600      	movs	r6, #0
 802a1c4:	e764      	b.n	802a090 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802a1c6:	2400      	movs	r4, #0
 802a1c8:	4626      	mov	r6, r4
 802a1ca:	e778      	b.n	802a0be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a1cc:	2400      	movs	r4, #0
 802a1ce:	e776      	b.n	802a0be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a1d0:	463c      	mov	r4, r7
 802a1d2:	e774      	b.n	802a0be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a1d4:	2500      	movs	r5, #0
 802a1d6:	e78e      	b.n	802a0f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802a1d8:	2300      	movs	r3, #0
 802a1da:	461d      	mov	r5, r3
 802a1dc:	e79f      	b.n	802a11e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a1de:	4663      	mov	r3, ip
 802a1e0:	4665      	mov	r5, ip
 802a1e2:	e79c      	b.n	802a11e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a1e4:	2300      	movs	r3, #0
 802a1e6:	e79a      	b.n	802a11e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a1e8:	463b      	mov	r3, r7
 802a1ea:	e798      	b.n	802a11e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a1ec:	2005bab4 	.word	0x2005bab4

0802a1f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a1f4:	b093      	sub	sp, #76	@ 0x4c
 802a1f6:	920c      	str	r2, [sp, #48]	@ 0x30
 802a1f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802a1fa:	9011      	str	r0, [sp, #68]	@ 0x44
 802a1fc:	6850      	ldr	r0, [r2, #4]
 802a1fe:	9107      	str	r1, [sp, #28]
 802a200:	461d      	mov	r5, r3
 802a202:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802a206:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802a20a:	fb00 1303 	mla	r3, r0, r3, r1
 802a20e:	6812      	ldr	r2, [r2, #0]
 802a210:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a214:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a216:	689b      	ldr	r3, [r3, #8]
 802a218:	3301      	adds	r3, #1
 802a21a:	f023 0301 	bic.w	r3, r3, #1
 802a21e:	9306      	str	r3, [sp, #24]
 802a220:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a222:	681f      	ldr	r7, [r3, #0]
 802a224:	9b07      	ldr	r3, [sp, #28]
 802a226:	2b00      	cmp	r3, #0
 802a228:	dc03      	bgt.n	802a232 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802a22a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a22c:	2b00      	cmp	r3, #0
 802a22e:	f340 8265 	ble.w	802a6fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802a232:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a234:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a238:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a23c:	1e48      	subs	r0, r1, #1
 802a23e:	f102 3cff 	add.w	ip, r2, #4294967295
 802a242:	2d00      	cmp	r5, #0
 802a244:	f340 80b7 	ble.w	802a3b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a248:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a24c:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a250:	d406      	bmi.n	802a260 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a252:	4586      	cmp	lr, r0
 802a254:	da04      	bge.n	802a260 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a256:	2b00      	cmp	r3, #0
 802a258:	db02      	blt.n	802a260 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a25a:	4563      	cmp	r3, ip
 802a25c:	f2c0 80ac 	blt.w	802a3b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802a260:	f11e 0e01 	adds.w	lr, lr, #1
 802a264:	f100 809f 	bmi.w	802a3a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a268:	4571      	cmp	r1, lr
 802a26a:	f2c0 809c 	blt.w	802a3a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a26e:	3301      	adds	r3, #1
 802a270:	f100 8099 	bmi.w	802a3a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a274:	429a      	cmp	r2, r3
 802a276:	f2c0 8096 	blt.w	802a3a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a27a:	46c8      	mov	r8, r9
 802a27c:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a280:	9509      	str	r5, [sp, #36]	@ 0x24
 802a282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a284:	2b00      	cmp	r3, #0
 802a286:	f340 80b5 	ble.w	802a3f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802a28a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a28e:	9308      	str	r3, [sp, #32]
 802a290:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a292:	1430      	asrs	r0, r6, #16
 802a294:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a298:	1423      	asrs	r3, r4, #16
 802a29a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a29e:	f100 813e 	bmi.w	802a51e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a2a2:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a2a6:	455b      	cmp	r3, fp
 802a2a8:	f280 8139 	bge.w	802a51e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a2ac:	2800      	cmp	r0, #0
 802a2ae:	f2c0 8136 	blt.w	802a51e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a2b2:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a2b6:	4558      	cmp	r0, fp
 802a2b8:	f280 8131 	bge.w	802a51e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a2bc:	9a06      	ldr	r2, [sp, #24]
 802a2be:	fb00 3302 	mla	r3, r0, r2, r3
 802a2c2:	0858      	lsrs	r0, r3, #1
 802a2c4:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a2c8:	07da      	lsls	r2, r3, #31
 802a2ca:	bf54      	ite	pl
 802a2cc:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a2d0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a2d4:	9a08      	ldr	r2, [sp, #32]
 802a2d6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a2da:	fa5f fc8c 	uxtb.w	ip, ip
 802a2de:	2a00      	cmp	r2, #0
 802a2e0:	f000 80cb 	beq.w	802a47a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802a2e4:	1c58      	adds	r0, r3, #1
 802a2e6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a2ea:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a2ee:	07c0      	lsls	r0, r0, #31
 802a2f0:	bf54      	ite	pl
 802a2f2:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a2f6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a2fa:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a2fe:	fa5f fe8e 	uxtb.w	lr, lr
 802a302:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802a306:	b1b9      	cbz	r1, 802a338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a308:	4453      	add	r3, sl
 802a30a:	0858      	lsrs	r0, r3, #1
 802a30c:	5c38      	ldrb	r0, [r7, r0]
 802a30e:	07da      	lsls	r2, r3, #31
 802a310:	bf54      	ite	pl
 802a312:	f000 000f 	andpl.w	r0, r0, #15
 802a316:	1100      	asrmi	r0, r0, #4
 802a318:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a31c:	b2c0      	uxtb	r0, r0
 802a31e:	900a      	str	r0, [sp, #40]	@ 0x28
 802a320:	1c58      	adds	r0, r3, #1
 802a322:	0843      	lsrs	r3, r0, #1
 802a324:	5cfb      	ldrb	r3, [r7, r3]
 802a326:	07c2      	lsls	r2, r0, #31
 802a328:	bf54      	ite	pl
 802a32a:	f003 030f 	andpl.w	r3, r3, #15
 802a32e:	111b      	asrmi	r3, r3, #4
 802a330:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a334:	b2db      	uxtb	r3, r3
 802a336:	930e      	str	r3, [sp, #56]	@ 0x38
 802a338:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a33c:	b289      	uxth	r1, r1
 802a33e:	fb02 f301 	mul.w	r3, r2, r1
 802a342:	0112      	lsls	r2, r2, #4
 802a344:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a348:	b289      	uxth	r1, r1
 802a34a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802a34e:	1a40      	subs	r0, r0, r1
 802a350:	fa1f fe80 	uxth.w	lr, r0
 802a354:	1ad2      	subs	r2, r2, r3
 802a356:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a358:	b292      	uxth	r2, r2
 802a35a:	4342      	muls	r2, r0
 802a35c:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a360:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a362:	fb01 c102 	mla	r1, r1, r2, ip
 802a366:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a368:	fb03 1302 	mla	r3, r3, r2, r1
 802a36c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a370:	2bff      	cmp	r3, #255	@ 0xff
 802a372:	f040 8093 	bne.w	802a49c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802a376:	4bbe      	ldr	r3, [pc, #760]	@ (802a670 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a378:	681a      	ldr	r2, [r3, #0]
 802a37a:	4bbe      	ldr	r3, [pc, #760]	@ (802a674 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a37c:	0951      	lsrs	r1, r2, #5
 802a37e:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a382:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a386:	430b      	orrs	r3, r1
 802a388:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a38c:	4313      	orrs	r3, r2
 802a38e:	f8a8 3000 	strh.w	r3, [r8]
 802a392:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a394:	f108 0802 	add.w	r8, r8, #2
 802a398:	441c      	add	r4, r3
 802a39a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a39c:	441e      	add	r6, r3
 802a39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a3a0:	3b01      	subs	r3, #1
 802a3a2:	9309      	str	r3, [sp, #36]	@ 0x24
 802a3a4:	e76d      	b.n	802a282 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a3a6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a3a8:	3d01      	subs	r5, #1
 802a3aa:	441c      	add	r4, r3
 802a3ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a3ae:	f109 0902 	add.w	r9, r9, #2
 802a3b2:	441e      	add	r6, r3
 802a3b4:	e745      	b.n	802a242 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802a3b6:	d021      	beq.n	802a3fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802a3b8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802a3ba:	1e6b      	subs	r3, r5, #1
 802a3bc:	fb00 4003 	mla	r0, r0, r3, r4
 802a3c0:	1400      	asrs	r0, r0, #16
 802a3c2:	f53f af5a 	bmi.w	802a27a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a3c6:	3901      	subs	r1, #1
 802a3c8:	4288      	cmp	r0, r1
 802a3ca:	f6bf af56 	bge.w	802a27a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a3ce:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802a3d0:	fb01 6303 	mla	r3, r1, r3, r6
 802a3d4:	141b      	asrs	r3, r3, #16
 802a3d6:	f53f af50 	bmi.w	802a27a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a3da:	3a01      	subs	r2, #1
 802a3dc:	4293      	cmp	r3, r2
 802a3de:	f6bf af4c 	bge.w	802a27a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a3e2:	46a8      	mov	r8, r5
 802a3e4:	46ce      	mov	lr, r9
 802a3e6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a3ea:	9308      	str	r3, [sp, #32]
 802a3ec:	f1b8 0f00 	cmp.w	r8, #0
 802a3f0:	f300 80b5 	bgt.w	802a55e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802a3f4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a3f8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a3fc:	9b07      	ldr	r3, [sp, #28]
 802a3fe:	2b00      	cmp	r3, #0
 802a400:	f340 817c 	ble.w	802a6fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802a404:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a408:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a40c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a410:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a414:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a418:	eef0 6a62 	vmov.f32	s13, s5
 802a41c:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a420:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a424:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a428:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a42c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a430:	ee16 4a90 	vmov	r4, s13
 802a434:	eef0 6a43 	vmov.f32	s13, s6
 802a438:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a43c:	ee12 2a90 	vmov	r2, s5
 802a440:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a444:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a446:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a44a:	fb92 f3f3 	sdiv	r3, r2, r3
 802a44e:	ee13 2a10 	vmov	r2, s6
 802a452:	931f      	str	r3, [sp, #124]	@ 0x7c
 802a454:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a456:	ee16 6a90 	vmov	r6, s13
 802a45a:	fb92 f3f3 	sdiv	r3, r2, r3
 802a45e:	9320      	str	r3, [sp, #128]	@ 0x80
 802a460:	9b07      	ldr	r3, [sp, #28]
 802a462:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a464:	3b01      	subs	r3, #1
 802a466:	9307      	str	r3, [sp, #28]
 802a468:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a46a:	bf0c      	ite	eq
 802a46c:	4615      	moveq	r5, r2
 802a46e:	461d      	movne	r5, r3
 802a470:	eeb0 3a67 	vmov.f32	s6, s15
 802a474:	eef0 2a47 	vmov.f32	s5, s14
 802a478:	e6d4      	b.n	802a224 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802a47a:	2900      	cmp	r1, #0
 802a47c:	f43f af5c 	beq.w	802a338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a480:	eb0a 0003 	add.w	r0, sl, r3
 802a484:	0843      	lsrs	r3, r0, #1
 802a486:	5cfb      	ldrb	r3, [r7, r3]
 802a488:	07c0      	lsls	r0, r0, #31
 802a48a:	bf54      	ite	pl
 802a48c:	f003 030f 	andpl.w	r3, r3, #15
 802a490:	111b      	asrmi	r3, r3, #4
 802a492:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a496:	b2db      	uxtb	r3, r3
 802a498:	930a      	str	r3, [sp, #40]	@ 0x28
 802a49a:	e74d      	b.n	802a338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a49c:	2b00      	cmp	r3, #0
 802a49e:	f43f af78 	beq.w	802a392 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a4a2:	fa1f fe83 	uxth.w	lr, r3
 802a4a6:	43db      	mvns	r3, r3
 802a4a8:	4a71      	ldr	r2, [pc, #452]	@ (802a670 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a4aa:	f8b8 c000 	ldrh.w	ip, [r8]
 802a4ae:	6810      	ldr	r0, [r2, #0]
 802a4b0:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a4b4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a4b8:	fb12 f20e 	smulbb	r2, r2, lr
 802a4bc:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a4c0:	b2c0      	uxtb	r0, r0
 802a4c2:	fb1b fb0e 	smulbb	fp, fp, lr
 802a4c6:	fb10 fe0e 	smulbb	lr, r0, lr
 802a4ca:	b2db      	uxtb	r3, r3
 802a4cc:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a4d0:	fb01 2103 	mla	r1, r1, r3, r2
 802a4d4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a4d8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a4dc:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802a4e0:	fa5f fc8c 	uxtb.w	ip, ip
 802a4e4:	fb02 b203 	mla	r2, r2, r3, fp
 802a4e8:	fb0c e303 	mla	r3, ip, r3, lr
 802a4ec:	b289      	uxth	r1, r1
 802a4ee:	1c48      	adds	r0, r1, #1
 802a4f0:	b292      	uxth	r2, r2
 802a4f2:	b29b      	uxth	r3, r3
 802a4f4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a4f8:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802a4fc:	f102 0b01 	add.w	fp, r2, #1
 802a500:	1c59      	adds	r1, r3, #1
 802a502:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a506:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a50a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a50e:	0952      	lsrs	r2, r2, #5
 802a510:	4301      	orrs	r1, r0
 802a512:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a516:	4311      	orrs	r1, r2
 802a518:	f8a8 1000 	strh.w	r1, [r8]
 802a51c:	e739      	b.n	802a392 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a51e:	f113 0b01 	adds.w	fp, r3, #1
 802a522:	f53f af36 	bmi.w	802a392 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a526:	45dc      	cmp	ip, fp
 802a528:	f6ff af33 	blt.w	802a392 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a52c:	f110 0b01 	adds.w	fp, r0, #1
 802a530:	f53f af2f 	bmi.w	802a392 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a534:	45de      	cmp	lr, fp
 802a536:	f6ff af2c 	blt.w	802a392 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a53a:	9a08      	ldr	r2, [sp, #32]
 802a53c:	9302      	str	r3, [sp, #8]
 802a53e:	fa0f f38e 	sxth.w	r3, lr
 802a542:	9301      	str	r3, [sp, #4]
 802a544:	fa0f f38c 	sxth.w	r3, ip
 802a548:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a54c:	9105      	str	r1, [sp, #20]
 802a54e:	9300      	str	r3, [sp, #0]
 802a550:	463a      	mov	r2, r7
 802a552:	4653      	mov	r3, sl
 802a554:	4641      	mov	r1, r8
 802a556:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802a558:	f7ff fd74 	bl	802a044 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a55c:	e719      	b.n	802a392 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a55e:	9906      	ldr	r1, [sp, #24]
 802a560:	1422      	asrs	r2, r4, #16
 802a562:	1433      	asrs	r3, r6, #16
 802a564:	fb01 2303 	mla	r3, r1, r3, r2
 802a568:	085a      	lsrs	r2, r3, #1
 802a56a:	5cba      	ldrb	r2, [r7, r2]
 802a56c:	07d9      	lsls	r1, r3, #31
 802a56e:	bf54      	ite	pl
 802a570:	f002 020f 	andpl.w	r2, r2, #15
 802a574:	1112      	asrmi	r2, r2, #4
 802a576:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a57a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a57e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a582:	b2d2      	uxtb	r2, r2
 802a584:	2800      	cmp	r0, #0
 802a586:	d062      	beq.n	802a64e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802a588:	f103 0a01 	add.w	sl, r3, #1
 802a58c:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a590:	5c79      	ldrb	r1, [r7, r1]
 802a592:	f01a 0f01 	tst.w	sl, #1
 802a596:	bf0c      	ite	eq
 802a598:	f001 010f 	andeq.w	r1, r1, #15
 802a59c:	1109      	asrne	r1, r1, #4
 802a59e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a5a2:	b2c9      	uxtb	r1, r1
 802a5a4:	910f      	str	r1, [sp, #60]	@ 0x3c
 802a5a6:	f1bc 0f00 	cmp.w	ip, #0
 802a5aa:	d019      	beq.n	802a5e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a5ac:	9908      	ldr	r1, [sp, #32]
 802a5ae:	440b      	add	r3, r1
 802a5b0:	0859      	lsrs	r1, r3, #1
 802a5b2:	5c79      	ldrb	r1, [r7, r1]
 802a5b4:	f013 0f01 	tst.w	r3, #1
 802a5b8:	bf0c      	ite	eq
 802a5ba:	f001 010f 	andeq.w	r1, r1, #15
 802a5be:	1109      	asrne	r1, r1, #4
 802a5c0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a5c4:	b2c9      	uxtb	r1, r1
 802a5c6:	3301      	adds	r3, #1
 802a5c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a5ca:	0859      	lsrs	r1, r3, #1
 802a5cc:	5c79      	ldrb	r1, [r7, r1]
 802a5ce:	07db      	lsls	r3, r3, #31
 802a5d0:	bf54      	ite	pl
 802a5d2:	f001 010f 	andpl.w	r1, r1, #15
 802a5d6:	1109      	asrmi	r1, r1, #4
 802a5d8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a5dc:	b2c9      	uxtb	r1, r1
 802a5de:	9110      	str	r1, [sp, #64]	@ 0x40
 802a5e0:	b280      	uxth	r0, r0
 802a5e2:	fa1f fc8c 	uxth.w	ip, ip
 802a5e6:	fb00 f30c 	mul.w	r3, r0, ip
 802a5ea:	0100      	lsls	r0, r0, #4
 802a5ec:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802a5f0:	fa1f fc8c 	uxth.w	ip, ip
 802a5f4:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802a5f8:	eba1 010c 	sub.w	r1, r1, ip
 802a5fc:	fa1f fa81 	uxth.w	sl, r1
 802a600:	1ac0      	subs	r0, r0, r3
 802a602:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a604:	b280      	uxth	r0, r0
 802a606:	4348      	muls	r0, r1
 802a608:	fb02 020a 	mla	r2, r2, sl, r0
 802a60c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a60e:	fb0c 2c01 	mla	ip, ip, r1, r2
 802a612:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802a614:	fb03 c302 	mla	r3, r3, r2, ip
 802a618:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a61c:	2bff      	cmp	r3, #255	@ 0xff
 802a61e:	d12b      	bne.n	802a678 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802a620:	4b13      	ldr	r3, [pc, #76]	@ (802a670 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a622:	681a      	ldr	r2, [r3, #0]
 802a624:	4b13      	ldr	r3, [pc, #76]	@ (802a674 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a626:	0951      	lsrs	r1, r2, #5
 802a628:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a62c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a630:	430b      	orrs	r3, r1
 802a632:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a636:	4313      	orrs	r3, r2
 802a638:	f8ae 3000 	strh.w	r3, [lr]
 802a63c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a63e:	f10e 0e02 	add.w	lr, lr, #2
 802a642:	441c      	add	r4, r3
 802a644:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a646:	f108 38ff 	add.w	r8, r8, #4294967295
 802a64a:	441e      	add	r6, r3
 802a64c:	e6ce      	b.n	802a3ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802a64e:	f1bc 0f00 	cmp.w	ip, #0
 802a652:	d0c5      	beq.n	802a5e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a654:	9908      	ldr	r1, [sp, #32]
 802a656:	440b      	add	r3, r1
 802a658:	0859      	lsrs	r1, r3, #1
 802a65a:	5c79      	ldrb	r1, [r7, r1]
 802a65c:	07db      	lsls	r3, r3, #31
 802a65e:	bf54      	ite	pl
 802a660:	f001 010f 	andpl.w	r1, r1, #15
 802a664:	1109      	asrmi	r1, r1, #4
 802a666:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a66a:	b2c9      	uxtb	r1, r1
 802a66c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a66e:	e7b7      	b.n	802a5e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a670:	2005bab4 	.word	0x2005bab4
 802a674:	fffff800 	.word	0xfffff800
 802a678:	2b00      	cmp	r3, #0
 802a67a:	d0df      	beq.n	802a63c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802a67c:	fa1f fa83 	uxth.w	sl, r3
 802a680:	43db      	mvns	r3, r3
 802a682:	4a20      	ldr	r2, [pc, #128]	@ (802a704 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 802a684:	f8be c000 	ldrh.w	ip, [lr]
 802a688:	6810      	ldr	r0, [r2, #0]
 802a68a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a68e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a692:	fb12 f20a 	smulbb	r2, r2, sl
 802a696:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a69a:	b2c0      	uxtb	r0, r0
 802a69c:	fb10 f00a 	smulbb	r0, r0, sl
 802a6a0:	b2db      	uxtb	r3, r3
 802a6a2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a6a6:	fb01 2103 	mla	r1, r1, r3, r2
 802a6aa:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a6ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a6b2:	fb1b fb0a 	smulbb	fp, fp, sl
 802a6b6:	fa5f fc8c 	uxtb.w	ip, ip
 802a6ba:	fb0c 0003 	mla	r0, ip, r3, r0
 802a6be:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802a6c2:	fb02 b203 	mla	r2, r2, r3, fp
 802a6c6:	b289      	uxth	r1, r1
 802a6c8:	b280      	uxth	r0, r0
 802a6ca:	1c4b      	adds	r3, r1, #1
 802a6cc:	f100 0b01 	add.w	fp, r0, #1
 802a6d0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a6d4:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802a6d8:	b292      	uxth	r2, r2
 802a6da:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802a6de:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802a6e2:	ea4b 0101 	orr.w	r1, fp, r1
 802a6e6:	f102 0b01 	add.w	fp, r2, #1
 802a6ea:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a6ee:	0952      	lsrs	r2, r2, #5
 802a6f0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a6f4:	4311      	orrs	r1, r2
 802a6f6:	f8ae 1000 	strh.w	r1, [lr]
 802a6fa:	e79f      	b.n	802a63c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802a6fc:	b013      	add	sp, #76	@ 0x4c
 802a6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a702:	bf00      	nop
 802a704:	2005bab4 	.word	0x2005bab4

0802a708 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802a708:	b570      	push	{r4, r5, r6, lr}
 802a70a:	1208      	asrs	r0, r1, #8
 802a70c:	b29e      	uxth	r6, r3
 802a70e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802a712:	1213      	asrs	r3, r2, #8
 802a714:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802a718:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802a71c:	fb13 f305 	smulbb	r3, r3, r5
 802a720:	fb10 f006 	smulbb	r0, r0, r6
 802a724:	10cc      	asrs	r4, r1, #3
 802a726:	4418      	add	r0, r3
 802a728:	10d3      	asrs	r3, r2, #3
 802a72a:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802a72e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802a732:	fb13 f305 	smulbb	r3, r3, r5
 802a736:	fb14 f406 	smulbb	r4, r4, r6
 802a73a:	00c9      	lsls	r1, r1, #3
 802a73c:	00d2      	lsls	r2, r2, #3
 802a73e:	441c      	add	r4, r3
 802a740:	b2d2      	uxtb	r2, r2
 802a742:	b2cb      	uxtb	r3, r1
 802a744:	fb12 f205 	smulbb	r2, r2, r5
 802a748:	fb13 f306 	smulbb	r3, r3, r6
 802a74c:	b280      	uxth	r0, r0
 802a74e:	4413      	add	r3, r2
 802a750:	1c42      	adds	r2, r0, #1
 802a752:	b29b      	uxth	r3, r3
 802a754:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a758:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 802a75c:	1c58      	adds	r0, r3, #1
 802a75e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802a762:	b2a4      	uxth	r4, r4
 802a764:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802a768:	4310      	orrs	r0, r2
 802a76a:	1c62      	adds	r2, r4, #1
 802a76c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802a770:	0964      	lsrs	r4, r4, #5
 802a772:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802a776:	4320      	orrs	r0, r4
 802a778:	bd70      	pop	{r4, r5, r6, pc}
	...

0802a77c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a780:	b08f      	sub	sp, #60	@ 0x3c
 802a782:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802a786:	461c      	mov	r4, r3
 802a788:	9004      	str	r0, [sp, #16]
 802a78a:	460d      	mov	r5, r1
 802a78c:	4616      	mov	r6, r2
 802a78e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a790:	2f00      	cmp	r7, #0
 802a792:	f000 80f5 	beq.w	802a980 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x204>
 802a796:	f04f 0802 	mov.w	r8, #2
 802a79a:	6820      	ldr	r0, [r4, #0]
 802a79c:	6861      	ldr	r1, [r4, #4]
 802a79e:	aa0a      	add	r2, sp, #40	@ 0x28
 802a7a0:	c203      	stmia	r2!, {r0, r1}
 802a7a2:	6818      	ldr	r0, [r3, #0]
 802a7a4:	6859      	ldr	r1, [r3, #4]
 802a7a6:	aa0c      	add	r2, sp, #48	@ 0x30
 802a7a8:	c203      	stmia	r2!, {r0, r1}
 802a7aa:	a80a      	add	r0, sp, #40	@ 0x28
 802a7ac:	f7ee fdea 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802a7b0:	4621      	mov	r1, r4
 802a7b2:	a80c      	add	r0, sp, #48	@ 0x30
 802a7b4:	f7ee fe0e 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802a7b8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802a7bc:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802a7c0:	f002 0301 	and.w	r3, r2, #1
 802a7c4:	9306      	str	r3, [sp, #24]
 802a7c6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802a7ca:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802a7ce:	f003 0101 	and.w	r1, r3, #1
 802a7d2:	9105      	str	r1, [sp, #20]
 802a7d4:	9805      	ldr	r0, [sp, #20]
 802a7d6:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802a7da:	4403      	add	r3, r0
 802a7dc:	fb01 2303 	mla	r3, r1, r3, r2
 802a7e0:	fb93 f3f8 	sdiv	r3, r3, r8
 802a7e4:	441d      	add	r5, r3
 802a7e6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802a7ea:	3604      	adds	r6, #4
 802a7ec:	441a      	add	r2, r3
 802a7ee:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802a7f2:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802a7f6:	4419      	add	r1, r3
 802a7f8:	4b63      	ldr	r3, [pc, #396]	@ (802a988 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802a7fa:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802a7fe:	6818      	ldr	r0, [r3, #0]
 802a800:	6803      	ldr	r3, [r0, #0]
 802a802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802a804:	4798      	blx	r3
 802a806:	4a61      	ldr	r2, [pc, #388]	@ (802a98c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802a808:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802a80c:	8813      	ldrh	r3, [r2, #0]
 802a80e:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 802a812:	2fff      	cmp	r7, #255	@ 0xff
 802a814:	fb03 a404 	mla	r4, r3, r4, sl
 802a818:	4611      	mov	r1, r2
 802a81a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802a81e:	fb03 fb0b 	mul.w	fp, r3, fp
 802a822:	d06b      	beq.n	802a8fc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 802a824:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 802a828:	9303      	str	r3, [sp, #12]
 802a82a:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802a82e:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802a832:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802a836:	9b07      	ldr	r3, [sp, #28]
 802a838:	42a3      	cmp	r3, r4
 802a83a:	f240 809c 	bls.w	802a976 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802a83e:	9b06      	ldr	r3, [sp, #24]
 802a840:	2b00      	cmp	r3, #0
 802a842:	d039      	beq.n	802a8b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 802a844:	782b      	ldrb	r3, [r5, #0]
 802a846:	8822      	ldrh	r2, [r4, #0]
 802a848:	f003 030f 	and.w	r3, r3, #15
 802a84c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a850:	9b03      	ldr	r3, [sp, #12]
 802a852:	9804      	ldr	r0, [sp, #16]
 802a854:	9300      	str	r3, [sp, #0]
 802a856:	463b      	mov	r3, r7
 802a858:	f7ff ff56 	bl	802a708 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a85c:	f105 0801 	add.w	r8, r5, #1
 802a860:	f824 0b02 	strh.w	r0, [r4], #2
 802a864:	f109 3bff 	add.w	fp, r9, #4294967295
 802a868:	f1bb 0f01 	cmp.w	fp, #1
 802a86c:	46a2      	mov	sl, r4
 802a86e:	f104 0404 	add.w	r4, r4, #4
 802a872:	dd24      	ble.n	802a8be <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 802a874:	f898 3000 	ldrb.w	r3, [r8]
 802a878:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802a87c:	091b      	lsrs	r3, r3, #4
 802a87e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a882:	9b03      	ldr	r3, [sp, #12]
 802a884:	9804      	ldr	r0, [sp, #16]
 802a886:	9300      	str	r3, [sp, #0]
 802a888:	463b      	mov	r3, r7
 802a88a:	f7ff ff3d 	bl	802a708 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a88e:	f824 0c04 	strh.w	r0, [r4, #-4]
 802a892:	f818 3b01 	ldrb.w	r3, [r8], #1
 802a896:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802a89a:	f003 030f 	and.w	r3, r3, #15
 802a89e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a8a2:	9b03      	ldr	r3, [sp, #12]
 802a8a4:	9804      	ldr	r0, [sp, #16]
 802a8a6:	9300      	str	r3, [sp, #0]
 802a8a8:	463b      	mov	r3, r7
 802a8aa:	f7ff ff2d 	bl	802a708 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a8ae:	f1ab 0b02 	sub.w	fp, fp, #2
 802a8b2:	f824 0c02 	strh.w	r0, [r4, #-2]
 802a8b6:	e7d7      	b.n	802a868 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802a8b8:	46a8      	mov	r8, r5
 802a8ba:	46cb      	mov	fp, r9
 802a8bc:	e7d4      	b.n	802a868 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802a8be:	d10e      	bne.n	802a8de <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 802a8c0:	f898 3000 	ldrb.w	r3, [r8]
 802a8c4:	f8ba 2000 	ldrh.w	r2, [sl]
 802a8c8:	091b      	lsrs	r3, r3, #4
 802a8ca:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802a8ce:	9b03      	ldr	r3, [sp, #12]
 802a8d0:	9804      	ldr	r0, [sp, #16]
 802a8d2:	9300      	str	r3, [sp, #0]
 802a8d4:	463b      	mov	r3, r7
 802a8d6:	f7ff ff17 	bl	802a708 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802a8da:	f82a 0b02 	strh.w	r0, [sl], #2
 802a8de:	9b08      	ldr	r3, [sp, #32]
 802a8e0:	9a05      	ldr	r2, [sp, #20]
 802a8e2:	881c      	ldrh	r4, [r3, #0]
 802a8e4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802a8e8:	eba4 0409 	sub.w	r4, r4, r9
 802a8ec:	4413      	add	r3, r2
 802a8ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a8f0:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802a8f4:	fb93 f3f2 	sdiv	r3, r3, r2
 802a8f8:	441d      	add	r5, r3
 802a8fa:	e79c      	b.n	802a836 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 802a8fc:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802a900:	45a3      	cmp	fp, r4
 802a902:	d938      	bls.n	802a976 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802a904:	9b06      	ldr	r3, [sp, #24]
 802a906:	b1f3      	cbz	r3, 802a946 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ca>
 802a908:	782b      	ldrb	r3, [r5, #0]
 802a90a:	1c6a      	adds	r2, r5, #1
 802a90c:	f003 030f 	and.w	r3, r3, #15
 802a910:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802a914:	f109 30ff 	add.w	r0, r9, #4294967295
 802a918:	8023      	strh	r3, [r4, #0]
 802a91a:	3402      	adds	r4, #2
 802a91c:	2801      	cmp	r0, #1
 802a91e:	4623      	mov	r3, r4
 802a920:	f104 0404 	add.w	r4, r4, #4
 802a924:	dd12      	ble.n	802a94c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 802a926:	7813      	ldrb	r3, [r2, #0]
 802a928:	3802      	subs	r0, #2
 802a92a:	091b      	lsrs	r3, r3, #4
 802a92c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802a930:	f824 3c04 	strh.w	r3, [r4, #-4]
 802a934:	f812 3b01 	ldrb.w	r3, [r2], #1
 802a938:	f003 030f 	and.w	r3, r3, #15
 802a93c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802a940:	f824 3c02 	strh.w	r3, [r4, #-2]
 802a944:	e7ea      	b.n	802a91c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802a946:	462a      	mov	r2, r5
 802a948:	4648      	mov	r0, r9
 802a94a:	e7e7      	b.n	802a91c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802a94c:	d106      	bne.n	802a95c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802a94e:	7812      	ldrb	r2, [r2, #0]
 802a950:	3302      	adds	r3, #2
 802a952:	0912      	lsrs	r2, r2, #4
 802a954:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802a958:	f823 2c02 	strh.w	r2, [r3, #-2]
 802a95c:	880c      	ldrh	r4, [r1, #0]
 802a95e:	9a05      	ldr	r2, [sp, #20]
 802a960:	eba4 0409 	sub.w	r4, r4, r9
 802a964:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802a968:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802a96c:	4413      	add	r3, r2
 802a96e:	fb93 f3f8 	sdiv	r3, r3, r8
 802a972:	441d      	add	r5, r3
 802a974:	e7c4      	b.n	802a900 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 802a976:	4b04      	ldr	r3, [pc, #16]	@ (802a988 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802a978:	6818      	ldr	r0, [r3, #0]
 802a97a:	6803      	ldr	r3, [r0, #0]
 802a97c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a97e:	4798      	blx	r3
 802a980:	b00f      	add	sp, #60	@ 0x3c
 802a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a986:	bf00      	nop
 802a988:	2005baa4 	.word	0x2005baa4
 802a98c:	2005ba9e 	.word	0x2005ba9e

0802a990 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 802a990:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a992:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802a996:	0a0f      	lsrs	r7, r1, #8
 802a998:	2dff      	cmp	r5, #255	@ 0xff
 802a99a:	d10c      	bne.n	802a9b6 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802a99c:	2bff      	cmp	r3, #255	@ 0xff
 802a99e:	d10a      	bne.n	802a9b6 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802a9a0:	4b25      	ldr	r3, [pc, #148]	@ (802aa38 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802a9a2:	0948      	lsrs	r0, r1, #5
 802a9a4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a9a8:	403b      	ands	r3, r7
 802a9aa:	4318      	orrs	r0, r3
 802a9ac:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802a9b0:	4308      	orrs	r0, r1
 802a9b2:	b280      	uxth	r0, r0
 802a9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a9b6:	fb15 f503 	smulbb	r5, r5, r3
 802a9ba:	b2ab      	uxth	r3, r5
 802a9bc:	1c5d      	adds	r5, r3, #1
 802a9be:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802a9c2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802a9c6:	fa1f fc85 	uxth.w	ip, r5
 802a9ca:	43ed      	mvns	r5, r5
 802a9cc:	1214      	asrs	r4, r2, #8
 802a9ce:	10d6      	asrs	r6, r2, #3
 802a9d0:	00d0      	lsls	r0, r2, #3
 802a9d2:	f3c1 4207 	ubfx	r2, r1, #16, #8
 802a9d6:	fb12 f20c 	smulbb	r2, r2, ip
 802a9da:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802a9de:	b2eb      	uxtb	r3, r5
 802a9e0:	b2c0      	uxtb	r0, r0
 802a9e2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802a9e6:	fb04 2403 	mla	r4, r4, r3, r2
 802a9ea:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 802a9ee:	b2c8      	uxtb	r0, r1
 802a9f0:	b2fd      	uxtb	r5, r7
 802a9f2:	fb10 f00c 	smulbb	r0, r0, ip
 802a9f6:	fb15 f50c 	smulbb	r5, r5, ip
 802a9fa:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802a9fe:	fb02 0003 	mla	r0, r2, r3, r0
 802aa02:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802aa06:	fb06 5503 	mla	r5, r6, r3, r5
 802aa0a:	b2a4      	uxth	r4, r4
 802aa0c:	b283      	uxth	r3, r0
 802aa0e:	1c60      	adds	r0, r4, #1
 802aa10:	b2ad      	uxth	r5, r5
 802aa12:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802aa16:	1c58      	adds	r0, r3, #1
 802aa18:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802aa1c:	1c6b      	adds	r3, r5, #1
 802aa1e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802aa22:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802aa26:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802aa2a:	096d      	lsrs	r5, r5, #5
 802aa2c:	4320      	orrs	r0, r4
 802aa2e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802aa32:	4328      	orrs	r0, r5
 802aa34:	e7be      	b.n	802a9b4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802aa36:	bf00      	nop
 802aa38:	00fff800 	.word	0x00fff800

0802aa3c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802aa3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa40:	461c      	mov	r4, r3
 802aa42:	f04f 0a02 	mov.w	sl, #2
 802aa46:	b08d      	sub	sp, #52	@ 0x34
 802aa48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802aa4a:	460d      	mov	r5, r1
 802aa4c:	4680      	mov	r8, r0
 802aa4e:	6861      	ldr	r1, [r4, #4]
 802aa50:	6820      	ldr	r0, [r4, #0]
 802aa52:	4616      	mov	r6, r2
 802aa54:	aa08      	add	r2, sp, #32
 802aa56:	c203      	stmia	r2!, {r0, r1}
 802aa58:	6818      	ldr	r0, [r3, #0]
 802aa5a:	6859      	ldr	r1, [r3, #4]
 802aa5c:	aa0a      	add	r2, sp, #40	@ 0x28
 802aa5e:	c203      	stmia	r2!, {r0, r1}
 802aa60:	a808      	add	r0, sp, #32
 802aa62:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 802aa66:	f7ee fc8d 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802aa6a:	4621      	mov	r1, r4
 802aa6c:	a80a      	add	r0, sp, #40	@ 0x28
 802aa6e:	f7ee fcb1 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802aa72:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 802aa76:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 802aa7a:	f002 0301 	and.w	r3, r2, #1
 802aa7e:	9303      	str	r3, [sp, #12]
 802aa80:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802aa84:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 802aa88:	f003 0101 	and.w	r1, r3, #1
 802aa8c:	9102      	str	r1, [sp, #8]
 802aa8e:	9802      	ldr	r0, [sp, #8]
 802aa90:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 802aa94:	4403      	add	r3, r0
 802aa96:	fb01 2303 	mla	r3, r1, r3, r2
 802aa9a:	fb93 f3fa 	sdiv	r3, r3, sl
 802aa9e:	441d      	add	r5, r3
 802aaa0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802aaa4:	3604      	adds	r6, #4
 802aaa6:	441a      	add	r2, r3
 802aaa8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 802aaac:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802aab0:	4a3e      	ldr	r2, [pc, #248]	@ (802abac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802aab2:	4419      	add	r1, r3
 802aab4:	6810      	ldr	r0, [r2, #0]
 802aab6:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 802aaba:	6803      	ldr	r3, [r0, #0]
 802aabc:	9205      	str	r2, [sp, #20]
 802aabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802aac0:	4798      	blx	r3
 802aac2:	4b3b      	ldr	r3, [pc, #236]	@ (802abb0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802aac4:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 802aac8:	8819      	ldrh	r1, [r3, #0]
 802aaca:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 802aace:	434f      	muls	r7, r1
 802aad0:	fb01 c404 	mla	r4, r1, r4, ip
 802aad4:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 802aad8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802aadc:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 802aae0:	9204      	str	r2, [sp, #16]
 802aae2:	9b04      	ldr	r3, [sp, #16]
 802aae4:	429c      	cmp	r4, r3
 802aae6:	d258      	bcs.n	802ab9a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 802aae8:	9b03      	ldr	r3, [sp, #12]
 802aaea:	2b00      	cmp	r3, #0
 802aaec:	d034      	beq.n	802ab58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802aaee:	782b      	ldrb	r3, [r5, #0]
 802aaf0:	1c6f      	adds	r7, r5, #1
 802aaf2:	f003 030f 	and.w	r3, r3, #15
 802aaf6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802aafa:	0e0b      	lsrs	r3, r1, #24
 802aafc:	d006      	beq.n	802ab0c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 802aafe:	8822      	ldrh	r2, [r4, #0]
 802ab00:	4640      	mov	r0, r8
 802ab02:	9300      	str	r3, [sp, #0]
 802ab04:	464b      	mov	r3, r9
 802ab06:	f7ff ff43 	bl	802a990 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ab0a:	8020      	strh	r0, [r4, #0]
 802ab0c:	3402      	adds	r4, #2
 802ab0e:	f10b 3aff 	add.w	sl, fp, #4294967295
 802ab12:	f1ba 0f01 	cmp.w	sl, #1
 802ab16:	dd22      	ble.n	802ab5e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802ab18:	783b      	ldrb	r3, [r7, #0]
 802ab1a:	091b      	lsrs	r3, r3, #4
 802ab1c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ab20:	0e0b      	lsrs	r3, r1, #24
 802ab22:	d006      	beq.n	802ab32 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 802ab24:	8822      	ldrh	r2, [r4, #0]
 802ab26:	4640      	mov	r0, r8
 802ab28:	9300      	str	r3, [sp, #0]
 802ab2a:	464b      	mov	r3, r9
 802ab2c:	f7ff ff30 	bl	802a990 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ab30:	8020      	strh	r0, [r4, #0]
 802ab32:	f817 3b01 	ldrb.w	r3, [r7], #1
 802ab36:	f003 030f 	and.w	r3, r3, #15
 802ab3a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ab3e:	0e0b      	lsrs	r3, r1, #24
 802ab40:	d006      	beq.n	802ab50 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802ab42:	8862      	ldrh	r2, [r4, #2]
 802ab44:	4640      	mov	r0, r8
 802ab46:	9300      	str	r3, [sp, #0]
 802ab48:	464b      	mov	r3, r9
 802ab4a:	f7ff ff21 	bl	802a990 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ab4e:	8060      	strh	r0, [r4, #2]
 802ab50:	3404      	adds	r4, #4
 802ab52:	f1aa 0a02 	sub.w	sl, sl, #2
 802ab56:	e7dc      	b.n	802ab12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802ab58:	462f      	mov	r7, r5
 802ab5a:	46da      	mov	sl, fp
 802ab5c:	e7d9      	b.n	802ab12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802ab5e:	d10d      	bne.n	802ab7c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 802ab60:	783b      	ldrb	r3, [r7, #0]
 802ab62:	091b      	lsrs	r3, r3, #4
 802ab64:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ab68:	0e0b      	lsrs	r3, r1, #24
 802ab6a:	d006      	beq.n	802ab7a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 802ab6c:	8822      	ldrh	r2, [r4, #0]
 802ab6e:	4640      	mov	r0, r8
 802ab70:	9300      	str	r3, [sp, #0]
 802ab72:	464b      	mov	r3, r9
 802ab74:	f7ff ff0c 	bl	802a990 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ab78:	8020      	strh	r0, [r4, #0]
 802ab7a:	3402      	adds	r4, #2
 802ab7c:	9b06      	ldr	r3, [sp, #24]
 802ab7e:	9a02      	ldr	r2, [sp, #8]
 802ab80:	881b      	ldrh	r3, [r3, #0]
 802ab82:	eba3 030b 	sub.w	r3, r3, fp
 802ab86:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802ab8a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802ab8e:	4413      	add	r3, r2
 802ab90:	9a07      	ldr	r2, [sp, #28]
 802ab92:	fb93 f3f2 	sdiv	r3, r3, r2
 802ab96:	441d      	add	r5, r3
 802ab98:	e7a3      	b.n	802aae2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802ab9a:	9b05      	ldr	r3, [sp, #20]
 802ab9c:	6818      	ldr	r0, [r3, #0]
 802ab9e:	6803      	ldr	r3, [r0, #0]
 802aba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802aba2:	4798      	blx	r3
 802aba4:	b00d      	add	sp, #52	@ 0x34
 802aba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802abaa:	bf00      	nop
 802abac:	2005baa4 	.word	0x2005baa4
 802abb0:	2005ba9e 	.word	0x2005ba9e

0802abb4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802abb4:	b570      	push	{r4, r5, r6, lr}
 802abb6:	788d      	ldrb	r5, [r1, #2]
 802abb8:	1214      	asrs	r4, r2, #8
 802abba:	fb15 f503 	smulbb	r5, r5, r3
 802abbe:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802abc2:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802abc6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802abca:	fb04 5506 	mla	r5, r4, r6, r5
 802abce:	784c      	ldrb	r4, [r1, #1]
 802abd0:	7809      	ldrb	r1, [r1, #0]
 802abd2:	fb14 f403 	smulbb	r4, r4, r3
 802abd6:	fb11 f303 	smulbb	r3, r1, r3
 802abda:	10d0      	asrs	r0, r2, #3
 802abdc:	00d2      	lsls	r2, r2, #3
 802abde:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802abe2:	b2d2      	uxtb	r2, r2
 802abe4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802abe8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802abec:	fb00 4406 	mla	r4, r0, r6, r4
 802abf0:	fb02 3306 	mla	r3, r2, r6, r3
 802abf4:	b2ad      	uxth	r5, r5
 802abf6:	b29b      	uxth	r3, r3
 802abf8:	b2a4      	uxth	r4, r4
 802abfa:	1c68      	adds	r0, r5, #1
 802abfc:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802ac00:	1c62      	adds	r2, r4, #1
 802ac02:	1c58      	adds	r0, r3, #1
 802ac04:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802ac08:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802ac0c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802ac10:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802ac14:	0964      	lsrs	r4, r4, #5
 802ac16:	4328      	orrs	r0, r5
 802ac18:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802ac1c:	4320      	orrs	r0, r4
 802ac1e:	bd70      	pop	{r4, r5, r6, pc}

0802ac20 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ac24:	b08f      	sub	sp, #60	@ 0x3c
 802ac26:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802ac2a:	461c      	mov	r4, r3
 802ac2c:	4682      	mov	sl, r0
 802ac2e:	460e      	mov	r6, r1
 802ac30:	4615      	mov	r5, r2
 802ac32:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802ac34:	2f00      	cmp	r7, #0
 802ac36:	f000 8141 	beq.w	802aebc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 802ac3a:	f04f 0802 	mov.w	r8, #2
 802ac3e:	6820      	ldr	r0, [r4, #0]
 802ac40:	6861      	ldr	r1, [r4, #4]
 802ac42:	aa0a      	add	r2, sp, #40	@ 0x28
 802ac44:	c203      	stmia	r2!, {r0, r1}
 802ac46:	6818      	ldr	r0, [r3, #0]
 802ac48:	6859      	ldr	r1, [r3, #4]
 802ac4a:	aa0c      	add	r2, sp, #48	@ 0x30
 802ac4c:	c203      	stmia	r2!, {r0, r1}
 802ac4e:	a80a      	add	r0, sp, #40	@ 0x28
 802ac50:	f7ee fb98 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802ac54:	4621      	mov	r1, r4
 802ac56:	a80c      	add	r0, sp, #48	@ 0x30
 802ac58:	f7ee fbbc 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802ac5c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802ac60:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802ac64:	f002 0301 	and.w	r3, r2, #1
 802ac68:	9306      	str	r3, [sp, #24]
 802ac6a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802ac6e:	3504      	adds	r5, #4
 802ac70:	f003 0101 	and.w	r1, r3, #1
 802ac74:	9105      	str	r1, [sp, #20]
 802ac76:	9805      	ldr	r0, [sp, #20]
 802ac78:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802ac7c:	4403      	add	r3, r0
 802ac7e:	fb01 2303 	mla	r3, r1, r3, r2
 802ac82:	fb93 f3f8 	sdiv	r3, r3, r8
 802ac86:	441e      	add	r6, r3
 802ac88:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802ac8c:	441a      	add	r2, r3
 802ac8e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802ac92:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802ac96:	4419      	add	r1, r3
 802ac98:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802ac9c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802aca0:	9303      	str	r3, [sp, #12]
 802aca2:	4b88      	ldr	r3, [pc, #544]	@ (802aec4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802aca4:	6818      	ldr	r0, [r3, #0]
 802aca6:	6803      	ldr	r3, [r0, #0]
 802aca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802acaa:	4798      	blx	r3
 802acac:	4a86      	ldr	r2, [pc, #536]	@ (802aec8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 802acae:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802acb2:	8813      	ldrh	r3, [r2, #0]
 802acb4:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 802acb8:	2fff      	cmp	r7, #255	@ 0xff
 802acba:	fb03 9404 	mla	r4, r3, r4, r9
 802acbe:	4694      	mov	ip, r2
 802acc0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802acc4:	fb03 f30b 	mul.w	r3, r3, fp
 802acc8:	d071      	beq.n	802adae <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 802acca:	43f9      	mvns	r1, r7
 802accc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802acd0:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802acd4:	b2c9      	uxtb	r1, r1
 802acd6:	9104      	str	r1, [sp, #16]
 802acd8:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802acdc:	9b07      	ldr	r3, [sp, #28]
 802acde:	42a3      	cmp	r3, r4
 802ace0:	f240 80e7 	bls.w	802aeb2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802ace4:	9b06      	ldr	r3, [sp, #24]
 802ace6:	2b00      	cmp	r3, #0
 802ace8:	d03d      	beq.n	802ad66 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 802acea:	7831      	ldrb	r1, [r6, #0]
 802acec:	9b04      	ldr	r3, [sp, #16]
 802acee:	f001 010f 	and.w	r1, r1, #15
 802acf2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802acf6:	8822      	ldrh	r2, [r4, #0]
 802acf8:	4429      	add	r1, r5
 802acfa:	9300      	str	r3, [sp, #0]
 802acfc:	4650      	mov	r0, sl
 802acfe:	463b      	mov	r3, r7
 802ad00:	f7ff ff58 	bl	802abb4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ad04:	9b03      	ldr	r3, [sp, #12]
 802ad06:	f106 0801 	add.w	r8, r6, #1
 802ad0a:	f824 0b02 	strh.w	r0, [r4], #2
 802ad0e:	f103 3bff 	add.w	fp, r3, #4294967295
 802ad12:	f1bb 0f01 	cmp.w	fp, #1
 802ad16:	46a1      	mov	r9, r4
 802ad18:	f104 0404 	add.w	r4, r4, #4
 802ad1c:	dd27      	ble.n	802ad6e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 802ad1e:	f898 1000 	ldrb.w	r1, [r8]
 802ad22:	9b04      	ldr	r3, [sp, #16]
 802ad24:	0909      	lsrs	r1, r1, #4
 802ad26:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ad2a:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802ad2e:	4429      	add	r1, r5
 802ad30:	9300      	str	r3, [sp, #0]
 802ad32:	4650      	mov	r0, sl
 802ad34:	463b      	mov	r3, r7
 802ad36:	f7ff ff3d 	bl	802abb4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ad3a:	f824 0c04 	strh.w	r0, [r4, #-4]
 802ad3e:	f818 1b01 	ldrb.w	r1, [r8], #1
 802ad42:	9b04      	ldr	r3, [sp, #16]
 802ad44:	f001 010f 	and.w	r1, r1, #15
 802ad48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ad4c:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802ad50:	4429      	add	r1, r5
 802ad52:	9300      	str	r3, [sp, #0]
 802ad54:	4650      	mov	r0, sl
 802ad56:	463b      	mov	r3, r7
 802ad58:	f7ff ff2c 	bl	802abb4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ad5c:	f1ab 0b02 	sub.w	fp, fp, #2
 802ad60:	f824 0c02 	strh.w	r0, [r4, #-2]
 802ad64:	e7d5      	b.n	802ad12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802ad66:	46b0      	mov	r8, r6
 802ad68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802ad6c:	e7d1      	b.n	802ad12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802ad6e:	d10f      	bne.n	802ad90 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 802ad70:	f898 1000 	ldrb.w	r1, [r8]
 802ad74:	9b04      	ldr	r3, [sp, #16]
 802ad76:	0909      	lsrs	r1, r1, #4
 802ad78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ad7c:	f8b9 2000 	ldrh.w	r2, [r9]
 802ad80:	4429      	add	r1, r5
 802ad82:	9300      	str	r3, [sp, #0]
 802ad84:	4650      	mov	r0, sl
 802ad86:	463b      	mov	r3, r7
 802ad88:	f7ff ff14 	bl	802abb4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ad8c:	f829 0b02 	strh.w	r0, [r9], #2
 802ad90:	9b08      	ldr	r3, [sp, #32]
 802ad92:	9a05      	ldr	r2, [sp, #20]
 802ad94:	881c      	ldrh	r4, [r3, #0]
 802ad96:	9b03      	ldr	r3, [sp, #12]
 802ad98:	1ae4      	subs	r4, r4, r3
 802ad9a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802ad9e:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802ada2:	4413      	add	r3, r2
 802ada4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ada6:	fb93 f3f2 	sdiv	r3, r3, r2
 802adaa:	441e      	add	r6, r3
 802adac:	e796      	b.n	802acdc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 802adae:	4f47      	ldr	r7, [pc, #284]	@ (802aecc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802adb0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802adb4:	42a3      	cmp	r3, r4
 802adb6:	d97c      	bls.n	802aeb2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802adb8:	9a06      	ldr	r2, [sp, #24]
 802adba:	2a00      	cmp	r2, #0
 802adbc:	d054      	beq.n	802ae68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 802adbe:	7830      	ldrb	r0, [r6, #0]
 802adc0:	1c71      	adds	r1, r6, #1
 802adc2:	f000 000f 	and.w	r0, r0, #15
 802adc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802adca:	eb05 0e00 	add.w	lr, r5, r0
 802adce:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802add2:	f89e e001 	ldrb.w	lr, [lr, #1]
 802add6:	5c28      	ldrb	r0, [r5, r0]
 802add8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802addc:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802ade0:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802ade4:	ea42 020e 	orr.w	r2, r2, lr
 802ade8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802adec:	f824 2b02 	strh.w	r2, [r4], #2
 802adf0:	9a03      	ldr	r2, [sp, #12]
 802adf2:	f102 3eff 	add.w	lr, r2, #4294967295
 802adf6:	f1be 0f01 	cmp.w	lr, #1
 802adfa:	4620      	mov	r0, r4
 802adfc:	f104 0404 	add.w	r4, r4, #4
 802ae00:	dd36      	ble.n	802ae70 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802ae02:	7808      	ldrb	r0, [r1, #0]
 802ae04:	f1ae 0e02 	sub.w	lr, lr, #2
 802ae08:	0900      	lsrs	r0, r0, #4
 802ae0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802ae0e:	eb05 0a00 	add.w	sl, r5, r0
 802ae12:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802ae16:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802ae1a:	00d2      	lsls	r2, r2, #3
 802ae1c:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802ae20:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802ae24:	ea49 0202 	orr.w	r2, r9, r2
 802ae28:	f815 9000 	ldrb.w	r9, [r5, r0]
 802ae2c:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802ae30:	f824 2c04 	strh.w	r2, [r4, #-4]
 802ae34:	f811 0b01 	ldrb.w	r0, [r1], #1
 802ae38:	f000 000f 	and.w	r0, r0, #15
 802ae3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802ae40:	eb05 0a00 	add.w	sl, r5, r0
 802ae44:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802ae48:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802ae4c:	00d2      	lsls	r2, r2, #3
 802ae4e:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802ae52:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802ae56:	ea49 0202 	orr.w	r2, r9, r2
 802ae5a:	f815 9000 	ldrb.w	r9, [r5, r0]
 802ae5e:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802ae62:	f824 2c02 	strh.w	r2, [r4, #-2]
 802ae66:	e7c6      	b.n	802adf6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802ae68:	4631      	mov	r1, r6
 802ae6a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802ae6e:	e7c2      	b.n	802adf6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802ae70:	d111      	bne.n	802ae96 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802ae72:	7809      	ldrb	r1, [r1, #0]
 802ae74:	0909      	lsrs	r1, r1, #4
 802ae76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ae7a:	186c      	adds	r4, r5, r1
 802ae7c:	78a2      	ldrb	r2, [r4, #2]
 802ae7e:	7864      	ldrb	r4, [r4, #1]
 802ae80:	5c69      	ldrb	r1, [r5, r1]
 802ae82:	00e4      	lsls	r4, r4, #3
 802ae84:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802ae88:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802ae8c:	4322      	orrs	r2, r4
 802ae8e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802ae92:	f820 2b02 	strh.w	r2, [r0], #2
 802ae96:	9a03      	ldr	r2, [sp, #12]
 802ae98:	f8bc 4000 	ldrh.w	r4, [ip]
 802ae9c:	9905      	ldr	r1, [sp, #20]
 802ae9e:	1aa4      	subs	r4, r4, r2
 802aea0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 802aea4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802aea8:	440a      	add	r2, r1
 802aeaa:	fb92 f2f8 	sdiv	r2, r2, r8
 802aeae:	4416      	add	r6, r2
 802aeb0:	e780      	b.n	802adb4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802aeb2:	4b04      	ldr	r3, [pc, #16]	@ (802aec4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802aeb4:	6818      	ldr	r0, [r3, #0]
 802aeb6:	6803      	ldr	r3, [r0, #0]
 802aeb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802aeba:	4798      	blx	r3
 802aebc:	b00f      	add	sp, #60	@ 0x3c
 802aebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aec2:	bf00      	nop
 802aec4:	2005baa4 	.word	0x2005baa4
 802aec8:	2005ba9e 	.word	0x2005ba9e
 802aecc:	fffff800 	.word	0xfffff800

0802aed0 <CRC_Lock>:
 802aed0:	b530      	push	{r4, r5, lr}
 802aed2:	4a2d      	ldr	r2, [pc, #180]	@ (802af88 <CRC_Lock+0xb8>)
 802aed4:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802aed8:	6813      	ldr	r3, [r2, #0]
 802aeda:	f023 0301 	bic.w	r3, r3, #1
 802aede:	6013      	str	r3, [r2, #0]
 802aee0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802aee4:	4b29      	ldr	r3, [pc, #164]	@ (802af8c <CRC_Lock+0xbc>)
 802aee6:	681c      	ldr	r4, [r3, #0]
 802aee8:	4014      	ands	r4, r2
 802aeea:	42ac      	cmp	r4, r5
 802aeec:	d005      	beq.n	802aefa <CRC_Lock+0x2a>
 802aeee:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802aef2:	681c      	ldr	r4, [r3, #0]
 802aef4:	4014      	ands	r4, r2
 802aef6:	42ac      	cmp	r4, r5
 802aef8:	d125      	bne.n	802af46 <CRC_Lock+0x76>
 802aefa:	4b25      	ldr	r3, [pc, #148]	@ (802af90 <CRC_Lock+0xc0>)
 802aefc:	681b      	ldr	r3, [r3, #0]
 802aefe:	2b00      	cmp	r3, #0
 802af00:	d139      	bne.n	802af76 <CRC_Lock+0xa6>
 802af02:	4b24      	ldr	r3, [pc, #144]	@ (802af94 <CRC_Lock+0xc4>)
 802af04:	681a      	ldr	r2, [r3, #0]
 802af06:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802af0a:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802af0e:	d00d      	beq.n	802af2c <CRC_Lock+0x5c>
 802af10:	f240 4483 	movw	r4, #1155	@ 0x483
 802af14:	681a      	ldr	r2, [r3, #0]
 802af16:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802af1a:	42a2      	cmp	r2, r4
 802af1c:	d006      	beq.n	802af2c <CRC_Lock+0x5c>
 802af1e:	f240 4285 	movw	r2, #1157	@ 0x485
 802af22:	681b      	ldr	r3, [r3, #0]
 802af24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802af28:	4293      	cmp	r3, r2
 802af2a:	d124      	bne.n	802af76 <CRC_Lock+0xa6>
 802af2c:	2201      	movs	r2, #1
 802af2e:	4b1a      	ldr	r3, [pc, #104]	@ (802af98 <CRC_Lock+0xc8>)
 802af30:	601a      	str	r2, [r3, #0]
 802af32:	681a      	ldr	r2, [r3, #0]
 802af34:	2a00      	cmp	r2, #0
 802af36:	d1fc      	bne.n	802af32 <CRC_Lock+0x62>
 802af38:	4b18      	ldr	r3, [pc, #96]	@ (802af9c <CRC_Lock+0xcc>)
 802af3a:	6018      	str	r0, [r3, #0]
 802af3c:	6818      	ldr	r0, [r3, #0]
 802af3e:	1a43      	subs	r3, r0, r1
 802af40:	4258      	negs	r0, r3
 802af42:	4158      	adcs	r0, r3
 802af44:	e00e      	b.n	802af64 <CRC_Lock+0x94>
 802af46:	681b      	ldr	r3, [r3, #0]
 802af48:	4013      	ands	r3, r2
 802af4a:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802af4e:	4293      	cmp	r3, r2
 802af50:	d111      	bne.n	802af76 <CRC_Lock+0xa6>
 802af52:	f240 4286 	movw	r2, #1158	@ 0x486
 802af56:	4b12      	ldr	r3, [pc, #72]	@ (802afa0 <CRC_Lock+0xd0>)
 802af58:	681b      	ldr	r3, [r3, #0]
 802af5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802af5e:	4293      	cmp	r3, r2
 802af60:	d001      	beq.n	802af66 <CRC_Lock+0x96>
 802af62:	2000      	movs	r0, #0
 802af64:	bd30      	pop	{r4, r5, pc}
 802af66:	2201      	movs	r2, #1
 802af68:	4b0e      	ldr	r3, [pc, #56]	@ (802afa4 <CRC_Lock+0xd4>)
 802af6a:	601a      	str	r2, [r3, #0]
 802af6c:	681a      	ldr	r2, [r3, #0]
 802af6e:	2a00      	cmp	r2, #0
 802af70:	d1fc      	bne.n	802af6c <CRC_Lock+0x9c>
 802af72:	4b0d      	ldr	r3, [pc, #52]	@ (802afa8 <CRC_Lock+0xd8>)
 802af74:	e7e1      	b.n	802af3a <CRC_Lock+0x6a>
 802af76:	2201      	movs	r2, #1
 802af78:	4b0c      	ldr	r3, [pc, #48]	@ (802afac <CRC_Lock+0xdc>)
 802af7a:	601a      	str	r2, [r3, #0]
 802af7c:	681a      	ldr	r2, [r3, #0]
 802af7e:	2a00      	cmp	r2, #0
 802af80:	d1fc      	bne.n	802af7c <CRC_Lock+0xac>
 802af82:	4b0b      	ldr	r3, [pc, #44]	@ (802afb0 <CRC_Lock+0xe0>)
 802af84:	e7d9      	b.n	802af3a <CRC_Lock+0x6a>
 802af86:	bf00      	nop
 802af88:	e0002000 	.word	0xe0002000
 802af8c:	e000ed00 	.word	0xe000ed00
 802af90:	e0042000 	.word	0xe0042000
 802af94:	5c001000 	.word	0x5c001000
 802af98:	58024c08 	.word	0x58024c08
 802af9c:	58024c00 	.word	0x58024c00
 802afa0:	46008ff0 	.word	0x46008ff0
 802afa4:	46024c08 	.word	0x46024c08
 802afa8:	46024c00 	.word	0x46024c00
 802afac:	40023008 	.word	0x40023008
 802afb0:	40023000 	.word	0x40023000

0802afb4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802afb4:	6101      	str	r1, [r0, #16]
 802afb6:	4770      	bx	lr

0802afb8 <_ZN8touchgfx8Gestures4tickEv>:
 802afb8:	7b83      	ldrb	r3, [r0, #14]
 802afba:	b14b      	cbz	r3, 802afd0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802afbc:	8903      	ldrh	r3, [r0, #8]
 802afbe:	3301      	adds	r3, #1
 802afc0:	b29b      	uxth	r3, r3
 802afc2:	2b07      	cmp	r3, #7
 802afc4:	8103      	strh	r3, [r0, #8]
 802afc6:	bf81      	itttt	hi
 802afc8:	2300      	movhi	r3, #0
 802afca:	8143      	strhhi	r3, [r0, #10]
 802afcc:	8183      	strhhi	r3, [r0, #12]
 802afce:	7383      	strbhi	r3, [r0, #14]
 802afd0:	4770      	bx	lr
	...

0802afd4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802afd4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802afd8:	4698      	mov	r8, r3
 802afda:	4604      	mov	r4, r0
 802afdc:	8883      	ldrh	r3, [r0, #4]
 802afde:	460e      	mov	r6, r1
 802afe0:	88c1      	ldrh	r1, [r0, #6]
 802afe2:	2000      	movs	r0, #0
 802afe4:	f8ad 3006 	strh.w	r3, [sp, #6]
 802afe8:	eba8 0303 	sub.w	r3, r8, r3
 802afec:	b21b      	sxth	r3, r3
 802afee:	4617      	mov	r7, r2
 802aff0:	4a17      	ldr	r2, [pc, #92]	@ (802b050 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802aff2:	2b00      	cmp	r3, #0
 802aff4:	bfb8      	it	lt
 802aff6:	425b      	neglt	r3, r3
 802aff8:	9200      	str	r2, [sp, #0]
 802affa:	8aa2      	ldrh	r2, [r4, #20]
 802affc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802b000:	b21b      	sxth	r3, r3
 802b002:	4293      	cmp	r3, r2
 802b004:	f88d 0004 	strb.w	r0, [sp, #4]
 802b008:	f8ad 1008 	strh.w	r1, [sp, #8]
 802b00c:	f8ad 800a 	strh.w	r8, [sp, #10]
 802b010:	f8ad 500c 	strh.w	r5, [sp, #12]
 802b014:	dc07      	bgt.n	802b026 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802b016:	1a69      	subs	r1, r5, r1
 802b018:	b209      	sxth	r1, r1
 802b01a:	2900      	cmp	r1, #0
 802b01c:	bfb8      	it	lt
 802b01e:	4249      	neglt	r1, r1
 802b020:	b209      	sxth	r1, r1
 802b022:	428a      	cmp	r2, r1
 802b024:	da10      	bge.n	802b048 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802b026:	6920      	ldr	r0, [r4, #16]
 802b028:	4669      	mov	r1, sp
 802b02a:	6803      	ldr	r3, [r0, #0]
 802b02c:	eba8 0606 	sub.w	r6, r8, r6
 802b030:	685b      	ldr	r3, [r3, #4]
 802b032:	4798      	blx	r3
 802b034:	2300      	movs	r3, #0
 802b036:	2001      	movs	r0, #1
 802b038:	1bef      	subs	r7, r5, r7
 802b03a:	8123      	strh	r3, [r4, #8]
 802b03c:	8166      	strh	r6, [r4, #10]
 802b03e:	81a7      	strh	r7, [r4, #12]
 802b040:	f8a4 8004 	strh.w	r8, [r4, #4]
 802b044:	80e5      	strh	r5, [r4, #6]
 802b046:	73a0      	strb	r0, [r4, #14]
 802b048:	b004      	add	sp, #16
 802b04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b04e:	bf00      	nop
 802b050:	0802fa6c 	.word	0x0802fa6c

0802b054 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802b054:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b056:	461e      	mov	r6, r3
 802b058:	1e4b      	subs	r3, r1, #1
 802b05a:	2b01      	cmp	r3, #1
 802b05c:	b085      	sub	sp, #20
 802b05e:	4604      	mov	r4, r0
 802b060:	460d      	mov	r5, r1
 802b062:	4617      	mov	r7, r2
 802b064:	d84b      	bhi.n	802b0fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802b066:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802b06a:	1cd3      	adds	r3, r2, #3
 802b06c:	b29b      	uxth	r3, r3
 802b06e:	2b06      	cmp	r3, #6
 802b070:	d916      	bls.n	802b0a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802b072:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802b114 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b076:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b07a:	f8cd c004 	str.w	ip, [sp, #4]
 802b07e:	f04f 0c00 	mov.w	ip, #0
 802b082:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b086:	6900      	ldr	r0, [r0, #16]
 802b088:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b08c:	f88d c008 	strb.w	ip, [sp, #8]
 802b090:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b094:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b098:	6803      	ldr	r3, [r0, #0]
 802b09a:	a901      	add	r1, sp, #4
 802b09c:	689b      	ldr	r3, [r3, #8]
 802b09e:	4798      	blx	r3
 802b0a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b0a4:	1cd3      	adds	r3, r2, #3
 802b0a6:	b29b      	uxth	r3, r3
 802b0a8:	2b06      	cmp	r3, #6
 802b0aa:	d916      	bls.n	802b0da <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b0ac:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802b114 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b0b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b0b4:	f8cd c004 	str.w	ip, [sp, #4]
 802b0b8:	f04f 0c01 	mov.w	ip, #1
 802b0bc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b0c0:	6920      	ldr	r0, [r4, #16]
 802b0c2:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b0c6:	f88d c008 	strb.w	ip, [sp, #8]
 802b0ca:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b0ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b0d2:	6803      	ldr	r3, [r0, #0]
 802b0d4:	a901      	add	r1, sp, #4
 802b0d6:	689b      	ldr	r3, [r3, #8]
 802b0d8:	4798      	blx	r3
 802b0da:	4b0d      	ldr	r3, [pc, #52]	@ (802b110 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802b0dc:	6920      	ldr	r0, [r4, #16]
 802b0de:	9301      	str	r3, [sp, #4]
 802b0e0:	2300      	movs	r3, #0
 802b0e2:	f88d 5008 	strb.w	r5, [sp, #8]
 802b0e6:	f8ad 700a 	strh.w	r7, [sp, #10]
 802b0ea:	f8ad 600c 	strh.w	r6, [sp, #12]
 802b0ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b0f2:	6803      	ldr	r3, [r0, #0]
 802b0f4:	a901      	add	r1, sp, #4
 802b0f6:	681b      	ldr	r3, [r3, #0]
 802b0f8:	4798      	blx	r3
 802b0fa:	b005      	add	sp, #20
 802b0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b0fe:	2900      	cmp	r1, #0
 802b100:	d1eb      	bne.n	802b0da <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b102:	80a2      	strh	r2, [r4, #4]
 802b104:	80c6      	strh	r6, [r0, #6]
 802b106:	60a1      	str	r1, [r4, #8]
 802b108:	81a1      	strh	r1, [r4, #12]
 802b10a:	73a1      	strb	r1, [r4, #14]
 802b10c:	e7e5      	b.n	802b0da <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b10e:	bf00      	nop
 802b110:	0802fa58 	.word	0x0802fa58
 802b114:	0802fa80 	.word	0x0802fa80

0802b118 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802b118:	10c9      	asrs	r1, r1, #3
 802b11a:	2900      	cmp	r1, #0
 802b11c:	bfb8      	it	lt
 802b11e:	4249      	neglt	r1, r1
 802b120:	2801      	cmp	r0, #1
 802b122:	d108      	bne.n	802b136 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802b124:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802b128:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802b12c:	4601      	mov	r1, r0
 802b12e:	dd02      	ble.n	802b136 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802b130:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802b134:	4770      	bx	lr
 802b136:	29ff      	cmp	r1, #255	@ 0xff
 802b138:	bfa8      	it	ge
 802b13a:	21ff      	movge	r1, #255	@ 0xff
 802b13c:	4608      	mov	r0, r1
 802b13e:	4770      	bx	lr

0802b140 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802b140:	b410      	push	{r4}
 802b142:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802b146:	429c      	cmp	r4, r3
 802b148:	d803      	bhi.n	802b152 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802b14a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b14e:	f7ed b8cb 	b.w	80182e8 <_ZN8touchgfx7Outline6lineToEii>
 802b152:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b156:	4770      	bx	lr

0802b158 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b15c:	b08b      	sub	sp, #44	@ 0x2c
 802b15e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802b162:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802b166:	4606      	mov	r6, r0
 802b168:	9308      	str	r3, [sp, #32]
 802b16a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802b16e:	468a      	mov	sl, r1
 802b170:	9309      	str	r3, [sp, #36]	@ 0x24
 802b172:	f7ed fa25 	bl	80185c0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802b176:	68b5      	ldr	r5, [r6, #8]
 802b178:	4604      	mov	r4, r0
 802b17a:	2d00      	cmp	r5, #0
 802b17c:	d044      	beq.n	802b208 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b17e:	6873      	ldr	r3, [r6, #4]
 802b180:	42ab      	cmp	r3, r5
 802b182:	d33d      	bcc.n	802b200 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802b184:	f04f 0800 	mov.w	r8, #0
 802b188:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802b18c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802b190:	eb02 0b03 	add.w	fp, r2, r3
 802b194:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802b198:	fb02 1203 	mla	r2, r2, r3, r1
 802b19c:	9205      	str	r2, [sp, #20]
 802b19e:	1e6a      	subs	r2, r5, #1
 802b1a0:	9204      	str	r2, [sp, #16]
 802b1a2:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802b1a6:	f9b4 7000 	ldrsh.w	r7, [r4]
 802b1aa:	454b      	cmp	r3, r9
 802b1ac:	463a      	mov	r2, r7
 802b1ae:	d008      	beq.n	802b1c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802b1b0:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802b1b4:	eb03 0b09 	add.w	fp, r3, r9
 802b1b8:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802b1bc:	fb03 1309 	mla	r3, r3, r9, r1
 802b1c0:	9305      	str	r3, [sp, #20]
 802b1c2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802b1c6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802b1ca:	4498      	add	r8, r3
 802b1cc:	9b04      	ldr	r3, [sp, #16]
 802b1ce:	3b01      	subs	r3, #1
 802b1d0:	9304      	str	r3, [sp, #16]
 802b1d2:	9b04      	ldr	r3, [sp, #16]
 802b1d4:	3301      	adds	r3, #1
 802b1d6:	d015      	beq.n	802b204 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802b1d8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802b1dc:	42bb      	cmp	r3, r7
 802b1de:	d117      	bne.n	802b210 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802b1e0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802b1e4:	9b04      	ldr	r3, [sp, #16]
 802b1e6:	4548      	cmp	r0, r9
 802b1e8:	f103 33ff 	add.w	r3, r3, #4294967295
 802b1ec:	d17d      	bne.n	802b2ea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802b1ee:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802b1f2:	4401      	add	r1, r0
 802b1f4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802b1f8:	4480      	add	r8, r0
 802b1fa:	e7e9      	b.n	802b1d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802b1fc:	461f      	mov	r7, r3
 802b1fe:	e042      	b.n	802b286 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802b200:	2000      	movs	r0, #0
 802b202:	e002      	b.n	802b20a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802b204:	2900      	cmp	r1, #0
 802b206:	d16d      	bne.n	802b2e4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802b208:	2001      	movs	r0, #1
 802b20a:	b00b      	add	sp, #44	@ 0x2c
 802b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b210:	b379      	cbz	r1, 802b272 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802b212:	2f00      	cmp	r7, #0
 802b214:	db29      	blt.n	802b26a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b216:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802b21a:	42bb      	cmp	r3, r7
 802b21c:	dd25      	ble.n	802b26a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b21e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802b222:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802b226:	f7ff ff77 	bl	802b118 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802b22a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b22c:	fb10 f003 	smulbb	r0, r0, r3
 802b230:	b280      	uxth	r0, r0
 802b232:	1c41      	adds	r1, r0, #1
 802b234:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802b238:	1209      	asrs	r1, r1, #8
 802b23a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802b23e:	d014      	beq.n	802b26a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b240:	b2c9      	uxtb	r1, r1
 802b242:	9102      	str	r1, [sp, #8]
 802b244:	2101      	movs	r1, #1
 802b246:	9808      	ldr	r0, [sp, #32]
 802b248:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802b24a:	b2ba      	uxth	r2, r7
 802b24c:	4413      	add	r3, r2
 802b24e:	9101      	str	r1, [sp, #4]
 802b250:	4402      	add	r2, r0
 802b252:	fa0f f18b 	sxth.w	r1, fp
 802b256:	f8da 0000 	ldr.w	r0, [sl]
 802b25a:	9100      	str	r1, [sp, #0]
 802b25c:	6941      	ldr	r1, [r0, #20]
 802b25e:	b21b      	sxth	r3, r3
 802b260:	460d      	mov	r5, r1
 802b262:	b212      	sxth	r2, r2
 802b264:	9905      	ldr	r1, [sp, #20]
 802b266:	4650      	mov	r0, sl
 802b268:	47a8      	blx	r5
 802b26a:	9b04      	ldr	r3, [sp, #16]
 802b26c:	1c7a      	adds	r2, r7, #1
 802b26e:	3301      	adds	r3, #1
 802b270:	d0ca      	beq.n	802b208 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b272:	f9b4 7000 	ldrsh.w	r7, [r4]
 802b276:	1abb      	subs	r3, r7, r2
 802b278:	2b00      	cmp	r3, #0
 802b27a:	dd31      	ble.n	802b2e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b27c:	2a00      	cmp	r2, #0
 802b27e:	dabd      	bge.n	802b1fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802b280:	2f00      	cmp	r7, #0
 802b282:	dd2d      	ble.n	802b2e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b284:	2200      	movs	r2, #0
 802b286:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802b28a:	19d1      	adds	r1, r2, r7
 802b28c:	4299      	cmp	r1, r3
 802b28e:	db02      	blt.n	802b296 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802b290:	1a9f      	subs	r7, r3, r2
 802b292:	2f00      	cmp	r7, #0
 802b294:	dd24      	ble.n	802b2e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b296:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802b29a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802b29e:	f7ff ff3b 	bl	802b118 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802b2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b2a4:	fb10 f003 	smulbb	r0, r0, r3
 802b2a8:	b280      	uxth	r0, r0
 802b2aa:	1c41      	adds	r1, r0, #1
 802b2ac:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802b2b0:	1209      	asrs	r1, r1, #8
 802b2b2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802b2b6:	d013      	beq.n	802b2e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b2b8:	9808      	ldr	r0, [sp, #32]
 802b2ba:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802b2bc:	b292      	uxth	r2, r2
 802b2be:	b2c9      	uxtb	r1, r1
 802b2c0:	4413      	add	r3, r2
 802b2c2:	9102      	str	r1, [sp, #8]
 802b2c4:	4402      	add	r2, r0
 802b2c6:	b23f      	sxth	r7, r7
 802b2c8:	f8da 0000 	ldr.w	r0, [sl]
 802b2cc:	fa0f f18b 	sxth.w	r1, fp
 802b2d0:	9100      	str	r1, [sp, #0]
 802b2d2:	9701      	str	r7, [sp, #4]
 802b2d4:	6947      	ldr	r7, [r0, #20]
 802b2d6:	b21b      	sxth	r3, r3
 802b2d8:	b212      	sxth	r2, r2
 802b2da:	9905      	ldr	r1, [sp, #20]
 802b2dc:	4650      	mov	r0, sl
 802b2de:	47b8      	blx	r7
 802b2e0:	464b      	mov	r3, r9
 802b2e2:	e75e      	b.n	802b1a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802b2e4:	2f00      	cmp	r7, #0
 802b2e6:	da96      	bge.n	802b216 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802b2e8:	e78e      	b.n	802b208 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b2ea:	2900      	cmp	r1, #0
 802b2ec:	d0f8      	beq.n	802b2e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b2ee:	e790      	b.n	802b212 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802b2f0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802b2f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b2f4:	2500      	movs	r5, #0
 802b2f6:	461e      	mov	r6, r3
 802b2f8:	4b35      	ldr	r3, [pc, #212]	@ (802b3d0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802b2fa:	4604      	mov	r4, r0
 802b2fc:	e9c0 3100 	strd	r3, r1, [r0]
 802b300:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802b304:	f100 0814 	add.w	r8, r0, #20
 802b308:	8103      	strh	r3, [r0, #8]
 802b30a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802b30e:	8185      	strh	r5, [r0, #12]
 802b310:	7283      	strb	r3, [r0, #10]
 802b312:	81c5      	strh	r5, [r0, #14]
 802b314:	8205      	strh	r5, [r0, #16]
 802b316:	8245      	strh	r5, [r0, #18]
 802b318:	4640      	mov	r0, r8
 802b31a:	4617      	mov	r7, r2
 802b31c:	f7ec fb1c 	bl	8017958 <_ZN8touchgfx7OutlineC1Ev>
 802b320:	466b      	mov	r3, sp
 802b322:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802b326:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802b32a:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802b32e:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802b332:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802b336:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802b33a:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802b33e:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802b342:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802b346:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802b34a:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802b34e:	6830      	ldr	r0, [r6, #0]
 802b350:	6871      	ldr	r1, [r6, #4]
 802b352:	8872      	ldrh	r2, [r6, #2]
 802b354:	c303      	stmia	r3!, {r0, r1}
 802b356:	887b      	ldrh	r3, [r7, #2]
 802b358:	8835      	ldrh	r5, [r6, #0]
 802b35a:	4413      	add	r3, r2
 802b35c:	883a      	ldrh	r2, [r7, #0]
 802b35e:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802b362:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802b366:	442a      	add	r2, r5
 802b368:	81a2      	strh	r2, [r4, #12]
 802b36a:	81e3      	strh	r3, [r4, #14]
 802b36c:	8220      	strh	r0, [r4, #16]
 802b36e:	8261      	strh	r1, [r4, #18]
 802b370:	4668      	mov	r0, sp
 802b372:	4639      	mov	r1, r7
 802b374:	f7ee f82e 	bl	80193d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802b378:	f104 000c 	add.w	r0, r4, #12
 802b37c:	f7ee f802 	bl	8019384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802b380:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802b384:	f8bd 2000 	ldrh.w	r2, [sp]
 802b388:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802b38c:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802b390:	4640      	mov	r0, r8
 802b392:	f7ec fac5 	bl	8017920 <_ZN8touchgfx7Outline5resetEv>
 802b396:	4620      	mov	r0, r4
 802b398:	f9bd 3000 	ldrsh.w	r3, [sp]
 802b39c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802b3a0:	015b      	lsls	r3, r3, #5
 802b3a2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802b3a4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802b3a8:	015b      	lsls	r3, r3, #5
 802b3aa:	6523      	str	r3, [r4, #80]	@ 0x50
 802b3ac:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802b3b0:	015b      	lsls	r3, r3, #5
 802b3b2:	6563      	str	r3, [r4, #84]	@ 0x54
 802b3b4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802b3b8:	015b      	lsls	r3, r3, #5
 802b3ba:	65a3      	str	r3, [r4, #88]	@ 0x58
 802b3bc:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802b3c0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802b3c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802b3c8:	b002      	add	sp, #8
 802b3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b3ce:	bf00      	nop
 802b3d0:	0802fdbc 	.word	0x0802fdbc

0802b3d4 <_ZN8touchgfx6Canvas5closeEv>:
 802b3d4:	b538      	push	{r3, r4, r5, lr}
 802b3d6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802b3da:	4604      	mov	r4, r0
 802b3dc:	b193      	cbz	r3, 802b404 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802b3de:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802b3e2:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802b3e6:	4213      	tst	r3, r2
 802b3e8:	d10c      	bne.n	802b404 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802b3ea:	f100 0514 	add.w	r5, r0, #20
 802b3ee:	b123      	cbz	r3, 802b3fa <_ZN8touchgfx6Canvas5closeEv+0x26>
 802b3f0:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802b3f4:	4628      	mov	r0, r5
 802b3f6:	f7ff fea3 	bl	802b140 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b3fa:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802b3fe:	4628      	mov	r0, r5
 802b400:	f7ff fe9e 	bl	802b140 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b404:	2300      	movs	r3, #0
 802b406:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b40a:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802b40e:	4298      	cmp	r0, r3
 802b410:	bf34      	ite	cc
 802b412:	2000      	movcc	r0, #0
 802b414:	2001      	movcs	r0, #1
 802b416:	bd38      	pop	{r3, r4, r5, pc}

0802b418 <_ZN8touchgfx6Canvas6renderEh>:
 802b418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b41c:	7a85      	ldrb	r5, [r0, #10]
 802b41e:	4604      	mov	r4, r0
 802b420:	4369      	muls	r1, r5
 802b422:	1c4d      	adds	r5, r1, #1
 802b424:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802b428:	122d      	asrs	r5, r5, #8
 802b42a:	f000 8098 	beq.w	802b55e <_ZN8touchgfx6Canvas6renderEh+0x146>
 802b42e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802b432:	2b00      	cmp	r3, #0
 802b434:	f000 8093 	beq.w	802b55e <_ZN8touchgfx6Canvas6renderEh+0x146>
 802b438:	f7ff ffcc 	bl	802b3d4 <_ZN8touchgfx6Canvas5closeEv>
 802b43c:	4607      	mov	r7, r0
 802b43e:	2800      	cmp	r0, #0
 802b440:	d045      	beq.n	802b4ce <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802b442:	6860      	ldr	r0, [r4, #4]
 802b444:	4e47      	ldr	r6, [pc, #284]	@ (802b564 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802b446:	6803      	ldr	r3, [r0, #0]
 802b448:	6837      	ldr	r7, [r6, #0]
 802b44a:	689b      	ldr	r3, [r3, #8]
 802b44c:	4798      	blx	r3
 802b44e:	4601      	mov	r1, r0
 802b450:	4638      	mov	r0, r7
 802b452:	f7ea fa17 	bl	8015884 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802b456:	4607      	mov	r7, r0
 802b458:	f7e4 faf6 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 802b45c:	6803      	ldr	r3, [r0, #0]
 802b45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b460:	4798      	blx	r3
 802b462:	4680      	mov	r8, r0
 802b464:	f7e4 faf0 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 802b468:	6803      	ldr	r3, [r0, #0]
 802b46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b46c:	4798      	blx	r3
 802b46e:	280b      	cmp	r0, #11
 802b470:	d85a      	bhi.n	802b528 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802b472:	e8df f000 	tbb	[pc, r0]
 802b476:	5b50      	.short	0x5b50
 802b478:	3059066b 	.word	0x3059066b
 802b47c:	64646440 	.word	0x64646440
 802b480:	6464      	.short	0x6464
 802b482:	2208      	movs	r2, #8
 802b484:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b488:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b48c:	fb91 f2f2 	sdiv	r2, r1, r2
 802b490:	fb08 2303 	mla	r3, r8, r3, r2
 802b494:	441f      	add	r7, r3
 802b496:	424b      	negs	r3, r1
 802b498:	f003 0307 	and.w	r3, r3, #7
 802b49c:	f001 0107 	and.w	r1, r1, #7
 802b4a0:	bf58      	it	pl
 802b4a2:	4259      	negpl	r1, r3
 802b4a4:	b2c9      	uxtb	r1, r1
 802b4a6:	b2ed      	uxtb	r5, r5
 802b4a8:	463a      	mov	r2, r7
 802b4aa:	e9cd 1500 	strd	r1, r5, [sp]
 802b4ae:	fa0f f388 	sxth.w	r3, r8
 802b4b2:	6861      	ldr	r1, [r4, #4]
 802b4b4:	f104 0014 	add.w	r0, r4, #20
 802b4b8:	f7ff fe4e 	bl	802b158 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802b4bc:	4607      	mov	r7, r0
 802b4be:	6860      	ldr	r0, [r4, #4]
 802b4c0:	6803      	ldr	r3, [r0, #0]
 802b4c2:	691b      	ldr	r3, [r3, #16]
 802b4c4:	4798      	blx	r3
 802b4c6:	6830      	ldr	r0, [r6, #0]
 802b4c8:	6803      	ldr	r3, [r0, #0]
 802b4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b4cc:	4798      	blx	r3
 802b4ce:	4638      	mov	r0, r7
 802b4d0:	b002      	add	sp, #8
 802b4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b4d6:	2204      	movs	r2, #4
 802b4d8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b4dc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b4e0:	fb91 f2f2 	sdiv	r2, r1, r2
 802b4e4:	fb08 2303 	mla	r3, r8, r3, r2
 802b4e8:	441f      	add	r7, r3
 802b4ea:	424b      	negs	r3, r1
 802b4ec:	f003 0303 	and.w	r3, r3, #3
 802b4f0:	f001 0103 	and.w	r1, r1, #3
 802b4f4:	e7d4      	b.n	802b4a0 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802b4f6:	2202      	movs	r2, #2
 802b4f8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b4fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b500:	fb91 f2f2 	sdiv	r2, r1, r2
 802b504:	fb08 2303 	mla	r3, r8, r3, r2
 802b508:	2900      	cmp	r1, #0
 802b50a:	f001 0101 	and.w	r1, r1, #1
 802b50e:	441f      	add	r7, r3
 802b510:	bfb8      	it	lt
 802b512:	4249      	neglt	r1, r1
 802b514:	e7c6      	b.n	802b4a4 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802b516:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b51a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b51e:	fb08 f303 	mul.w	r3, r8, r3
 802b522:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802b526:	441f      	add	r7, r3
 802b528:	2100      	movs	r1, #0
 802b52a:	e7bc      	b.n	802b4a6 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802b52c:	2103      	movs	r1, #3
 802b52e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b532:	fb08 f203 	mul.w	r2, r8, r3
 802b536:	89a3      	ldrh	r3, [r4, #12]
 802b538:	fb13 2301 	smlabb	r3, r3, r1, r2
 802b53c:	e7f3      	b.n	802b526 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b53e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b546:	fb08 2303 	mla	r3, r8, r3, r2
 802b54a:	e7ec      	b.n	802b526 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b54c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b554:	fb08 f303 	mul.w	r3, r8, r3
 802b558:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802b55c:	e7e3      	b.n	802b526 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b55e:	2701      	movs	r7, #1
 802b560:	e7b5      	b.n	802b4ce <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802b562:	bf00      	nop
 802b564:	2005baa4 	.word	0x2005baa4

0802b568 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802b568:	b510      	push	{r4, lr}
 802b56a:	4b06      	ldr	r3, [pc, #24]	@ (802b584 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802b56c:	781b      	ldrb	r3, [r3, #0]
 802b56e:	2b01      	cmp	r3, #1
 802b570:	d107      	bne.n	802b582 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802b572:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802b576:	680b      	ldr	r3, [r1, #0]
 802b578:	6814      	ldr	r4, [r2, #0]
 802b57a:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802b57e:	6013      	str	r3, [r2, #0]
 802b580:	600c      	str	r4, [r1, #0]
 802b582:	bd10      	pop	{r4, pc}
 802b584:	2005ba9c 	.word	0x2005ba9c

0802b588 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802b588:	b513      	push	{r0, r1, r4, lr}
 802b58a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802b58e:	4604      	mov	r4, r0
 802b590:	e9cd 2100 	strd	r2, r1, [sp]
 802b594:	b9a3      	cbnz	r3, 802b5c0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802b596:	466a      	mov	r2, sp
 802b598:	a901      	add	r1, sp, #4
 802b59a:	4620      	mov	r0, r4
 802b59c:	f7ff ffe4 	bl	802b568 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b5a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802b5a2:	9901      	ldr	r1, [sp, #4]
 802b5a4:	9a00      	ldr	r2, [sp, #0]
 802b5a6:	1ac9      	subs	r1, r1, r3
 802b5a8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802b5aa:	9101      	str	r1, [sp, #4]
 802b5ac:	1ad2      	subs	r2, r2, r3
 802b5ae:	2a00      	cmp	r2, #0
 802b5b0:	9200      	str	r2, [sp, #0]
 802b5b2:	da0b      	bge.n	802b5cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802b5b4:	2301      	movs	r3, #1
 802b5b6:	2900      	cmp	r1, #0
 802b5b8:	da0e      	bge.n	802b5d8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802b5ba:	f043 0304 	orr.w	r3, r3, #4
 802b5be:	e013      	b.n	802b5e8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802b5c0:	f7ff ff08 	bl	802b3d4 <_ZN8touchgfx6Canvas5closeEv>
 802b5c4:	2800      	cmp	r0, #0
 802b5c6:	d1e6      	bne.n	802b596 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802b5c8:	b002      	add	sp, #8
 802b5ca:	bd10      	pop	{r4, pc}
 802b5cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802b5ce:	429a      	cmp	r2, r3
 802b5d0:	bfac      	ite	ge
 802b5d2:	2302      	movge	r3, #2
 802b5d4:	2300      	movlt	r3, #0
 802b5d6:	e7ee      	b.n	802b5b6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802b5d8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802b5da:	4281      	cmp	r1, r0
 802b5dc:	bfac      	ite	ge
 802b5de:	2008      	movge	r0, #8
 802b5e0:	2000      	movlt	r0, #0
 802b5e2:	4318      	orrs	r0, r3
 802b5e4:	b2c3      	uxtb	r3, r0
 802b5e6:	b158      	cbz	r0, 802b600 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802b5e8:	2200      	movs	r2, #0
 802b5ea:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802b5ee:	9901      	ldr	r1, [sp, #4]
 802b5f0:	9a00      	ldr	r2, [sp, #0]
 802b5f2:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802b5f4:	6722      	str	r2, [r4, #112]	@ 0x70
 802b5f6:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802b5fa:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802b5fe:	e7e3      	b.n	802b5c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802b600:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802b604:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802b608:	4298      	cmp	r0, r3
 802b60a:	d803      	bhi.n	802b614 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802b60c:	f104 0014 	add.w	r0, r4, #20
 802b610:	f7ec fe84 	bl	801831c <_ZN8touchgfx7Outline6moveToEii>
 802b614:	2301      	movs	r3, #1
 802b616:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b61a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802b61e:	2300      	movs	r3, #0
 802b620:	e7e5      	b.n	802b5ee <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802b622 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802b622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b624:	4604      	mov	r4, r0
 802b626:	ab02      	add	r3, sp, #8
 802b628:	f843 2d08 	str.w	r2, [r3, #-8]!
 802b62c:	461a      	mov	r2, r3
 802b62e:	9101      	str	r1, [sp, #4]
 802b630:	a901      	add	r1, sp, #4
 802b632:	f7ff ff99 	bl	802b568 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b636:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802b638:	9901      	ldr	r1, [sp, #4]
 802b63a:	9a00      	ldr	r2, [sp, #0]
 802b63c:	1ac9      	subs	r1, r1, r3
 802b63e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802b640:	9101      	str	r1, [sp, #4]
 802b642:	1ad2      	subs	r2, r2, r3
 802b644:	2a00      	cmp	r2, #0
 802b646:	9200      	str	r2, [sp, #0]
 802b648:	db1c      	blt.n	802b684 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802b64a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802b64c:	429a      	cmp	r2, r3
 802b64e:	bfac      	ite	ge
 802b650:	2002      	movge	r0, #2
 802b652:	2000      	movlt	r0, #0
 802b654:	2900      	cmp	r1, #0
 802b656:	db17      	blt.n	802b688 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802b658:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802b65a:	4299      	cmp	r1, r3
 802b65c:	bfac      	ite	ge
 802b65e:	2308      	movge	r3, #8
 802b660:	2300      	movlt	r3, #0
 802b662:	4303      	orrs	r3, r0
 802b664:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802b668:	b2dd      	uxtb	r5, r3
 802b66a:	b978      	cbnz	r0, 802b68c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802b66c:	f104 0014 	add.w	r0, r4, #20
 802b670:	f7ff fd66 	bl	802b140 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b674:	9b01      	ldr	r3, [sp, #4]
 802b676:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802b67a:	6623      	str	r3, [r4, #96]	@ 0x60
 802b67c:	9b00      	ldr	r3, [sp, #0]
 802b67e:	6663      	str	r3, [r4, #100]	@ 0x64
 802b680:	b002      	add	sp, #8
 802b682:	bd70      	pop	{r4, r5, r6, pc}
 802b684:	2001      	movs	r0, #1
 802b686:	e7e5      	b.n	802b654 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802b688:	2304      	movs	r3, #4
 802b68a:	e7ea      	b.n	802b662 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802b68c:	b113      	cbz	r3, 802b694 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802b68e:	ea10 0305 	ands.w	r3, r0, r5
 802b692:	d11c      	bne.n	802b6ce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802b694:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802b698:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802b69c:	f104 0614 	add.w	r6, r4, #20
 802b6a0:	b98b      	cbnz	r3, 802b6c6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802b6a2:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802b6a6:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802b6aa:	4298      	cmp	r0, r3
 802b6ac:	d802      	bhi.n	802b6b4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802b6ae:	4630      	mov	r0, r6
 802b6b0:	f7ec fe34 	bl	801831c <_ZN8touchgfx7Outline6moveToEii>
 802b6b4:	2301      	movs	r3, #1
 802b6b6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b6ba:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802b6be:	e9dd 2100 	ldrd	r2, r1, [sp]
 802b6c2:	4630      	mov	r0, r6
 802b6c4:	e7d4      	b.n	802b670 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802b6c6:	4630      	mov	r0, r6
 802b6c8:	f7ff fd3a 	bl	802b140 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b6cc:	e7f7      	b.n	802b6be <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802b6ce:	461d      	mov	r5, r3
 802b6d0:	e7d0      	b.n	802b674 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802b6d4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 802b6d4:	b538      	push	{r3, r4, r5, lr}
 802b6d6:	ed2d 8b10 	vpush	{d8-d15}
 802b6da:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 802b6de:	4605      	mov	r5, r0
 802b6e0:	eeb0 ca40 	vmov.f32	s24, s0
 802b6e4:	eef0 ca60 	vmov.f32	s25, s1
 802b6e8:	eeb0 da41 	vmov.f32	s26, s2
 802b6ec:	eef0 da61 	vmov.f32	s27, s3
 802b6f0:	eeb0 ea42 	vmov.f32	s28, s4
 802b6f4:	eef0 ea62 	vmov.f32	s29, s5
 802b6f8:	460c      	mov	r4, r1
 802b6fa:	eef0 aa6b 	vmov.f32	s21, s23
 802b6fe:	ed9f ba52 	vldr	s22, [pc, #328]	@ 802b848 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 802b702:	2c08      	cmp	r4, #8
 802b704:	d86e      	bhi.n	802b7e4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802b706:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802b70a:	ee7d 7aee 	vsub.f32	s15, s27, s29
 802b70e:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802b712:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802b716:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802b71a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802b71e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802b722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b726:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802b72a:	bf48      	it	mi
 802b72c:	eef1 7a67 	vnegmi.f32	s15, s15
 802b730:	ee7c faad 	vadd.f32	s31, s25, s27
 802b734:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802b738:	ee3d aaae 	vadd.f32	s20, s27, s29
 802b73c:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802b740:	ee6f faab 	vmul.f32	s31, s31, s23
 802b744:	ee69 9aab 	vmul.f32	s19, s19, s23
 802b748:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802b74c:	eef4 7acb 	vcmpe.f32	s15, s22
 802b750:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802b754:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 802b758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b75c:	ee68 8aab 	vmul.f32	s17, s17, s23
 802b760:	ee29 9a2b 	vmul.f32	s18, s18, s23
 802b764:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 802b768:	dd3f      	ble.n	802b7ea <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 802b76a:	ee27 7a07 	vmul.f32	s14, s14, s14
 802b76e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802b772:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802b776:	ee27 7a06 	vmul.f32	s14, s14, s12
 802b77a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802b77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b782:	d847      	bhi.n	802b814 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802b784:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 802b788:	ee3e 0aed 	vsub.f32	s0, s29, s27
 802b78c:	f000 fa37 	bl	802bbfe <atan2f>
 802b790:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 802b794:	eeb0 8a40 	vmov.f32	s16, s0
 802b798:	ee3d 0aec 	vsub.f32	s0, s27, s25
 802b79c:	f000 fa2f 	bl	802bbfe <atan2f>
 802b7a0:	ee38 0a40 	vsub.f32	s0, s16, s0
 802b7a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b7ac:	eddf 7a27 	vldr	s15, [pc, #156]	@ 802b84c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 802b7b0:	bf48      	it	mi
 802b7b2:	eeb1 0a40 	vnegmi.f32	s0, s0
 802b7b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b7be:	bfa4      	itt	ge
 802b7c0:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 802b850 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 802b7c4:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802b7c8:	eddf 7a22 	vldr	s15, [pc, #136]	@ 802b854 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 802b7cc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b7d4:	d51e      	bpl.n	802b814 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802b7d6:	eef0 0a49 	vmov.f32	s1, s18
 802b7da:	eeb0 0a68 	vmov.f32	s0, s17
 802b7de:	4628      	mov	r0, r5
 802b7e0:	f7eb fa3c 	bl	8016c5c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802b7e4:	ecbd 8b10 	vpop	{d8-d15}
 802b7e8:	bd38      	pop	{r3, r4, r5, pc}
 802b7ea:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802b7ee:	eeb0 7a68 	vmov.f32	s14, s17
 802b7f2:	eef0 6a49 	vmov.f32	s13, s18
 802b7f6:	eea7 7aea 	vfms.f32	s14, s15, s21
 802b7fa:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802b7fe:	eee7 6aea 	vfms.f32	s13, s15, s21
 802b802:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802b806:	eee7 7a07 	vfma.f32	s15, s14, s14
 802b80a:	eef4 7ac6 	vcmpe.f32	s15, s12
 802b80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b812:	d9e0      	bls.n	802b7d6 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802b814:	3401      	adds	r4, #1
 802b816:	eef0 0a6c 	vmov.f32	s1, s25
 802b81a:	eeb0 0a4c 	vmov.f32	s0, s24
 802b81e:	4621      	mov	r1, r4
 802b820:	eef0 2a49 	vmov.f32	s5, s18
 802b824:	eeb0 2a68 	vmov.f32	s4, s17
 802b828:	eef0 1a6f 	vmov.f32	s3, s31
 802b82c:	eeb0 1a4f 	vmov.f32	s2, s30
 802b830:	4628      	mov	r0, r5
 802b832:	f7ff ff4f 	bl	802b6d4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802b836:	eef0 da4a 	vmov.f32	s27, s20
 802b83a:	eeb0 da69 	vmov.f32	s26, s19
 802b83e:	eef0 ca49 	vmov.f32	s25, s18
 802b842:	eeb0 ca68 	vmov.f32	s24, s17
 802b846:	e75c      	b.n	802b702 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 802b848:	2edbe6ff 	.word	0x2edbe6ff
 802b84c:	40490fdb 	.word	0x40490fdb
 802b850:	40c90fdb 	.word	0x40c90fdb
 802b854:	3dcccccd 	.word	0x3dcccccd

0802b858 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 802b858:	b530      	push	{r4, r5, lr}
 802b85a:	ed2d 8b10 	vpush	{d8-d15}
 802b85e:	4604      	mov	r4, r0
 802b860:	eef0 8a40 	vmov.f32	s17, s0
 802b864:	eef0 9a60 	vmov.f32	s19, s1
 802b868:	eef0 fa41 	vmov.f32	s31, s2
 802b86c:	eeb0 fa61 	vmov.f32	s30, s3
 802b870:	eef0 ba42 	vmov.f32	s23, s4
 802b874:	eeb0 ca62 	vmov.f32	s24, s5
 802b878:	eef0 aa43 	vmov.f32	s21, s6
 802b87c:	eeb0 ba63 	vmov.f32	s22, s7
 802b880:	460d      	mov	r5, r1
 802b882:	b085      	sub	sp, #20
 802b884:	2d08      	cmp	r5, #8
 802b886:	f200 8113 	bhi.w	802bab0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 802b88a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802b88e:	ee38 daaf 	vadd.f32	s26, s17, s31
 802b892:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802b896:	ee7f 6aab 	vadd.f32	s13, s31, s23
 802b89a:	ee26 6a27 	vmul.f32	s12, s12, s15
 802b89e:	ee2d da27 	vmul.f32	s26, s26, s15
 802b8a2:	ed8d 6a01 	vstr	s12, [sp, #4]
 802b8a6:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802b8aa:	eeb0 ea4d 	vmov.f32	s28, s26
 802b8ae:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802b8b2:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802b8b6:	ee79 da8f 	vadd.f32	s27, s19, s30
 802b8ba:	ee66 6a27 	vmul.f32	s13, s12, s15
 802b8be:	ee6c caa7 	vmul.f32	s25, s25, s15
 802b8c2:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802b8c6:	edcd 6a03 	vstr	s13, [sp, #12]
 802b8ca:	ee6d daa7 	vmul.f32	s27, s27, s15
 802b8ce:	eef0 6a6c 	vmov.f32	s13, s25
 802b8d2:	eef0 ea6d 	vmov.f32	s29, s27
 802b8d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 802b8da:	eee7 ea27 	vfma.f32	s29, s14, s15
 802b8de:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802b8e2:	ee2e ea27 	vmul.f32	s28, s28, s15
 802b8e6:	ed8d 7a02 	vstr	s14, [sp, #8]
 802b8ea:	ed9d 7a03 	vldr	s14, [sp, #12]
 802b8ee:	ee6e eaa7 	vmul.f32	s29, s29, s15
 802b8f2:	ee3e 9a07 	vadd.f32	s18, s28, s14
 802b8f6:	ed9d 7a02 	vldr	s14, [sp, #8]
 802b8fa:	ee3e aa87 	vadd.f32	s20, s29, s14
 802b8fe:	ee29 9a27 	vmul.f32	s18, s18, s15
 802b902:	ee2a aa27 	vmul.f32	s20, s20, s15
 802b906:	eef0 6a67 	vmov.f32	s13, s15
 802b90a:	2d00      	cmp	r5, #0
 802b90c:	f000 810b 	beq.w	802bb26 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b910:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802b914:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 802b918:	ee7b 7a69 	vsub.f32	s15, s22, s19
 802b91c:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802b920:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802b924:	eea6 7a27 	vfma.f32	s14, s12, s15
 802b928:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802b92c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802b930:	ee3b 5aea 	vsub.f32	s10, s23, s21
 802b934:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 802b938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b93c:	eea5 6a27 	vfma.f32	s12, s10, s15
 802b940:	bf48      	it	mi
 802b942:	eeb1 7a47 	vnegmi.f32	s14, s14
 802b946:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802b94a:	eddf 4a88 	vldr	s9, [pc, #544]	@ 802bb6c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802b94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b952:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802b956:	bf48      	it	mi
 802b958:	eeb1 6a46 	vnegmi.f32	s12, s12
 802b95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b960:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 802b964:	f340 80a8 	ble.w	802bab8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 802b968:	eeb4 6ae4 	vcmpe.f32	s12, s9
 802b96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b970:	dd5a      	ble.n	802ba28 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 802b972:	ee65 5aa5 	vmul.f32	s11, s11, s11
 802b976:	ee37 7a06 	vadd.f32	s14, s14, s12
 802b97a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 802b97e:	ee27 7a07 	vmul.f32	s14, s14, s14
 802b982:	ee65 7a85 	vmul.f32	s15, s11, s10
 802b986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802b98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b98e:	f200 80ca 	bhi.w	802bb26 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b992:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802b996:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802b99a:	f000 f930 	bl	802bbfe <atan2f>
 802b99e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802b9a2:	eeb0 8a40 	vmov.f32	s16, s0
 802b9a6:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802b9aa:	f000 f928 	bl	802bbfe <atan2f>
 802b9ae:	ee38 fa40 	vsub.f32	s30, s16, s0
 802b9b2:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802b9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b9ba:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802b9be:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802b9c2:	bf48      	it	mi
 802b9c4:	eeb1 fa4f 	vnegmi.f32	s30, s30
 802b9c8:	f000 f919 	bl	802bbfe <atan2f>
 802b9cc:	ee30 0a48 	vsub.f32	s0, s0, s16
 802b9d0:	eddf 7a67 	vldr	s15, [pc, #412]	@ 802bb70 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802b9d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b9dc:	eeb4 fae7 	vcmpe.f32	s30, s15
 802b9e0:	bf48      	it	mi
 802b9e2:	eeb1 0a40 	vnegmi.f32	s0, s0
 802b9e6:	eddf 7a62 	vldr	s15, [pc, #392]	@ 802bb70 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802b9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b9ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b9f2:	bfa4      	itt	ge
 802b9f4:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 802bb74 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802b9f8:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 802b9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba00:	bfa4      	itt	ge
 802ba02:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 802bb74 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802ba06:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802ba0a:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802bb78 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802ba0e:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802ba12:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802ba16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba1a:	f140 8084 	bpl.w	802bb26 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802ba1e:	eef0 0a4a 	vmov.f32	s1, s20
 802ba22:	eeb0 0a49 	vmov.f32	s0, s18
 802ba26:	e040      	b.n	802baaa <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 802ba28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802ba2c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802ba30:	ee27 7a07 	vmul.f32	s14, s14, s14
 802ba34:	ee67 7a85 	vmul.f32	s15, s15, s10
 802ba38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802ba3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba40:	d871      	bhi.n	802bb26 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802ba42:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802ba46:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802ba4a:	f000 f8d8 	bl	802bbfe <atan2f>
 802ba4e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802ba52:	eeb0 8a40 	vmov.f32	s16, s0
 802ba56:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802ba5a:	f000 f8d0 	bl	802bbfe <atan2f>
 802ba5e:	ee38 0a40 	vsub.f32	s0, s16, s0
 802ba62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba6a:	eddf 7a41 	vldr	s15, [pc, #260]	@ 802bb70 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802ba6e:	bf48      	it	mi
 802ba70:	eeb1 0a40 	vnegmi.f32	s0, s0
 802ba74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802ba78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba7c:	bfa4      	itt	ge
 802ba7e:	eddf 7a3d 	vldrge	s15, [pc, #244]	@ 802bb74 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802ba82:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802ba86:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 802bb78 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802ba8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802ba8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba92:	d548      	bpl.n	802bb26 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802ba94:	eef0 0a4f 	vmov.f32	s1, s30
 802ba98:	eeb0 0a6f 	vmov.f32	s0, s31
 802ba9c:	4620      	mov	r0, r4
 802ba9e:	f7eb f8dd 	bl	8016c5c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802baa2:	eef0 0a4c 	vmov.f32	s1, s24
 802baa6:	eeb0 0a6b 	vmov.f32	s0, s23
 802baaa:	4620      	mov	r0, r4
 802baac:	f7eb f8d6 	bl	8016c5c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802bab0:	b005      	add	sp, #20
 802bab2:	ecbd 8b10 	vpop	{d8-d15}
 802bab6:	bd30      	pop	{r4, r5, pc}
 802bab8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 802bb6c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802babc:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802bac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bac4:	dd19      	ble.n	802bafa <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 802bac6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802baca:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802bace:	ee26 7a06 	vmul.f32	s14, s12, s12
 802bad2:	ee67 7a85 	vmul.f32	s15, s15, s10
 802bad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802bada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bade:	d822      	bhi.n	802bb26 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802bae0:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802bae4:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802bae8:	f000 f889 	bl	802bbfe <atan2f>
 802baec:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802baf0:	eeb0 8a40 	vmov.f32	s16, s0
 802baf4:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802baf8:	e7af      	b.n	802ba5a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 802bafa:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802bafe:	eeb0 7a49 	vmov.f32	s14, s18
 802bb02:	eeb0 6a4a 	vmov.f32	s12, s20
 802bb06:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802bb0a:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802bb0e:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802bb12:	ee66 7a06 	vmul.f32	s15, s12, s12
 802bb16:	eee7 7a07 	vfma.f32	s15, s14, s14
 802bb1a:	eef4 7ac5 	vcmpe.f32	s15, s10
 802bb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bb22:	f67f af7c 	bls.w	802ba1e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802bb26:	3501      	adds	r5, #1
 802bb28:	eef0 0a69 	vmov.f32	s1, s19
 802bb2c:	eeb0 0a68 	vmov.f32	s0, s17
 802bb30:	4629      	mov	r1, r5
 802bb32:	eef0 3a4a 	vmov.f32	s7, s20
 802bb36:	eeb0 3a49 	vmov.f32	s6, s18
 802bb3a:	eef0 2a6e 	vmov.f32	s5, s29
 802bb3e:	eeb0 2a4e 	vmov.f32	s4, s28
 802bb42:	eef0 1a6d 	vmov.f32	s3, s27
 802bb46:	eeb0 1a4d 	vmov.f32	s2, s26
 802bb4a:	4620      	mov	r0, r4
 802bb4c:	f7ff fe84 	bl	802b858 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802bb50:	eeb0 ca6c 	vmov.f32	s24, s25
 802bb54:	eddd ba01 	vldr	s23, [sp, #4]
 802bb58:	ed9d fa02 	vldr	s30, [sp, #8]
 802bb5c:	eddd fa03 	vldr	s31, [sp, #12]
 802bb60:	eef0 9a4a 	vmov.f32	s19, s20
 802bb64:	eef0 8a49 	vmov.f32	s17, s18
 802bb68:	e68c      	b.n	802b884 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 802bb6a:	bf00      	nop
 802bb6c:	2edbe6ff 	.word	0x2edbe6ff
 802bb70:	40490fdb 	.word	0x40490fdb
 802bb74:	40c90fdb 	.word	0x40c90fdb
 802bb78:	3dcccccd 	.word	0x3dcccccd

0802bb7c <_ZN8touchgfx6CanvasD1Ev>:
 802bb7c:	b510      	push	{r4, lr}
 802bb7e:	4604      	mov	r4, r0
 802bb80:	4b03      	ldr	r3, [pc, #12]	@ (802bb90 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802bb82:	f840 3b14 	str.w	r3, [r0], #20
 802bb86:	f7eb fec3 	bl	8017910 <_ZN8touchgfx7OutlineD1Ev>
 802bb8a:	4620      	mov	r0, r4
 802bb8c:	bd10      	pop	{r4, pc}
 802bb8e:	bf00      	nop
 802bb90:	0802fdbc 	.word	0x0802fdbc

0802bb94 <_ZN8touchgfx6CanvasD0Ev>:
 802bb94:	b510      	push	{r4, lr}
 802bb96:	4604      	mov	r4, r0
 802bb98:	f7ff fff0 	bl	802bb7c <_ZN8touchgfx6CanvasD1Ev>
 802bb9c:	4620      	mov	r0, r4
 802bb9e:	2174      	movs	r1, #116	@ 0x74
 802bba0:	f000 f807 	bl	802bbb2 <_ZdlPvj>
 802bba4:	4620      	mov	r0, r4
 802bba6:	bd10      	pop	{r4, pc}

0802bba8 <__aeabi_atexit>:
 802bba8:	460b      	mov	r3, r1
 802bbaa:	4601      	mov	r1, r0
 802bbac:	4618      	mov	r0, r3
 802bbae:	f000 bfd7 	b.w	802cb60 <__cxa_atexit>

0802bbb2 <_ZdlPvj>:
 802bbb2:	f000 b812 	b.w	802bbda <_ZdlPv>

0802bbb6 <__cxa_guard_acquire>:
 802bbb6:	6802      	ldr	r2, [r0, #0]
 802bbb8:	4603      	mov	r3, r0
 802bbba:	07d2      	lsls	r2, r2, #31
 802bbbc:	d405      	bmi.n	802bbca <__cxa_guard_acquire+0x14>
 802bbbe:	7842      	ldrb	r2, [r0, #1]
 802bbc0:	b102      	cbz	r2, 802bbc4 <__cxa_guard_acquire+0xe>
 802bbc2:	deff      	udf	#255	@ 0xff
 802bbc4:	2001      	movs	r0, #1
 802bbc6:	7058      	strb	r0, [r3, #1]
 802bbc8:	4770      	bx	lr
 802bbca:	2000      	movs	r0, #0
 802bbcc:	4770      	bx	lr

0802bbce <__cxa_guard_release>:
 802bbce:	2301      	movs	r3, #1
 802bbd0:	6003      	str	r3, [r0, #0]
 802bbd2:	4770      	bx	lr

0802bbd4 <__cxa_pure_virtual>:
 802bbd4:	b508      	push	{r3, lr}
 802bbd6:	f000 f80d 	bl	802bbf4 <_ZSt9terminatev>

0802bbda <_ZdlPv>:
 802bbda:	f000 bf0b 	b.w	802c9f4 <free>

0802bbde <_ZN10__cxxabiv111__terminateEPFvvE>:
 802bbde:	b508      	push	{r3, lr}
 802bbe0:	4780      	blx	r0
 802bbe2:	f000 fed4 	bl	802c98e <abort>
	...

0802bbe8 <_ZSt13get_terminatev>:
 802bbe8:	4b01      	ldr	r3, [pc, #4]	@ (802bbf0 <_ZSt13get_terminatev+0x8>)
 802bbea:	e8d3 0faf 	lda	r0, [r3]
 802bbee:	4770      	bx	lr
 802bbf0:	20000098 	.word	0x20000098

0802bbf4 <_ZSt9terminatev>:
 802bbf4:	b508      	push	{r3, lr}
 802bbf6:	f7ff fff7 	bl	802bbe8 <_ZSt13get_terminatev>
 802bbfa:	f7ff fff0 	bl	802bbde <_ZN10__cxxabiv111__terminateEPFvvE>

0802bbfe <atan2f>:
 802bbfe:	f000 b94d 	b.w	802be9c <__ieee754_atan2f>
	...

0802bc04 <sqrtf>:
 802bc04:	b508      	push	{r3, lr}
 802bc06:	ed2d 8b02 	vpush	{d8}
 802bc0a:	eeb0 8a40 	vmov.f32	s16, s0
 802bc0e:	f000 f8a1 	bl	802bd54 <__ieee754_sqrtf>
 802bc12:	eeb4 8a48 	vcmp.f32	s16, s16
 802bc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bc1a:	d60c      	bvs.n	802bc36 <sqrtf+0x32>
 802bc1c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802bc3c <sqrtf+0x38>
 802bc20:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802bc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bc28:	d505      	bpl.n	802bc36 <sqrtf+0x32>
 802bc2a:	f001 fa65 	bl	802d0f8 <__errno>
 802bc2e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802bc32:	2321      	movs	r3, #33	@ 0x21
 802bc34:	6003      	str	r3, [r0, #0]
 802bc36:	ecbd 8b02 	vpop	{d8}
 802bc3a:	bd08      	pop	{r3, pc}
 802bc3c:	00000000 	.word	0x00000000

0802bc40 <cosf>:
 802bc40:	ee10 3a10 	vmov	r3, s0
 802bc44:	b507      	push	{r0, r1, r2, lr}
 802bc46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802bc4a:	4a1d      	ldr	r2, [pc, #116]	@ (802bcc0 <cosf+0x80>)
 802bc4c:	4293      	cmp	r3, r2
 802bc4e:	d806      	bhi.n	802bc5e <cosf+0x1e>
 802bc50:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 802bcc4 <cosf+0x84>
 802bc54:	b003      	add	sp, #12
 802bc56:	f85d eb04 	ldr.w	lr, [sp], #4
 802bc5a:	f000 b87f 	b.w	802bd5c <__kernel_cosf>
 802bc5e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bc62:	d304      	bcc.n	802bc6e <cosf+0x2e>
 802bc64:	ee30 0a40 	vsub.f32	s0, s0, s0
 802bc68:	b003      	add	sp, #12
 802bc6a:	f85d fb04 	ldr.w	pc, [sp], #4
 802bc6e:	4668      	mov	r0, sp
 802bc70:	f000 f9b2 	bl	802bfd8 <__ieee754_rem_pio2f>
 802bc74:	f000 0003 	and.w	r0, r0, #3
 802bc78:	2801      	cmp	r0, #1
 802bc7a:	d009      	beq.n	802bc90 <cosf+0x50>
 802bc7c:	2802      	cmp	r0, #2
 802bc7e:	d010      	beq.n	802bca2 <cosf+0x62>
 802bc80:	b9b0      	cbnz	r0, 802bcb0 <cosf+0x70>
 802bc82:	eddd 0a01 	vldr	s1, [sp, #4]
 802bc86:	ed9d 0a00 	vldr	s0, [sp]
 802bc8a:	f000 f867 	bl	802bd5c <__kernel_cosf>
 802bc8e:	e7eb      	b.n	802bc68 <cosf+0x28>
 802bc90:	eddd 0a01 	vldr	s1, [sp, #4]
 802bc94:	ed9d 0a00 	vldr	s0, [sp]
 802bc98:	f000 f8b8 	bl	802be0c <__kernel_sinf>
 802bc9c:	eeb1 0a40 	vneg.f32	s0, s0
 802bca0:	e7e2      	b.n	802bc68 <cosf+0x28>
 802bca2:	eddd 0a01 	vldr	s1, [sp, #4]
 802bca6:	ed9d 0a00 	vldr	s0, [sp]
 802bcaa:	f000 f857 	bl	802bd5c <__kernel_cosf>
 802bcae:	e7f5      	b.n	802bc9c <cosf+0x5c>
 802bcb0:	2001      	movs	r0, #1
 802bcb2:	eddd 0a01 	vldr	s1, [sp, #4]
 802bcb6:	ed9d 0a00 	vldr	s0, [sp]
 802bcba:	f000 f8a7 	bl	802be0c <__kernel_sinf>
 802bcbe:	e7d3      	b.n	802bc68 <cosf+0x28>
 802bcc0:	3f490fd8 	.word	0x3f490fd8
 802bcc4:	00000000 	.word	0x00000000

0802bcc8 <sinf>:
 802bcc8:	ee10 3a10 	vmov	r3, s0
 802bccc:	b507      	push	{r0, r1, r2, lr}
 802bcce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802bcd2:	4a1e      	ldr	r2, [pc, #120]	@ (802bd4c <sinf+0x84>)
 802bcd4:	4293      	cmp	r3, r2
 802bcd6:	d807      	bhi.n	802bce8 <sinf+0x20>
 802bcd8:	2000      	movs	r0, #0
 802bcda:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802bd50 <sinf+0x88>
 802bcde:	b003      	add	sp, #12
 802bce0:	f85d eb04 	ldr.w	lr, [sp], #4
 802bce4:	f000 b892 	b.w	802be0c <__kernel_sinf>
 802bce8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bcec:	d304      	bcc.n	802bcf8 <sinf+0x30>
 802bcee:	ee30 0a40 	vsub.f32	s0, s0, s0
 802bcf2:	b003      	add	sp, #12
 802bcf4:	f85d fb04 	ldr.w	pc, [sp], #4
 802bcf8:	4668      	mov	r0, sp
 802bcfa:	f000 f96d 	bl	802bfd8 <__ieee754_rem_pio2f>
 802bcfe:	f000 0003 	and.w	r0, r0, #3
 802bd02:	2801      	cmp	r0, #1
 802bd04:	d00a      	beq.n	802bd1c <sinf+0x54>
 802bd06:	2802      	cmp	r0, #2
 802bd08:	d00f      	beq.n	802bd2a <sinf+0x62>
 802bd0a:	b9c0      	cbnz	r0, 802bd3e <sinf+0x76>
 802bd0c:	2001      	movs	r0, #1
 802bd0e:	eddd 0a01 	vldr	s1, [sp, #4]
 802bd12:	ed9d 0a00 	vldr	s0, [sp]
 802bd16:	f000 f879 	bl	802be0c <__kernel_sinf>
 802bd1a:	e7ea      	b.n	802bcf2 <sinf+0x2a>
 802bd1c:	eddd 0a01 	vldr	s1, [sp, #4]
 802bd20:	ed9d 0a00 	vldr	s0, [sp]
 802bd24:	f000 f81a 	bl	802bd5c <__kernel_cosf>
 802bd28:	e7e3      	b.n	802bcf2 <sinf+0x2a>
 802bd2a:	2001      	movs	r0, #1
 802bd2c:	eddd 0a01 	vldr	s1, [sp, #4]
 802bd30:	ed9d 0a00 	vldr	s0, [sp]
 802bd34:	f000 f86a 	bl	802be0c <__kernel_sinf>
 802bd38:	eeb1 0a40 	vneg.f32	s0, s0
 802bd3c:	e7d9      	b.n	802bcf2 <sinf+0x2a>
 802bd3e:	eddd 0a01 	vldr	s1, [sp, #4]
 802bd42:	ed9d 0a00 	vldr	s0, [sp]
 802bd46:	f000 f809 	bl	802bd5c <__kernel_cosf>
 802bd4a:	e7f5      	b.n	802bd38 <sinf+0x70>
 802bd4c:	3f490fd8 	.word	0x3f490fd8
 802bd50:	00000000 	.word	0x00000000

0802bd54 <__ieee754_sqrtf>:
 802bd54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802bd58:	4770      	bx	lr
	...

0802bd5c <__kernel_cosf>:
 802bd5c:	ee10 3a10 	vmov	r3, s0
 802bd60:	eef0 6a40 	vmov.f32	s13, s0
 802bd64:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802bd68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802bd6c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802bd70:	d204      	bcs.n	802bd7c <__kernel_cosf+0x20>
 802bd72:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 802bd76:	ee17 2a90 	vmov	r2, s15
 802bd7a:	b342      	cbz	r2, 802bdce <__kernel_cosf+0x72>
 802bd7c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802bd80:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 802bdec <__kernel_cosf+0x90>
 802bd84:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 802bdf0 <__kernel_cosf+0x94>
 802bd88:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 802bd8c:	4a19      	ldr	r2, [pc, #100]	@ (802bdf4 <__kernel_cosf+0x98>)
 802bd8e:	eea7 6a27 	vfma.f32	s12, s14, s15
 802bd92:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802bdf8 <__kernel_cosf+0x9c>
 802bd96:	4293      	cmp	r3, r2
 802bd98:	eee6 7a07 	vfma.f32	s15, s12, s14
 802bd9c:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 802bdfc <__kernel_cosf+0xa0>
 802bda0:	eea7 6a87 	vfma.f32	s12, s15, s14
 802bda4:	eddf 7a16 	vldr	s15, [pc, #88]	@ 802be00 <__kernel_cosf+0xa4>
 802bda8:	eee6 7a07 	vfma.f32	s15, s12, s14
 802bdac:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802be04 <__kernel_cosf+0xa8>
 802bdb0:	eea7 6a87 	vfma.f32	s12, s15, s14
 802bdb4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802bdb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 802bdbc:	ee26 6a07 	vmul.f32	s12, s12, s14
 802bdc0:	eee7 0a06 	vfma.f32	s1, s14, s12
 802bdc4:	d804      	bhi.n	802bdd0 <__kernel_cosf+0x74>
 802bdc6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802bdca:	ee30 0a67 	vsub.f32	s0, s0, s15
 802bdce:	4770      	bx	lr
 802bdd0:	4a0d      	ldr	r2, [pc, #52]	@ (802be08 <__kernel_cosf+0xac>)
 802bdd2:	4293      	cmp	r3, r2
 802bdd4:	bf96      	itet	ls
 802bdd6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 802bdda:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 802bdde:	ee07 3a10 	vmovls	s14, r3
 802bde2:	ee30 0a47 	vsub.f32	s0, s0, s14
 802bde6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bdea:	e7ec      	b.n	802bdc6 <__kernel_cosf+0x6a>
 802bdec:	ad47d74e 	.word	0xad47d74e
 802bdf0:	310f74f6 	.word	0x310f74f6
 802bdf4:	3e999999 	.word	0x3e999999
 802bdf8:	b493f27c 	.word	0xb493f27c
 802bdfc:	37d00d01 	.word	0x37d00d01
 802be00:	bab60b61 	.word	0xbab60b61
 802be04:	3d2aaaab 	.word	0x3d2aaaab
 802be08:	3f480000 	.word	0x3f480000

0802be0c <__kernel_sinf>:
 802be0c:	ee10 3a10 	vmov	r3, s0
 802be10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802be14:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802be18:	d204      	bcs.n	802be24 <__kernel_sinf+0x18>
 802be1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802be1e:	ee17 3a90 	vmov	r3, s15
 802be22:	b35b      	cbz	r3, 802be7c <__kernel_sinf+0x70>
 802be24:	ee20 7a00 	vmul.f32	s14, s0, s0
 802be28:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802be80 <__kernel_sinf+0x74>
 802be2c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802be84 <__kernel_sinf+0x78>
 802be30:	eea7 6a27 	vfma.f32	s12, s14, s15
 802be34:	eddf 7a14 	vldr	s15, [pc, #80]	@ 802be88 <__kernel_sinf+0x7c>
 802be38:	ee60 6a07 	vmul.f32	s13, s0, s14
 802be3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802be40:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 802be8c <__kernel_sinf+0x80>
 802be44:	eea7 6a87 	vfma.f32	s12, s15, s14
 802be48:	eddf 7a11 	vldr	s15, [pc, #68]	@ 802be90 <__kernel_sinf+0x84>
 802be4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802be50:	b930      	cbnz	r0, 802be60 <__kernel_sinf+0x54>
 802be52:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 802be94 <__kernel_sinf+0x88>
 802be56:	eea7 6a27 	vfma.f32	s12, s14, s15
 802be5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 802be5e:	4770      	bx	lr
 802be60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802be64:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802be68:	eee0 7a86 	vfma.f32	s15, s1, s12
 802be6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802be70:	eddf 7a09 	vldr	s15, [pc, #36]	@ 802be98 <__kernel_sinf+0x8c>
 802be74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802be78:	ee30 0a60 	vsub.f32	s0, s0, s1
 802be7c:	4770      	bx	lr
 802be7e:	bf00      	nop
 802be80:	2f2ec9d3 	.word	0x2f2ec9d3
 802be84:	b2d72f34 	.word	0xb2d72f34
 802be88:	3638ef1b 	.word	0x3638ef1b
 802be8c:	b9500d01 	.word	0xb9500d01
 802be90:	3c088889 	.word	0x3c088889
 802be94:	be2aaaab 	.word	0xbe2aaaab
 802be98:	3e2aaaab 	.word	0x3e2aaaab

0802be9c <__ieee754_atan2f>:
 802be9c:	ee10 2a90 	vmov	r2, s1
 802bea0:	eef0 7a40 	vmov.f32	s15, s0
 802bea4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 802bea8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802beac:	b510      	push	{r4, lr}
 802beae:	d806      	bhi.n	802bebe <__ieee754_atan2f+0x22>
 802beb0:	ee10 0a10 	vmov	r0, s0
 802beb4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802beb8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bebc:	d904      	bls.n	802bec8 <__ieee754_atan2f+0x2c>
 802bebe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802bec2:	eeb0 0a67 	vmov.f32	s0, s15
 802bec6:	bd10      	pop	{r4, pc}
 802bec8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 802becc:	d103      	bne.n	802bed6 <__ieee754_atan2f+0x3a>
 802bece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bed2:	f000 b9af 	b.w	802c234 <atanf>
 802bed6:	1794      	asrs	r4, r2, #30
 802bed8:	f004 0402 	and.w	r4, r4, #2
 802bedc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802bee0:	b93b      	cbnz	r3, 802bef2 <__ieee754_atan2f+0x56>
 802bee2:	2c02      	cmp	r4, #2
 802bee4:	d05c      	beq.n	802bfa0 <__ieee754_atan2f+0x104>
 802bee6:	2c03      	cmp	r4, #3
 802bee8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802bfb4 <__ieee754_atan2f+0x118>
 802beec:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802bef0:	e7e7      	b.n	802bec2 <__ieee754_atan2f+0x26>
 802bef2:	b939      	cbnz	r1, 802bf04 <__ieee754_atan2f+0x68>
 802bef4:	2800      	cmp	r0, #0
 802bef6:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802bfb8 <__ieee754_atan2f+0x11c>
 802befa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802bfbc <__ieee754_atan2f+0x120>
 802befe:	fe67 7a27 	vselge.f32	s15, s14, s15
 802bf02:	e7de      	b.n	802bec2 <__ieee754_atan2f+0x26>
 802bf04:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802bf08:	d110      	bne.n	802bf2c <__ieee754_atan2f+0x90>
 802bf0a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bf0e:	f104 34ff 	add.w	r4, r4, #4294967295
 802bf12:	d107      	bne.n	802bf24 <__ieee754_atan2f+0x88>
 802bf14:	2c02      	cmp	r4, #2
 802bf16:	d846      	bhi.n	802bfa6 <__ieee754_atan2f+0x10a>
 802bf18:	4b29      	ldr	r3, [pc, #164]	@ (802bfc0 <__ieee754_atan2f+0x124>)
 802bf1a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802bf1e:	edd3 7a00 	vldr	s15, [r3]
 802bf22:	e7ce      	b.n	802bec2 <__ieee754_atan2f+0x26>
 802bf24:	2c02      	cmp	r4, #2
 802bf26:	d841      	bhi.n	802bfac <__ieee754_atan2f+0x110>
 802bf28:	4b26      	ldr	r3, [pc, #152]	@ (802bfc4 <__ieee754_atan2f+0x128>)
 802bf2a:	e7f6      	b.n	802bf1a <__ieee754_atan2f+0x7e>
 802bf2c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bf30:	d0e0      	beq.n	802bef4 <__ieee754_atan2f+0x58>
 802bf32:	1a5b      	subs	r3, r3, r1
 802bf34:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802bf38:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802bf3c:	da1a      	bge.n	802bf74 <__ieee754_atan2f+0xd8>
 802bf3e:	2a00      	cmp	r2, #0
 802bf40:	da01      	bge.n	802bf46 <__ieee754_atan2f+0xaa>
 802bf42:	313c      	adds	r1, #60	@ 0x3c
 802bf44:	db19      	blt.n	802bf7a <__ieee754_atan2f+0xde>
 802bf46:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802bf4a:	f000 fa47 	bl	802c3dc <fabsf>
 802bf4e:	f000 f971 	bl	802c234 <atanf>
 802bf52:	eef0 7a40 	vmov.f32	s15, s0
 802bf56:	2c01      	cmp	r4, #1
 802bf58:	d012      	beq.n	802bf80 <__ieee754_atan2f+0xe4>
 802bf5a:	2c02      	cmp	r4, #2
 802bf5c:	d017      	beq.n	802bf8e <__ieee754_atan2f+0xf2>
 802bf5e:	2c00      	cmp	r4, #0
 802bf60:	d0af      	beq.n	802bec2 <__ieee754_atan2f+0x26>
 802bf62:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802bfc8 <__ieee754_atan2f+0x12c>
 802bf66:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bf6a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 802bfcc <__ieee754_atan2f+0x130>
 802bf6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bf72:	e7a6      	b.n	802bec2 <__ieee754_atan2f+0x26>
 802bf74:	eddf 7a11 	vldr	s15, [pc, #68]	@ 802bfbc <__ieee754_atan2f+0x120>
 802bf78:	e7ed      	b.n	802bf56 <__ieee754_atan2f+0xba>
 802bf7a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802bfd0 <__ieee754_atan2f+0x134>
 802bf7e:	e7ea      	b.n	802bf56 <__ieee754_atan2f+0xba>
 802bf80:	ee17 3a90 	vmov	r3, s15
 802bf84:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802bf88:	ee07 3a90 	vmov	s15, r3
 802bf8c:	e799      	b.n	802bec2 <__ieee754_atan2f+0x26>
 802bf8e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802bfc8 <__ieee754_atan2f+0x12c>
 802bf92:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bf96:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 802bfcc <__ieee754_atan2f+0x130>
 802bf9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802bf9e:	e790      	b.n	802bec2 <__ieee754_atan2f+0x26>
 802bfa0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 802bfcc <__ieee754_atan2f+0x130>
 802bfa4:	e78d      	b.n	802bec2 <__ieee754_atan2f+0x26>
 802bfa6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 802bfd4 <__ieee754_atan2f+0x138>
 802bfaa:	e78a      	b.n	802bec2 <__ieee754_atan2f+0x26>
 802bfac:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802bfd0 <__ieee754_atan2f+0x134>
 802bfb0:	e787      	b.n	802bec2 <__ieee754_atan2f+0x26>
 802bfb2:	bf00      	nop
 802bfb4:	c0490fdb 	.word	0xc0490fdb
 802bfb8:	bfc90fdb 	.word	0xbfc90fdb
 802bfbc:	3fc90fdb 	.word	0x3fc90fdb
 802bfc0:	0802fdd4 	.word	0x0802fdd4
 802bfc4:	0802fdc8 	.word	0x0802fdc8
 802bfc8:	33bbbd2e 	.word	0x33bbbd2e
 802bfcc:	40490fdb 	.word	0x40490fdb
 802bfd0:	00000000 	.word	0x00000000
 802bfd4:	3f490fdb 	.word	0x3f490fdb

0802bfd8 <__ieee754_rem_pio2f>:
 802bfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bfda:	ee10 6a10 	vmov	r6, s0
 802bfde:	4b87      	ldr	r3, [pc, #540]	@ (802c1fc <__ieee754_rem_pio2f+0x224>)
 802bfe0:	b087      	sub	sp, #28
 802bfe2:	4604      	mov	r4, r0
 802bfe4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802bfe8:	429d      	cmp	r5, r3
 802bfea:	d805      	bhi.n	802bff8 <__ieee754_rem_pio2f+0x20>
 802bfec:	2300      	movs	r3, #0
 802bfee:	ed80 0a00 	vstr	s0, [r0]
 802bff2:	6043      	str	r3, [r0, #4]
 802bff4:	2000      	movs	r0, #0
 802bff6:	e022      	b.n	802c03e <__ieee754_rem_pio2f+0x66>
 802bff8:	4b81      	ldr	r3, [pc, #516]	@ (802c200 <__ieee754_rem_pio2f+0x228>)
 802bffa:	429d      	cmp	r5, r3
 802bffc:	d83a      	bhi.n	802c074 <__ieee754_rem_pio2f+0x9c>
 802bffe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802c002:	2e00      	cmp	r6, #0
 802c004:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 802c204 <__ieee754_rem_pio2f+0x22c>
 802c008:	f023 030f 	bic.w	r3, r3, #15
 802c00c:	4a7e      	ldr	r2, [pc, #504]	@ (802c208 <__ieee754_rem_pio2f+0x230>)
 802c00e:	dd18      	ble.n	802c042 <__ieee754_rem_pio2f+0x6a>
 802c010:	4293      	cmp	r3, r2
 802c012:	ee70 7a47 	vsub.f32	s15, s0, s14
 802c016:	bf09      	itett	eq
 802c018:	ed9f 7a7c 	vldreq	s14, [pc, #496]	@ 802c20c <__ieee754_rem_pio2f+0x234>
 802c01c:	eddf 6a7c 	vldrne	s13, [pc, #496]	@ 802c210 <__ieee754_rem_pio2f+0x238>
 802c020:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802c024:	eddf 6a7b 	vldreq	s13, [pc, #492]	@ 802c214 <__ieee754_rem_pio2f+0x23c>
 802c028:	ee37 7ae6 	vsub.f32	s14, s15, s13
 802c02c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c030:	ed80 7a00 	vstr	s14, [r0]
 802c034:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802c038:	edc0 7a01 	vstr	s15, [r0, #4]
 802c03c:	2001      	movs	r0, #1
 802c03e:	b007      	add	sp, #28
 802c040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c042:	4293      	cmp	r3, r2
 802c044:	ee70 7a07 	vadd.f32	s15, s0, s14
 802c048:	bf09      	itett	eq
 802c04a:	ed9f 7a70 	vldreq	s14, [pc, #448]	@ 802c20c <__ieee754_rem_pio2f+0x234>
 802c04e:	eddf 6a70 	vldrne	s13, [pc, #448]	@ 802c210 <__ieee754_rem_pio2f+0x238>
 802c052:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802c056:	eddf 6a6f 	vldreq	s13, [pc, #444]	@ 802c214 <__ieee754_rem_pio2f+0x23c>
 802c05a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c05e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c062:	ed80 7a00 	vstr	s14, [r0]
 802c066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c06a:	edc0 7a01 	vstr	s15, [r0, #4]
 802c06e:	f04f 30ff 	mov.w	r0, #4294967295
 802c072:	e7e4      	b.n	802c03e <__ieee754_rem_pio2f+0x66>
 802c074:	4b68      	ldr	r3, [pc, #416]	@ (802c218 <__ieee754_rem_pio2f+0x240>)
 802c076:	429d      	cmp	r5, r3
 802c078:	d872      	bhi.n	802c160 <__ieee754_rem_pio2f+0x188>
 802c07a:	f000 f9af 	bl	802c3dc <fabsf>
 802c07e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802c082:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 802c21c <__ieee754_rem_pio2f+0x244>
 802c086:	eee0 7a07 	vfma.f32	s15, s0, s14
 802c08a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c08e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802c092:	ee17 0a90 	vmov	r0, s15
 802c096:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802c204 <__ieee754_rem_pio2f+0x22c>
 802c09a:	281f      	cmp	r0, #31
 802c09c:	eea7 0a67 	vfms.f32	s0, s14, s15
 802c0a0:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802c210 <__ieee754_rem_pio2f+0x238>
 802c0a4:	eeb1 6a47 	vneg.f32	s12, s14
 802c0a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c0ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 802c0b0:	ee16 1a90 	vmov	r1, s13
 802c0b4:	dc09      	bgt.n	802c0ca <__ieee754_rem_pio2f+0xf2>
 802c0b6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802c0ba:	1e47      	subs	r7, r0, #1
 802c0bc:	4a58      	ldr	r2, [pc, #352]	@ (802c220 <__ieee754_rem_pio2f+0x248>)
 802c0be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802c0c2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 802c0c6:	4293      	cmp	r3, r2
 802c0c8:	d106      	bne.n	802c0d8 <__ieee754_rem_pio2f+0x100>
 802c0ca:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 802c0ce:	15eb      	asrs	r3, r5, #23
 802c0d0:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802c0d4:	2a08      	cmp	r2, #8
 802c0d6:	dc14      	bgt.n	802c102 <__ieee754_rem_pio2f+0x12a>
 802c0d8:	6021      	str	r1, [r4, #0]
 802c0da:	ed94 7a00 	vldr	s14, [r4]
 802c0de:	2e00      	cmp	r6, #0
 802c0e0:	ee30 0a47 	vsub.f32	s0, s0, s14
 802c0e4:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c0e8:	ed84 0a01 	vstr	s0, [r4, #4]
 802c0ec:	daa7      	bge.n	802c03e <__ieee754_rem_pio2f+0x66>
 802c0ee:	eeb1 7a47 	vneg.f32	s14, s14
 802c0f2:	eeb1 0a40 	vneg.f32	s0, s0
 802c0f6:	ed84 7a00 	vstr	s14, [r4]
 802c0fa:	ed84 0a01 	vstr	s0, [r4, #4]
 802c0fe:	4240      	negs	r0, r0
 802c100:	e79d      	b.n	802c03e <__ieee754_rem_pio2f+0x66>
 802c102:	eef0 6a40 	vmov.f32	s13, s0
 802c106:	eddf 5a41 	vldr	s11, [pc, #260]	@ 802c20c <__ieee754_rem_pio2f+0x234>
 802c10a:	eee6 6a25 	vfma.f32	s13, s12, s11
 802c10e:	ee70 7a66 	vsub.f32	s15, s0, s13
 802c112:	eee6 7a25 	vfma.f32	s15, s12, s11
 802c116:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 802c214 <__ieee754_rem_pio2f+0x23c>
 802c11a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802c11e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802c122:	ee15 2a90 	vmov	r2, s11
 802c126:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802c12a:	1a5b      	subs	r3, r3, r1
 802c12c:	2b19      	cmp	r3, #25
 802c12e:	dc04      	bgt.n	802c13a <__ieee754_rem_pio2f+0x162>
 802c130:	eeb0 0a66 	vmov.f32	s0, s13
 802c134:	edc4 5a00 	vstr	s11, [r4]
 802c138:	e7cf      	b.n	802c0da <__ieee754_rem_pio2f+0x102>
 802c13a:	eeb0 0a66 	vmov.f32	s0, s13
 802c13e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802c224 <__ieee754_rem_pio2f+0x24c>
 802c142:	eea6 0a25 	vfma.f32	s0, s12, s11
 802c146:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802c14a:	eddf 6a37 	vldr	s13, [pc, #220]	@ 802c228 <__ieee754_rem_pio2f+0x250>
 802c14e:	eee6 7a25 	vfma.f32	s15, s12, s11
 802c152:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802c156:	ee30 7a67 	vsub.f32	s14, s0, s15
 802c15a:	ed84 7a00 	vstr	s14, [r4]
 802c15e:	e7bc      	b.n	802c0da <__ieee754_rem_pio2f+0x102>
 802c160:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 802c164:	d306      	bcc.n	802c174 <__ieee754_rem_pio2f+0x19c>
 802c166:	ee70 7a40 	vsub.f32	s15, s0, s0
 802c16a:	edc0 7a01 	vstr	s15, [r0, #4]
 802c16e:	edc0 7a00 	vstr	s15, [r0]
 802c172:	e73f      	b.n	802bff4 <__ieee754_rem_pio2f+0x1c>
 802c174:	15ea      	asrs	r2, r5, #23
 802c176:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 802c22c <__ieee754_rem_pio2f+0x254>
 802c17a:	3a86      	subs	r2, #134	@ 0x86
 802c17c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802c180:	ee07 3a90 	vmov	s15, r3
 802c184:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802c188:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802c18c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c190:	ed8d 7a03 	vstr	s14, [sp, #12]
 802c194:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802c198:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802c19c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802c1a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c1a4:	ed8d 7a04 	vstr	s14, [sp, #16]
 802c1a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802c1ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 802c1b0:	edcd 7a05 	vstr	s15, [sp, #20]
 802c1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c1b8:	d11e      	bne.n	802c1f8 <__ieee754_rem_pio2f+0x220>
 802c1ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802c1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c1c2:	bf0c      	ite	eq
 802c1c4:	2301      	moveq	r3, #1
 802c1c6:	2302      	movne	r3, #2
 802c1c8:	4919      	ldr	r1, [pc, #100]	@ (802c230 <__ieee754_rem_pio2f+0x258>)
 802c1ca:	a803      	add	r0, sp, #12
 802c1cc:	9101      	str	r1, [sp, #4]
 802c1ce:	2102      	movs	r1, #2
 802c1d0:	9100      	str	r1, [sp, #0]
 802c1d2:	4621      	mov	r1, r4
 802c1d4:	f000 f96e 	bl	802c4b4 <__kernel_rem_pio2f>
 802c1d8:	2e00      	cmp	r6, #0
 802c1da:	f6bf af30 	bge.w	802c03e <__ieee754_rem_pio2f+0x66>
 802c1de:	edd4 7a00 	vldr	s15, [r4]
 802c1e2:	eef1 7a67 	vneg.f32	s15, s15
 802c1e6:	edc4 7a00 	vstr	s15, [r4]
 802c1ea:	edd4 7a01 	vldr	s15, [r4, #4]
 802c1ee:	eef1 7a67 	vneg.f32	s15, s15
 802c1f2:	edc4 7a01 	vstr	s15, [r4, #4]
 802c1f6:	e782      	b.n	802c0fe <__ieee754_rem_pio2f+0x126>
 802c1f8:	2303      	movs	r3, #3
 802c1fa:	e7e5      	b.n	802c1c8 <__ieee754_rem_pio2f+0x1f0>
 802c1fc:	3f490fd8 	.word	0x3f490fd8
 802c200:	4016cbe3 	.word	0x4016cbe3
 802c204:	3fc90f80 	.word	0x3fc90f80
 802c208:	3fc90fd0 	.word	0x3fc90fd0
 802c20c:	37354400 	.word	0x37354400
 802c210:	37354443 	.word	0x37354443
 802c214:	2e85a308 	.word	0x2e85a308
 802c218:	43490f80 	.word	0x43490f80
 802c21c:	3f22f984 	.word	0x3f22f984
 802c220:	0802fde0 	.word	0x0802fde0
 802c224:	2e85a300 	.word	0x2e85a300
 802c228:	248d3132 	.word	0x248d3132
 802c22c:	43800000 	.word	0x43800000
 802c230:	0802fe60 	.word	0x0802fe60

0802c234 <atanf>:
 802c234:	b538      	push	{r3, r4, r5, lr}
 802c236:	ee10 5a10 	vmov	r5, s0
 802c23a:	eef0 7a40 	vmov.f32	s15, s0
 802c23e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802c242:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802c246:	d30f      	bcc.n	802c268 <atanf+0x34>
 802c248:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802c24c:	d904      	bls.n	802c258 <atanf+0x24>
 802c24e:	ee70 7a00 	vadd.f32	s15, s0, s0
 802c252:	eeb0 0a67 	vmov.f32	s0, s15
 802c256:	bd38      	pop	{r3, r4, r5, pc}
 802c258:	2d00      	cmp	r5, #0
 802c25a:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 802c390 <atanf+0x15c>
 802c25e:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802c394 <atanf+0x160>
 802c262:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802c266:	e7f4      	b.n	802c252 <atanf+0x1e>
 802c268:	4b4b      	ldr	r3, [pc, #300]	@ (802c398 <atanf+0x164>)
 802c26a:	429c      	cmp	r4, r3
 802c26c:	d810      	bhi.n	802c290 <atanf+0x5c>
 802c26e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802c272:	d20a      	bcs.n	802c28a <atanf+0x56>
 802c274:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802c39c <atanf+0x168>
 802c278:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802c27c:	ee30 7a07 	vadd.f32	s14, s0, s14
 802c280:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802c284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c288:	dce3      	bgt.n	802c252 <atanf+0x1e>
 802c28a:	f04f 33ff 	mov.w	r3, #4294967295
 802c28e:	e013      	b.n	802c2b8 <atanf+0x84>
 802c290:	f000 f8a4 	bl	802c3dc <fabsf>
 802c294:	4b42      	ldr	r3, [pc, #264]	@ (802c3a0 <atanf+0x16c>)
 802c296:	429c      	cmp	r4, r3
 802c298:	d84f      	bhi.n	802c33a <atanf+0x106>
 802c29a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802c29e:	429c      	cmp	r4, r3
 802c2a0:	d841      	bhi.n	802c326 <atanf+0xf2>
 802c2a2:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802c2a6:	2300      	movs	r3, #0
 802c2a8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802c2ac:	eea0 7a27 	vfma.f32	s14, s0, s15
 802c2b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c2b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c2b8:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 802c3a4 <atanf+0x170>
 802c2bc:	1c5a      	adds	r2, r3, #1
 802c2be:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 802c3a8 <atanf+0x174>
 802c2c2:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 802c3ac <atanf+0x178>
 802c2c6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802c2ca:	ee66 6a06 	vmul.f32	s13, s12, s12
 802c2ce:	eee6 5a87 	vfma.f32	s11, s13, s14
 802c2d2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 802c3b0 <atanf+0x17c>
 802c2d6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802c2da:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802c3b4 <atanf+0x180>
 802c2de:	eee7 5a26 	vfma.f32	s11, s14, s13
 802c2e2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 802c3b8 <atanf+0x184>
 802c2e6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802c2ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802c3bc <atanf+0x188>
 802c2ee:	eee7 5a26 	vfma.f32	s11, s14, s13
 802c2f2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802c3c0 <atanf+0x18c>
 802c2f6:	eea6 5a87 	vfma.f32	s10, s13, s14
 802c2fa:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802c3c4 <atanf+0x190>
 802c2fe:	eea5 7a26 	vfma.f32	s14, s10, s13
 802c302:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 802c3c8 <atanf+0x194>
 802c306:	eea7 5a26 	vfma.f32	s10, s14, s13
 802c30a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802c3cc <atanf+0x198>
 802c30e:	eea5 7a26 	vfma.f32	s14, s10, s13
 802c312:	ee27 7a26 	vmul.f32	s14, s14, s13
 802c316:	eea5 7a86 	vfma.f32	s14, s11, s12
 802c31a:	ee27 7a87 	vmul.f32	s14, s15, s14
 802c31e:	d121      	bne.n	802c364 <atanf+0x130>
 802c320:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c324:	e795      	b.n	802c252 <atanf+0x1e>
 802c326:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802c32a:	2301      	movs	r3, #1
 802c32c:	ee30 7a67 	vsub.f32	s14, s0, s15
 802c330:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c334:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c338:	e7be      	b.n	802c2b8 <atanf+0x84>
 802c33a:	4b25      	ldr	r3, [pc, #148]	@ (802c3d0 <atanf+0x19c>)
 802c33c:	429c      	cmp	r4, r3
 802c33e:	d80b      	bhi.n	802c358 <atanf+0x124>
 802c340:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802c344:	2302      	movs	r3, #2
 802c346:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802c34a:	ee70 6a67 	vsub.f32	s13, s0, s15
 802c34e:	eea0 7a27 	vfma.f32	s14, s0, s15
 802c352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802c356:	e7af      	b.n	802c2b8 <atanf+0x84>
 802c358:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802c35c:	2303      	movs	r3, #3
 802c35e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c362:	e7a9      	b.n	802c2b8 <atanf+0x84>
 802c364:	4a1b      	ldr	r2, [pc, #108]	@ (802c3d4 <atanf+0x1a0>)
 802c366:	2d00      	cmp	r5, #0
 802c368:	491b      	ldr	r1, [pc, #108]	@ (802c3d8 <atanf+0x1a4>)
 802c36a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802c36e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802c372:	edd3 6a00 	vldr	s13, [r3]
 802c376:	ee37 7a66 	vsub.f32	s14, s14, s13
 802c37a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802c37e:	edd2 7a00 	vldr	s15, [r2]
 802c382:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c386:	bfb8      	it	lt
 802c388:	eef1 7a67 	vneglt.f32	s15, s15
 802c38c:	e761      	b.n	802c252 <atanf+0x1e>
 802c38e:	bf00      	nop
 802c390:	bfc90fdb 	.word	0xbfc90fdb
 802c394:	3fc90fdb 	.word	0x3fc90fdb
 802c398:	3edfffff 	.word	0x3edfffff
 802c39c:	7149f2ca 	.word	0x7149f2ca
 802c3a0:	3f97ffff 	.word	0x3f97ffff
 802c3a4:	3c8569d7 	.word	0x3c8569d7
 802c3a8:	3d4bda59 	.word	0x3d4bda59
 802c3ac:	bd6ef16b 	.word	0xbd6ef16b
 802c3b0:	3d886b35 	.word	0x3d886b35
 802c3b4:	3dba2e6e 	.word	0x3dba2e6e
 802c3b8:	3e124925 	.word	0x3e124925
 802c3bc:	3eaaaaab 	.word	0x3eaaaaab
 802c3c0:	bd15a221 	.word	0xbd15a221
 802c3c4:	bd9d8795 	.word	0xbd9d8795
 802c3c8:	bde38e38 	.word	0xbde38e38
 802c3cc:	be4ccccd 	.word	0xbe4ccccd
 802c3d0:	401bffff 	.word	0x401bffff
 802c3d4:	08030188 	.word	0x08030188
 802c3d8:	08030178 	.word	0x08030178

0802c3dc <fabsf>:
 802c3dc:	ee10 3a10 	vmov	r3, s0
 802c3e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802c3e4:	ee00 3a10 	vmov	s0, r3
 802c3e8:	4770      	bx	lr
	...

0802c3ec <scalbnf>:
 802c3ec:	ee10 3a10 	vmov	r3, s0
 802c3f0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 802c3f4:	d02a      	beq.n	802c44c <scalbnf+0x60>
 802c3f6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 802c3fa:	d302      	bcc.n	802c402 <scalbnf+0x16>
 802c3fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c400:	4770      	bx	lr
 802c402:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 802c406:	d122      	bne.n	802c44e <scalbnf+0x62>
 802c408:	4b23      	ldr	r3, [pc, #140]	@ (802c498 <scalbnf+0xac>)
 802c40a:	eddf 7a24 	vldr	s15, [pc, #144]	@ 802c49c <scalbnf+0xb0>
 802c40e:	4298      	cmp	r0, r3
 802c410:	ee20 0a27 	vmul.f32	s0, s0, s15
 802c414:	db16      	blt.n	802c444 <scalbnf+0x58>
 802c416:	ee10 3a10 	vmov	r3, s0
 802c41a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802c41e:	3a19      	subs	r2, #25
 802c420:	f24c 3150 	movw	r1, #50000	@ 0xc350
 802c424:	4288      	cmp	r0, r1
 802c426:	dd14      	ble.n	802c452 <scalbnf+0x66>
 802c428:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 802c4a0 <scalbnf+0xb4>
 802c42c:	ee10 3a10 	vmov	r3, s0
 802c430:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 802c4a4 <scalbnf+0xb8>
 802c434:	eeb0 7a67 	vmov.f32	s14, s15
 802c438:	2b00      	cmp	r3, #0
 802c43a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 802c43e:	ee27 0a87 	vmul.f32	s0, s15, s14
 802c442:	4770      	bx	lr
 802c444:	eddf 7a18 	vldr	s15, [pc, #96]	@ 802c4a8 <scalbnf+0xbc>
 802c448:	ee27 0a80 	vmul.f32	s0, s15, s0
 802c44c:	4770      	bx	lr
 802c44e:	0dd2      	lsrs	r2, r2, #23
 802c450:	e7e6      	b.n	802c420 <scalbnf+0x34>
 802c452:	4410      	add	r0, r2
 802c454:	28fe      	cmp	r0, #254	@ 0xfe
 802c456:	dce7      	bgt.n	802c428 <scalbnf+0x3c>
 802c458:	2800      	cmp	r0, #0
 802c45a:	dd06      	ble.n	802c46a <scalbnf+0x7e>
 802c45c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802c460:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802c464:	ee00 3a10 	vmov	s0, r3
 802c468:	4770      	bx	lr
 802c46a:	f110 0f16 	cmn.w	r0, #22
 802c46e:	da09      	bge.n	802c484 <scalbnf+0x98>
 802c470:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 802c4a8 <scalbnf+0xbc>
 802c474:	ee10 3a10 	vmov	r3, s0
 802c478:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 802c4ac <scalbnf+0xc0>
 802c47c:	eeb0 7a67 	vmov.f32	s14, s15
 802c480:	2b00      	cmp	r3, #0
 802c482:	e7da      	b.n	802c43a <scalbnf+0x4e>
 802c484:	3019      	adds	r0, #25
 802c486:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802c48a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 802c4b0 <scalbnf+0xc4>
 802c48e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802c492:	ee07 3a90 	vmov	s15, r3
 802c496:	e7d7      	b.n	802c448 <scalbnf+0x5c>
 802c498:	ffff3cb0 	.word	0xffff3cb0
 802c49c:	4c000000 	.word	0x4c000000
 802c4a0:	7149f2ca 	.word	0x7149f2ca
 802c4a4:	f149f2ca 	.word	0xf149f2ca
 802c4a8:	0da24260 	.word	0x0da24260
 802c4ac:	8da24260 	.word	0x8da24260
 802c4b0:	33000000 	.word	0x33000000

0802c4b4 <__kernel_rem_pio2f>:
 802c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c4b8:	4690      	mov	r8, r2
 802c4ba:	4ab9      	ldr	r2, [pc, #740]	@ (802c7a0 <__kernel_rem_pio2f+0x2ec>)
 802c4bc:	460f      	mov	r7, r1
 802c4be:	f103 3bff 	add.w	fp, r3, #4294967295
 802c4c2:	f118 0f04 	cmn.w	r8, #4
 802c4c6:	ed2d 8b04 	vpush	{d8-d9}
 802c4ca:	b0d9      	sub	sp, #356	@ 0x164
 802c4cc:	9001      	str	r0, [sp, #4]
 802c4ce:	9866      	ldr	r0, [sp, #408]	@ 0x198
 802c4d0:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 802c4d4:	db26      	blt.n	802c524 <__kernel_rem_pio2f+0x70>
 802c4d6:	f1b8 0203 	subs.w	r2, r8, #3
 802c4da:	bf48      	it	mi
 802c4dc:	f108 0204 	addmi.w	r2, r8, #4
 802c4e0:	10d2      	asrs	r2, r2, #3
 802c4e2:	1c55      	adds	r5, r2, #1
 802c4e4:	eba2 060b 	sub.w	r6, r2, fp
 802c4e8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802c4ea:	eb0a 0c0b 	add.w	ip, sl, fp
 802c4ee:	00e8      	lsls	r0, r5, #3
 802c4f0:	ac1c      	add	r4, sp, #112	@ 0x70
 802c4f2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 802c4f6:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 802c7b0 <__kernel_rem_pio2f+0x2fc>
 802c4fa:	9002      	str	r0, [sp, #8]
 802c4fc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 802c500:	2000      	movs	r0, #0
 802c502:	4560      	cmp	r0, ip
 802c504:	dd10      	ble.n	802c528 <__kernel_rem_pio2f+0x74>
 802c506:	a91c      	add	r1, sp, #112	@ 0x70
 802c508:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 802c50c:	2600      	movs	r6, #0
 802c50e:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 802c512:	4556      	cmp	r6, sl
 802c514:	dc26      	bgt.n	802c564 <__kernel_rem_pio2f+0xb0>
 802c516:	f8dd e004 	ldr.w	lr, [sp, #4]
 802c51a:	4684      	mov	ip, r0
 802c51c:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 802c7b0 <__kernel_rem_pio2f+0x2fc>
 802c520:	2400      	movs	r4, #0
 802c522:	e018      	b.n	802c556 <__kernel_rem_pio2f+0xa2>
 802c524:	2200      	movs	r2, #0
 802c526:	e7dc      	b.n	802c4e2 <__kernel_rem_pio2f+0x2e>
 802c528:	42c6      	cmn	r6, r0
 802c52a:	bf54      	ite	pl
 802c52c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 802c530:	eef0 7a47 	vmovmi.f32	s15, s14
 802c534:	f100 0001 	add.w	r0, r0, #1
 802c538:	bf5c      	itt	pl
 802c53a:	ee07 1a90 	vmovpl	s15, r1
 802c53e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802c542:	ece4 7a01 	vstmia	r4!, {s15}
 802c546:	e7dc      	b.n	802c502 <__kernel_rem_pio2f+0x4e>
 802c548:	ecfe 6a01 	vldmia	lr!, {s13}
 802c54c:	3401      	adds	r4, #1
 802c54e:	ed3c 7a01 	vldmdb	ip!, {s14}
 802c552:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c556:	455c      	cmp	r4, fp
 802c558:	ddf6      	ble.n	802c548 <__kernel_rem_pio2f+0x94>
 802c55a:	3601      	adds	r6, #1
 802c55c:	3004      	adds	r0, #4
 802c55e:	ece9 7a01 	vstmia	r9!, {s15}
 802c562:	e7d6      	b.n	802c512 <__kernel_rem_pio2f+0x5e>
 802c564:	a908      	add	r1, sp, #32
 802c566:	4654      	mov	r4, sl
 802c568:	eddf 8a90 	vldr	s17, [pc, #576]	@ 802c7ac <__kernel_rem_pio2f+0x2f8>
 802c56c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c570:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 802c7a8 <__kernel_rem_pio2f+0x2f4>
 802c574:	9104      	str	r1, [sp, #16]
 802c576:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802c578:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802c57c:	9203      	str	r2, [sp, #12]
 802c57e:	00a2      	lsls	r2, r4, #2
 802c580:	a944      	add	r1, sp, #272	@ 0x110
 802c582:	4626      	mov	r6, r4
 802c584:	9205      	str	r2, [sp, #20]
 802c586:	aa58      	add	r2, sp, #352	@ 0x160
 802c588:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 802c58c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 802c590:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 802c594:	aa08      	add	r2, sp, #32
 802c596:	4694      	mov	ip, r2
 802c598:	2e00      	cmp	r6, #0
 802c59a:	dc4c      	bgt.n	802c636 <__kernel_rem_pio2f+0x182>
 802c59c:	4628      	mov	r0, r5
 802c59e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802c5a2:	f7ff ff23 	bl	802c3ec <scalbnf>
 802c5a6:	eeb0 8a40 	vmov.f32	s16, s0
 802c5aa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 802c5ae:	ee28 0a00 	vmul.f32	s0, s16, s0
 802c5b2:	f000 f9e9 	bl	802c988 <floorf>
 802c5b6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 802c5ba:	2d00      	cmp	r5, #0
 802c5bc:	eea0 8a67 	vfms.f32	s16, s0, s15
 802c5c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802c5c4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802c5c8:	ee17 9a90 	vmov	r9, s15
 802c5cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c5d0:	ee38 8a67 	vsub.f32	s16, s16, s15
 802c5d4:	dd41      	ble.n	802c65a <__kernel_rem_pio2f+0x1a6>
 802c5d6:	f104 3cff 	add.w	ip, r4, #4294967295
 802c5da:	a908      	add	r1, sp, #32
 802c5dc:	f1c5 0e08 	rsb	lr, r5, #8
 802c5e0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 802c5e4:	fa46 f00e 	asr.w	r0, r6, lr
 802c5e8:	4481      	add	r9, r0
 802c5ea:	fa00 f00e 	lsl.w	r0, r0, lr
 802c5ee:	1a36      	subs	r6, r6, r0
 802c5f0:	f1c5 0007 	rsb	r0, r5, #7
 802c5f4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 802c5f8:	4106      	asrs	r6, r0
 802c5fa:	2e00      	cmp	r6, #0
 802c5fc:	dd3c      	ble.n	802c678 <__kernel_rem_pio2f+0x1c4>
 802c5fe:	f04f 0e00 	mov.w	lr, #0
 802c602:	f109 0901 	add.w	r9, r9, #1
 802c606:	4670      	mov	r0, lr
 802c608:	4574      	cmp	r4, lr
 802c60a:	dc68      	bgt.n	802c6de <__kernel_rem_pio2f+0x22a>
 802c60c:	2d00      	cmp	r5, #0
 802c60e:	dd03      	ble.n	802c618 <__kernel_rem_pio2f+0x164>
 802c610:	2d01      	cmp	r5, #1
 802c612:	d074      	beq.n	802c6fe <__kernel_rem_pio2f+0x24a>
 802c614:	2d02      	cmp	r5, #2
 802c616:	d07d      	beq.n	802c714 <__kernel_rem_pio2f+0x260>
 802c618:	2e02      	cmp	r6, #2
 802c61a:	d12d      	bne.n	802c678 <__kernel_rem_pio2f+0x1c4>
 802c61c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802c620:	ee30 8a48 	vsub.f32	s16, s0, s16
 802c624:	b340      	cbz	r0, 802c678 <__kernel_rem_pio2f+0x1c4>
 802c626:	4628      	mov	r0, r5
 802c628:	9306      	str	r3, [sp, #24]
 802c62a:	f7ff fedf 	bl	802c3ec <scalbnf>
 802c62e:	9b06      	ldr	r3, [sp, #24]
 802c630:	ee38 8a40 	vsub.f32	s16, s16, s0
 802c634:	e020      	b.n	802c678 <__kernel_rem_pio2f+0x1c4>
 802c636:	ee60 7a28 	vmul.f32	s15, s0, s17
 802c63a:	3e01      	subs	r6, #1
 802c63c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c644:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802c648:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c64c:	ecac 0a01 	vstmia	ip!, {s0}
 802c650:	ed30 0a01 	vldmdb	r0!, {s0}
 802c654:	ee37 0a80 	vadd.f32	s0, s15, s0
 802c658:	e79e      	b.n	802c598 <__kernel_rem_pio2f+0xe4>
 802c65a:	d105      	bne.n	802c668 <__kernel_rem_pio2f+0x1b4>
 802c65c:	1e60      	subs	r0, r4, #1
 802c65e:	a908      	add	r1, sp, #32
 802c660:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 802c664:	11f6      	asrs	r6, r6, #7
 802c666:	e7c8      	b.n	802c5fa <__kernel_rem_pio2f+0x146>
 802c668:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802c66c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802c670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c674:	da31      	bge.n	802c6da <__kernel_rem_pio2f+0x226>
 802c676:	2600      	movs	r6, #0
 802c678:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802c67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c680:	f040 8098 	bne.w	802c7b4 <__kernel_rem_pio2f+0x300>
 802c684:	1e60      	subs	r0, r4, #1
 802c686:	2200      	movs	r2, #0
 802c688:	4550      	cmp	r0, sl
 802c68a:	da4b      	bge.n	802c724 <__kernel_rem_pio2f+0x270>
 802c68c:	2a00      	cmp	r2, #0
 802c68e:	d065      	beq.n	802c75c <__kernel_rem_pio2f+0x2a8>
 802c690:	3c01      	subs	r4, #1
 802c692:	ab08      	add	r3, sp, #32
 802c694:	3d08      	subs	r5, #8
 802c696:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802c69a:	2b00      	cmp	r3, #0
 802c69c:	d0f8      	beq.n	802c690 <__kernel_rem_pio2f+0x1dc>
 802c69e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802c6a2:	4628      	mov	r0, r5
 802c6a4:	f7ff fea2 	bl	802c3ec <scalbnf>
 802c6a8:	1c63      	adds	r3, r4, #1
 802c6aa:	aa44      	add	r2, sp, #272	@ 0x110
 802c6ac:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 802c7ac <__kernel_rem_pio2f+0x2f8>
 802c6b0:	0099      	lsls	r1, r3, #2
 802c6b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802c6b6:	4623      	mov	r3, r4
 802c6b8:	2b00      	cmp	r3, #0
 802c6ba:	f280 80a9 	bge.w	802c810 <__kernel_rem_pio2f+0x35c>
 802c6be:	4623      	mov	r3, r4
 802c6c0:	2b00      	cmp	r3, #0
 802c6c2:	f2c0 80c7 	blt.w	802c854 <__kernel_rem_pio2f+0x3a0>
 802c6c6:	aa44      	add	r2, sp, #272	@ 0x110
 802c6c8:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 802c7a4 <__kernel_rem_pio2f+0x2f0>
 802c6cc:	eddf 7a38 	vldr	s15, [pc, #224]	@ 802c7b0 <__kernel_rem_pio2f+0x2fc>
 802c6d0:	2000      	movs	r0, #0
 802c6d2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802c6d6:	1ae2      	subs	r2, r4, r3
 802c6d8:	e0b1      	b.n	802c83e <__kernel_rem_pio2f+0x38a>
 802c6da:	2602      	movs	r6, #2
 802c6dc:	e78f      	b.n	802c5fe <__kernel_rem_pio2f+0x14a>
 802c6de:	f852 1b04 	ldr.w	r1, [r2], #4
 802c6e2:	b948      	cbnz	r0, 802c6f8 <__kernel_rem_pio2f+0x244>
 802c6e4:	b121      	cbz	r1, 802c6f0 <__kernel_rem_pio2f+0x23c>
 802c6e6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802c6ea:	f842 1c04 	str.w	r1, [r2, #-4]
 802c6ee:	2101      	movs	r1, #1
 802c6f0:	f10e 0e01 	add.w	lr, lr, #1
 802c6f4:	4608      	mov	r0, r1
 802c6f6:	e787      	b.n	802c608 <__kernel_rem_pio2f+0x154>
 802c6f8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 802c6fc:	e7f5      	b.n	802c6ea <__kernel_rem_pio2f+0x236>
 802c6fe:	f104 3cff 	add.w	ip, r4, #4294967295
 802c702:	aa08      	add	r2, sp, #32
 802c704:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802c708:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 802c70c:	a908      	add	r1, sp, #32
 802c70e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802c712:	e781      	b.n	802c618 <__kernel_rem_pio2f+0x164>
 802c714:	f104 3cff 	add.w	ip, r4, #4294967295
 802c718:	aa08      	add	r2, sp, #32
 802c71a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802c71e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802c722:	e7f3      	b.n	802c70c <__kernel_rem_pio2f+0x258>
 802c724:	a908      	add	r1, sp, #32
 802c726:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802c72a:	3801      	subs	r0, #1
 802c72c:	430a      	orrs	r2, r1
 802c72e:	e7ab      	b.n	802c688 <__kernel_rem_pio2f+0x1d4>
 802c730:	3201      	adds	r2, #1
 802c732:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802c736:	2e00      	cmp	r6, #0
 802c738:	d0fa      	beq.n	802c730 <__kernel_rem_pio2f+0x27c>
 802c73a:	9905      	ldr	r1, [sp, #20]
 802c73c:	18e6      	adds	r6, r4, r3
 802c73e:	f104 0c01 	add.w	ip, r4, #1
 802c742:	4422      	add	r2, r4
 802c744:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 802c748:	eb0d 0001 	add.w	r0, sp, r1
 802c74c:	a91c      	add	r1, sp, #112	@ 0x70
 802c74e:	384c      	subs	r0, #76	@ 0x4c
 802c750:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 802c754:	4562      	cmp	r2, ip
 802c756:	da04      	bge.n	802c762 <__kernel_rem_pio2f+0x2ae>
 802c758:	4614      	mov	r4, r2
 802c75a:	e710      	b.n	802c57e <__kernel_rem_pio2f+0xca>
 802c75c:	9804      	ldr	r0, [sp, #16]
 802c75e:	2201      	movs	r2, #1
 802c760:	e7e7      	b.n	802c732 <__kernel_rem_pio2f+0x27e>
 802c762:	9903      	ldr	r1, [sp, #12]
 802c764:	2400      	movs	r4, #0
 802c766:	f8dd e004 	ldr.w	lr, [sp, #4]
 802c76a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802c76e:	ee07 1a90 	vmov	s15, r1
 802c772:	9105      	str	r1, [sp, #20]
 802c774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c778:	ece6 7a01 	vstmia	r6!, {s15}
 802c77c:	46b1      	mov	r9, r6
 802c77e:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 802c7b0 <__kernel_rem_pio2f+0x2fc>
 802c782:	455c      	cmp	r4, fp
 802c784:	dd04      	ble.n	802c790 <__kernel_rem_pio2f+0x2dc>
 802c786:	f10c 0c01 	add.w	ip, ip, #1
 802c78a:	ece0 7a01 	vstmia	r0!, {s15}
 802c78e:	e7e1      	b.n	802c754 <__kernel_rem_pio2f+0x2a0>
 802c790:	ecfe 6a01 	vldmia	lr!, {s13}
 802c794:	3401      	adds	r4, #1
 802c796:	ed39 7a01 	vldmdb	r9!, {s14}
 802c79a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c79e:	e7f0      	b.n	802c782 <__kernel_rem_pio2f+0x2ce>
 802c7a0:	080301c4 	.word	0x080301c4
 802c7a4:	08030198 	.word	0x08030198
 802c7a8:	43800000 	.word	0x43800000
 802c7ac:	3b800000 	.word	0x3b800000
 802c7b0:	00000000 	.word	0x00000000
 802c7b4:	9b02      	ldr	r3, [sp, #8]
 802c7b6:	eeb0 0a48 	vmov.f32	s0, s16
 802c7ba:	eba3 0008 	sub.w	r0, r3, r8
 802c7be:	f7ff fe15 	bl	802c3ec <scalbnf>
 802c7c2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 802c7a8 <__kernel_rem_pio2f+0x2f4>
 802c7c6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802c7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c7ce:	db19      	blt.n	802c804 <__kernel_rem_pio2f+0x350>
 802c7d0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 802c7ac <__kernel_rem_pio2f+0x2f8>
 802c7d4:	aa08      	add	r2, sp, #32
 802c7d6:	3508      	adds	r5, #8
 802c7d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 802c7dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c7e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c7e4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802c7e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c7ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c7f0:	ee10 3a10 	vmov	r3, s0
 802c7f4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802c7f8:	3401      	adds	r4, #1
 802c7fa:	ee17 3a90 	vmov	r3, s15
 802c7fe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802c802:	e74c      	b.n	802c69e <__kernel_rem_pio2f+0x1ea>
 802c804:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c808:	aa08      	add	r2, sp, #32
 802c80a:	ee10 3a10 	vmov	r3, s0
 802c80e:	e7f6      	b.n	802c7fe <__kernel_rem_pio2f+0x34a>
 802c810:	a808      	add	r0, sp, #32
 802c812:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802c816:	3b01      	subs	r3, #1
 802c818:	ee07 0a90 	vmov	s15, r0
 802c81c:	9001      	str	r0, [sp, #4]
 802c81e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c822:	ee67 7a80 	vmul.f32	s15, s15, s0
 802c826:	ee20 0a07 	vmul.f32	s0, s0, s14
 802c82a:	ed62 7a01 	vstmdb	r2!, {s15}
 802c82e:	e743      	b.n	802c6b8 <__kernel_rem_pio2f+0x204>
 802c830:	ecfc 6a01 	vldmia	ip!, {s13}
 802c834:	3001      	adds	r0, #1
 802c836:	ecb5 7a01 	vldmia	r5!, {s14}
 802c83a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c83e:	4550      	cmp	r0, sl
 802c840:	dc01      	bgt.n	802c846 <__kernel_rem_pio2f+0x392>
 802c842:	4290      	cmp	r0, r2
 802c844:	ddf4      	ble.n	802c830 <__kernel_rem_pio2f+0x37c>
 802c846:	a858      	add	r0, sp, #352	@ 0x160
 802c848:	3b01      	subs	r3, #1
 802c84a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802c84e:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 802c852:	e735      	b.n	802c6c0 <__kernel_rem_pio2f+0x20c>
 802c854:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802c856:	2b02      	cmp	r3, #2
 802c858:	dc09      	bgt.n	802c86e <__kernel_rem_pio2f+0x3ba>
 802c85a:	2b00      	cmp	r3, #0
 802c85c:	dc27      	bgt.n	802c8ae <__kernel_rem_pio2f+0x3fa>
 802c85e:	d040      	beq.n	802c8e2 <__kernel_rem_pio2f+0x42e>
 802c860:	f009 0007 	and.w	r0, r9, #7
 802c864:	b059      	add	sp, #356	@ 0x164
 802c866:	ecbd 8b04 	vpop	{d8-d9}
 802c86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c86e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802c870:	2b03      	cmp	r3, #3
 802c872:	d1f5      	bne.n	802c860 <__kernel_rem_pio2f+0x3ac>
 802c874:	aa30      	add	r2, sp, #192	@ 0xc0
 802c876:	1f0b      	subs	r3, r1, #4
 802c878:	4620      	mov	r0, r4
 802c87a:	4413      	add	r3, r2
 802c87c:	461a      	mov	r2, r3
 802c87e:	2800      	cmp	r0, #0
 802c880:	dc50      	bgt.n	802c924 <__kernel_rem_pio2f+0x470>
 802c882:	4622      	mov	r2, r4
 802c884:	2a01      	cmp	r2, #1
 802c886:	dc5d      	bgt.n	802c944 <__kernel_rem_pio2f+0x490>
 802c888:	ab30      	add	r3, sp, #192	@ 0xc0
 802c88a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 802c7b0 <__kernel_rem_pio2f+0x2fc>
 802c88e:	440b      	add	r3, r1
 802c890:	2c01      	cmp	r4, #1
 802c892:	dc67      	bgt.n	802c964 <__kernel_rem_pio2f+0x4b0>
 802c894:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 802c898:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 802c89c:	2e00      	cmp	r6, #0
 802c89e:	d167      	bne.n	802c970 <__kernel_rem_pio2f+0x4bc>
 802c8a0:	edc7 6a00 	vstr	s13, [r7]
 802c8a4:	ed87 7a01 	vstr	s14, [r7, #4]
 802c8a8:	edc7 7a02 	vstr	s15, [r7, #8]
 802c8ac:	e7d8      	b.n	802c860 <__kernel_rem_pio2f+0x3ac>
 802c8ae:	ab30      	add	r3, sp, #192	@ 0xc0
 802c8b0:	4622      	mov	r2, r4
 802c8b2:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 802c7b0 <__kernel_rem_pio2f+0x2fc>
 802c8b6:	440b      	add	r3, r1
 802c8b8:	2a00      	cmp	r2, #0
 802c8ba:	da24      	bge.n	802c906 <__kernel_rem_pio2f+0x452>
 802c8bc:	b34e      	cbz	r6, 802c912 <__kernel_rem_pio2f+0x45e>
 802c8be:	eef1 7a47 	vneg.f32	s15, s14
 802c8c2:	edc7 7a00 	vstr	s15, [r7]
 802c8c6:	aa31      	add	r2, sp, #196	@ 0xc4
 802c8c8:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 802c8cc:	2301      	movs	r3, #1
 802c8ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c8d2:	429c      	cmp	r4, r3
 802c8d4:	da20      	bge.n	802c918 <__kernel_rem_pio2f+0x464>
 802c8d6:	b10e      	cbz	r6, 802c8dc <__kernel_rem_pio2f+0x428>
 802c8d8:	eef1 7a67 	vneg.f32	s15, s15
 802c8dc:	edc7 7a01 	vstr	s15, [r7, #4]
 802c8e0:	e7be      	b.n	802c860 <__kernel_rem_pio2f+0x3ac>
 802c8e2:	ab30      	add	r3, sp, #192	@ 0xc0
 802c8e4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 802c7b0 <__kernel_rem_pio2f+0x2fc>
 802c8e8:	440b      	add	r3, r1
 802c8ea:	2c00      	cmp	r4, #0
 802c8ec:	da05      	bge.n	802c8fa <__kernel_rem_pio2f+0x446>
 802c8ee:	b10e      	cbz	r6, 802c8f4 <__kernel_rem_pio2f+0x440>
 802c8f0:	eef1 7a67 	vneg.f32	s15, s15
 802c8f4:	edc7 7a00 	vstr	s15, [r7]
 802c8f8:	e7b2      	b.n	802c860 <__kernel_rem_pio2f+0x3ac>
 802c8fa:	ed33 7a01 	vldmdb	r3!, {s14}
 802c8fe:	3c01      	subs	r4, #1
 802c900:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c904:	e7f1      	b.n	802c8ea <__kernel_rem_pio2f+0x436>
 802c906:	ed73 7a01 	vldmdb	r3!, {s15}
 802c90a:	3a01      	subs	r2, #1
 802c90c:	ee37 7a27 	vadd.f32	s14, s14, s15
 802c910:	e7d2      	b.n	802c8b8 <__kernel_rem_pio2f+0x404>
 802c912:	eef0 7a47 	vmov.f32	s15, s14
 802c916:	e7d4      	b.n	802c8c2 <__kernel_rem_pio2f+0x40e>
 802c918:	ecb2 7a01 	vldmia	r2!, {s14}
 802c91c:	3301      	adds	r3, #1
 802c91e:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c922:	e7d6      	b.n	802c8d2 <__kernel_rem_pio2f+0x41e>
 802c924:	ed72 7a01 	vldmdb	r2!, {s15}
 802c928:	3801      	subs	r0, #1
 802c92a:	edd2 6a01 	vldr	s13, [r2, #4]
 802c92e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c936:	ed82 7a00 	vstr	s14, [r2]
 802c93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c93e:	edc2 7a01 	vstr	s15, [r2, #4]
 802c942:	e79c      	b.n	802c87e <__kernel_rem_pio2f+0x3ca>
 802c944:	ed73 7a01 	vldmdb	r3!, {s15}
 802c948:	3a01      	subs	r2, #1
 802c94a:	edd3 6a01 	vldr	s13, [r3, #4]
 802c94e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c952:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c956:	ed83 7a00 	vstr	s14, [r3]
 802c95a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c95e:	edc3 7a01 	vstr	s15, [r3, #4]
 802c962:	e78f      	b.n	802c884 <__kernel_rem_pio2f+0x3d0>
 802c964:	ed33 7a01 	vldmdb	r3!, {s14}
 802c968:	3c01      	subs	r4, #1
 802c96a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c96e:	e78f      	b.n	802c890 <__kernel_rem_pio2f+0x3dc>
 802c970:	eef1 6a66 	vneg.f32	s13, s13
 802c974:	eeb1 7a47 	vneg.f32	s14, s14
 802c978:	eef1 7a67 	vneg.f32	s15, s15
 802c97c:	edc7 6a00 	vstr	s13, [r7]
 802c980:	ed87 7a01 	vstr	s14, [r7, #4]
 802c984:	e790      	b.n	802c8a8 <__kernel_rem_pio2f+0x3f4>
 802c986:	bf00      	nop

0802c988 <floorf>:
 802c988:	febb 0a40 	vrintm.f32	s0, s0
 802c98c:	4770      	bx	lr

0802c98e <abort>:
 802c98e:	2006      	movs	r0, #6
 802c990:	b508      	push	{r3, lr}
 802c992:	f000 fb3f 	bl	802d014 <raise>
 802c996:	2001      	movs	r0, #1
 802c998:	f7d5 f838 	bl	8001a0c <_exit>

0802c99c <__assert_func>:
 802c99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c99e:	4614      	mov	r4, r2
 802c9a0:	461a      	mov	r2, r3
 802c9a2:	4b09      	ldr	r3, [pc, #36]	@ (802c9c8 <__assert_func+0x2c>)
 802c9a4:	4605      	mov	r5, r0
 802c9a6:	681b      	ldr	r3, [r3, #0]
 802c9a8:	68d8      	ldr	r0, [r3, #12]
 802c9aa:	b14c      	cbz	r4, 802c9c0 <__assert_func+0x24>
 802c9ac:	4b07      	ldr	r3, [pc, #28]	@ (802c9cc <__assert_func+0x30>)
 802c9ae:	9100      	str	r1, [sp, #0]
 802c9b0:	4907      	ldr	r1, [pc, #28]	@ (802c9d0 <__assert_func+0x34>)
 802c9b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c9b6:	462b      	mov	r3, r5
 802c9b8:	f000 f984 	bl	802ccc4 <fiprintf>
 802c9bc:	f7ff ffe7 	bl	802c98e <abort>
 802c9c0:	4b04      	ldr	r3, [pc, #16]	@ (802c9d4 <__assert_func+0x38>)
 802c9c2:	461c      	mov	r4, r3
 802c9c4:	e7f3      	b.n	802c9ae <__assert_func+0x12>
 802c9c6:	bf00      	nop
 802c9c8:	200000a8 	.word	0x200000a8
 802c9cc:	080301d0 	.word	0x080301d0
 802c9d0:	080301dd 	.word	0x080301dd
 802c9d4:	0803020b 	.word	0x0803020b

0802c9d8 <atexit>:
 802c9d8:	2300      	movs	r3, #0
 802c9da:	4601      	mov	r1, r0
 802c9dc:	461a      	mov	r2, r3
 802c9de:	4618      	mov	r0, r3
 802c9e0:	f000 bbc4 	b.w	802d16c <__register_exitproc>

0802c9e4 <malloc>:
 802c9e4:	4b02      	ldr	r3, [pc, #8]	@ (802c9f0 <malloc+0xc>)
 802c9e6:	4601      	mov	r1, r0
 802c9e8:	6818      	ldr	r0, [r3, #0]
 802c9ea:	f000 b82d 	b.w	802ca48 <_malloc_r>
 802c9ee:	bf00      	nop
 802c9f0:	200000a8 	.word	0x200000a8

0802c9f4 <free>:
 802c9f4:	4b02      	ldr	r3, [pc, #8]	@ (802ca00 <free+0xc>)
 802c9f6:	4601      	mov	r1, r0
 802c9f8:	6818      	ldr	r0, [r3, #0]
 802c9fa:	f000 bc15 	b.w	802d228 <_free_r>
 802c9fe:	bf00      	nop
 802ca00:	200000a8 	.word	0x200000a8

0802ca04 <sbrk_aligned>:
 802ca04:	b570      	push	{r4, r5, r6, lr}
 802ca06:	4e0f      	ldr	r6, [pc, #60]	@ (802ca44 <sbrk_aligned+0x40>)
 802ca08:	460c      	mov	r4, r1
 802ca0a:	4605      	mov	r5, r0
 802ca0c:	6831      	ldr	r1, [r6, #0]
 802ca0e:	b911      	cbnz	r1, 802ca16 <sbrk_aligned+0x12>
 802ca10:	f000 fb50 	bl	802d0b4 <_sbrk_r>
 802ca14:	6030      	str	r0, [r6, #0]
 802ca16:	4621      	mov	r1, r4
 802ca18:	4628      	mov	r0, r5
 802ca1a:	f000 fb4b 	bl	802d0b4 <_sbrk_r>
 802ca1e:	1c43      	adds	r3, r0, #1
 802ca20:	d103      	bne.n	802ca2a <sbrk_aligned+0x26>
 802ca22:	f04f 34ff 	mov.w	r4, #4294967295
 802ca26:	4620      	mov	r0, r4
 802ca28:	bd70      	pop	{r4, r5, r6, pc}
 802ca2a:	1cc4      	adds	r4, r0, #3
 802ca2c:	f024 0403 	bic.w	r4, r4, #3
 802ca30:	42a0      	cmp	r0, r4
 802ca32:	d0f8      	beq.n	802ca26 <sbrk_aligned+0x22>
 802ca34:	1a21      	subs	r1, r4, r0
 802ca36:	4628      	mov	r0, r5
 802ca38:	f000 fb3c 	bl	802d0b4 <_sbrk_r>
 802ca3c:	3001      	adds	r0, #1
 802ca3e:	d1f2      	bne.n	802ca26 <sbrk_aligned+0x22>
 802ca40:	e7ef      	b.n	802ca22 <sbrk_aligned+0x1e>
 802ca42:	bf00      	nop
 802ca44:	2005c500 	.word	0x2005c500

0802ca48 <_malloc_r>:
 802ca48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ca4c:	1ccd      	adds	r5, r1, #3
 802ca4e:	4606      	mov	r6, r0
 802ca50:	f025 0503 	bic.w	r5, r5, #3
 802ca54:	3508      	adds	r5, #8
 802ca56:	2d0c      	cmp	r5, #12
 802ca58:	bf38      	it	cc
 802ca5a:	250c      	movcc	r5, #12
 802ca5c:	2d00      	cmp	r5, #0
 802ca5e:	db01      	blt.n	802ca64 <_malloc_r+0x1c>
 802ca60:	42a9      	cmp	r1, r5
 802ca62:	d904      	bls.n	802ca6e <_malloc_r+0x26>
 802ca64:	230c      	movs	r3, #12
 802ca66:	6033      	str	r3, [r6, #0]
 802ca68:	2000      	movs	r0, #0
 802ca6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ca6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802cb44 <_malloc_r+0xfc>
 802ca72:	f000 f869 	bl	802cb48 <__malloc_lock>
 802ca76:	f8d8 3000 	ldr.w	r3, [r8]
 802ca7a:	461c      	mov	r4, r3
 802ca7c:	bb44      	cbnz	r4, 802cad0 <_malloc_r+0x88>
 802ca7e:	4629      	mov	r1, r5
 802ca80:	4630      	mov	r0, r6
 802ca82:	f7ff ffbf 	bl	802ca04 <sbrk_aligned>
 802ca86:	1c43      	adds	r3, r0, #1
 802ca88:	4604      	mov	r4, r0
 802ca8a:	d158      	bne.n	802cb3e <_malloc_r+0xf6>
 802ca8c:	f8d8 4000 	ldr.w	r4, [r8]
 802ca90:	4627      	mov	r7, r4
 802ca92:	2f00      	cmp	r7, #0
 802ca94:	d143      	bne.n	802cb1e <_malloc_r+0xd6>
 802ca96:	2c00      	cmp	r4, #0
 802ca98:	d04b      	beq.n	802cb32 <_malloc_r+0xea>
 802ca9a:	6823      	ldr	r3, [r4, #0]
 802ca9c:	4639      	mov	r1, r7
 802ca9e:	4630      	mov	r0, r6
 802caa0:	eb04 0903 	add.w	r9, r4, r3
 802caa4:	f000 fb06 	bl	802d0b4 <_sbrk_r>
 802caa8:	4581      	cmp	r9, r0
 802caaa:	d142      	bne.n	802cb32 <_malloc_r+0xea>
 802caac:	6821      	ldr	r1, [r4, #0]
 802caae:	4630      	mov	r0, r6
 802cab0:	1a6d      	subs	r5, r5, r1
 802cab2:	4629      	mov	r1, r5
 802cab4:	f7ff ffa6 	bl	802ca04 <sbrk_aligned>
 802cab8:	3001      	adds	r0, #1
 802caba:	d03a      	beq.n	802cb32 <_malloc_r+0xea>
 802cabc:	6823      	ldr	r3, [r4, #0]
 802cabe:	442b      	add	r3, r5
 802cac0:	6023      	str	r3, [r4, #0]
 802cac2:	f8d8 3000 	ldr.w	r3, [r8]
 802cac6:	685a      	ldr	r2, [r3, #4]
 802cac8:	bb62      	cbnz	r2, 802cb24 <_malloc_r+0xdc>
 802caca:	f8c8 7000 	str.w	r7, [r8]
 802cace:	e00f      	b.n	802caf0 <_malloc_r+0xa8>
 802cad0:	6822      	ldr	r2, [r4, #0]
 802cad2:	1b52      	subs	r2, r2, r5
 802cad4:	d420      	bmi.n	802cb18 <_malloc_r+0xd0>
 802cad6:	2a0b      	cmp	r2, #11
 802cad8:	d917      	bls.n	802cb0a <_malloc_r+0xc2>
 802cada:	1961      	adds	r1, r4, r5
 802cadc:	42a3      	cmp	r3, r4
 802cade:	6025      	str	r5, [r4, #0]
 802cae0:	bf18      	it	ne
 802cae2:	6059      	strne	r1, [r3, #4]
 802cae4:	6863      	ldr	r3, [r4, #4]
 802cae6:	bf08      	it	eq
 802cae8:	f8c8 1000 	streq.w	r1, [r8]
 802caec:	5162      	str	r2, [r4, r5]
 802caee:	604b      	str	r3, [r1, #4]
 802caf0:	4630      	mov	r0, r6
 802caf2:	f000 f82f 	bl	802cb54 <__malloc_unlock>
 802caf6:	f104 000b 	add.w	r0, r4, #11
 802cafa:	1d23      	adds	r3, r4, #4
 802cafc:	f020 0007 	bic.w	r0, r0, #7
 802cb00:	1ac2      	subs	r2, r0, r3
 802cb02:	bf1c      	itt	ne
 802cb04:	1a1b      	subne	r3, r3, r0
 802cb06:	50a3      	strne	r3, [r4, r2]
 802cb08:	e7af      	b.n	802ca6a <_malloc_r+0x22>
 802cb0a:	6862      	ldr	r2, [r4, #4]
 802cb0c:	42a3      	cmp	r3, r4
 802cb0e:	bf0c      	ite	eq
 802cb10:	f8c8 2000 	streq.w	r2, [r8]
 802cb14:	605a      	strne	r2, [r3, #4]
 802cb16:	e7eb      	b.n	802caf0 <_malloc_r+0xa8>
 802cb18:	4623      	mov	r3, r4
 802cb1a:	6864      	ldr	r4, [r4, #4]
 802cb1c:	e7ae      	b.n	802ca7c <_malloc_r+0x34>
 802cb1e:	463c      	mov	r4, r7
 802cb20:	687f      	ldr	r7, [r7, #4]
 802cb22:	e7b6      	b.n	802ca92 <_malloc_r+0x4a>
 802cb24:	461a      	mov	r2, r3
 802cb26:	685b      	ldr	r3, [r3, #4]
 802cb28:	42a3      	cmp	r3, r4
 802cb2a:	d1fb      	bne.n	802cb24 <_malloc_r+0xdc>
 802cb2c:	2300      	movs	r3, #0
 802cb2e:	6053      	str	r3, [r2, #4]
 802cb30:	e7de      	b.n	802caf0 <_malloc_r+0xa8>
 802cb32:	230c      	movs	r3, #12
 802cb34:	4630      	mov	r0, r6
 802cb36:	6033      	str	r3, [r6, #0]
 802cb38:	f000 f80c 	bl	802cb54 <__malloc_unlock>
 802cb3c:	e794      	b.n	802ca68 <_malloc_r+0x20>
 802cb3e:	6005      	str	r5, [r0, #0]
 802cb40:	e7d6      	b.n	802caf0 <_malloc_r+0xa8>
 802cb42:	bf00      	nop
 802cb44:	2005c504 	.word	0x2005c504

0802cb48 <__malloc_lock>:
 802cb48:	4801      	ldr	r0, [pc, #4]	@ (802cb50 <__malloc_lock+0x8>)
 802cb4a:	f000 bb00 	b.w	802d14e <__retarget_lock_acquire_recursive>
 802cb4e:	bf00      	nop
 802cb50:	2005c648 	.word	0x2005c648

0802cb54 <__malloc_unlock>:
 802cb54:	4801      	ldr	r0, [pc, #4]	@ (802cb5c <__malloc_unlock+0x8>)
 802cb56:	f000 bafb 	b.w	802d150 <__retarget_lock_release_recursive>
 802cb5a:	bf00      	nop
 802cb5c:	2005c648 	.word	0x2005c648

0802cb60 <__cxa_atexit>:
 802cb60:	b510      	push	{r4, lr}
 802cb62:	4604      	mov	r4, r0
 802cb64:	4804      	ldr	r0, [pc, #16]	@ (802cb78 <__cxa_atexit+0x18>)
 802cb66:	4613      	mov	r3, r2
 802cb68:	b120      	cbz	r0, 802cb74 <__cxa_atexit+0x14>
 802cb6a:	460a      	mov	r2, r1
 802cb6c:	2002      	movs	r0, #2
 802cb6e:	4621      	mov	r1, r4
 802cb70:	f000 fafc 	bl	802d16c <__register_exitproc>
 802cb74:	bd10      	pop	{r4, pc}
 802cb76:	bf00      	nop
 802cb78:	0802d16d 	.word	0x0802d16d

0802cb7c <std>:
 802cb7c:	2300      	movs	r3, #0
 802cb7e:	b510      	push	{r4, lr}
 802cb80:	4604      	mov	r4, r0
 802cb82:	6083      	str	r3, [r0, #8]
 802cb84:	8181      	strh	r1, [r0, #12]
 802cb86:	4619      	mov	r1, r3
 802cb88:	6643      	str	r3, [r0, #100]	@ 0x64
 802cb8a:	81c2      	strh	r2, [r0, #14]
 802cb8c:	2208      	movs	r2, #8
 802cb8e:	6183      	str	r3, [r0, #24]
 802cb90:	e9c0 3300 	strd	r3, r3, [r0]
 802cb94:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802cb98:	305c      	adds	r0, #92	@ 0x5c
 802cb9a:	f000 fa0b 	bl	802cfb4 <memset>
 802cb9e:	4b0d      	ldr	r3, [pc, #52]	@ (802cbd4 <std+0x58>)
 802cba0:	6224      	str	r4, [r4, #32]
 802cba2:	6263      	str	r3, [r4, #36]	@ 0x24
 802cba4:	4b0c      	ldr	r3, [pc, #48]	@ (802cbd8 <std+0x5c>)
 802cba6:	62a3      	str	r3, [r4, #40]	@ 0x28
 802cba8:	4b0c      	ldr	r3, [pc, #48]	@ (802cbdc <std+0x60>)
 802cbaa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802cbac:	4b0c      	ldr	r3, [pc, #48]	@ (802cbe0 <std+0x64>)
 802cbae:	6323      	str	r3, [r4, #48]	@ 0x30
 802cbb0:	4b0c      	ldr	r3, [pc, #48]	@ (802cbe4 <std+0x68>)
 802cbb2:	429c      	cmp	r4, r3
 802cbb4:	d006      	beq.n	802cbc4 <std+0x48>
 802cbb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802cbba:	4294      	cmp	r4, r2
 802cbbc:	d002      	beq.n	802cbc4 <std+0x48>
 802cbbe:	33d0      	adds	r3, #208	@ 0xd0
 802cbc0:	429c      	cmp	r4, r3
 802cbc2:	d105      	bne.n	802cbd0 <std+0x54>
 802cbc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802cbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cbcc:	f000 babe 	b.w	802d14c <__retarget_lock_init_recursive>
 802cbd0:	bd10      	pop	{r4, pc}
 802cbd2:	bf00      	nop
 802cbd4:	0802ce05 	.word	0x0802ce05
 802cbd8:	0802ce27 	.word	0x0802ce27
 802cbdc:	0802ce5f 	.word	0x0802ce5f
 802cbe0:	0802ce83 	.word	0x0802ce83
 802cbe4:	2005c508 	.word	0x2005c508

0802cbe8 <stdio_exit_handler>:
 802cbe8:	4a02      	ldr	r2, [pc, #8]	@ (802cbf4 <stdio_exit_handler+0xc>)
 802cbea:	4903      	ldr	r1, [pc, #12]	@ (802cbf8 <stdio_exit_handler+0x10>)
 802cbec:	4803      	ldr	r0, [pc, #12]	@ (802cbfc <stdio_exit_handler+0x14>)
 802cbee:	f000 b87b 	b.w	802cce8 <_fwalk_sglue>
 802cbf2:	bf00      	nop
 802cbf4:	2000009c 	.word	0x2000009c
 802cbf8:	0802d969 	.word	0x0802d969
 802cbfc:	200000ac 	.word	0x200000ac

0802cc00 <cleanup_stdio>:
 802cc00:	6841      	ldr	r1, [r0, #4]
 802cc02:	4b0c      	ldr	r3, [pc, #48]	@ (802cc34 <cleanup_stdio+0x34>)
 802cc04:	4299      	cmp	r1, r3
 802cc06:	b510      	push	{r4, lr}
 802cc08:	4604      	mov	r4, r0
 802cc0a:	d001      	beq.n	802cc10 <cleanup_stdio+0x10>
 802cc0c:	f000 feac 	bl	802d968 <_fflush_r>
 802cc10:	68a1      	ldr	r1, [r4, #8]
 802cc12:	4b09      	ldr	r3, [pc, #36]	@ (802cc38 <cleanup_stdio+0x38>)
 802cc14:	4299      	cmp	r1, r3
 802cc16:	d002      	beq.n	802cc1e <cleanup_stdio+0x1e>
 802cc18:	4620      	mov	r0, r4
 802cc1a:	f000 fea5 	bl	802d968 <_fflush_r>
 802cc1e:	68e1      	ldr	r1, [r4, #12]
 802cc20:	4b06      	ldr	r3, [pc, #24]	@ (802cc3c <cleanup_stdio+0x3c>)
 802cc22:	4299      	cmp	r1, r3
 802cc24:	d004      	beq.n	802cc30 <cleanup_stdio+0x30>
 802cc26:	4620      	mov	r0, r4
 802cc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cc2c:	f000 be9c 	b.w	802d968 <_fflush_r>
 802cc30:	bd10      	pop	{r4, pc}
 802cc32:	bf00      	nop
 802cc34:	2005c508 	.word	0x2005c508
 802cc38:	2005c570 	.word	0x2005c570
 802cc3c:	2005c5d8 	.word	0x2005c5d8

0802cc40 <global_stdio_init.part.0>:
 802cc40:	b510      	push	{r4, lr}
 802cc42:	4b0b      	ldr	r3, [pc, #44]	@ (802cc70 <global_stdio_init.part.0+0x30>)
 802cc44:	2104      	movs	r1, #4
 802cc46:	4c0b      	ldr	r4, [pc, #44]	@ (802cc74 <global_stdio_init.part.0+0x34>)
 802cc48:	4a0b      	ldr	r2, [pc, #44]	@ (802cc78 <global_stdio_init.part.0+0x38>)
 802cc4a:	4620      	mov	r0, r4
 802cc4c:	601a      	str	r2, [r3, #0]
 802cc4e:	2200      	movs	r2, #0
 802cc50:	f7ff ff94 	bl	802cb7c <std>
 802cc54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802cc58:	2201      	movs	r2, #1
 802cc5a:	2109      	movs	r1, #9
 802cc5c:	f7ff ff8e 	bl	802cb7c <std>
 802cc60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802cc64:	2202      	movs	r2, #2
 802cc66:	2112      	movs	r1, #18
 802cc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cc6c:	f7ff bf86 	b.w	802cb7c <std>
 802cc70:	2005c640 	.word	0x2005c640
 802cc74:	2005c508 	.word	0x2005c508
 802cc78:	0802cbe9 	.word	0x0802cbe9

0802cc7c <__sfp_lock_acquire>:
 802cc7c:	4801      	ldr	r0, [pc, #4]	@ (802cc84 <__sfp_lock_acquire+0x8>)
 802cc7e:	f000 ba66 	b.w	802d14e <__retarget_lock_acquire_recursive>
 802cc82:	bf00      	nop
 802cc84:	2005c64a 	.word	0x2005c64a

0802cc88 <__sfp_lock_release>:
 802cc88:	4801      	ldr	r0, [pc, #4]	@ (802cc90 <__sfp_lock_release+0x8>)
 802cc8a:	f000 ba61 	b.w	802d150 <__retarget_lock_release_recursive>
 802cc8e:	bf00      	nop
 802cc90:	2005c64a 	.word	0x2005c64a

0802cc94 <__sinit>:
 802cc94:	b510      	push	{r4, lr}
 802cc96:	4604      	mov	r4, r0
 802cc98:	f7ff fff0 	bl	802cc7c <__sfp_lock_acquire>
 802cc9c:	6a23      	ldr	r3, [r4, #32]
 802cc9e:	b11b      	cbz	r3, 802cca8 <__sinit+0x14>
 802cca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cca4:	f7ff bff0 	b.w	802cc88 <__sfp_lock_release>
 802cca8:	4b04      	ldr	r3, [pc, #16]	@ (802ccbc <__sinit+0x28>)
 802ccaa:	6223      	str	r3, [r4, #32]
 802ccac:	4b04      	ldr	r3, [pc, #16]	@ (802ccc0 <__sinit+0x2c>)
 802ccae:	681b      	ldr	r3, [r3, #0]
 802ccb0:	2b00      	cmp	r3, #0
 802ccb2:	d1f5      	bne.n	802cca0 <__sinit+0xc>
 802ccb4:	f7ff ffc4 	bl	802cc40 <global_stdio_init.part.0>
 802ccb8:	e7f2      	b.n	802cca0 <__sinit+0xc>
 802ccba:	bf00      	nop
 802ccbc:	0802cc01 	.word	0x0802cc01
 802ccc0:	2005c640 	.word	0x2005c640

0802ccc4 <fiprintf>:
 802ccc4:	b40e      	push	{r1, r2, r3}
 802ccc6:	b503      	push	{r0, r1, lr}
 802ccc8:	ab03      	add	r3, sp, #12
 802ccca:	4601      	mov	r1, r0
 802cccc:	4805      	ldr	r0, [pc, #20]	@ (802cce4 <fiprintf+0x20>)
 802ccce:	f853 2b04 	ldr.w	r2, [r3], #4
 802ccd2:	6800      	ldr	r0, [r0, #0]
 802ccd4:	9301      	str	r3, [sp, #4]
 802ccd6:	f000 fb1b 	bl	802d310 <_vfiprintf_r>
 802ccda:	b002      	add	sp, #8
 802ccdc:	f85d eb04 	ldr.w	lr, [sp], #4
 802cce0:	b003      	add	sp, #12
 802cce2:	4770      	bx	lr
 802cce4:	200000a8 	.word	0x200000a8

0802cce8 <_fwalk_sglue>:
 802cce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ccec:	4607      	mov	r7, r0
 802ccee:	4688      	mov	r8, r1
 802ccf0:	4614      	mov	r4, r2
 802ccf2:	2600      	movs	r6, #0
 802ccf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802ccf8:	f1b9 0901 	subs.w	r9, r9, #1
 802ccfc:	d505      	bpl.n	802cd0a <_fwalk_sglue+0x22>
 802ccfe:	6824      	ldr	r4, [r4, #0]
 802cd00:	2c00      	cmp	r4, #0
 802cd02:	d1f7      	bne.n	802ccf4 <_fwalk_sglue+0xc>
 802cd04:	4630      	mov	r0, r6
 802cd06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cd0a:	89ab      	ldrh	r3, [r5, #12]
 802cd0c:	2b01      	cmp	r3, #1
 802cd0e:	d907      	bls.n	802cd20 <_fwalk_sglue+0x38>
 802cd10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802cd14:	3301      	adds	r3, #1
 802cd16:	d003      	beq.n	802cd20 <_fwalk_sglue+0x38>
 802cd18:	4629      	mov	r1, r5
 802cd1a:	4638      	mov	r0, r7
 802cd1c:	47c0      	blx	r8
 802cd1e:	4306      	orrs	r6, r0
 802cd20:	3568      	adds	r5, #104	@ 0x68
 802cd22:	e7e9      	b.n	802ccf8 <_fwalk_sglue+0x10>

0802cd24 <iprintf>:
 802cd24:	b40f      	push	{r0, r1, r2, r3}
 802cd26:	b507      	push	{r0, r1, r2, lr}
 802cd28:	4906      	ldr	r1, [pc, #24]	@ (802cd44 <iprintf+0x20>)
 802cd2a:	ab04      	add	r3, sp, #16
 802cd2c:	6808      	ldr	r0, [r1, #0]
 802cd2e:	f853 2b04 	ldr.w	r2, [r3], #4
 802cd32:	6881      	ldr	r1, [r0, #8]
 802cd34:	9301      	str	r3, [sp, #4]
 802cd36:	f000 faeb 	bl	802d310 <_vfiprintf_r>
 802cd3a:	b003      	add	sp, #12
 802cd3c:	f85d eb04 	ldr.w	lr, [sp], #4
 802cd40:	b004      	add	sp, #16
 802cd42:	4770      	bx	lr
 802cd44:	200000a8 	.word	0x200000a8

0802cd48 <_puts_r>:
 802cd48:	6a03      	ldr	r3, [r0, #32]
 802cd4a:	b570      	push	{r4, r5, r6, lr}
 802cd4c:	4605      	mov	r5, r0
 802cd4e:	460e      	mov	r6, r1
 802cd50:	6884      	ldr	r4, [r0, #8]
 802cd52:	b90b      	cbnz	r3, 802cd58 <_puts_r+0x10>
 802cd54:	f7ff ff9e 	bl	802cc94 <__sinit>
 802cd58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802cd5a:	07db      	lsls	r3, r3, #31
 802cd5c:	d405      	bmi.n	802cd6a <_puts_r+0x22>
 802cd5e:	89a3      	ldrh	r3, [r4, #12]
 802cd60:	0598      	lsls	r0, r3, #22
 802cd62:	d402      	bmi.n	802cd6a <_puts_r+0x22>
 802cd64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802cd66:	f000 f9f2 	bl	802d14e <__retarget_lock_acquire_recursive>
 802cd6a:	89a3      	ldrh	r3, [r4, #12]
 802cd6c:	0719      	lsls	r1, r3, #28
 802cd6e:	d502      	bpl.n	802cd76 <_puts_r+0x2e>
 802cd70:	6923      	ldr	r3, [r4, #16]
 802cd72:	2b00      	cmp	r3, #0
 802cd74:	d135      	bne.n	802cde2 <_puts_r+0x9a>
 802cd76:	4621      	mov	r1, r4
 802cd78:	4628      	mov	r0, r5
 802cd7a:	f000 f8c5 	bl	802cf08 <__swsetup_r>
 802cd7e:	b380      	cbz	r0, 802cde2 <_puts_r+0x9a>
 802cd80:	f04f 35ff 	mov.w	r5, #4294967295
 802cd84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802cd86:	07da      	lsls	r2, r3, #31
 802cd88:	d405      	bmi.n	802cd96 <_puts_r+0x4e>
 802cd8a:	89a3      	ldrh	r3, [r4, #12]
 802cd8c:	059b      	lsls	r3, r3, #22
 802cd8e:	d402      	bmi.n	802cd96 <_puts_r+0x4e>
 802cd90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802cd92:	f000 f9dd 	bl	802d150 <__retarget_lock_release_recursive>
 802cd96:	4628      	mov	r0, r5
 802cd98:	bd70      	pop	{r4, r5, r6, pc}
 802cd9a:	2b00      	cmp	r3, #0
 802cd9c:	da04      	bge.n	802cda8 <_puts_r+0x60>
 802cd9e:	69a2      	ldr	r2, [r4, #24]
 802cda0:	429a      	cmp	r2, r3
 802cda2:	dc17      	bgt.n	802cdd4 <_puts_r+0x8c>
 802cda4:	290a      	cmp	r1, #10
 802cda6:	d015      	beq.n	802cdd4 <_puts_r+0x8c>
 802cda8:	6823      	ldr	r3, [r4, #0]
 802cdaa:	1c5a      	adds	r2, r3, #1
 802cdac:	6022      	str	r2, [r4, #0]
 802cdae:	7019      	strb	r1, [r3, #0]
 802cdb0:	68a3      	ldr	r3, [r4, #8]
 802cdb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802cdb6:	3b01      	subs	r3, #1
 802cdb8:	60a3      	str	r3, [r4, #8]
 802cdba:	2900      	cmp	r1, #0
 802cdbc:	d1ed      	bne.n	802cd9a <_puts_r+0x52>
 802cdbe:	2b00      	cmp	r3, #0
 802cdc0:	da11      	bge.n	802cde6 <_puts_r+0x9e>
 802cdc2:	4622      	mov	r2, r4
 802cdc4:	210a      	movs	r1, #10
 802cdc6:	4628      	mov	r0, r5
 802cdc8:	f000 f85f 	bl	802ce8a <__swbuf_r>
 802cdcc:	3001      	adds	r0, #1
 802cdce:	d0d7      	beq.n	802cd80 <_puts_r+0x38>
 802cdd0:	250a      	movs	r5, #10
 802cdd2:	e7d7      	b.n	802cd84 <_puts_r+0x3c>
 802cdd4:	4622      	mov	r2, r4
 802cdd6:	4628      	mov	r0, r5
 802cdd8:	f000 f857 	bl	802ce8a <__swbuf_r>
 802cddc:	3001      	adds	r0, #1
 802cdde:	d1e7      	bne.n	802cdb0 <_puts_r+0x68>
 802cde0:	e7ce      	b.n	802cd80 <_puts_r+0x38>
 802cde2:	3e01      	subs	r6, #1
 802cde4:	e7e4      	b.n	802cdb0 <_puts_r+0x68>
 802cde6:	6823      	ldr	r3, [r4, #0]
 802cde8:	1c5a      	adds	r2, r3, #1
 802cdea:	6022      	str	r2, [r4, #0]
 802cdec:	220a      	movs	r2, #10
 802cdee:	701a      	strb	r2, [r3, #0]
 802cdf0:	e7ee      	b.n	802cdd0 <_puts_r+0x88>
	...

0802cdf4 <puts>:
 802cdf4:	4b02      	ldr	r3, [pc, #8]	@ (802ce00 <puts+0xc>)
 802cdf6:	4601      	mov	r1, r0
 802cdf8:	6818      	ldr	r0, [r3, #0]
 802cdfa:	f7ff bfa5 	b.w	802cd48 <_puts_r>
 802cdfe:	bf00      	nop
 802ce00:	200000a8 	.word	0x200000a8

0802ce04 <__sread>:
 802ce04:	b510      	push	{r4, lr}
 802ce06:	460c      	mov	r4, r1
 802ce08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ce0c:	f000 f92c 	bl	802d068 <_read_r>
 802ce10:	2800      	cmp	r0, #0
 802ce12:	bfab      	itete	ge
 802ce14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802ce16:	89a3      	ldrhlt	r3, [r4, #12]
 802ce18:	181b      	addge	r3, r3, r0
 802ce1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802ce1e:	bfac      	ite	ge
 802ce20:	6563      	strge	r3, [r4, #84]	@ 0x54
 802ce22:	81a3      	strhlt	r3, [r4, #12]
 802ce24:	bd10      	pop	{r4, pc}

0802ce26 <__swrite>:
 802ce26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ce2a:	461f      	mov	r7, r3
 802ce2c:	898b      	ldrh	r3, [r1, #12]
 802ce2e:	4605      	mov	r5, r0
 802ce30:	460c      	mov	r4, r1
 802ce32:	05db      	lsls	r3, r3, #23
 802ce34:	4616      	mov	r6, r2
 802ce36:	d505      	bpl.n	802ce44 <__swrite+0x1e>
 802ce38:	2302      	movs	r3, #2
 802ce3a:	2200      	movs	r2, #0
 802ce3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ce40:	f000 f900 	bl	802d044 <_lseek_r>
 802ce44:	89a3      	ldrh	r3, [r4, #12]
 802ce46:	4632      	mov	r2, r6
 802ce48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ce4c:	4628      	mov	r0, r5
 802ce4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802ce52:	81a3      	strh	r3, [r4, #12]
 802ce54:	463b      	mov	r3, r7
 802ce56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ce5a:	f000 b93b 	b.w	802d0d4 <_write_r>

0802ce5e <__sseek>:
 802ce5e:	b510      	push	{r4, lr}
 802ce60:	460c      	mov	r4, r1
 802ce62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ce66:	f000 f8ed 	bl	802d044 <_lseek_r>
 802ce6a:	1c43      	adds	r3, r0, #1
 802ce6c:	89a3      	ldrh	r3, [r4, #12]
 802ce6e:	bf15      	itete	ne
 802ce70:	6560      	strne	r0, [r4, #84]	@ 0x54
 802ce72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802ce76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802ce7a:	81a3      	strheq	r3, [r4, #12]
 802ce7c:	bf18      	it	ne
 802ce7e:	81a3      	strhne	r3, [r4, #12]
 802ce80:	bd10      	pop	{r4, pc}

0802ce82 <__sclose>:
 802ce82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ce86:	f000 b8cd 	b.w	802d024 <_close_r>

0802ce8a <__swbuf_r>:
 802ce8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ce8c:	460e      	mov	r6, r1
 802ce8e:	4614      	mov	r4, r2
 802ce90:	4605      	mov	r5, r0
 802ce92:	b118      	cbz	r0, 802ce9c <__swbuf_r+0x12>
 802ce94:	6a03      	ldr	r3, [r0, #32]
 802ce96:	b90b      	cbnz	r3, 802ce9c <__swbuf_r+0x12>
 802ce98:	f7ff fefc 	bl	802cc94 <__sinit>
 802ce9c:	69a3      	ldr	r3, [r4, #24]
 802ce9e:	60a3      	str	r3, [r4, #8]
 802cea0:	89a3      	ldrh	r3, [r4, #12]
 802cea2:	071a      	lsls	r2, r3, #28
 802cea4:	d501      	bpl.n	802ceaa <__swbuf_r+0x20>
 802cea6:	6923      	ldr	r3, [r4, #16]
 802cea8:	b943      	cbnz	r3, 802cebc <__swbuf_r+0x32>
 802ceaa:	4621      	mov	r1, r4
 802ceac:	4628      	mov	r0, r5
 802ceae:	f000 f82b 	bl	802cf08 <__swsetup_r>
 802ceb2:	b118      	cbz	r0, 802cebc <__swbuf_r+0x32>
 802ceb4:	f04f 37ff 	mov.w	r7, #4294967295
 802ceb8:	4638      	mov	r0, r7
 802ceba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cebc:	6823      	ldr	r3, [r4, #0]
 802cebe:	b2f6      	uxtb	r6, r6
 802cec0:	6922      	ldr	r2, [r4, #16]
 802cec2:	4637      	mov	r7, r6
 802cec4:	1a98      	subs	r0, r3, r2
 802cec6:	6963      	ldr	r3, [r4, #20]
 802cec8:	4283      	cmp	r3, r0
 802ceca:	dc05      	bgt.n	802ced8 <__swbuf_r+0x4e>
 802cecc:	4621      	mov	r1, r4
 802cece:	4628      	mov	r0, r5
 802ced0:	f000 fd4a 	bl	802d968 <_fflush_r>
 802ced4:	2800      	cmp	r0, #0
 802ced6:	d1ed      	bne.n	802ceb4 <__swbuf_r+0x2a>
 802ced8:	68a3      	ldr	r3, [r4, #8]
 802ceda:	3b01      	subs	r3, #1
 802cedc:	60a3      	str	r3, [r4, #8]
 802cede:	6823      	ldr	r3, [r4, #0]
 802cee0:	1c5a      	adds	r2, r3, #1
 802cee2:	6022      	str	r2, [r4, #0]
 802cee4:	701e      	strb	r6, [r3, #0]
 802cee6:	1c43      	adds	r3, r0, #1
 802cee8:	6962      	ldr	r2, [r4, #20]
 802ceea:	429a      	cmp	r2, r3
 802ceec:	d004      	beq.n	802cef8 <__swbuf_r+0x6e>
 802ceee:	89a3      	ldrh	r3, [r4, #12]
 802cef0:	07db      	lsls	r3, r3, #31
 802cef2:	d5e1      	bpl.n	802ceb8 <__swbuf_r+0x2e>
 802cef4:	2e0a      	cmp	r6, #10
 802cef6:	d1df      	bne.n	802ceb8 <__swbuf_r+0x2e>
 802cef8:	4621      	mov	r1, r4
 802cefa:	4628      	mov	r0, r5
 802cefc:	f000 fd34 	bl	802d968 <_fflush_r>
 802cf00:	2800      	cmp	r0, #0
 802cf02:	d0d9      	beq.n	802ceb8 <__swbuf_r+0x2e>
 802cf04:	e7d6      	b.n	802ceb4 <__swbuf_r+0x2a>
	...

0802cf08 <__swsetup_r>:
 802cf08:	b538      	push	{r3, r4, r5, lr}
 802cf0a:	4b29      	ldr	r3, [pc, #164]	@ (802cfb0 <__swsetup_r+0xa8>)
 802cf0c:	4605      	mov	r5, r0
 802cf0e:	460c      	mov	r4, r1
 802cf10:	6818      	ldr	r0, [r3, #0]
 802cf12:	b118      	cbz	r0, 802cf1c <__swsetup_r+0x14>
 802cf14:	6a03      	ldr	r3, [r0, #32]
 802cf16:	b90b      	cbnz	r3, 802cf1c <__swsetup_r+0x14>
 802cf18:	f7ff febc 	bl	802cc94 <__sinit>
 802cf1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cf20:	0719      	lsls	r1, r3, #28
 802cf22:	d422      	bmi.n	802cf6a <__swsetup_r+0x62>
 802cf24:	06da      	lsls	r2, r3, #27
 802cf26:	d407      	bmi.n	802cf38 <__swsetup_r+0x30>
 802cf28:	2209      	movs	r2, #9
 802cf2a:	602a      	str	r2, [r5, #0]
 802cf2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802cf30:	f04f 30ff 	mov.w	r0, #4294967295
 802cf34:	81a3      	strh	r3, [r4, #12]
 802cf36:	e033      	b.n	802cfa0 <__swsetup_r+0x98>
 802cf38:	0758      	lsls	r0, r3, #29
 802cf3a:	d512      	bpl.n	802cf62 <__swsetup_r+0x5a>
 802cf3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802cf3e:	b141      	cbz	r1, 802cf52 <__swsetup_r+0x4a>
 802cf40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802cf44:	4299      	cmp	r1, r3
 802cf46:	d002      	beq.n	802cf4e <__swsetup_r+0x46>
 802cf48:	4628      	mov	r0, r5
 802cf4a:	f000 f96d 	bl	802d228 <_free_r>
 802cf4e:	2300      	movs	r3, #0
 802cf50:	6363      	str	r3, [r4, #52]	@ 0x34
 802cf52:	89a3      	ldrh	r3, [r4, #12]
 802cf54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802cf58:	81a3      	strh	r3, [r4, #12]
 802cf5a:	2300      	movs	r3, #0
 802cf5c:	6063      	str	r3, [r4, #4]
 802cf5e:	6923      	ldr	r3, [r4, #16]
 802cf60:	6023      	str	r3, [r4, #0]
 802cf62:	89a3      	ldrh	r3, [r4, #12]
 802cf64:	f043 0308 	orr.w	r3, r3, #8
 802cf68:	81a3      	strh	r3, [r4, #12]
 802cf6a:	6923      	ldr	r3, [r4, #16]
 802cf6c:	b94b      	cbnz	r3, 802cf82 <__swsetup_r+0x7a>
 802cf6e:	89a3      	ldrh	r3, [r4, #12]
 802cf70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802cf74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802cf78:	d003      	beq.n	802cf82 <__swsetup_r+0x7a>
 802cf7a:	4621      	mov	r1, r4
 802cf7c:	4628      	mov	r0, r5
 802cf7e:	f000 fd40 	bl	802da02 <__smakebuf_r>
 802cf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cf86:	f013 0201 	ands.w	r2, r3, #1
 802cf8a:	d00a      	beq.n	802cfa2 <__swsetup_r+0x9a>
 802cf8c:	2200      	movs	r2, #0
 802cf8e:	60a2      	str	r2, [r4, #8]
 802cf90:	6962      	ldr	r2, [r4, #20]
 802cf92:	4252      	negs	r2, r2
 802cf94:	61a2      	str	r2, [r4, #24]
 802cf96:	6922      	ldr	r2, [r4, #16]
 802cf98:	b942      	cbnz	r2, 802cfac <__swsetup_r+0xa4>
 802cf9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802cf9e:	d1c5      	bne.n	802cf2c <__swsetup_r+0x24>
 802cfa0:	bd38      	pop	{r3, r4, r5, pc}
 802cfa2:	0799      	lsls	r1, r3, #30
 802cfa4:	bf58      	it	pl
 802cfa6:	6962      	ldrpl	r2, [r4, #20]
 802cfa8:	60a2      	str	r2, [r4, #8]
 802cfaa:	e7f4      	b.n	802cf96 <__swsetup_r+0x8e>
 802cfac:	2000      	movs	r0, #0
 802cfae:	e7f7      	b.n	802cfa0 <__swsetup_r+0x98>
 802cfb0:	200000a8 	.word	0x200000a8

0802cfb4 <memset>:
 802cfb4:	4402      	add	r2, r0
 802cfb6:	4603      	mov	r3, r0
 802cfb8:	4293      	cmp	r3, r2
 802cfba:	d100      	bne.n	802cfbe <memset+0xa>
 802cfbc:	4770      	bx	lr
 802cfbe:	f803 1b01 	strb.w	r1, [r3], #1
 802cfc2:	e7f9      	b.n	802cfb8 <memset+0x4>

0802cfc4 <_raise_r>:
 802cfc4:	291f      	cmp	r1, #31
 802cfc6:	b538      	push	{r3, r4, r5, lr}
 802cfc8:	4605      	mov	r5, r0
 802cfca:	460c      	mov	r4, r1
 802cfcc:	d904      	bls.n	802cfd8 <_raise_r+0x14>
 802cfce:	2316      	movs	r3, #22
 802cfd0:	6003      	str	r3, [r0, #0]
 802cfd2:	f04f 30ff 	mov.w	r0, #4294967295
 802cfd6:	bd38      	pop	{r3, r4, r5, pc}
 802cfd8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802cfda:	b112      	cbz	r2, 802cfe2 <_raise_r+0x1e>
 802cfdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802cfe0:	b94b      	cbnz	r3, 802cff6 <_raise_r+0x32>
 802cfe2:	4628      	mov	r0, r5
 802cfe4:	f000 f864 	bl	802d0b0 <_getpid_r>
 802cfe8:	4622      	mov	r2, r4
 802cfea:	4601      	mov	r1, r0
 802cfec:	4628      	mov	r0, r5
 802cfee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cff2:	f000 b84b 	b.w	802d08c <_kill_r>
 802cff6:	2b01      	cmp	r3, #1
 802cff8:	d00a      	beq.n	802d010 <_raise_r+0x4c>
 802cffa:	1c59      	adds	r1, r3, #1
 802cffc:	d103      	bne.n	802d006 <_raise_r+0x42>
 802cffe:	2316      	movs	r3, #22
 802d000:	6003      	str	r3, [r0, #0]
 802d002:	2001      	movs	r0, #1
 802d004:	e7e7      	b.n	802cfd6 <_raise_r+0x12>
 802d006:	2100      	movs	r1, #0
 802d008:	4620      	mov	r0, r4
 802d00a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802d00e:	4798      	blx	r3
 802d010:	2000      	movs	r0, #0
 802d012:	e7e0      	b.n	802cfd6 <_raise_r+0x12>

0802d014 <raise>:
 802d014:	4b02      	ldr	r3, [pc, #8]	@ (802d020 <raise+0xc>)
 802d016:	4601      	mov	r1, r0
 802d018:	6818      	ldr	r0, [r3, #0]
 802d01a:	f7ff bfd3 	b.w	802cfc4 <_raise_r>
 802d01e:	bf00      	nop
 802d020:	200000a8 	.word	0x200000a8

0802d024 <_close_r>:
 802d024:	b538      	push	{r3, r4, r5, lr}
 802d026:	2300      	movs	r3, #0
 802d028:	4d05      	ldr	r5, [pc, #20]	@ (802d040 <_close_r+0x1c>)
 802d02a:	4604      	mov	r4, r0
 802d02c:	4608      	mov	r0, r1
 802d02e:	602b      	str	r3, [r5, #0]
 802d030:	f7d4 fd30 	bl	8001a94 <_close>
 802d034:	1c43      	adds	r3, r0, #1
 802d036:	d102      	bne.n	802d03e <_close_r+0x1a>
 802d038:	682b      	ldr	r3, [r5, #0]
 802d03a:	b103      	cbz	r3, 802d03e <_close_r+0x1a>
 802d03c:	6023      	str	r3, [r4, #0]
 802d03e:	bd38      	pop	{r3, r4, r5, pc}
 802d040:	2005c644 	.word	0x2005c644

0802d044 <_lseek_r>:
 802d044:	b538      	push	{r3, r4, r5, lr}
 802d046:	4604      	mov	r4, r0
 802d048:	4d06      	ldr	r5, [pc, #24]	@ (802d064 <_lseek_r+0x20>)
 802d04a:	4608      	mov	r0, r1
 802d04c:	4611      	mov	r1, r2
 802d04e:	2200      	movs	r2, #0
 802d050:	602a      	str	r2, [r5, #0]
 802d052:	461a      	mov	r2, r3
 802d054:	f7d4 fd45 	bl	8001ae2 <_lseek>
 802d058:	1c43      	adds	r3, r0, #1
 802d05a:	d102      	bne.n	802d062 <_lseek_r+0x1e>
 802d05c:	682b      	ldr	r3, [r5, #0]
 802d05e:	b103      	cbz	r3, 802d062 <_lseek_r+0x1e>
 802d060:	6023      	str	r3, [r4, #0]
 802d062:	bd38      	pop	{r3, r4, r5, pc}
 802d064:	2005c644 	.word	0x2005c644

0802d068 <_read_r>:
 802d068:	b538      	push	{r3, r4, r5, lr}
 802d06a:	4604      	mov	r4, r0
 802d06c:	4d06      	ldr	r5, [pc, #24]	@ (802d088 <_read_r+0x20>)
 802d06e:	4608      	mov	r0, r1
 802d070:	4611      	mov	r1, r2
 802d072:	2200      	movs	r2, #0
 802d074:	602a      	str	r2, [r5, #0]
 802d076:	461a      	mov	r2, r3
 802d078:	f7d4 fcd3 	bl	8001a22 <_read>
 802d07c:	1c43      	adds	r3, r0, #1
 802d07e:	d102      	bne.n	802d086 <_read_r+0x1e>
 802d080:	682b      	ldr	r3, [r5, #0]
 802d082:	b103      	cbz	r3, 802d086 <_read_r+0x1e>
 802d084:	6023      	str	r3, [r4, #0]
 802d086:	bd38      	pop	{r3, r4, r5, pc}
 802d088:	2005c644 	.word	0x2005c644

0802d08c <_kill_r>:
 802d08c:	b538      	push	{r3, r4, r5, lr}
 802d08e:	2300      	movs	r3, #0
 802d090:	4d06      	ldr	r5, [pc, #24]	@ (802d0ac <_kill_r+0x20>)
 802d092:	4604      	mov	r4, r0
 802d094:	4608      	mov	r0, r1
 802d096:	4611      	mov	r1, r2
 802d098:	602b      	str	r3, [r5, #0]
 802d09a:	f7d4 fca7 	bl	80019ec <_kill>
 802d09e:	1c43      	adds	r3, r0, #1
 802d0a0:	d102      	bne.n	802d0a8 <_kill_r+0x1c>
 802d0a2:	682b      	ldr	r3, [r5, #0]
 802d0a4:	b103      	cbz	r3, 802d0a8 <_kill_r+0x1c>
 802d0a6:	6023      	str	r3, [r4, #0]
 802d0a8:	bd38      	pop	{r3, r4, r5, pc}
 802d0aa:	bf00      	nop
 802d0ac:	2005c644 	.word	0x2005c644

0802d0b0 <_getpid_r>:
 802d0b0:	f7d4 bc94 	b.w	80019dc <_getpid>

0802d0b4 <_sbrk_r>:
 802d0b4:	b538      	push	{r3, r4, r5, lr}
 802d0b6:	2300      	movs	r3, #0
 802d0b8:	4d05      	ldr	r5, [pc, #20]	@ (802d0d0 <_sbrk_r+0x1c>)
 802d0ba:	4604      	mov	r4, r0
 802d0bc:	4608      	mov	r0, r1
 802d0be:	602b      	str	r3, [r5, #0]
 802d0c0:	f7d4 fd1c 	bl	8001afc <_sbrk>
 802d0c4:	1c43      	adds	r3, r0, #1
 802d0c6:	d102      	bne.n	802d0ce <_sbrk_r+0x1a>
 802d0c8:	682b      	ldr	r3, [r5, #0]
 802d0ca:	b103      	cbz	r3, 802d0ce <_sbrk_r+0x1a>
 802d0cc:	6023      	str	r3, [r4, #0]
 802d0ce:	bd38      	pop	{r3, r4, r5, pc}
 802d0d0:	2005c644 	.word	0x2005c644

0802d0d4 <_write_r>:
 802d0d4:	b538      	push	{r3, r4, r5, lr}
 802d0d6:	4604      	mov	r4, r0
 802d0d8:	4d06      	ldr	r5, [pc, #24]	@ (802d0f4 <_write_r+0x20>)
 802d0da:	4608      	mov	r0, r1
 802d0dc:	4611      	mov	r1, r2
 802d0de:	2200      	movs	r2, #0
 802d0e0:	602a      	str	r2, [r5, #0]
 802d0e2:	461a      	mov	r2, r3
 802d0e4:	f7d4 fcba 	bl	8001a5c <_write>
 802d0e8:	1c43      	adds	r3, r0, #1
 802d0ea:	d102      	bne.n	802d0f2 <_write_r+0x1e>
 802d0ec:	682b      	ldr	r3, [r5, #0]
 802d0ee:	b103      	cbz	r3, 802d0f2 <_write_r+0x1e>
 802d0f0:	6023      	str	r3, [r4, #0]
 802d0f2:	bd38      	pop	{r3, r4, r5, pc}
 802d0f4:	2005c644 	.word	0x2005c644

0802d0f8 <__errno>:
 802d0f8:	4b01      	ldr	r3, [pc, #4]	@ (802d100 <__errno+0x8>)
 802d0fa:	6818      	ldr	r0, [r3, #0]
 802d0fc:	4770      	bx	lr
 802d0fe:	bf00      	nop
 802d100:	200000a8 	.word	0x200000a8

0802d104 <__libc_init_array>:
 802d104:	b570      	push	{r4, r5, r6, lr}
 802d106:	4d0d      	ldr	r5, [pc, #52]	@ (802d13c <__libc_init_array+0x38>)
 802d108:	2600      	movs	r6, #0
 802d10a:	4c0d      	ldr	r4, [pc, #52]	@ (802d140 <__libc_init_array+0x3c>)
 802d10c:	1b64      	subs	r4, r4, r5
 802d10e:	10a4      	asrs	r4, r4, #2
 802d110:	42a6      	cmp	r6, r4
 802d112:	d109      	bne.n	802d128 <__libc_init_array+0x24>
 802d114:	4d0b      	ldr	r5, [pc, #44]	@ (802d144 <__libc_init_array+0x40>)
 802d116:	2600      	movs	r6, #0
 802d118:	4c0b      	ldr	r4, [pc, #44]	@ (802d148 <__libc_init_array+0x44>)
 802d11a:	f000 fcdf 	bl	802dadc <_init>
 802d11e:	1b64      	subs	r4, r4, r5
 802d120:	10a4      	asrs	r4, r4, #2
 802d122:	42a6      	cmp	r6, r4
 802d124:	d105      	bne.n	802d132 <__libc_init_array+0x2e>
 802d126:	bd70      	pop	{r4, r5, r6, pc}
 802d128:	f855 3b04 	ldr.w	r3, [r5], #4
 802d12c:	3601      	adds	r6, #1
 802d12e:	4798      	blx	r3
 802d130:	e7ee      	b.n	802d110 <__libc_init_array+0xc>
 802d132:	f855 3b04 	ldr.w	r3, [r5], #4
 802d136:	3601      	adds	r6, #1
 802d138:	4798      	blx	r3
 802d13a:	e7f2      	b.n	802d122 <__libc_init_array+0x1e>
 802d13c:	0803109c 	.word	0x0803109c
 802d140:	0803109c 	.word	0x0803109c
 802d144:	0803109c 	.word	0x0803109c
 802d148:	080310b0 	.word	0x080310b0

0802d14c <__retarget_lock_init_recursive>:
 802d14c:	4770      	bx	lr

0802d14e <__retarget_lock_acquire_recursive>:
 802d14e:	4770      	bx	lr

0802d150 <__retarget_lock_release_recursive>:
 802d150:	4770      	bx	lr

0802d152 <memcpy>:
 802d152:	440a      	add	r2, r1
 802d154:	1e43      	subs	r3, r0, #1
 802d156:	4291      	cmp	r1, r2
 802d158:	d100      	bne.n	802d15c <memcpy+0xa>
 802d15a:	4770      	bx	lr
 802d15c:	b510      	push	{r4, lr}
 802d15e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d162:	4291      	cmp	r1, r2
 802d164:	f803 4f01 	strb.w	r4, [r3, #1]!
 802d168:	d1f9      	bne.n	802d15e <memcpy+0xc>
 802d16a:	bd10      	pop	{r4, pc}

0802d16c <__register_exitproc>:
 802d16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d170:	4d28      	ldr	r5, [pc, #160]	@ (802d214 <__register_exitproc+0xa8>)
 802d172:	4607      	mov	r7, r0
 802d174:	4691      	mov	r9, r2
 802d176:	460e      	mov	r6, r1
 802d178:	6828      	ldr	r0, [r5, #0]
 802d17a:	4698      	mov	r8, r3
 802d17c:	f7ff ffe7 	bl	802d14e <__retarget_lock_acquire_recursive>
 802d180:	4a25      	ldr	r2, [pc, #148]	@ (802d218 <__register_exitproc+0xac>)
 802d182:	6814      	ldr	r4, [r2, #0]
 802d184:	b93c      	cbnz	r4, 802d196 <__register_exitproc+0x2a>
 802d186:	4b25      	ldr	r3, [pc, #148]	@ (802d21c <__register_exitproc+0xb0>)
 802d188:	6013      	str	r3, [r2, #0]
 802d18a:	4a25      	ldr	r2, [pc, #148]	@ (802d220 <__register_exitproc+0xb4>)
 802d18c:	b112      	cbz	r2, 802d194 <__register_exitproc+0x28>
 802d18e:	6812      	ldr	r2, [r2, #0]
 802d190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802d194:	4c21      	ldr	r4, [pc, #132]	@ (802d21c <__register_exitproc+0xb0>)
 802d196:	6863      	ldr	r3, [r4, #4]
 802d198:	2b1f      	cmp	r3, #31
 802d19a:	dd06      	ble.n	802d1aa <__register_exitproc+0x3e>
 802d19c:	6828      	ldr	r0, [r5, #0]
 802d19e:	f7ff ffd7 	bl	802d150 <__retarget_lock_release_recursive>
 802d1a2:	f04f 30ff 	mov.w	r0, #4294967295
 802d1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d1aa:	b33f      	cbz	r7, 802d1fc <__register_exitproc+0x90>
 802d1ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802d1b0:	b968      	cbnz	r0, 802d1ce <__register_exitproc+0x62>
 802d1b2:	4b1c      	ldr	r3, [pc, #112]	@ (802d224 <__register_exitproc+0xb8>)
 802d1b4:	2b00      	cmp	r3, #0
 802d1b6:	d0f1      	beq.n	802d19c <__register_exitproc+0x30>
 802d1b8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802d1bc:	f7ff fc12 	bl	802c9e4 <malloc>
 802d1c0:	2800      	cmp	r0, #0
 802d1c2:	d0eb      	beq.n	802d19c <__register_exitproc+0x30>
 802d1c4:	2300      	movs	r3, #0
 802d1c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802d1ca:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802d1ce:	6863      	ldr	r3, [r4, #4]
 802d1d0:	2201      	movs	r2, #1
 802d1d2:	2f02      	cmp	r7, #2
 802d1d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802d1d8:	fa02 f203 	lsl.w	r2, r2, r3
 802d1dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802d1e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802d1e4:	ea43 0302 	orr.w	r3, r3, r2
 802d1e8:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802d1ec:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802d1f0:	bf02      	ittt	eq
 802d1f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802d1f6:	4313      	orreq	r3, r2
 802d1f8:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802d1fc:	6863      	ldr	r3, [r4, #4]
 802d1fe:	6828      	ldr	r0, [r5, #0]
 802d200:	1c5a      	adds	r2, r3, #1
 802d202:	3302      	adds	r3, #2
 802d204:	6062      	str	r2, [r4, #4]
 802d206:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802d20a:	f7ff ffa1 	bl	802d150 <__retarget_lock_release_recursive>
 802d20e:	2000      	movs	r0, #0
 802d210:	e7c9      	b.n	802d1a6 <__register_exitproc+0x3a>
 802d212:	bf00      	nop
 802d214:	200000f8 	.word	0x200000f8
 802d218:	2005c6d8 	.word	0x2005c6d8
 802d21c:	2005c64c 	.word	0x2005c64c
 802d220:	08030240 	.word	0x08030240
 802d224:	0802c9e5 	.word	0x0802c9e5

0802d228 <_free_r>:
 802d228:	b538      	push	{r3, r4, r5, lr}
 802d22a:	4605      	mov	r5, r0
 802d22c:	2900      	cmp	r1, #0
 802d22e:	d041      	beq.n	802d2b4 <_free_r+0x8c>
 802d230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d234:	1f0c      	subs	r4, r1, #4
 802d236:	2b00      	cmp	r3, #0
 802d238:	bfb8      	it	lt
 802d23a:	18e4      	addlt	r4, r4, r3
 802d23c:	f7ff fc84 	bl	802cb48 <__malloc_lock>
 802d240:	4a1d      	ldr	r2, [pc, #116]	@ (802d2b8 <_free_r+0x90>)
 802d242:	6813      	ldr	r3, [r2, #0]
 802d244:	b933      	cbnz	r3, 802d254 <_free_r+0x2c>
 802d246:	6063      	str	r3, [r4, #4]
 802d248:	6014      	str	r4, [r2, #0]
 802d24a:	4628      	mov	r0, r5
 802d24c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d250:	f7ff bc80 	b.w	802cb54 <__malloc_unlock>
 802d254:	42a3      	cmp	r3, r4
 802d256:	d908      	bls.n	802d26a <_free_r+0x42>
 802d258:	6820      	ldr	r0, [r4, #0]
 802d25a:	1821      	adds	r1, r4, r0
 802d25c:	428b      	cmp	r3, r1
 802d25e:	bf01      	itttt	eq
 802d260:	6819      	ldreq	r1, [r3, #0]
 802d262:	685b      	ldreq	r3, [r3, #4]
 802d264:	1809      	addeq	r1, r1, r0
 802d266:	6021      	streq	r1, [r4, #0]
 802d268:	e7ed      	b.n	802d246 <_free_r+0x1e>
 802d26a:	461a      	mov	r2, r3
 802d26c:	685b      	ldr	r3, [r3, #4]
 802d26e:	b10b      	cbz	r3, 802d274 <_free_r+0x4c>
 802d270:	42a3      	cmp	r3, r4
 802d272:	d9fa      	bls.n	802d26a <_free_r+0x42>
 802d274:	6811      	ldr	r1, [r2, #0]
 802d276:	1850      	adds	r0, r2, r1
 802d278:	42a0      	cmp	r0, r4
 802d27a:	d10b      	bne.n	802d294 <_free_r+0x6c>
 802d27c:	6820      	ldr	r0, [r4, #0]
 802d27e:	4401      	add	r1, r0
 802d280:	1850      	adds	r0, r2, r1
 802d282:	6011      	str	r1, [r2, #0]
 802d284:	4283      	cmp	r3, r0
 802d286:	d1e0      	bne.n	802d24a <_free_r+0x22>
 802d288:	6818      	ldr	r0, [r3, #0]
 802d28a:	685b      	ldr	r3, [r3, #4]
 802d28c:	4408      	add	r0, r1
 802d28e:	6053      	str	r3, [r2, #4]
 802d290:	6010      	str	r0, [r2, #0]
 802d292:	e7da      	b.n	802d24a <_free_r+0x22>
 802d294:	d902      	bls.n	802d29c <_free_r+0x74>
 802d296:	230c      	movs	r3, #12
 802d298:	602b      	str	r3, [r5, #0]
 802d29a:	e7d6      	b.n	802d24a <_free_r+0x22>
 802d29c:	6820      	ldr	r0, [r4, #0]
 802d29e:	1821      	adds	r1, r4, r0
 802d2a0:	428b      	cmp	r3, r1
 802d2a2:	bf02      	ittt	eq
 802d2a4:	6819      	ldreq	r1, [r3, #0]
 802d2a6:	685b      	ldreq	r3, [r3, #4]
 802d2a8:	1809      	addeq	r1, r1, r0
 802d2aa:	6063      	str	r3, [r4, #4]
 802d2ac:	bf08      	it	eq
 802d2ae:	6021      	streq	r1, [r4, #0]
 802d2b0:	6054      	str	r4, [r2, #4]
 802d2b2:	e7ca      	b.n	802d24a <_free_r+0x22>
 802d2b4:	bd38      	pop	{r3, r4, r5, pc}
 802d2b6:	bf00      	nop
 802d2b8:	2005c504 	.word	0x2005c504

0802d2bc <__sfputc_r>:
 802d2bc:	6893      	ldr	r3, [r2, #8]
 802d2be:	3b01      	subs	r3, #1
 802d2c0:	2b00      	cmp	r3, #0
 802d2c2:	b410      	push	{r4}
 802d2c4:	6093      	str	r3, [r2, #8]
 802d2c6:	da08      	bge.n	802d2da <__sfputc_r+0x1e>
 802d2c8:	6994      	ldr	r4, [r2, #24]
 802d2ca:	42a3      	cmp	r3, r4
 802d2cc:	db01      	blt.n	802d2d2 <__sfputc_r+0x16>
 802d2ce:	290a      	cmp	r1, #10
 802d2d0:	d103      	bne.n	802d2da <__sfputc_r+0x1e>
 802d2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d2d6:	f7ff bdd8 	b.w	802ce8a <__swbuf_r>
 802d2da:	6813      	ldr	r3, [r2, #0]
 802d2dc:	1c58      	adds	r0, r3, #1
 802d2de:	6010      	str	r0, [r2, #0]
 802d2e0:	4608      	mov	r0, r1
 802d2e2:	7019      	strb	r1, [r3, #0]
 802d2e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d2e8:	4770      	bx	lr

0802d2ea <__sfputs_r>:
 802d2ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d2ec:	4606      	mov	r6, r0
 802d2ee:	460f      	mov	r7, r1
 802d2f0:	4614      	mov	r4, r2
 802d2f2:	18d5      	adds	r5, r2, r3
 802d2f4:	42ac      	cmp	r4, r5
 802d2f6:	d101      	bne.n	802d2fc <__sfputs_r+0x12>
 802d2f8:	2000      	movs	r0, #0
 802d2fa:	e007      	b.n	802d30c <__sfputs_r+0x22>
 802d2fc:	463a      	mov	r2, r7
 802d2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d302:	4630      	mov	r0, r6
 802d304:	f7ff ffda 	bl	802d2bc <__sfputc_r>
 802d308:	1c43      	adds	r3, r0, #1
 802d30a:	d1f3      	bne.n	802d2f4 <__sfputs_r+0xa>
 802d30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802d310 <_vfiprintf_r>:
 802d310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d314:	460d      	mov	r5, r1
 802d316:	b09d      	sub	sp, #116	@ 0x74
 802d318:	4614      	mov	r4, r2
 802d31a:	4698      	mov	r8, r3
 802d31c:	4606      	mov	r6, r0
 802d31e:	b118      	cbz	r0, 802d328 <_vfiprintf_r+0x18>
 802d320:	6a03      	ldr	r3, [r0, #32]
 802d322:	b90b      	cbnz	r3, 802d328 <_vfiprintf_r+0x18>
 802d324:	f7ff fcb6 	bl	802cc94 <__sinit>
 802d328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802d32a:	07d9      	lsls	r1, r3, #31
 802d32c:	d405      	bmi.n	802d33a <_vfiprintf_r+0x2a>
 802d32e:	89ab      	ldrh	r3, [r5, #12]
 802d330:	059a      	lsls	r2, r3, #22
 802d332:	d402      	bmi.n	802d33a <_vfiprintf_r+0x2a>
 802d334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802d336:	f7ff ff0a 	bl	802d14e <__retarget_lock_acquire_recursive>
 802d33a:	89ab      	ldrh	r3, [r5, #12]
 802d33c:	071b      	lsls	r3, r3, #28
 802d33e:	d501      	bpl.n	802d344 <_vfiprintf_r+0x34>
 802d340:	692b      	ldr	r3, [r5, #16]
 802d342:	b99b      	cbnz	r3, 802d36c <_vfiprintf_r+0x5c>
 802d344:	4629      	mov	r1, r5
 802d346:	4630      	mov	r0, r6
 802d348:	f7ff fdde 	bl	802cf08 <__swsetup_r>
 802d34c:	b170      	cbz	r0, 802d36c <_vfiprintf_r+0x5c>
 802d34e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802d350:	07dc      	lsls	r4, r3, #31
 802d352:	d504      	bpl.n	802d35e <_vfiprintf_r+0x4e>
 802d354:	f04f 30ff 	mov.w	r0, #4294967295
 802d358:	b01d      	add	sp, #116	@ 0x74
 802d35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d35e:	89ab      	ldrh	r3, [r5, #12]
 802d360:	0598      	lsls	r0, r3, #22
 802d362:	d4f7      	bmi.n	802d354 <_vfiprintf_r+0x44>
 802d364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802d366:	f7ff fef3 	bl	802d150 <__retarget_lock_release_recursive>
 802d36a:	e7f3      	b.n	802d354 <_vfiprintf_r+0x44>
 802d36c:	2300      	movs	r3, #0
 802d36e:	f8cd 800c 	str.w	r8, [sp, #12]
 802d372:	f04f 0901 	mov.w	r9, #1
 802d376:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802d52c <_vfiprintf_r+0x21c>
 802d37a:	9309      	str	r3, [sp, #36]	@ 0x24
 802d37c:	2320      	movs	r3, #32
 802d37e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802d382:	2330      	movs	r3, #48	@ 0x30
 802d384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802d388:	4623      	mov	r3, r4
 802d38a:	469a      	mov	sl, r3
 802d38c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d390:	b10a      	cbz	r2, 802d396 <_vfiprintf_r+0x86>
 802d392:	2a25      	cmp	r2, #37	@ 0x25
 802d394:	d1f9      	bne.n	802d38a <_vfiprintf_r+0x7a>
 802d396:	ebba 0b04 	subs.w	fp, sl, r4
 802d39a:	d00b      	beq.n	802d3b4 <_vfiprintf_r+0xa4>
 802d39c:	465b      	mov	r3, fp
 802d39e:	4622      	mov	r2, r4
 802d3a0:	4629      	mov	r1, r5
 802d3a2:	4630      	mov	r0, r6
 802d3a4:	f7ff ffa1 	bl	802d2ea <__sfputs_r>
 802d3a8:	3001      	adds	r0, #1
 802d3aa:	f000 80a7 	beq.w	802d4fc <_vfiprintf_r+0x1ec>
 802d3ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d3b0:	445a      	add	r2, fp
 802d3b2:	9209      	str	r2, [sp, #36]	@ 0x24
 802d3b4:	f89a 3000 	ldrb.w	r3, [sl]
 802d3b8:	2b00      	cmp	r3, #0
 802d3ba:	f000 809f 	beq.w	802d4fc <_vfiprintf_r+0x1ec>
 802d3be:	2300      	movs	r3, #0
 802d3c0:	f04f 32ff 	mov.w	r2, #4294967295
 802d3c4:	f10a 0a01 	add.w	sl, sl, #1
 802d3c8:	9304      	str	r3, [sp, #16]
 802d3ca:	9307      	str	r3, [sp, #28]
 802d3cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802d3d0:	931a      	str	r3, [sp, #104]	@ 0x68
 802d3d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d3d6:	4654      	mov	r4, sl
 802d3d8:	2205      	movs	r2, #5
 802d3da:	4854      	ldr	r0, [pc, #336]	@ (802d52c <_vfiprintf_r+0x21c>)
 802d3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d3e0:	f000 fb6e 	bl	802dac0 <memchr>
 802d3e4:	9a04      	ldr	r2, [sp, #16]
 802d3e6:	b9d8      	cbnz	r0, 802d420 <_vfiprintf_r+0x110>
 802d3e8:	06d1      	lsls	r1, r2, #27
 802d3ea:	bf44      	itt	mi
 802d3ec:	2320      	movmi	r3, #32
 802d3ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802d3f2:	0713      	lsls	r3, r2, #28
 802d3f4:	bf44      	itt	mi
 802d3f6:	232b      	movmi	r3, #43	@ 0x2b
 802d3f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802d3fc:	f89a 3000 	ldrb.w	r3, [sl]
 802d400:	2b2a      	cmp	r3, #42	@ 0x2a
 802d402:	d015      	beq.n	802d430 <_vfiprintf_r+0x120>
 802d404:	9a07      	ldr	r2, [sp, #28]
 802d406:	4654      	mov	r4, sl
 802d408:	2000      	movs	r0, #0
 802d40a:	f04f 0c0a 	mov.w	ip, #10
 802d40e:	4621      	mov	r1, r4
 802d410:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d414:	3b30      	subs	r3, #48	@ 0x30
 802d416:	2b09      	cmp	r3, #9
 802d418:	d94b      	bls.n	802d4b2 <_vfiprintf_r+0x1a2>
 802d41a:	b1b0      	cbz	r0, 802d44a <_vfiprintf_r+0x13a>
 802d41c:	9207      	str	r2, [sp, #28]
 802d41e:	e014      	b.n	802d44a <_vfiprintf_r+0x13a>
 802d420:	eba0 0308 	sub.w	r3, r0, r8
 802d424:	46a2      	mov	sl, r4
 802d426:	fa09 f303 	lsl.w	r3, r9, r3
 802d42a:	4313      	orrs	r3, r2
 802d42c:	9304      	str	r3, [sp, #16]
 802d42e:	e7d2      	b.n	802d3d6 <_vfiprintf_r+0xc6>
 802d430:	9b03      	ldr	r3, [sp, #12]
 802d432:	1d19      	adds	r1, r3, #4
 802d434:	681b      	ldr	r3, [r3, #0]
 802d436:	2b00      	cmp	r3, #0
 802d438:	9103      	str	r1, [sp, #12]
 802d43a:	bfbb      	ittet	lt
 802d43c:	425b      	neglt	r3, r3
 802d43e:	f042 0202 	orrlt.w	r2, r2, #2
 802d442:	9307      	strge	r3, [sp, #28]
 802d444:	9307      	strlt	r3, [sp, #28]
 802d446:	bfb8      	it	lt
 802d448:	9204      	strlt	r2, [sp, #16]
 802d44a:	7823      	ldrb	r3, [r4, #0]
 802d44c:	2b2e      	cmp	r3, #46	@ 0x2e
 802d44e:	d10a      	bne.n	802d466 <_vfiprintf_r+0x156>
 802d450:	7863      	ldrb	r3, [r4, #1]
 802d452:	2b2a      	cmp	r3, #42	@ 0x2a
 802d454:	d132      	bne.n	802d4bc <_vfiprintf_r+0x1ac>
 802d456:	9b03      	ldr	r3, [sp, #12]
 802d458:	3402      	adds	r4, #2
 802d45a:	1d1a      	adds	r2, r3, #4
 802d45c:	681b      	ldr	r3, [r3, #0]
 802d45e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802d462:	9203      	str	r2, [sp, #12]
 802d464:	9305      	str	r3, [sp, #20]
 802d466:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802d53c <_vfiprintf_r+0x22c>
 802d46a:	2203      	movs	r2, #3
 802d46c:	7821      	ldrb	r1, [r4, #0]
 802d46e:	4650      	mov	r0, sl
 802d470:	f000 fb26 	bl	802dac0 <memchr>
 802d474:	b138      	cbz	r0, 802d486 <_vfiprintf_r+0x176>
 802d476:	eba0 000a 	sub.w	r0, r0, sl
 802d47a:	2240      	movs	r2, #64	@ 0x40
 802d47c:	9b04      	ldr	r3, [sp, #16]
 802d47e:	3401      	adds	r4, #1
 802d480:	4082      	lsls	r2, r0
 802d482:	4313      	orrs	r3, r2
 802d484:	9304      	str	r3, [sp, #16]
 802d486:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d48a:	2206      	movs	r2, #6
 802d48c:	4828      	ldr	r0, [pc, #160]	@ (802d530 <_vfiprintf_r+0x220>)
 802d48e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802d492:	f000 fb15 	bl	802dac0 <memchr>
 802d496:	2800      	cmp	r0, #0
 802d498:	d03f      	beq.n	802d51a <_vfiprintf_r+0x20a>
 802d49a:	4b26      	ldr	r3, [pc, #152]	@ (802d534 <_vfiprintf_r+0x224>)
 802d49c:	bb1b      	cbnz	r3, 802d4e6 <_vfiprintf_r+0x1d6>
 802d49e:	9b03      	ldr	r3, [sp, #12]
 802d4a0:	3307      	adds	r3, #7
 802d4a2:	f023 0307 	bic.w	r3, r3, #7
 802d4a6:	3308      	adds	r3, #8
 802d4a8:	9303      	str	r3, [sp, #12]
 802d4aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d4ac:	443b      	add	r3, r7
 802d4ae:	9309      	str	r3, [sp, #36]	@ 0x24
 802d4b0:	e76a      	b.n	802d388 <_vfiprintf_r+0x78>
 802d4b2:	fb0c 3202 	mla	r2, ip, r2, r3
 802d4b6:	460c      	mov	r4, r1
 802d4b8:	2001      	movs	r0, #1
 802d4ba:	e7a8      	b.n	802d40e <_vfiprintf_r+0xfe>
 802d4bc:	2300      	movs	r3, #0
 802d4be:	3401      	adds	r4, #1
 802d4c0:	f04f 0c0a 	mov.w	ip, #10
 802d4c4:	4619      	mov	r1, r3
 802d4c6:	9305      	str	r3, [sp, #20]
 802d4c8:	4620      	mov	r0, r4
 802d4ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d4ce:	3a30      	subs	r2, #48	@ 0x30
 802d4d0:	2a09      	cmp	r2, #9
 802d4d2:	d903      	bls.n	802d4dc <_vfiprintf_r+0x1cc>
 802d4d4:	2b00      	cmp	r3, #0
 802d4d6:	d0c6      	beq.n	802d466 <_vfiprintf_r+0x156>
 802d4d8:	9105      	str	r1, [sp, #20]
 802d4da:	e7c4      	b.n	802d466 <_vfiprintf_r+0x156>
 802d4dc:	fb0c 2101 	mla	r1, ip, r1, r2
 802d4e0:	4604      	mov	r4, r0
 802d4e2:	2301      	movs	r3, #1
 802d4e4:	e7f0      	b.n	802d4c8 <_vfiprintf_r+0x1b8>
 802d4e6:	ab03      	add	r3, sp, #12
 802d4e8:	462a      	mov	r2, r5
 802d4ea:	a904      	add	r1, sp, #16
 802d4ec:	4630      	mov	r0, r6
 802d4ee:	9300      	str	r3, [sp, #0]
 802d4f0:	4b11      	ldr	r3, [pc, #68]	@ (802d538 <_vfiprintf_r+0x228>)
 802d4f2:	f3af 8000 	nop.w
 802d4f6:	4607      	mov	r7, r0
 802d4f8:	1c78      	adds	r0, r7, #1
 802d4fa:	d1d6      	bne.n	802d4aa <_vfiprintf_r+0x19a>
 802d4fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802d4fe:	07d9      	lsls	r1, r3, #31
 802d500:	d405      	bmi.n	802d50e <_vfiprintf_r+0x1fe>
 802d502:	89ab      	ldrh	r3, [r5, #12]
 802d504:	059a      	lsls	r2, r3, #22
 802d506:	d402      	bmi.n	802d50e <_vfiprintf_r+0x1fe>
 802d508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802d50a:	f7ff fe21 	bl	802d150 <__retarget_lock_release_recursive>
 802d50e:	89ab      	ldrh	r3, [r5, #12]
 802d510:	065b      	lsls	r3, r3, #25
 802d512:	f53f af1f 	bmi.w	802d354 <_vfiprintf_r+0x44>
 802d516:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802d518:	e71e      	b.n	802d358 <_vfiprintf_r+0x48>
 802d51a:	ab03      	add	r3, sp, #12
 802d51c:	462a      	mov	r2, r5
 802d51e:	a904      	add	r1, sp, #16
 802d520:	4630      	mov	r0, r6
 802d522:	9300      	str	r3, [sp, #0]
 802d524:	4b04      	ldr	r3, [pc, #16]	@ (802d538 <_vfiprintf_r+0x228>)
 802d526:	f000 f87d 	bl	802d624 <_printf_i>
 802d52a:	e7e4      	b.n	802d4f6 <_vfiprintf_r+0x1e6>
 802d52c:	0803020c 	.word	0x0803020c
 802d530:	08030216 	.word	0x08030216
 802d534:	00000000 	.word	0x00000000
 802d538:	0802d2eb 	.word	0x0802d2eb
 802d53c:	08030212 	.word	0x08030212

0802d540 <_printf_common>:
 802d540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d544:	4616      	mov	r6, r2
 802d546:	4698      	mov	r8, r3
 802d548:	688a      	ldr	r2, [r1, #8]
 802d54a:	4607      	mov	r7, r0
 802d54c:	690b      	ldr	r3, [r1, #16]
 802d54e:	460c      	mov	r4, r1
 802d550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802d554:	4293      	cmp	r3, r2
 802d556:	bfb8      	it	lt
 802d558:	4613      	movlt	r3, r2
 802d55a:	6033      	str	r3, [r6, #0]
 802d55c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802d560:	b10a      	cbz	r2, 802d566 <_printf_common+0x26>
 802d562:	3301      	adds	r3, #1
 802d564:	6033      	str	r3, [r6, #0]
 802d566:	6823      	ldr	r3, [r4, #0]
 802d568:	0699      	lsls	r1, r3, #26
 802d56a:	bf42      	ittt	mi
 802d56c:	6833      	ldrmi	r3, [r6, #0]
 802d56e:	3302      	addmi	r3, #2
 802d570:	6033      	strmi	r3, [r6, #0]
 802d572:	6825      	ldr	r5, [r4, #0]
 802d574:	f015 0506 	ands.w	r5, r5, #6
 802d578:	d106      	bne.n	802d588 <_printf_common+0x48>
 802d57a:	f104 0a19 	add.w	sl, r4, #25
 802d57e:	68e3      	ldr	r3, [r4, #12]
 802d580:	6832      	ldr	r2, [r6, #0]
 802d582:	1a9b      	subs	r3, r3, r2
 802d584:	42ab      	cmp	r3, r5
 802d586:	dc2b      	bgt.n	802d5e0 <_printf_common+0xa0>
 802d588:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802d58c:	6822      	ldr	r2, [r4, #0]
 802d58e:	3b00      	subs	r3, #0
 802d590:	bf18      	it	ne
 802d592:	2301      	movne	r3, #1
 802d594:	0692      	lsls	r2, r2, #26
 802d596:	d430      	bmi.n	802d5fa <_printf_common+0xba>
 802d598:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802d59c:	4641      	mov	r1, r8
 802d59e:	4638      	mov	r0, r7
 802d5a0:	47c8      	blx	r9
 802d5a2:	3001      	adds	r0, #1
 802d5a4:	d023      	beq.n	802d5ee <_printf_common+0xae>
 802d5a6:	6823      	ldr	r3, [r4, #0]
 802d5a8:	341a      	adds	r4, #26
 802d5aa:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802d5ae:	f003 0306 	and.w	r3, r3, #6
 802d5b2:	2b04      	cmp	r3, #4
 802d5b4:	bf0a      	itet	eq
 802d5b6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802d5ba:	2500      	movne	r5, #0
 802d5bc:	6833      	ldreq	r3, [r6, #0]
 802d5be:	f04f 0600 	mov.w	r6, #0
 802d5c2:	bf08      	it	eq
 802d5c4:	1aed      	subeq	r5, r5, r3
 802d5c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802d5ca:	bf08      	it	eq
 802d5cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802d5d0:	4293      	cmp	r3, r2
 802d5d2:	bfc4      	itt	gt
 802d5d4:	1a9b      	subgt	r3, r3, r2
 802d5d6:	18ed      	addgt	r5, r5, r3
 802d5d8:	42b5      	cmp	r5, r6
 802d5da:	d11a      	bne.n	802d612 <_printf_common+0xd2>
 802d5dc:	2000      	movs	r0, #0
 802d5de:	e008      	b.n	802d5f2 <_printf_common+0xb2>
 802d5e0:	2301      	movs	r3, #1
 802d5e2:	4652      	mov	r2, sl
 802d5e4:	4641      	mov	r1, r8
 802d5e6:	4638      	mov	r0, r7
 802d5e8:	47c8      	blx	r9
 802d5ea:	3001      	adds	r0, #1
 802d5ec:	d103      	bne.n	802d5f6 <_printf_common+0xb6>
 802d5ee:	f04f 30ff 	mov.w	r0, #4294967295
 802d5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d5f6:	3501      	adds	r5, #1
 802d5f8:	e7c1      	b.n	802d57e <_printf_common+0x3e>
 802d5fa:	18e1      	adds	r1, r4, r3
 802d5fc:	1c5a      	adds	r2, r3, #1
 802d5fe:	2030      	movs	r0, #48	@ 0x30
 802d600:	3302      	adds	r3, #2
 802d602:	4422      	add	r2, r4
 802d604:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802d608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802d60c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802d610:	e7c2      	b.n	802d598 <_printf_common+0x58>
 802d612:	2301      	movs	r3, #1
 802d614:	4622      	mov	r2, r4
 802d616:	4641      	mov	r1, r8
 802d618:	4638      	mov	r0, r7
 802d61a:	47c8      	blx	r9
 802d61c:	3001      	adds	r0, #1
 802d61e:	d0e6      	beq.n	802d5ee <_printf_common+0xae>
 802d620:	3601      	adds	r6, #1
 802d622:	e7d9      	b.n	802d5d8 <_printf_common+0x98>

0802d624 <_printf_i>:
 802d624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802d628:	7e0f      	ldrb	r7, [r1, #24]
 802d62a:	4691      	mov	r9, r2
 802d62c:	4680      	mov	r8, r0
 802d62e:	460c      	mov	r4, r1
 802d630:	2f78      	cmp	r7, #120	@ 0x78
 802d632:	469a      	mov	sl, r3
 802d634:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802d636:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802d63a:	d807      	bhi.n	802d64c <_printf_i+0x28>
 802d63c:	2f62      	cmp	r7, #98	@ 0x62
 802d63e:	d80a      	bhi.n	802d656 <_printf_i+0x32>
 802d640:	2f00      	cmp	r7, #0
 802d642:	f000 80d1 	beq.w	802d7e8 <_printf_i+0x1c4>
 802d646:	2f58      	cmp	r7, #88	@ 0x58
 802d648:	f000 80b8 	beq.w	802d7bc <_printf_i+0x198>
 802d64c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802d650:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802d654:	e03a      	b.n	802d6cc <_printf_i+0xa8>
 802d656:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802d65a:	2b15      	cmp	r3, #21
 802d65c:	d8f6      	bhi.n	802d64c <_printf_i+0x28>
 802d65e:	a101      	add	r1, pc, #4	@ (adr r1, 802d664 <_printf_i+0x40>)
 802d660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802d664:	0802d6bd 	.word	0x0802d6bd
 802d668:	0802d6d1 	.word	0x0802d6d1
 802d66c:	0802d64d 	.word	0x0802d64d
 802d670:	0802d64d 	.word	0x0802d64d
 802d674:	0802d64d 	.word	0x0802d64d
 802d678:	0802d64d 	.word	0x0802d64d
 802d67c:	0802d6d1 	.word	0x0802d6d1
 802d680:	0802d64d 	.word	0x0802d64d
 802d684:	0802d64d 	.word	0x0802d64d
 802d688:	0802d64d 	.word	0x0802d64d
 802d68c:	0802d64d 	.word	0x0802d64d
 802d690:	0802d7cf 	.word	0x0802d7cf
 802d694:	0802d6fb 	.word	0x0802d6fb
 802d698:	0802d789 	.word	0x0802d789
 802d69c:	0802d64d 	.word	0x0802d64d
 802d6a0:	0802d64d 	.word	0x0802d64d
 802d6a4:	0802d7f1 	.word	0x0802d7f1
 802d6a8:	0802d64d 	.word	0x0802d64d
 802d6ac:	0802d6fb 	.word	0x0802d6fb
 802d6b0:	0802d64d 	.word	0x0802d64d
 802d6b4:	0802d64d 	.word	0x0802d64d
 802d6b8:	0802d791 	.word	0x0802d791
 802d6bc:	6833      	ldr	r3, [r6, #0]
 802d6be:	1d1a      	adds	r2, r3, #4
 802d6c0:	681b      	ldr	r3, [r3, #0]
 802d6c2:	6032      	str	r2, [r6, #0]
 802d6c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802d6c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802d6cc:	2301      	movs	r3, #1
 802d6ce:	e09c      	b.n	802d80a <_printf_i+0x1e6>
 802d6d0:	6833      	ldr	r3, [r6, #0]
 802d6d2:	6820      	ldr	r0, [r4, #0]
 802d6d4:	1d19      	adds	r1, r3, #4
 802d6d6:	6031      	str	r1, [r6, #0]
 802d6d8:	0606      	lsls	r6, r0, #24
 802d6da:	d501      	bpl.n	802d6e0 <_printf_i+0xbc>
 802d6dc:	681d      	ldr	r5, [r3, #0]
 802d6de:	e003      	b.n	802d6e8 <_printf_i+0xc4>
 802d6e0:	0645      	lsls	r5, r0, #25
 802d6e2:	d5fb      	bpl.n	802d6dc <_printf_i+0xb8>
 802d6e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 802d6e8:	2d00      	cmp	r5, #0
 802d6ea:	da03      	bge.n	802d6f4 <_printf_i+0xd0>
 802d6ec:	232d      	movs	r3, #45	@ 0x2d
 802d6ee:	426d      	negs	r5, r5
 802d6f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802d6f4:	4858      	ldr	r0, [pc, #352]	@ (802d858 <_printf_i+0x234>)
 802d6f6:	230a      	movs	r3, #10
 802d6f8:	e011      	b.n	802d71e <_printf_i+0xfa>
 802d6fa:	6821      	ldr	r1, [r4, #0]
 802d6fc:	6833      	ldr	r3, [r6, #0]
 802d6fe:	0608      	lsls	r0, r1, #24
 802d700:	f853 5b04 	ldr.w	r5, [r3], #4
 802d704:	d402      	bmi.n	802d70c <_printf_i+0xe8>
 802d706:	0649      	lsls	r1, r1, #25
 802d708:	bf48      	it	mi
 802d70a:	b2ad      	uxthmi	r5, r5
 802d70c:	2f6f      	cmp	r7, #111	@ 0x6f
 802d70e:	6033      	str	r3, [r6, #0]
 802d710:	4851      	ldr	r0, [pc, #324]	@ (802d858 <_printf_i+0x234>)
 802d712:	bf14      	ite	ne
 802d714:	230a      	movne	r3, #10
 802d716:	2308      	moveq	r3, #8
 802d718:	2100      	movs	r1, #0
 802d71a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802d71e:	6866      	ldr	r6, [r4, #4]
 802d720:	2e00      	cmp	r6, #0
 802d722:	60a6      	str	r6, [r4, #8]
 802d724:	db05      	blt.n	802d732 <_printf_i+0x10e>
 802d726:	6821      	ldr	r1, [r4, #0]
 802d728:	432e      	orrs	r6, r5
 802d72a:	f021 0104 	bic.w	r1, r1, #4
 802d72e:	6021      	str	r1, [r4, #0]
 802d730:	d04b      	beq.n	802d7ca <_printf_i+0x1a6>
 802d732:	4616      	mov	r6, r2
 802d734:	fbb5 f1f3 	udiv	r1, r5, r3
 802d738:	fb03 5711 	mls	r7, r3, r1, r5
 802d73c:	5dc7      	ldrb	r7, [r0, r7]
 802d73e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802d742:	462f      	mov	r7, r5
 802d744:	460d      	mov	r5, r1
 802d746:	42bb      	cmp	r3, r7
 802d748:	d9f4      	bls.n	802d734 <_printf_i+0x110>
 802d74a:	2b08      	cmp	r3, #8
 802d74c:	d10b      	bne.n	802d766 <_printf_i+0x142>
 802d74e:	6823      	ldr	r3, [r4, #0]
 802d750:	07df      	lsls	r7, r3, #31
 802d752:	d508      	bpl.n	802d766 <_printf_i+0x142>
 802d754:	6923      	ldr	r3, [r4, #16]
 802d756:	6861      	ldr	r1, [r4, #4]
 802d758:	4299      	cmp	r1, r3
 802d75a:	bfde      	ittt	le
 802d75c:	2330      	movle	r3, #48	@ 0x30
 802d75e:	f806 3c01 	strble.w	r3, [r6, #-1]
 802d762:	f106 36ff 	addle.w	r6, r6, #4294967295
 802d766:	1b92      	subs	r2, r2, r6
 802d768:	6122      	str	r2, [r4, #16]
 802d76a:	464b      	mov	r3, r9
 802d76c:	aa03      	add	r2, sp, #12
 802d76e:	4621      	mov	r1, r4
 802d770:	4640      	mov	r0, r8
 802d772:	f8cd a000 	str.w	sl, [sp]
 802d776:	f7ff fee3 	bl	802d540 <_printf_common>
 802d77a:	3001      	adds	r0, #1
 802d77c:	d14a      	bne.n	802d814 <_printf_i+0x1f0>
 802d77e:	f04f 30ff 	mov.w	r0, #4294967295
 802d782:	b004      	add	sp, #16
 802d784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d788:	6823      	ldr	r3, [r4, #0]
 802d78a:	f043 0320 	orr.w	r3, r3, #32
 802d78e:	6023      	str	r3, [r4, #0]
 802d790:	2778      	movs	r7, #120	@ 0x78
 802d792:	4832      	ldr	r0, [pc, #200]	@ (802d85c <_printf_i+0x238>)
 802d794:	6823      	ldr	r3, [r4, #0]
 802d796:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802d79a:	061f      	lsls	r7, r3, #24
 802d79c:	6831      	ldr	r1, [r6, #0]
 802d79e:	f851 5b04 	ldr.w	r5, [r1], #4
 802d7a2:	d402      	bmi.n	802d7aa <_printf_i+0x186>
 802d7a4:	065f      	lsls	r7, r3, #25
 802d7a6:	bf48      	it	mi
 802d7a8:	b2ad      	uxthmi	r5, r5
 802d7aa:	6031      	str	r1, [r6, #0]
 802d7ac:	07d9      	lsls	r1, r3, #31
 802d7ae:	bf44      	itt	mi
 802d7b0:	f043 0320 	orrmi.w	r3, r3, #32
 802d7b4:	6023      	strmi	r3, [r4, #0]
 802d7b6:	b11d      	cbz	r5, 802d7c0 <_printf_i+0x19c>
 802d7b8:	2310      	movs	r3, #16
 802d7ba:	e7ad      	b.n	802d718 <_printf_i+0xf4>
 802d7bc:	4826      	ldr	r0, [pc, #152]	@ (802d858 <_printf_i+0x234>)
 802d7be:	e7e9      	b.n	802d794 <_printf_i+0x170>
 802d7c0:	6823      	ldr	r3, [r4, #0]
 802d7c2:	f023 0320 	bic.w	r3, r3, #32
 802d7c6:	6023      	str	r3, [r4, #0]
 802d7c8:	e7f6      	b.n	802d7b8 <_printf_i+0x194>
 802d7ca:	4616      	mov	r6, r2
 802d7cc:	e7bd      	b.n	802d74a <_printf_i+0x126>
 802d7ce:	6833      	ldr	r3, [r6, #0]
 802d7d0:	6825      	ldr	r5, [r4, #0]
 802d7d2:	1d18      	adds	r0, r3, #4
 802d7d4:	6961      	ldr	r1, [r4, #20]
 802d7d6:	6030      	str	r0, [r6, #0]
 802d7d8:	062e      	lsls	r6, r5, #24
 802d7da:	681b      	ldr	r3, [r3, #0]
 802d7dc:	d501      	bpl.n	802d7e2 <_printf_i+0x1be>
 802d7de:	6019      	str	r1, [r3, #0]
 802d7e0:	e002      	b.n	802d7e8 <_printf_i+0x1c4>
 802d7e2:	0668      	lsls	r0, r5, #25
 802d7e4:	d5fb      	bpl.n	802d7de <_printf_i+0x1ba>
 802d7e6:	8019      	strh	r1, [r3, #0]
 802d7e8:	2300      	movs	r3, #0
 802d7ea:	4616      	mov	r6, r2
 802d7ec:	6123      	str	r3, [r4, #16]
 802d7ee:	e7bc      	b.n	802d76a <_printf_i+0x146>
 802d7f0:	6833      	ldr	r3, [r6, #0]
 802d7f2:	2100      	movs	r1, #0
 802d7f4:	1d1a      	adds	r2, r3, #4
 802d7f6:	6032      	str	r2, [r6, #0]
 802d7f8:	681e      	ldr	r6, [r3, #0]
 802d7fa:	6862      	ldr	r2, [r4, #4]
 802d7fc:	4630      	mov	r0, r6
 802d7fe:	f000 f95f 	bl	802dac0 <memchr>
 802d802:	b108      	cbz	r0, 802d808 <_printf_i+0x1e4>
 802d804:	1b80      	subs	r0, r0, r6
 802d806:	6060      	str	r0, [r4, #4]
 802d808:	6863      	ldr	r3, [r4, #4]
 802d80a:	6123      	str	r3, [r4, #16]
 802d80c:	2300      	movs	r3, #0
 802d80e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802d812:	e7aa      	b.n	802d76a <_printf_i+0x146>
 802d814:	6923      	ldr	r3, [r4, #16]
 802d816:	4632      	mov	r2, r6
 802d818:	4649      	mov	r1, r9
 802d81a:	4640      	mov	r0, r8
 802d81c:	47d0      	blx	sl
 802d81e:	3001      	adds	r0, #1
 802d820:	d0ad      	beq.n	802d77e <_printf_i+0x15a>
 802d822:	6823      	ldr	r3, [r4, #0]
 802d824:	079b      	lsls	r3, r3, #30
 802d826:	d413      	bmi.n	802d850 <_printf_i+0x22c>
 802d828:	68e0      	ldr	r0, [r4, #12]
 802d82a:	9b03      	ldr	r3, [sp, #12]
 802d82c:	4298      	cmp	r0, r3
 802d82e:	bfb8      	it	lt
 802d830:	4618      	movlt	r0, r3
 802d832:	e7a6      	b.n	802d782 <_printf_i+0x15e>
 802d834:	2301      	movs	r3, #1
 802d836:	4632      	mov	r2, r6
 802d838:	4649      	mov	r1, r9
 802d83a:	4640      	mov	r0, r8
 802d83c:	47d0      	blx	sl
 802d83e:	3001      	adds	r0, #1
 802d840:	d09d      	beq.n	802d77e <_printf_i+0x15a>
 802d842:	3501      	adds	r5, #1
 802d844:	68e3      	ldr	r3, [r4, #12]
 802d846:	9903      	ldr	r1, [sp, #12]
 802d848:	1a5b      	subs	r3, r3, r1
 802d84a:	42ab      	cmp	r3, r5
 802d84c:	dcf2      	bgt.n	802d834 <_printf_i+0x210>
 802d84e:	e7eb      	b.n	802d828 <_printf_i+0x204>
 802d850:	2500      	movs	r5, #0
 802d852:	f104 0619 	add.w	r6, r4, #25
 802d856:	e7f5      	b.n	802d844 <_printf_i+0x220>
 802d858:	0803021d 	.word	0x0803021d
 802d85c:	0803022e 	.word	0x0803022e

0802d860 <__sflush_r>:
 802d860:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802d864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d868:	0716      	lsls	r6, r2, #28
 802d86a:	4605      	mov	r5, r0
 802d86c:	460c      	mov	r4, r1
 802d86e:	d454      	bmi.n	802d91a <__sflush_r+0xba>
 802d870:	684b      	ldr	r3, [r1, #4]
 802d872:	2b00      	cmp	r3, #0
 802d874:	dc02      	bgt.n	802d87c <__sflush_r+0x1c>
 802d876:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802d878:	2b00      	cmp	r3, #0
 802d87a:	dd48      	ble.n	802d90e <__sflush_r+0xae>
 802d87c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802d87e:	2e00      	cmp	r6, #0
 802d880:	d045      	beq.n	802d90e <__sflush_r+0xae>
 802d882:	2300      	movs	r3, #0
 802d884:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802d888:	682f      	ldr	r7, [r5, #0]
 802d88a:	6a21      	ldr	r1, [r4, #32]
 802d88c:	602b      	str	r3, [r5, #0]
 802d88e:	d030      	beq.n	802d8f2 <__sflush_r+0x92>
 802d890:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802d892:	89a3      	ldrh	r3, [r4, #12]
 802d894:	0759      	lsls	r1, r3, #29
 802d896:	d505      	bpl.n	802d8a4 <__sflush_r+0x44>
 802d898:	6863      	ldr	r3, [r4, #4]
 802d89a:	1ad2      	subs	r2, r2, r3
 802d89c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802d89e:	b10b      	cbz	r3, 802d8a4 <__sflush_r+0x44>
 802d8a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802d8a2:	1ad2      	subs	r2, r2, r3
 802d8a4:	2300      	movs	r3, #0
 802d8a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802d8a8:	6a21      	ldr	r1, [r4, #32]
 802d8aa:	4628      	mov	r0, r5
 802d8ac:	47b0      	blx	r6
 802d8ae:	1c43      	adds	r3, r0, #1
 802d8b0:	89a3      	ldrh	r3, [r4, #12]
 802d8b2:	d106      	bne.n	802d8c2 <__sflush_r+0x62>
 802d8b4:	6829      	ldr	r1, [r5, #0]
 802d8b6:	291d      	cmp	r1, #29
 802d8b8:	d82b      	bhi.n	802d912 <__sflush_r+0xb2>
 802d8ba:	4a2a      	ldr	r2, [pc, #168]	@ (802d964 <__sflush_r+0x104>)
 802d8bc:	40ca      	lsrs	r2, r1
 802d8be:	07d6      	lsls	r6, r2, #31
 802d8c0:	d527      	bpl.n	802d912 <__sflush_r+0xb2>
 802d8c2:	2200      	movs	r2, #0
 802d8c4:	04d9      	lsls	r1, r3, #19
 802d8c6:	6062      	str	r2, [r4, #4]
 802d8c8:	6922      	ldr	r2, [r4, #16]
 802d8ca:	6022      	str	r2, [r4, #0]
 802d8cc:	d504      	bpl.n	802d8d8 <__sflush_r+0x78>
 802d8ce:	1c42      	adds	r2, r0, #1
 802d8d0:	d101      	bne.n	802d8d6 <__sflush_r+0x76>
 802d8d2:	682b      	ldr	r3, [r5, #0]
 802d8d4:	b903      	cbnz	r3, 802d8d8 <__sflush_r+0x78>
 802d8d6:	6560      	str	r0, [r4, #84]	@ 0x54
 802d8d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802d8da:	602f      	str	r7, [r5, #0]
 802d8dc:	b1b9      	cbz	r1, 802d90e <__sflush_r+0xae>
 802d8de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802d8e2:	4299      	cmp	r1, r3
 802d8e4:	d002      	beq.n	802d8ec <__sflush_r+0x8c>
 802d8e6:	4628      	mov	r0, r5
 802d8e8:	f7ff fc9e 	bl	802d228 <_free_r>
 802d8ec:	2300      	movs	r3, #0
 802d8ee:	6363      	str	r3, [r4, #52]	@ 0x34
 802d8f0:	e00d      	b.n	802d90e <__sflush_r+0xae>
 802d8f2:	2301      	movs	r3, #1
 802d8f4:	4628      	mov	r0, r5
 802d8f6:	47b0      	blx	r6
 802d8f8:	4602      	mov	r2, r0
 802d8fa:	1c50      	adds	r0, r2, #1
 802d8fc:	d1c9      	bne.n	802d892 <__sflush_r+0x32>
 802d8fe:	682b      	ldr	r3, [r5, #0]
 802d900:	2b00      	cmp	r3, #0
 802d902:	d0c6      	beq.n	802d892 <__sflush_r+0x32>
 802d904:	2b1d      	cmp	r3, #29
 802d906:	d001      	beq.n	802d90c <__sflush_r+0xac>
 802d908:	2b16      	cmp	r3, #22
 802d90a:	d11d      	bne.n	802d948 <__sflush_r+0xe8>
 802d90c:	602f      	str	r7, [r5, #0]
 802d90e:	2000      	movs	r0, #0
 802d910:	e021      	b.n	802d956 <__sflush_r+0xf6>
 802d912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d916:	b21b      	sxth	r3, r3
 802d918:	e01a      	b.n	802d950 <__sflush_r+0xf0>
 802d91a:	690f      	ldr	r7, [r1, #16]
 802d91c:	2f00      	cmp	r7, #0
 802d91e:	d0f6      	beq.n	802d90e <__sflush_r+0xae>
 802d920:	0793      	lsls	r3, r2, #30
 802d922:	680e      	ldr	r6, [r1, #0]
 802d924:	600f      	str	r7, [r1, #0]
 802d926:	bf0c      	ite	eq
 802d928:	694b      	ldreq	r3, [r1, #20]
 802d92a:	2300      	movne	r3, #0
 802d92c:	eba6 0807 	sub.w	r8, r6, r7
 802d930:	608b      	str	r3, [r1, #8]
 802d932:	f1b8 0f00 	cmp.w	r8, #0
 802d936:	ddea      	ble.n	802d90e <__sflush_r+0xae>
 802d938:	4643      	mov	r3, r8
 802d93a:	463a      	mov	r2, r7
 802d93c:	6a21      	ldr	r1, [r4, #32]
 802d93e:	4628      	mov	r0, r5
 802d940:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802d942:	47b0      	blx	r6
 802d944:	2800      	cmp	r0, #0
 802d946:	dc08      	bgt.n	802d95a <__sflush_r+0xfa>
 802d948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d94c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d950:	f04f 30ff 	mov.w	r0, #4294967295
 802d954:	81a3      	strh	r3, [r4, #12]
 802d956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d95a:	4407      	add	r7, r0
 802d95c:	eba8 0800 	sub.w	r8, r8, r0
 802d960:	e7e7      	b.n	802d932 <__sflush_r+0xd2>
 802d962:	bf00      	nop
 802d964:	20400001 	.word	0x20400001

0802d968 <_fflush_r>:
 802d968:	b538      	push	{r3, r4, r5, lr}
 802d96a:	690b      	ldr	r3, [r1, #16]
 802d96c:	4605      	mov	r5, r0
 802d96e:	460c      	mov	r4, r1
 802d970:	b913      	cbnz	r3, 802d978 <_fflush_r+0x10>
 802d972:	2500      	movs	r5, #0
 802d974:	4628      	mov	r0, r5
 802d976:	bd38      	pop	{r3, r4, r5, pc}
 802d978:	b118      	cbz	r0, 802d982 <_fflush_r+0x1a>
 802d97a:	6a03      	ldr	r3, [r0, #32]
 802d97c:	b90b      	cbnz	r3, 802d982 <_fflush_r+0x1a>
 802d97e:	f7ff f989 	bl	802cc94 <__sinit>
 802d982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d986:	2b00      	cmp	r3, #0
 802d988:	d0f3      	beq.n	802d972 <_fflush_r+0xa>
 802d98a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802d98c:	07d0      	lsls	r0, r2, #31
 802d98e:	d404      	bmi.n	802d99a <_fflush_r+0x32>
 802d990:	0599      	lsls	r1, r3, #22
 802d992:	d402      	bmi.n	802d99a <_fflush_r+0x32>
 802d994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d996:	f7ff fbda 	bl	802d14e <__retarget_lock_acquire_recursive>
 802d99a:	4628      	mov	r0, r5
 802d99c:	4621      	mov	r1, r4
 802d99e:	f7ff ff5f 	bl	802d860 <__sflush_r>
 802d9a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d9a4:	4605      	mov	r5, r0
 802d9a6:	07da      	lsls	r2, r3, #31
 802d9a8:	d4e4      	bmi.n	802d974 <_fflush_r+0xc>
 802d9aa:	89a3      	ldrh	r3, [r4, #12]
 802d9ac:	059b      	lsls	r3, r3, #22
 802d9ae:	d4e1      	bmi.n	802d974 <_fflush_r+0xc>
 802d9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d9b2:	f7ff fbcd 	bl	802d150 <__retarget_lock_release_recursive>
 802d9b6:	e7dd      	b.n	802d974 <_fflush_r+0xc>

0802d9b8 <__swhatbuf_r>:
 802d9b8:	b570      	push	{r4, r5, r6, lr}
 802d9ba:	460c      	mov	r4, r1
 802d9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d9c0:	b096      	sub	sp, #88	@ 0x58
 802d9c2:	4615      	mov	r5, r2
 802d9c4:	2900      	cmp	r1, #0
 802d9c6:	461e      	mov	r6, r3
 802d9c8:	da0c      	bge.n	802d9e4 <__swhatbuf_r+0x2c>
 802d9ca:	89a3      	ldrh	r3, [r4, #12]
 802d9cc:	2100      	movs	r1, #0
 802d9ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802d9d2:	bf14      	ite	ne
 802d9d4:	2340      	movne	r3, #64	@ 0x40
 802d9d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802d9da:	2000      	movs	r0, #0
 802d9dc:	6031      	str	r1, [r6, #0]
 802d9de:	602b      	str	r3, [r5, #0]
 802d9e0:	b016      	add	sp, #88	@ 0x58
 802d9e2:	bd70      	pop	{r4, r5, r6, pc}
 802d9e4:	466a      	mov	r2, sp
 802d9e6:	f000 f849 	bl	802da7c <_fstat_r>
 802d9ea:	2800      	cmp	r0, #0
 802d9ec:	dbed      	blt.n	802d9ca <__swhatbuf_r+0x12>
 802d9ee:	9901      	ldr	r1, [sp, #4]
 802d9f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802d9f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802d9f8:	4259      	negs	r1, r3
 802d9fa:	4159      	adcs	r1, r3
 802d9fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802da00:	e7eb      	b.n	802d9da <__swhatbuf_r+0x22>

0802da02 <__smakebuf_r>:
 802da02:	898b      	ldrh	r3, [r1, #12]
 802da04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802da06:	079d      	lsls	r5, r3, #30
 802da08:	4606      	mov	r6, r0
 802da0a:	460c      	mov	r4, r1
 802da0c:	d507      	bpl.n	802da1e <__smakebuf_r+0x1c>
 802da0e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802da12:	6023      	str	r3, [r4, #0]
 802da14:	6123      	str	r3, [r4, #16]
 802da16:	2301      	movs	r3, #1
 802da18:	6163      	str	r3, [r4, #20]
 802da1a:	b003      	add	sp, #12
 802da1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802da1e:	ab01      	add	r3, sp, #4
 802da20:	466a      	mov	r2, sp
 802da22:	f7ff ffc9 	bl	802d9b8 <__swhatbuf_r>
 802da26:	9f00      	ldr	r7, [sp, #0]
 802da28:	4605      	mov	r5, r0
 802da2a:	4630      	mov	r0, r6
 802da2c:	4639      	mov	r1, r7
 802da2e:	f7ff f80b 	bl	802ca48 <_malloc_r>
 802da32:	b948      	cbnz	r0, 802da48 <__smakebuf_r+0x46>
 802da34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802da38:	059a      	lsls	r2, r3, #22
 802da3a:	d4ee      	bmi.n	802da1a <__smakebuf_r+0x18>
 802da3c:	f023 0303 	bic.w	r3, r3, #3
 802da40:	f043 0302 	orr.w	r3, r3, #2
 802da44:	81a3      	strh	r3, [r4, #12]
 802da46:	e7e2      	b.n	802da0e <__smakebuf_r+0xc>
 802da48:	89a3      	ldrh	r3, [r4, #12]
 802da4a:	6020      	str	r0, [r4, #0]
 802da4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802da50:	81a3      	strh	r3, [r4, #12]
 802da52:	9b01      	ldr	r3, [sp, #4]
 802da54:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802da58:	b15b      	cbz	r3, 802da72 <__smakebuf_r+0x70>
 802da5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802da5e:	4630      	mov	r0, r6
 802da60:	f000 f81e 	bl	802daa0 <_isatty_r>
 802da64:	b128      	cbz	r0, 802da72 <__smakebuf_r+0x70>
 802da66:	89a3      	ldrh	r3, [r4, #12]
 802da68:	f023 0303 	bic.w	r3, r3, #3
 802da6c:	f043 0301 	orr.w	r3, r3, #1
 802da70:	81a3      	strh	r3, [r4, #12]
 802da72:	89a3      	ldrh	r3, [r4, #12]
 802da74:	431d      	orrs	r5, r3
 802da76:	81a5      	strh	r5, [r4, #12]
 802da78:	e7cf      	b.n	802da1a <__smakebuf_r+0x18>
	...

0802da7c <_fstat_r>:
 802da7c:	b538      	push	{r3, r4, r5, lr}
 802da7e:	2300      	movs	r3, #0
 802da80:	4d06      	ldr	r5, [pc, #24]	@ (802da9c <_fstat_r+0x20>)
 802da82:	4604      	mov	r4, r0
 802da84:	4608      	mov	r0, r1
 802da86:	4611      	mov	r1, r2
 802da88:	602b      	str	r3, [r5, #0]
 802da8a:	f7d4 f80f 	bl	8001aac <_fstat>
 802da8e:	1c43      	adds	r3, r0, #1
 802da90:	d102      	bne.n	802da98 <_fstat_r+0x1c>
 802da92:	682b      	ldr	r3, [r5, #0]
 802da94:	b103      	cbz	r3, 802da98 <_fstat_r+0x1c>
 802da96:	6023      	str	r3, [r4, #0]
 802da98:	bd38      	pop	{r3, r4, r5, pc}
 802da9a:	bf00      	nop
 802da9c:	2005c644 	.word	0x2005c644

0802daa0 <_isatty_r>:
 802daa0:	b538      	push	{r3, r4, r5, lr}
 802daa2:	2300      	movs	r3, #0
 802daa4:	4d05      	ldr	r5, [pc, #20]	@ (802dabc <_isatty_r+0x1c>)
 802daa6:	4604      	mov	r4, r0
 802daa8:	4608      	mov	r0, r1
 802daaa:	602b      	str	r3, [r5, #0]
 802daac:	f7d4 f80e 	bl	8001acc <_isatty>
 802dab0:	1c43      	adds	r3, r0, #1
 802dab2:	d102      	bne.n	802daba <_isatty_r+0x1a>
 802dab4:	682b      	ldr	r3, [r5, #0]
 802dab6:	b103      	cbz	r3, 802daba <_isatty_r+0x1a>
 802dab8:	6023      	str	r3, [r4, #0]
 802daba:	bd38      	pop	{r3, r4, r5, pc}
 802dabc:	2005c644 	.word	0x2005c644

0802dac0 <memchr>:
 802dac0:	b2c9      	uxtb	r1, r1
 802dac2:	4603      	mov	r3, r0
 802dac4:	4402      	add	r2, r0
 802dac6:	b510      	push	{r4, lr}
 802dac8:	4293      	cmp	r3, r2
 802daca:	4618      	mov	r0, r3
 802dacc:	d101      	bne.n	802dad2 <memchr+0x12>
 802dace:	2000      	movs	r0, #0
 802dad0:	e003      	b.n	802dada <memchr+0x1a>
 802dad2:	7804      	ldrb	r4, [r0, #0]
 802dad4:	3301      	adds	r3, #1
 802dad6:	428c      	cmp	r4, r1
 802dad8:	d1f6      	bne.n	802dac8 <memchr+0x8>
 802dada:	bd10      	pop	{r4, pc}

0802dadc <_init>:
 802dadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dade:	bf00      	nop
 802dae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802dae2:	bc08      	pop	{r3}
 802dae4:	469e      	mov	lr, r3
 802dae6:	4770      	bx	lr

0802dae8 <_fini>:
 802dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802daea:	bf00      	nop
 802daec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802daee:	bc08      	pop	{r3}
 802daf0:	469e      	mov	lr, r3
 802daf2:	4770      	bx	lr
